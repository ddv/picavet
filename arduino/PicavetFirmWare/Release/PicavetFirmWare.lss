
PicavetFirmWare.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000370  00800100  00006018  000060ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006018  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000035d  00800470  00800470  0000641c  2**0
                  ALLOC
  3 .debug_aranges 00000f98  00000000  00000000  0000641c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00002b73  00000000  00000000  000073b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00016945  00000000  00000000  00009f27  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003d91  00000000  00000000  0002086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000bea9  00000000  00000000  000245fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001bb0  00000000  00000000  000304a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00005720  00000000  00000000  00032058  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000d0d8  00000000  00000000  00037778  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001038  00000000  00000000  00044850  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}


void SPIClass::end() {
  SPCR &= ~_BV(SPE);
}
       0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__ctors_end>
//
//*****************************************************************************
void __error__(CHAR *pcFilename, UINT32 ulLine)
{
	//TODO full up function
}
       4:	0c 94 37 2b 	jmp	0x566e	; 0x566e <__vector_1>
  CC3KPrinter->print(F("Free RAM: "));
  CC3KPrinter->print(getFreeRam());
  CC3KPrinter->println(F(" bytes"));
}

void uart_putchar(char c) {
       8:	0c 94 64 2b 	jmp	0x56c8	; 0x56c8 <__vector_2>

	// Send the command over SPI on data channel
	SpiWrite(pucBuff, ucArgsLength + ucDataLength + SIMPLE_LINK_HCI_DATA_CMND_HEADER_SIZE);

	return;
}
       c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>

	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_NETAPP_ARP_FLUSH, &scRet);

	return(scRet);
}
      10:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_EVNT_GETMSSVALUE, &ret);

	return ret;
}
      14:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
//!
//!  @sa      wlan_smart_config_start , wlan_smart_config_stop
//
//*****************************************************************************

INT32 wlan_smart_config_set_prefix(CHAR* cNewPrefix)
      18:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  g_SPIspeed = SPIspeed;

  cc3000Bitset.clear();

  CC3KPrinter = cc3kPrinter;
}
      1c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
*/
/**************************************************************************/

Adafruit_CC3000_ClientRef::Adafruit_CC3000_ClientRef(Adafruit_CC3000_Client* client)
  : _client(client) 
{ }
      20:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      }
#endif
  }
  
  DEBUGPRINT_F("\n\r\tCC3000: SpiWriteDataSynchronous End\n\r");
}
      24:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
//	}


}

void ParseRequestStr(String reqStr) {
      28:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      2c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
{
    _address[0] = first_octet;
    _address[1] = second_octet;
    _address[2] = third_octet;
    _address[3] = fourth_octet;
}
      30:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
      34:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
	if (index >= len || !buffer) {
		dummy_writable_char = 0;
		return dummy_writable_char;
	}
	return buffer[index];
}
      38:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      3c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      40:	0c 94 e3 2c 	jmp	0x59c6	; 0x59c6 <__vector_16>
      44:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      48:	0c 94 8f 26 	jmp	0x4d1e	; 0x4d1e <__vector_18>
      4c:	0c 94 dd 26 	jmp	0x4dba	; 0x4dba <__vector_19>
      50:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      54:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      58:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      5c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      60:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      64:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>

00000068 <_ZZ24displayConnectionDetailsE3__c_4>:
      68:	0a 44 4e 53 73 65 72 76 3a 20 00                    .DNSserv: .

00000073 <_ZZ24displayConnectionDetailsE3__c_3>:
      73:	0a 44 48 43 50 73 72 76 3a 20 00                    .DHCPsrv: .

0000007e <_ZZ24displayConnectionDetailsE3__c_2>:
      7e:	0a 47 61 74 65 77 61 79 3a 20 00                    .Gateway: .

00000089 <_ZZ24displayConnectionDetailsE3__c_1>:
      89:	0a 4e 65 74 6d 61 73 6b 3a 20 00                    .Netmask: .

00000094 <_ZZ24displayConnectionDetailsE3__c_0>:
      94:	0a 49 50 20 41 64 64 72 3a 20 00                    .IP Addr: .

0000009f <_ZZ24displayConnectionDetailsE3__c>:
      9f:	55 6e 61 62 6c 65 20 74 6f 20 72 65 74 72 69 65     Unable to retrie
      af:	76 65 20 74 68 65 20 49 50 20 41 64 64 72 65 73     ve the IP Addres
      bf:	73 21 0d 0a 00                                      s!...

000000c4 <_ZZ5setupE3__c_6>:
      c4:	4c 69 73 74 65 6e 69 6e 67 20 66 6f 72 20 63 6f     Listening for co
      d4:	6e 6e 65 63 74 69 6f 6e 73 2e 2e 2e 00              nnections....

000000e1 <_ZZ5setupE3__c_5>:
      e1:	52 65 71 75 65 73 74 20 44 48 43 50 00              Request DHCP.

000000ee <_ZZ5setupE3__c_4>:
      ee:	43 6f 6e 6e 65 63 74 65 64 21 00                    Connected!.

000000f9 <_ZZ5setupE3__c_3>:
      f9:	46 61 69 6c 65 64 21 00                             Failed!.

00000101 <_ZZ5setupE3__c_2>:
     101:	0a 41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 63     .Attempting to c
     111:	6f 6e 6e 65 63 74 20 74 6f 20 00                    onnect to .

0000011c <_ZZ5setupE3__c_1>:
     11c:	43 6f 75 6c 64 6e 27 74 20 62 65 67 69 6e 28 29     Couldn't begin()
     12c:	21 20 43 68 65 63 6b 20 79 6f 75 72 20 77 69 72     ! Check your wir
     13c:	69 6e 67 3f 00                                      ing?.

00000141 <_ZZ5setupE3__c_0>:
     141:	0a 49 6e 69 74 69 61 6c 69 7a 69 6e 67 2e 2e 2e     .Initializing...
	...

00000152 <_ZZ5setupE3__c>:
     152:	48 65 6c 6c 6f 2c 20 43 43 33 30 30 30 21 0a 00     Hello, CC3000!..

00000162 <port_to_mode_PGM>:
     162:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000016c <port_to_output_PGM>:
     16c:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000176 <port_to_input_PGM>:
     176:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000180 <digital_pin_to_port_PGM>:
     180:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     190:	03 03 03 03                                         ....

00000194 <digital_pin_to_bit_mask_PGM>:
     194:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     1a4:	04 08 10 20                                         ... 

000001a8 <digital_pin_to_timer_PGM>:
     1a8:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     1b8:	00 00 00 00                                         ....

000001bc <__ctors_start>:
     1bc:	9f 14       	cp	r9, r15
     1be:	9b 1d       	adc	r25, r11
     1c0:	1b 23       	and	r17, r27
     1c2:	49 28       	or	r4, r9
     1c4:	ab 28       	or	r10, r11

000001c6 <__ctors_end>:
     1c6:	11 24       	eor	r1, r1
     1c8:	1f be       	out	0x3f, r1	; 63
     1ca:	cf ef       	ldi	r28, 0xFF	; 255
     1cc:	d8 e0       	ldi	r29, 0x08	; 8
     1ce:	de bf       	out	0x3e, r29	; 62
     1d0:	cd bf       	out	0x3d, r28	; 61

000001d2 <__do_copy_data>:
     1d2:	14 e0       	ldi	r17, 0x04	; 4
     1d4:	a0 e0       	ldi	r26, 0x00	; 0
     1d6:	b1 e0       	ldi	r27, 0x01	; 1
     1d8:	e8 e1       	ldi	r30, 0x18	; 24
     1da:	f0 e6       	ldi	r31, 0x60	; 96
     1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <.do_copy_data_start>

000001de <.do_copy_data_loop>:
     1de:	05 90       	lpm	r0, Z+
     1e0:	0d 92       	st	X+, r0

000001e2 <.do_copy_data_start>:
     1e2:	a0 37       	cpi	r26, 0x70	; 112
     1e4:	b1 07       	cpc	r27, r17
     1e6:	d9 f7       	brne	.-10     	; 0x1de <.do_copy_data_loop>

000001e8 <__do_clear_bss>:
     1e8:	17 e0       	ldi	r17, 0x07	; 7
     1ea:	a0 e7       	ldi	r26, 0x70	; 112
     1ec:	b4 e0       	ldi	r27, 0x04	; 4
     1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <.do_clear_bss_start>

000001f0 <.do_clear_bss_loop>:
     1f0:	1d 92       	st	X+, r1

000001f2 <.do_clear_bss_start>:
     1f2:	ad 3c       	cpi	r26, 0xCD	; 205
     1f4:	b1 07       	cpc	r27, r17
     1f6:	e1 f7       	brne	.-8      	; 0x1f0 <.do_clear_bss_loop>

000001f8 <__do_global_ctors>:
     1f8:	11 e0       	ldi	r17, 0x01	; 1
     1fa:	c6 ec       	ldi	r28, 0xC6	; 198
     1fc:	d1 e0       	ldi	r29, 0x01	; 1
     1fe:	04 c0       	rjmp	.+8      	; 0x208 <.do_global_ctors_start>

00000200 <.do_global_ctors_loop>:
     200:	22 97       	sbiw	r28, 0x02	; 2
     202:	fe 01       	movw	r30, r28
     204:	0e 94 06 30 	call	0x600c	; 0x600c <__tablejump__>

00000208 <.do_global_ctors_start>:
     208:	cc 3b       	cpi	r28, 0xBC	; 188
     20a:	d1 07       	cpc	r29, r17
     20c:	c9 f7       	brne	.-14     	; 0x200 <.do_global_ctors_loop>
     20e:	0e 94 d4 2c 	call	0x59a8	; 0x59a8 <main>
     212:	0c 94 0a 30 	jmp	0x6014	; 0x6014 <_exit>

00000216 <__bad_interrupt>:
     216:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000021a <memcpy>:
     21a:	fb 01       	movw	r30, r22
     21c:	dc 01       	movw	r26, r24
     21e:	02 c0       	rjmp	.+4      	; 0x224 <memcpy+0xa>
     220:	01 90       	ld	r0, Z+
     222:	0d 92       	st	X+, r0
     224:	41 50       	subi	r20, 0x01	; 1
     226:	50 40       	sbci	r21, 0x00	; 0
     228:	d8 f7       	brcc	.-10     	; 0x220 <memcpy+0x6>
     22a:	08 95       	ret

0000022c <strcpy>:
     22c:	fb 01       	movw	r30, r22
     22e:	dc 01       	movw	r26, r24
     230:	01 90       	ld	r0, Z+
     232:	0d 92       	st	X+, r0
     234:	00 20       	and	r0, r0
     236:	e1 f7       	brne	.-8      	; 0x230 <strcpy+0x4>
     238:	08 95       	ret

0000023a <_ZN8SPIClass11setBitOrderEh>:

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  if(bitOrder == LSBFIRST) {
     23a:	88 23       	and	r24, r24
     23c:	19 f4       	brne	.+6      	; 0x244 <_ZN8SPIClass11setBitOrderEh+0xa>
    SPCR |= _BV(DORD);
     23e:	8c b5       	in	r24, 0x2c	; 44
     240:	80 62       	ori	r24, 0x20	; 32
     242:	02 c0       	rjmp	.+4      	; 0x248 <_ZN8SPIClass11setBitOrderEh+0xe>
  } else {
    SPCR &= ~(_BV(DORD));
     244:	8c b5       	in	r24, 0x2c	; 44
     246:	8f 7d       	andi	r24, 0xDF	; 223
     248:	8c bd       	out	0x2c, r24	; 44
     24a:	08 95       	ret

0000024c <_ZN8SPIClass11setDataModeEh>:
  }
}

void SPIClass::setDataMode(uint8_t mode)
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
     24c:	9c b5       	in	r25, 0x2c	; 44
     24e:	93 7f       	andi	r25, 0xF3	; 243
     250:	98 2b       	or	r25, r24
     252:	9c bd       	out	0x2c, r25	; 44
}
     254:	08 95       	ret

00000256 <_ZN8SPIClass15setClockDividerEh>:

void SPIClass::setClockDivider(uint8_t rate)
{
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
     256:	2c b5       	in	r18, 0x2c	; 44
     258:	38 2f       	mov	r19, r24
     25a:	33 70       	andi	r19, 0x03	; 3
     25c:	2c 7f       	andi	r18, 0xFC	; 252
     25e:	32 2b       	or	r19, r18
     260:	3c bd       	out	0x2c, r19	; 44
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
     262:	2d b5       	in	r18, 0x2d	; 45
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	95 95       	asr	r25
     268:	87 95       	ror	r24
     26a:	95 95       	asr	r25
     26c:	87 95       	ror	r24
     26e:	81 70       	andi	r24, 0x01	; 1
     270:	2e 7f       	andi	r18, 0xFE	; 254
     272:	82 2b       	or	r24, r18
     274:	8d bd       	out	0x2d, r24	; 45
}
     276:	08 95       	ret

00000278 <_ZN8SPIClass5beginEv>:
SPIClass SPI;

void SPIClass::begin() {

  // Set SS to high so a connected chip will be "deselected" by default
  digitalWrite(SS, HIGH);
     278:	8a e0       	ldi	r24, 0x0A	; 10
     27a:	61 e0       	ldi	r22, 0x01	; 1
     27c:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <digitalWrite>

  // When the SS pin is set as OUTPUT, it can be used as
  // a general purpose output port (it doesn't influence
  // SPI operations).
  pinMode(SS, OUTPUT);
     280:	8a e0       	ldi	r24, 0x0A	; 10
     282:	61 e0       	ldi	r22, 0x01	; 1
     284:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <pinMode>

  // Warning: if the SS pin ever becomes a LOW INPUT then SPI
  // automatically switches to Slave, so the data direction of
  // the SS pin MUST be kept as OUTPUT.
  SPCR |= _BV(MSTR);
     288:	8c b5       	in	r24, 0x2c	; 44
     28a:	80 61       	ori	r24, 0x10	; 16
     28c:	8c bd       	out	0x2c, r24	; 44
  SPCR |= _BV(SPE);
     28e:	8c b5       	in	r24, 0x2c	; 44
     290:	80 64       	ori	r24, 0x40	; 64
     292:	8c bd       	out	0x2c, r24	; 44
  // MISO pin automatically overrides to INPUT.
  // By doing this AFTER enabling SPI, we avoid accidentally
  // clocking in a single bit since the lines go directly
  // from "input" to SPI control.  
  // http://code.google.com/p/arduino/issues/detail?id=888
  pinMode(SCK, OUTPUT);
     294:	8d e0       	ldi	r24, 0x0D	; 13
     296:	61 e0       	ldi	r22, 0x01	; 1
     298:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <pinMode>
  pinMode(MOSI, OUTPUT);
     29c:	8b e0       	ldi	r24, 0x0B	; 11
     29e:	61 e0       	ldi	r22, 0x01	; 1
     2a0:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <pinMode>
}
     2a4:	08 95       	ret

000002a6 <UINT32_TO_STREAM_f>:
//!  @brief                This function is used for copying 32 bit to stream
//!						   while converting to little endian format.
//
//*****************************************************************************

UINT8* UINT32_TO_STREAM_f (UINT8 *p, UINT32 u32)
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	fc 01       	movw	r30, r24
{
	*(p)++ = (UINT8)(u32);
     2ac:	dc 01       	movw	r26, r24
     2ae:	4d 93       	st	X+, r20
     2b0:	9d 01       	movw	r18, r26
	*(p)++ = (UINT8)((u32) >> 8);
     2b2:	bb 27       	eor	r27, r27
     2b4:	a7 2f       	mov	r26, r23
     2b6:	96 2f       	mov	r25, r22
     2b8:	85 2f       	mov	r24, r21
     2ba:	81 83       	std	Z+1, r24	; 0x01
     2bc:	f9 01       	movw	r30, r18
     2be:	31 96       	adiw	r30, 0x01	; 1
	*(p)++ = (UINT8)((u32) >> 16);
     2c0:	cb 01       	movw	r24, r22
     2c2:	aa 27       	eor	r26, r26
     2c4:	bb 27       	eor	r27, r27
     2c6:	e9 01       	movw	r28, r18
     2c8:	89 83       	std	Y+1, r24	; 0x01
	*(p)++ = (UINT8)((u32) >> 24);
     2ca:	47 2f       	mov	r20, r23
     2cc:	55 27       	eor	r21, r21
     2ce:	66 27       	eor	r22, r22
     2d0:	77 27       	eor	r23, r23
     2d2:	41 83       	std	Z+1, r20	; 0x01
     2d4:	32 96       	adiw	r30, 0x02	; 2
	return p;
}
     2d6:	cf 01       	movw	r24, r30
     2d8:	df 91       	pop	r29
     2da:	cf 91       	pop	r28
     2dc:	08 95       	ret

000002de <UINT16_TO_STREAM_f>:
//!  @brief               This function is used for copying 16 bit to stream
//!                       while converting to little endian format.
//
//*****************************************************************************

UINT8* UINT16_TO_STREAM_f (UINT8 *p, UINT16 u16)
     2de:	dc 01       	movw	r26, r24
{
	*(p)++ = (UINT8)(u16);
     2e0:	fc 01       	movw	r30, r24
     2e2:	61 93       	st	Z+, r22
	*(p)++ = (UINT8)((u16) >> 8);
     2e4:	11 96       	adiw	r26, 0x01	; 1
     2e6:	7c 93       	st	X, r23
     2e8:	31 96       	adiw	r30, 0x01	; 1
	return p;
}
     2ea:	cf 01       	movw	r24, r30
     2ec:	08 95       	ret

000002ee <STREAM_TO_UINT16_f>:
//!  @brief               This function is used for copying received stream to
//!                       16 bit in little endian format.
//
//*****************************************************************************

UINT16 STREAM_TO_UINT16_f(CHAR* cp, UINT16 offset)
     2ee:	fb 01       	movw	r30, r22
{
  // Adafruit CC3k Host Driver Difference
  // Explicit cast to UINT8 pointer is required or decoding parameters breaks on Arduino.
  // Noted 12-12-2014 by tdicola
  UINT8 *p = (UINT8 *)cp;
     2f0:	e8 0f       	add	r30, r24
     2f2:	f9 1f       	adc	r31, r25
     2f4:	31 81       	ldd	r19, Z+1	; 0x01
     2f6:	20 e0       	ldi	r18, 0x00	; 0
     2f8:	80 81       	ld	r24, Z
     2fa:	28 0f       	add	r18, r24
     2fc:	31 1d       	adc	r19, r1
  DEBUGPRINT_F("\n\r");
  */

  return (UINT16)((UINT16)((UINT16)
          (*(p + offset + 1)) << 8) + (UINT16)(*(p + offset)));
}
     2fe:	c9 01       	movw	r24, r18
     300:	08 95       	ret

00000302 <STREAM_TO_UINT32_f>:
//!  @brief               This function is used for copying received stream to
//!                       32 bit in little endian format.
//
//*****************************************************************************

UINT32 STREAM_TO_UINT32_f(CHAR* cp, UINT16 offset)
     302:	fb 01       	movw	r30, r22
{
  // Adafruit CC3k Host Driver Difference
  // Explicit cast to UINT8 pointer is required or decoding parameters breaks on Arduino.
  // Noted 12-12-2014 by tdicola
  UINT8 *p = (UINT8 *)cp;
     304:	e8 0f       	add	r30, r24
     306:	f9 1f       	adc	r31, r25
     308:	23 81       	ldd	r18, Z+3	; 0x03
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	40 e0       	ldi	r20, 0x00	; 0
     30e:	50 e0       	ldi	r21, 0x00	; 0
     310:	52 2f       	mov	r21, r18
     312:	44 27       	eor	r20, r20
     314:	33 27       	eor	r19, r19
     316:	22 27       	eor	r18, r18
     318:	82 81       	ldd	r24, Z+2	; 0x02
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	a0 e0       	ldi	r26, 0x00	; 0
     31e:	b0 e0       	ldi	r27, 0x00	; 0
     320:	dc 01       	movw	r26, r24
     322:	99 27       	eor	r25, r25
     324:	88 27       	eor	r24, r24
     326:	28 0f       	add	r18, r24
     328:	39 1f       	adc	r19, r25
     32a:	4a 1f       	adc	r20, r26
     32c:	5b 1f       	adc	r21, r27
     32e:	80 81       	ld	r24, Z
     330:	28 0f       	add	r18, r24
     332:	31 1d       	adc	r19, r1
     334:	41 1d       	adc	r20, r1
     336:	51 1d       	adc	r21, r1
     338:	81 81       	ldd	r24, Z+1	; 0x01
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	a0 e0       	ldi	r26, 0x00	; 0
     33e:	b0 e0       	ldi	r27, 0x00	; 0
     340:	ba 2f       	mov	r27, r26
     342:	a9 2f       	mov	r26, r25
     344:	98 2f       	mov	r25, r24
     346:	88 27       	eor	r24, r24
     348:	28 0f       	add	r18, r24
     34a:	39 1f       	adc	r19, r25
     34c:	4a 1f       	adc	r20, r26
     34e:	5b 1f       	adc	r21, r27

  return (UINT32)((UINT32)((UINT32)
	(*(p + offset + 3)) << 24) + (UINT32)((UINT32)
	(*(p + offset + 2)) << 16) + (UINT32)((UINT32)
	(*(p + offset + 1)) << 8) + (UINT32)(*(p + offset)));
}
     350:	b9 01       	movw	r22, r18
     352:	ca 01       	movw	r24, r20
     354:	08 95       	ret

00000356 <_Z10getFreeRamv>:
int getFreeRam(void) {
  char top;
  return &top - reinterpret_cast<char*>(sbrk(0));
}
#else // AVR 
int getFreeRam(void)
     356:	df 93       	push	r29
     358:	cf 93       	push	r28
     35a:	00 d0       	rcall	.+0      	; 0x35c <_Z10getFreeRamv+0x6>
     35c:	cd b7       	in	r28, 0x3d	; 61
     35e:	de b7       	in	r29, 0x3e	; 62
{
  extern int  __bss_end;
  extern int  *__brkval;
  int free_memory;
  if((int)__brkval == 0) {
     360:	20 91 c7 07 	lds	r18, 0x07C7
     364:	30 91 c8 07 	lds	r19, 0x07C8
     368:	ce 01       	movw	r24, r28
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	21 15       	cp	r18, r1
     36e:	31 05       	cpc	r19, r1
     370:	19 f4       	brne	.+6      	; 0x378 <_Z10getFreeRamv+0x22>
    free_memory = ((int)&free_memory) - ((int)&__bss_end);
     372:	8d 5c       	subi	r24, 0xCD	; 205
     374:	97 40       	sbci	r25, 0x07	; 7
     376:	02 c0       	rjmp	.+4      	; 0x37c <_Z10getFreeRamv+0x26>
  }
  else {
    free_memory = ((int)&free_memory) - ((int)__brkval);
     378:	82 1b       	sub	r24, r18
     37a:	93 0b       	sbc	r25, r19
     37c:	9a 83       	std	Y+2, r25	; 0x02
     37e:	89 83       	std	Y+1, r24	; 0x01
  }

  return free_memory;
} 
     380:	89 81       	ldd	r24, Y+1	; 0x01
     382:	9a 81       	ldd	r25, Y+2	; 0x02
     384:	0f 90       	pop	r0
     386:	0f 90       	pop	r0
     388:	cf 91       	pop	r28
     38a:	df 91       	pop	r29
     38c:	08 95       	ret

0000038e <set_socket_active_status>:
//!
//!  @brief          Check if the socket ID and status are valid and set 
//!                  accordingly  the global socket status
//
//*****************************************************************************
void set_socket_active_status(INT32 Sd, INT32 Status)
     38e:	af 92       	push	r10
     390:	bf 92       	push	r11
     392:	cf 92       	push	r12
     394:	df 92       	push	r13
     396:	ef 92       	push	r14
     398:	ff 92       	push	r15
     39a:	0f 93       	push	r16
     39c:	1f 93       	push	r17
     39e:	59 01       	movw	r10, r18
     3a0:	6a 01       	movw	r12, r20
{
	if(M_IS_VALID_SD(Sd) && M_IS_VALID_STATUS(Status))
     3a2:	68 30       	cpi	r22, 0x08	; 8
     3a4:	71 05       	cpc	r23, r1
     3a6:	81 05       	cpc	r24, r1
     3a8:	91 05       	cpc	r25, r1
     3aa:	a0 f5       	brcc	.+104    	; 0x414 <set_socket_active_status+0x86>
     3ac:	22 e0       	ldi	r18, 0x02	; 2
     3ae:	a2 16       	cp	r10, r18
     3b0:	b1 04       	cpc	r11, r1
     3b2:	c1 04       	cpc	r12, r1
     3b4:	d1 04       	cpc	r13, r1
     3b6:	70 f5       	brcc	.+92     	; 0x414 <set_socket_active_status+0x86>
	{
		socket_active_status &= ~(1 << Sd);      /* clean socket's mask */
		socket_active_status |= (Status << Sd); /* set new socket's mask */
     3b8:	21 e0       	ldi	r18, 0x01	; 1
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	06 2e       	mov	r0, r22
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <set_socket_active_status+0x36>
     3c0:	22 0f       	add	r18, r18
     3c2:	33 1f       	adc	r19, r19
     3c4:	0a 94       	dec	r0
     3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <set_socket_active_status+0x32>
     3c8:	20 95       	com	r18
     3ca:	30 95       	com	r19
     3cc:	44 27       	eor	r20, r20
     3ce:	37 fd       	sbrc	r19, 7
     3d0:	40 95       	com	r20
     3d2:	54 2f       	mov	r21, r20
     3d4:	e0 90 ce 03 	lds	r14, 0x03CE
     3d8:	f0 90 cf 03 	lds	r15, 0x03CF
     3dc:	00 91 d0 03 	lds	r16, 0x03D0
     3e0:	10 91 d1 03 	lds	r17, 0x03D1
     3e4:	2e 21       	and	r18, r14
     3e6:	3f 21       	and	r19, r15
     3e8:	40 23       	and	r20, r16
     3ea:	51 23       	and	r21, r17
     3ec:	06 2e       	mov	r0, r22
     3ee:	04 c0       	rjmp	.+8      	; 0x3f8 <set_socket_active_status+0x6a>
     3f0:	aa 0c       	add	r10, r10
     3f2:	bb 1c       	adc	r11, r11
     3f4:	cc 1c       	adc	r12, r12
     3f6:	dd 1c       	adc	r13, r13
     3f8:	0a 94       	dec	r0
     3fa:	d2 f7       	brpl	.-12     	; 0x3f0 <set_socket_active_status+0x62>
     3fc:	2a 29       	or	r18, r10
     3fe:	3b 29       	or	r19, r11
     400:	4c 29       	or	r20, r12
     402:	5d 29       	or	r21, r13
     404:	20 93 ce 03 	sts	0x03CE, r18
     408:	30 93 cf 03 	sts	0x03CF, r19
     40c:	40 93 d0 03 	sts	0x03D0, r20
     410:	50 93 d1 03 	sts	0x03D1, r21
	}
}
     414:	1f 91       	pop	r17
     416:	0f 91       	pop	r16
     418:	ff 90       	pop	r15
     41a:	ef 90       	pop	r14
     41c:	df 90       	pop	r13
     41e:	cf 90       	pop	r12
     420:	bf 90       	pop	r11
     422:	af 90       	pop	r10
     424:	08 95       	ret

00000426 <get_socket_active_status>:
//!
//!  @brief  Retrieve socket status
//
//*****************************************************************************

INT32 get_socket_active_status(INT32 Sd)
     426:	9b 01       	movw	r18, r22
     428:	ac 01       	movw	r20, r24
{
	if(M_IS_VALID_SD(Sd))
     42a:	68 30       	cpi	r22, 0x08	; 8
     42c:	71 05       	cpc	r23, r1
     42e:	81 05       	cpc	r24, r1
     430:	91 05       	cpc	r25, r1
     432:	e8 f4       	brcc	.+58     	; 0x46e <get_socket_active_status+0x48>
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	02 c0       	rjmp	.+4      	; 0x43e <get_socket_active_status+0x18>
     43a:	88 0f       	add	r24, r24
     43c:	99 1f       	adc	r25, r25
     43e:	2a 95       	dec	r18
     440:	e2 f7       	brpl	.-8      	; 0x43a <get_socket_active_status+0x14>
     442:	9c 01       	movw	r18, r24
     444:	44 27       	eor	r20, r20
     446:	37 fd       	sbrc	r19, 7
     448:	40 95       	com	r20
     44a:	54 2f       	mov	r21, r20
     44c:	80 91 ce 03 	lds	r24, 0x03CE
     450:	90 91 cf 03 	lds	r25, 0x03CF
     454:	a0 91 d0 03 	lds	r26, 0x03D0
     458:	b0 91 d1 03 	lds	r27, 0x03D1
     45c:	28 23       	and	r18, r24
     45e:	39 23       	and	r19, r25
     460:	4a 23       	and	r20, r26
     462:	5b 23       	and	r21, r27
     464:	21 15       	cp	r18, r1
     466:	31 05       	cpc	r19, r1
     468:	41 05       	cpc	r20, r1
     46a:	51 05       	cpc	r21, r1
     46c:	21 f0       	breq	.+8      	; 0x476 <get_socket_active_status+0x50>
     46e:	21 e0       	ldi	r18, 0x01	; 1
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	40 e0       	ldi	r20, 0x00	; 0
     474:	50 e0       	ldi	r21, 0x00	; 0
	{
		return (socket_active_status & (1 << Sd)) ? SOCKET_STATUS_INACTIVE : SOCKET_STATUS_ACTIVE;
	}
	return SOCKET_STATUS_INACTIVE;
}
     476:	b9 01       	movw	r22, r18
     478:	ca 01       	movw	r24, r20
     47a:	08 95       	ret

0000047c <hci_unsol_event_handler>:
//!                      0 if event is not supported
//!
//!  @brief              Handle unsolicited events
//
//*****************************************************************************
INT32 hci_unsol_event_handler(CHAR *event_hdr)
     47c:	8f 92       	push	r8
     47e:	9f 92       	push	r9
     480:	af 92       	push	r10
     482:	bf 92       	push	r11
     484:	cf 92       	push	r12
     486:	df 92       	push	r13
     488:	ef 92       	push	r14
     48a:	ff 92       	push	r15
     48c:	0f 93       	push	r16
     48e:	1f 93       	push	r17
     490:	df 93       	push	r29
     492:	cf 93       	push	r28
     494:	cd b7       	in	r28, 0x3d	; 61
     496:	de b7       	in	r29, 0x3e	; 62
     498:	a9 97       	sbiw	r28, 0x29	; 41
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	f8 94       	cli
     49e:	de bf       	out	0x3e, r29	; 62
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	cd bf       	out	0x3d, r28	; 61
     4a4:	8c 01       	movw	r16, r24
	CHAR * data = NULL;
	INT32 event_type;
	UINT32 NumberOfReleasedPackets;
	UINT32 NumberOfSentPackets;

	STREAM_TO_UINT16(event_hdr, HCI_EVENT_OPCODE_OFFSET,event_type);
     4a6:	61 e0       	ldi	r22, 0x01	; 1
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	0e 94 77 01 	call	0x2ee	; 0x2ee <STREAM_TO_UINT16_f>
     4ae:	9c 01       	movw	r18, r24
     4b0:	6c 01       	movw	r12, r24
     4b2:	ee 24       	eor	r14, r14
     4b4:	ff 24       	eor	r15, r15
	// Extra debug output.
	// Noted 12-12-2014 by tdicola
	DEBUGPRINT_F("\tHCI_UNSOL_EVT: ");
	DEBUGPRINT_HEX16(event_type);

	if (event_type & HCI_EVNT_UNSOL_BASE)
     4b6:	d6 fe       	sbrs	r13, 6
     4b8:	6d c0       	rjmp	.+218    	; 0x594 <hci_unsol_event_handler+0x118>
	{
		switch(event_type)
     4ba:	81 e4       	ldi	r24, 0x41	; 65
     4bc:	20 30       	cpi	r18, 0x00	; 0
     4be:	38 07       	cpc	r19, r24
     4c0:	09 f0       	breq	.+2      	; 0x4c4 <hci_unsol_event_handler+0x48>
     4c2:	68 c0       	rjmp	.+208    	; 0x594 <hci_unsol_event_handler+0x118>
	INT32 temp, value;
	UINT16 i;
	UINT16  pusNumberOfHandles=0;
	CHAR *pReadPayload;

	STREAM_TO_UINT16((CHAR *)pEvent,HCI_EVENT_HEADER_SIZE,pusNumberOfHandles);
     4c4:	c8 01       	movw	r24, r16
     4c6:	65 e0       	ldi	r22, 0x05	; 5
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	0e 94 77 01 	call	0x2ee	; 0x2ee <STREAM_TO_UINT16_f>
     4ce:	4c 01       	movw	r8, r24
	pReadPayload = ((CHAR *)pEvent +
		HCI_EVENT_HEADER_SIZE + sizeof(pusNumberOfHandles));	
     4d0:	97 e0       	ldi	r25, 0x07	; 7
     4d2:	a9 2e       	mov	r10, r25
     4d4:	b1 2c       	mov	r11, r1
     4d6:	a0 0e       	add	r10, r16
     4d8:	b1 1e       	adc	r11, r17
     4da:	cc 24       	eor	r12, r12
     4dc:	dd 24       	eor	r13, r13
     4de:	ee 24       	eor	r14, r14
     4e0:	ff 24       	eor	r15, r15
     4e2:	87 01       	movw	r16, r14
     4e4:	12 c0       	rjmp	.+36     	; 0x50a <hci_unsol_event_handler+0x8e>
	temp = 0;

	for(i = 0; i < pusNumberOfHandles ; i++)
	{
		STREAM_TO_UINT16(pReadPayload, FLOW_CONTROL_EVENT_FREE_BUFFS_OFFSET, value);
     4e6:	c5 01       	movw	r24, r10
     4e8:	62 e0       	ldi	r22, 0x02	; 2
     4ea:	70 e0       	ldi	r23, 0x00	; 0
     4ec:	0e 94 77 01 	call	0x2ee	; 0x2ee <STREAM_TO_UINT16_f>
		temp += value;
     4f0:	a0 e0       	ldi	r26, 0x00	; 0
     4f2:	b0 e0       	ldi	r27, 0x00	; 0
     4f4:	e8 0e       	add	r14, r24
     4f6:	f9 1e       	adc	r15, r25
     4f8:	0a 1f       	adc	r16, r26
     4fa:	1b 1f       	adc	r17, r27
		pReadPayload += FLOW_CONTROL_EVENT_SIZE;  
     4fc:	a4 e0       	ldi	r26, 0x04	; 4
     4fe:	b0 e0       	ldi	r27, 0x00	; 0
     500:	aa 0e       	add	r10, r26
     502:	bb 1e       	adc	r11, r27
	STREAM_TO_UINT16((CHAR *)pEvent,HCI_EVENT_HEADER_SIZE,pusNumberOfHandles);
	pReadPayload = ((CHAR *)pEvent +
		HCI_EVENT_HEADER_SIZE + sizeof(pusNumberOfHandles));	
	temp = 0;

	for(i = 0; i < pusNumberOfHandles ; i++)
     504:	08 94       	sec
     506:	c1 1c       	adc	r12, r1
     508:	d1 1c       	adc	r13, r1
     50a:	c8 14       	cp	r12, r8
     50c:	d9 04       	cpc	r13, r9
     50e:	58 f3       	brcs	.-42     	; 0x4e6 <hci_unsol_event_handler+0x6a>
		STREAM_TO_UINT16(pReadPayload, FLOW_CONTROL_EVENT_FREE_BUFFS_OFFSET, value);
		temp += value;
		pReadPayload += FLOW_CONTROL_EVENT_SIZE;  
	}

	tSLInformation.usNumberOfFreeBuffers += temp;
     510:	80 91 8c 04 	lds	r24, 0x048C
     514:	90 91 8d 04 	lds	r25, 0x048D
     518:	8e 0d       	add	r24, r14
     51a:	9f 1d       	adc	r25, r15
     51c:	90 93 8d 04 	sts	0x048D, r25
     520:	80 93 8c 04 	sts	0x048C, r24
	tSLInformation.NumberOfReleasedPackets += temp;
     524:	80 91 98 04 	lds	r24, 0x0498
     528:	90 91 99 04 	lds	r25, 0x0499
     52c:	a0 91 9a 04 	lds	r26, 0x049A
     530:	b0 91 9b 04 	lds	r27, 0x049B
     534:	e8 0e       	add	r14, r24
     536:	f9 1e       	adc	r15, r25
     538:	0a 1f       	adc	r16, r26
     53a:	1b 1f       	adc	r17, r27
     53c:	e0 92 98 04 	sts	0x0498, r14
     540:	f0 92 99 04 	sts	0x0499, r15
     544:	00 93 9a 04 	sts	0x049A, r16
     548:	10 93 9b 04 	sts	0x049B, r17

		case HCI_EVNT_DATA_UNSOL_FREE_BUFF:
			{
				hci_event_unsol_flowcontrol_handler(event_hdr);

				NumberOfReleasedPackets = tSLInformation.NumberOfReleasedPackets;
     54c:	20 91 98 04 	lds	r18, 0x0498
     550:	30 91 99 04 	lds	r19, 0x0499
     554:	40 91 9a 04 	lds	r20, 0x049A
     558:	50 91 9b 04 	lds	r21, 0x049B
				NumberOfSentPackets = tSLInformation.NumberOfSentPackets;
     55c:	80 91 94 04 	lds	r24, 0x0494
     560:	90 91 95 04 	lds	r25, 0x0495
     564:	a0 91 96 04 	lds	r26, 0x0496
     568:	b0 91 97 04 	lds	r27, 0x0497

				if (NumberOfReleasedPackets == NumberOfSentPackets)
     56c:	28 17       	cp	r18, r24
     56e:	39 07       	cpc	r19, r25
     570:	4a 07       	cpc	r20, r26
     572:	5b 07       	cpc	r21, r27
     574:	09 f0       	breq	.+2      	; 0x578 <hci_unsol_event_handler+0xfc>
     576:	ad c0       	rjmp	.+346    	; 0x6d2 <hci_unsol_event_handler+0x256>
				{
					if (tSLInformation.InformHostOnTxComplete)
     578:	80 91 9c 04 	lds	r24, 0x049C
     57c:	88 23       	and	r24, r24
     57e:	09 f4       	brne	.+2      	; 0x582 <hci_unsol_event_handler+0x106>
     580:	a8 c0       	rjmp	.+336    	; 0x6d2 <hci_unsol_event_handler+0x256>
					{
						tSLInformation.sWlanCB(HCI_EVENT_CC3000_CAN_SHUT_DOWN, NULL, 0);
     582:	e0 91 7e 04 	lds	r30, 0x047E
     586:	f0 91 7f 04 	lds	r31, 0x047F
     58a:	69 e9       	ldi	r22, 0x99	; 153
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	4a c0       	rjmp	.+148    	; 0x628 <hci_unsol_event_handler+0x1ac>

			}
		}
	}

	if(event_type & HCI_EVNT_WLAN_UNSOL_BASE)
     594:	c6 01       	movw	r24, r12
     596:	80 70       	andi	r24, 0x00	; 0
     598:	90 78       	andi	r25, 0x80	; 128
     59a:	89 2b       	or	r24, r25
     59c:	09 f4       	brne	.+2      	; 0x5a0 <hci_unsol_event_handler+0x124>
     59e:	f2 c0       	rjmp	.+484    	; 0x784 <hci_unsol_event_handler+0x308>
	{           
		switch(event_type)
     5a0:	b0 e8       	ldi	r27, 0x80	; 128
     5a2:	20 34       	cpi	r18, 0x40	; 64
     5a4:	3b 07       	cpc	r19, r27
     5a6:	09 f4       	brne	.+2      	; 0x5aa <hci_unsol_event_handler+0x12e>
     5a8:	99 c0       	rjmp	.+306    	; 0x6dc <hci_unsol_event_handler+0x260>
     5aa:	e0 e8       	ldi	r30, 0x80	; 128
     5ac:	21 34       	cpi	r18, 0x41	; 65
     5ae:	3e 07       	cpc	r19, r30
     5b0:	a0 f4       	brcc	.+40     	; 0x5da <hci_unsol_event_handler+0x15e>
     5b2:	f0 e8       	ldi	r31, 0x80	; 128
     5b4:	24 30       	cpi	r18, 0x04	; 4
     5b6:	3f 07       	cpc	r19, r31
     5b8:	51 f1       	breq	.+84     	; 0x60e <hci_unsol_event_handler+0x192>
     5ba:	80 e8       	ldi	r24, 0x80	; 128
     5bc:	25 30       	cpi	r18, 0x05	; 5
     5be:	38 07       	cpc	r19, r24
     5c0:	38 f4       	brcc	.+14     	; 0x5d0 <hci_unsol_event_handler+0x154>
     5c2:	21 50       	subi	r18, 0x01	; 1
     5c4:	30 48       	sbci	r19, 0x80	; 128
     5c6:	22 30       	cpi	r18, 0x02	; 2
     5c8:	31 05       	cpc	r19, r1
     5ca:	08 f0       	brcs	.+2      	; 0x5ce <hci_unsol_event_handler+0x152>
     5cc:	7e c1       	rjmp	.+764    	; 0x8ca <hci_unsol_event_handler+0x44e>
     5ce:	1f c0       	rjmp	.+62     	; 0x60e <hci_unsol_event_handler+0x192>
     5d0:	20 51       	subi	r18, 0x10	; 16
     5d2:	30 48       	sbci	r19, 0x80	; 128
     5d4:	09 f0       	breq	.+2      	; 0x5d8 <hci_unsol_event_handler+0x15c>
     5d6:	79 c1       	rjmp	.+754    	; 0x8ca <hci_unsol_event_handler+0x44e>
     5d8:	2b c0       	rjmp	.+86     	; 0x630 <hci_unsol_event_handler+0x1b4>
     5da:	a4 e8       	ldi	r26, 0x84	; 132
     5dc:	20 30       	cpi	r18, 0x00	; 0
     5de:	3a 07       	cpc	r19, r26
     5e0:	b1 f0       	breq	.+44     	; 0x60e <hci_unsol_event_handler+0x192>
     5e2:	b4 e8       	ldi	r27, 0x84	; 132
     5e4:	21 30       	cpi	r18, 0x01	; 1
     5e6:	3b 07       	cpc	r19, r27
     5e8:	48 f4       	brcc	.+18     	; 0x5fc <hci_unsol_event_handler+0x180>
     5ea:	e0 e8       	ldi	r30, 0x80	; 128
     5ec:	20 38       	cpi	r18, 0x80	; 128
     5ee:	3e 07       	cpc	r19, r30
     5f0:	71 f0       	breq	.+28     	; 0x60e <hci_unsol_event_handler+0x192>
     5f2:	20 50       	subi	r18, 0x00	; 0
     5f4:	32 48       	sbci	r19, 0x82	; 130
     5f6:	09 f0       	breq	.+2      	; 0x5fa <hci_unsol_event_handler+0x17e>
     5f8:	68 c1       	rjmp	.+720    	; 0x8ca <hci_unsol_event_handler+0x44e>
     5fa:	09 c0       	rjmp	.+18     	; 0x60e <hci_unsol_event_handler+0x192>
     5fc:	88 e8       	ldi	r24, 0x88	; 136
     5fe:	20 30       	cpi	r18, 0x00	; 0
     600:	38 07       	cpc	r19, r24
     602:	09 f4       	brne	.+2      	; 0x606 <hci_unsol_event_handler+0x18a>
     604:	ad c0       	rjmp	.+346    	; 0x760 <hci_unsol_event_handler+0x2e4>
     606:	20 50       	subi	r18, 0x00	; 0
     608:	39 48       	sbci	r19, 0x89	; 137
     60a:	09 f0       	breq	.+2      	; 0x60e <hci_unsol_event_handler+0x192>
     60c:	5e c1       	rjmp	.+700    	; 0x8ca <hci_unsol_event_handler+0x44e>
		case HCI_EVNT_WLAN_UNSOL_CONNECT:
		case HCI_EVNT_WLAN_UNSOL_DISCONNECT:
		case HCI_EVNT_WLAN_UNSOL_INIT:
		case HCI_EVNT_WLAN_ASYNC_SIMPLE_CONFIG_DONE:

			if( tSLInformation.sWlanCB )
     60e:	80 91 7e 04 	lds	r24, 0x047E
     612:	90 91 7f 04 	lds	r25, 0x047F
     616:	89 2b       	or	r24, r25
     618:	09 f4       	brne	.+2      	; 0x61c <hci_unsol_event_handler+0x1a0>
     61a:	5b c0       	rjmp	.+182    	; 0x6d2 <hci_unsol_event_handler+0x256>
			{
				tSLInformation.sWlanCB(event_type, 0, 0);
     61c:	e0 91 7e 04 	lds	r30, 0x047E
     620:	f0 91 7f 04 	lds	r31, 0x047F
     624:	c7 01       	movw	r24, r14
     626:	b6 01       	movw	r22, r12
     628:	40 e0       	ldi	r20, 0x00	; 0
     62a:	50 e0       	ldi	r21, 0x00	; 0
     62c:	20 e0       	ldi	r18, 0x00	; 0
     62e:	50 c0       	rjmp	.+160    	; 0x6d0 <hci_unsol_event_handler+0x254>
		case HCI_EVNT_WLAN_UNSOL_DHCP:
			{
				UINT8	params[NETAPP_IPCONFIG_MAC_OFFSET + 1];	// extra byte is for the status
				UINT8 *recParams = params;

				data = (CHAR*)(event_hdr) + HCI_EVENT_HEADER_SIZE;
     630:	f8 01       	movw	r30, r16
     632:	35 96       	adiw	r30, 0x05	; 5

				//Read IP address
				STREAM_TO_STREAM(data,recParams,NETAPP_IPCONFIG_IP_LENGTH);
     634:	d8 01       	movw	r26, r16
     636:	15 96       	adiw	r26, 0x05	; 5
     638:	8c 91       	ld	r24, X
     63a:	15 97       	sbiw	r26, 0x05	; 5
     63c:	8d 8b       	std	Y+21, r24	; 0x15
     63e:	81 81       	ldd	r24, Z+1	; 0x01
     640:	8e 8b       	std	Y+22, r24	; 0x16
     642:	82 81       	ldd	r24, Z+2	; 0x02
     644:	8f 8b       	std	Y+23, r24	; 0x17
     646:	83 81       	ldd	r24, Z+3	; 0x03
     648:	88 8f       	std	Y+24, r24	; 0x18
				data += 4;
     64a:	f8 01       	movw	r30, r16
     64c:	39 96       	adiw	r30, 0x09	; 9
				localIP[1] = *(recParams-NETAPP_IPCONFIG_IP_LENGTH + 1);
				localIP[2] = *(recParams-NETAPP_IPCONFIG_IP_LENGTH + 2);
				localIP[3] = *(recParams-NETAPP_IPCONFIG_IP_LENGTH + 3);
#endif
				//Read subnet
				STREAM_TO_STREAM(data,recParams,NETAPP_IPCONFIG_IP_LENGTH);
     64e:	19 96       	adiw	r26, 0x09	; 9
     650:	8c 91       	ld	r24, X
     652:	19 97       	sbiw	r26, 0x09	; 9
     654:	89 8f       	std	Y+25, r24	; 0x19
     656:	81 81       	ldd	r24, Z+1	; 0x01
     658:	8a 8f       	std	Y+26, r24	; 0x1a
     65a:	82 81       	ldd	r24, Z+2	; 0x02
     65c:	8b 8f       	std	Y+27, r24	; 0x1b
     65e:	83 81       	ldd	r24, Z+3	; 0x03
     660:	8c 8f       	std	Y+28, r24	; 0x1c
				data += 4;
     662:	f8 01       	movw	r30, r16
     664:	3d 96       	adiw	r30, 0x0d	; 13
				//Read default GW
				STREAM_TO_STREAM(data,recParams,NETAPP_IPCONFIG_IP_LENGTH); 
     666:	1d 96       	adiw	r26, 0x0d	; 13
     668:	8c 91       	ld	r24, X
     66a:	1d 97       	sbiw	r26, 0x0d	; 13
     66c:	8d 8f       	std	Y+29, r24	; 0x1d
     66e:	81 81       	ldd	r24, Z+1	; 0x01
     670:	8e 8f       	std	Y+30, r24	; 0x1e
     672:	82 81       	ldd	r24, Z+2	; 0x02
     674:	8f 8f       	std	Y+31, r24	; 0x1f
     676:	83 81       	ldd	r24, Z+3	; 0x03
     678:	88 a3       	std	Y+32, r24	; 0x20
				data += 4;
     67a:	f8 01       	movw	r30, r16
     67c:	71 96       	adiw	r30, 0x11	; 17
				//Read DHCP server  
				STREAM_TO_STREAM(data,recParams,NETAPP_IPCONFIG_IP_LENGTH);     
     67e:	51 96       	adiw	r26, 0x11	; 17
     680:	8c 91       	ld	r24, X
     682:	51 97       	sbiw	r26, 0x11	; 17
     684:	89 a3       	std	Y+33, r24	; 0x21
     686:	81 81       	ldd	r24, Z+1	; 0x01
     688:	8a a3       	std	Y+34, r24	; 0x22
     68a:	82 81       	ldd	r24, Z+2	; 0x02
     68c:	8b a3       	std	Y+35, r24	; 0x23
     68e:	83 81       	ldd	r24, Z+3	; 0x03
     690:	8c a3       	std	Y+36, r24	; 0x24
				data += 4;
				//Read DNS server  
				STREAM_TO_STREAM(data,recParams,NETAPP_IPCONFIG_IP_LENGTH); 
     692:	f8 01       	movw	r30, r16
     694:	75 96       	adiw	r30, 0x15	; 21
     696:	55 96       	adiw	r26, 0x15	; 21
     698:	8c 91       	ld	r24, X
     69a:	55 97       	sbiw	r26, 0x15	; 21
     69c:	8d a3       	std	Y+37, r24	; 0x25
     69e:	81 81       	ldd	r24, Z+1	; 0x01
     6a0:	8e a3       	std	Y+38, r24	; 0x26
     6a2:	82 81       	ldd	r24, Z+2	; 0x02
     6a4:	8f a3       	std	Y+39, r24	; 0x27
     6a6:	83 81       	ldd	r24, Z+3	; 0x03
     6a8:	88 a7       	std	Y+40, r24	; 0x28
				// read the status
				STREAM_TO_UINT8(event_hdr, HCI_EVENT_STATUS_OFFSET, *recParams);
     6aa:	14 96       	adiw	r26, 0x04	; 4
     6ac:	8c 91       	ld	r24, X
     6ae:	89 a7       	std	Y+41, r24	; 0x29


				if( tSLInformation.sWlanCB )
     6b0:	80 91 7e 04 	lds	r24, 0x047E
     6b4:	90 91 7f 04 	lds	r25, 0x047F
     6b8:	89 2b       	or	r24, r25
     6ba:	59 f0       	breq	.+22     	; 0x6d2 <hci_unsol_event_handler+0x256>
				{
					tSLInformation.sWlanCB(event_type, (CHAR *)params, sizeof(params));
     6bc:	e0 91 7e 04 	lds	r30, 0x047E
     6c0:	f0 91 7f 04 	lds	r31, 0x047F
     6c4:	c7 01       	movw	r24, r14
     6c6:	b6 01       	movw	r22, r12
     6c8:	ae 01       	movw	r20, r28
     6ca:	4b 5e       	subi	r20, 0xEB	; 235
     6cc:	5f 4f       	sbci	r21, 0xFF	; 255
     6ce:	25 e1       	ldi	r18, 0x15	; 21
     6d0:	09 95       	icall
     6d2:	21 e0       	ldi	r18, 0x01	; 1
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	40 e0       	ldi	r20, 0x00	; 0
     6d8:	50 e0       	ldi	r21, 0x00	; 0
     6da:	fb c0       	rjmp	.+502    	; 0x8d2 <hci_unsol_event_handler+0x456>
			break;

		case HCI_EVNT_WLAN_ASYNC_PING_REPORT:
			{
				netapp_pingreport_args_t params;			
				data = (CHAR*)(event_hdr) + HCI_EVENT_HEADER_SIZE;			
     6dc:	0b 5f       	subi	r16, 0xFB	; 251
     6de:	1f 4f       	sbci	r17, 0xFF	; 255
				STREAM_TO_UINT32(data, NETAPP_PING_PACKETS_SENT_OFFSET, params.packets_sent);			
     6e0:	c8 01       	movw	r24, r16
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	70 e0       	ldi	r23, 0x00	; 0
     6e6:	0e 94 81 01 	call	0x302	; 0x302 <STREAM_TO_UINT32_f>
     6ea:	69 83       	std	Y+1, r22	; 0x01
     6ec:	7a 83       	std	Y+2, r23	; 0x02
     6ee:	8b 83       	std	Y+3, r24	; 0x03
     6f0:	9c 83       	std	Y+4, r25	; 0x04
				STREAM_TO_UINT32(data, NETAPP_PING_PACKETS_RCVD_OFFSET, params.packets_received);			
     6f2:	c8 01       	movw	r24, r16
     6f4:	64 e0       	ldi	r22, 0x04	; 4
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	0e 94 81 01 	call	0x302	; 0x302 <STREAM_TO_UINT32_f>
     6fc:	6d 83       	std	Y+5, r22	; 0x05
     6fe:	7e 83       	std	Y+6, r23	; 0x06
     700:	8f 83       	std	Y+7, r24	; 0x07
     702:	98 87       	std	Y+8, r25	; 0x08
				STREAM_TO_UINT32(data, NETAPP_PING_MIN_RTT_OFFSET, params.min_round_time);		
     704:	c8 01       	movw	r24, r16
     706:	68 e0       	ldi	r22, 0x08	; 8
     708:	70 e0       	ldi	r23, 0x00	; 0
     70a:	0e 94 81 01 	call	0x302	; 0x302 <STREAM_TO_UINT32_f>
     70e:	69 87       	std	Y+9, r22	; 0x09
     710:	7a 87       	std	Y+10, r23	; 0x0a
     712:	8b 87       	std	Y+11, r24	; 0x0b
     714:	9c 87       	std	Y+12, r25	; 0x0c
				STREAM_TO_UINT32(data, NETAPP_PING_MAX_RTT_OFFSET, params.max_round_time);	
     716:	c8 01       	movw	r24, r16
     718:	6c e0       	ldi	r22, 0x0C	; 12
     71a:	70 e0       	ldi	r23, 0x00	; 0
     71c:	0e 94 81 01 	call	0x302	; 0x302 <STREAM_TO_UINT32_f>
     720:	6d 87       	std	Y+13, r22	; 0x0d
     722:	7e 87       	std	Y+14, r23	; 0x0e
     724:	8f 87       	std	Y+15, r24	; 0x0f
     726:	98 8b       	std	Y+16, r25	; 0x10
				STREAM_TO_UINT32(data, NETAPP_PING_AVG_RTT_OFFSET, params.avg_round_time);
     728:	c8 01       	movw	r24, r16
     72a:	60 e1       	ldi	r22, 0x10	; 16
     72c:	70 e0       	ldi	r23, 0x00	; 0
     72e:	0e 94 81 01 	call	0x302	; 0x302 <STREAM_TO_UINT32_f>
     732:	9b 01       	movw	r18, r22
     734:	ac 01       	movw	r20, r24

				if( tSLInformation.sWlanCB )
     736:	80 91 7e 04 	lds	r24, 0x047E
     73a:	90 91 7f 04 	lds	r25, 0x047F
     73e:	89 2b       	or	r24, r25
     740:	41 f2       	breq	.-112    	; 0x6d2 <hci_unsol_event_handler+0x256>
				{
					tSLInformation.sWlanCB(event_type, (CHAR *)&params, sizeof(params));
     742:	e0 91 7e 04 	lds	r30, 0x047E
     746:	f0 91 7f 04 	lds	r31, 0x047F
				data = (CHAR*)(event_hdr) + HCI_EVENT_HEADER_SIZE;			
				STREAM_TO_UINT32(data, NETAPP_PING_PACKETS_SENT_OFFSET, params.packets_sent);			
				STREAM_TO_UINT32(data, NETAPP_PING_PACKETS_RCVD_OFFSET, params.packets_received);			
				STREAM_TO_UINT32(data, NETAPP_PING_MIN_RTT_OFFSET, params.min_round_time);		
				STREAM_TO_UINT32(data, NETAPP_PING_MAX_RTT_OFFSET, params.max_round_time);	
				STREAM_TO_UINT32(data, NETAPP_PING_AVG_RTT_OFFSET, params.avg_round_time);
     74a:	29 8b       	std	Y+17, r18	; 0x11
     74c:	3a 8b       	std	Y+18, r19	; 0x12
     74e:	4b 8b       	std	Y+19, r20	; 0x13
     750:	5c 8b       	std	Y+20, r21	; 0x14

				if( tSLInformation.sWlanCB )
				{
					tSLInformation.sWlanCB(event_type, (CHAR *)&params, sizeof(params));
     752:	c7 01       	movw	r24, r14
     754:	b6 01       	movw	r22, r12
     756:	ae 01       	movw	r20, r28
     758:	4f 5f       	subi	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	24 e1       	ldi	r18, 0x14	; 20
     75e:	b8 cf       	rjmp	.-144    	; 0x6d0 <hci_unsol_event_handler+0x254>
			  // Adafruit CC3k Host Driver Difference
			  // Extra debug output.
			  // Noted 12-12-2014 by tdicola
			  DEBUGPRINT_F("\tTCP Close Wait\n\r");
			  data = (CHAR*)(event_hdr) + HCI_EVENT_HEADER_SIZE;
			  if( tSLInformation.sWlanCB )
     760:	80 91 7e 04 	lds	r24, 0x047E
     764:	90 91 7f 04 	lds	r25, 0x047F
     768:	89 2b       	or	r24, r25
     76a:	09 f4       	brne	.+2      	; 0x76e <hci_unsol_event_handler+0x2f2>
     76c:	b2 cf       	rjmp	.-156    	; 0x6d2 <hci_unsol_event_handler+0x256>
			    {
				  //data[0] represents the socket id, for which FIN was received by remote.
				  //Upon receiving this event, the user can close the socket, or else the 
				  //socket will be closded after inacvitity timeout (by default 60 seconds)
			      tSLInformation.sWlanCB(event_type, data, 1);
     76e:	e0 91 7e 04 	lds	r30, 0x047E
     772:	f0 91 7f 04 	lds	r31, 0x047F
     776:	0b 5f       	subi	r16, 0xFB	; 251
     778:	1f 4f       	sbci	r17, 0xFF	; 255
     77a:	c7 01       	movw	r24, r14
     77c:	b6 01       	movw	r22, r12
     77e:	a8 01       	movw	r20, r16
     780:	21 e0       	ldi	r18, 0x01	; 1
     782:	a6 cf       	rjmp	.-180    	; 0x6d0 <hci_unsol_event_handler+0x254>
			return (0);
		}
		return(1);
	}

	if ((event_type == HCI_EVNT_SEND) || (event_type == HCI_EVNT_SENDTO)
     784:	b3 e0       	ldi	r27, 0x03	; 3
     786:	cb 16       	cp	r12, r27
     788:	b0 e1       	ldi	r27, 0x10	; 16
     78a:	db 06       	cpc	r13, r27
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb 06       	cpc	r14, r27
     790:	b0 e0       	ldi	r27, 0x00	; 0
     792:	fb 06       	cpc	r15, r27
     794:	99 f0       	breq	.+38     	; 0x7bc <hci_unsol_event_handler+0x340>
     796:	ef e0       	ldi	r30, 0x0F	; 15
     798:	ce 16       	cp	r12, r30
     79a:	e0 e1       	ldi	r30, 0x10	; 16
     79c:	de 06       	cpc	r13, r30
     79e:	e0 e0       	ldi	r30, 0x00	; 0
     7a0:	ee 06       	cpc	r14, r30
     7a2:	e0 e0       	ldi	r30, 0x00	; 0
     7a4:	fe 06       	cpc	r15, r30
     7a6:	51 f0       	breq	.+20     	; 0x7bc <hci_unsol_event_handler+0x340>
     7a8:	fe e0       	ldi	r31, 0x0E	; 14
     7aa:	cf 16       	cp	r12, r31
     7ac:	f0 e1       	ldi	r31, 0x10	; 16
     7ae:	df 06       	cpc	r13, r31
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	ef 06       	cpc	r14, r31
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	ff 06       	cpc	r15, r31
     7b8:	09 f0       	breq	.+2      	; 0x7bc <hci_unsol_event_handler+0x340>
     7ba:	6a c0       	rjmp	.+212    	; 0x890 <hci_unsol_event_handler+0x414>
		// Adafruit CC3k Host Driver Difference
		// Extra debug output.
		// Noted 12-12-2014 by tdicola
		DEBUGPRINT_F("\tSEND event response\n\r");

                pArg = M_BSD_RESP_PARAMS_OFFSET(event_hdr);
     7bc:	85 e0       	ldi	r24, 0x05	; 5
     7be:	c8 2e       	mov	r12, r24
     7c0:	d1 2c       	mov	r13, r1
     7c2:	c0 0e       	add	r12, r16
     7c4:	d1 1e       	adc	r13, r17
                STREAM_TO_UINT32(pArg, BSD_RSP_PARAMS_STATUS_OFFSET,status);
     7c6:	c6 01       	movw	r24, r12
     7c8:	64 e0       	ldi	r22, 0x04	; 4
     7ca:	70 e0       	ldi	r23, 0x00	; 0
     7cc:	0e 94 81 01 	call	0x302	; 0x302 <STREAM_TO_UINT32_f>

                if (ERROR_SOCKET_INACTIVE == status)
     7d0:	67 5c       	subi	r22, 0xC7	; 199
     7d2:	7f 4f       	sbci	r23, 0xFF	; 255
     7d4:	8f 4f       	sbci	r24, 0xFF	; 255
     7d6:	9f 4f       	sbci	r25, 0xFF	; 255
     7d8:	09 f0       	breq	.+2      	; 0x7dc <hci_unsol_event_handler+0x360>
     7da:	77 c0       	rjmp	.+238    	; 0x8ca <hci_unsol_event_handler+0x44e>
                {
                    // The only synchronous event that can come from SL device in form of
                    // command complete is "Command Complete" on data sent, in case SL device
                    // was unable to transmit
                    STREAM_TO_UINT8(event_hdr, HCI_EVENT_STATUS_OFFSET, tSLInformation.slTransmitDataError);
     7dc:	d8 01       	movw	r26, r16
     7de:	14 96       	adiw	r26, 0x04	; 4
     7e0:	8c 91       	ld	r24, X
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	a0 e0       	ldi	r26, 0x00	; 0
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
     7e8:	80 93 88 04 	sts	0x0488, r24
     7ec:	90 93 89 04 	sts	0x0489, r25
     7f0:	a0 93 8a 04 	sts	0x048A, r26
     7f4:	b0 93 8b 04 	sts	0x048B, r27
//*****************************************************************************
void update_socket_active_status(CHAR *resp_params)
{
	INT32 status, sd;

	STREAM_TO_UINT32(resp_params, BSD_RSP_PARAMS_SOCKET_OFFSET,sd);
     7f8:	c6 01       	movw	r24, r12
     7fa:	60 e0       	ldi	r22, 0x00	; 0
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	0e 94 81 01 	call	0x302	; 0x302 <STREAM_TO_UINT32_f>
     802:	7b 01       	movw	r14, r22
     804:	8c 01       	movw	r16, r24
	STREAM_TO_UINT32(resp_params, BSD_RSP_PARAMS_STATUS_OFFSET,status);
     806:	c6 01       	movw	r24, r12
     808:	64 e0       	ldi	r22, 0x04	; 4
     80a:	70 e0       	ldi	r23, 0x00	; 0
     80c:	0e 94 81 01 	call	0x302	; 0x302 <STREAM_TO_UINT32_f>

	if(ERROR_SOCKET_INACTIVE == status)
     810:	67 5c       	subi	r22, 0xC7	; 199
     812:	7f 4f       	sbci	r23, 0xFF	; 255
     814:	8f 4f       	sbci	r24, 0xFF	; 255
     816:	9f 4f       	sbci	r25, 0xFF	; 255
     818:	09 f0       	breq	.+2      	; 0x81c <hci_unsol_event_handler+0x3a0>
     81a:	5b cf       	rjmp	.-330    	; 0x6d2 <hci_unsol_event_handler+0x256>
//!                  accordingly  the global socket status
//
//*****************************************************************************
void set_socket_active_status(INT32 Sd, INT32 Status)
{
	if(M_IS_VALID_SD(Sd) && M_IS_VALID_STATUS(Status))
     81c:	e8 e0       	ldi	r30, 0x08	; 8
     81e:	ee 16       	cp	r14, r30
     820:	f1 04       	cpc	r15, r1
     822:	01 05       	cpc	r16, r1
     824:	11 05       	cpc	r17, r1
     826:	08 f0       	brcs	.+2      	; 0x82a <hci_unsol_event_handler+0x3ae>
     828:	54 cf       	rjmp	.-344    	; 0x6d2 <hci_unsol_event_handler+0x256>
	{
		socket_active_status &= ~(1 << Sd);      /* clean socket's mask */
		socket_active_status |= (Status << Sd); /* set new socket's mask */
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	0e 2c       	mov	r0, r14
     830:	02 c0       	rjmp	.+4      	; 0x836 <hci_unsol_event_handler+0x3ba>
     832:	88 0f       	add	r24, r24
     834:	99 1f       	adc	r25, r25
     836:	0a 94       	dec	r0
     838:	e2 f7       	brpl	.-8      	; 0x832 <hci_unsol_event_handler+0x3b6>
     83a:	80 95       	com	r24
     83c:	90 95       	com	r25
     83e:	aa 27       	eor	r26, r26
     840:	97 fd       	sbrc	r25, 7
     842:	a0 95       	com	r26
     844:	ba 2f       	mov	r27, r26
     846:	20 91 ce 03 	lds	r18, 0x03CE
     84a:	30 91 cf 03 	lds	r19, 0x03CF
     84e:	40 91 d0 03 	lds	r20, 0x03D0
     852:	50 91 d1 03 	lds	r21, 0x03D1
     856:	82 23       	and	r24, r18
     858:	93 23       	and	r25, r19
     85a:	a4 23       	and	r26, r20
     85c:	b5 23       	and	r27, r21
     85e:	21 e0       	ldi	r18, 0x01	; 1
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	40 e0       	ldi	r20, 0x00	; 0
     864:	50 e0       	ldi	r21, 0x00	; 0
     866:	0e 2c       	mov	r0, r14
     868:	04 c0       	rjmp	.+8      	; 0x872 <hci_unsol_event_handler+0x3f6>
     86a:	22 0f       	add	r18, r18
     86c:	33 1f       	adc	r19, r19
     86e:	44 1f       	adc	r20, r20
     870:	55 1f       	adc	r21, r21
     872:	0a 94       	dec	r0
     874:	d2 f7       	brpl	.-12     	; 0x86a <hci_unsol_event_handler+0x3ee>
     876:	82 2b       	or	r24, r18
     878:	93 2b       	or	r25, r19
     87a:	a4 2b       	or	r26, r20
     87c:	b5 2b       	or	r27, r21
     87e:	80 93 ce 03 	sts	0x03CE, r24
     882:	90 93 cf 03 	sts	0x03CF, r25
     886:	a0 93 d0 03 	sts	0x03D0, r26
     88a:	b0 93 d1 03 	sts	0x03D1, r27
     88e:	21 cf       	rjmp	.-446    	; 0x6d2 <hci_unsol_event_handler+0x256>
                else
                    return (0);
	}

	//handle a case where unsolicited event arrived, but was not handled by any of the cases above
	if ((event_type != tSLInformation.usRxEventOpcode) && (event_type != HCI_EVNT_PATCHES_REQ))
     890:	80 91 70 04 	lds	r24, 0x0470
     894:	90 91 71 04 	lds	r25, 0x0471
     898:	a0 e0       	ldi	r26, 0x00	; 0
     89a:	b0 e0       	ldi	r27, 0x00	; 0
     89c:	c8 16       	cp	r12, r24
     89e:	d9 06       	cpc	r13, r25
     8a0:	ea 06       	cpc	r14, r26
     8a2:	fb 06       	cpc	r15, r27
     8a4:	91 f0       	breq	.+36     	; 0x8ca <hci_unsol_event_handler+0x44e>
     8a6:	60 e0       	ldi	r22, 0x00	; 0
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	cf 16       	cp	r12, r31
     8ac:	f0 e1       	ldi	r31, 0x10	; 16
     8ae:	df 06       	cpc	r13, r31
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	ef 06       	cpc	r14, r31
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	ff 06       	cpc	r15, r31
     8b8:	09 f4       	brne	.+2      	; 0x8bc <hci_unsol_event_handler+0x440>
     8ba:	61 e0       	ldi	r22, 0x01	; 1
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	68 27       	eor	r22, r24
     8c0:	26 2f       	mov	r18, r22
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	40 e0       	ldi	r20, 0x00	; 0
     8c6:	50 e0       	ldi	r21, 0x00	; 0
     8c8:	04 c0       	rjmp	.+8      	; 0x8d2 <hci_unsol_event_handler+0x456>
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	50 e0       	ldi	r21, 0x00	; 0
	{
		return(1);
	}

	return(0);
}
     8d2:	b9 01       	movw	r22, r18
     8d4:	ca 01       	movw	r24, r20
     8d6:	a9 96       	adiw	r28, 0x29	; 41
     8d8:	0f b6       	in	r0, 0x3f	; 63
     8da:	f8 94       	cli
     8dc:	de bf       	out	0x3e, r29	; 62
     8de:	0f be       	out	0x3f, r0	; 63
     8e0:	cd bf       	out	0x3d, r28	; 61
     8e2:	cf 91       	pop	r28
     8e4:	df 91       	pop	r29
     8e6:	1f 91       	pop	r17
     8e8:	0f 91       	pop	r16
     8ea:	ff 90       	pop	r15
     8ec:	ef 90       	pop	r14
     8ee:	df 90       	pop	r13
     8f0:	cf 90       	pop	r12
     8f2:	bf 90       	pop	r11
     8f4:	af 90       	pop	r10
     8f6:	9f 90       	pop	r9
     8f8:	8f 90       	pop	r8
     8fa:	08 95       	ret

000008fc <hci_unsolicited_event_handler>:
INT32 hci_unsolicited_event_handler(void)
{
	UINT32   res = 0;
	UINT8 *pucReceivedData;

	if (tSLInformation.usEventOrDataReceived != 0)
     8fc:	80 91 72 04 	lds	r24, 0x0472
     900:	90 91 73 04 	lds	r25, 0x0473
     904:	89 2b       	or	r24, r25
     906:	d1 f0       	breq	.+52     	; 0x93c <__stack+0x3d>
	{
		pucReceivedData = (tSLInformation.pucReceivedData);
     908:	e0 91 74 04 	lds	r30, 0x0474
     90c:	f0 91 75 04 	lds	r31, 0x0475

		if (*pucReceivedData == HCI_TYPE_EVNT)
     910:	80 81       	ld	r24, Z
     912:	84 30       	cpi	r24, 0x04	; 4
     914:	99 f4       	brne	.+38     	; 0x93c <__stack+0x3d>
		{			

			// In case unsolicited event received - here the handling finished
			if (hci_unsol_event_handler((CHAR *)pucReceivedData) == 1)
     916:	cf 01       	movw	r24, r30
     918:	0e 94 3e 02 	call	0x47c	; 0x47c <hci_unsol_event_handler>
     91c:	61 30       	cpi	r22, 0x01	; 1
     91e:	71 05       	cpc	r23, r1
     920:	81 05       	cpc	r24, r1
     922:	91 05       	cpc	r25, r1
     924:	59 f4       	brne	.+22     	; 0x93c <__stack+0x3d>
			{

				// There was an unsolicited event received - we can release the buffer
				// and clean the event received 
				tSLInformation.usEventOrDataReceived = 0;
     926:	10 92 73 04 	sts	0x0473, r1
     92a:	10 92 72 04 	sts	0x0472, r1

				res = 1;
				SpiResumeSpi();
     92e:	0e 94 11 20 	call	0x4022	; 0x4022 <_Z12SpiResumeSpiv>
     932:	21 e0       	ldi	r18, 0x01	; 1
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	40 e0       	ldi	r20, 0x00	; 0
     938:	50 e0       	ldi	r21, 0x00	; 0
     93a:	04 c0       	rjmp	.+8      	; 0x944 <__stack+0x45>
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	40 e0       	ldi	r20, 0x00	; 0
     942:	50 e0       	ldi	r21, 0x00	; 0
			}
		}
	}

	return res;
}
     944:	b9 01       	movw	r22, r18
     946:	ca 01       	movw	r24, r20
     948:	08 95       	ret

0000094a <_Z30hci_unsol_handle_patch_requestPc>:
//!  @return none
//!
//!  @brief   Handle unsolicited event from type patch request
//
//*****************************************************************************
void hci_unsol_handle_patch_request(CHAR *event_hdr)
     94a:	df 93       	push	r29
     94c:	cf 93       	push	r28
     94e:	00 d0       	rcall	.+0      	; 0x950 <_Z30hci_unsol_handle_patch_requestPc+0x6>
     950:	00 d0       	rcall	.+0      	; 0x952 <_Z30hci_unsol_handle_patch_requestPc+0x8>
     952:	cd b7       	in	r28, 0x3d	; 61
     954:	de b7       	in	r29, 0x3e	; 62
{
	CHAR *params = (CHAR *)(event_hdr) + HCI_EVENT_HEADER_SIZE;
	UINT32 ucLength = 0;
     956:	19 82       	std	Y+1, r1	; 0x01
     958:	1a 82       	std	Y+2, r1	; 0x02
     95a:	1b 82       	std	Y+3, r1	; 0x03
     95c:	1c 82       	std	Y+4, r1	; 0x04
	CHAR *patch;

	switch (*params)
     95e:	fc 01       	movw	r30, r24
     960:	85 81       	ldd	r24, Z+5	; 0x05
     962:	82 30       	cpi	r24, 0x02	; 2
     964:	21 f1       	breq	.+72     	; 0x9ae <_Z30hci_unsol_handle_patch_requestPc+0x64>
     966:	83 30       	cpi	r24, 0x03	; 3
     968:	09 f4       	brne	.+2      	; 0x96c <_Z30hci_unsol_handle_patch_requestPc+0x22>
     96a:	3f c0       	rjmp	.+126    	; 0x9ea <_Z30hci_unsol_handle_patch_requestPc+0xa0>
     96c:	81 30       	cpi	r24, 0x01	; 1
     96e:	09 f0       	breq	.+2      	; 0x972 <_Z30hci_unsol_handle_patch_requestPc+0x28>
     970:	5f c0       	rjmp	.+190    	; 0xa30 <_Z30hci_unsol_handle_patch_requestPc+0xe6>
	{
	case HCI_EVENT_PATCHES_DRV_REQ:

		if (tSLInformation.sDriverPatches)
     972:	80 91 7a 04 	lds	r24, 0x047A
     976:	90 91 7b 04 	lds	r25, 0x047B
     97a:	89 2b       	or	r24, r25
     97c:	91 f0       	breq	.+36     	; 0x9a2 <_Z30hci_unsol_handle_patch_requestPc+0x58>
		{
			patch = tSLInformation.sDriverPatches(&ucLength);
     97e:	e0 91 7a 04 	lds	r30, 0x047A
     982:	f0 91 7b 04 	lds	r31, 0x047B
     986:	ce 01       	movw	r24, r28
     988:	01 96       	adiw	r24, 0x01	; 1
     98a:	09 95       	icall
     98c:	ac 01       	movw	r20, r24

			if (patch)
     98e:	00 97       	sbiw	r24, 0x00	; 0
     990:	41 f0       	breq	.+16     	; 0x9a2 <_Z30hci_unsol_handle_patch_requestPc+0x58>
			{
				hci_patch_send(HCI_EVENT_PATCHES_DRV_REQ, 
					tSLInformation.pucTxCommandBuffer, patch, ucLength);
     992:	60 91 76 04 	lds	r22, 0x0476
     996:	70 91 77 04 	lds	r23, 0x0477
     99a:	29 81       	ldd	r18, Y+1	; 0x01
     99c:	3a 81       	ldd	r19, Y+2	; 0x02
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	45 c0       	rjmp	.+138    	; 0xa2c <_Z30hci_unsol_handle_patch_requestPc+0xe2>
			}
		}

		// Send 0 length Patches response event
		hci_patch_send(HCI_EVENT_PATCHES_DRV_REQ, 
			tSLInformation.pucTxCommandBuffer, 0, 0);
     9a2:	60 91 76 04 	lds	r22, 0x0476
     9a6:	70 91 77 04 	lds	r23, 0x0477
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	3b c0       	rjmp	.+118    	; 0xa24 <_Z30hci_unsol_handle_patch_requestPc+0xda>
		break;

	case HCI_EVENT_PATCHES_FW_REQ:

		if (tSLInformation.sFWPatches)
     9ae:	80 91 78 04 	lds	r24, 0x0478
     9b2:	90 91 79 04 	lds	r25, 0x0479
     9b6:	89 2b       	or	r24, r25
     9b8:	91 f0       	breq	.+36     	; 0x9de <_Z30hci_unsol_handle_patch_requestPc+0x94>
		{
			patch = tSLInformation.sFWPatches(&ucLength);
     9ba:	e0 91 78 04 	lds	r30, 0x0478
     9be:	f0 91 79 04 	lds	r31, 0x0479
     9c2:	ce 01       	movw	r24, r28
     9c4:	01 96       	adiw	r24, 0x01	; 1
     9c6:	09 95       	icall
     9c8:	ac 01       	movw	r20, r24

			// Build and send a patch
			if (patch)
     9ca:	00 97       	sbiw	r24, 0x00	; 0
     9cc:	41 f0       	breq	.+16     	; 0x9de <_Z30hci_unsol_handle_patch_requestPc+0x94>
			{
				hci_patch_send(HCI_EVENT_PATCHES_FW_REQ, 
					tSLInformation.pucTxCommandBuffer, patch, ucLength);
     9ce:	60 91 76 04 	lds	r22, 0x0476
     9d2:	70 91 77 04 	lds	r23, 0x0477
     9d6:	29 81       	ldd	r18, Y+1	; 0x01
     9d8:	3a 81       	ldd	r19, Y+2	; 0x02
     9da:	82 e0       	ldi	r24, 0x02	; 2
     9dc:	27 c0       	rjmp	.+78     	; 0xa2c <_Z30hci_unsol_handle_patch_requestPc+0xe2>
			}
		}

		// Send 0 length Patches response event
		hci_patch_send(HCI_EVENT_PATCHES_FW_REQ, 
			tSLInformation.pucTxCommandBuffer, 0, 0);
     9de:	60 91 76 04 	lds	r22, 0x0476
     9e2:	70 91 77 04 	lds	r23, 0x0477
     9e6:	82 e0       	ldi	r24, 0x02	; 2
     9e8:	1d c0       	rjmp	.+58     	; 0xa24 <_Z30hci_unsol_handle_patch_requestPc+0xda>
		break;

	case HCI_EVENT_PATCHES_BOOTLOAD_REQ:

		if (tSLInformation.sBootLoaderPatches)
     9ea:	80 91 7c 04 	lds	r24, 0x047C
     9ee:	90 91 7d 04 	lds	r25, 0x047D
     9f2:	89 2b       	or	r24, r25
     9f4:	91 f0       	breq	.+36     	; 0xa1a <_Z30hci_unsol_handle_patch_requestPc+0xd0>
		{
			patch = tSLInformation.sBootLoaderPatches(&ucLength);
     9f6:	e0 91 7c 04 	lds	r30, 0x047C
     9fa:	f0 91 7d 04 	lds	r31, 0x047D
     9fe:	ce 01       	movw	r24, r28
     a00:	01 96       	adiw	r24, 0x01	; 1
     a02:	09 95       	icall
     a04:	ac 01       	movw	r20, r24

			if (patch)
     a06:	00 97       	sbiw	r24, 0x00	; 0
     a08:	41 f0       	breq	.+16     	; 0xa1a <_Z30hci_unsol_handle_patch_requestPc+0xd0>
			{
				hci_patch_send(HCI_EVENT_PATCHES_BOOTLOAD_REQ,  
					tSLInformation.pucTxCommandBuffer, patch, ucLength);
     a0a:	60 91 76 04 	lds	r22, 0x0476
     a0e:	70 91 77 04 	lds	r23, 0x0477
     a12:	29 81       	ldd	r18, Y+1	; 0x01
     a14:	3a 81       	ldd	r19, Y+2	; 0x02
     a16:	83 e0       	ldi	r24, 0x03	; 3
     a18:	09 c0       	rjmp	.+18     	; 0xa2c <_Z30hci_unsol_handle_patch_requestPc+0xe2>
			}
		}

		// Send 0 length Patches response event
		hci_patch_send(HCI_EVENT_PATCHES_BOOTLOAD_REQ, 
			tSLInformation.pucTxCommandBuffer, 0, 0);
     a1a:	60 91 76 04 	lds	r22, 0x0476
     a1e:	70 91 77 04 	lds	r23, 0x0477
     a22:	83 e0       	ldi	r24, 0x03	; 3
     a24:	40 e0       	ldi	r20, 0x00	; 0
     a26:	50 e0       	ldi	r21, 0x00	; 0
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	0e 94 c4 08 	call	0x1188	; 0x1188 <hci_patch_send>
		break;
	}
}
     a30:	0f 90       	pop	r0
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	cf 91       	pop	r28
     a3a:	df 91       	pop	r29
     a3c:	08 95       	ret

00000a3e <hci_event_handler>:
//!                  event handler from global array of handlers pointers
//
//*****************************************************************************


UINT8 * hci_event_handler(void *pRetParams, UINT8 *from, UINT8 *fromlen)
     a3e:	4f 92       	push	r4
     a40:	5f 92       	push	r5
     a42:	6f 92       	push	r6
     a44:	7f 92       	push	r7
     a46:	8f 92       	push	r8
     a48:	9f 92       	push	r9
     a4a:	af 92       	push	r10
     a4c:	bf 92       	push	r11
     a4e:	cf 92       	push	r12
     a50:	df 92       	push	r13
     a52:	ef 92       	push	r14
     a54:	ff 92       	push	r15
     a56:	0f 93       	push	r16
     a58:	1f 93       	push	r17
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
     a5e:	6c 01       	movw	r12, r24
     a60:	2b 01       	movw	r4, r22
     a62:	3a 01       	movw	r6, r20
     a64:	aa 24       	eor	r10, r10
     a66:	bb 24       	eor	r11, r11
	while (1)
	{
		// Adafruit CC3k Host Driver Difference
		// Call cc3k_int_poll to try to keep from missing interrupts.
		// Noted 12-12-2014 by tdicola
		cc3k_int_poll();
     a68:	0e 94 47 21 	call	0x428e	; 0x428e <cc3k_int_poll>

		if (tSLInformation.usEventOrDataReceived != 0)
     a6c:	80 91 72 04 	lds	r24, 0x0472
     a70:	90 91 73 04 	lds	r25, 0x0473
     a74:	89 2b       	or	r24, r25
     a76:	c1 f3       	breq	.-16     	; 0xa68 <hci_event_handler+0x2a>
		{				
			pucReceivedData = (tSLInformation.pucReceivedData);
     a78:	80 90 74 04 	lds	r8, 0x0474
     a7c:	90 90 75 04 	lds	r9, 0x0475

			if (*pucReceivedData == HCI_TYPE_EVNT)
     a80:	d4 01       	movw	r26, r8
     a82:	8c 91       	ld	r24, X
     a84:	84 30       	cpi	r24, 0x04	; 4
     a86:	09 f0       	breq	.+2      	; 0xa8a <hci_event_handler+0x4c>
     a88:	bf c2       	rjmp	.+1406   	; 0x1008 <hci_event_handler+0x5ca>
			{
				// Event Received
				STREAM_TO_UINT16((CHAR *)pucReceivedData, HCI_EVENT_OPCODE_OFFSET,
     a8a:	c4 01       	movw	r24, r8
     a8c:	61 e0       	ldi	r22, 0x01	; 1
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	0e 94 77 01 	call	0x2ee	; 0x2ee <STREAM_TO_UINT16_f>
     a94:	5c 01       	movw	r10, r24
				// Explicit cast of pRetParams to UINT8* to fix compiler warning.
				// Noted 12-12-2014 by tdicola
				RetParams = (UINT8 *)pRetParams;

				// In case unsolicited event received - here the handling finished
				if (hci_unsol_event_handler((CHAR *)pucReceivedData) == 0)
     a96:	c4 01       	movw	r24, r8
     a98:	0e 94 3e 02 	call	0x47c	; 0x47c <hci_unsol_event_handler>
     a9c:	61 15       	cp	r22, r1
     a9e:	71 05       	cpc	r23, r1
     aa0:	81 05       	cpc	r24, r1
     aa2:	91 05       	cpc	r25, r1
     aa4:	09 f0       	breq	.+2      	; 0xaa8 <hci_event_handler+0x6a>
     aa6:	a4 c2       	rjmp	.+1352   	; 0xff0 <hci_event_handler+0x5b2>
			if (*pucReceivedData == HCI_TYPE_EVNT)
			{
				// Event Received
				STREAM_TO_UINT16((CHAR *)pucReceivedData, HCI_EVENT_OPCODE_OFFSET,
					usReceivedEventOpcode);
				pucReceivedParams = pucReceivedData + HCI_EVENT_HEADER_SIZE;		
     aa8:	e4 01       	movw	r28, r8
     aaa:	25 96       	adiw	r28, 0x05	; 5
				// In case unsolicited event received - here the handling finished
				if (hci_unsol_event_handler((CHAR *)pucReceivedData) == 0)
				{
					STREAM_TO_UINT8(pucReceivedData, HCI_DATA_LENGTH_OFFSET, usLength);

					switch(usReceivedEventOpcode)
     aac:	b8 e0       	ldi	r27, 0x08	; 8
     aae:	ab 16       	cp	r10, r27
     ab0:	b0 e1       	ldi	r27, 0x10	; 16
     ab2:	bb 06       	cpc	r11, r27
     ab4:	08 f0       	brcs	.+2      	; 0xab8 <hci_event_handler+0x7a>
     ab6:	56 c0       	rjmp	.+172    	; 0xb64 <hci_event_handler+0x126>
     ab8:	e6 e0       	ldi	r30, 0x06	; 6
     aba:	ae 16       	cp	r10, r30
     abc:	e0 e1       	ldi	r30, 0x10	; 16
     abe:	be 06       	cpc	r11, r30
     ac0:	08 f0       	brcs	.+2      	; 0xac4 <hci_event_handler+0x86>
     ac2:	cc c0       	rjmp	.+408    	; 0xc5c <hci_event_handler+0x21e>
     ac4:	f2 e0       	ldi	r31, 0x02	; 2
     ac6:	af 16       	cp	r10, r31
     ac8:	f2 e0       	ldi	r31, 0x02	; 2
     aca:	bf 06       	cpc	r11, r31
     acc:	09 f4       	brne	.+2      	; 0xad0 <hci_event_handler+0x92>
     ace:	c6 c0       	rjmp	.+396    	; 0xc5c <hci_event_handler+0x21e>
     ad0:	03 e0       	ldi	r16, 0x03	; 3
     ad2:	a0 16       	cp	r10, r16
     ad4:	02 e0       	ldi	r16, 0x02	; 2
     ad6:	b0 06       	cpc	r11, r16
     ad8:	00 f5       	brcc	.+64     	; 0xb1a <hci_event_handler+0xdc>
     ada:	1d e0       	ldi	r17, 0x0D	; 13
     adc:	a1 16       	cp	r10, r17
     ade:	b1 04       	cpc	r11, r1
     ae0:	80 f4       	brcc	.+32     	; 0xb02 <hci_event_handler+0xc4>
     ae2:	68 e0       	ldi	r22, 0x08	; 8
     ae4:	a6 16       	cp	r10, r22
     ae6:	b1 04       	cpc	r11, r1
     ae8:	08 f0       	brcs	.+2      	; 0xaec <hci_event_handler+0xae>
     aea:	b8 c0       	rjmp	.+368    	; 0xc5c <hci_event_handler+0x21e>
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	a8 16       	cp	r10, r24
     af0:	b1 04       	cpc	r11, r1
     af2:	08 f4       	brcc	.+2      	; 0xaf6 <hci_event_handler+0xb8>
     af4:	7d c2       	rjmp	.+1274   	; 0xff0 <hci_event_handler+0x5b2>
     af6:	97 e0       	ldi	r25, 0x07	; 7
     af8:	a9 16       	cp	r10, r25
     afa:	b1 04       	cpc	r11, r1
     afc:	08 f4       	brcc	.+2      	; 0xb00 <hci_event_handler+0xc2>
     afe:	ae c0       	rjmp	.+348    	; 0xc5c <hci_event_handler+0x21e>
     b00:	d4 c1       	rjmp	.+936    	; 0xeaa <hci_event_handler+0x46c>
     b02:	ad e0       	ldi	r26, 0x0D	; 13
     b04:	aa 16       	cp	r10, r26
     b06:	b1 04       	cpc	r11, r1
     b08:	09 f4       	brne	.+2      	; 0xb0c <hci_event_handler+0xce>
     b0a:	a3 c0       	rjmp	.+326    	; 0xc52 <hci_event_handler+0x214>
     b0c:	b1 e0       	ldi	r27, 0x01	; 1
     b0e:	ab 16       	cp	r10, r27
     b10:	b2 e0       	ldi	r27, 0x02	; 2
     b12:	bb 06       	cpc	r11, r27
     b14:	09 f0       	breq	.+2      	; 0xb18 <hci_event_handler+0xda>
     b16:	6c c2       	rjmp	.+1240   	; 0xff0 <hci_event_handler+0x5b2>
     b18:	9c c0       	rjmp	.+312    	; 0xc52 <hci_event_handler+0x214>
     b1a:	e3 e0       	ldi	r30, 0x03	; 3
     b1c:	ae 16       	cp	r10, r30
     b1e:	e0 e1       	ldi	r30, 0x10	; 16
     b20:	be 06       	cpc	r11, r30
     b22:	98 f4       	brcc	.+38     	; 0xb4a <hci_event_handler+0x10c>
     b24:	f1 e0       	ldi	r31, 0x01	; 1
     b26:	af 16       	cp	r10, r31
     b28:	f0 e1       	ldi	r31, 0x10	; 16
     b2a:	bf 06       	cpc	r11, r31
     b2c:	08 f0       	brcs	.+2      	; 0xb30 <hci_event_handler+0xf2>
     b2e:	96 c0       	rjmp	.+300    	; 0xc5c <hci_event_handler+0x21e>
     b30:	05 e0       	ldi	r16, 0x05	; 5
     b32:	a0 16       	cp	r10, r16
     b34:	02 e0       	ldi	r16, 0x02	; 2
     b36:	b0 06       	cpc	r11, r16
     b38:	08 f4       	brcc	.+2      	; 0xb3c <hci_event_handler+0xfe>
     b3a:	8b c0       	rjmp	.+278    	; 0xc52 <hci_event_handler+0x214>
     b3c:	17 e0       	ldi	r17, 0x07	; 7
     b3e:	a1 16       	cp	r10, r17
     b40:	12 e0       	ldi	r17, 0x02	; 2
     b42:	b1 06       	cpc	r11, r17
     b44:	09 f0       	breq	.+2      	; 0xb48 <hci_event_handler+0x10a>
     b46:	54 c2       	rjmp	.+1192   	; 0xff0 <hci_event_handler+0x5b2>
     b48:	8d c0       	rjmp	.+282    	; 0xc64 <hci_event_handler+0x226>
     b4a:	64 e0       	ldi	r22, 0x04	; 4
     b4c:	a6 16       	cp	r10, r22
     b4e:	60 e1       	ldi	r22, 0x10	; 16
     b50:	b6 06       	cpc	r11, r22
     b52:	09 f4       	brne	.+2      	; 0xb56 <hci_event_handler+0x118>
     b54:	dc c0       	rjmp	.+440    	; 0xd0e <hci_event_handler+0x2d0>
     b56:	85 e0       	ldi	r24, 0x05	; 5
     b58:	a8 16       	cp	r10, r24
     b5a:	80 e1       	ldi	r24, 0x10	; 16
     b5c:	b8 06       	cpc	r11, r24
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <hci_event_handler+0x124>
     b60:	b1 c0       	rjmp	.+354    	; 0xcc4 <hci_event_handler+0x286>
     b62:	42 c1       	rjmp	.+644    	; 0xde8 <hci_event_handler+0x3aa>
     b64:	91 e1       	ldi	r25, 0x11	; 17
     b66:	a9 16       	cp	r10, r25
     b68:	90 e1       	ldi	r25, 0x10	; 16
     b6a:	b9 06       	cpc	r11, r25
     b6c:	09 f4       	brne	.+2      	; 0xb70 <hci_event_handler+0x132>
     b6e:	71 c0       	rjmp	.+226    	; 0xc52 <hci_event_handler+0x214>
     b70:	a2 e1       	ldi	r26, 0x12	; 18
     b72:	aa 16       	cp	r10, r26
     b74:	a0 e1       	ldi	r26, 0x10	; 16
     b76:	ba 06       	cpc	r11, r26
     b78:	58 f5       	brcc	.+86     	; 0xbd0 <hci_event_handler+0x192>
     b7a:	bb e0       	ldi	r27, 0x0B	; 11
     b7c:	ab 16       	cp	r10, r27
     b7e:	b0 e1       	ldi	r27, 0x10	; 16
     b80:	bb 06       	cpc	r11, r27
     b82:	09 f4       	brne	.+2      	; 0xb86 <hci_event_handler+0x148>
     b84:	6b c0       	rjmp	.+214    	; 0xc5c <hci_event_handler+0x21e>
     b86:	ec e0       	ldi	r30, 0x0C	; 12
     b88:	ae 16       	cp	r10, r30
     b8a:	e0 e1       	ldi	r30, 0x10	; 16
     b8c:	be 06       	cpc	r11, r30
     b8e:	68 f4       	brcc	.+26     	; 0xbaa <hci_event_handler+0x16c>
     b90:	f9 e0       	ldi	r31, 0x09	; 9
     b92:	af 16       	cp	r10, r31
     b94:	f0 e1       	ldi	r31, 0x10	; 16
     b96:	bf 06       	cpc	r11, r31
     b98:	09 f4       	brne	.+2      	; 0xb9c <hci_event_handler+0x15e>
     b9a:	60 c0       	rjmp	.+192    	; 0xc5c <hci_event_handler+0x21e>
     b9c:	0a e0       	ldi	r16, 0x0A	; 10
     b9e:	a0 16       	cp	r10, r16
     ba0:	00 e1       	ldi	r16, 0x10	; 16
     ba2:	b0 06       	cpc	r11, r16
     ba4:	08 f0       	brcs	.+2      	; 0xba8 <hci_event_handler+0x16a>
     ba6:	73 c1       	rjmp	.+742    	; 0xe8e <hci_event_handler+0x450>
     ba8:	3a c1       	rjmp	.+628    	; 0xe1e <hci_event_handler+0x3e0>
     baa:	1f e0       	ldi	r17, 0x0F	; 15
     bac:	a1 16       	cp	r10, r17
     bae:	10 e1       	ldi	r17, 0x10	; 16
     bb0:	b1 06       	cpc	r11, r17
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <hci_event_handler+0x178>
     bb4:	19 c1       	rjmp	.+562    	; 0xde8 <hci_event_handler+0x3aa>
     bb6:	60 e1       	ldi	r22, 0x10	; 16
     bb8:	a6 16       	cp	r10, r22
     bba:	60 e1       	ldi	r22, 0x10	; 16
     bbc:	b6 06       	cpc	r11, r22
     bbe:	08 f0       	brcs	.+2      	; 0xbc2 <hci_event_handler+0x184>
     bc0:	61 c0       	rjmp	.+194    	; 0xc84 <hci_event_handler+0x246>
     bc2:	8d e0       	ldi	r24, 0x0D	; 13
     bc4:	a8 16       	cp	r10, r24
     bc6:	80 e1       	ldi	r24, 0x10	; 16
     bc8:	b8 06       	cpc	r11, r24
     bca:	09 f0       	breq	.+2      	; 0xbce <hci_event_handler+0x190>
     bcc:	11 c2       	rjmp	.+1058   	; 0xff0 <hci_event_handler+0x5b2>
     bce:	9f c0       	rjmp	.+318    	; 0xd0e <hci_event_handler+0x2d0>
     bd0:	95 e0       	ldi	r25, 0x05	; 5
     bd2:	a9 16       	cp	r10, r25
     bd4:	90 e2       	ldi	r25, 0x20	; 32
     bd6:	b9 06       	cpc	r11, r25
     bd8:	09 f4       	brne	.+2      	; 0xbdc <hci_event_handler+0x19e>
     bda:	a4 c1       	rjmp	.+840    	; 0xf24 <hci_event_handler+0x4e6>
     bdc:	a6 e0       	ldi	r26, 0x06	; 6
     bde:	aa 16       	cp	r10, r26
     be0:	a0 e2       	ldi	r26, 0x20	; 32
     be2:	ba 06       	cpc	r11, r26
     be4:	68 f4       	brcc	.+26     	; 0xc00 <hci_event_handler+0x1c2>
     be6:	b2 e1       	ldi	r27, 0x12	; 18
     be8:	ab 16       	cp	r10, r27
     bea:	b0 e1       	ldi	r27, 0x10	; 16
     bec:	bb 06       	cpc	r11, r27
     bee:	09 f4       	brne	.+2      	; 0xbf2 <hci_event_handler+0x1b4>
     bf0:	60 c0       	rjmp	.+192    	; 0xcb2 <hci_event_handler+0x274>
     bf2:	e1 e0       	ldi	r30, 0x01	; 1
     bf4:	ae 16       	cp	r10, r30
     bf6:	e0 e2       	ldi	r30, 0x20	; 32
     bf8:	be 06       	cpc	r11, r30
     bfa:	08 f4       	brcc	.+2      	; 0xbfe <hci_event_handler+0x1c0>
     bfc:	f9 c1       	rjmp	.+1010   	; 0xff0 <hci_event_handler+0x5b2>
     bfe:	29 c0       	rjmp	.+82     	; 0xc52 <hci_event_handler+0x214>
     c00:	fa e0       	ldi	r31, 0x0A	; 10
     c02:	af 16       	cp	r10, r31
     c04:	f0 e2       	ldi	r31, 0x20	; 32
     c06:	bf 06       	cpc	r11, r31
     c08:	60 f4       	brcc	.+24     	; 0xc22 <hci_event_handler+0x1e4>
     c0a:	08 e0       	ldi	r16, 0x08	; 8
     c0c:	a0 16       	cp	r10, r16
     c0e:	00 e2       	ldi	r16, 0x20	; 32
     c10:	b0 06       	cpc	r11, r16
     c12:	f8 f4       	brcc	.+62     	; 0xc52 <hci_event_handler+0x214>
     c14:	16 e0       	ldi	r17, 0x06	; 6
     c16:	a1 16       	cp	r10, r17
     c18:	10 e2       	ldi	r17, 0x20	; 32
     c1a:	b1 06       	cpc	r11, r17
     c1c:	09 f0       	breq	.+2      	; 0xc20 <hci_event_handler+0x1e2>
     c1e:	e8 c1       	rjmp	.+976    	; 0xff0 <hci_event_handler+0x5b2>
     c20:	18 c0       	rjmp	.+48     	; 0xc52 <hci_event_handler+0x214>
     c22:	6b e0       	ldi	r22, 0x0B	; 11
     c24:	a6 16       	cp	r10, r22
     c26:	60 e4       	ldi	r22, 0x40	; 64
     c28:	b6 06       	cpc	r11, r22
     c2a:	09 f0       	breq	.+2      	; 0xc2e <hci_event_handler+0x1f0>
     c2c:	e1 c1       	rjmp	.+962    	; 0xff0 <hci_event_handler+0x5b2>
					{		
					case HCI_CMND_READ_BUFFER_SIZE:
						{
							STREAM_TO_UINT8((CHAR *)pucReceivedParams, 0, 
     c2e:	d4 01       	movw	r26, r8
     c30:	15 96       	adiw	r26, 0x05	; 5
     c32:	8c 91       	ld	r24, X
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	90 93 8d 04 	sts	0x048D, r25
     c3a:	80 93 8c 04 	sts	0x048C, r24
								tSLInformation.usNumberOfFreeBuffers);
							STREAM_TO_UINT16((CHAR *)pucReceivedParams, 1, 
     c3e:	ce 01       	movw	r24, r28
     c40:	61 e0       	ldi	r22, 0x01	; 1
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	0e 94 77 01 	call	0x2ee	; 0x2ee <STREAM_TO_UINT16_f>
     c48:	90 93 8f 04 	sts	0x048F, r25
     c4c:	80 93 8e 04 	sts	0x048E, r24
     c50:	cf c1       	rjmp	.+926    	; 0xff0 <hci_event_handler+0x5b2>
					case HCI_EVNT_NVMEM_CREATE_ENTRY:
					case HCI_CMND_NVMEM_WRITE_PATCH:
					case HCI_NETAPP_PING_REPORT:
					case HCI_EVNT_MDNS_ADVERTISE:

						STREAM_TO_UINT8(pucReceivedData, HCI_EVENT_STATUS_OFFSET
     c52:	e4 01       	movw	r28, r8
     c54:	8c 81       	ldd	r24, Y+4	; 0x04
     c56:	f6 01       	movw	r30, r12
     c58:	80 83       	st	Z, r24
     c5a:	ca c1       	rjmp	.+916    	; 0xff0 <hci_event_handler+0x5b2>
					case HCI_CMND_LISTEN:
					case HCI_EVNT_CLOSE_SOCKET:
					case HCI_EVNT_CONNECT:
					case HCI_EVNT_NVMEM_WRITE:

						STREAM_TO_UINT32((CHAR *)pucReceivedParams,0
     c5c:	ce 01       	movw	r24, r28
     c5e:	60 e0       	ldi	r22, 0x00	; 0
     c60:	70 e0       	ldi	r23, 0x00	; 0
     c62:	1e c0       	rjmp	.+60     	; 0xca0 <hci_event_handler+0x262>
							,*(UINT32 *)pRetParams);
						break;

					case HCI_EVNT_READ_SP_VERSION:

						STREAM_TO_UINT8(pucReceivedData, HCI_EVENT_STATUS_OFFSET
     c64:	f4 01       	movw	r30, r8
     c66:	84 81       	ldd	r24, Z+4	; 0x04
     c68:	d6 01       	movw	r26, r12
     c6a:	8d 93       	st	X+, r24
     c6c:	6d 01       	movw	r12, r26
							,*(UINT8 *)pRetParams);
						pRetParams = ((CHAR *)pRetParams) + 1;
						STREAM_TO_UINT32((CHAR *)pucReceivedParams, 0, retValue32);
     c6e:	ce 01       	movw	r24, r28
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	0e 94 81 01 	call	0x302	; 0x302 <STREAM_TO_UINT32_f>
     c78:	ab 01       	movw	r20, r22
     c7a:	bc 01       	movw	r22, r24
						UINT32_TO_STREAM((UINT8 *)pRetParams, retValue32);				
     c7c:	c6 01       	movw	r24, r12
     c7e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
     c82:	b6 c1       	rjmp	.+876    	; 0xff0 <hci_event_handler+0x5b2>
						break;

					case HCI_EVNT_BSD_GETHOSTBYNAME:

						STREAM_TO_UINT32((CHAR *)pucReceivedParams
     c84:	ce 01       	movw	r24, r28
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	0e 94 81 01 	call	0x302	; 0x302 <STREAM_TO_UINT32_f>
     c8e:	f6 01       	movw	r30, r12
     c90:	61 93       	st	Z+, r22
     c92:	71 93       	st	Z+, r23
     c94:	81 93       	st	Z+, r24
     c96:	91 93       	st	Z+, r25
     c98:	6f 01       	movw	r12, r30
							,GET_HOST_BY_NAME_RETVAL_OFFSET,*(UINT32 *)pRetParams);
						pRetParams = ((CHAR *)pRetParams) + 4;
						STREAM_TO_UINT32((CHAR *)pucReceivedParams
     c9a:	ce 01       	movw	r24, r28
     c9c:	64 e0       	ldi	r22, 0x04	; 4
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	0e 94 81 01 	call	0x302	; 0x302 <STREAM_TO_UINT32_f>
     ca4:	d6 01       	movw	r26, r12
     ca6:	6d 93       	st	X+, r22
     ca8:	7d 93       	st	X+, r23
     caa:	8d 93       	st	X+, r24
     cac:	9c 93       	st	X, r25
     cae:	13 97       	sbiw	r26, 0x03	; 3
     cb0:	9f c1       	rjmp	.+830    	; 0xff0 <hci_event_handler+0x5b2>
							,GET_HOST_BY_NAME_ADDR_OFFSET,*(UINT32 *)pRetParams);					
						break;

					case HCI_EVNT_GETMSSVALUE:

						STREAM_TO_UINT16((CHAR *)pucReceivedParams
     cb2:	ce 01       	movw	r24, r28
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	0e 94 77 01 	call	0x2ee	; 0x2ee <STREAM_TO_UINT16_f>
     cbc:	e6 01       	movw	r28, r12
     cbe:	99 83       	std	Y+1, r25	; 0x01
     cc0:	88 83       	st	Y, r24
     cc2:	96 c1       	rjmp	.+812    	; 0xff0 <hci_event_handler+0x5b2>

						break;

					case HCI_EVNT_ACCEPT:
						{
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,ACCEPT_SD_OFFSET
     cc4:	ce 01       	movw	r24, r28
     cc6:	60 e0       	ldi	r22, 0x00	; 0
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	0e 94 81 01 	call	0x302	; 0x302 <STREAM_TO_UINT32_f>
     cce:	f6 01       	movw	r30, r12
     cd0:	61 93       	st	Z+, r22
     cd2:	71 93       	st	Z+, r23
     cd4:	81 93       	st	Z+, r24
     cd6:	91 93       	st	Z+, r25
     cd8:	8f 01       	movw	r16, r30
								,*(UINT32 *)pRetParams);
							pRetParams = ((CHAR *)pRetParams) + 4;
							STREAM_TO_UINT32((CHAR *)pucReceivedParams
     cda:	ce 01       	movw	r24, r28
     cdc:	64 e0       	ldi	r22, 0x04	; 4
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	0e 94 81 01 	call	0x302	; 0x302 <STREAM_TO_UINT32_f>
     ce4:	d6 01       	movw	r26, r12
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	6d 93       	st	X+, r22
     cea:	7d 93       	st	X+, r23
     cec:	8d 93       	st	X+, r24
     cee:	9c 93       	st	X, r25
     cf0:	17 97       	sbiw	r26, 0x07	; 7
								,ACCEPT_RETURN_STATUS_OFFSET,*(UINT32 *)pRetParams);
							pRetParams = ((CHAR *)pRetParams) + 4; 
     cf2:	e4 e0       	ldi	r30, 0x04	; 4
     cf4:	ce 2e       	mov	r12, r30
     cf6:	d1 2c       	mov	r13, r1
     cf8:	c0 0e       	add	r12, r16
     cfa:	d1 1e       	adc	r13, r17

							//This argument returns in network order
							memcpy((UINT8 *)pRetParams, 
								pucReceivedParams + ACCEPT_ADDRESS__OFFSET, sizeof(sockaddr));	
     cfc:	d6 01       	movw	r26, r12
     cfe:	fe 01       	movw	r30, r28
     d00:	38 96       	adiw	r30, 0x08	; 8
     d02:	80 e1       	ldi	r24, 0x10	; 16
     d04:	01 90       	ld	r0, Z+
     d06:	0d 92       	st	X+, r0
     d08:	81 50       	subi	r24, 0x01	; 1
     d0a:	e1 f7       	brne	.-8      	; 0xd04 <hci_event_handler+0x2c6>
     d0c:	71 c1       	rjmp	.+738    	; 0xff0 <hci_event_handler+0x5b2>
						}

					case HCI_EVNT_RECV:
					case HCI_EVNT_RECVFROM:
						{
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SL_RECEIVE_SD_OFFSET ,*(UINT32 *)pRetParams);
     d0e:	ce 01       	movw	r24, r28
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	0e 94 81 01 	call	0x302	; 0x302 <STREAM_TO_UINT32_f>
     d18:	f6 01       	movw	r30, r12
     d1a:	61 93       	st	Z+, r22
     d1c:	71 93       	st	Z+, r23
     d1e:	81 93       	st	Z+, r24
     d20:	91 93       	st	Z+, r25
     d22:	8f 01       	movw	r16, r30
							pRetParams = ((CHAR *)pRetParams) + 4;
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SL_RECEIVE_NUM_BYTES_OFFSET,*(UINT32 *)pRetParams);
     d24:	ce 01       	movw	r24, r28
     d26:	64 e0       	ldi	r22, 0x04	; 4
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	0e 94 81 01 	call	0x302	; 0x302 <STREAM_TO_UINT32_f>
     d2e:	d6 01       	movw	r26, r12
     d30:	14 96       	adiw	r26, 0x04	; 4
     d32:	6d 93       	st	X+, r22
     d34:	7d 93       	st	X+, r23
     d36:	8d 93       	st	X+, r24
     d38:	9c 93       	st	X, r25
     d3a:	17 97       	sbiw	r26, 0x07	; 7
							pRetParams = ((CHAR *)pRetParams) + 4;
     d3c:	74 e0       	ldi	r23, 0x04	; 4
     d3e:	c7 2e       	mov	r12, r23
     d40:	d1 2c       	mov	r13, r1
     d42:	c0 0e       	add	r12, r16
     d44:	d1 1e       	adc	r13, r17
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SL_RECEIVE__FLAGS__OFFSET,*(UINT32 *)pRetParams);
     d46:	ce 01       	movw	r24, r28
     d48:	68 e0       	ldi	r22, 0x08	; 8
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	0e 94 81 01 	call	0x302	; 0x302 <STREAM_TO_UINT32_f>
     d50:	9b 01       	movw	r18, r22
     d52:	ac 01       	movw	r20, r24
     d54:	e8 01       	movw	r28, r16
     d56:	6c 83       	std	Y+4, r22	; 0x04
     d58:	7d 83       	std	Y+5, r23	; 0x05
     d5a:	8e 83       	std	Y+6, r24	; 0x06
     d5c:	9f 83       	std	Y+7, r25	; 0x07

							if(((tBsdReadReturnParams *)pRetParams)->iNumberOfBytes == ERROR_SOCKET_INACTIVE)
     d5e:	f6 01       	movw	r30, r12
     d60:	84 81       	ldd	r24, Z+4	; 0x04
     d62:	95 81       	ldd	r25, Z+5	; 0x05
     d64:	a6 81       	ldd	r26, Z+6	; 0x06
     d66:	b7 81       	ldd	r27, Z+7	; 0x07
     d68:	87 5c       	subi	r24, 0xC7	; 199
     d6a:	9f 4f       	sbci	r25, 0xFF	; 255
     d6c:	af 4f       	sbci	r26, 0xFF	; 255
     d6e:	bf 4f       	sbci	r27, 0xFF	; 255
     d70:	09 f0       	breq	.+2      	; 0xd74 <hci_event_handler+0x336>
     d72:	3e c1       	rjmp	.+636    	; 0xff0 <hci_event_handler+0x5b2>
//!                  accordingly  the global socket status
//
//*****************************************************************************
void set_socket_active_status(INT32 Sd, INT32 Status)
{
	if(M_IS_VALID_SD(Sd) && M_IS_VALID_STATUS(Status))
     d74:	28 30       	cpi	r18, 0x08	; 8
     d76:	31 05       	cpc	r19, r1
     d78:	41 05       	cpc	r20, r1
     d7a:	51 05       	cpc	r21, r1
     d7c:	08 f0       	brcs	.+2      	; 0xd80 <hci_event_handler+0x342>
     d7e:	38 c1       	rjmp	.+624    	; 0xff0 <hci_event_handler+0x5b2>
	{
		socket_active_status &= ~(1 << Sd);      /* clean socket's mask */
     d80:	82 2f       	mov	r24, r18
     d82:	21 e0       	ldi	r18, 0x01	; 1
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	08 2e       	mov	r0, r24
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <hci_event_handler+0x350>
     d8a:	22 0f       	add	r18, r18
     d8c:	33 1f       	adc	r19, r19
     d8e:	0a 94       	dec	r0
     d90:	e2 f7       	brpl	.-8      	; 0xd8a <hci_event_handler+0x34c>
     d92:	20 95       	com	r18
     d94:	30 95       	com	r19
     d96:	44 27       	eor	r20, r20
     d98:	37 fd       	sbrc	r19, 7
     d9a:	40 95       	com	r20
     d9c:	54 2f       	mov	r21, r20
     d9e:	e0 90 ce 03 	lds	r14, 0x03CE
     da2:	f0 90 cf 03 	lds	r15, 0x03CF
     da6:	00 91 d0 03 	lds	r16, 0x03D0
     daa:	10 91 d1 03 	lds	r17, 0x03D1
     dae:	2e 21       	and	r18, r14
     db0:	3f 21       	and	r19, r15
     db2:	40 23       	and	r20, r16
     db4:	51 23       	and	r21, r17
		socket_active_status |= (Status << Sd); /* set new socket's mask */
     db6:	61 e0       	ldi	r22, 0x01	; 1
     db8:	e6 2e       	mov	r14, r22
     dba:	f1 2c       	mov	r15, r1
     dbc:	01 2d       	mov	r16, r1
     dbe:	11 2d       	mov	r17, r1
     dc0:	04 c0       	rjmp	.+8      	; 0xdca <hci_event_handler+0x38c>
     dc2:	ee 0c       	add	r14, r14
     dc4:	ff 1c       	adc	r15, r15
     dc6:	00 1f       	adc	r16, r16
     dc8:	11 1f       	adc	r17, r17
     dca:	8a 95       	dec	r24
     dcc:	d2 f7       	brpl	.-12     	; 0xdc2 <hci_event_handler+0x384>
     dce:	2e 29       	or	r18, r14
     dd0:	3f 29       	or	r19, r15
     dd2:	40 2b       	or	r20, r16
     dd4:	51 2b       	or	r21, r17
     dd6:	20 93 ce 03 	sts	0x03CE, r18
     dda:	30 93 cf 03 	sts	0x03CF, r19
     dde:	40 93 d0 03 	sts	0x03D0, r20
     de2:	50 93 d1 03 	sts	0x03D1, r21
     de6:	04 c1       	rjmp	.+520    	; 0xff0 <hci_event_handler+0x5b2>
						}

					case HCI_EVNT_SEND:
					case HCI_EVNT_SENDTO:
						{
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SL_RECEIVE_SD_OFFSET ,*(UINT32 *)pRetParams);
     de8:	ce 01       	movw	r24, r28
     dea:	60 e0       	ldi	r22, 0x00	; 0
     dec:	70 e0       	ldi	r23, 0x00	; 0
     dee:	0e 94 81 01 	call	0x302	; 0x302 <STREAM_TO_UINT32_f>
     df2:	d6 01       	movw	r26, r12
     df4:	6d 93       	st	X+, r22
     df6:	7d 93       	st	X+, r23
     df8:	8d 93       	st	X+, r24
     dfa:	9d 93       	st	X+, r25
     dfc:	8d 01       	movw	r16, r26
							pRetParams = ((CHAR *)pRetParams) + 4;
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SL_RECEIVE_NUM_BYTES_OFFSET,*(UINT32 *)pRetParams);
     dfe:	ce 01       	movw	r24, r28
     e00:	64 e0       	ldi	r22, 0x04	; 4
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	0e 94 81 01 	call	0x302	; 0x302 <STREAM_TO_UINT32_f>
     e08:	e6 01       	movw	r28, r12
     e0a:	6c 83       	std	Y+4, r22	; 0x04
     e0c:	7d 83       	std	Y+5, r23	; 0x05
     e0e:	8e 83       	std	Y+6, r24	; 0x06
     e10:	9f 83       	std	Y+7, r25	; 0x07
							pRetParams = ((CHAR *)pRetParams) + 4;
     e12:	54 e0       	ldi	r21, 0x04	; 4
     e14:	c5 2e       	mov	r12, r21
     e16:	d1 2c       	mov	r13, r1
     e18:	c0 0e       	add	r12, r16
     e1a:	d1 1e       	adc	r13, r17
     e1c:	e9 c0       	rjmp	.+466    	; 0xff0 <hci_event_handler+0x5b2>
							break;
						}

					case HCI_EVNT_SELECT:
						{ 
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SELECT_STATUS_OFFSET,*(UINT32 *)pRetParams);
     e1e:	ce 01       	movw	r24, r28
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	0e 94 81 01 	call	0x302	; 0x302 <STREAM_TO_UINT32_f>
     e28:	f6 01       	movw	r30, r12
     e2a:	61 93       	st	Z+, r22
     e2c:	71 93       	st	Z+, r23
     e2e:	81 93       	st	Z+, r24
     e30:	91 93       	st	Z+, r25
     e32:	8f 01       	movw	r16, r30
							pRetParams = ((CHAR *)pRetParams) + 4;
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SELECT_READFD_OFFSET,*(UINT32 *)pRetParams);
     e34:	ce 01       	movw	r24, r28
     e36:	64 e0       	ldi	r22, 0x04	; 4
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	0e 94 81 01 	call	0x302	; 0x302 <STREAM_TO_UINT32_f>
     e3e:	d6 01       	movw	r26, r12
     e40:	14 96       	adiw	r26, 0x04	; 4
     e42:	6d 93       	st	X+, r22
     e44:	7d 93       	st	X+, r23
     e46:	8d 93       	st	X+, r24
     e48:	9c 93       	st	X, r25
     e4a:	17 97       	sbiw	r26, 0x07	; 7
							pRetParams = ((CHAR *)pRetParams) + 4;
     e4c:	44 e0       	ldi	r20, 0x04	; 4
     e4e:	e4 2e       	mov	r14, r20
     e50:	f1 2c       	mov	r15, r1
     e52:	e0 0e       	add	r14, r16
     e54:	f1 1e       	adc	r15, r17
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SELECT_WRITEFD_OFFSET,*(UINT32 *)pRetParams);
     e56:	ce 01       	movw	r24, r28
     e58:	68 e0       	ldi	r22, 0x08	; 8
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	0e 94 81 01 	call	0x302	; 0x302 <STREAM_TO_UINT32_f>
     e60:	f8 01       	movw	r30, r16
     e62:	64 83       	std	Z+4, r22	; 0x04
     e64:	75 83       	std	Z+5, r23	; 0x05
     e66:	86 83       	std	Z+6, r24	; 0x06
     e68:	97 83       	std	Z+7, r25	; 0x07
							pRetParams = ((CHAR *)pRetParams) + 4;
     e6a:	34 e0       	ldi	r19, 0x04	; 4
     e6c:	c3 2e       	mov	r12, r19
     e6e:	d1 2c       	mov	r13, r1
     e70:	ce 0c       	add	r12, r14
     e72:	df 1c       	adc	r13, r15
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SELECT_EXFD_OFFSET,*(UINT32 *)pRetParams);			
     e74:	ce 01       	movw	r24, r28
     e76:	6c e0       	ldi	r22, 0x0C	; 12
     e78:	70 e0       	ldi	r23, 0x00	; 0
     e7a:	0e 94 81 01 	call	0x302	; 0x302 <STREAM_TO_UINT32_f>
     e7e:	d7 01       	movw	r26, r14
     e80:	14 96       	adiw	r26, 0x04	; 4
     e82:	6d 93       	st	X+, r22
     e84:	7d 93       	st	X+, r23
     e86:	8d 93       	st	X+, r24
     e88:	9c 93       	st	X, r25
     e8a:	17 97       	sbiw	r26, 0x07	; 7
     e8c:	b1 c0       	rjmp	.+354    	; 0xff0 <hci_event_handler+0x5b2>
							break;
						}

					case HCI_CMND_GETSOCKOPT:

						STREAM_TO_UINT8(pucReceivedData, HCI_EVENT_STATUS_OFFSET,((tBsdGetSockOptReturnParams *)pRetParams)->iStatus);
     e8e:	e4 01       	movw	r28, r8
     e90:	8c 81       	ldd	r24, Y+4	; 0x04
     e92:	f6 01       	movw	r30, r12
     e94:	84 83       	std	Z+4, r24	; 0x04
						//This argument returns in network order
						memcpy((UINT8 *)pRetParams, pucReceivedParams, 4);
     e96:	8d 81       	ldd	r24, Y+5	; 0x05
     e98:	9e 81       	ldd	r25, Y+6	; 0x06
     e9a:	af 81       	ldd	r26, Y+7	; 0x07
     e9c:	b8 85       	ldd	r27, Y+8	; 0x08
     e9e:	e6 01       	movw	r28, r12
     ea0:	88 83       	st	Y, r24
     ea2:	99 83       	std	Y+1, r25	; 0x01
     ea4:	aa 83       	std	Y+2, r26	; 0x02
     ea6:	bb 83       	std	Y+3, r27	; 0x03
     ea8:	a3 c0       	rjmp	.+326    	; 0xff0 <hci_event_handler+0x5b2>
						break;

					case HCI_CMND_WLAN_IOCTL_GET_SCAN_RESULTS:

						STREAM_TO_UINT32((CHAR *)pucReceivedParams,GET_SCAN_RESULTS_TABlE_COUNT_OFFSET,*(UINT32 *)pRetParams);
     eaa:	ce 01       	movw	r24, r28
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	0e 94 81 01 	call	0x302	; 0x302 <STREAM_TO_UINT32_f>
     eb4:	f6 01       	movw	r30, r12
     eb6:	61 93       	st	Z+, r22
     eb8:	71 93       	st	Z+, r23
     eba:	81 93       	st	Z+, r24
     ebc:	91 93       	st	Z+, r25
     ebe:	8f 01       	movw	r16, r30
						pRetParams = ((CHAR *)pRetParams) + 4;   					
						STREAM_TO_UINT32((CHAR *)pucReceivedParams,GET_SCAN_RESULTS_SCANRESULT_STATUS_OFFSET,*(UINT32 *)pRetParams);
     ec0:	ce 01       	movw	r24, r28
     ec2:	64 e0       	ldi	r22, 0x04	; 4
     ec4:	70 e0       	ldi	r23, 0x00	; 0
     ec6:	0e 94 81 01 	call	0x302	; 0x302 <STREAM_TO_UINT32_f>
     eca:	d6 01       	movw	r26, r12
     ecc:	14 96       	adiw	r26, 0x04	; 4
     ece:	6d 93       	st	X+, r22
     ed0:	7d 93       	st	X+, r23
     ed2:	8d 93       	st	X+, r24
     ed4:	9c 93       	st	X, r25
     ed6:	17 97       	sbiw	r26, 0x07	; 7
						pRetParams = ((CHAR *)pRetParams) + 4;                                                        					
						STREAM_TO_UINT16((CHAR *)pucReceivedParams,GET_SCAN_RESULTS_ISVALID_TO_SSIDLEN_OFFSET,*(UINT32 *)pRetParams);
     ed8:	ce 01       	movw	r24, r28
     eda:	68 e0       	ldi	r22, 0x08	; 8
     edc:	70 e0       	ldi	r23, 0x00	; 0
     ede:	0e 94 77 01 	call	0x2ee	; 0x2ee <STREAM_TO_UINT16_f>
     ee2:	a0 e0       	ldi	r26, 0x00	; 0
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	f8 01       	movw	r30, r16
     ee8:	84 83       	std	Z+4, r24	; 0x04
     eea:	95 83       	std	Z+5, r25	; 0x05
     eec:	a6 83       	std	Z+6, r26	; 0x06
     eee:	b7 83       	std	Z+7, r27	; 0x07
						pRetParams = ((CHAR *)pRetParams) + 2;   					
						STREAM_TO_UINT16((CHAR *)pucReceivedParams,GET_SCAN_RESULTS_FRAME_TIME_OFFSET,*(UINT32 *)pRetParams);
     ef0:	ce 01       	movw	r24, r28
     ef2:	6a e0       	ldi	r22, 0x0A	; 10
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	0e 94 77 01 	call	0x2ee	; 0x2ee <STREAM_TO_UINT16_f>
     efa:	a0 e0       	ldi	r26, 0x00	; 0
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	f6 01       	movw	r30, r12
     f00:	82 87       	std	Z+10, r24	; 0x0a
     f02:	93 87       	std	Z+11, r25	; 0x0b
     f04:	a4 87       	std	Z+12, r26	; 0x0c
     f06:	b5 87       	std	Z+13, r27	; 0x0d
						pRetParams = ((CHAR *)pRetParams) + 2;  
     f08:	2c e0       	ldi	r18, 0x0C	; 12
     f0a:	e2 2e       	mov	r14, r18
     f0c:	f1 2c       	mov	r15, r1
     f0e:	ce 0c       	add	r12, r14
     f10:	df 1c       	adc	r13, r15
						memcpy((UINT8 *)pRetParams, (CHAR *)(pucReceivedParams + GET_SCAN_RESULTS_FRAME_TIME_OFFSET + 2), GET_SCAN_RESULTS_SSID_MAC_LENGTH);	
     f12:	d6 01       	movw	r26, r12
     f14:	fe 01       	movw	r30, r28
     f16:	3c 96       	adiw	r30, 0x0c	; 12
     f18:	86 e2       	ldi	r24, 0x26	; 38
     f1a:	01 90       	ld	r0, Z+
     f1c:	0d 92       	st	X+, r0
     f1e:	81 50       	subi	r24, 0x01	; 1
     f20:	e1 f7       	brne	.-8      	; 0xf1a <hci_event_handler+0x4dc>
     f22:	66 c0       	rjmp	.+204    	; 0xff0 <hci_event_handler+0x5b2>
						break;

					case HCI_NETAPP_IPCONFIG:

						//Read IP address
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_IP_LENGTH);
     f24:	d4 01       	movw	r26, r8
     f26:	15 96       	adiw	r26, 0x05	; 5
     f28:	8c 91       	ld	r24, X
     f2a:	f6 01       	movw	r30, r12
     f2c:	81 93       	st	Z+, r24
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	d6 01       	movw	r26, r12
     f32:	11 96       	adiw	r26, 0x01	; 1
     f34:	8c 93       	st	X, r24
     f36:	11 97       	sbiw	r26, 0x01	; 1
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	81 83       	std	Z+1, r24	; 0x01
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	82 83       	std	Z+2, r24	; 0x02
     f40:	14 96       	adiw	r26, 0x04	; 4
						RecvParams += 4;
     f42:	f4 01       	movw	r30, r8
     f44:	39 96       	adiw	r30, 0x09	; 9

						//Read subnet
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_IP_LENGTH);
     f46:	e4 01       	movw	r28, r8
     f48:	89 85       	ldd	r24, Y+9	; 0x09
     f4a:	e6 01       	movw	r28, r12
     f4c:	8c 83       	std	Y+4, r24	; 0x04
     f4e:	81 81       	ldd	r24, Z+1	; 0x01
     f50:	8d 83       	std	Y+5, r24	; 0x05
     f52:	82 81       	ldd	r24, Z+2	; 0x02
     f54:	8e 83       	std	Y+6, r24	; 0x06
     f56:	83 81       	ldd	r24, Z+3	; 0x03
     f58:	8f 83       	std	Y+7, r24	; 0x07
     f5a:	9d 01       	movw	r18, r26
     f5c:	2c 5f       	subi	r18, 0xFC	; 252
     f5e:	3f 4f       	sbci	r19, 0xFF	; 255
						RecvParams += 4;
     f60:	f4 01       	movw	r30, r8
     f62:	3d 96       	adiw	r30, 0x0d	; 13

						//Read default GW
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_IP_LENGTH);
     f64:	e4 01       	movw	r28, r8
     f66:	8d 85       	ldd	r24, Y+13	; 0x0d
     f68:	14 96       	adiw	r26, 0x04	; 4
     f6a:	8c 93       	st	X, r24
     f6c:	14 97       	sbiw	r26, 0x04	; 4
     f6e:	81 81       	ldd	r24, Z+1	; 0x01
     f70:	e6 01       	movw	r28, r12
     f72:	89 87       	std	Y+9, r24	; 0x09
     f74:	82 81       	ldd	r24, Z+2	; 0x02
     f76:	8a 87       	std	Y+10, r24	; 0x0a
     f78:	83 81       	ldd	r24, Z+3	; 0x03
     f7a:	8b 87       	std	Y+11, r24	; 0x0b
						RecvParams += 4;
     f7c:	f4 01       	movw	r30, r8
     f7e:	71 96       	adiw	r30, 0x11	; 17

						//Read DHCP server                                          	
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_IP_LENGTH);
     f80:	e4 01       	movw	r28, r8
     f82:	89 89       	ldd	r24, Y+17	; 0x11
     f84:	e9 01       	movw	r28, r18
     f86:	8c 83       	std	Y+4, r24	; 0x04
     f88:	81 81       	ldd	r24, Z+1	; 0x01
     f8a:	e6 01       	movw	r28, r12
     f8c:	8d 87       	std	Y+13, r24	; 0x0d
     f8e:	82 81       	ldd	r24, Z+2	; 0x02
     f90:	8e 87       	std	Y+14, r24	; 0x0e
     f92:	83 81       	ldd	r24, Z+3	; 0x03
     f94:	8f 87       	std	Y+15, r24	; 0x0f
						RecvParams += 4;
     f96:	f4 01       	movw	r30, r8
     f98:	75 96       	adiw	r30, 0x15	; 21

						//Read DNS server                                           
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_IP_LENGTH);
     f9a:	e4 01       	movw	r28, r8
     f9c:	8d 89       	ldd	r24, Y+21	; 0x15
     f9e:	e9 01       	movw	r28, r18
     fa0:	88 87       	std	Y+8, r24	; 0x08
     fa2:	81 81       	ldd	r24, Z+1	; 0x01
     fa4:	1d 96       	adiw	r26, 0x0d	; 13
     fa6:	8c 93       	st	X, r24
     fa8:	1d 97       	sbiw	r26, 0x0d	; 13
     faa:	82 81       	ldd	r24, Z+2	; 0x02
     fac:	1e 96       	adiw	r26, 0x0e	; 14
     fae:	8c 93       	st	X, r24
     fb0:	1e 97       	sbiw	r26, 0x0e	; 14
     fb2:	83 81       	ldd	r24, Z+3	; 0x03
     fb4:	1f 96       	adiw	r26, 0x0f	; 15
     fb6:	8c 93       	st	X, r24
     fb8:	e4 01       	movw	r28, r8
     fba:	96 01       	movw	r18, r12
     fbc:	f4 01       	movw	r30, r8
     fbe:	d6 01       	movw	r26, r12
						RecvParams += 4;

						//Read Mac address                            	
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_MAC_LENGTH);
     fc0:	a4 01       	movw	r20, r8
     fc2:	4a 5f       	subi	r20, 0xFA	; 250
     fc4:	5f 4f       	sbci	r21, 0xFF	; 255
     fc6:	81 8d       	ldd	r24, Z+25	; 0x19
     fc8:	54 96       	adiw	r26, 0x14	; 20
     fca:	8c 93       	st	X, r24
     fcc:	54 97       	sbiw	r26, 0x14	; 20
     fce:	31 96       	adiw	r30, 0x01	; 1
     fd0:	11 96       	adiw	r26, 0x01	; 1
     fd2:	e4 17       	cp	r30, r20
     fd4:	f5 07       	cpc	r31, r21
     fd6:	b9 f7       	brne	.-18     	; 0xfc6 <hci_event_handler+0x588>
						RecvParams += 6;

						//Read SSID
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_SSID_LENGTH);
     fd8:	a4 01       	movw	r20, r8
     fda:	40 5e       	subi	r20, 0xE0	; 224
     fdc:	5f 4f       	sbci	r21, 0xFF	; 255
     fde:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fe0:	f9 01       	movw	r30, r18
     fe2:	82 8f       	std	Z+26, r24	; 0x1a
     fe4:	21 96       	adiw	r28, 0x01	; 1
     fe6:	2f 5f       	subi	r18, 0xFF	; 255
     fe8:	3f 4f       	sbci	r19, 0xFF	; 255
     fea:	c4 17       	cp	r28, r20
     fec:	d5 07       	cpc	r29, r21
     fee:	b9 f7       	brne	.-18     	; 0xfde <hci_event_handler+0x5a0>

					}
				}

				if (usReceivedEventOpcode == tSLInformation.usRxEventOpcode)
     ff0:	80 91 70 04 	lds	r24, 0x0470
     ff4:	90 91 71 04 	lds	r25, 0x0471
     ff8:	a8 16       	cp	r10, r24
     ffa:	b9 06       	cpc	r11, r25
     ffc:	b9 f5       	brne	.+110    	; 0x106c <hci_event_handler+0x62e>
				{
					tSLInformation.usRxEventOpcode = 0;
     ffe:	10 92 71 04 	sts	0x0471, r1
    1002:	10 92 70 04 	sts	0x0470, r1
    1006:	32 c0       	rjmp	.+100    	; 0x106c <hci_event_handler+0x62e>
				}
			}
			else
			{				
				pucReceivedParams = pucReceivedData;
				STREAM_TO_UINT8((CHAR *)pucReceivedData, HCI_PACKET_ARGSIZE_OFFSET, ucArgsize);
    1008:	d4 01       	movw	r26, r8
    100a:	12 96       	adiw	r26, 0x02	; 2
    100c:	0c 91       	ld	r16, X

				STREAM_TO_UINT16((CHAR *)pucReceivedData, HCI_PACKET_LENGTH_OFFSET, usLength);
    100e:	c4 01       	movw	r24, r8
    1010:	63 e0       	ldi	r22, 0x03	; 3
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	0e 94 77 01 	call	0x2ee	; 0x2ee <STREAM_TO_UINT16_f>
    1018:	ec 01       	movw	r28, r24

				// Data received: note that the only case where from and from length 
				// are not null is in recv from, so fill the args accordingly
				if (from)
    101a:	41 14       	cp	r4, r1
    101c:	51 04       	cpc	r5, r1
    101e:	a1 f0       	breq	.+40     	; 0x1048 <hci_event_handler+0x60a>
				{
					STREAM_TO_UINT32((CHAR *)(pucReceivedData + HCI_DATA_HEADER_SIZE), BSD_RECV_FROM_FROMLEN_OFFSET, *(UINT32 *)fromlen);
    1020:	c4 01       	movw	r24, r8
    1022:	05 96       	adiw	r24, 0x05	; 5
    1024:	64 e0       	ldi	r22, 0x04	; 4
    1026:	70 e0       	ldi	r23, 0x00	; 0
    1028:	0e 94 81 01 	call	0x302	; 0x302 <STREAM_TO_UINT32_f>
    102c:	46 2f       	mov	r20, r22
    102e:	f3 01       	movw	r30, r6
    1030:	60 83       	st	Z, r22
    1032:	71 83       	std	Z+1, r23	; 0x01
    1034:	82 83       	std	Z+2, r24	; 0x02
    1036:	93 83       	std	Z+3, r25	; 0x03
					memcpy(from, (pucReceivedData + HCI_DATA_HEADER_SIZE + BSD_RECV_FROM_FROM_OFFSET) ,*fromlen);
    1038:	94 01       	movw	r18, r8
    103a:	2b 5e       	subi	r18, 0xEB	; 235
    103c:	3f 4f       	sbci	r19, 0xFF	; 255
    103e:	c2 01       	movw	r24, r4
    1040:	b9 01       	movw	r22, r18
    1042:	50 e0       	ldi	r21, 0x00	; 0
    1044:	0e 94 0d 01 	call	0x21a	; 0x21a <memcpy>
				}

				memcpy(pRetParams, pucReceivedParams + HCI_DATA_HEADER_SIZE + ucArgsize,
					usLength - ucArgsize);
    1048:	20 2f       	mov	r18, r16
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	fe 01       	movw	r30, r28
    104e:	e2 1b       	sub	r30, r18
    1050:	f3 0b       	sbc	r31, r19
    1052:	2b 5f       	subi	r18, 0xFB	; 251
    1054:	3f 4f       	sbci	r19, 0xFF	; 255
    1056:	28 0d       	add	r18, r8
    1058:	39 1d       	adc	r19, r9
    105a:	c6 01       	movw	r24, r12
    105c:	b9 01       	movw	r22, r18
    105e:	af 01       	movw	r20, r30
    1060:	0e 94 0d 01 	call	0x21a	; 0x21a <memcpy>

				tSLInformation.usRxDataPending = 0;
    1064:	10 92 93 04 	sts	0x0493, r1
    1068:	10 92 92 04 	sts	0x0492, r1
			}

			tSLInformation.usEventOrDataReceived = 0;
    106c:	10 92 73 04 	sts	0x0473, r1
    1070:	10 92 72 04 	sts	0x0472, r1

			SpiResumeSpi();
    1074:	0e 94 11 20 	call	0x4022	; 0x4022 <_Z12SpiResumeSpiv>

			// Since we are going to TX - we need to handle this event after the 
			// ResumeSPi since we need interrupts
			if ((*pucReceivedData == HCI_TYPE_EVNT) &&
    1078:	d4 01       	movw	r26, r8
    107a:	8c 91       	ld	r24, X
    107c:	84 30       	cpi	r24, 0x04	; 4
    107e:	41 f4       	brne	.+16     	; 0x1090 <hci_event_handler+0x652>
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	ab 16       	cp	r10, r27
    1084:	b0 e1       	ldi	r27, 0x10	; 16
    1086:	bb 06       	cpc	r11, r27
    1088:	19 f4       	brne	.+6      	; 0x1090 <hci_event_handler+0x652>
				(usReceivedEventOpcode == HCI_EVNT_PATCHES_REQ))
			{
				hci_unsol_handle_patch_request((CHAR *)pucReceivedData);
    108a:	c4 01       	movw	r24, r8
    108c:	0e 94 a5 04 	call	0x94a	; 0x94a <_Z30hci_unsol_handle_patch_requestPc>
			}

			if ((tSLInformation.usRxEventOpcode == 0) && (tSLInformation.usRxDataPending == 0))
    1090:	80 91 70 04 	lds	r24, 0x0470
    1094:	90 91 71 04 	lds	r25, 0x0471
    1098:	89 2b       	or	r24, r25
    109a:	09 f0       	breq	.+2      	; 0x109e <hci_event_handler+0x660>
    109c:	e5 cc       	rjmp	.-1590   	; 0xa68 <hci_event_handler+0x2a>
    109e:	80 91 92 04 	lds	r24, 0x0492
    10a2:	90 91 93 04 	lds	r25, 0x0493
    10a6:	89 2b       	or	r24, r25
    10a8:	09 f0       	breq	.+2      	; 0x10ac <hci_event_handler+0x66e>
    10aa:	de cc       	rjmp	.-1604   	; 0xa68 <hci_event_handler+0x2a>
				return NULL;
			}	
		}
	}

}
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	1f 91       	pop	r17
    10b6:	0f 91       	pop	r16
    10b8:	ff 90       	pop	r15
    10ba:	ef 90       	pop	r14
    10bc:	df 90       	pop	r13
    10be:	cf 90       	pop	r12
    10c0:	bf 90       	pop	r11
    10c2:	af 90       	pop	r10
    10c4:	9f 90       	pop	r9
    10c6:	8f 90       	pop	r8
    10c8:	7f 90       	pop	r7
    10ca:	6f 90       	pop	r6
    10cc:	5f 90       	pop	r5
    10ce:	4f 90       	pop	r4
    10d0:	08 95       	ret

000010d2 <SimpleLinkWaitData>:

void SimpleLinkWaitData(UINT8 *pBuf, UINT8 *from, UINT8 *fromlen)
{
	// In the blocking implementation the control to caller will be returned only 
	// after the end of current transaction, i.e. only after data will be received
	tSLInformation.usRxDataPending = 1;
    10d2:	21 e0       	ldi	r18, 0x01	; 1
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	30 93 93 04 	sts	0x0493, r19
    10da:	20 93 92 04 	sts	0x0492, r18
	hci_event_handler(pBuf, from, fromlen);
    10de:	0e 94 1f 05 	call	0xa3e	; 0xa3e <hci_event_handler>
}
    10e2:	08 95       	ret

000010e4 <SimpleLinkWaitEvent>:

void SimpleLinkWaitEvent(UINT16 usOpcode, void *pRetParams)
{
	// In the blocking implementation the control to caller will be returned only 
	// after the end of current transaction
	tSLInformation.usRxEventOpcode = usOpcode;
    10e4:	90 93 71 04 	sts	0x0471, r25
    10e8:	80 93 70 04 	sts	0x0470, r24
	hci_event_handler(pRetParams, 0, 0);
    10ec:	cb 01       	movw	r24, r22
    10ee:	60 e0       	ldi	r22, 0x00	; 0
    10f0:	70 e0       	ldi	r23, 0x00	; 0
    10f2:	40 e0       	ldi	r20, 0x00	; 0
    10f4:	50 e0       	ldi	r21, 0x00	; 0
    10f6:	0e 94 1f 05 	call	0xa3e	; 0xa3e <hci_event_handler>
}
    10fa:	08 95       	ret

000010fc <hci_data_send>:
INT32 hci_data_send(UINT8 ucOpcode, 
	UINT8 *ucArgs,
	UINT16 usArgsLength, 
	UINT16 usDataLength,
	const UINT8 *ucTail,
	UINT16 usTailLength)
    10fc:	cf 92       	push	r12
    10fe:	df 92       	push	r13
    1100:	ef 92       	push	r14
    1102:	ff 92       	push	r15
    1104:	0f 93       	push	r16
    1106:	1f 93       	push	r17
    1108:	6b 01       	movw	r12, r22
    110a:	89 01       	movw	r16, r18
{
	UINT8 *stream;

	stream = ((ucArgs) + SPI_HEADER_SIZE);

	UINT8_TO_STREAM(stream, HCI_TYPE_DATA);
    110c:	92 e0       	ldi	r25, 0x02	; 2
    110e:	fb 01       	movw	r30, r22
    1110:	95 83       	std	Z+5, r25	; 0x05
	UINT8_TO_STREAM(stream, ucOpcode);
    1112:	86 83       	std	Z+6, r24	; 0x06
	UINT8_TO_STREAM(stream, usArgsLength);
    1114:	47 83       	std	Z+7, r20	; 0x07
	stream = UINT16_TO_STREAM(stream, usArgsLength + usDataLength + usTailLength);
    1116:	04 0f       	add	r16, r20
    1118:	15 1f       	adc	r17, r21
    111a:	0e 0d       	add	r16, r14
    111c:	1f 1d       	adc	r17, r15
    111e:	cb 01       	movw	r24, r22
    1120:	08 96       	adiw	r24, 0x08	; 8
    1122:	b8 01       	movw	r22, r16
    1124:	0e 94 6f 01 	call	0x2de	; 0x2de <UINT16_TO_STREAM_f>

	// Send the packet over the SPI
	SpiWrite(ucArgs, SIMPLE_LINK_HCI_DATA_HEADER_SIZE + usArgsLength + usDataLength + usTailLength);
    1128:	0b 5f       	subi	r16, 0xFB	; 251
    112a:	1f 4f       	sbci	r17, 0xFF	; 255
    112c:	c6 01       	movw	r24, r12
    112e:	b8 01       	movw	r22, r16
    1130:	0e 94 cd 21 	call	0x439a	; 0x439a <_Z8SpiWritePht>

	return(ESUCCESS);
}
    1134:	60 e0       	ldi	r22, 0x00	; 0
    1136:	70 e0       	ldi	r23, 0x00	; 0
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	1f 91       	pop	r17
    113e:	0f 91       	pop	r16
    1140:	ff 90       	pop	r15
    1142:	ef 90       	pop	r14
    1144:	df 90       	pop	r13
    1146:	cf 90       	pop	r12
    1148:	08 95       	ret

0000114a <hci_command_send>:
//!  @return              none
//!
//!  @brief               Initiate an HCI command.
//
//*****************************************************************************
UINT16 hci_command_send(UINT16 usOpcode, UINT8 *pucBuff, UINT8 ucArgsLength)
    114a:	ef 92       	push	r14
    114c:	ff 92       	push	r15
    114e:	0f 93       	push	r16
    1150:	1f 93       	push	r17
    1152:	9c 01       	movw	r18, r24
    1154:	7b 01       	movw	r14, r22
    1156:	04 2f       	mov	r16, r20
{ 
	UINT8 *stream;

	stream = (pucBuff + SPI_HEADER_SIZE);

	UINT8_TO_STREAM(stream, HCI_TYPE_CMND);
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	fb 01       	movw	r30, r22
    115c:	85 83       	std	Z+5, r24	; 0x05
	stream = UINT16_TO_STREAM(stream, usOpcode);
    115e:	cb 01       	movw	r24, r22
    1160:	06 96       	adiw	r24, 0x06	; 6
    1162:	b9 01       	movw	r22, r18
    1164:	0e 94 6f 01 	call	0x2de	; 0x2de <UINT16_TO_STREAM_f>
    1168:	fc 01       	movw	r30, r24
	UINT8_TO_STREAM(stream, ucArgsLength);
    116a:	00 83       	st	Z, r16

	//Update the opcode of the event we will be waiting for
	SpiWrite(pucBuff, ucArgsLength + SIMPLE_LINK_HCI_CMND_HEADER_SIZE);
    116c:	10 e0       	ldi	r17, 0x00	; 0
    116e:	0c 5f       	subi	r16, 0xFC	; 252
    1170:	1f 4f       	sbci	r17, 0xFF	; 255
    1172:	c7 01       	movw	r24, r14
    1174:	b8 01       	movw	r22, r16
    1176:	0e 94 cd 21 	call	0x439a	; 0x439a <_Z8SpiWritePht>

	return(0);
}
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	1f 91       	pop	r17
    1180:	0f 91       	pop	r16
    1182:	ff 90       	pop	r15
    1184:	ef 90       	pop	r14
    1186:	08 95       	ret

00001188 <hci_patch_send>:
//!  @return              none
//!
//!  @brief               Prepeare HCI header and initiate an HCI patch write operation
//
//*****************************************************************************
void hci_patch_send(UINT8 ucOpcode, UINT8 *pucBuff, CHAR *patch, UINT16 usDataLength)
    1188:	4f 92       	push	r4
    118a:	5f 92       	push	r5
    118c:	6f 92       	push	r6
    118e:	7f 92       	push	r7
    1190:	8f 92       	push	r8
    1192:	9f 92       	push	r9
    1194:	af 92       	push	r10
    1196:	bf 92       	push	r11
    1198:	cf 92       	push	r12
    119a:	df 92       	push	r13
    119c:	ef 92       	push	r14
    119e:	ff 92       	push	r15
    11a0:	0f 93       	push	r16
    11a2:	1f 93       	push	r17
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	6b 01       	movw	r12, r22
    11aa:	4a 01       	movw	r8, r20
    11ac:	e9 01       	movw	r28, r18
{ 
	UINT8 *data_ptr = (pucBuff + SPI_HEADER_SIZE);
    11ae:	45 e0       	ldi	r20, 0x05	; 5
    11b0:	44 2e       	mov	r4, r20
    11b2:	51 2c       	mov	r5, r1
    11b4:	46 0e       	add	r4, r22
    11b6:	57 1e       	adc	r5, r23
	UINT16 usTransLength;
	UINT8 *stream = (pucBuff + SPI_HEADER_SIZE);

	UINT8_TO_STREAM(stream, HCI_TYPE_PATCH);
    11b8:	93 e0       	ldi	r25, 0x03	; 3
    11ba:	fb 01       	movw	r30, r22
    11bc:	95 83       	std	Z+5, r25	; 0x05
	UINT8_TO_STREAM(stream, ucOpcode);
    11be:	86 83       	std	Z+6, r24	; 0x06
    11c0:	37 e0       	ldi	r19, 0x07	; 7
    11c2:	63 2e       	mov	r6, r19
    11c4:	71 2c       	mov	r7, r1
    11c6:	66 0e       	add	r6, r22
    11c8:	77 1e       	adc	r7, r23
	stream = UINT16_TO_STREAM(stream, usDataLength + SIMPLE_LINK_HCI_PATCH_HEADER_SIZE);
    11ca:	8e 01       	movw	r16, r28
    11cc:	0e 5f       	subi	r16, 0xFE	; 254
    11ce:	1f 4f       	sbci	r17, 0xFF	; 255
    11d0:	c3 01       	movw	r24, r6
    11d2:	b8 01       	movw	r22, r16
    11d4:	0e 94 6f 01 	call	0x2de	; 0x2de <UINT16_TO_STREAM_f>
    11d8:	7c 01       	movw	r14, r24
    11da:	2b e0       	ldi	r18, 0x0B	; 11
    11dc:	a2 2e       	mov	r10, r18
    11de:	b1 2c       	mov	r11, r1
    11e0:	ac 0c       	add	r10, r12
    11e2:	bd 1c       	adc	r11, r13

	if (usDataLength <= SL_PATCH_PORTION_SIZE)
    11e4:	f3 e0       	ldi	r31, 0x03	; 3
    11e6:	c9 3e       	cpi	r28, 0xE9	; 233
    11e8:	df 07       	cpc	r29, r31
    11ea:	90 f4       	brcc	.+36     	; 0x1210 <hci_patch_send+0x88>
	{
		UINT16_TO_STREAM(stream, usDataLength);
    11ec:	be 01       	movw	r22, r28
    11ee:	0e 94 6f 01 	call	0x2de	; 0x2de <UINT16_TO_STREAM_f>
		stream = UINT16_TO_STREAM(stream, usDataLength);
    11f2:	c7 01       	movw	r24, r14
    11f4:	be 01       	movw	r22, r28
    11f6:	0e 94 6f 01 	call	0x2de	; 0x2de <UINT16_TO_STREAM_f>
		memcpy((pucBuff + SPI_HEADER_SIZE) + HCI_PATCH_HEADER_SIZE, patch, usDataLength);
    11fa:	c5 01       	movw	r24, r10
    11fc:	b4 01       	movw	r22, r8
    11fe:	ae 01       	movw	r20, r28
    1200:	0e 94 0d 01 	call	0x21a	; 0x21a <memcpy>

		// Update the opcode of the event we will be waiting for
		SpiWrite(pucBuff, usDataLength + HCI_PATCH_HEADER_SIZE);
    1204:	26 96       	adiw	r28, 0x06	; 6
    1206:	c6 01       	movw	r24, r12
    1208:	be 01       	movw	r22, r28
    120a:	0e 94 cd 21 	call	0x439a	; 0x439a <_Z8SpiWritePht>
    120e:	47 c0       	rjmp	.+142    	; 0x129e <hci_patch_send+0x116>
	}
	else
	{

		usTransLength = (usDataLength/SL_PATCH_PORTION_SIZE);
		UINT16_TO_STREAM(stream, usDataLength + SIMPLE_LINK_HCI_PATCH_HEADER_SIZE + usTransLength*SIMPLE_LINK_HCI_PATCH_HEADER_SIZE);
    1210:	ce 01       	movw	r24, r28
    1212:	68 ee       	ldi	r22, 0xE8	; 232
    1214:	73 e0       	ldi	r23, 0x03	; 3
    1216:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <__udivmodhi4>
    121a:	66 0f       	add	r22, r22
    121c:	77 1f       	adc	r23, r23
    121e:	06 0f       	add	r16, r22
    1220:	17 1f       	adc	r17, r23
    1222:	c7 01       	movw	r24, r14
    1224:	b8 01       	movw	r22, r16
    1226:	0e 94 6f 01 	call	0x2de	; 0x2de <UINT16_TO_STREAM_f>
		stream = UINT16_TO_STREAM(stream, SL_PATCH_PORTION_SIZE);
    122a:	c7 01       	movw	r24, r14
    122c:	68 ee       	ldi	r22, 0xE8	; 232
    122e:	73 e0       	ldi	r23, 0x03	; 3
    1230:	0e 94 6f 01 	call	0x2de	; 0x2de <UINT16_TO_STREAM_f>
		memcpy(pucBuff + SPI_HEADER_SIZE + HCI_PATCH_HEADER_SIZE, patch, SL_PATCH_PORTION_SIZE);
    1234:	d5 01       	movw	r26, r10
    1236:	f4 01       	movw	r30, r8
    1238:	88 ee       	ldi	r24, 0xE8	; 232
    123a:	93 e0       	ldi	r25, 0x03	; 3
    123c:	01 90       	ld	r0, Z+
    123e:	0d 92       	st	X+, r0
    1240:	01 97       	sbiw	r24, 0x01	; 1
    1242:	e1 f7       	brne	.-8      	; 0x123c <hci_patch_send+0xb4>
		usDataLength -= SL_PATCH_PORTION_SIZE;
    1244:	8e 01       	movw	r16, r28
    1246:	08 5e       	subi	r16, 0xE8	; 232
    1248:	13 40       	sbci	r17, 0x03	; 3
		patch += SL_PATCH_PORTION_SIZE;
    124a:	88 ee       	ldi	r24, 0xE8	; 232
    124c:	e8 2e       	mov	r14, r24
    124e:	83 e0       	ldi	r24, 0x03	; 3
    1250:	f8 2e       	mov	r15, r24
    1252:	e8 0c       	add	r14, r8
    1254:	f9 1c       	adc	r15, r9

		// Update the opcode of the event we will be waiting for
		SpiWrite(pucBuff, SL_PATCH_PORTION_SIZE + HCI_PATCH_HEADER_SIZE);
    1256:	c6 01       	movw	r24, r12
    1258:	6e ee       	ldi	r22, 0xEE	; 238
    125a:	73 e0       	ldi	r23, 0x03	; 3
    125c:	1b c0       	rjmp	.+54     	; 0x1294 <hci_patch_send+0x10c>
		while (usDataLength)
		{
			// Adafruit CC3k Host Driver Difference
			// Check for missed interrupt to try to make code more reliable.
			// Noted 12-12-2014 by tdicola
			cc3k_int_poll();
    125e:	0e 94 47 21 	call	0x428e	; 0x428e <cc3k_int_poll>

			if (usDataLength <= SL_PATCH_PORTION_SIZE)
    1262:	83 e0       	ldi	r24, 0x03	; 3
    1264:	09 3e       	cpi	r16, 0xE9	; 233
    1266:	18 07       	cpc	r17, r24
    1268:	20 f4       	brcc	.+8      	; 0x1272 <hci_patch_send+0xea>
    126a:	e8 01       	movw	r28, r16
    126c:	00 e0       	ldi	r16, 0x00	; 0
    126e:	10 e0       	ldi	r17, 0x00	; 0
    1270:	04 c0       	rjmp	.+8      	; 0x127a <hci_patch_send+0xf2>

			}
			else
			{
				usTransLength = SL_PATCH_PORTION_SIZE;
				usDataLength -= usTransLength;
    1272:	08 5e       	subi	r16, 0xE8	; 232
    1274:	13 40       	sbci	r17, 0x03	; 3
    1276:	c8 ee       	ldi	r28, 0xE8	; 232
    1278:	d3 e0       	ldi	r29, 0x03	; 3
			}

			*(UINT16 *)data_ptr = usTransLength;
    127a:	f2 01       	movw	r30, r4
    127c:	d1 83       	std	Z+1, r29	; 0x01
    127e:	c0 83       	st	Z, r28
			memcpy(data_ptr + SIMPLE_LINK_HCI_PATCH_HEADER_SIZE, patch, usTransLength);
    1280:	c3 01       	movw	r24, r6
    1282:	b7 01       	movw	r22, r14
    1284:	ae 01       	movw	r20, r28
    1286:	0e 94 0d 01 	call	0x21a	; 0x21a <memcpy>
			patch += usTransLength;
    128a:	ec 0e       	add	r14, r28
    128c:	fd 1e       	adc	r15, r29

			// Update the opcode of the event we will be waiting for
			SpiWrite((UINT8 *)data_ptr, usTransLength + sizeof(usTransLength));
    128e:	22 96       	adiw	r28, 0x02	; 2
    1290:	c2 01       	movw	r24, r4
    1292:	be 01       	movw	r22, r28
    1294:	0e 94 cd 21 	call	0x439a	; 0x439a <_Z8SpiWritePht>
		patch += SL_PATCH_PORTION_SIZE;

		// Update the opcode of the event we will be waiting for
		SpiWrite(pucBuff, SL_PATCH_PORTION_SIZE + HCI_PATCH_HEADER_SIZE);

		while (usDataLength)
    1298:	01 15       	cp	r16, r1
    129a:	11 05       	cpc	r17, r1
    129c:	01 f7       	brne	.-64     	; 0x125e <hci_patch_send+0xd6>

			// Update the opcode of the event we will be waiting for
			SpiWrite((UINT8 *)data_ptr, usTransLength + sizeof(usTransLength));
		}
	}
}
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	1f 91       	pop	r17
    12a4:	0f 91       	pop	r16
    12a6:	ff 90       	pop	r15
    12a8:	ef 90       	pop	r14
    12aa:	df 90       	pop	r13
    12ac:	cf 90       	pop	r12
    12ae:	bf 90       	pop	r11
    12b0:	af 90       	pop	r10
    12b2:	9f 90       	pop	r9
    12b4:	8f 90       	pop	r8
    12b6:	7f 90       	pop	r7
    12b8:	6f 90       	pop	r6
    12ba:	5f 90       	pop	r5
    12bc:	4f 90       	pop	r4
    12be:	08 95       	ret

000012c0 <netapp_ipconfig>:
//!       		the Wireless network the device is associated with.
//!
//*****************************************************************************

#ifndef CC3000_TINY_DRIVER
void netapp_ipconfig( tNetappIpconfigRetArgs * ipconfig )
    12c0:	0f 93       	push	r16
    12c2:	1f 93       	push	r17
    12c4:	8c 01       	movw	r16, r24
{
	UINT8 *ptr;

	ptr = tSLInformation.pucTxCommandBuffer;
    12c6:	60 91 76 04 	lds	r22, 0x0476
    12ca:	70 91 77 04 	lds	r23, 0x0477

	// Initiate a HCI command
	hci_command_send(HCI_NETAPP_IPCONFIG, ptr, 0);
    12ce:	85 e0       	ldi	r24, 0x05	; 5
    12d0:	90 e2       	ldi	r25, 0x20	; 32
    12d2:	40 e0       	ldi	r20, 0x00	; 0
    12d4:	0e 94 a5 08 	call	0x114a	; 0x114a <hci_command_send>

	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_NETAPP_IPCONFIG, ipconfig );
    12d8:	85 e0       	ldi	r24, 0x05	; 5
    12da:	90 e2       	ldi	r25, 0x20	; 32
    12dc:	b8 01       	movw	r22, r16
    12de:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SimpleLinkWaitEvent>

}
    12e2:	1f 91       	pop	r17
    12e4:	0f 91       	pop	r16
    12e6:	08 95       	ret

000012e8 <netapp_timeout_values>:
//!               it will be set automatically to 10s.
//!
//*****************************************************************************

#ifndef CC3000_TINY_DRIVER
INT32 netapp_timeout_values(UINT32 *aucDHCP, UINT32 *aucARP,UINT32 *aucKeepalive,	UINT32 *aucInactivity)
    12e8:	8f 92       	push	r8
    12ea:	9f 92       	push	r9
    12ec:	af 92       	push	r10
    12ee:	bf 92       	push	r11
    12f0:	cf 92       	push	r12
    12f2:	df 92       	push	r13
    12f4:	ef 92       	push	r14
    12f6:	ff 92       	push	r15
    12f8:	0f 93       	push	r16
    12fa:	1f 93       	push	r17
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	0f 92       	push	r0
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	4c 01       	movw	r8, r24
    1308:	8b 01       	movw	r16, r22
    130a:	7a 01       	movw	r14, r20
    130c:	69 01       	movw	r12, r18
{
	INT8 scRet;
	UINT8 *ptr;
	UINT8 *args;

	scRet = EFAIL;
    130e:	8f ef       	ldi	r24, 0xFF	; 255
    1310:	89 83       	std	Y+1, r24	; 0x01
	ptr = tSLInformation.pucTxCommandBuffer;
    1312:	a0 90 76 04 	lds	r10, 0x0476
    1316:	b0 90 77 04 	lds	r11, 0x0477
	args = (ptr + HEADERS_SIZE_CMD);

	// Set minimal values of timers 
	MIN_TIMER_SET(*aucDHCP)
    131a:	f4 01       	movw	r30, r8
    131c:	80 81       	ld	r24, Z
    131e:	91 81       	ldd	r25, Z+1	; 0x01
    1320:	a2 81       	ldd	r26, Z+2	; 0x02
    1322:	b3 81       	ldd	r27, Z+3	; 0x03
    1324:	01 97       	sbiw	r24, 0x01	; 1
    1326:	a1 09       	sbc	r26, r1
    1328:	b1 09       	sbc	r27, r1
    132a:	09 97       	sbiw	r24, 0x09	; 9
    132c:	a1 05       	cpc	r26, r1
    132e:	b1 05       	cpc	r27, r1
    1330:	40 f4       	brcc	.+16     	; 0x1342 <netapp_timeout_values+0x5a>
    1332:	8a e0       	ldi	r24, 0x0A	; 10
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	a0 e0       	ldi	r26, 0x00	; 0
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	80 83       	st	Z, r24
    133c:	91 83       	std	Z+1, r25	; 0x01
    133e:	a2 83       	std	Z+2, r26	; 0x02
    1340:	b3 83       	std	Z+3, r27	; 0x03
		MIN_TIMER_SET(*aucARP)
    1342:	f8 01       	movw	r30, r16
    1344:	80 81       	ld	r24, Z
    1346:	91 81       	ldd	r25, Z+1	; 0x01
    1348:	a2 81       	ldd	r26, Z+2	; 0x02
    134a:	b3 81       	ldd	r27, Z+3	; 0x03
    134c:	01 97       	sbiw	r24, 0x01	; 1
    134e:	a1 09       	sbc	r26, r1
    1350:	b1 09       	sbc	r27, r1
    1352:	09 97       	sbiw	r24, 0x09	; 9
    1354:	a1 05       	cpc	r26, r1
    1356:	b1 05       	cpc	r27, r1
    1358:	40 f4       	brcc	.+16     	; 0x136a <netapp_timeout_values+0x82>
    135a:	8a e0       	ldi	r24, 0x0A	; 10
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	a0 e0       	ldi	r26, 0x00	; 0
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	80 83       	st	Z, r24
    1364:	91 83       	std	Z+1, r25	; 0x01
    1366:	a2 83       	std	Z+2, r26	; 0x02
    1368:	b3 83       	std	Z+3, r27	; 0x03
		MIN_TIMER_SET(*aucKeepalive)
    136a:	f7 01       	movw	r30, r14
    136c:	80 81       	ld	r24, Z
    136e:	91 81       	ldd	r25, Z+1	; 0x01
    1370:	a2 81       	ldd	r26, Z+2	; 0x02
    1372:	b3 81       	ldd	r27, Z+3	; 0x03
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	a1 09       	sbc	r26, r1
    1378:	b1 09       	sbc	r27, r1
    137a:	09 97       	sbiw	r24, 0x09	; 9
    137c:	a1 05       	cpc	r26, r1
    137e:	b1 05       	cpc	r27, r1
    1380:	40 f4       	brcc	.+16     	; 0x1392 <netapp_timeout_values+0xaa>
    1382:	8a e0       	ldi	r24, 0x0A	; 10
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	a0 e0       	ldi	r26, 0x00	; 0
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	80 83       	st	Z, r24
    138c:	91 83       	std	Z+1, r25	; 0x01
    138e:	a2 83       	std	Z+2, r26	; 0x02
    1390:	b3 83       	std	Z+3, r27	; 0x03
		MIN_TIMER_SET(*aucInactivity)
    1392:	f6 01       	movw	r30, r12
    1394:	80 81       	ld	r24, Z
    1396:	91 81       	ldd	r25, Z+1	; 0x01
    1398:	a2 81       	ldd	r26, Z+2	; 0x02
    139a:	b3 81       	ldd	r27, Z+3	; 0x03
    139c:	01 97       	sbiw	r24, 0x01	; 1
    139e:	a1 09       	sbc	r26, r1
    13a0:	b1 09       	sbc	r27, r1
    13a2:	09 97       	sbiw	r24, 0x09	; 9
    13a4:	a1 05       	cpc	r26, r1
    13a6:	b1 05       	cpc	r27, r1
    13a8:	40 f4       	brcc	.+16     	; 0x13ba <netapp_timeout_values+0xd2>
    13aa:	8a e0       	ldi	r24, 0x0A	; 10
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	a0 e0       	ldi	r26, 0x00	; 0
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	80 83       	st	Z, r24
    13b4:	91 83       	std	Z+1, r25	; 0x01
    13b6:	a2 83       	std	Z+2, r26	; 0x02
    13b8:	b3 83       	std	Z+3, r27	; 0x03

		// Fill in temporary command buffer
		args = UINT32_TO_STREAM(args, *aucDHCP);
    13ba:	f4 01       	movw	r30, r8
    13bc:	40 81       	ld	r20, Z
    13be:	51 81       	ldd	r21, Z+1	; 0x01
    13c0:	62 81       	ldd	r22, Z+2	; 0x02
    13c2:	73 81       	ldd	r23, Z+3	; 0x03
    13c4:	c5 01       	movw	r24, r10
    13c6:	09 96       	adiw	r24, 0x09	; 9
    13c8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, *aucARP);
    13cc:	f8 01       	movw	r30, r16
    13ce:	40 81       	ld	r20, Z
    13d0:	51 81       	ldd	r21, Z+1	; 0x01
    13d2:	62 81       	ldd	r22, Z+2	; 0x02
    13d4:	73 81       	ldd	r23, Z+3	; 0x03
    13d6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, *aucKeepalive);
    13da:	f7 01       	movw	r30, r14
    13dc:	40 81       	ld	r20, Z
    13de:	51 81       	ldd	r21, Z+1	; 0x01
    13e0:	62 81       	ldd	r22, Z+2	; 0x02
    13e2:	73 81       	ldd	r23, Z+3	; 0x03
    13e4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, *aucInactivity);
    13e8:	f6 01       	movw	r30, r12
    13ea:	40 81       	ld	r20, Z
    13ec:	51 81       	ldd	r21, Z+1	; 0x01
    13ee:	62 81       	ldd	r22, Z+2	; 0x02
    13f0:	73 81       	ldd	r23, Z+3	; 0x03
    13f2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>

	// Initiate a HCI command
	hci_command_send(HCI_NETAPP_SET_TIMERS, ptr, NETAPP_SET_TIMER_PARAMS_LEN);
    13f6:	89 e0       	ldi	r24, 0x09	; 9
    13f8:	90 e2       	ldi	r25, 0x20	; 32
    13fa:	b5 01       	movw	r22, r10
    13fc:	44 e1       	ldi	r20, 0x14	; 20
    13fe:	0e 94 a5 08 	call	0x114a	; 0x114a <hci_command_send>

	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_NETAPP_SET_TIMERS, &scRet);
    1402:	89 e0       	ldi	r24, 0x09	; 9
    1404:	90 e2       	ldi	r25, 0x20	; 32
    1406:	be 01       	movw	r22, r28
    1408:	6f 5f       	subi	r22, 0xFF	; 255
    140a:	7f 4f       	sbci	r23, 0xFF	; 255
    140c:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SimpleLinkWaitEvent>
    1410:	29 81       	ldd	r18, Y+1	; 0x01
    1412:	33 27       	eor	r19, r19
    1414:	27 fd       	sbrc	r18, 7
    1416:	30 95       	com	r19
    1418:	43 2f       	mov	r20, r19
    141a:	53 2f       	mov	r21, r19

	return(scRet);
}
    141c:	b9 01       	movw	r22, r18
    141e:	ca 01       	movw	r24, r20
    1420:	0f 90       	pop	r0
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	1f 91       	pop	r17
    1428:	0f 91       	pop	r16
    142a:	ff 90       	pop	r15
    142c:	ef 90       	pop	r14
    142e:	df 90       	pop	r13
    1430:	cf 90       	pop	r12
    1432:	bf 90       	pop	r11
    1434:	af 90       	pop	r10
    1436:	9f 90       	pop	r9
    1438:	8f 90       	pop	r8
    143a:	08 95       	ret

0000143c <mdnsAdvertiser>:
//!
//!  @brief    Set CC3000 in mDNS advertiser mode in order to advertise itself.
//
//*****************************************************************************

INT16 mdnsAdvertiser(UINT16 mdnsEnabled, CHAR * deviceServiceName, UINT16 deviceServiceNameLength)
    143c:	cf 92       	push	r12
    143e:	df 92       	push	r13
    1440:	ef 92       	push	r14
    1442:	ff 92       	push	r15
    1444:	0f 93       	push	r16
    1446:	1f 93       	push	r17
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	0f 92       	push	r0
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    1452:	d6 2e       	mov	r13, r22
    1454:	c7 2e       	mov	r12, r23
    1456:	8a 01       	movw	r16, r20
{
	INT8 ret;
	UINT8 *pTxBuffer, *pArgs;

	if (deviceServiceNameLength > MDNS_DEVICE_SERVICE_MAX_LENGTH)
    1458:	41 32       	cpi	r20, 0x21	; 33
    145a:	51 05       	cpc	r21, r1
    145c:	18 f0       	brcs	.+6      	; 0x1464 <mdnsAdvertiser+0x28>
    145e:	2f ef       	ldi	r18, 0xFF	; 255
    1460:	3f ef       	ldi	r19, 0xFF	; 255
    1462:	36 c0       	rjmp	.+108    	; 0x14d0 <mdnsAdvertiser+0x94>
	{
		return EFAIL;
	}

	pTxBuffer = tSLInformation.pucTxCommandBuffer;
    1464:	e0 90 76 04 	lds	r14, 0x0476
    1468:	f0 90 77 04 	lds	r15, 0x0477
	pArgs = (pTxBuffer + SIMPLE_LINK_HCI_CMND_TRANSPORT_HEADER_SIZE);

	// Fill in HCI packet structure
	pArgs = UINT32_TO_STREAM(pArgs, mdnsEnabled);
    146c:	ac 01       	movw	r20, r24
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	c7 01       	movw	r24, r14
    1474:	09 96       	adiw	r24, 0x09	; 9
    1476:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	pArgs = UINT32_TO_STREAM(pArgs, 8);
    147a:	48 e0       	ldi	r20, 0x08	; 8
    147c:	50 e0       	ldi	r21, 0x00	; 0
    147e:	60 e0       	ldi	r22, 0x00	; 0
    1480:	70 e0       	ldi	r23, 0x00	; 0
    1482:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	pArgs = UINT32_TO_STREAM(pArgs, deviceServiceNameLength);
    1486:	a8 01       	movw	r20, r16
    1488:	60 e0       	ldi	r22, 0x00	; 0
    148a:	70 e0       	ldi	r23, 0x00	; 0
    148c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
    1490:	dc 01       	movw	r26, r24
    1492:	8d 2d       	mov	r24, r13
    1494:	9c 2d       	mov	r25, r12
    1496:	fc 01       	movw	r30, r24
	ARRAY_TO_STREAM(pArgs, deviceServiceName, deviceServiceNameLength);
    1498:	9f 01       	movw	r18, r30
    149a:	20 0f       	add	r18, r16
    149c:	31 1f       	adc	r19, r17
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <mdnsAdvertiser+0x68>
    14a0:	81 91       	ld	r24, Z+
    14a2:	8d 93       	st	X+, r24
    14a4:	e2 17       	cp	r30, r18
    14a6:	f3 07       	cpc	r31, r19
    14a8:	d9 f7       	brne	.-10     	; 0x14a0 <mdnsAdvertiser+0x64>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_MDNS_ADVERTISE, pTxBuffer, SOCKET_MDNS_ADVERTISE_PARAMS_LEN + deviceServiceNameLength);
    14aa:	40 2f       	mov	r20, r16
    14ac:	44 5f       	subi	r20, 0xF4	; 244
    14ae:	81 e1       	ldi	r24, 0x11	; 17
    14b0:	90 e1       	ldi	r25, 0x10	; 16
    14b2:	b7 01       	movw	r22, r14
    14b4:	0e 94 a5 08 	call	0x114a	; 0x114a <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_EVNT_MDNS_ADVERTISE, &ret);
    14b8:	81 e1       	ldi	r24, 0x11	; 17
    14ba:	90 e1       	ldi	r25, 0x10	; 16
    14bc:	be 01       	movw	r22, r28
    14be:	6f 5f       	subi	r22, 0xFF	; 255
    14c0:	7f 4f       	sbci	r23, 0xFF	; 255
    14c2:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SimpleLinkWaitEvent>

	return ret;
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
    14c8:	28 2f       	mov	r18, r24
    14ca:	33 27       	eor	r19, r19
    14cc:	27 fd       	sbrc	r18, 7
    14ce:	30 95       	com	r19

}
    14d0:	c9 01       	movw	r24, r18
    14d2:	0f 90       	pop	r0
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	1f 91       	pop	r17
    14da:	0f 91       	pop	r16
    14dc:	ff 90       	pop	r15
    14de:	ef 90       	pop	r14
    14e0:	df 90       	pop	r13
    14e2:	cf 90       	pop	r12
    14e4:	08 95       	ret

000014e6 <setsockopt>:
//
//*****************************************************************************

#ifndef CC3000_TINY_DRIVER
INT16 setsockopt(INT32 sd, INT32 level, INT32 optname, const void *optval,
	socklen_t optlen)
    14e6:	2f 92       	push	r2
    14e8:	3f 92       	push	r3
    14ea:	4f 92       	push	r4
    14ec:	5f 92       	push	r5
    14ee:	6f 92       	push	r6
    14f0:	7f 92       	push	r7
    14f2:	8f 92       	push	r8
    14f4:	9f 92       	push	r9
    14f6:	af 92       	push	r10
    14f8:	bf 92       	push	r11
    14fa:	cf 92       	push	r12
    14fc:	df 92       	push	r13
    14fe:	ef 92       	push	r14
    1500:	ff 92       	push	r15
    1502:	0f 93       	push	r16
    1504:	1f 93       	push	r17
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	28 97       	sbiw	r28, 0x08	; 8
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	de bf       	out	0x3e, r29	; 62
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	cd bf       	out	0x3d, r28	; 61
    151a:	2b 01       	movw	r4, r22
    151c:	3c 01       	movw	r6, r24
    151e:	2d 83       	std	Y+5, r18	; 0x05
    1520:	3e 83       	std	Y+6, r19	; 0x06
    1522:	4f 83       	std	Y+7, r20	; 0x07
    1524:	58 87       	std	Y+8, r21	; 0x08
    1526:	16 01       	movw	r2, r12
{
	INT32 ret;
	UINT8 *ptr, *args;

	ptr = tSLInformation.pucTxCommandBuffer;
    1528:	c0 90 76 04 	lds	r12, 0x0476
    152c:	d0 90 77 04 	lds	r13, 0x0477
	args = (ptr + HEADERS_SIZE_CMD);

	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, sd);
    1530:	c6 01       	movw	r24, r12
    1532:	09 96       	adiw	r24, 0x09	; 9
    1534:	b3 01       	movw	r22, r6
    1536:	a2 01       	movw	r20, r4
    1538:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, level);
    153c:	4d 81       	ldd	r20, Y+5	; 0x05
    153e:	5e 81       	ldd	r21, Y+6	; 0x06
    1540:	6f 81       	ldd	r22, Y+7	; 0x07
    1542:	78 85       	ldd	r23, Y+8	; 0x08
    1544:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, optname);
    1548:	b8 01       	movw	r22, r16
    154a:	a7 01       	movw	r20, r14
    154c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, 0x00000008);
    1550:	48 e0       	ldi	r20, 0x08	; 8
    1552:	50 e0       	ldi	r21, 0x00	; 0
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, optlen);
    155c:	b5 01       	movw	r22, r10
    155e:	a4 01       	movw	r20, r8
    1560:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
    1564:	bc 01       	movw	r22, r24
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	40 e0       	ldi	r20, 0x00	; 0
    156c:	50 e0       	ldi	r21, 0x00	; 0
    156e:	0c c0       	rjmp	.+24     	; 0x1588 <setsockopt+0xa2>
//
//*****************************************************************************

#ifndef CC3000_TINY_DRIVER
INT16 setsockopt(INT32 sd, INT32 level, INT32 optname, const void *optval,
	socklen_t optlen)
    1570:	f9 01       	movw	r30, r18
	args = UINT32_TO_STREAM(args, sd);
	args = UINT32_TO_STREAM(args, level);
	args = UINT32_TO_STREAM(args, optname);
	args = UINT32_TO_STREAM(args, 0x00000008);
	args = UINT32_TO_STREAM(args, optlen);
	ARRAY_TO_STREAM(args, ((UINT8 *)optval), optlen);
    1572:	db 01       	movw	r26, r22
    1574:	a2 0f       	add	r26, r18
    1576:	b3 1f       	adc	r27, r19
    1578:	e2 0d       	add	r30, r2
    157a:	f3 1d       	adc	r31, r3
    157c:	80 81       	ld	r24, Z
    157e:	8c 93       	st	X, r24
    1580:	2f 5f       	subi	r18, 0xFF	; 255
    1582:	3f 4f       	sbci	r19, 0xFF	; 255
    1584:	4f 4f       	sbci	r20, 0xFF	; 255
    1586:	5f 4f       	sbci	r21, 0xFF	; 255
    1588:	28 15       	cp	r18, r8
    158a:	39 05       	cpc	r19, r9
    158c:	4a 05       	cpc	r20, r10
    158e:	5b 05       	cpc	r21, r11
    1590:	78 f3       	brcs	.-34     	; 0x1570 <setsockopt+0x8a>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_SETSOCKOPT,
		ptr, SOCKET_SET_SOCK_OPT_PARAMS_LEN  + optlen);
    1592:	48 2d       	mov	r20, r8
    1594:	4c 5e       	subi	r20, 0xEC	; 236
    1596:	89 e0       	ldi	r24, 0x09	; 9
    1598:	90 e1       	ldi	r25, 0x10	; 16
    159a:	b6 01       	movw	r22, r12
    159c:	0e 94 a5 08 	call	0x114a	; 0x114a <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_SETSOCKOPT, &ret);
    15a0:	89 e0       	ldi	r24, 0x09	; 9
    15a2:	90 e1       	ldi	r25, 0x10	; 16
    15a4:	be 01       	movw	r22, r28
    15a6:	6f 5f       	subi	r22, 0xFF	; 255
    15a8:	7f 4f       	sbci	r23, 0xFF	; 255
    15aa:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SimpleLinkWaitEvent>

	if (ret >= 0)
    15ae:	29 81       	ldd	r18, Y+1	; 0x01
    15b0:	3a 81       	ldd	r19, Y+2	; 0x02
    15b2:	4b 81       	ldd	r20, Y+3	; 0x03
    15b4:	5c 81       	ldd	r21, Y+4	; 0x04
    15b6:	57 fd       	sbrc	r21, 7
    15b8:	03 c0       	rjmp	.+6      	; 0x15c0 <setsockopt+0xda>
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	70 e0       	ldi	r23, 0x00	; 0
    15be:	05 c0       	rjmp	.+10     	; 0x15ca <setsockopt+0xe4>
	{
		return (0);
	}
	else
	{
		errno = ret;
    15c0:	b9 01       	movw	r22, r18
    15c2:	30 93 cc 07 	sts	0x07CC, r19
    15c6:	20 93 cb 07 	sts	0x07CB, r18
		return ret;
	}
}
    15ca:	cb 01       	movw	r24, r22
    15cc:	28 96       	adiw	r28, 0x08	; 8
    15ce:	0f b6       	in	r0, 0x3f	; 63
    15d0:	f8 94       	cli
    15d2:	de bf       	out	0x3e, r29	; 62
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	cd bf       	out	0x3d, r28	; 61
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	1f 91       	pop	r17
    15de:	0f 91       	pop	r16
    15e0:	ff 90       	pop	r15
    15e2:	ef 90       	pop	r14
    15e4:	df 90       	pop	r13
    15e6:	cf 90       	pop	r12
    15e8:	bf 90       	pop	r11
    15ea:	af 90       	pop	r10
    15ec:	9f 90       	pop	r9
    15ee:	8f 90       	pop	r8
    15f0:	7f 90       	pop	r7
    15f2:	6f 90       	pop	r6
    15f4:	5f 90       	pop	r5
    15f6:	4f 90       	pop	r4
    15f8:	3f 90       	pop	r3
    15fa:	2f 90       	pop	r2
    15fc:	08 95       	ret

000015fe <connect>:
//!
//!  @sa socket
//
//*****************************************************************************

INT32 connect(INT32 sd, const sockaddr *addr, INT32 addrlen)
    15fe:	cf 92       	push	r12
    1600:	df 92       	push	r13
    1602:	ef 92       	push	r14
    1604:	ff 92       	push	r15
    1606:	0f 93       	push	r16
    1608:	1f 93       	push	r17
    160a:	df 93       	push	r29
    160c:	cf 93       	push	r28
    160e:	00 d0       	rcall	.+0      	; 0x1610 <connect+0x12>
    1610:	00 d0       	rcall	.+0      	; 0x1612 <connect+0x14>
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
    1616:	8b 01       	movw	r16, r22
    1618:	9c 01       	movw	r18, r24
    161a:	f4 2e       	mov	r15, r20
    161c:	e5 2e       	mov	r14, r21
{
	INT32 ret;
	UINT8 *ptr, *args;

	ret = EFAIL;
    161e:	8f ef       	ldi	r24, 0xFF	; 255
    1620:	9f ef       	ldi	r25, 0xFF	; 255
    1622:	af ef       	ldi	r26, 0xFF	; 255
    1624:	bf ef       	ldi	r27, 0xFF	; 255
    1626:	89 83       	std	Y+1, r24	; 0x01
    1628:	9a 83       	std	Y+2, r25	; 0x02
    162a:	ab 83       	std	Y+3, r26	; 0x03
    162c:	bc 83       	std	Y+4, r27	; 0x04
	ptr = tSLInformation.pucTxCommandBuffer;
    162e:	c0 90 76 04 	lds	r12, 0x0476
    1632:	d0 90 77 04 	lds	r13, 0x0477
	args = (ptr + SIMPLE_LINK_HCI_CMND_TRANSPORT_HEADER_SIZE);
	addrlen = 8;

	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, sd);
    1636:	c6 01       	movw	r24, r12
    1638:	09 96       	adiw	r24, 0x09	; 9
    163a:	b9 01       	movw	r22, r18
    163c:	a8 01       	movw	r20, r16
    163e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, 0x00000008);
    1642:	48 e0       	ldi	r20, 0x08	; 8
    1644:	50 e0       	ldi	r21, 0x00	; 0
    1646:	60 e0       	ldi	r22, 0x00	; 0
    1648:	70 e0       	ldi	r23, 0x00	; 0
    164a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, addrlen);
    164e:	48 e0       	ldi	r20, 0x08	; 8
    1650:	50 e0       	ldi	r21, 0x00	; 0
    1652:	60 e0       	ldi	r22, 0x00	; 0
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
    165a:	dc 01       	movw	r26, r24
    165c:	8f 2d       	mov	r24, r15
    165e:	9e 2d       	mov	r25, r14
    1660:	fc 01       	movw	r30, r24
	ARRAY_TO_STREAM(args, ((UINT8 *)addr), addrlen);
    1662:	9f 01       	movw	r18, r30
    1664:	28 5f       	subi	r18, 0xF8	; 248
    1666:	3f 4f       	sbci	r19, 0xFF	; 255
    1668:	81 91       	ld	r24, Z+
    166a:	8d 93       	st	X+, r24
    166c:	e2 17       	cp	r30, r18
    166e:	f3 07       	cpc	r31, r19
    1670:	d9 f7       	brne	.-10     	; 0x1668 <connect+0x6a>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_CONNECT,
		ptr, SOCKET_CONNECT_PARAMS_LEN);
    1672:	87 e0       	ldi	r24, 0x07	; 7
    1674:	90 e1       	ldi	r25, 0x10	; 16
    1676:	b6 01       	movw	r22, r12
    1678:	44 e1       	ldi	r20, 0x14	; 20
    167a:	0e 94 a5 08 	call	0x114a	; 0x114a <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_CONNECT, &ret);
    167e:	87 e0       	ldi	r24, 0x07	; 7
    1680:	90 e1       	ldi	r25, 0x10	; 16
    1682:	be 01       	movw	r22, r28
    1684:	6f 5f       	subi	r22, 0xFF	; 255
    1686:	7f 4f       	sbci	r23, 0xFF	; 255
    1688:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SimpleLinkWaitEvent>

	errno = ret;
    168c:	69 81       	ldd	r22, Y+1	; 0x01
    168e:	7a 81       	ldd	r23, Y+2	; 0x02
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	9c 81       	ldd	r25, Y+4	; 0x04
    1694:	9b 01       	movw	r18, r22
    1696:	20 93 cb 07 	sts	0x07CB, r18
    169a:	30 93 cc 07 	sts	0x07CC, r19

	return((INT32)ret);
}
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	1f 91       	pop	r17
    16ac:	0f 91       	pop	r16
    16ae:	ff 90       	pop	r15
    16b0:	ef 90       	pop	r14
    16b2:	df 90       	pop	r13
    16b4:	cf 90       	pop	r12
    16b6:	08 95       	ret

000016b8 <gethostbyname>:
// Adafruit CC3k Host Driver Difference
// Make hostname a const char pointer because it isn't modified and the Adafruit
// driver code needs it to be const to interface with Arduino's client library.
// Noted 12-12-2014 by tdicola
INT16 gethostbyname(const CHAR * hostname, UINT16 usNameLen, 
	UINT32* out_ip_addr)
    16b8:	af 92       	push	r10
    16ba:	bf 92       	push	r11
    16bc:	cf 92       	push	r12
    16be:	df 92       	push	r13
    16c0:	ef 92       	push	r14
    16c2:	ff 92       	push	r15
    16c4:	0f 93       	push	r16
    16c6:	1f 93       	push	r17
    16c8:	df 93       	push	r29
    16ca:	cf 93       	push	r28
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
    16d0:	28 97       	sbiw	r28, 0x08	; 8
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	f8 94       	cli
    16d6:	de bf       	out	0x3e, r29	; 62
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	cd bf       	out	0x3d, r28	; 61
    16dc:	b8 2e       	mov	r11, r24
    16de:	a9 2e       	mov	r10, r25
    16e0:	8b 01       	movw	r16, r22
    16e2:	6a 01       	movw	r12, r20
{
	tBsdGethostbynameParams ret;
	UINT8 *ptr, *args;

	errno = EFAIL;
    16e4:	8f ef       	ldi	r24, 0xFF	; 255
    16e6:	9f ef       	ldi	r25, 0xFF	; 255
    16e8:	90 93 cc 07 	sts	0x07CC, r25
    16ec:	80 93 cb 07 	sts	0x07CB, r24

	if (usNameLen > HOSTNAME_MAX_LENGTH)
    16f0:	67 3e       	cpi	r22, 0xE7	; 231
    16f2:	71 05       	cpc	r23, r1
    16f4:	18 f0       	brcs	.+6      	; 0x16fc <gethostbyname+0x44>
    16f6:	2f ef       	ldi	r18, 0xFF	; 255
    16f8:	3f ef       	ldi	r19, 0xFF	; 255
    16fa:	3b c0       	rjmp	.+118    	; 0x1772 <gethostbyname+0xba>
	{
		return errno;
	}

	ptr = tSLInformation.pucTxCommandBuffer;
    16fc:	e0 90 76 04 	lds	r14, 0x0476
    1700:	f0 90 77 04 	lds	r15, 0x0477
	args = (ptr + SIMPLE_LINK_HCI_CMND_TRANSPORT_HEADER_SIZE);

	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, 8);
    1704:	c7 01       	movw	r24, r14
    1706:	09 96       	adiw	r24, 0x09	; 9
    1708:	48 e0       	ldi	r20, 0x08	; 8
    170a:	50 e0       	ldi	r21, 0x00	; 0
    170c:	60 e0       	ldi	r22, 0x00	; 0
    170e:	70 e0       	ldi	r23, 0x00	; 0
    1710:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, usNameLen);
    1714:	a8 01       	movw	r20, r16
    1716:	60 e0       	ldi	r22, 0x00	; 0
    1718:	70 e0       	ldi	r23, 0x00	; 0
    171a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
    171e:	dc 01       	movw	r26, r24
    1720:	8b 2d       	mov	r24, r11
    1722:	9a 2d       	mov	r25, r10
    1724:	fc 01       	movw	r30, r24
	ARRAY_TO_STREAM(args, hostname, usNameLen);
    1726:	9f 01       	movw	r18, r30
    1728:	20 0f       	add	r18, r16
    172a:	31 1f       	adc	r19, r17
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <gethostbyname+0x7a>
    172e:	81 91       	ld	r24, Z+
    1730:	8d 93       	st	X+, r24
    1732:	e2 17       	cp	r30, r18
    1734:	f3 07       	cpc	r31, r19
    1736:	d9 f7       	brne	.-10     	; 0x172e <gethostbyname+0x76>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_GETHOSTNAME, ptr, SOCKET_GET_HOST_BY_NAME_PARAMS_LEN
		+ usNameLen - 1);
    1738:	40 2f       	mov	r20, r16
    173a:	48 5f       	subi	r20, 0xF8	; 248
    173c:	80 e1       	ldi	r24, 0x10	; 16
    173e:	90 e1       	ldi	r25, 0x10	; 16
    1740:	b7 01       	movw	r22, r14
    1742:	0e 94 a5 08 	call	0x114a	; 0x114a <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_EVNT_BSD_GETHOSTBYNAME, &ret);
    1746:	80 e1       	ldi	r24, 0x10	; 16
    1748:	90 e1       	ldi	r25, 0x10	; 16
    174a:	be 01       	movw	r22, r28
    174c:	6f 5f       	subi	r22, 0xFF	; 255
    174e:	7f 4f       	sbci	r23, 0xFF	; 255
    1750:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SimpleLinkWaitEvent>

	errno = ret.retVal;
    1754:	29 81       	ldd	r18, Y+1	; 0x01
    1756:	3a 81       	ldd	r19, Y+2	; 0x02
    1758:	30 93 cc 07 	sts	0x07CC, r19
    175c:	20 93 cb 07 	sts	0x07CB, r18

	(*((INT32*)out_ip_addr)) = ret.outputAddress;
    1760:	8d 81       	ldd	r24, Y+5	; 0x05
    1762:	9e 81       	ldd	r25, Y+6	; 0x06
    1764:	af 81       	ldd	r26, Y+7	; 0x07
    1766:	b8 85       	ldd	r27, Y+8	; 0x08
    1768:	f6 01       	movw	r30, r12
    176a:	80 83       	st	Z, r24
    176c:	91 83       	std	Z+1, r25	; 0x01
    176e:	a2 83       	std	Z+2, r26	; 0x02
    1770:	b3 83       	std	Z+3, r27	; 0x03

	return (errno);

}
    1772:	c9 01       	movw	r24, r18
    1774:	28 96       	adiw	r28, 0x08	; 8
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	f8 94       	cli
    177a:	de bf       	out	0x3e, r29	; 62
    177c:	0f be       	out	0x3f, r0	; 63
    177e:	cd bf       	out	0x3d, r28	; 61
    1780:	cf 91       	pop	r28
    1782:	df 91       	pop	r29
    1784:	1f 91       	pop	r17
    1786:	0f 91       	pop	r16
    1788:	ff 90       	pop	r15
    178a:	ef 90       	pop	r14
    178c:	df 90       	pop	r13
    178e:	cf 90       	pop	r12
    1790:	bf 90       	pop	r11
    1792:	af 90       	pop	r10
    1794:	08 95       	ret

00001796 <listen>:
//!
//! @note   On this version, backlog is not supported
//
//*****************************************************************************

INT32 listen(INT32 sd, INT32 backlog)
    1796:	8f 92       	push	r8
    1798:	9f 92       	push	r9
    179a:	af 92       	push	r10
    179c:	bf 92       	push	r11
    179e:	cf 92       	push	r12
    17a0:	df 92       	push	r13
    17a2:	ef 92       	push	r14
    17a4:	ff 92       	push	r15
    17a6:	0f 93       	push	r16
    17a8:	1f 93       	push	r17
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	00 d0       	rcall	.+0      	; 0x17b0 <listen+0x1a>
    17b0:	00 d0       	rcall	.+0      	; 0x17b2 <listen+0x1c>
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
    17b6:	7b 01       	movw	r14, r22
    17b8:	8c 01       	movw	r16, r24
    17ba:	59 01       	movw	r10, r18
    17bc:	6a 01       	movw	r12, r20
{
	INT32 ret;
	UINT8 *ptr, *args;

	ret = EFAIL;
    17be:	8f ef       	ldi	r24, 0xFF	; 255
    17c0:	9f ef       	ldi	r25, 0xFF	; 255
    17c2:	af ef       	ldi	r26, 0xFF	; 255
    17c4:	bf ef       	ldi	r27, 0xFF	; 255
    17c6:	89 83       	std	Y+1, r24	; 0x01
    17c8:	9a 83       	std	Y+2, r25	; 0x02
    17ca:	ab 83       	std	Y+3, r26	; 0x03
    17cc:	bc 83       	std	Y+4, r27	; 0x04
	ptr = tSLInformation.pucTxCommandBuffer;
    17ce:	80 90 76 04 	lds	r8, 0x0476
    17d2:	90 90 77 04 	lds	r9, 0x0477
	args = (ptr + HEADERS_SIZE_CMD);

	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, sd);
    17d6:	c4 01       	movw	r24, r8
    17d8:	09 96       	adiw	r24, 0x09	; 9
    17da:	b8 01       	movw	r22, r16
    17dc:	a7 01       	movw	r20, r14
    17de:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, backlog);
    17e2:	b6 01       	movw	r22, r12
    17e4:	a5 01       	movw	r20, r10
    17e6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_LISTEN,
		ptr, SOCKET_LISTEN_PARAMS_LEN);
    17ea:	86 e0       	ldi	r24, 0x06	; 6
    17ec:	90 e1       	ldi	r25, 0x10	; 16
    17ee:	b4 01       	movw	r22, r8
    17f0:	48 e0       	ldi	r20, 0x08	; 8
    17f2:	0e 94 a5 08 	call	0x114a	; 0x114a <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_LISTEN, &ret);
    17f6:	86 e0       	ldi	r24, 0x06	; 6
    17f8:	90 e1       	ldi	r25, 0x10	; 16
    17fa:	be 01       	movw	r22, r28
    17fc:	6f 5f       	subi	r22, 0xFF	; 255
    17fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1800:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SimpleLinkWaitEvent>
	errno = ret;
    1804:	69 81       	ldd	r22, Y+1	; 0x01
    1806:	7a 81       	ldd	r23, Y+2	; 0x02
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	9c 81       	ldd	r25, Y+4	; 0x04
    180c:	9b 01       	movw	r18, r22
    180e:	20 93 cb 07 	sts	0x07CB, r18
    1812:	30 93 cc 07 	sts	0x07CC, r19

	return(ret);
}
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	1f 91       	pop	r17
    1824:	0f 91       	pop	r16
    1826:	ff 90       	pop	r15
    1828:	ef 90       	pop	r14
    182a:	df 90       	pop	r13
    182c:	cf 90       	pop	r12
    182e:	bf 90       	pop	r11
    1830:	af 90       	pop	r10
    1832:	9f 90       	pop	r9
    1834:	8f 90       	pop	r8
    1836:	08 95       	ret

00001838 <bind>:
//!
//! @sa     socket ; accept ; listen
//
//*****************************************************************************

INT32 bind(INT32 sd, const sockaddr *addr, INT32 addrlen)
    1838:	cf 92       	push	r12
    183a:	df 92       	push	r13
    183c:	ef 92       	push	r14
    183e:	ff 92       	push	r15
    1840:	0f 93       	push	r16
    1842:	1f 93       	push	r17
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	00 d0       	rcall	.+0      	; 0x184a <bind+0x12>
    184a:	00 d0       	rcall	.+0      	; 0x184c <bind+0x14>
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    1850:	8b 01       	movw	r16, r22
    1852:	9c 01       	movw	r18, r24
    1854:	f4 2e       	mov	r15, r20
    1856:	e5 2e       	mov	r14, r21
{
	INT32 ret;
	UINT8 *ptr, *args;

	ret = EFAIL;
    1858:	8f ef       	ldi	r24, 0xFF	; 255
    185a:	9f ef       	ldi	r25, 0xFF	; 255
    185c:	af ef       	ldi	r26, 0xFF	; 255
    185e:	bf ef       	ldi	r27, 0xFF	; 255
    1860:	89 83       	std	Y+1, r24	; 0x01
    1862:	9a 83       	std	Y+2, r25	; 0x02
    1864:	ab 83       	std	Y+3, r26	; 0x03
    1866:	bc 83       	std	Y+4, r27	; 0x04
	ptr = tSLInformation.pucTxCommandBuffer;
    1868:	c0 90 76 04 	lds	r12, 0x0476
    186c:	d0 90 77 04 	lds	r13, 0x0477
	args = (ptr + HEADERS_SIZE_CMD);

	addrlen = ASIC_ADDR_LEN;

	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, sd);
    1870:	c6 01       	movw	r24, r12
    1872:	09 96       	adiw	r24, 0x09	; 9
    1874:	b9 01       	movw	r22, r18
    1876:	a8 01       	movw	r20, r16
    1878:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, 0x00000008);
    187c:	48 e0       	ldi	r20, 0x08	; 8
    187e:	50 e0       	ldi	r21, 0x00	; 0
    1880:	60 e0       	ldi	r22, 0x00	; 0
    1882:	70 e0       	ldi	r23, 0x00	; 0
    1884:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, addrlen);
    1888:	48 e0       	ldi	r20, 0x08	; 8
    188a:	50 e0       	ldi	r21, 0x00	; 0
    188c:	60 e0       	ldi	r22, 0x00	; 0
    188e:	70 e0       	ldi	r23, 0x00	; 0
    1890:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
    1894:	dc 01       	movw	r26, r24
    1896:	8f 2d       	mov	r24, r15
    1898:	9e 2d       	mov	r25, r14
    189a:	fc 01       	movw	r30, r24
	ARRAY_TO_STREAM(args, ((UINT8 *)addr), addrlen);
    189c:	9f 01       	movw	r18, r30
    189e:	28 5f       	subi	r18, 0xF8	; 248
    18a0:	3f 4f       	sbci	r19, 0xFF	; 255
    18a2:	81 91       	ld	r24, Z+
    18a4:	8d 93       	st	X+, r24
    18a6:	e2 17       	cp	r30, r18
    18a8:	f3 07       	cpc	r31, r19
    18aa:	d9 f7       	brne	.-10     	; 0x18a2 <bind+0x6a>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_BIND,
		ptr, SOCKET_BIND_PARAMS_LEN);
    18ac:	82 e0       	ldi	r24, 0x02	; 2
    18ae:	90 e1       	ldi	r25, 0x10	; 16
    18b0:	b6 01       	movw	r22, r12
    18b2:	44 e1       	ldi	r20, 0x14	; 20
    18b4:	0e 94 a5 08 	call	0x114a	; 0x114a <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_BIND, &ret);
    18b8:	82 e0       	ldi	r24, 0x02	; 2
    18ba:	90 e1       	ldi	r25, 0x10	; 16
    18bc:	be 01       	movw	r22, r28
    18be:	6f 5f       	subi	r22, 0xFF	; 255
    18c0:	7f 4f       	sbci	r23, 0xFF	; 255
    18c2:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SimpleLinkWaitEvent>

	errno = ret;
    18c6:	69 81       	ldd	r22, Y+1	; 0x01
    18c8:	7a 81       	ldd	r23, Y+2	; 0x02
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	9c 81       	ldd	r25, Y+4	; 0x04
    18ce:	9b 01       	movw	r18, r22
    18d0:	20 93 cb 07 	sts	0x07CB, r18
    18d4:	30 93 cc 07 	sts	0x07CC, r19

	return(ret);
}
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	1f 91       	pop	r17
    18e6:	0f 91       	pop	r16
    18e8:	ff 90       	pop	r15
    18ea:	ef 90       	pop	r14
    18ec:	df 90       	pop	r13
    18ee:	cf 90       	pop	r12
    18f0:	08 95       	ret

000018f2 <_Z16simple_link_recvlPvllP11_sockaddr_tPml>:
//!                  excess bytes may be discarded depending on the type of
//!                  socket the message is received from
//
//*****************************************************************************
INT16 simple_link_recv(INT32 sd, void *buf, INT32 len, INT32 flags, sockaddr *from,
	socklen_t *fromlen, INT32 opcode)
    18f2:	2f 92       	push	r2
    18f4:	3f 92       	push	r3
    18f6:	4f 92       	push	r4
    18f8:	5f 92       	push	r5
    18fa:	6f 92       	push	r6
    18fc:	7f 92       	push	r7
    18fe:	8f 92       	push	r8
    1900:	9f 92       	push	r9
    1902:	af 92       	push	r10
    1904:	bf 92       	push	r11
    1906:	cf 92       	push	r12
    1908:	df 92       	push	r13
    190a:	ef 92       	push	r14
    190c:	ff 92       	push	r15
    190e:	0f 93       	push	r16
    1910:	1f 93       	push	r17
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
    191a:	64 97       	sbiw	r28, 0x14	; 20
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	f8 94       	cli
    1920:	de bf       	out	0x3e, r29	; 62
    1922:	0f be       	out	0x3f, r0	; 63
    1924:	cd bf       	out	0x3d, r28	; 61
    1926:	2b 01       	movw	r4, r22
    1928:	3c 01       	movw	r6, r24
    192a:	5e 87       	std	Y+14, r21	; 0x0e
    192c:	4d 87       	std	Y+13, r20	; 0x0d
    192e:	0f 87       	std	Y+15, r16	; 0x0f
    1930:	18 8b       	std	Y+16, r17	; 0x10
    1932:	29 8b       	std	Y+17, r18	; 0x11
    1934:	3a 8b       	std	Y+18, r19	; 0x12
    1936:	15 01       	movw	r2, r10
    1938:	9c 8a       	std	Y+20, r9	; 0x14
    193a:	8b 8a       	std	Y+19, r8	; 0x13
    193c:	89 a4       	ldd	r8, Y+41	; 0x29
    193e:	9a a4       	ldd	r9, Y+42	; 0x2a
    1940:	ab a4       	ldd	r10, Y+43	; 0x2b
    1942:	bc a4       	ldd	r11, Y+44	; 0x2c
{
	UINT8 *ptr, *args;
	tBsdReadReturnParams tSocketReadEvent;

	ptr = tSLInformation.pucTxCommandBuffer;
    1944:	00 91 76 04 	lds	r16, 0x0476
    1948:	10 91 77 04 	lds	r17, 0x0477
	args = (ptr + HEADERS_SIZE_CMD);

	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, sd);
    194c:	c8 01       	movw	r24, r16
    194e:	09 96       	adiw	r24, 0x09	; 9
    1950:	b3 01       	movw	r22, r6
    1952:	a2 01       	movw	r20, r4
    1954:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, len);
    1958:	4f 85       	ldd	r20, Y+15	; 0x0f
    195a:	58 89       	ldd	r21, Y+16	; 0x10
    195c:	69 89       	ldd	r22, Y+17	; 0x11
    195e:	7a 89       	ldd	r23, Y+18	; 0x12
    1960:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, flags);
    1964:	b7 01       	movw	r22, r14
    1966:	a6 01       	movw	r20, r12
    1968:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>

	// Generate the read command, and wait for the 
	hci_command_send(opcode,  ptr, SOCKET_RECV_FROM_PARAMS_LEN);
    196c:	c4 01       	movw	r24, r8
    196e:	b8 01       	movw	r22, r16
    1970:	4c e0       	ldi	r20, 0x0C	; 12
    1972:	0e 94 a5 08 	call	0x114a	; 0x114a <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(opcode, &tSocketReadEvent);
    1976:	c4 01       	movw	r24, r8
    1978:	be 01       	movw	r22, r28
    197a:	6f 5f       	subi	r22, 0xFF	; 255
    197c:	7f 4f       	sbci	r23, 0xFF	; 255
    197e:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SimpleLinkWaitEvent>
	DEBUGPRINT_F(" Flags: 0x");
	DEBUGPRINT_HEX(tSocketReadEvent.uiFlags);
	DEBUGPRINT_F("\n\r");

	// In case the number of bytes is more then zero - read data
	if (tSocketReadEvent.iNumberOfBytes > 0)
    1982:	8d 81       	ldd	r24, Y+5	; 0x05
    1984:	9e 81       	ldd	r25, Y+6	; 0x06
    1986:	af 81       	ldd	r26, Y+7	; 0x07
    1988:	b8 85       	ldd	r27, Y+8	; 0x08
    198a:	18 16       	cp	r1, r24
    198c:	19 06       	cpc	r1, r25
    198e:	1a 06       	cpc	r1, r26
    1990:	1b 06       	cpc	r1, r27
    1992:	3c f4       	brge	.+14     	; 0x19a2 <_Z16simple_link_recvlPvllP11_sockaddr_tPml+0xb0>
		// Wait for the data in a synchronous way. Here we assume that the bug is 
		// big enough to store also parameters of receive from too....
		// Adafruit CC3k Host Driver Difference
		// Fix compiler error with explicit cast from void to UINT8 pointer.
		// Noted 12-12-2014 by tdicola
		SimpleLinkWaitData((UINT8*)buf, (UINT8 *)from, (UINT8 *)fromlen);
    1994:	8d 85       	ldd	r24, Y+13	; 0x0d
    1996:	9e 85       	ldd	r25, Y+14	; 0x0e
    1998:	b1 01       	movw	r22, r2
    199a:	4b 89       	ldd	r20, Y+19	; 0x13
    199c:	5c 89       	ldd	r21, Y+20	; 0x14
    199e:	0e 94 69 08 	call	0x10d2	; 0x10d2 <SimpleLinkWaitData>
	}

	errno = tSocketReadEvent.iNumberOfBytes;
    19a2:	8d 81       	ldd	r24, Y+5	; 0x05
    19a4:	9e 81       	ldd	r25, Y+6	; 0x06
    19a6:	80 93 cb 07 	sts	0x07CB, r24
    19aa:	90 93 cc 07 	sts	0x07CC, r25
	  uart_putchar(((UINT8 *)buf)[i]);
	}
#endif
	
	return(tSocketReadEvent.iNumberOfBytes);
}
    19ae:	64 96       	adiw	r28, 0x14	; 20
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	f8 94       	cli
    19b4:	de bf       	out	0x3e, r29	; 62
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	cd bf       	out	0x3d, r28	; 61
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	1f 91       	pop	r17
    19c0:	0f 91       	pop	r16
    19c2:	ff 90       	pop	r15
    19c4:	ef 90       	pop	r14
    19c6:	df 90       	pop	r13
    19c8:	cf 90       	pop	r12
    19ca:	bf 90       	pop	r11
    19cc:	af 90       	pop	r10
    19ce:	9f 90       	pop	r9
    19d0:	8f 90       	pop	r8
    19d2:	7f 90       	pop	r7
    19d4:	6f 90       	pop	r6
    19d6:	5f 90       	pop	r5
    19d8:	4f 90       	pop	r4
    19da:	3f 90       	pop	r3
    19dc:	2f 90       	pop	r2
    19de:	08 95       	ret

000019e0 <recv>:
//!
//!  @Note On this version, only blocking mode is supported.
//
//*****************************************************************************

INT16 recv(INT32 sd, void *buf, INT32 len, INT32 flags)
    19e0:	8f 92       	push	r8
    19e2:	9f 92       	push	r9
    19e4:	af 92       	push	r10
    19e6:	bf 92       	push	r11
    19e8:	cf 92       	push	r12
    19ea:	df 92       	push	r13
    19ec:	ef 92       	push	r14
    19ee:	ff 92       	push	r15
    19f0:	0f 93       	push	r16
    19f2:	1f 93       	push	r17
{
	return(simple_link_recv(sd, buf, len, flags, NULL, NULL, HCI_CMND_RECV));
    19f4:	00 d0       	rcall	.+0      	; 0x19f6 <recv+0x16>
    19f6:	00 d0       	rcall	.+0      	; 0x19f8 <recv+0x18>
    19f8:	f4 e0       	ldi	r31, 0x04	; 4
    19fa:	8f 2e       	mov	r8, r31
    19fc:	f0 e1       	ldi	r31, 0x10	; 16
    19fe:	9f 2e       	mov	r9, r31
    1a00:	a1 2c       	mov	r10, r1
    1a02:	b1 2c       	mov	r11, r1
    1a04:	ed b7       	in	r30, 0x3d	; 61
    1a06:	fe b7       	in	r31, 0x3e	; 62
    1a08:	81 82       	std	Z+1, r8	; 0x01
    1a0a:	92 82       	std	Z+2, r9	; 0x02
    1a0c:	a3 82       	std	Z+3, r10	; 0x03
    1a0e:	b4 82       	std	Z+4, r11	; 0x04
    1a10:	aa 24       	eor	r10, r10
    1a12:	bb 24       	eor	r11, r11
    1a14:	88 24       	eor	r8, r8
    1a16:	99 24       	eor	r9, r9
    1a18:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <_Z16simple_link_recvlPvllP11_sockaddr_tPml>
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
}
    1a24:	1f 91       	pop	r17
    1a26:	0f 91       	pop	r16
    1a28:	ff 90       	pop	r15
    1a2a:	ef 90       	pop	r14
    1a2c:	df 90       	pop	r13
    1a2e:	cf 90       	pop	r12
    1a30:	bf 90       	pop	r11
    1a32:	af 90       	pop	r10
    1a34:	9f 90       	pop	r9
    1a36:	8f 90       	pop	r8
    1a38:	08 95       	ret

00001a3a <select>:
//!  @sa socket
//
//*****************************************************************************

INT16 select(INT32 nfds, fd_set *readsds, fd_set *writesds, fd_set *exceptsds, 
struct timeval *timeout)
    1a3a:	4f 92       	push	r4
    1a3c:	5f 92       	push	r5
    1a3e:	6f 92       	push	r6
    1a40:	7f 92       	push	r7
    1a42:	8f 92       	push	r8
    1a44:	9f 92       	push	r9
    1a46:	af 92       	push	r10
    1a48:	bf 92       	push	r11
    1a4a:	cf 92       	push	r12
    1a4c:	df 92       	push	r13
    1a4e:	ef 92       	push	r14
    1a50:	ff 92       	push	r15
    1a52:	0f 93       	push	r16
    1a54:	1f 93       	push	r17
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    1a5e:	60 97       	sbiw	r28, 0x10	; 16
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	f8 94       	cli
    1a64:	de bf       	out	0x3e, r29	; 62
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	cd bf       	out	0x3d, r28	; 61
    1a6a:	5b 01       	movw	r10, r22
    1a6c:	6c 01       	movw	r12, r24
    1a6e:	4a 01       	movw	r8, r20
    1a70:	39 01       	movw	r6, r18
    1a72:	28 01       	movw	r4, r16
    1a74:	87 01       	movw	r16, r14
	{
		is_blocking = 0; /* no blocking, timeout */
	}

	// Fill in HCI packet structure
	ptr = tSLInformation.pucTxCommandBuffer;
    1a76:	e0 90 76 04 	lds	r14, 0x0476
    1a7a:	f0 90 77 04 	lds	r15, 0x0477
	args = (ptr + HEADERS_SIZE_CMD);

	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, nfds);
    1a7e:	c7 01       	movw	r24, r14
    1a80:	09 96       	adiw	r24, 0x09	; 9
    1a82:	b6 01       	movw	r22, r12
    1a84:	a5 01       	movw	r20, r10
    1a86:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, 0x00000014);
    1a8a:	44 e1       	ldi	r20, 0x14	; 20
    1a8c:	50 e0       	ldi	r21, 0x00	; 0
    1a8e:	60 e0       	ldi	r22, 0x00	; 0
    1a90:	70 e0       	ldi	r23, 0x00	; 0
    1a92:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, 0x00000014);
    1a96:	44 e1       	ldi	r20, 0x14	; 20
    1a98:	50 e0       	ldi	r21, 0x00	; 0
    1a9a:	60 e0       	ldi	r22, 0x00	; 0
    1a9c:	70 e0       	ldi	r23, 0x00	; 0
    1a9e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, 0x00000014);
    1aa2:	44 e1       	ldi	r20, 0x14	; 20
    1aa4:	50 e0       	ldi	r21, 0x00	; 0
    1aa6:	60 e0       	ldi	r22, 0x00	; 0
    1aa8:	70 e0       	ldi	r23, 0x00	; 0
    1aaa:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, 0x00000014);
    1aae:	44 e1       	ldi	r20, 0x14	; 20
    1ab0:	50 e0       	ldi	r21, 0x00	; 0
    1ab2:	60 e0       	ldi	r22, 0x00	; 0
    1ab4:	70 e0       	ldi	r23, 0x00	; 0
    1ab6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, is_blocking);
    1aba:	40 e0       	ldi	r20, 0x00	; 0
    1abc:	50 e0       	ldi	r21, 0x00	; 0
    1abe:	60 e0       	ldi	r22, 0x00	; 0
    1ac0:	70 e0       	ldi	r23, 0x00	; 0
    1ac2:	01 15       	cp	r16, r1
    1ac4:	11 05       	cpc	r17, r1
    1ac6:	21 f4       	brne	.+8      	; 0x1ad0 <select+0x96>
    1ac8:	41 e0       	ldi	r20, 0x01	; 1
    1aca:	50 e0       	ldi	r21, 0x00	; 0
    1acc:	60 e0       	ldi	r22, 0x00	; 0
    1ace:	70 e0       	ldi	r23, 0x00	; 0
    1ad0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, ((readsds) ? *(UINT32*)readsds : 0));
    1ad4:	81 14       	cp	r8, r1
    1ad6:	91 04       	cpc	r9, r1
    1ad8:	29 f4       	brne	.+10     	; 0x1ae4 <select+0xaa>
    1ada:	40 e0       	ldi	r20, 0x00	; 0
    1adc:	50 e0       	ldi	r21, 0x00	; 0
    1ade:	60 e0       	ldi	r22, 0x00	; 0
    1ae0:	70 e0       	ldi	r23, 0x00	; 0
    1ae2:	05 c0       	rjmp	.+10     	; 0x1aee <select+0xb4>
    1ae4:	f4 01       	movw	r30, r8
    1ae6:	40 81       	ld	r20, Z
    1ae8:	51 81       	ldd	r21, Z+1	; 0x01
    1aea:	62 81       	ldd	r22, Z+2	; 0x02
    1aec:	73 81       	ldd	r23, Z+3	; 0x03
    1aee:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, ((writesds) ? *(UINT32*)writesds : 0));
    1af2:	61 14       	cp	r6, r1
    1af4:	71 04       	cpc	r7, r1
    1af6:	29 f4       	brne	.+10     	; 0x1b02 <select+0xc8>
    1af8:	40 e0       	ldi	r20, 0x00	; 0
    1afa:	50 e0       	ldi	r21, 0x00	; 0
    1afc:	60 e0       	ldi	r22, 0x00	; 0
    1afe:	70 e0       	ldi	r23, 0x00	; 0
    1b00:	05 c0       	rjmp	.+10     	; 0x1b0c <select+0xd2>
    1b02:	f3 01       	movw	r30, r6
    1b04:	40 81       	ld	r20, Z
    1b06:	51 81       	ldd	r21, Z+1	; 0x01
    1b08:	62 81       	ldd	r22, Z+2	; 0x02
    1b0a:	73 81       	ldd	r23, Z+3	; 0x03
    1b0c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, ((exceptsds) ? *(UINT32*)exceptsds : 0));
    1b10:	41 14       	cp	r4, r1
    1b12:	51 04       	cpc	r5, r1
    1b14:	29 f4       	brne	.+10     	; 0x1b20 <select+0xe6>
    1b16:	40 e0       	ldi	r20, 0x00	; 0
    1b18:	50 e0       	ldi	r21, 0x00	; 0
    1b1a:	60 e0       	ldi	r22, 0x00	; 0
    1b1c:	70 e0       	ldi	r23, 0x00	; 0
    1b1e:	05 c0       	rjmp	.+10     	; 0x1b2a <select+0xf0>
    1b20:	f2 01       	movw	r30, r4
    1b22:	40 81       	ld	r20, Z
    1b24:	51 81       	ldd	r21, Z+1	; 0x01
    1b26:	62 81       	ldd	r22, Z+2	; 0x02
    1b28:	73 81       	ldd	r23, Z+3	; 0x03
    1b2a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
    1b2e:	9c 01       	movw	r18, r24

	if (timeout)
    1b30:	01 15       	cp	r16, r1
    1b32:	11 05       	cpc	r17, r1
    1b34:	51 f1       	breq	.+84     	; 0x1b8a <select+0x150>
	{
		if ( 0 == timeout->tv_sec && timeout->tv_usec < 
    1b36:	f8 01       	movw	r30, r16
    1b38:	80 81       	ld	r24, Z
    1b3a:	91 81       	ldd	r25, Z+1	; 0x01
    1b3c:	a2 81       	ldd	r26, Z+2	; 0x02
    1b3e:	b3 81       	ldd	r27, Z+3	; 0x03
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	a1 05       	cpc	r26, r1
    1b44:	b1 05       	cpc	r27, r1
    1b46:	91 f4       	brne	.+36     	; 0x1b6c <select+0x132>
    1b48:	84 81       	ldd	r24, Z+4	; 0x04
    1b4a:	95 81       	ldd	r25, Z+5	; 0x05
    1b4c:	a6 81       	ldd	r26, Z+6	; 0x06
    1b4e:	b7 81       	ldd	r27, Z+7	; 0x07
    1b50:	88 58       	subi	r24, 0x88	; 136
    1b52:	93 41       	sbci	r25, 0x13	; 19
    1b54:	a0 40       	sbci	r26, 0x00	; 0
    1b56:	b0 40       	sbci	r27, 0x00	; 0
    1b58:	4c f4       	brge	.+18     	; 0x1b6c <select+0x132>
			SELECT_TIMEOUT_MIN_MICRO_SECONDS)
		{
			timeout->tv_usec = SELECT_TIMEOUT_MIN_MICRO_SECONDS;
    1b5a:	88 e8       	ldi	r24, 0x88	; 136
    1b5c:	93 e1       	ldi	r25, 0x13	; 19
    1b5e:	a0 e0       	ldi	r26, 0x00	; 0
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	f8 01       	movw	r30, r16
    1b64:	84 83       	std	Z+4, r24	; 0x04
    1b66:	95 83       	std	Z+5, r25	; 0x05
    1b68:	a6 83       	std	Z+6, r26	; 0x06
    1b6a:	b7 83       	std	Z+7, r27	; 0x07
		}
		args = UINT32_TO_STREAM(args, timeout->tv_sec);
    1b6c:	f8 01       	movw	r30, r16
    1b6e:	40 81       	ld	r20, Z
    1b70:	51 81       	ldd	r21, Z+1	; 0x01
    1b72:	62 81       	ldd	r22, Z+2	; 0x02
    1b74:	73 81       	ldd	r23, Z+3	; 0x03
    1b76:	c9 01       	movw	r24, r18
    1b78:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
		args = UINT32_TO_STREAM(args, timeout->tv_usec);
    1b7c:	f8 01       	movw	r30, r16
    1b7e:	44 81       	ldd	r20, Z+4	; 0x04
    1b80:	55 81       	ldd	r21, Z+5	; 0x05
    1b82:	66 81       	ldd	r22, Z+6	; 0x06
    1b84:	77 81       	ldd	r23, Z+7	; 0x07
    1b86:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	}

	// Initiate a HCI command
	hci_command_send(HCI_CMND_BSD_SELECT, ptr, SOCKET_SELECT_PARAMS_LEN);
    1b8a:	88 e0       	ldi	r24, 0x08	; 8
    1b8c:	90 e1       	ldi	r25, 0x10	; 16
    1b8e:	b7 01       	movw	r22, r14
    1b90:	4c e2       	ldi	r20, 0x2C	; 44
    1b92:	0e 94 a5 08 	call	0x114a	; 0x114a <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_EVNT_SELECT, &tParams);
    1b96:	88 e0       	ldi	r24, 0x08	; 8
    1b98:	90 e1       	ldi	r25, 0x10	; 16
    1b9a:	be 01       	movw	r22, r28
    1b9c:	6f 5f       	subi	r22, 0xFF	; 255
    1b9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba0:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SimpleLinkWaitEvent>

	// Update actually read FD
	if (tParams.iStatus >= 0)
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
    1ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba8:	ab 81       	ldd	r26, Y+3	; 0x03
    1baa:	bc 81       	ldd	r27, Y+4	; 0x04
    1bac:	b7 fd       	sbrc	r27, 7
    1bae:	27 c0       	rjmp	.+78     	; 0x1bfe <select+0x1c4>
	{
		if (readsds)
    1bb0:	81 14       	cp	r8, r1
    1bb2:	91 04       	cpc	r9, r1
    1bb4:	49 f0       	breq	.+18     	; 0x1bc8 <select+0x18e>
		{
			memcpy(readsds, &tParams.uiRdfd, sizeof(tParams.uiRdfd));
    1bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bba:	af 81       	ldd	r26, Y+7	; 0x07
    1bbc:	b8 85       	ldd	r27, Y+8	; 0x08
    1bbe:	f4 01       	movw	r30, r8
    1bc0:	80 83       	st	Z, r24
    1bc2:	91 83       	std	Z+1, r25	; 0x01
    1bc4:	a2 83       	std	Z+2, r26	; 0x02
    1bc6:	b3 83       	std	Z+3, r27	; 0x03
		}

		if (writesds)
    1bc8:	61 14       	cp	r6, r1
    1bca:	71 04       	cpc	r7, r1
    1bcc:	49 f0       	breq	.+18     	; 0x1be0 <select+0x1a6>
		{
			memcpy(writesds, &tParams.uiWrfd, sizeof(tParams.uiWrfd)); 
    1bce:	89 85       	ldd	r24, Y+9	; 0x09
    1bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd2:	ab 85       	ldd	r26, Y+11	; 0x0b
    1bd4:	bc 85       	ldd	r27, Y+12	; 0x0c
    1bd6:	f3 01       	movw	r30, r6
    1bd8:	80 83       	st	Z, r24
    1bda:	91 83       	std	Z+1, r25	; 0x01
    1bdc:	a2 83       	std	Z+2, r26	; 0x02
    1bde:	b3 83       	std	Z+3, r27	; 0x03
		}

		if (exceptsds)
    1be0:	41 14       	cp	r4, r1
    1be2:	51 04       	cpc	r5, r1
    1be4:	49 f0       	breq	.+18     	; 0x1bf8 <select+0x1be>
		{
			memcpy(exceptsds, &tParams.uiExfd, sizeof(tParams.uiExfd)); 
    1be6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1be8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bea:	af 85       	ldd	r26, Y+15	; 0x0f
    1bec:	b8 89       	ldd	r27, Y+16	; 0x10
    1bee:	f2 01       	movw	r30, r4
    1bf0:	80 83       	st	Z, r24
    1bf2:	91 83       	std	Z+1, r25	; 0x01
    1bf4:	a2 83       	std	Z+2, r26	; 0x02
    1bf6:	b3 83       	std	Z+3, r27	; 0x03
		}

		return(tParams.iStatus);
    1bf8:	29 81       	ldd	r18, Y+1	; 0x01
    1bfa:	3a 81       	ldd	r19, Y+2	; 0x02
    1bfc:	06 c0       	rjmp	.+12     	; 0x1c0a <select+0x1d0>

	}
	else
	{
		errno = tParams.iStatus;
    1bfe:	90 93 cc 07 	sts	0x07CC, r25
    1c02:	80 93 cb 07 	sts	0x07CB, r24
    1c06:	2f ef       	ldi	r18, 0xFF	; 255
    1c08:	3f ef       	ldi	r19, 0xFF	; 255
		return(-1);
	}
}
    1c0a:	c9 01       	movw	r24, r18
    1c0c:	60 96       	adiw	r28, 0x10	; 16
    1c0e:	0f b6       	in	r0, 0x3f	; 63
    1c10:	f8 94       	cli
    1c12:	de bf       	out	0x3e, r29	; 62
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	cd bf       	out	0x3d, r28	; 61
    1c18:	cf 91       	pop	r28
    1c1a:	df 91       	pop	r29
    1c1c:	1f 91       	pop	r17
    1c1e:	0f 91       	pop	r16
    1c20:	ff 90       	pop	r15
    1c22:	ef 90       	pop	r14
    1c24:	df 90       	pop	r13
    1c26:	cf 90       	pop	r12
    1c28:	bf 90       	pop	r11
    1c2a:	af 90       	pop	r10
    1c2c:	9f 90       	pop	r9
    1c2e:	8f 90       	pop	r8
    1c30:	7f 90       	pop	r7
    1c32:	6f 90       	pop	r6
    1c34:	5f 90       	pop	r5
    1c36:	4f 90       	pop	r4
    1c38:	08 95       	ret

00001c3a <accept>:
//!
//! @sa     socket ; bind ; listen
//
//*****************************************************************************

INT32 accept(INT32 sd, sockaddr *addr, socklen_t *addrlen)
    1c3a:	8f 92       	push	r8
    1c3c:	9f 92       	push	r9
    1c3e:	af 92       	push	r10
    1c40:	bf 92       	push	r11
    1c42:	cf 92       	push	r12
    1c44:	df 92       	push	r13
    1c46:	ef 92       	push	r14
    1c48:	ff 92       	push	r15
    1c4a:	0f 93       	push	r16
    1c4c:	1f 93       	push	r17
    1c4e:	df 93       	push	r29
    1c50:	cf 93       	push	r28
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	68 97       	sbiw	r28, 0x18	; 24
    1c58:	0f b6       	in	r0, 0x3f	; 63
    1c5a:	f8 94       	cli
    1c5c:	de bf       	out	0x3e, r29	; 62
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	cd bf       	out	0x3d, r28	; 61
    1c62:	5b 01       	movw	r10, r22
    1c64:	6c 01       	movw	r12, r24
    1c66:	7a 01       	movw	r14, r20
    1c68:	49 01       	movw	r8, r18
	INT32 ret;
	UINT8 *ptr, *args;
	tBsdReturnParams tAcceptReturnArguments;

	ret = EFAIL;
	ptr = tSLInformation.pucTxCommandBuffer;
    1c6a:	00 91 76 04 	lds	r16, 0x0476
    1c6e:	10 91 77 04 	lds	r17, 0x0477
	args = (ptr + HEADERS_SIZE_CMD);

	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, sd);
    1c72:	c8 01       	movw	r24, r16
    1c74:	09 96       	adiw	r24, 0x09	; 9
    1c76:	b6 01       	movw	r22, r12
    1c78:	a5 01       	movw	r20, r10
    1c7a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_ACCEPT,
		ptr, SOCKET_ACCEPT_PARAMS_LEN);
    1c7e:	85 e0       	ldi	r24, 0x05	; 5
    1c80:	90 e1       	ldi	r25, 0x10	; 16
    1c82:	b8 01       	movw	r22, r16
    1c84:	44 e0       	ldi	r20, 0x04	; 4
    1c86:	0e 94 a5 08 	call	0x114a	; 0x114a <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_ACCEPT, &tAcceptReturnArguments);
    1c8a:	85 e0       	ldi	r24, 0x05	; 5
    1c8c:	90 e1       	ldi	r25, 0x10	; 16
    1c8e:	be 01       	movw	r22, r28
    1c90:	6f 5f       	subi	r22, 0xFF	; 255
    1c92:	7f 4f       	sbci	r23, 0xFF	; 255
    1c94:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SimpleLinkWaitEvent>

	// need specify return parameters!!!
	// Adafruit CC3k Host Driver Difference
	// Bug fix to prevent writing to null memory pointer.
	// Noted 12-12-2014 by tdicola
	if (addr) memcpy(addr, &tAcceptReturnArguments.tSocketAddress, ASIC_ADDR_LEN);
    1c98:	e1 14       	cp	r14, r1
    1c9a:	f1 04       	cpc	r15, r1
    1c9c:	41 f0       	breq	.+16     	; 0x1cae <accept+0x74>
    1c9e:	d7 01       	movw	r26, r14
    1ca0:	fe 01       	movw	r30, r28
    1ca2:	39 96       	adiw	r30, 0x09	; 9
    1ca4:	88 e0       	ldi	r24, 0x08	; 8
    1ca6:	01 90       	ld	r0, Z+
    1ca8:	0d 92       	st	X+, r0
    1caa:	81 50       	subi	r24, 0x01	; 1
    1cac:	e1 f7       	brne	.-8      	; 0x1ca6 <accept+0x6c>
	if (addrlen) *addrlen = ASIC_ADDR_LEN;
    1cae:	81 14       	cp	r8, r1
    1cb0:	91 04       	cpc	r9, r1
    1cb2:	49 f0       	breq	.+18     	; 0x1cc6 <accept+0x8c>
    1cb4:	88 e0       	ldi	r24, 0x08	; 8
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	a0 e0       	ldi	r26, 0x00	; 0
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	f4 01       	movw	r30, r8
    1cbe:	80 83       	st	Z, r24
    1cc0:	91 83       	std	Z+1, r25	; 0x01
    1cc2:	a2 83       	std	Z+2, r26	; 0x02
    1cc4:	b3 83       	std	Z+3, r27	; 0x03
	errno = tAcceptReturnArguments.iStatus; 
    1cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cca:	90 93 cc 07 	sts	0x07CC, r25
    1cce:	80 93 cb 07 	sts	0x07CB, r24
	ret = errno;
    1cd2:	7c 01       	movw	r14, r24
    1cd4:	00 27       	eor	r16, r16
    1cd6:	f7 fc       	sbrc	r15, 7
    1cd8:	00 95       	com	r16
    1cda:	10 2f       	mov	r17, r16

	// if succeeded, iStatus = new socket descriptor. otherwise - error number 
	if(M_IS_VALID_SD(ret))
    1cdc:	f8 e0       	ldi	r31, 0x08	; 8
    1cde:	ef 16       	cp	r14, r31
    1ce0:	f1 04       	cpc	r15, r1
    1ce2:	01 05       	cpc	r16, r1
    1ce4:	11 05       	cpc	r17, r1
    1ce6:	38 f4       	brcc	.+14     	; 0x1cf6 <accept+0xbc>
	{
		set_socket_active_status(ret, SOCKET_STATUS_ACTIVE);
    1ce8:	c8 01       	movw	r24, r16
    1cea:	b7 01       	movw	r22, r14
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	40 e0       	ldi	r20, 0x00	; 0
    1cf2:	50 e0       	ldi	r21, 0x00	; 0
    1cf4:	06 c0       	rjmp	.+12     	; 0x1d02 <accept+0xc8>
	}
	else
	{
		set_socket_active_status(sd, SOCKET_STATUS_INACTIVE);
    1cf6:	c6 01       	movw	r24, r12
    1cf8:	b5 01       	movw	r22, r10
    1cfa:	21 e0       	ldi	r18, 0x01	; 1
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	40 e0       	ldi	r20, 0x00	; 0
    1d00:	50 e0       	ldi	r21, 0x00	; 0
    1d02:	0e 94 c7 01 	call	0x38e	; 0x38e <set_socket_active_status>
	}

	return(ret);
}
    1d06:	b7 01       	movw	r22, r14
    1d08:	c8 01       	movw	r24, r16
    1d0a:	68 96       	adiw	r28, 0x18	; 24
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	f8 94       	cli
    1d10:	de bf       	out	0x3e, r29	; 62
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	cd bf       	out	0x3d, r28	; 61
    1d16:	cf 91       	pop	r28
    1d18:	df 91       	pop	r29
    1d1a:	1f 91       	pop	r17
    1d1c:	0f 91       	pop	r16
    1d1e:	ff 90       	pop	r15
    1d20:	ef 90       	pop	r14
    1d22:	df 90       	pop	r13
    1d24:	cf 90       	pop	r12
    1d26:	bf 90       	pop	r11
    1d28:	af 90       	pop	r10
    1d2a:	9f 90       	pop	r9
    1d2c:	8f 90       	pop	r8
    1d2e:	08 95       	ret

00001d30 <closesocket>:
//!
//!  @brief  The socket function closes a created socket.
//
//*****************************************************************************

INT32 closesocket(INT32 sd)
    1d30:	cf 92       	push	r12
    1d32:	df 92       	push	r13
    1d34:	ef 92       	push	r14
    1d36:	ff 92       	push	r15
    1d38:	0f 93       	push	r16
    1d3a:	1f 93       	push	r17
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	00 d0       	rcall	.+0      	; 0x1d42 <closesocket+0x12>
    1d42:	00 d0       	rcall	.+0      	; 0x1d44 <closesocket+0x14>
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
    1d48:	6b 01       	movw	r12, r22
    1d4a:	7c 01       	movw	r14, r24
{
	INT32 ret;
	UINT8 *ptr, *args;

	ret = EFAIL;
    1d4c:	8f ef       	ldi	r24, 0xFF	; 255
    1d4e:	9f ef       	ldi	r25, 0xFF	; 255
    1d50:	af ef       	ldi	r26, 0xFF	; 255
    1d52:	bf ef       	ldi	r27, 0xFF	; 255
    1d54:	89 83       	std	Y+1, r24	; 0x01
    1d56:	9a 83       	std	Y+2, r25	; 0x02
    1d58:	ab 83       	std	Y+3, r26	; 0x03
    1d5a:	bc 83       	std	Y+4, r27	; 0x04
	ptr = tSLInformation.pucTxCommandBuffer;
    1d5c:	00 91 76 04 	lds	r16, 0x0476
    1d60:	10 91 77 04 	lds	r17, 0x0477
	args = (ptr + HEADERS_SIZE_CMD);

	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, sd);
    1d64:	c8 01       	movw	r24, r16
    1d66:	09 96       	adiw	r24, 0x09	; 9
    1d68:	b7 01       	movw	r22, r14
    1d6a:	a6 01       	movw	r20, r12
    1d6c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_CLOSE_SOCKET,
		ptr, SOCKET_CLOSE_PARAMS_LEN);
    1d70:	8b e0       	ldi	r24, 0x0B	; 11
    1d72:	90 e1       	ldi	r25, 0x10	; 16
    1d74:	b8 01       	movw	r22, r16
    1d76:	44 e0       	ldi	r20, 0x04	; 4
    1d78:	0e 94 a5 08 	call	0x114a	; 0x114a <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_CLOSE_SOCKET, &ret);
    1d7c:	8b e0       	ldi	r24, 0x0B	; 11
    1d7e:	90 e1       	ldi	r25, 0x10	; 16
    1d80:	be 01       	movw	r22, r28
    1d82:	6f 5f       	subi	r22, 0xFF	; 255
    1d84:	7f 4f       	sbci	r23, 0xFF	; 255
    1d86:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SimpleLinkWaitEvent>
	errno = ret;
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8e:	90 93 cc 07 	sts	0x07CC, r25
    1d92:	80 93 cb 07 	sts	0x07CB, r24

	// since 'close' call may result in either OK (and then it closed) or error 
	// mark this socket as invalid 
	set_socket_active_status(sd, SOCKET_STATUS_INACTIVE);
    1d96:	c7 01       	movw	r24, r14
    1d98:	b6 01       	movw	r22, r12
    1d9a:	21 e0       	ldi	r18, 0x01	; 1
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	40 e0       	ldi	r20, 0x00	; 0
    1da0:	50 e0       	ldi	r21, 0x00	; 0
    1da2:	0e 94 c7 01 	call	0x38e	; 0x38e <set_socket_active_status>
    1da6:	69 81       	ldd	r22, Y+1	; 0x01
    1da8:	7a 81       	ldd	r23, Y+2	; 0x02

	return(ret);
}
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dac:	9c 81       	ldd	r25, Y+4	; 0x04
    1dae:	0f 90       	pop	r0
    1db0:	0f 90       	pop	r0
    1db2:	0f 90       	pop	r0
    1db4:	0f 90       	pop	r0
    1db6:	cf 91       	pop	r28
    1db8:	df 91       	pop	r29
    1dba:	1f 91       	pop	r17
    1dbc:	0f 91       	pop	r16
    1dbe:	ff 90       	pop	r15
    1dc0:	ef 90       	pop	r14
    1dc2:	df 90       	pop	r13
    1dc4:	cf 90       	pop	r12
    1dc6:	08 95       	ret

00001dc8 <socket>:
//!          transport service provider. This function is called by the 
//!          application layer to obtain a socket handle.
//
//*****************************************************************************

INT32 socket(INT32 domain, INT32 type, INT32 protocol)
    1dc8:	4f 92       	push	r4
    1dca:	5f 92       	push	r5
    1dcc:	6f 92       	push	r6
    1dce:	7f 92       	push	r7
    1dd0:	8f 92       	push	r8
    1dd2:	9f 92       	push	r9
    1dd4:	af 92       	push	r10
    1dd6:	bf 92       	push	r11
    1dd8:	cf 92       	push	r12
    1dda:	df 92       	push	r13
    1ddc:	ef 92       	push	r14
    1dde:	ff 92       	push	r15
    1de0:	0f 93       	push	r16
    1de2:	1f 93       	push	r17
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	00 d0       	rcall	.+0      	; 0x1dea <socket+0x22>
    1dea:	00 d0       	rcall	.+0      	; 0x1dec <socket+0x24>
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
    1df0:	5b 01       	movw	r10, r22
    1df2:	6c 01       	movw	r12, r24
    1df4:	39 01       	movw	r6, r18
    1df6:	4a 01       	movw	r8, r20
{
	INT32 ret;
	UINT8 *ptr, *args;

	ret = EFAIL;
    1df8:	8f ef       	ldi	r24, 0xFF	; 255
    1dfa:	9f ef       	ldi	r25, 0xFF	; 255
    1dfc:	af ef       	ldi	r26, 0xFF	; 255
    1dfe:	bf ef       	ldi	r27, 0xFF	; 255
    1e00:	89 83       	std	Y+1, r24	; 0x01
    1e02:	9a 83       	std	Y+2, r25	; 0x02
    1e04:	ab 83       	std	Y+3, r26	; 0x03
    1e06:	bc 83       	std	Y+4, r27	; 0x04
	ptr = tSLInformation.pucTxCommandBuffer;
    1e08:	40 90 76 04 	lds	r4, 0x0476
    1e0c:	50 90 77 04 	lds	r5, 0x0477
	args = (ptr + HEADERS_SIZE_CMD);

	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, domain);
    1e10:	c2 01       	movw	r24, r4
    1e12:	09 96       	adiw	r24, 0x09	; 9
    1e14:	b6 01       	movw	r22, r12
    1e16:	a5 01       	movw	r20, r10
    1e18:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, type);
    1e1c:	b4 01       	movw	r22, r8
    1e1e:	a3 01       	movw	r20, r6
    1e20:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, protocol);
    1e24:	b8 01       	movw	r22, r16
    1e26:	a7 01       	movw	r20, r14
    1e28:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_SOCKET, ptr, SOCKET_OPEN_PARAMS_LEN);
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	90 e1       	ldi	r25, 0x10	; 16
    1e30:	b2 01       	movw	r22, r4
    1e32:	4c e0       	ldi	r20, 0x0C	; 12
    1e34:	0e 94 a5 08 	call	0x114a	; 0x114a <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_SOCKET, &ret);
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	90 e1       	ldi	r25, 0x10	; 16
    1e3c:	be 01       	movw	r22, r28
    1e3e:	6f 5f       	subi	r22, 0xFF	; 255
    1e40:	7f 4f       	sbci	r23, 0xFF	; 255
    1e42:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SimpleLinkWaitEvent>

	// Process the event 
	errno = ret;
    1e46:	69 81       	ldd	r22, Y+1	; 0x01
    1e48:	7a 81       	ldd	r23, Y+2	; 0x02
    1e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4e:	70 93 cc 07 	sts	0x07CC, r23
    1e52:	60 93 cb 07 	sts	0x07CB, r22

	set_socket_active_status(ret, SOCKET_STATUS_ACTIVE);
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	40 e0       	ldi	r20, 0x00	; 0
    1e5c:	50 e0       	ldi	r21, 0x00	; 0
    1e5e:	0e 94 c7 01 	call	0x38e	; 0x38e <set_socket_active_status>
    1e62:	69 81       	ldd	r22, Y+1	; 0x01
    1e64:	7a 81       	ldd	r23, Y+2	; 0x02

	return(ret);
}
    1e66:	8b 81       	ldd	r24, Y+3	; 0x03
    1e68:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6a:	0f 90       	pop	r0
    1e6c:	0f 90       	pop	r0
    1e6e:	0f 90       	pop	r0
    1e70:	0f 90       	pop	r0
    1e72:	cf 91       	pop	r28
    1e74:	df 91       	pop	r29
    1e76:	1f 91       	pop	r17
    1e78:	0f 91       	pop	r16
    1e7a:	ff 90       	pop	r15
    1e7c:	ef 90       	pop	r14
    1e7e:	df 90       	pop	r13
    1e80:	cf 90       	pop	r12
    1e82:	bf 90       	pop	r11
    1e84:	af 90       	pop	r10
    1e86:	9f 90       	pop	r9
    1e88:	8f 90       	pop	r8
    1e8a:	7f 90       	pop	r7
    1e8c:	6f 90       	pop	r6
    1e8e:	5f 90       	pop	r5
    1e90:	4f 90       	pop	r4
    1e92:	08 95       	ret

00001e94 <_Z26HostFlowControlConsumeBuffs>:
//!  @brief  if SEND_NON_BLOCKING not define - block until have free buffer 
//!          becomes available, else return immediately  with correct status 
//!          regarding the buffers available.
//
//*****************************************************************************
INT16 HostFlowControlConsumeBuff(INT16 sd)
    1e94:	8f 92       	push	r8
    1e96:	9f 92       	push	r9
    1e98:	af 92       	push	r10
    1e9a:	bf 92       	push	r11
    1e9c:	cf 92       	push	r12
    1e9e:	df 92       	push	r13
    1ea0:	ef 92       	push	r14
    1ea2:	ff 92       	push	r15
    1ea4:	0f 93       	push	r16
    1ea6:	1f 93       	push	r17
    1ea8:	8c 01       	movw	r16, r24

// Adafruit CC3k Host Driver Difference
// Allow defining a send timeout period.
// Noted 12-12-2014 by tdicola
#ifdef SEND_TIMEOUT_MS
	unsigned long startTime = millis();
    1eaa:	0e 94 2b 2d 	call	0x5a56	; 0x5a56 <millis>
    1eae:	4b 01       	movw	r8, r22
    1eb0:	5c 01       	movw	r10, r24
			errno = tSLInformation.slTransmitDataError;
			tSLInformation.slTransmitDataError = 0;
			return errno;
		}

		if(SOCKET_STATUS_ACTIVE != get_socket_active_status(sd))
    1eb2:	68 01       	movw	r12, r16
    1eb4:	ee 24       	eor	r14, r14
    1eb6:	d7 fc       	sbrc	r13, 7
    1eb8:	e0 94       	com	r14
    1eba:	fe 2c       	mov	r15, r14
	do
	{
		// In case last transmission failed then we will return the last failure 
		// reason here.
		// Note that the buffer will not be allocated in this case
		if (tSLInformation.slTransmitDataError != 0)
    1ebc:	80 91 88 04 	lds	r24, 0x0488
    1ec0:	90 91 89 04 	lds	r25, 0x0489
    1ec4:	a0 91 8a 04 	lds	r26, 0x048A
    1ec8:	b0 91 8b 04 	lds	r27, 0x048B
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	a1 05       	cpc	r26, r1
    1ed0:	b1 05       	cpc	r27, r1
    1ed2:	b1 f0       	breq	.+44     	; 0x1f00 <_Z26HostFlowControlConsumeBuffs+0x6c>
		{
			errno = tSLInformation.slTransmitDataError;
    1ed4:	80 91 88 04 	lds	r24, 0x0488
    1ed8:	90 91 89 04 	lds	r25, 0x0489
    1edc:	a0 91 8a 04 	lds	r26, 0x048A
    1ee0:	b0 91 8b 04 	lds	r27, 0x048B
    1ee4:	9c 01       	movw	r18, r24
    1ee6:	90 93 cc 07 	sts	0x07CC, r25
    1eea:	80 93 cb 07 	sts	0x07CB, r24
			tSLInformation.slTransmitDataError = 0;
    1eee:	10 92 88 04 	sts	0x0488, r1
    1ef2:	10 92 89 04 	sts	0x0489, r1
    1ef6:	10 92 8a 04 	sts	0x048A, r1
    1efa:	10 92 8b 04 	sts	0x048B, r1
    1efe:	2c c0       	rjmp	.+88     	; 0x1f58 <_Z26HostFlowControlConsumeBuffs+0xc4>
			return errno;
		}

		if(SOCKET_STATUS_ACTIVE != get_socket_active_status(sd))
    1f00:	c7 01       	movw	r24, r14
    1f02:	b6 01       	movw	r22, r12
    1f04:	0e 94 13 02 	call	0x426	; 0x426 <get_socket_active_status>
    1f08:	61 15       	cp	r22, r1
    1f0a:	71 05       	cpc	r23, r1
    1f0c:	81 05       	cpc	r24, r1
    1f0e:	91 05       	cpc	r25, r1
    1f10:	19 f0       	breq	.+6      	; 0x1f18 <_Z26HostFlowControlConsumeBuffs+0x84>
    1f12:	2f ef       	ldi	r18, 0xFF	; 255
    1f14:	3f ef       	ldi	r19, 0xFF	; 255
    1f16:	20 c0       	rjmp	.+64     	; 0x1f58 <_Z26HostFlowControlConsumeBuffs+0xc4>

// Adafruit CC3k Host Driver Difference
// Implementation of send timeout.
// Noted 12-12-2014 by tdicola
#ifdef SEND_TIMEOUT_MS
		if ((millis() - startTime) > SEND_TIMEOUT_MS)
    1f18:	0e 94 2b 2d 	call	0x5a56	; 0x5a56 <millis>
    1f1c:	68 19       	sub	r22, r8
    1f1e:	79 09       	sbc	r23, r9
    1f20:	8a 09       	sbc	r24, r10
    1f22:	9b 09       	sbc	r25, r11
    1f24:	61 53       	subi	r22, 0x31	; 49
    1f26:	75 47       	sbci	r23, 0x75	; 117
    1f28:	80 40       	sbci	r24, 0x00	; 0
    1f2a:	90 40       	sbci	r25, 0x00	; 0
    1f2c:	18 f0       	brcs	.+6      	; 0x1f34 <_Z26HostFlowControlConsumeBuffs+0xa0>
    1f2e:	2d ef       	ldi	r18, 0xFD	; 253
    1f30:	3f ef       	ldi	r19, 0xFF	; 255
    1f32:	12 c0       	rjmp	.+36     	; 0x1f58 <_Z26HostFlowControlConsumeBuffs+0xc4>
// Noted 12-12-2014 by tdicola
#ifdef SEND_TIMEOUT_MS
	unsigned long startTime = millis();
#endif

	do
    1f34:	80 91 8c 04 	lds	r24, 0x048C
    1f38:	90 91 8d 04 	lds	r25, 0x048D
    1f3c:	89 2b       	or	r24, r25
    1f3e:	09 f4       	brne	.+2      	; 0x1f42 <_Z26HostFlowControlConsumeBuffs+0xae>
    1f40:	bd cf       	rjmp	.-134    	; 0x1ebc <_Z26HostFlowControlConsumeBuffs+0x28>
		}
#endif

	} while(0 == tSLInformation.usNumberOfFreeBuffers);

	tSLInformation.usNumberOfFreeBuffers--;
    1f42:	80 91 8c 04 	lds	r24, 0x048C
    1f46:	90 91 8d 04 	lds	r25, 0x048D
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	90 93 8d 04 	sts	0x048D, r25
    1f50:	80 93 8c 04 	sts	0x048C, r24
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
	{
		tSLInformation.usNumberOfFreeBuffers--;
		return 0;
	}
#endif
}
    1f58:	c9 01       	movw	r24, r18
    1f5a:	1f 91       	pop	r17
    1f5c:	0f 91       	pop	r16
    1f5e:	ff 90       	pop	r15
    1f60:	ef 90       	pop	r14
    1f62:	df 90       	pop	r13
    1f64:	cf 90       	pop	r12
    1f66:	bf 90       	pop	r11
    1f68:	af 90       	pop	r10
    1f6a:	9f 90       	pop	r9
    1f6c:	8f 90       	pop	r8
    1f6e:	08 95       	ret

00001f70 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll>:
//!  @brief          This function is used to transmit a message to another
//!                  socket
//
//*****************************************************************************
INT16 simple_link_send(INT32 sd, const void *buf, INT32 len, INT32 flags,
	const sockaddr *to, INT32 tolen, INT32 opcode)
    1f70:	2f 92       	push	r2
    1f72:	3f 92       	push	r3
    1f74:	4f 92       	push	r4
    1f76:	5f 92       	push	r5
    1f78:	6f 92       	push	r6
    1f7a:	7f 92       	push	r7
    1f7c:	8f 92       	push	r8
    1f7e:	9f 92       	push	r9
    1f80:	af 92       	push	r10
    1f82:	bf 92       	push	r11
    1f84:	cf 92       	push	r12
    1f86:	df 92       	push	r13
    1f88:	ef 92       	push	r14
    1f8a:	ff 92       	push	r15
    1f8c:	0f 93       	push	r16
    1f8e:	1f 93       	push	r17
    1f90:	df 93       	push	r29
    1f92:	cf 93       	push	r28
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
    1f98:	6a 97       	sbiw	r28, 0x1a	; 26
    1f9a:	0f b6       	in	r0, 0x3f	; 63
    1f9c:	f8 94       	cli
    1f9e:	de bf       	out	0x3e, r29	; 62
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	cd bf       	out	0x3d, r28	; 61
    1fa4:	1b 01       	movw	r2, r22
    1fa6:	2c 01       	movw	r4, r24
    1fa8:	5c 8b       	std	Y+20, r21	; 0x14
    1faa:	4b 8b       	std	Y+19, r20	; 0x13
    1fac:	38 01       	movw	r6, r16
    1fae:	49 01       	movw	r8, r18
    1fb0:	cd 8a       	std	Y+21, r12	; 0x15
    1fb2:	de 8a       	std	Y+22, r13	; 0x16
    1fb4:	ef 8a       	std	Y+23, r14	; 0x17
    1fb6:	f8 8e       	std	Y+24, r15	; 0x18
    1fb8:	ba 8e       	std	Y+26, r11	; 0x1a
    1fba:	a9 8e       	std	Y+25, r10	; 0x19
    1fbc:	cf a4       	ldd	r12, Y+47	; 0x2f
    1fbe:	d8 a8       	ldd	r13, Y+48	; 0x30
    1fc0:	e9 a8       	ldd	r14, Y+49	; 0x31
    1fc2:	fa a8       	ldd	r15, Y+50	; 0x32
	UINT32 addr_offset;
	INT16 res;
	tBsdReadReturnParams tSocketSendEvent;

	// Check the bsd_arguments
	if (0 != (res = HostFlowControlConsumeBuff(sd)))
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <_Z26HostFlowControlConsumeBuffs>
    1fca:	9c 01       	movw	r18, r24
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	09 f0       	breq	.+2      	; 0x1fd2 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x62>
    1fd0:	cb c0       	rjmp	.+406    	; 0x2168 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x1f8>
	{
		return res;
	}

	//Update the number of sent packets
	tSLInformation.NumberOfSentPackets++;
    1fd2:	80 91 94 04 	lds	r24, 0x0494
    1fd6:	90 91 95 04 	lds	r25, 0x0495
    1fda:	a0 91 96 04 	lds	r26, 0x0496
    1fde:	b0 91 97 04 	lds	r27, 0x0497
    1fe2:	01 96       	adiw	r24, 0x01	; 1
    1fe4:	a1 1d       	adc	r26, r1
    1fe6:	b1 1d       	adc	r27, r1
    1fe8:	80 93 94 04 	sts	0x0494, r24
    1fec:	90 93 95 04 	sts	0x0495, r25
    1ff0:	a0 93 96 04 	sts	0x0496, r26
    1ff4:	b0 93 97 04 	sts	0x0497, r27

	// Allocate a buffer and construct a packet and send it over spi
	ptr = tSLInformation.pucTxCommandBuffer;
    1ff8:	20 91 76 04 	lds	r18, 0x0476
    1ffc:	30 91 77 04 	lds	r19, 0x0477
    2000:	3a 8b       	std	Y+18, r19	; 0x12
    2002:	29 8b       	std	Y+17, r18	; 0x11
	args = (ptr + HEADERS_SIZE_DATA);

	// Update the offset of data and parameters according to the command
	switch(opcode)
    2004:	8b a9       	ldd	r24, Y+51	; 0x33
    2006:	9c a9       	ldd	r25, Y+52	; 0x34
    2008:	ad a9       	ldd	r26, Y+53	; 0x35
    200a:	be a9       	ldd	r27, Y+54	; 0x36
    200c:	81 38       	cpi	r24, 0x81	; 129
    200e:	91 05       	cpc	r25, r1
    2010:	a1 05       	cpc	r26, r1
    2012:	b1 05       	cpc	r27, r1
    2014:	b9 f0       	breq	.+46     	; 0x2044 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0xd4>
    2016:	83 38       	cpi	r24, 0x83	; 131
    2018:	91 05       	cpc	r25, r1
    201a:	a1 05       	cpc	r26, r1
    201c:	b1 05       	cpc	r27, r1
    201e:	f1 f4       	brne	.+60     	; 0x205c <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0xec>
	{ 
	case HCI_CMND_SENDTO:
		{
			addr_offset = len + sizeof(len) + sizeof(len);
    2020:	a4 01       	movw	r20, r8
    2022:	93 01       	movw	r18, r6
    2024:	28 5f       	subi	r18, 0xF8	; 248
    2026:	3f 4f       	sbci	r19, 0xFF	; 255
    2028:	4f 4f       	sbci	r20, 0xFF	; 255
    202a:	5f 4f       	sbci	r21, 0xFF	; 255
    202c:	2d 87       	std	Y+13, r18	; 0x0d
    202e:	3e 87       	std	Y+14, r19	; 0x0e
    2030:	4f 87       	std	Y+15, r20	; 0x0f
    2032:	58 8b       	std	Y+16, r21	; 0x10
			addrlen = 8;
			uArgSize = SOCKET_SENDTO_PARAMS_LEN;
			pDataPtr = ptr + HEADERS_SIZE_DATA + SOCKET_SENDTO_PARAMS_LEN;
    2034:	a9 88       	ldd	r10, Y+17	; 0x11
    2036:	ba 88       	ldd	r11, Y+18	; 0x12
    2038:	42 e2       	ldi	r20, 0x22	; 34
    203a:	50 e0       	ldi	r21, 0x00	; 0
    203c:	a4 0e       	add	r10, r20
    203e:	b5 1e       	adc	r11, r21
    2040:	18 e1       	ldi	r17, 0x18	; 24
    2042:	0c c0       	rjmp	.+24     	; 0x205c <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0xec>
	case HCI_CMND_SEND:
		{
			tolen = 0;
			to = NULL;
			uArgSize = HCI_CMND_SEND_ARG_LENGTH;
			pDataPtr = ptr + HEADERS_SIZE_DATA + HCI_CMND_SEND_ARG_LENGTH;
    2044:	a9 88       	ldd	r10, Y+17	; 0x11
    2046:	ba 88       	ldd	r11, Y+18	; 0x12
    2048:	8a e1       	ldi	r24, 0x1A	; 26
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	a8 0e       	add	r10, r24
    204e:	b9 1e       	adc	r11, r25
    2050:	1a 8e       	std	Y+26, r1	; 0x1a
    2052:	19 8e       	std	Y+25, r1	; 0x19
    2054:	cc 24       	eor	r12, r12
    2056:	dd 24       	eor	r13, r13
    2058:	76 01       	movw	r14, r12
    205a:	10 e1       	ldi	r17, 0x10	; 16
			break;
		}
	}

	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, sd);
    205c:	89 89       	ldd	r24, Y+17	; 0x11
    205e:	9a 89       	ldd	r25, Y+18	; 0x12
    2060:	0a 96       	adiw	r24, 0x0a	; 10
    2062:	b2 01       	movw	r22, r4
    2064:	a1 01       	movw	r20, r2
    2066:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, uArgSize - sizeof(sd));
    206a:	01 2f       	mov	r16, r17
    206c:	10 e0       	ldi	r17, 0x00	; 0
    206e:	04 50       	subi	r16, 0x04	; 4
    2070:	10 40       	sbci	r17, 0x00	; 0
    2072:	a8 01       	movw	r20, r16
    2074:	60 e0       	ldi	r22, 0x00	; 0
    2076:	70 e0       	ldi	r23, 0x00	; 0
    2078:	0c 5f       	subi	r16, 0xFC	; 252
    207a:	1f 4f       	sbci	r17, 0xFF	; 255
    207c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, len);
    2080:	b4 01       	movw	r22, r8
    2082:	a3 01       	movw	r20, r6
    2084:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, flags);
    2088:	4d 89       	ldd	r20, Y+21	; 0x15
    208a:	5e 89       	ldd	r21, Y+22	; 0x16
    208c:	6f 89       	ldd	r22, Y+23	; 0x17
    208e:	78 8d       	ldd	r23, Y+24	; 0x18
    2090:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>

	if (opcode == HCI_CMND_SENDTO)
    2094:	2b a9       	ldd	r18, Y+51	; 0x33
    2096:	3c a9       	ldd	r19, Y+52	; 0x34
    2098:	4d a9       	ldd	r20, Y+53	; 0x35
    209a:	5e a9       	ldd	r21, Y+54	; 0x36
    209c:	23 38       	cpi	r18, 0x83	; 131
    209e:	31 05       	cpc	r19, r1
    20a0:	41 05       	cpc	r20, r1
    20a2:	51 05       	cpc	r21, r1
    20a4:	61 f4       	brne	.+24     	; 0x20be <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x14e>
	{
		args = UINT32_TO_STREAM(args, addr_offset);
    20a6:	4d 85       	ldd	r20, Y+13	; 0x0d
    20a8:	5e 85       	ldd	r21, Y+14	; 0x0e
    20aa:	6f 85       	ldd	r22, Y+15	; 0x0f
    20ac:	78 89       	ldd	r23, Y+16	; 0x10
    20ae:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
		args = UINT32_TO_STREAM(args, addrlen);
    20b2:	48 e0       	ldi	r20, 0x08	; 8
    20b4:	50 e0       	ldi	r21, 0x00	; 0
    20b6:	60 e0       	ldi	r22, 0x00	; 0
    20b8:	70 e0       	ldi	r23, 0x00	; 0
    20ba:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	40 e0       	ldi	r20, 0x00	; 0
    20c4:	50 e0       	ldi	r21, 0x00	; 0
    20c6:	0c c0       	rjmp	.+24     	; 0x20e0 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x170>
	}

	// Copy the data received from user into the TX Buffer
	ARRAY_TO_STREAM(pDataPtr, ((UINT8 *)buf), len);
    20c8:	eb 89       	ldd	r30, Y+19	; 0x13
    20ca:	fc 89       	ldd	r31, Y+20	; 0x14
    20cc:	e2 0f       	add	r30, r18
    20ce:	f3 1f       	adc	r31, r19
    20d0:	80 81       	ld	r24, Z
    20d2:	d5 01       	movw	r26, r10
    20d4:	8d 93       	st	X+, r24
    20d6:	5d 01       	movw	r10, r26
    20d8:	2f 5f       	subi	r18, 0xFF	; 255
    20da:	3f 4f       	sbci	r19, 0xFF	; 255
    20dc:	4f 4f       	sbci	r20, 0xFF	; 255
    20de:	5f 4f       	sbci	r21, 0xFF	; 255
    20e0:	26 15       	cp	r18, r6
    20e2:	37 05       	cpc	r19, r7
    20e4:	48 05       	cpc	r20, r8
    20e6:	59 05       	cpc	r21, r9
    20e8:	7c f3       	brlt	.-34     	; 0x20c8 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x158>

	// In case we are using SendTo, copy the to parameters
	if (opcode == HCI_CMND_SENDTO)
    20ea:	2b a9       	ldd	r18, Y+51	; 0x33
    20ec:	3c a9       	ldd	r19, Y+52	; 0x34
    20ee:	4d a9       	ldd	r20, Y+53	; 0x35
    20f0:	5e a9       	ldd	r21, Y+54	; 0x36
    20f2:	23 38       	cpi	r18, 0x83	; 131
    20f4:	31 05       	cpc	r19, r1
    20f6:	41 05       	cpc	r20, r1
    20f8:	51 05       	cpc	r21, r1
    20fa:	c1 f4       	brne	.+48     	; 0x212c <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x1bc>
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	40 e0       	ldi	r20, 0x00	; 0
    2102:	50 e0       	ldi	r21, 0x00	; 0
    2104:	0e c0       	rjmp	.+28     	; 0x2122 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x1b2>
//!  @brief          This function is used to transmit a message to another
//!                  socket
//
//*****************************************************************************
INT16 simple_link_send(INT32 sd, const void *buf, INT32 len, INT32 flags,
	const sockaddr *to, INT32 tolen, INT32 opcode)
    2106:	f9 01       	movw	r30, r18
	ARRAY_TO_STREAM(pDataPtr, ((UINT8 *)buf), len);

	// In case we are using SendTo, copy the to parameters
	if (opcode == HCI_CMND_SENDTO)
	{	
		ARRAY_TO_STREAM(pDataPtr, ((UINT8 *)to), tolen);
    2108:	d5 01       	movw	r26, r10
    210a:	a2 0f       	add	r26, r18
    210c:	b3 1f       	adc	r27, r19
    210e:	89 8d       	ldd	r24, Y+25	; 0x19
    2110:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2112:	e8 0f       	add	r30, r24
    2114:	f9 1f       	adc	r31, r25
    2116:	80 81       	ld	r24, Z
    2118:	8c 93       	st	X, r24
    211a:	2f 5f       	subi	r18, 0xFF	; 255
    211c:	3f 4f       	sbci	r19, 0xFF	; 255
    211e:	4f 4f       	sbci	r20, 0xFF	; 255
    2120:	5f 4f       	sbci	r21, 0xFF	; 255
    2122:	2c 15       	cp	r18, r12
    2124:	3d 05       	cpc	r19, r13
    2126:	4e 05       	cpc	r20, r14
    2128:	5f 05       	cpc	r21, r15
    212a:	6c f3       	brlt	.-38     	; 0x2106 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x196>
	}

	// Initiate a HCI command
	hci_data_send(opcode, ptr, uArgSize, len,(UINT8*)to, tolen);
    212c:	8b a9       	ldd	r24, Y+51	; 0x33
    212e:	69 89       	ldd	r22, Y+17	; 0x11
    2130:	7a 89       	ldd	r23, Y+18	; 0x12
    2132:	a8 01       	movw	r20, r16
    2134:	93 01       	movw	r18, r6
    2136:	09 8d       	ldd	r16, Y+25	; 0x19
    2138:	1a 8d       	ldd	r17, Y+26	; 0x1a
    213a:	76 01       	movw	r14, r12
    213c:	0e 94 7e 08 	call	0x10fc	; 0x10fc <hci_data_send>
    2140:	be 01       	movw	r22, r28
    2142:	6f 5f       	subi	r22, 0xFF	; 255
    2144:	7f 4f       	sbci	r23, 0xFF	; 255

	if (opcode == HCI_CMND_SENDTO)
    2146:	2b a9       	ldd	r18, Y+51	; 0x33
    2148:	3c a9       	ldd	r19, Y+52	; 0x34
    214a:	4d a9       	ldd	r20, Y+53	; 0x35
    214c:	5e a9       	ldd	r21, Y+54	; 0x36
    214e:	23 38       	cpi	r18, 0x83	; 131
    2150:	31 05       	cpc	r19, r1
    2152:	41 05       	cpc	r20, r1
    2154:	51 05       	cpc	r21, r1
    2156:	19 f4       	brne	.+6      	; 0x215e <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x1ee>
		SimpleLinkWaitEvent(HCI_EVNT_SENDTO, &tSocketSendEvent);
    2158:	8f e0       	ldi	r24, 0x0F	; 15
    215a:	90 e1       	ldi	r25, 0x10	; 16
    215c:	02 c0       	rjmp	.+4      	; 0x2162 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x1f2>
	else
		SimpleLinkWaitEvent(HCI_EVNT_SEND, &tSocketSendEvent);
    215e:	83 e0       	ldi	r24, 0x03	; 3
    2160:	90 e1       	ldi	r25, 0x10	; 16
    2162:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SimpleLinkWaitEvent>

	return	(len);
    2166:	93 01       	movw	r18, r6
}
    2168:	c9 01       	movw	r24, r18
    216a:	6a 96       	adiw	r28, 0x1a	; 26
    216c:	0f b6       	in	r0, 0x3f	; 63
    216e:	f8 94       	cli
    2170:	de bf       	out	0x3e, r29	; 62
    2172:	0f be       	out	0x3f, r0	; 63
    2174:	cd bf       	out	0x3d, r28	; 61
    2176:	cf 91       	pop	r28
    2178:	df 91       	pop	r29
    217a:	1f 91       	pop	r17
    217c:	0f 91       	pop	r16
    217e:	ff 90       	pop	r15
    2180:	ef 90       	pop	r14
    2182:	df 90       	pop	r13
    2184:	cf 90       	pop	r12
    2186:	bf 90       	pop	r11
    2188:	af 90       	pop	r10
    218a:	9f 90       	pop	r9
    218c:	8f 90       	pop	r8
    218e:	7f 90       	pop	r7
    2190:	6f 90       	pop	r6
    2192:	5f 90       	pop	r5
    2194:	4f 90       	pop	r4
    2196:	3f 90       	pop	r3
    2198:	2f 90       	pop	r2
    219a:	08 95       	ret

0000219c <send>:
//!
//!  @sa             sendto
//
//*****************************************************************************

INT16 send(INT32 sd, const void *buf, INT32 len, INT32 flags)
    219c:	8f 92       	push	r8
    219e:	9f 92       	push	r9
    21a0:	af 92       	push	r10
    21a2:	bf 92       	push	r11
    21a4:	cf 92       	push	r12
    21a6:	df 92       	push	r13
    21a8:	ef 92       	push	r14
    21aa:	ff 92       	push	r15
    21ac:	0f 93       	push	r16
    21ae:	1f 93       	push	r17
{
	return(simple_link_send(sd, buf, len, flags, NULL, 0, HCI_CMND_SEND));
    21b0:	ed b7       	in	r30, 0x3d	; 61
    21b2:	fe b7       	in	r31, 0x3e	; 62
    21b4:	38 97       	sbiw	r30, 0x08	; 8
    21b6:	0f b6       	in	r0, 0x3f	; 63
    21b8:	f8 94       	cli
    21ba:	fe bf       	out	0x3e, r31	; 62
    21bc:	0f be       	out	0x3f, r0	; 63
    21be:	ed bf       	out	0x3d, r30	; 61
    21c0:	11 82       	std	Z+1, r1	; 0x01
    21c2:	12 82       	std	Z+2, r1	; 0x02
    21c4:	13 82       	std	Z+3, r1	; 0x03
    21c6:	14 82       	std	Z+4, r1	; 0x04
    21c8:	b1 e8       	ldi	r27, 0x81	; 129
    21ca:	8b 2e       	mov	r8, r27
    21cc:	91 2c       	mov	r9, r1
    21ce:	a1 2c       	mov	r10, r1
    21d0:	b1 2c       	mov	r11, r1
    21d2:	85 82       	std	Z+5, r8	; 0x05
    21d4:	96 82       	std	Z+6, r9	; 0x06
    21d6:	a7 82       	std	Z+7, r10	; 0x07
    21d8:	b0 86       	std	Z+8, r11	; 0x08
    21da:	aa 24       	eor	r10, r10
    21dc:	bb 24       	eor	r11, r11
    21de:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll>
    21e2:	2d b7       	in	r18, 0x3d	; 61
    21e4:	3e b7       	in	r19, 0x3e	; 62
    21e6:	28 5f       	subi	r18, 0xF8	; 248
    21e8:	3f 4f       	sbci	r19, 0xFF	; 255
    21ea:	0f b6       	in	r0, 0x3f	; 63
    21ec:	f8 94       	cli
    21ee:	3e bf       	out	0x3e, r19	; 62
    21f0:	0f be       	out	0x3f, r0	; 63
    21f2:	2d bf       	out	0x3d, r18	; 61
}
    21f4:	1f 91       	pop	r17
    21f6:	0f 91       	pop	r16
    21f8:	ff 90       	pop	r15
    21fa:	ef 90       	pop	r14
    21fc:	df 90       	pop	r13
    21fe:	cf 90       	pop	r12
    2200:	bf 90       	pop	r11
    2202:	af 90       	pop	r10
    2204:	9f 90       	pop	r9
    2206:	8f 90       	pop	r8
    2208:	08 95       	ret

0000220a <wlan_init>:
	tDriverPatches sDriverPatches,
	tBootLoaderPatches sBootLoaderPatches,
	tWlanReadInteruptPin  sReadWlanInterruptPin,
	tWlanInterruptEnable  sWlanInterruptEnable,
	tWlanInterruptDisable sWlanInterruptDisable,
	tWriteWlanPin         sWriteWlanPin)
    220a:	af 92       	push	r10
    220c:	bf 92       	push	r11
    220e:	cf 92       	push	r12
    2210:	df 92       	push	r13
    2212:	ef 92       	push	r14
    2214:	ff 92       	push	r15
    2216:	0f 93       	push	r16
    2218:	1f 93       	push	r17
{

	tSLInformation.sFWPatches = sFWPatches;
    221a:	70 93 79 04 	sts	0x0479, r23
    221e:	60 93 78 04 	sts	0x0478, r22
	tSLInformation.sDriverPatches = sDriverPatches;
    2222:	50 93 7b 04 	sts	0x047B, r21
    2226:	40 93 7a 04 	sts	0x047A, r20
	tSLInformation.sBootLoaderPatches = sBootLoaderPatches;
    222a:	30 93 7d 04 	sts	0x047D, r19
    222e:	20 93 7c 04 	sts	0x047C, r18

	// init io callback
	tSLInformation.ReadWlanInterruptPin = sReadWlanInterruptPin;
    2232:	10 93 81 04 	sts	0x0481, r17
    2236:	00 93 80 04 	sts	0x0480, r16
	tSLInformation.WlanInterruptEnable  = sWlanInterruptEnable;
    223a:	f0 92 83 04 	sts	0x0483, r15
    223e:	e0 92 82 04 	sts	0x0482, r14
	tSLInformation.WlanInterruptDisable = sWlanInterruptDisable;
    2242:	d0 92 85 04 	sts	0x0485, r13
    2246:	c0 92 84 04 	sts	0x0484, r12
	tSLInformation.WriteWlanPin = sWriteWlanPin;
    224a:	b0 92 87 04 	sts	0x0487, r11
    224e:	a0 92 86 04 	sts	0x0486, r10

	//init asynchronous events callback
	tSLInformation.sWlanCB= sWlanCB;
    2252:	90 93 7f 04 	sts	0x047F, r25
    2256:	80 93 7e 04 	sts	0x047E, r24

	// By default TX Complete events are routed to host too
	tSLInformation.InformHostOnTxComplete = 1;
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	80 93 9c 04 	sts	0x049C, r24
}
    2260:	1f 91       	pop	r17
    2262:	0f 91       	pop	r16
    2264:	ff 90       	pop	r15
    2266:	ef 90       	pop	r14
    2268:	df 90       	pop	r13
    226a:	cf 90       	pop	r12
    226c:	bf 90       	pop	r11
    226e:	af 90       	pop	r10
    2270:	08 95       	ret

00002272 <wlan_set_event_mask>:
//!  @brief    Mask event according to bit mask. In case that event is 
//!            masked (1), the device will not send the masked event to host. 
//
//*****************************************************************************

INT32 wlan_set_event_mask(UINT32 ulMask)
    2272:	0f 93       	push	r16
    2274:	1f 93       	push	r17
    2276:	df 93       	push	r29
    2278:	cf 93       	push	r28
    227a:	00 d0       	rcall	.+0      	; 0x227c <wlan_set_event_mask+0xa>
    227c:	00 d0       	rcall	.+0      	; 0x227e <wlan_set_event_mask+0xc>
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
    2282:	ab 01       	movw	r20, r22
    2284:	bc 01       	movw	r22, r24
	INT32 ret;
	UINT8 *ptr;
	UINT8 *args;


	if ((ulMask & HCI_EVNT_WLAN_TX_COMPLETE) == HCI_EVNT_WLAN_TX_COMPLETE)
    2286:	db 01       	movw	r26, r22
    2288:	ca 01       	movw	r24, r20
    228a:	88 70       	andi	r24, 0x08	; 8
    228c:	90 78       	andi	r25, 0x80	; 128
    228e:	a0 70       	andi	r26, 0x00	; 0
    2290:	b0 70       	andi	r27, 0x00	; 0
    2292:	88 50       	subi	r24, 0x08	; 8
    2294:	90 48       	sbci	r25, 0x80	; 128
    2296:	a0 40       	sbci	r26, 0x00	; 0
    2298:	b0 40       	sbci	r27, 0x00	; 0
    229a:	a9 f4       	brne	.+42     	; 0x22c6 <wlan_set_event_mask+0x54>
	{
		tSLInformation.InformHostOnTxComplete = 0;
    229c:	10 92 9c 04 	sts	0x049C, r1

		// Since an event is a virtual event - i.e. it is not coming from CC3000
		// there is no need to send anything to the device if it was an only event
		if (ulMask == HCI_EVNT_WLAN_TX_COMPLETE)
    22a0:	48 30       	cpi	r20, 0x08	; 8
    22a2:	80 e8       	ldi	r24, 0x80	; 128
    22a4:	58 07       	cpc	r21, r24
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	68 07       	cpc	r22, r24
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	78 07       	cpc	r23, r24
    22ae:	29 f4       	brne	.+10     	; 0x22ba <wlan_set_event_mask+0x48>
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	40 e0       	ldi	r20, 0x00	; 0
    22b6:	50 e0       	ldi	r21, 0x00	; 0
    22b8:	2a c0       	rjmp	.+84     	; 0x230e <wlan_set_event_mask+0x9c>
		{
			return 0;
		}

		ulMask &= ~HCI_EVNT_WLAN_TX_COMPLETE;
    22ba:	47 7f       	andi	r20, 0xF7	; 247
    22bc:	5f 77       	andi	r21, 0x7F	; 127
    22be:	60 70       	andi	r22, 0x00	; 0
    22c0:	70 70       	andi	r23, 0x00	; 0
		ulMask |= HCI_EVNT_WLAN_UNSOL_BASE;
    22c2:	50 68       	ori	r21, 0x80	; 128
    22c4:	03 c0       	rjmp	.+6      	; 0x22cc <wlan_set_event_mask+0x5a>
	}
	else
	{
		tSLInformation.InformHostOnTxComplete = 1;
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	80 93 9c 04 	sts	0x049C, r24
	}

	ret = EFAIL;
    22cc:	8f ef       	ldi	r24, 0xFF	; 255
    22ce:	9f ef       	ldi	r25, 0xFF	; 255
    22d0:	af ef       	ldi	r26, 0xFF	; 255
    22d2:	bf ef       	ldi	r27, 0xFF	; 255
    22d4:	89 83       	std	Y+1, r24	; 0x01
    22d6:	9a 83       	std	Y+2, r25	; 0x02
    22d8:	ab 83       	std	Y+3, r26	; 0x03
    22da:	bc 83       	std	Y+4, r27	; 0x04
	ptr = tSLInformation.pucTxCommandBuffer;
    22dc:	00 91 76 04 	lds	r16, 0x0476
    22e0:	10 91 77 04 	lds	r17, 0x0477
	args = (UINT8 *)(ptr + HEADERS_SIZE_CMD);

	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, ulMask);
    22e4:	c8 01       	movw	r24, r16
    22e6:	09 96       	adiw	r24, 0x09	; 9
    22e8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_EVENT_MASK,
		ptr, WLAN_SET_MASK_PARAMS_LEN);
    22ec:	88 e0       	ldi	r24, 0x08	; 8
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	b8 01       	movw	r22, r16
    22f2:	44 e0       	ldi	r20, 0x04	; 4
    22f4:	0e 94 a5 08 	call	0x114a	; 0x114a <hci_command_send>

	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_CMND_EVENT_MASK, &ret);
    22f8:	88 e0       	ldi	r24, 0x08	; 8
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	be 01       	movw	r22, r28
    22fe:	6f 5f       	subi	r22, 0xFF	; 255
    2300:	7f 4f       	sbci	r23, 0xFF	; 255
    2302:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SimpleLinkWaitEvent>

	return(ret);
    2306:	29 81       	ldd	r18, Y+1	; 0x01
    2308:	3a 81       	ldd	r19, Y+2	; 0x02
    230a:	4b 81       	ldd	r20, Y+3	; 0x03
    230c:	5c 81       	ldd	r21, Y+4	; 0x04
}
    230e:	b9 01       	movw	r22, r18
    2310:	ca 01       	movw	r24, r20
    2312:	0f 90       	pop	r0
    2314:	0f 90       	pop	r0
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0
    231a:	cf 91       	pop	r28
    231c:	df 91       	pop	r29
    231e:	1f 91       	pop	r17
    2320:	0f 91       	pop	r16
    2322:	08 95       	ret

00002324 <wlan_ioctl_set_scan_params>:
	UINT32 uiMaxDwellTime,
	UINT32 uiNumOfProbeRequests,
	UINT32 uiChannelMask,INT32 iRSSIThreshold,
	UINT32 uiSNRThreshold,
	UINT32 uiDefaultTxPower,
	UINT32 *aiIntervalList)
    2324:	2f 92       	push	r2
    2326:	3f 92       	push	r3
    2328:	4f 92       	push	r4
    232a:	5f 92       	push	r5
    232c:	6f 92       	push	r6
    232e:	7f 92       	push	r7
    2330:	8f 92       	push	r8
    2332:	9f 92       	push	r9
    2334:	af 92       	push	r10
    2336:	bf 92       	push	r11
    2338:	cf 92       	push	r12
    233a:	df 92       	push	r13
    233c:	ef 92       	push	r14
    233e:	ff 92       	push	r15
    2340:	0f 93       	push	r16
    2342:	1f 93       	push	r17
    2344:	df 93       	push	r29
    2346:	cf 93       	push	r28
    2348:	cd b7       	in	r28, 0x3d	; 61
    234a:	de b7       	in	r29, 0x3e	; 62
    234c:	28 97       	sbiw	r28, 0x08	; 8
    234e:	0f b6       	in	r0, 0x3f	; 63
    2350:	f8 94       	cli
    2352:	de bf       	out	0x3e, r29	; 62
    2354:	0f be       	out	0x3f, r0	; 63
    2356:	cd bf       	out	0x3d, r28	; 61
    2358:	3b 01       	movw	r6, r22
    235a:	4c 01       	movw	r8, r24
    235c:	19 01       	movw	r2, r18
    235e:	2a 01       	movw	r4, r20
    2360:	8d a5       	ldd	r24, Y+45	; 0x2d
    2362:	8f 83       	std	Y+7, r24	; 0x07
    2364:	9e a5       	ldd	r25, Y+46	; 0x2e
    2366:	98 87       	std	Y+8, r25	; 0x08
{
	UINT32  uiRes;
	UINT8 *ptr;
	UINT8 *args;

	ptr = tSLInformation.pucTxCommandBuffer;
    2368:	80 91 76 04 	lds	r24, 0x0476
    236c:	90 91 77 04 	lds	r25, 0x0477
    2370:	9e 83       	std	Y+6, r25	; 0x06
    2372:	8d 83       	std	Y+5, r24	; 0x05
	args = (ptr + HEADERS_SIZE_CMD);

	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, 36);
    2374:	09 96       	adiw	r24, 0x09	; 9
    2376:	44 e2       	ldi	r20, 0x24	; 36
    2378:	50 e0       	ldi	r21, 0x00	; 0
    237a:	60 e0       	ldi	r22, 0x00	; 0
    237c:	70 e0       	ldi	r23, 0x00	; 0
    237e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, uiEnable);
    2382:	b4 01       	movw	r22, r8
    2384:	a3 01       	movw	r20, r6
    2386:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, uiMinDwellTime);
    238a:	b2 01       	movw	r22, r4
    238c:	a1 01       	movw	r20, r2
    238e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, uiMaxDwellTime);
    2392:	b8 01       	movw	r22, r16
    2394:	a7 01       	movw	r20, r14
    2396:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, uiNumOfProbeRequests);
    239a:	b6 01       	movw	r22, r12
    239c:	a5 01       	movw	r20, r10
    239e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, uiChannelMask);
    23a2:	4d 8d       	ldd	r20, Y+29	; 0x1d
    23a4:	5e 8d       	ldd	r21, Y+30	; 0x1e
    23a6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    23a8:	78 a1       	ldd	r23, Y+32	; 0x20
    23aa:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, iRSSIThreshold);
    23ae:	49 a1       	ldd	r20, Y+33	; 0x21
    23b0:	5a a1       	ldd	r21, Y+34	; 0x22
    23b2:	6b a1       	ldd	r22, Y+35	; 0x23
    23b4:	7c a1       	ldd	r23, Y+36	; 0x24
    23b6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, uiSNRThreshold);
    23ba:	4d a1       	ldd	r20, Y+37	; 0x25
    23bc:	5e a1       	ldd	r21, Y+38	; 0x26
    23be:	6f a1       	ldd	r22, Y+39	; 0x27
    23c0:	78 a5       	ldd	r23, Y+40	; 0x28
    23c2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, uiDefaultTxPower);
    23c6:	49 a5       	ldd	r20, Y+41	; 0x29
    23c8:	5a a5       	ldd	r21, Y+42	; 0x2a
    23ca:	6b a5       	ldd	r22, Y+43	; 0x2b
    23cc:	7c a5       	ldd	r23, Y+44	; 0x2c
    23ce:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
    23d2:	dc 01       	movw	r26, r24
    23d4:	8f 81       	ldd	r24, Y+7	; 0x07
    23d6:	98 85       	ldd	r25, Y+8	; 0x08
    23d8:	fc 01       	movw	r30, r24
	ARRAY_TO_STREAM(args, aiIntervalList, sizeof(UINT32) * 
    23da:	9f 01       	movw	r18, r30
    23dc:	20 5c       	subi	r18, 0xC0	; 192
    23de:	3f 4f       	sbci	r19, 0xFF	; 255
    23e0:	02 c0       	rjmp	.+4      	; 0x23e6 <wlan_ioctl_set_scan_params+0xc2>
    23e2:	81 91       	ld	r24, Z+
    23e4:	8d 93       	st	X+, r24
    23e6:	e2 17       	cp	r30, r18
    23e8:	f3 07       	cpc	r31, r19
    23ea:	d9 f7       	brne	.-10     	; 0x23e2 <wlan_ioctl_set_scan_params+0xbe>
		SL_SET_SCAN_PARAMS_INTERVAL_LIST_SIZE);

	// Initiate a HCI command
	hci_command_send(HCI_CMND_WLAN_IOCTL_SET_SCANPARAM,
		ptr, WLAN_SET_SCAN_PARAMS_LEN);
    23ec:	83 e0       	ldi	r24, 0x03	; 3
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	6d 81       	ldd	r22, Y+5	; 0x05
    23f2:	7e 81       	ldd	r23, Y+6	; 0x06
    23f4:	44 e6       	ldi	r20, 0x64	; 100
    23f6:	0e 94 a5 08 	call	0x114a	; 0x114a <hci_command_send>

	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_CMND_WLAN_IOCTL_SET_SCANPARAM, &uiRes);
    23fa:	83 e0       	ldi	r24, 0x03	; 3
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	be 01       	movw	r22, r28
    2400:	6f 5f       	subi	r22, 0xFF	; 255
    2402:	7f 4f       	sbci	r23, 0xFF	; 255
    2404:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SimpleLinkWaitEvent>
    2408:	69 81       	ldd	r22, Y+1	; 0x01
    240a:	7a 81       	ldd	r23, Y+2	; 0x02

	return(uiRes);
}
    240c:	8b 81       	ldd	r24, Y+3	; 0x03
    240e:	9c 81       	ldd	r25, Y+4	; 0x04
    2410:	28 96       	adiw	r28, 0x08	; 8
    2412:	0f b6       	in	r0, 0x3f	; 63
    2414:	f8 94       	cli
    2416:	de bf       	out	0x3e, r29	; 62
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	cd bf       	out	0x3d, r28	; 61
    241c:	cf 91       	pop	r28
    241e:	df 91       	pop	r29
    2420:	1f 91       	pop	r17
    2422:	0f 91       	pop	r16
    2424:	ff 90       	pop	r15
    2426:	ef 90       	pop	r14
    2428:	df 90       	pop	r13
    242a:	cf 90       	pop	r12
    242c:	bf 90       	pop	r11
    242e:	af 90       	pop	r10
    2430:	9f 90       	pop	r9
    2432:	8f 90       	pop	r8
    2434:	7f 90       	pop	r7
    2436:	6f 90       	pop	r6
    2438:	5f 90       	pop	r5
    243a:	4f 90       	pop	r4
    243c:	3f 90       	pop	r3
    243e:	2f 90       	pop	r2
    2440:	08 95       	ret

00002442 <wlan_ioctl_del_profile>:
//!
//!  @sa        wlan_add_profile 
//
//*****************************************************************************

INT32 wlan_ioctl_del_profile(UINT32 ulIndex)
    2442:	0f 93       	push	r16
    2444:	1f 93       	push	r17
    2446:	df 93       	push	r29
    2448:	cf 93       	push	r28
    244a:	00 d0       	rcall	.+0      	; 0x244c <wlan_ioctl_del_profile+0xa>
    244c:	00 d0       	rcall	.+0      	; 0x244e <wlan_ioctl_del_profile+0xc>
    244e:	cd b7       	in	r28, 0x3d	; 61
    2450:	de b7       	in	r29, 0x3e	; 62
    2452:	ab 01       	movw	r20, r22
    2454:	bc 01       	movw	r22, r24
{
	INT32 ret;
	UINT8 *ptr;
	UINT8 *args;

	ptr = tSLInformation.pucTxCommandBuffer;
    2456:	00 91 76 04 	lds	r16, 0x0476
    245a:	10 91 77 04 	lds	r17, 0x0477
	args = (UINT8 *)(ptr + HEADERS_SIZE_CMD);

	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, ulIndex);
    245e:	c8 01       	movw	r24, r16
    2460:	09 96       	adiw	r24, 0x09	; 9
    2462:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	ret = EFAIL;
    2466:	8f ef       	ldi	r24, 0xFF	; 255
    2468:	9f ef       	ldi	r25, 0xFF	; 255
    246a:	af ef       	ldi	r26, 0xFF	; 255
    246c:	bf ef       	ldi	r27, 0xFF	; 255
    246e:	89 83       	std	Y+1, r24	; 0x01
    2470:	9a 83       	std	Y+2, r25	; 0x02
    2472:	ab 83       	std	Y+3, r26	; 0x03
    2474:	bc 83       	std	Y+4, r27	; 0x04

	// Initiate a HCI command
	hci_command_send(HCI_CMND_WLAN_IOCTL_DEL_PROFILE,
		ptr, WLAN_DEL_PROFILE_PARAMS_LEN);
    2476:	86 e0       	ldi	r24, 0x06	; 6
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	b8 01       	movw	r22, r16
    247c:	44 e0       	ldi	r20, 0x04	; 4
    247e:	0e 94 a5 08 	call	0x114a	; 0x114a <hci_command_send>

	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_CMND_WLAN_IOCTL_DEL_PROFILE, &ret);
    2482:	86 e0       	ldi	r24, 0x06	; 6
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	be 01       	movw	r22, r28
    2488:	6f 5f       	subi	r22, 0xFF	; 255
    248a:	7f 4f       	sbci	r23, 0xFF	; 255
    248c:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SimpleLinkWaitEvent>
    2490:	69 81       	ldd	r22, Y+1	; 0x01
    2492:	7a 81       	ldd	r23, Y+2	; 0x02

	return(ret);
}
    2494:	8b 81       	ldd	r24, Y+3	; 0x03
    2496:	9c 81       	ldd	r25, Y+4	; 0x04
    2498:	0f 90       	pop	r0
    249a:	0f 90       	pop	r0
    249c:	0f 90       	pop	r0
    249e:	0f 90       	pop	r0
    24a0:	cf 91       	pop	r28
    24a2:	df 91       	pop	r29
    24a4:	1f 91       	pop	r17
    24a6:	0f 91       	pop	r16
    24a8:	08 95       	ret

000024aa <wlan_ioctl_set_connection_policy>:
//
//*****************************************************************************

INT32 wlan_ioctl_set_connection_policy(UINT32 should_connect_to_open_ap, 
	UINT32 ulShouldUseFastConnect,
	UINT32 ulUseProfiles)
    24aa:	4f 92       	push	r4
    24ac:	5f 92       	push	r5
    24ae:	6f 92       	push	r6
    24b0:	7f 92       	push	r7
    24b2:	8f 92       	push	r8
    24b4:	9f 92       	push	r9
    24b6:	af 92       	push	r10
    24b8:	bf 92       	push	r11
    24ba:	cf 92       	push	r12
    24bc:	df 92       	push	r13
    24be:	ef 92       	push	r14
    24c0:	ff 92       	push	r15
    24c2:	0f 93       	push	r16
    24c4:	1f 93       	push	r17
    24c6:	df 93       	push	r29
    24c8:	cf 93       	push	r28
    24ca:	00 d0       	rcall	.+0      	; 0x24cc <wlan_ioctl_set_connection_policy+0x22>
    24cc:	00 d0       	rcall	.+0      	; 0x24ce <wlan_ioctl_set_connection_policy+0x24>
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
    24d2:	5b 01       	movw	r10, r22
    24d4:	6c 01       	movw	r12, r24
    24d6:	39 01       	movw	r6, r18
    24d8:	4a 01       	movw	r8, r20
{
	INT32 ret;
	UINT8 *ptr;
	UINT8 *args;

	ret = EFAIL;
    24da:	8f ef       	ldi	r24, 0xFF	; 255
    24dc:	9f ef       	ldi	r25, 0xFF	; 255
    24de:	af ef       	ldi	r26, 0xFF	; 255
    24e0:	bf ef       	ldi	r27, 0xFF	; 255
    24e2:	89 83       	std	Y+1, r24	; 0x01
    24e4:	9a 83       	std	Y+2, r25	; 0x02
    24e6:	ab 83       	std	Y+3, r26	; 0x03
    24e8:	bc 83       	std	Y+4, r27	; 0x04
	ptr = tSLInformation.pucTxCommandBuffer;
    24ea:	40 90 76 04 	lds	r4, 0x0476
    24ee:	50 90 77 04 	lds	r5, 0x0477
	args = (UINT8 *)(ptr + HEADERS_SIZE_CMD);

	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, should_connect_to_open_ap);
    24f2:	c2 01       	movw	r24, r4
    24f4:	09 96       	adiw	r24, 0x09	; 9
    24f6:	b6 01       	movw	r22, r12
    24f8:	a5 01       	movw	r20, r10
    24fa:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, ulShouldUseFastConnect);
    24fe:	b4 01       	movw	r22, r8
    2500:	a3 01       	movw	r20, r6
    2502:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, ulUseProfiles);
    2506:	b8 01       	movw	r22, r16
    2508:	a7 01       	movw	r20, r14
    250a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_WLAN_IOCTL_SET_CONNECTION_POLICY,
		ptr, WLAN_SET_CONNECTION_POLICY_PARAMS_LEN);
    250e:	84 e0       	ldi	r24, 0x04	; 4
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	b2 01       	movw	r22, r4
    2514:	4c e0       	ldi	r20, 0x0C	; 12
    2516:	0e 94 a5 08 	call	0x114a	; 0x114a <hci_command_send>

	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_CMND_WLAN_IOCTL_SET_CONNECTION_POLICY, &ret);
    251a:	84 e0       	ldi	r24, 0x04	; 4
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	be 01       	movw	r22, r28
    2520:	6f 5f       	subi	r22, 0xFF	; 255
    2522:	7f 4f       	sbci	r23, 0xFF	; 255
    2524:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SimpleLinkWaitEvent>
    2528:	69 81       	ldd	r22, Y+1	; 0x01
    252a:	7a 81       	ldd	r23, Y+2	; 0x02

	return(ret);
}
    252c:	8b 81       	ldd	r24, Y+3	; 0x03
    252e:	9c 81       	ldd	r25, Y+4	; 0x04
    2530:	0f 90       	pop	r0
    2532:	0f 90       	pop	r0
    2534:	0f 90       	pop	r0
    2536:	0f 90       	pop	r0
    2538:	cf 91       	pop	r28
    253a:	df 91       	pop	r29
    253c:	1f 91       	pop	r17
    253e:	0f 91       	pop	r16
    2540:	ff 90       	pop	r15
    2542:	ef 90       	pop	r14
    2544:	df 90       	pop	r13
    2546:	cf 90       	pop	r12
    2548:	bf 90       	pop	r11
    254a:	af 90       	pop	r10
    254c:	9f 90       	pop	r9
    254e:	8f 90       	pop	r8
    2550:	7f 90       	pop	r7
    2552:	6f 90       	pop	r6
    2554:	5f 90       	pop	r5
    2556:	4f 90       	pop	r4
    2558:	08 95       	ret

0000255a <wlan_connect>:
// Adafruit CC3k Host Driver Difference
// Make ssid a const char pointer because it isn't modified and the Adafruit
// driver code needs it to be const to interface with Arduino's client library.
// Noted 12-12-2014 by tdicola
INT32 wlan_connect(UINT32 ulSecType, const CHAR *ssid, INT32 ssid_len,
	UINT8 *bssid, UINT8 *key, INT32 key_len)
    255a:	2f 92       	push	r2
    255c:	3f 92       	push	r3
    255e:	4f 92       	push	r4
    2560:	5f 92       	push	r5
    2562:	6f 92       	push	r6
    2564:	7f 92       	push	r7
    2566:	8f 92       	push	r8
    2568:	9f 92       	push	r9
    256a:	af 92       	push	r10
    256c:	bf 92       	push	r11
    256e:	cf 92       	push	r12
    2570:	df 92       	push	r13
    2572:	ef 92       	push	r14
    2574:	ff 92       	push	r15
    2576:	0f 93       	push	r16
    2578:	1f 93       	push	r17
    257a:	df 93       	push	r29
    257c:	cf 93       	push	r28
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
    2582:	60 97       	sbiw	r28, 0x10	; 16
    2584:	0f b6       	in	r0, 0x3f	; 63
    2586:	f8 94       	cli
    2588:	de bf       	out	0x3e, r29	; 62
    258a:	0f be       	out	0x3f, r0	; 63
    258c:	cd bf       	out	0x3d, r28	; 61
    258e:	2b 01       	movw	r4, r22
    2590:	3c 01       	movw	r6, r24
    2592:	5c 87       	std	Y+12, r21	; 0x0c
    2594:	4b 87       	std	Y+11, r20	; 0x0b
    2596:	0d 87       	std	Y+13, r16	; 0x0d
    2598:	1e 87       	std	Y+14, r17	; 0x0e
    259a:	2f 87       	std	Y+15, r18	; 0x0f
    259c:	38 8b       	std	Y+16, r19	; 0x10
    259e:	16 01       	movw	r2, r12
{
	INT32 ret;
	UINT8 *ptr;
	UINT8 *args;
	UINT8 bssid_zero[] = {0, 0, 0, 0, 0, 0};
    25a0:	8e 01       	movw	r16, r28
    25a2:	0b 5f       	subi	r16, 0xFB	; 251
    25a4:	1f 4f       	sbci	r17, 0xFF	; 255
    25a6:	86 e0       	ldi	r24, 0x06	; 6
    25a8:	d8 01       	movw	r26, r16
    25aa:	1d 92       	st	X+, r1
    25ac:	8a 95       	dec	r24
    25ae:	e9 f7       	brne	.-6      	; 0x25aa <wlan_connect+0x50>

	ret  	= EFAIL;
    25b0:	8f ef       	ldi	r24, 0xFF	; 255
    25b2:	9f ef       	ldi	r25, 0xFF	; 255
    25b4:	af ef       	ldi	r26, 0xFF	; 255
    25b6:	bf ef       	ldi	r27, 0xFF	; 255
    25b8:	89 83       	std	Y+1, r24	; 0x01
    25ba:	9a 83       	std	Y+2, r25	; 0x02
    25bc:	ab 83       	std	Y+3, r26	; 0x03
    25be:	bc 83       	std	Y+4, r27	; 0x04
	ptr  	= tSLInformation.pucTxCommandBuffer;
    25c0:	c0 90 76 04 	lds	r12, 0x0476
    25c4:	d0 90 77 04 	lds	r13, 0x0477
	args 	= (ptr + HEADERS_SIZE_CMD);

	// Fill in command buffer
	args = UINT32_TO_STREAM(args, 0x0000001c);
    25c8:	c6 01       	movw	r24, r12
    25ca:	09 96       	adiw	r24, 0x09	; 9
    25cc:	4c e1       	ldi	r20, 0x1C	; 28
    25ce:	50 e0       	ldi	r21, 0x00	; 0
    25d0:	60 e0       	ldi	r22, 0x00	; 0
    25d2:	70 e0       	ldi	r23, 0x00	; 0
    25d4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, ssid_len);
    25d8:	4d 85       	ldd	r20, Y+13	; 0x0d
    25da:	5e 85       	ldd	r21, Y+14	; 0x0e
    25dc:	6f 85       	ldd	r22, Y+15	; 0x0f
    25de:	78 89       	ldd	r23, Y+16	; 0x10
    25e0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, ulSecType);
    25e4:	b3 01       	movw	r22, r6
    25e6:	a2 01       	movw	r20, r4
    25e8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, 0x00000010 + ssid_len);
    25ec:	4d 85       	ldd	r20, Y+13	; 0x0d
    25ee:	5e 85       	ldd	r21, Y+14	; 0x0e
    25f0:	6f 85       	ldd	r22, Y+15	; 0x0f
    25f2:	78 89       	ldd	r23, Y+16	; 0x10
    25f4:	40 5f       	subi	r20, 0xF0	; 240
    25f6:	5f 4f       	sbci	r21, 0xFF	; 255
    25f8:	6f 4f       	sbci	r22, 0xFF	; 255
    25fa:	7f 4f       	sbci	r23, 0xFF	; 255
    25fc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, key_len);
    2600:	b5 01       	movw	r22, r10
    2602:	a4 01       	movw	r20, r8
    2604:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UINT32_TO_STREAM_f>
	args = UINT16_TO_STREAM(args, 0);
    2608:	60 e0       	ldi	r22, 0x00	; 0
    260a:	70 e0       	ldi	r23, 0x00	; 0
    260c:	0e 94 6f 01 	call	0x2de	; 0x2de <UINT16_TO_STREAM_f>
    2610:	dc 01       	movw	r26, r24

	// padding shall be zeroed
	if(bssid)
    2612:	e1 14       	cp	r14, r1
    2614:	f1 04       	cpc	r15, r1
    2616:	81 f0       	breq	.+32     	; 0x2638 <wlan_connect+0xde>
    2618:	ac 01       	movw	r20, r24
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	30 e0       	ldi	r19, 0x00	; 0
	{
		ARRAY_TO_STREAM(args, bssid, ETH_ALEN);
    261e:	f7 01       	movw	r30, r14
    2620:	e2 0f       	add	r30, r18
    2622:	f3 1f       	adc	r31, r19
    2624:	80 81       	ld	r24, Z
    2626:	fa 01       	movw	r30, r20
    2628:	81 93       	st	Z+, r24
    262a:	af 01       	movw	r20, r30
    262c:	2f 5f       	subi	r18, 0xFF	; 255
    262e:	3f 4f       	sbci	r19, 0xFF	; 255
    2630:	26 30       	cpi	r18, 0x06	; 6
    2632:	31 05       	cpc	r19, r1
    2634:	a1 f7       	brne	.-24     	; 0x261e <wlan_connect+0xc4>
    2636:	0e c0       	rjmp	.+28     	; 0x2654 <wlan_connect+0xfa>
    2638:	b8 01       	movw	r22, r16
    263a:	9c 01       	movw	r18, r24
	}
	else
	{
		ARRAY_TO_STREAM(args, bssid_zero, ETH_ALEN);
    263c:	ae 01       	movw	r20, r28
    263e:	45 5f       	subi	r20, 0xF5	; 245
    2640:	5f 4f       	sbci	r21, 0xFF	; 255
    2642:	fb 01       	movw	r30, r22
    2644:	81 91       	ld	r24, Z+
    2646:	bf 01       	movw	r22, r30
    2648:	f9 01       	movw	r30, r18
    264a:	81 93       	st	Z+, r24
    264c:	9f 01       	movw	r18, r30
    264e:	64 17       	cp	r22, r20
    2650:	75 07       	cpc	r23, r21
    2652:	b9 f7       	brne	.-18     	; 0x2642 <wlan_connect+0xe8>
    2654:	bd 01       	movw	r22, r26
    2656:	6a 5f       	subi	r22, 0xFA	; 250
    2658:	7f 4f       	sbci	r23, 0xFF	; 255
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	40 e0       	ldi	r20, 0x00	; 0
    2660:	50 e0       	ldi	r21, 0x00	; 0
    2662:	0c c0       	rjmp	.+24     	; 0x267c <wlan_connect+0x122>
	}

	ARRAY_TO_STREAM(args, ssid, ssid_len);
    2664:	eb 85       	ldd	r30, Y+11	; 0x0b
    2666:	fc 85       	ldd	r31, Y+12	; 0x0c
    2668:	e2 0f       	add	r30, r18
    266a:	f3 1f       	adc	r31, r19
    266c:	80 81       	ld	r24, Z
    266e:	db 01       	movw	r26, r22
    2670:	8d 93       	st	X+, r24
    2672:	bd 01       	movw	r22, r26
    2674:	2f 5f       	subi	r18, 0xFF	; 255
    2676:	3f 4f       	sbci	r19, 0xFF	; 255
    2678:	4f 4f       	sbci	r20, 0xFF	; 255
    267a:	5f 4f       	sbci	r21, 0xFF	; 255
    267c:	8d 85       	ldd	r24, Y+13	; 0x0d
    267e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2680:	af 85       	ldd	r26, Y+15	; 0x0f
    2682:	b8 89       	ldd	r27, Y+16	; 0x10
    2684:	28 17       	cp	r18, r24
    2686:	39 07       	cpc	r19, r25
    2688:	4a 07       	cpc	r20, r26
    268a:	5b 07       	cpc	r21, r27
    268c:	5c f3       	brlt	.-42     	; 0x2664 <wlan_connect+0x10a>

	if(key_len && key)
    268e:	81 14       	cp	r8, r1
    2690:	91 04       	cpc	r9, r1
    2692:	a1 04       	cpc	r10, r1
    2694:	b1 04       	cpc	r11, r1
    2696:	c9 f0       	breq	.+50     	; 0x26ca <wlan_connect+0x170>
    2698:	21 14       	cp	r2, r1
    269a:	31 04       	cpc	r3, r1
    269c:	b1 f0       	breq	.+44     	; 0x26ca <wlan_connect+0x170>
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	40 e0       	ldi	r20, 0x00	; 0
    26a4:	50 e0       	ldi	r21, 0x00	; 0
    26a6:	0c c0       	rjmp	.+24     	; 0x26c0 <wlan_connect+0x166>
// Adafruit CC3k Host Driver Difference
// Make ssid a const char pointer because it isn't modified and the Adafruit
// driver code needs it to be const to interface with Arduino's client library.
// Noted 12-12-2014 by tdicola
INT32 wlan_connect(UINT32 ulSecType, const CHAR *ssid, INT32 ssid_len,
	UINT8 *bssid, UINT8 *key, INT32 key_len)
    26a8:	f9 01       	movw	r30, r18

	ARRAY_TO_STREAM(args, ssid, ssid_len);

	if(key_len && key)
	{
		ARRAY_TO_STREAM(args, key, key_len);
    26aa:	db 01       	movw	r26, r22
    26ac:	a2 0f       	add	r26, r18
    26ae:	b3 1f       	adc	r27, r19
    26b0:	e2 0d       	add	r30, r2
    26b2:	f3 1d       	adc	r31, r3
    26b4:	80 81       	ld	r24, Z
    26b6:	8c 93       	st	X, r24
    26b8:	2f 5f       	subi	r18, 0xFF	; 255
    26ba:	3f 4f       	sbci	r19, 0xFF	; 255
    26bc:	4f 4f       	sbci	r20, 0xFF	; 255
    26be:	5f 4f       	sbci	r21, 0xFF	; 255
    26c0:	28 15       	cp	r18, r8
    26c2:	39 05       	cpc	r19, r9
    26c4:	4a 05       	cpc	r20, r10
    26c6:	5b 05       	cpc	r21, r11
    26c8:	7c f3       	brlt	.-34     	; 0x26a8 <wlan_connect+0x14e>
	}

	// Initiate a HCI command
	hci_command_send(HCI_CMND_WLAN_CONNECT, ptr, WLAN_CONNECT_PARAM_LEN + 
		ssid_len + key_len - 1);
    26ca:	4d 85       	ldd	r20, Y+13	; 0x0d
    26cc:	44 5e       	subi	r20, 0xE4	; 228
    26ce:	48 0d       	add	r20, r8
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	b6 01       	movw	r22, r12
    26d6:	0e 94 a5 08 	call	0x114a	; 0x114a <hci_command_send>

	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_CMND_WLAN_CONNECT, &ret);
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	be 01       	movw	r22, r28
    26e0:	6f 5f       	subi	r22, 0xFF	; 255
    26e2:	7f 4f       	sbci	r23, 0xFF	; 255
    26e4:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SimpleLinkWaitEvent>
	errno = ret;
    26e8:	69 81       	ldd	r22, Y+1	; 0x01
    26ea:	7a 81       	ldd	r23, Y+2	; 0x02
    26ec:	8b 81       	ldd	r24, Y+3	; 0x03
    26ee:	9c 81       	ldd	r25, Y+4	; 0x04
    26f0:	9b 01       	movw	r18, r22
    26f2:	20 93 cb 07 	sts	0x07CB, r18
    26f6:	30 93 cc 07 	sts	0x07CC, r19

	return(ret);
}
    26fa:	60 96       	adiw	r28, 0x10	; 16
    26fc:	0f b6       	in	r0, 0x3f	; 63
    26fe:	f8 94       	cli
    2700:	de bf       	out	0x3e, r29	; 62
    2702:	0f be       	out	0x3f, r0	; 63
    2704:	cd bf       	out	0x3d, r28	; 61
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	1f 91       	pop	r17
    270c:	0f 91       	pop	r16
    270e:	ff 90       	pop	r15
    2710:	ef 90       	pop	r14
    2712:	df 90       	pop	r13
    2714:	cf 90       	pop	r12
    2716:	bf 90       	pop	r11
    2718:	af 90       	pop	r10
    271a:	9f 90       	pop	r9
    271c:	8f 90       	pop	r8
    271e:	7f 90       	pop	r7
    2720:	6f 90       	pop	r6
    2722:	5f 90       	pop	r5
    2724:	4f 90       	pop	r4
    2726:	3f 90       	pop	r3
    2728:	2f 90       	pop	r2
    272a:	08 95       	ret

0000272c <wlan_start>:
//!  @sa            wlan_init , wlan_stop
//!
//
//*****************************************************************************

void wlan_start(UINT16 usPatchesAvailableAtHost)
    272c:	ef 92       	push	r14
    272e:	ff 92       	push	r15
    2730:	0f 93       	push	r16
    2732:	1f 93       	push	r17
    2734:	cf 93       	push	r28
    2736:	df 93       	push	r29
    2738:	ec 01       	movw	r28, r24
{

	UINT32 ulSpiIRQState;

	tSLInformation.NumberOfSentPackets = 0;
    273a:	10 92 94 04 	sts	0x0494, r1
    273e:	10 92 95 04 	sts	0x0495, r1
    2742:	10 92 96 04 	sts	0x0496, r1
    2746:	10 92 97 04 	sts	0x0497, r1
	tSLInformation.NumberOfReleasedPackets = 0;
    274a:	10 92 98 04 	sts	0x0498, r1
    274e:	10 92 99 04 	sts	0x0499, r1
    2752:	10 92 9a 04 	sts	0x049A, r1
    2756:	10 92 9b 04 	sts	0x049B, r1
	tSLInformation.usRxEventOpcode = 0;
    275a:	10 92 71 04 	sts	0x0471, r1
    275e:	10 92 70 04 	sts	0x0470, r1
	tSLInformation.usNumberOfFreeBuffers = 0;
    2762:	10 92 8d 04 	sts	0x048D, r1
    2766:	10 92 8c 04 	sts	0x048C, r1
	tSLInformation.usSlBufferLength = 0;
    276a:	10 92 8f 04 	sts	0x048F, r1
    276e:	10 92 8e 04 	sts	0x048E, r1
	tSLInformation.usBufferSize = 0;
    2772:	10 92 91 04 	sts	0x0491, r1
    2776:	10 92 90 04 	sts	0x0490, r1
	tSLInformation.usRxDataPending = 0;
    277a:	10 92 93 04 	sts	0x0493, r1
    277e:	10 92 92 04 	sts	0x0492, r1
	tSLInformation.slTransmitDataError = 0;
    2782:	10 92 88 04 	sts	0x0488, r1
    2786:	10 92 89 04 	sts	0x0489, r1
    278a:	10 92 8a 04 	sts	0x048A, r1
    278e:	10 92 8b 04 	sts	0x048B, r1
	tSLInformation.usEventOrDataReceived = 0;
    2792:	10 92 73 04 	sts	0x0473, r1
    2796:	10 92 72 04 	sts	0x0472, r1
	tSLInformation.pucReceivedData = 0;
    279a:	10 92 75 04 	sts	0x0475, r1
    279e:	10 92 74 04 	sts	0x0474, r1

	// Allocate the memory for the RX/TX data transactions
	tSLInformation.pucTxCommandBuffer = (UINT8 *)wlan_tx_buffer;
    27a2:	8b e7       	ldi	r24, 0x7B	; 123
    27a4:	95 e0       	ldi	r25, 0x05	; 5
    27a6:	90 93 77 04 	sts	0x0477, r25
    27aa:	80 93 76 04 	sts	0x0476, r24

	// init spi
	SpiOpen(SpiReceiveHandler);
    27ae:	88 e3       	ldi	r24, 0x38	; 56
    27b0:	94 e1       	ldi	r25, 0x14	; 20
    27b2:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <_Z7SpiOpenPFvPvE>

	// Check the IRQ line
	ulSpiIRQState = tSLInformation.ReadWlanInterruptPin();
    27b6:	e0 91 80 04 	lds	r30, 0x0480
    27ba:	f0 91 81 04 	lds	r31, 0x0481
    27be:	09 95       	icall
    27c0:	7b 01       	movw	r14, r22
    27c2:	8c 01       	movw	r16, r24

	// Chip enable: toggle WLAN EN line
	tSLInformation.WriteWlanPin( WLAN_ENABLE );
    27c4:	e0 91 86 04 	lds	r30, 0x0486
    27c8:	f0 91 87 04 	lds	r31, 0x0487
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	09 95       	icall

	if (ulSpiIRQState)
    27d0:	e1 14       	cp	r14, r1
    27d2:	f1 04       	cpc	r15, r1
    27d4:	01 05       	cpc	r16, r1
    27d6:	11 05       	cpc	r17, r1
    27d8:	59 f0       	breq	.+22     	; 0x27f0 <wlan_start+0xc4>
	{
		// wait till the IRQ line goes low
		while(tSLInformation.ReadWlanInterruptPin() != 0)
    27da:	e0 91 80 04 	lds	r30, 0x0480
    27de:	f0 91 81 04 	lds	r31, 0x0481
    27e2:	09 95       	icall
    27e4:	61 15       	cp	r22, r1
    27e6:	71 05       	cpc	r23, r1
    27e8:	81 05       	cpc	r24, r1
    27ea:	91 05       	cpc	r25, r1
    27ec:	b1 f7       	brne	.-20     	; 0x27da <wlan_start+0xae>
    27ee:	14 c0       	rjmp	.+40     	; 0x2818 <wlan_start+0xec>
		}
	}
	else
	{
		// wait till the IRQ line goes high and than low
		while(tSLInformation.ReadWlanInterruptPin() == 0)
    27f0:	e0 91 80 04 	lds	r30, 0x0480
    27f4:	f0 91 81 04 	lds	r31, 0x0481
    27f8:	09 95       	icall
    27fa:	61 15       	cp	r22, r1
    27fc:	71 05       	cpc	r23, r1
    27fe:	81 05       	cpc	r24, r1
    2800:	91 05       	cpc	r25, r1
    2802:	b1 f3       	breq	.-20     	; 0x27f0 <wlan_start+0xc4>
		{
		}

		while(tSLInformation.ReadWlanInterruptPin() != 0)
    2804:	e0 91 80 04 	lds	r30, 0x0480
    2808:	f0 91 81 04 	lds	r31, 0x0481
    280c:	09 95       	icall
    280e:	61 15       	cp	r22, r1
    2810:	71 05       	cpc	r23, r1
    2812:	81 05       	cpc	r24, r1
    2814:	91 05       	cpc	r25, r1
    2816:	b1 f7       	brne	.-20     	; 0x2804 <wlan_start+0xd8>
static void SimpleLink_Init_Start(UINT16 usPatchesAvailableAtHost)
{
	UINT8 *ptr;
	UINT8 *args;

	ptr = tSLInformation.pucTxCommandBuffer;
    2818:	e0 91 76 04 	lds	r30, 0x0476
    281c:	f0 91 77 04 	lds	r31, 0x0477
	args = (UINT8 *)(ptr + HEADERS_SIZE_CMD);

	UINT8_TO_STREAM(args, ((usPatchesAvailableAtHost) ? SL_PATCHES_REQUEST_FORCE_NONE : SL_PATCHES_REQUEST_DEFAULT));
    2820:	cd 2b       	or	r28, r29
    2822:	11 f4       	brne	.+4      	; 0x2828 <wlan_start+0xfc>
    2824:	80 e0       	ldi	r24, 0x00	; 0
    2826:	01 c0       	rjmp	.+2      	; 0x282a <wlan_start+0xfe>
    2828:	82 e0       	ldi	r24, 0x02	; 2
    282a:	81 87       	std	Z+9, r24	; 0x09

	// IRQ Line asserted - send HCI_CMND_SIMPLE_LINK_START to CC3000
	hci_command_send(HCI_CMND_SIMPLE_LINK_START, ptr, WLAN_SL_INIT_START_PARAMS_LEN);
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	90 e4       	ldi	r25, 0x40	; 64
    2830:	bf 01       	movw	r22, r30
    2832:	41 e0       	ldi	r20, 0x01	; 1
    2834:	0e 94 a5 08 	call	0x114a	; 0x114a <hci_command_send>

	SimpleLinkWaitEvent(HCI_CMND_SIMPLE_LINK_START, 0);
    2838:	80 e0       	ldi	r24, 0x00	; 0
    283a:	90 e4       	ldi	r25, 0x40	; 64
    283c:	60 e0       	ldi	r22, 0x00	; 0
    283e:	70 e0       	ldi	r23, 0x00	; 0
    2840:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SimpleLinkWaitEvent>
	DEBUGPRINT_F("SimpleLink start\n\r");
	SimpleLink_Init_Start(usPatchesAvailableAtHost);

	// Read Buffer's size and finish
	DEBUGPRINT_F("Read buffer\n\r");
	hci_command_send(HCI_CMND_READ_BUFFER_SIZE, tSLInformation.pucTxCommandBuffer, 0);
    2844:	60 91 76 04 	lds	r22, 0x0476
    2848:	70 91 77 04 	lds	r23, 0x0477
    284c:	8b e0       	ldi	r24, 0x0B	; 11
    284e:	90 e4       	ldi	r25, 0x40	; 64
    2850:	40 e0       	ldi	r20, 0x00	; 0
    2852:	0e 94 a5 08 	call	0x114a	; 0x114a <hci_command_send>
	SimpleLinkWaitEvent(HCI_CMND_READ_BUFFER_SIZE, 0);
    2856:	8b e0       	ldi	r24, 0x0B	; 11
    2858:	90 e4       	ldi	r25, 0x40	; 64
    285a:	60 e0       	ldi	r22, 0x00	; 0
    285c:	70 e0       	ldi	r23, 0x00	; 0
    285e:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SimpleLinkWaitEvent>
}
    2862:	df 91       	pop	r29
    2864:	cf 91       	pop	r28
    2866:	1f 91       	pop	r17
    2868:	0f 91       	pop	r16
    286a:	ff 90       	pop	r15
    286c:	ef 90       	pop	r14
    286e:	08 95       	ret

00002870 <_Z17SpiReceiveHandlerPv>:
//! 			          called from the SPI library to receive the data
//
//*****************************************************************************
void SpiReceiveHandler(void *pvBuffer)
{	
	tSLInformation.usEventOrDataReceived = 1;
    2870:	21 e0       	ldi	r18, 0x01	; 1
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	30 93 73 04 	sts	0x0473, r19
    2878:	20 93 72 04 	sts	0x0472, r18
	tSLInformation.pucReceivedData = (UINT8 *)pvBuffer;
    287c:	90 93 75 04 	sts	0x0475, r25
    2880:	80 93 74 04 	sts	0x0474, r24

	hci_unsolicited_event_handler();
    2884:	0e 94 7e 04 	call	0x8fc	; 0x8fc <hci_unsolicited_event_handler>
}
    2888:	08 95       	ret

0000288a <_ZN15Adafruit_CC3000C1EhhhhP5Print>:
            Note that by default this class will assume the first hardware 
            serial should be used for debug output.  This behavior can be
            changed by explicitly specifying a cc3kPrinter parameter.
*/
/**************************************************************************/
Adafruit_CC3000::Adafruit_CC3000(uint8_t csPin, uint8_t irqPin, uint8_t vbatPin, uint8_t SPIspeed, Print* cc3kPrinter)
    288a:	ef 92       	push	r14
    288c:	ff 92       	push	r15
    288e:	0f 93       	push	r16
    2890:	fc 01       	movw	r30, r24
{
  _initialised = false;
    2892:	10 82       	st	Z, r1
  g_csPin = csPin;
    2894:	60 93 9d 04 	sts	0x049D, r22
  g_irqPin = irqPin;
    2898:	40 93 9e 04 	sts	0x049E, r20
  g_vbatPin = vbatPin;
    289c:	20 93 9f 04 	sts	0x049F, r18
  g_IRQnum = 0xFF;
    28a0:	8f ef       	ldi	r24, 0xFF	; 255
    28a2:	80 93 a0 04 	sts	0x04A0, r24
  g_SPIspeed = SPIspeed;
    28a6:	00 93 a1 04 	sts	0x04A1, r16
  static const byte IsConnected = 0x02;
  static const byte HasDHCP = 0x04;
  static const byte OkToShutDown = 0x08;

  void clear() {
    flags = 0;
    28aa:	10 92 d7 04 	sts	0x04D7, r1
  g_IRQnum = 0xFF;
  g_SPIspeed = SPIspeed;

  cc3000Bitset.clear();

  CC3KPrinter = cc3kPrinter;
    28ae:	f0 92 d9 04 	sts	0x04D9, r15
    28b2:	e0 92 d8 04 	sts	0x04D8, r14
}
    28b6:	0f 91       	pop	r16
    28b8:	ff 90       	pop	r15
    28ba:	ef 90       	pop	r14
    28bc:	08 95       	ret

000028be <_ZN22Adafruit_CC3000_ClientC1Ev>:
  return Adafruit_CC3000_Client(udp_socket);
}


/**********************************************************************/
Adafruit_CC3000_Client::Adafruit_CC3000_Client(void) {
    28be:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    28c0:	13 82       	std	Z+3, r1	; 0x03
    28c2:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    28c4:	88 ee       	ldi	r24, 0xE8	; 232
    28c6:	93 e0       	ldi	r25, 0x03	; 3
    28c8:	a0 e0       	ldi	r26, 0x00	; 0
    28ca:	b0 e0       	ldi	r27, 0x00	; 0
    28cc:	84 83       	std	Z+4, r24	; 0x04
    28ce:	95 83       	std	Z+5, r25	; 0x05
    28d0:	a6 83       	std	Z+6, r26	; 0x06
    28d2:	b7 83       	std	Z+7, r27	; 0x07
    28d4:	8c ed       	ldi	r24, 0xDC	; 220
    28d6:	93 e0       	ldi	r25, 0x03	; 3
    28d8:	91 83       	std	Z+1, r25	; 0x01
    28da:	80 83       	st	Z, r24
  _socket = -1;
    28dc:	e1 5b       	subi	r30, 0xB1	; 177
    28de:	ff 4f       	sbci	r31, 0xFF	; 255
    28e0:	8f ef       	ldi	r24, 0xFF	; 255
    28e2:	9f ef       	ldi	r25, 0xFF	; 255
    28e4:	af ef       	ldi	r26, 0xFF	; 255
    28e6:	bf ef       	ldi	r27, 0xFF	; 255
    28e8:	80 83       	st	Z, r24
    28ea:	91 83       	std	Z+1, r25	; 0x01
    28ec:	a2 83       	std	Z+2, r26	; 0x02
    28ee:	b3 83       	std	Z+3, r27	; 0x03
}
    28f0:	08 95       	ret

000028f2 <_ZN22Adafruit_CC3000_ClientC1El>:

Adafruit_CC3000_Client::Adafruit_CC3000_Client(int32_t s) {
    28f2:	fc 01       	movw	r30, r24
    28f4:	13 82       	std	Z+3, r1	; 0x03
    28f6:	12 82       	std	Z+2, r1	; 0x02
    28f8:	88 ee       	ldi	r24, 0xE8	; 232
    28fa:	93 e0       	ldi	r25, 0x03	; 3
    28fc:	a0 e0       	ldi	r26, 0x00	; 0
    28fe:	b0 e0       	ldi	r27, 0x00	; 0
    2900:	84 83       	std	Z+4, r24	; 0x04
    2902:	95 83       	std	Z+5, r25	; 0x05
    2904:	a6 83       	std	Z+6, r26	; 0x06
    2906:	b7 83       	std	Z+7, r27	; 0x07
    2908:	8c ed       	ldi	r24, 0xDC	; 220
    290a:	93 e0       	ldi	r25, 0x03	; 3
    290c:	91 83       	std	Z+1, r25	; 0x01
    290e:	80 83       	st	Z, r24
  _socket = s; 
    2910:	e1 5b       	subi	r30, 0xB1	; 177
    2912:	ff 4f       	sbci	r31, 0xFF	; 255
    2914:	40 83       	st	Z, r20
    2916:	51 83       	std	Z+1, r21	; 0x01
    2918:	62 83       	std	Z+2, r22	; 0x02
    291a:	73 83       	std	Z+3, r23	; 0x03
  bufsiz = 0;
    291c:	12 92       	st	-Z, r1
    291e:	12 92       	st	-Z, r1
  _rx_buf_idx = 0;
    2920:	12 92       	st	-Z, r1
}
    2922:	08 95       	ret

00002924 <_ZN22Adafruit_CC3000_ClientcvbEv>:
  bufsiz = other.bufsiz;
  _rx_buf_idx = other._rx_buf_idx;
  memcpy(_rx_buf, other._rx_buf, RXBUFFERSIZE);
}

Adafruit_CC3000_Client::operator bool()
    2924:	fc 01       	movw	r30, r24
{
  return connected();
    2926:	a0 81       	ld	r26, Z
    2928:	b1 81       	ldd	r27, Z+1	; 0x01
    292a:	54 96       	adiw	r26, 0x14	; 20
    292c:	2d 91       	ld	r18, X+
    292e:	3c 91       	ld	r19, X
    2930:	55 97       	sbiw	r26, 0x15	; 21
    2932:	f9 01       	movw	r30, r18
    2934:	09 95       	icall
    2936:	81 11       	cpse	r24, r1
    2938:	81 e0       	ldi	r24, 0x01	; 1
}
    293a:	08 95       	ret

0000293c <_ZN22Adafruit_CC3000_Client5flushEv>:
  else return 0;  // no data is available
}

void Adafruit_CC3000_Client::flush(){
  // No flush implementation, unclear if necessary.
}
    293c:	08 95       	ret

0000293e <_GLOBAL__I_g_csPin>:
  return ret;
}

void Adafruit_CC3000::setPrinter(Print* p) {
  CC3KPrinter = p;
}
    293e:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    2940:	8a ed       	ldi	r24, 0xDA	; 218
    2942:	94 e0       	ldi	r25, 0x04	; 4
    2944:	60 e0       	ldi	r22, 0x00	; 0
    2946:	40 e0       	ldi	r20, 0x00	; 0
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	00 e0       	ldi	r16, 0x00	; 0
    294c:	0e 94 9f 28 	call	0x513e	; 0x513e <_ZN9IPAddressC1Ehhhh>
    2950:	0f 91       	pop	r16
    2952:	08 95       	ret

00002954 <_ZN22Adafruit_CC3000_Client4readEPhj>:
{
  return recv(_socket, buf, len, flags);

}

int Adafruit_CC3000_Client::read(uint8_t *buf, size_t len) 
    2954:	cf 92       	push	r12
    2956:	df 92       	push	r13
    2958:	ef 92       	push	r14
    295a:	ff 92       	push	r15
    295c:	0f 93       	push	r16
    295e:	1f 93       	push	r17
    2960:	db 01       	movw	r26, r22
  return r;
}

int Adafruit_CC3000_Client::read(void *buf, uint16_t len, uint32_t flags) 
{
  return recv(_socket, buf, len, flags);
    2962:	fc 01       	movw	r30, r24
    2964:	e1 5b       	subi	r30, 0xB1	; 177
    2966:	ff 4f       	sbci	r31, 0xFF	; 255
    2968:	60 81       	ld	r22, Z
    296a:	71 81       	ldd	r23, Z+1	; 0x01
    296c:	82 81       	ldd	r24, Z+2	; 0x02
    296e:	93 81       	ldd	r25, Z+3	; 0x03
    2970:	8a 01       	movw	r16, r20
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	ad 01       	movw	r20, r26
    2978:	cc 24       	eor	r12, r12
    297a:	dd 24       	eor	r13, r13
    297c:	76 01       	movw	r14, r12
    297e:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <recv>
}

int Adafruit_CC3000_Client::read(uint8_t *buf, size_t len) 
{
  return read(buf, len, 0);
}
    2982:	1f 91       	pop	r17
    2984:	0f 91       	pop	r16
    2986:	ff 90       	pop	r15
    2988:	ef 90       	pop	r14
    298a:	df 90       	pop	r13
    298c:	cf 90       	pop	r12
    298e:	08 95       	ret

00002990 <_ZN22Adafruit_CC3000_Client9availableEv>:
  _rx_buf_idx++;
  //if (CC3KPrinter != 0) { CC3KPrinter->print("("); CC3KPrinter->write(ret); CC3KPrinter->print(")"); }
  return ret;
}

int Adafruit_CC3000_Client::available(void) {
    2990:	8f 92       	push	r8
    2992:	9f 92       	push	r9
    2994:	af 92       	push	r10
    2996:	bf 92       	push	r11
    2998:	cf 92       	push	r12
    299a:	df 92       	push	r13
    299c:	ef 92       	push	r14
    299e:	ff 92       	push	r15
    29a0:	0f 93       	push	r16
    29a2:	1f 93       	push	r17
    29a4:	df 93       	push	r29
    29a6:	cf 93       	push	r28
    29a8:	cd b7       	in	r28, 0x3d	; 61
    29aa:	de b7       	in	r29, 0x3e	; 62
    29ac:	2c 97       	sbiw	r28, 0x0c	; 12
    29ae:	0f b6       	in	r0, 0x3f	; 63
    29b0:	f8 94       	cli
    29b2:	de bf       	out	0x3e, r29	; 62
    29b4:	0f be       	out	0x3f, r0	; 63
    29b6:	cd bf       	out	0x3d, r28	; 61
    29b8:	fc 01       	movw	r30, r24
  // not open!
  if (_socket < 0) return 0;
    29ba:	e1 5b       	subi	r30, 0xB1	; 177
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	80 81       	ld	r24, Z
    29c0:	91 81       	ldd	r25, Z+1	; 0x01
    29c2:	a2 81       	ldd	r26, Z+2	; 0x02
    29c4:	b3 81       	ldd	r27, Z+3	; 0x03
    29c6:	ef 54       	subi	r30, 0x4F	; 79
    29c8:	f0 40       	sbci	r31, 0x00	; 0
    29ca:	b7 ff       	sbrs	r27, 7
    29cc:	03 c0       	rjmp	.+6      	; 0x29d4 <_ZN22Adafruit_CC3000_Client9availableEv+0x44>
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	82 c0       	rjmp	.+260    	; 0x2ad8 <_ZN22Adafruit_CC3000_Client9availableEv+0x148>

  if ((bufsiz > 0) // we have some data in the internal buffer
    29d4:	e3 5b       	subi	r30, 0xB3	; 179
    29d6:	ff 4f       	sbci	r31, 0xFF	; 255
    29d8:	20 81       	ld	r18, Z
    29da:	31 81       	ldd	r19, Z+1	; 0x01
    29dc:	ed 54       	subi	r30, 0x4D	; 77
    29de:	f0 40       	sbci	r31, 0x00	; 0
    29e0:	12 16       	cp	r1, r18
    29e2:	13 06       	cpc	r1, r19
    29e4:	64 f4       	brge	.+24     	; 0x29fe <_ZN22Adafruit_CC3000_Client9availableEv+0x6e>
    29e6:	e4 5b       	subi	r30, 0xB4	; 180
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	80 81       	ld	r24, Z
    29ec:	ec 54       	subi	r30, 0x4C	; 76
    29ee:	f0 40       	sbci	r31, 0x00	; 0
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	82 17       	cp	r24, r18
    29f4:	93 07       	cpc	r25, r19
    29f6:	1c f4       	brge	.+6      	; 0x29fe <_ZN22Adafruit_CC3000_Client9availableEv+0x6e>
      && (_rx_buf_idx < bufsiz)) {  // we havent already spit it all out
    return (bufsiz - _rx_buf_idx);
    29f8:	28 1b       	sub	r18, r24
    29fa:	39 0b       	sbc	r19, r25
    29fc:	6d c0       	rjmp	.+218    	; 0x2ad8 <_ZN22Adafruit_CC3000_Client9availableEv+0x148>

  // do a select() call on this socket
  timeval timeout;
  fd_set fd_read;

  memset(&fd_read, 0, sizeof(fd_read));
    29fe:	19 82       	std	Y+1, r1	; 0x01
    2a00:	1a 82       	std	Y+2, r1	; 0x02
    2a02:	1b 82       	std	Y+3, r1	; 0x03
    2a04:	1c 82       	std	Y+4, r1	; 0x04
  FD_SET(_socket, &fd_read);
    2a06:	e1 5b       	subi	r30, 0xB1	; 177
    2a08:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0a:	c0 80       	ld	r12, Z
    2a0c:	d1 80       	ldd	r13, Z+1	; 0x01
    2a0e:	e2 80       	ldd	r14, Z+2	; 0x02
    2a10:	f3 80       	ldd	r15, Z+3	; 0x03
    2a12:	c7 01       	movw	r24, r14
    2a14:	b6 01       	movw	r22, r12
    2a16:	20 e2       	ldi	r18, 0x20	; 32
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	40 e0       	ldi	r20, 0x00	; 0
    2a1c:	50 e0       	ldi	r21, 0x00	; 0
    2a1e:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <__divmodsi4>
    2a22:	92 2e       	mov	r9, r18
    2a24:	83 2e       	mov	r8, r19
    2a26:	02 2f       	mov	r16, r18
    2a28:	13 2f       	mov	r17, r19
    2a2a:	00 0f       	add	r16, r16
    2a2c:	11 1f       	adc	r17, r17
    2a2e:	00 0f       	add	r16, r16
    2a30:	11 1f       	adc	r17, r17
    2a32:	5e 01       	movw	r10, r28
    2a34:	08 94       	sec
    2a36:	a1 1c       	adc	r10, r1
    2a38:	b1 1c       	adc	r11, r1
    2a3a:	0a 0d       	add	r16, r10
    2a3c:	1b 1d       	adc	r17, r11
    2a3e:	c7 01       	movw	r24, r14
    2a40:	b6 01       	movw	r22, r12
    2a42:	20 e2       	ldi	r18, 0x20	; 32
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	40 e0       	ldi	r20, 0x00	; 0
    2a48:	50 e0       	ldi	r21, 0x00	; 0
    2a4a:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <__divmodsi4>
    2a4e:	21 e0       	ldi	r18, 0x01	; 1
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	40 e0       	ldi	r20, 0x00	; 0
    2a54:	50 e0       	ldi	r21, 0x00	; 0
    2a56:	04 c0       	rjmp	.+8      	; 0x2a60 <_ZN22Adafruit_CC3000_Client9availableEv+0xd0>
    2a58:	22 0f       	add	r18, r18
    2a5a:	33 1f       	adc	r19, r19
    2a5c:	44 1f       	adc	r20, r20
    2a5e:	55 1f       	adc	r21, r21
    2a60:	6a 95       	dec	r22
    2a62:	d2 f7       	brpl	.-12     	; 0x2a58 <_ZN22Adafruit_CC3000_Client9availableEv+0xc8>
    2a64:	e9 2d       	mov	r30, r9
    2a66:	f8 2d       	mov	r31, r8
    2a68:	ee 0f       	add	r30, r30
    2a6a:	ff 1f       	adc	r31, r31
    2a6c:	ee 0f       	add	r30, r30
    2a6e:	ff 1f       	adc	r31, r31
    2a70:	ea 0d       	add	r30, r10
    2a72:	fb 1d       	adc	r31, r11
    2a74:	80 81       	ld	r24, Z
    2a76:	91 81       	ldd	r25, Z+1	; 0x01
    2a78:	a2 81       	ldd	r26, Z+2	; 0x02
    2a7a:	b3 81       	ldd	r27, Z+3	; 0x03
    2a7c:	28 2b       	or	r18, r24
    2a7e:	39 2b       	or	r19, r25
    2a80:	4a 2b       	or	r20, r26
    2a82:	5b 2b       	or	r21, r27
    2a84:	f8 01       	movw	r30, r16
    2a86:	20 83       	st	Z, r18
    2a88:	31 83       	std	Z+1, r19	; 0x01
    2a8a:	42 83       	std	Z+2, r20	; 0x02
    2a8c:	53 83       	std	Z+3, r21	; 0x03

  timeout.tv_sec = 0;
    2a8e:	1d 82       	std	Y+5, r1	; 0x05
    2a90:	1e 82       	std	Y+6, r1	; 0x06
    2a92:	1f 82       	std	Y+7, r1	; 0x07
    2a94:	18 86       	std	Y+8, r1	; 0x08
  timeout.tv_usec = 5000; // 5 millisec
    2a96:	88 e8       	ldi	r24, 0x88	; 136
    2a98:	93 e1       	ldi	r25, 0x13	; 19
    2a9a:	a0 e0       	ldi	r26, 0x00	; 0
    2a9c:	b0 e0       	ldi	r27, 0x00	; 0
    2a9e:	89 87       	std	Y+9, r24	; 0x09
    2aa0:	9a 87       	std	Y+10, r25	; 0x0a
    2aa2:	ab 87       	std	Y+11, r26	; 0x0b
    2aa4:	bc 87       	std	Y+12, r27	; 0x0c

  int16_t s = select(_socket+1, &fd_read, NULL, NULL, &timeout);
    2aa6:	08 94       	sec
    2aa8:	c1 1c       	adc	r12, r1
    2aaa:	d1 1c       	adc	r13, r1
    2aac:	e1 1c       	adc	r14, r1
    2aae:	f1 1c       	adc	r15, r1
    2ab0:	c7 01       	movw	r24, r14
    2ab2:	b6 01       	movw	r22, r12
    2ab4:	a5 01       	movw	r20, r10
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	00 e0       	ldi	r16, 0x00	; 0
    2abc:	10 e0       	ldi	r17, 0x00	; 0
    2abe:	e5 e0       	ldi	r30, 0x05	; 5
    2ac0:	ee 2e       	mov	r14, r30
    2ac2:	f1 2c       	mov	r15, r1
    2ac4:	ec 0e       	add	r14, r28
    2ac6:	fd 1e       	adc	r15, r29
    2ac8:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <select>
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	01 97       	sbiw	r24, 0x01	; 1
    2ad2:	11 f4       	brne	.+4      	; 0x2ad8 <_ZN22Adafruit_CC3000_Client9availableEv+0x148>
    2ad4:	21 e0       	ldi	r18, 0x01	; 1
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
  //if (CC3KPrinter != 0) } CC3KPrinter->print(F("Select: ")); CC3KPrinter->println(s); }
  if (s == 1) return 1;  // some data is available to read
  else return 0;  // no data is available
}
    2ad8:	c9 01       	movw	r24, r18
    2ada:	2c 96       	adiw	r28, 0x0c	; 12
    2adc:	0f b6       	in	r0, 0x3f	; 63
    2ade:	f8 94       	cli
    2ae0:	de bf       	out	0x3e, r29	; 62
    2ae2:	0f be       	out	0x3f, r0	; 63
    2ae4:	cd bf       	out	0x3d, r28	; 61
    2ae6:	cf 91       	pop	r28
    2ae8:	df 91       	pop	r29
    2aea:	1f 91       	pop	r17
    2aec:	0f 91       	pop	r16
    2aee:	ff 90       	pop	r15
    2af0:	ef 90       	pop	r14
    2af2:	df 90       	pop	r13
    2af4:	cf 90       	pop	r12
    2af6:	bf 90       	pop	r11
    2af8:	af 90       	pop	r10
    2afa:	9f 90       	pop	r9
    2afc:	8f 90       	pop	r8
    2afe:	08 95       	ret

00002b00 <_ZN22Adafruit_CC3000_Client5closeEv>:
int Adafruit_CC3000_Client::read(uint8_t *buf, size_t len) 
{
  return read(buf, len, 0);
}

int32_t Adafruit_CC3000_Client::close(void) {
    2b00:	0f 93       	push	r16
    2b02:	1f 93       	push	r17
  int32_t x = closesocket(_socket);
    2b04:	8c 01       	movw	r16, r24
    2b06:	01 5b       	subi	r16, 0xB1	; 177
    2b08:	1f 4f       	sbci	r17, 0xFF	; 255
    2b0a:	f8 01       	movw	r30, r16
    2b0c:	60 81       	ld	r22, Z
    2b0e:	71 81       	ldd	r23, Z+1	; 0x01
    2b10:	82 81       	ldd	r24, Z+2	; 0x02
    2b12:	93 81       	ldd	r25, Z+3	; 0x03
    2b14:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <closesocket>
  _socket = -1;
    2b18:	2f ef       	ldi	r18, 0xFF	; 255
    2b1a:	3f ef       	ldi	r19, 0xFF	; 255
    2b1c:	4f ef       	ldi	r20, 0xFF	; 255
    2b1e:	5f ef       	ldi	r21, 0xFF	; 255
    2b20:	f8 01       	movw	r30, r16
    2b22:	20 83       	st	Z, r18
    2b24:	31 83       	std	Z+1, r19	; 0x01
    2b26:	42 83       	std	Z+2, r20	; 0x02
    2b28:	53 83       	std	Z+3, r21	; 0x03
  return x;
}
    2b2a:	1f 91       	pop	r17
    2b2c:	0f 91       	pop	r16
    2b2e:	08 95       	ret

00002b30 <_ZN22Adafruit_CC3000_Client4peekEv>:

void Adafruit_CC3000_Client::flush(){
  // No flush implementation, unclear if necessary.
}

int Adafruit_CC3000_Client::peek(){
    2b30:	4f 92       	push	r4
    2b32:	5f 92       	push	r5
    2b34:	6f 92       	push	r6
    2b36:	7f 92       	push	r7
    2b38:	8f 92       	push	r8
    2b3a:	9f 92       	push	r9
    2b3c:	af 92       	push	r10
    2b3e:	bf 92       	push	r11
    2b40:	cf 92       	push	r12
    2b42:	df 92       	push	r13
    2b44:	ef 92       	push	r14
    2b46:	ff 92       	push	r15
    2b48:	0f 93       	push	r16
    2b4a:	1f 93       	push	r17
    2b4c:	cf 93       	push	r28
    2b4e:	df 93       	push	r29
    2b50:	ec 01       	movw	r28, r24
  while ((bufsiz <= 0) || (bufsiz == _rx_buf_idx)) {
    cc3k_int_poll();
    // buffer in some more data
    bufsiz = recv(_socket, _rx_buf, sizeof(_rx_buf), 0);
    2b52:	9c e0       	ldi	r25, 0x0C	; 12
    2b54:	49 2e       	mov	r4, r25
    2b56:	51 2c       	mov	r5, r1
    2b58:	4c 0e       	add	r4, r28
    2b5a:	5d 1e       	adc	r5, r29
void Adafruit_CC3000_Client::flush(){
  // No flush implementation, unclear if necessary.
}

int Adafruit_CC3000_Client::peek(){
  while ((bufsiz <= 0) || (bufsiz == _rx_buf_idx)) {
    2b5c:	8d e4       	ldi	r24, 0x4D	; 77
    2b5e:	88 2e       	mov	r8, r24
    2b60:	91 2c       	mov	r9, r1
    2b62:	8c 0e       	add	r8, r28
    2b64:	9d 1e       	adc	r9, r29
    2b66:	0c e4       	ldi	r16, 0x4C	; 76
    2b68:	a0 2e       	mov	r10, r16
    2b6a:	b1 2c       	mov	r11, r1
    2b6c:	ac 0e       	add	r10, r28
    2b6e:	bd 1e       	adc	r11, r29
    cc3k_int_poll();
    // buffer in some more data
    bufsiz = recv(_socket, _rx_buf, sizeof(_rx_buf), 0);
    2b70:	1f e4       	ldi	r17, 0x4F	; 79
    2b72:	61 2e       	mov	r6, r17
    2b74:	71 2c       	mov	r7, r1
    2b76:	6c 0e       	add	r6, r28
    2b78:	7d 1e       	adc	r7, r29
    2b7a:	1f c0       	rjmp	.+62     	; 0x2bba <_ZN22Adafruit_CC3000_Client4peekEv+0x8a>
  // No flush implementation, unclear if necessary.
}

int Adafruit_CC3000_Client::peek(){
  while ((bufsiz <= 0) || (bufsiz == _rx_buf_idx)) {
    cc3k_int_poll();
    2b7c:	0e 94 47 21 	call	0x428e	; 0x428e <cc3k_int_poll>
    // buffer in some more data
    bufsiz = recv(_socket, _rx_buf, sizeof(_rx_buf), 0);
    2b80:	f3 01       	movw	r30, r6
    2b82:	60 81       	ld	r22, Z
    2b84:	71 81       	ldd	r23, Z+1	; 0x01
    2b86:	82 81       	ldd	r24, Z+2	; 0x02
    2b88:	93 81       	ldd	r25, Z+3	; 0x03
    2b8a:	a2 01       	movw	r20, r4
    2b8c:	00 e4       	ldi	r16, 0x40	; 64
    2b8e:	10 e0       	ldi	r17, 0x00	; 0
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	cc 24       	eor	r12, r12
    2b96:	dd 24       	eor	r13, r13
    2b98:	76 01       	movw	r14, r12
    2b9a:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <recv>
    2b9e:	f4 01       	movw	r30, r8
    2ba0:	91 83       	std	Z+1, r25	; 0x01
    2ba2:	80 83       	st	Z, r24
    if (bufsiz == -57) {
    2ba4:	87 5c       	subi	r24, 0xC7	; 199
    2ba6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ba8:	31 f4       	brne	.+12     	; 0x2bb6 <_ZN22Adafruit_CC3000_Client4peekEv+0x86>
      close();
    2baa:	ce 01       	movw	r24, r28
    2bac:	0e 94 80 15 	call	0x2b00	; 0x2b00 <_ZN22Adafruit_CC3000_Client5closeEv>
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	14 c0       	rjmp	.+40     	; 0x2bde <_ZN22Adafruit_CC3000_Client4peekEv+0xae>
      return 0;
    }
    //if (CC3KPrinter != 0) { CC3KPrinter->println("Read "); CC3KPrinter->print(bufsiz); CC3KPrinter->println(" bytes"); }
    _rx_buf_idx = 0;
    2bb6:	f5 01       	movw	r30, r10
    2bb8:	10 82       	st	Z, r1
void Adafruit_CC3000_Client::flush(){
  // No flush implementation, unclear if necessary.
}

int Adafruit_CC3000_Client::peek(){
  while ((bufsiz <= 0) || (bufsiz == _rx_buf_idx)) {
    2bba:	f4 01       	movw	r30, r8
    2bbc:	20 81       	ld	r18, Z
    2bbe:	31 81       	ldd	r19, Z+1	; 0x01
    2bc0:	12 16       	cp	r1, r18
    2bc2:	13 06       	cpc	r1, r19
    2bc4:	dc f6       	brge	.-74     	; 0x2b7c <_ZN22Adafruit_CC3000_Client4peekEv+0x4c>
    2bc6:	f5 01       	movw	r30, r10
    2bc8:	80 81       	ld	r24, Z
    2bca:	e8 2f       	mov	r30, r24
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	2e 17       	cp	r18, r30
    2bd0:	3f 07       	cpc	r19, r31
    2bd2:	a1 f2       	breq	.-88     	; 0x2b7c <_ZN22Adafruit_CC3000_Client4peekEv+0x4c>
    _rx_buf_idx = 0;
  }
  uint8_t ret = _rx_buf[_rx_buf_idx];

  //if (CC3KPrinter != 0) { CC3KPrinter->print("("); CC3KPrinter->write(ret); CC3KPrinter->print(")"); }
  return ret;
    2bd4:	ec 0f       	add	r30, r28
    2bd6:	fd 1f       	adc	r31, r29
    2bd8:	84 85       	ldd	r24, Z+12	; 0x0c
    2bda:	28 2f       	mov	r18, r24
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
}
    2bde:	c9 01       	movw	r24, r18
    2be0:	df 91       	pop	r29
    2be2:	cf 91       	pop	r28
    2be4:	1f 91       	pop	r17
    2be6:	0f 91       	pop	r16
    2be8:	ff 90       	pop	r15
    2bea:	ef 90       	pop	r14
    2bec:	df 90       	pop	r13
    2bee:	cf 90       	pop	r12
    2bf0:	bf 90       	pop	r11
    2bf2:	af 90       	pop	r10
    2bf4:	9f 90       	pop	r9
    2bf6:	8f 90       	pop	r8
    2bf8:	7f 90       	pop	r7
    2bfa:	6f 90       	pop	r6
    2bfc:	5f 90       	pop	r5
    2bfe:	4f 90       	pop	r4
    2c00:	08 95       	ret

00002c02 <_ZN22Adafruit_CC3000_Client4readEv>:

void Adafruit_CC3000_Client::stop(){
  close();
}

int Adafruit_CC3000_Client::read(void) 
    2c02:	4f 92       	push	r4
    2c04:	5f 92       	push	r5
    2c06:	6f 92       	push	r6
    2c08:	7f 92       	push	r7
    2c0a:	8f 92       	push	r8
    2c0c:	9f 92       	push	r9
    2c0e:	af 92       	push	r10
    2c10:	bf 92       	push	r11
    2c12:	cf 92       	push	r12
    2c14:	df 92       	push	r13
    2c16:	ef 92       	push	r14
    2c18:	ff 92       	push	r15
    2c1a:	0f 93       	push	r16
    2c1c:	1f 93       	push	r17
    2c1e:	cf 93       	push	r28
    2c20:	df 93       	push	r29
    2c22:	ec 01       	movw	r28, r24
{
  while ((bufsiz <= 0) || (bufsiz == _rx_buf_idx)) {
    cc3k_int_poll();
    // buffer in some more data
    bufsiz = recv(_socket, _rx_buf, sizeof(_rx_buf), 0);
    2c24:	5c e0       	ldi	r21, 0x0C	; 12
    2c26:	45 2e       	mov	r4, r21
    2c28:	51 2c       	mov	r5, r1
    2c2a:	48 0e       	add	r4, r24
    2c2c:	59 1e       	adc	r5, r25
  close();
}

int Adafruit_CC3000_Client::read(void) 
{
  while ((bufsiz <= 0) || (bufsiz == _rx_buf_idx)) {
    2c2e:	4d e4       	ldi	r20, 0x4D	; 77
    2c30:	84 2e       	mov	r8, r20
    2c32:	91 2c       	mov	r9, r1
    2c34:	88 0e       	add	r8, r24
    2c36:	99 1e       	adc	r9, r25
    2c38:	3c e4       	ldi	r19, 0x4C	; 76
    2c3a:	a3 2e       	mov	r10, r19
    2c3c:	b1 2c       	mov	r11, r1
    2c3e:	a8 0e       	add	r10, r24
    2c40:	b9 1e       	adc	r11, r25
    cc3k_int_poll();
    // buffer in some more data
    bufsiz = recv(_socket, _rx_buf, sizeof(_rx_buf), 0);
    2c42:	2f e4       	ldi	r18, 0x4F	; 79
    2c44:	62 2e       	mov	r6, r18
    2c46:	71 2c       	mov	r7, r1
    2c48:	68 0e       	add	r6, r24
    2c4a:	79 1e       	adc	r7, r25
    2c4c:	1f c0       	rjmp	.+62     	; 0x2c8c <_ZN22Adafruit_CC3000_Client4readEv+0x8a>
}

int Adafruit_CC3000_Client::read(void) 
{
  while ((bufsiz <= 0) || (bufsiz == _rx_buf_idx)) {
    cc3k_int_poll();
    2c4e:	0e 94 47 21 	call	0x428e	; 0x428e <cc3k_int_poll>
    // buffer in some more data
    bufsiz = recv(_socket, _rx_buf, sizeof(_rx_buf), 0);
    2c52:	f3 01       	movw	r30, r6
    2c54:	60 81       	ld	r22, Z
    2c56:	71 81       	ldd	r23, Z+1	; 0x01
    2c58:	82 81       	ldd	r24, Z+2	; 0x02
    2c5a:	93 81       	ldd	r25, Z+3	; 0x03
    2c5c:	a2 01       	movw	r20, r4
    2c5e:	00 e4       	ldi	r16, 0x40	; 64
    2c60:	10 e0       	ldi	r17, 0x00	; 0
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	cc 24       	eor	r12, r12
    2c68:	dd 24       	eor	r13, r13
    2c6a:	76 01       	movw	r14, r12
    2c6c:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <recv>
    2c70:	f4 01       	movw	r30, r8
    2c72:	91 83       	std	Z+1, r25	; 0x01
    2c74:	80 83       	st	Z, r24
    if (bufsiz == -57) {
    2c76:	87 5c       	subi	r24, 0xC7	; 199
    2c78:	9f 4f       	sbci	r25, 0xFF	; 255
    2c7a:	31 f4       	brne	.+12     	; 0x2c88 <_ZN22Adafruit_CC3000_Client4readEv+0x86>
      close();
    2c7c:	ce 01       	movw	r24, r28
    2c7e:	0e 94 80 15 	call	0x2b00	; 0x2b00 <_ZN22Adafruit_CC3000_Client5closeEv>
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	17 c0       	rjmp	.+46     	; 0x2cb6 <_ZN22Adafruit_CC3000_Client4readEv+0xb4>
      return 0;
    }
    //if (CC3KPrinter != 0) { CC3KPrinter->println("Read "); CC3KPrinter->print(bufsiz); CC3KPrinter->println(" bytes"); }
    _rx_buf_idx = 0;
    2c88:	f5 01       	movw	r30, r10
    2c8a:	10 82       	st	Z, r1
  close();
}

int Adafruit_CC3000_Client::read(void) 
{
  while ((bufsiz <= 0) || (bufsiz == _rx_buf_idx)) {
    2c8c:	f4 01       	movw	r30, r8
    2c8e:	80 81       	ld	r24, Z
    2c90:	91 81       	ldd	r25, Z+1	; 0x01
    2c92:	18 16       	cp	r1, r24
    2c94:	19 06       	cpc	r1, r25
    2c96:	dc f6       	brge	.-74     	; 0x2c4e <_ZN22Adafruit_CC3000_Client4readEv+0x4c>
    2c98:	f5 01       	movw	r30, r10
    2c9a:	20 81       	ld	r18, Z
    2c9c:	e2 2f       	mov	r30, r18
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	8e 17       	cp	r24, r30
    2ca2:	9f 07       	cpc	r25, r31
    2ca4:	a1 f2       	breq	.-88     	; 0x2c4e <_ZN22Adafruit_CC3000_Client4readEv+0x4c>
      return 0;
    }
    //if (CC3KPrinter != 0) { CC3KPrinter->println("Read "); CC3KPrinter->print(bufsiz); CC3KPrinter->println(" bytes"); }
    _rx_buf_idx = 0;
  }
  uint8_t ret = _rx_buf[_rx_buf_idx];
    2ca6:	ec 0f       	add	r30, r28
    2ca8:	fd 1f       	adc	r31, r29
    2caa:	84 85       	ldd	r24, Z+12	; 0x0c
  _rx_buf_idx++;
    2cac:	2f 5f       	subi	r18, 0xFF	; 255
    2cae:	f5 01       	movw	r30, r10
    2cb0:	20 83       	st	Z, r18
  //if (CC3KPrinter != 0) { CC3KPrinter->print("("); CC3KPrinter->write(ret); CC3KPrinter->print(")"); }
  return ret;
    2cb2:	28 2f       	mov	r18, r24
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
}
    2cb6:	c9 01       	movw	r24, r18
    2cb8:	df 91       	pop	r29
    2cba:	cf 91       	pop	r28
    2cbc:	1f 91       	pop	r17
    2cbe:	0f 91       	pop	r16
    2cc0:	ff 90       	pop	r15
    2cc2:	ef 90       	pop	r14
    2cc4:	df 90       	pop	r13
    2cc6:	cf 90       	pop	r12
    2cc8:	bf 90       	pop	r11
    2cca:	af 90       	pop	r10
    2ccc:	9f 90       	pop	r9
    2cce:	8f 90       	pop	r8
    2cd0:	7f 90       	pop	r7
    2cd2:	6f 90       	pop	r6
    2cd4:	5f 90       	pop	r5
    2cd6:	4f 90       	pop	r4
    2cd8:	08 95       	ret

00002cda <_ZN22Adafruit_CC3000_Client4stopEv>:
  _socket = -1;
  return x;
}

void Adafruit_CC3000_Client::stop(){
  close();
    2cda:	0e 94 80 15 	call	0x2b00	; 0x2b00 <_ZN22Adafruit_CC3000_Client5closeEv>
}
    2cde:	08 95       	ret

00002ce0 <_ZN22Adafruit_CC3000_Client9connectedEv>:

  _socket = tcp_socket;
  return 1;
}

uint8_t Adafruit_CC3000_Client::connected(void) { 
    2ce0:	0f 93       	push	r16
    2ce2:	1f 93       	push	r17
    2ce4:	cf 93       	push	r28
    2ce6:	df 93       	push	r29
    2ce8:	ec 01       	movw	r28, r24
  if (_socket < 0) return false;
    2cea:	8c 01       	movw	r16, r24
    2cec:	01 5b       	subi	r16, 0xB1	; 177
    2cee:	1f 4f       	sbci	r17, 0xFF	; 255
    2cf0:	f8 01       	movw	r30, r16
    2cf2:	80 81       	ld	r24, Z
    2cf4:	91 81       	ldd	r25, Z+1	; 0x01
    2cf6:	a2 81       	ldd	r26, Z+2	; 0x02
    2cf8:	b3 81       	ldd	r27, Z+3	; 0x03
    2cfa:	b7 fd       	sbrc	r27, 7
    2cfc:	27 c0       	rjmp	.+78     	; 0x2d4c <_ZN22Adafruit_CC3000_Client9connectedEv+0x6c>

  if (! available() && closed_sockets[_socket] == true) {
    2cfe:	e8 81       	ld	r30, Y
    2d00:	f9 81       	ldd	r31, Y+1	; 0x01
    2d02:	04 80       	ldd	r0, Z+4	; 0x04
    2d04:	f5 81       	ldd	r31, Z+5	; 0x05
    2d06:	e0 2d       	mov	r30, r0
    2d08:	ce 01       	movw	r24, r28
    2d0a:	09 95       	icall
    2d0c:	89 2b       	or	r24, r25
    2d0e:	01 f5       	brne	.+64     	; 0x2d50 <_ZN22Adafruit_CC3000_Client9connectedEv+0x70>
    2d10:	d8 01       	movw	r26, r16
    2d12:	2d 91       	ld	r18, X+
    2d14:	3d 91       	ld	r19, X+
    2d16:	4d 91       	ld	r20, X+
    2d18:	5c 91       	ld	r21, X
    2d1a:	f9 01       	movw	r30, r18
    2d1c:	e9 54       	subi	r30, 0x49	; 73
    2d1e:	fb 4f       	sbci	r31, 0xFB	; 251
    2d20:	80 81       	ld	r24, Z
    2d22:	81 30       	cpi	r24, 0x01	; 1
    2d24:	a9 f4       	brne	.+42     	; 0x2d50 <_ZN22Adafruit_CC3000_Client9connectedEv+0x70>
    //if (CC3KPrinter != 0) CC3KPrinter->println("No more data, and closed!");
    closesocket(_socket);
    2d26:	ca 01       	movw	r24, r20
    2d28:	b9 01       	movw	r22, r18
    2d2a:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <closesocket>
    closed_sockets[_socket] = false;
    2d2e:	d8 01       	movw	r26, r16
    2d30:	ed 91       	ld	r30, X+
    2d32:	fc 91       	ld	r31, X
    2d34:	e9 54       	subi	r30, 0x49	; 73
    2d36:	fb 4f       	sbci	r31, 0xFB	; 251
    2d38:	10 82       	st	Z, r1
    _socket = -1;
    2d3a:	8f ef       	ldi	r24, 0xFF	; 255
    2d3c:	9f ef       	ldi	r25, 0xFF	; 255
    2d3e:	af ef       	ldi	r26, 0xFF	; 255
    2d40:	bf ef       	ldi	r27, 0xFF	; 255
    2d42:	f8 01       	movw	r30, r16
    2d44:	80 83       	st	Z, r24
    2d46:	91 83       	std	Z+1, r25	; 0x01
    2d48:	a2 83       	std	Z+2, r26	; 0x02
    2d4a:	b3 83       	std	Z+3, r27	; 0x03
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
    2d4e:	01 c0       	rjmp	.+2      	; 0x2d52 <_ZN22Adafruit_CC3000_Client9connectedEv+0x72>
    return false;
    2d50:	81 e0       	ldi	r24, 0x01	; 1
  }

  else return true;  
}
    2d52:	df 91       	pop	r29
    2d54:	cf 91       	pop	r28
    2d56:	1f 91       	pop	r17
    2d58:	0f 91       	pop	r16
    2d5a:	08 95       	ret

00002d5c <_ZN22Adafruit_CC3000_Client5writeEh>:
size_t Adafruit_CC3000_Client::write(const uint8_t *buf, size_t len)
{
  return write(buf, len, 0);
}

size_t Adafruit_CC3000_Client::write(uint8_t c)
    2d5c:	cf 92       	push	r12
    2d5e:	df 92       	push	r13
    2d60:	ef 92       	push	r14
    2d62:	ff 92       	push	r15
    2d64:	0f 93       	push	r16
    2d66:	1f 93       	push	r17
    2d68:	df 93       	push	r29
    2d6a:	cf 93       	push	r28
    2d6c:	0f 92       	push	r0
    2d6e:	cd b7       	in	r28, 0x3d	; 61
    2d70:	de b7       	in	r29, 0x3e	; 62
    2d72:	69 83       	std	Y+1, r22	; 0x01
{
  int32_t r;
  r = send(_socket, &c, 1, 0);
    2d74:	fc 01       	movw	r30, r24
    2d76:	e1 5b       	subi	r30, 0xB1	; 177
    2d78:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7a:	60 81       	ld	r22, Z
    2d7c:	71 81       	ldd	r23, Z+1	; 0x01
    2d7e:	82 81       	ldd	r24, Z+2	; 0x02
    2d80:	93 81       	ldd	r25, Z+3	; 0x03
    2d82:	ae 01       	movw	r20, r28
    2d84:	4f 5f       	subi	r20, 0xFF	; 255
    2d86:	5f 4f       	sbci	r21, 0xFF	; 255
    2d88:	01 e0       	ldi	r16, 0x01	; 1
    2d8a:	10 e0       	ldi	r17, 0x00	; 0
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	cc 24       	eor	r12, r12
    2d92:	dd 24       	eor	r13, r13
    2d94:	76 01       	movw	r14, r12
    2d96:	0e 94 ce 10 	call	0x219c	; 0x219c <send>
    2d9a:	9c 01       	movw	r18, r24
    2d9c:	44 27       	eor	r20, r20
    2d9e:	37 fd       	sbrc	r19, 7
    2da0:	40 95       	com	r20
    2da2:	54 2f       	mov	r21, r20
  if ( r < 0 ) return 0;
    2da4:	57 ff       	sbrs	r21, 7
    2da6:	02 c0       	rjmp	.+4      	; 0x2dac <_ZN22Adafruit_CC3000_Client5writeEh+0x50>
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	30 e0       	ldi	r19, 0x00	; 0
  return r;
}
    2dac:	c9 01       	movw	r24, r18
    2dae:	0f 90       	pop	r0
    2db0:	cf 91       	pop	r28
    2db2:	df 91       	pop	r29
    2db4:	1f 91       	pop	r17
    2db6:	0f 91       	pop	r16
    2db8:	ff 90       	pop	r15
    2dba:	ef 90       	pop	r14
    2dbc:	df 90       	pop	r13
    2dbe:	cf 90       	pop	r12
    2dc0:	08 95       	ret

00002dc2 <_ZN22Adafruit_CC3000_Client5writeEPKhj>:
size_t Adafruit_CC3000_Client::write(const void *buf, uint16_t len, uint32_t flags)
{
  return send(_socket, buf, len, flags);
}

size_t Adafruit_CC3000_Client::write(const uint8_t *buf, size_t len)
    2dc2:	cf 92       	push	r12
    2dc4:	df 92       	push	r13
    2dc6:	ef 92       	push	r14
    2dc8:	ff 92       	push	r15
    2dca:	0f 93       	push	r16
    2dcc:	1f 93       	push	r17
    2dce:	db 01       	movw	r26, r22
  else return true;  
}

size_t Adafruit_CC3000_Client::write(const void *buf, uint16_t len, uint32_t flags)
{
  return send(_socket, buf, len, flags);
    2dd0:	fc 01       	movw	r30, r24
    2dd2:	e1 5b       	subi	r30, 0xB1	; 177
    2dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd6:	60 81       	ld	r22, Z
    2dd8:	71 81       	ldd	r23, Z+1	; 0x01
    2dda:	82 81       	ldd	r24, Z+2	; 0x02
    2ddc:	93 81       	ldd	r25, Z+3	; 0x03
    2dde:	8a 01       	movw	r16, r20
    2de0:	20 e0       	ldi	r18, 0x00	; 0
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	ad 01       	movw	r20, r26
    2de6:	cc 24       	eor	r12, r12
    2de8:	dd 24       	eor	r13, r13
    2dea:	76 01       	movw	r14, r12
    2dec:	0e 94 ce 10 	call	0x219c	; 0x219c <send>
}

size_t Adafruit_CC3000_Client::write(const uint8_t *buf, size_t len)
{
  return write(buf, len, 0);
}
    2df0:	1f 91       	pop	r17
    2df2:	0f 91       	pop	r16
    2df4:	ff 90       	pop	r15
    2df6:	ef 90       	pop	r14
    2df8:	df 90       	pop	r13
    2dfa:	cf 90       	pop	r12
    2dfc:	08 95       	ret

00002dfe <_ZN22Adafruit_CC3000_Client7connectE9IPAddressj>:
    return connect(ip, port);
  else 
    return 0;
}

int Adafruit_CC3000_Client::connect(IPAddress destIP, uint16_t destPort)
    2dfe:	6f 92       	push	r6
    2e00:	7f 92       	push	r7
    2e02:	8f 92       	push	r8
    2e04:	9f 92       	push	r9
    2e06:	af 92       	push	r10
    2e08:	bf 92       	push	r11
    2e0a:	cf 92       	push	r12
    2e0c:	df 92       	push	r13
    2e0e:	ef 92       	push	r14
    2e10:	ff 92       	push	r15
    2e12:	0f 93       	push	r16
    2e14:	1f 93       	push	r17
    2e16:	df 93       	push	r29
    2e18:	cf 93       	push	r28
    2e1a:	cd b7       	in	r28, 0x3d	; 61
    2e1c:	de b7       	in	r29, 0x3e	; 62
    2e1e:	60 97       	sbiw	r28, 0x10	; 16
    2e20:	0f b6       	in	r0, 0x3f	; 63
    2e22:	f8 94       	cli
    2e24:	de bf       	out	0x3e, r29	; 62
    2e26:	0f be       	out	0x3f, r0	; 63
    2e28:	cd bf       	out	0x3d, r28	; 61
    2e2a:	5c 01       	movw	r10, r24
    2e2c:	4b 01       	movw	r8, r22
    2e2e:	3a 01       	movw	r6, r20
  // The only difference is it resets the client's buffers to be empty, and then implements the
  // same logic as connect.
  // TODO: Refactor this entire function away so there is a single common function for connecting
  // to a TCP socket that both this function and the connectTCP function will use.

  bufsiz = 0;
    2e30:	8d e4       	ldi	r24, 0x4D	; 77
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	a8 0e       	add	r10, r24
    2e36:	b9 1e       	adc	r11, r25
    2e38:	d5 01       	movw	r26, r10
    2e3a:	1d 92       	st	X+, r1
    2e3c:	1c 92       	st	X, r1
  _rx_buf_idx = 0;
    2e3e:	f5 01       	movw	r30, r10
    2e40:	12 92       	st	-Z, r1
    2e42:	5f 01       	movw	r10, r30
    2e44:	84 eb       	ldi	r24, 0xB4	; 180
    2e46:	9f ef       	ldi	r25, 0xFF	; 255
    2e48:	a8 0e       	add	r10, r24
    2e4a:	b9 1e       	adc	r11, r25
  sockaddr      socketAddress;
  int32_t       tcp_socket;

  // Create the socket(s)
  //if (CC3KPrinter != 0) CC3KPrinter->print(F("Creating socket ... "));
  tcp_socket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    2e4c:	62 e0       	ldi	r22, 0x02	; 2
    2e4e:	70 e0       	ldi	r23, 0x00	; 0
    2e50:	80 e0       	ldi	r24, 0x00	; 0
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	21 e0       	ldi	r18, 0x01	; 1
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	40 e0       	ldi	r20, 0x00	; 0
    2e5a:	50 e0       	ldi	r21, 0x00	; 0
    2e5c:	e6 e0       	ldi	r30, 0x06	; 6
    2e5e:	ee 2e       	mov	r14, r30
    2e60:	f1 2c       	mov	r15, r1
    2e62:	01 2d       	mov	r16, r1
    2e64:	11 2d       	mov	r17, r1
    2e66:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <socket>
    2e6a:	6b 01       	movw	r12, r22
    2e6c:	7c 01       	movw	r14, r24
  if (-1 == tcp_socket)
    2e6e:	9f ef       	ldi	r25, 0xFF	; 255
    2e70:	c9 16       	cp	r12, r25
    2e72:	9f ef       	ldi	r25, 0xFF	; 255
    2e74:	d9 06       	cpc	r13, r25
    2e76:	9f ef       	ldi	r25, 0xFF	; 255
    2e78:	e9 06       	cpc	r14, r25
    2e7a:	9f ef       	ldi	r25, 0xFF	; 255
    2e7c:	f9 06       	cpc	r15, r25
    2e7e:	c9 f1       	breq	.+114    	; 0x2ef2 <_ZN22Adafruit_CC3000_Client7connectE9IPAddressj+0xf4>
    }
    return 0;
  }
  //CC3KPrinter->print(F("DONE (socket ")); CC3KPrinter->print(tcp_socket); CC3KPrinter->println(F(")"));

  closed_sockets[tcp_socket] = false; // Clear any previous closed event
    2e80:	f6 01       	movw	r30, r12
    2e82:	e9 54       	subi	r30, 0x49	; 73
    2e84:	fb 4f       	sbci	r31, 0xFB	; 251
    2e86:	10 82       	st	Z, r1

  // Try to open the socket
  memset(&socketAddress, 0x00, sizeof(socketAddress));
    2e88:	8e 01       	movw	r16, r28
    2e8a:	0f 5f       	subi	r16, 0xFF	; 255
    2e8c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e8e:	80 e1       	ldi	r24, 0x10	; 16
    2e90:	d8 01       	movw	r26, r16
    2e92:	1d 92       	st	X+, r1
    2e94:	8a 95       	dec	r24
    2e96:	e9 f7       	brne	.-6      	; 0x2e92 <_ZN22Adafruit_CC3000_Client7connectE9IPAddressj+0x94>
  socketAddress.sa_family = AF_INET;
    2e98:	82 e0       	ldi	r24, 0x02	; 2
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	9a 83       	std	Y+2, r25	; 0x02
    2e9e:	89 83       	std	Y+1, r24	; 0x01
  socketAddress.sa_data[0] = (destPort & 0xFF00) >> 8;  // Set the Port Number
    2ea0:	7b 82       	std	Y+3, r7	; 0x03
  socketAddress.sa_data[1] = (destPort & 0x00FF);
    2ea2:	6c 82       	std	Y+4, r6	; 0x04
  socketAddress.sa_data[2] = destIP >> 24;
    2ea4:	f4 01       	movw	r30, r8
    2ea6:	82 81       	ldd	r24, Z+2	; 0x02
    2ea8:	93 81       	ldd	r25, Z+3	; 0x03
    2eaa:	a4 81       	ldd	r26, Z+4	; 0x04
    2eac:	b5 81       	ldd	r27, Z+5	; 0x05
    2eae:	2b 2f       	mov	r18, r27
    2eb0:	33 27       	eor	r19, r19
    2eb2:	44 27       	eor	r20, r20
    2eb4:	55 27       	eor	r21, r21
    2eb6:	2d 83       	std	Y+5, r18	; 0x05
  socketAddress.sa_data[3] = destIP >> 16;
    2eb8:	9d 01       	movw	r18, r26
    2eba:	44 27       	eor	r20, r20
    2ebc:	55 27       	eor	r21, r21
    2ebe:	2e 83       	std	Y+6, r18	; 0x06
  socketAddress.sa_data[4] = destIP >> 8;
    2ec0:	89 2f       	mov	r24, r25
    2ec2:	9a 2f       	mov	r25, r26
    2ec4:	ab 2f       	mov	r26, r27
    2ec6:	bb 27       	eor	r27, r27
    2ec8:	8f 83       	std	Y+7, r24	; 0x07
  socketAddress.sa_data[5] = destIP;
    2eca:	82 81       	ldd	r24, Z+2	; 0x02
    2ecc:	88 87       	std	Y+8, r24	; 0x08
    CC3KPrinter->println(destPort);
  }

  //printHex((byte *)&socketAddress, sizeof(socketAddress));
  //if (CC3KPrinter != 0) CC3KPrinter->print(F("Connecting socket ... "));
  if (-1 == ::connect(tcp_socket, &socketAddress, sizeof(socketAddress)))
    2ece:	c7 01       	movw	r24, r14
    2ed0:	b6 01       	movw	r22, r12
    2ed2:	a8 01       	movw	r20, r16
    2ed4:	00 e1       	ldi	r16, 0x10	; 16
    2ed6:	10 e0       	ldi	r17, 0x00	; 0
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <connect>
    2ee0:	6f 5f       	subi	r22, 0xFF	; 255
    2ee2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ee4:	8f 4f       	sbci	r24, 0xFF	; 255
    2ee6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ee8:	39 f4       	brne	.+14     	; 0x2ef8 <_ZN22Adafruit_CC3000_Client7connectE9IPAddressj+0xfa>
  {
    CHECK_PRINTER {
      CC3KPrinter->println(F("Connection error"));
    }
    closesocket(tcp_socket);
    2eea:	c7 01       	movw	r24, r14
    2eec:	b6 01       	movw	r22, r12
    2eee:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <closesocket>
    2ef2:	20 e0       	ldi	r18, 0x00	; 0
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	0c c0       	rjmp	.+24     	; 0x2f10 <_ZN22Adafruit_CC3000_Client7connectE9IPAddressj+0x112>
    return 0;
  }
  // if (CC3KPrinter != 0) CC3KPrinter->println(F("DONE"));

  _socket = tcp_socket;
    2ef8:	8f e4       	ldi	r24, 0x4F	; 79
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	a8 0e       	add	r10, r24
    2efe:	b9 1e       	adc	r11, r25
    2f00:	d5 01       	movw	r26, r10
    2f02:	cd 92       	st	X+, r12
    2f04:	dd 92       	st	X+, r13
    2f06:	ed 92       	st	X+, r14
    2f08:	fc 92       	st	X, r15
    2f0a:	13 97       	sbiw	r26, 0x03	; 3
    2f0c:	21 e0       	ldi	r18, 0x01	; 1
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
  return 1;
}
    2f10:	c9 01       	movw	r24, r18
    2f12:	60 96       	adiw	r28, 0x10	; 16
    2f14:	0f b6       	in	r0, 0x3f	; 63
    2f16:	f8 94       	cli
    2f18:	de bf       	out	0x3e, r29	; 62
    2f1a:	0f be       	out	0x3f, r0	; 63
    2f1c:	cd bf       	out	0x3d, r28	; 61
    2f1e:	cf 91       	pop	r28
    2f20:	df 91       	pop	r29
    2f22:	1f 91       	pop	r17
    2f24:	0f 91       	pop	r16
    2f26:	ff 90       	pop	r15
    2f28:	ef 90       	pop	r14
    2f2a:	df 90       	pop	r13
    2f2c:	cf 90       	pop	r12
    2f2e:	bf 90       	pop	r11
    2f30:	af 90       	pop	r10
    2f32:	9f 90       	pop	r9
    2f34:	8f 90       	pop	r8
    2f36:	7f 90       	pop	r7
    2f38:	6f 90       	pop	r6
    2f3a:	08 95       	ret

00002f3c <_ZN15Adafruit_CC30009checkDHCPEv>:
    Checks if the DHCP process is complete or not

    @returns  True if DHCP process is complete (IP address assigned)
*/
/**************************************************************************/
bool Adafruit_CC3000::checkDHCP(void)
    2f3c:	df 93       	push	r29
    2f3e:	cf 93       	push	r28
    2f40:	00 d0       	rcall	.+0      	; 0x2f42 <_ZN15Adafruit_CC30009checkDHCPEv+0x6>
    2f42:	00 d0       	rcall	.+0      	; 0x2f44 <_ZN15Adafruit_CC30009checkDHCPEv+0x8>
    2f44:	cd b7       	in	r28, 0x3d	; 61
    2f46:	de b7       	in	r29, 0x3e	; 62
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    2f48:	80 91 d7 04 	lds	r24, 0x04D7
  // but for some reason this call is necessary or else UDP won't 
  // work.  See this thread from TI for more details and the genesis
  // of the workaround: http://e2e.ti.com/support/wireless_connectivity/f/851/t/342177.aspx
  // Putting this in checkDHCP is a nice way to make it just work
  // for people without any need to add to their sketch.
  if (cc3000Bitset.test(CC3000BitSet::HasDHCP)) {
    2f4c:	82 ff       	sbrs	r24, 2
    2f4e:	09 c0       	rjmp	.+18     	; 0x2f62 <_ZN15Adafruit_CC30009checkDHCPEv+0x26>
    uint32_t output;
    gethostbyname("localhost", 9, &output);
    2f50:	83 e0       	ldi	r24, 0x03	; 3
    2f52:	91 e0       	ldi	r25, 0x01	; 1
    2f54:	69 e0       	ldi	r22, 0x09	; 9
    2f56:	70 e0       	ldi	r23, 0x00	; 0
    2f58:	ae 01       	movw	r20, r28
    2f5a:	4f 5f       	subi	r20, 0xFF	; 255
    2f5c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f5e:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <gethostbyname>
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    2f62:	80 91 d7 04 	lds	r24, 0x04D7
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	96 95       	lsr	r25
    2f6a:	87 95       	ror	r24
    2f6c:	96 95       	lsr	r25
    2f6e:	87 95       	ror	r24
  if (cc3000Bitset.test(CC3000BitSet::HasDHCP)) {
    uint32_t output;
    gethostbyname("localhost", 9, &output);
  }
  return cc3000Bitset.test(CC3000BitSet::HasDHCP);
}
    2f70:	81 70       	andi	r24, 0x01	; 1
    2f72:	0f 90       	pop	r0
    2f74:	0f 90       	pop	r0
    2f76:	0f 90       	pop	r0
    2f78:	0f 90       	pop	r0
    2f7a:	cf 91       	pop	r28
    2f7c:	df 91       	pop	r29
    2f7e:	08 95       	ret

00002f80 <_ZN22Adafruit_CC3000_Client7connectEPKcj>:
Adafruit_CC3000_Client::operator bool()
{
  return connected();
}

int Adafruit_CC3000_Client::connect(const char *host, uint16_t port){
    2f80:	af 92       	push	r10
    2f82:	bf 92       	push	r11
    2f84:	cf 92       	push	r12
    2f86:	df 92       	push	r13
    2f88:	ef 92       	push	r14
    2f8a:	ff 92       	push	r15
    2f8c:	0f 93       	push	r16
    2f8e:	1f 93       	push	r17
    2f90:	df 93       	push	r29
    2f92:	cf 93       	push	r28
    2f94:	cd b7       	in	r28, 0x3d	; 61
    2f96:	de b7       	in	r29, 0x3e	; 62
    2f98:	2a 97       	sbiw	r28, 0x0a	; 10
    2f9a:	0f b6       	in	r0, 0x3f	; 63
    2f9c:	f8 94       	cli
    2f9e:	de bf       	out	0x3e, r29	; 62
    2fa0:	0f be       	out	0x3f, r0	; 63
    2fa2:	cd bf       	out	0x3d, r28	; 61
    2fa4:	6c 01       	movw	r12, r24
    2fa6:	cb 01       	movw	r24, r22
    2fa8:	5a 01       	movw	r10, r20
  
  // if (!_initialised) return 0;
  // if (!ulCC3000Connected) return 0;
  // if (!ulCC3000DHCP) return 0;

  uint32_t ip = 0;
    2faa:	19 82       	std	Y+1, r1	; 0x01
    2fac:	1a 82       	std	Y+2, r1	; 0x02
    2fae:	1b 82       	std	Y+3, r1	; 0x03
    2fb0:	1c 82       	std	Y+4, r1	; 0x04

  int16_t r = gethostbyname(host, strlen(host), &ip);
    2fb2:	db 01       	movw	r26, r22
    2fb4:	0d 90       	ld	r0, X+
    2fb6:	00 20       	and	r0, r0
    2fb8:	e9 f7       	brne	.-6      	; 0x2fb4 <_ZN22Adafruit_CC3000_Client7connectEPKcj+0x34>
    2fba:	11 97       	sbiw	r26, 0x01	; 1
    2fbc:	a6 1b       	sub	r26, r22
    2fbe:	b7 0b       	sbc	r27, r23
    2fc0:	bd 01       	movw	r22, r26
    2fc2:	ae 01       	movw	r20, r28
    2fc4:	4f 5f       	subi	r20, 0xFF	; 255
    2fc6:	5f 4f       	sbci	r21, 0xFF	; 255
    2fc8:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <gethostbyname>

  if (ip!=0 && r!=0)
    2fcc:	49 81       	ldd	r20, Y+1	; 0x01
    2fce:	5a 81       	ldd	r21, Y+2	; 0x02
    2fd0:	6b 81       	ldd	r22, Y+3	; 0x03
    2fd2:	7c 81       	ldd	r23, Y+4	; 0x04
    2fd4:	41 15       	cp	r20, r1
    2fd6:	51 05       	cpc	r21, r1
    2fd8:	61 05       	cpc	r22, r1
    2fda:	71 05       	cpc	r23, r1
    2fdc:	a1 f0       	breq	.+40     	; 0x3006 <_ZN22Adafruit_CC3000_Client7connectEPKcj+0x86>
    2fde:	89 2b       	or	r24, r25
    2fe0:	91 f0       	breq	.+36     	; 0x3006 <_ZN22Adafruit_CC3000_Client7connectEPKcj+0x86>
    return connect(ip, port);
    2fe2:	d6 01       	movw	r26, r12
    2fe4:	ed 91       	ld	r30, X+
    2fe6:	fc 91       	ld	r31, X
    2fe8:	e4 84       	ldd	r14, Z+12	; 0x0c
    2fea:	f5 84       	ldd	r15, Z+13	; 0x0d
    2fec:	8e 01       	movw	r16, r28
    2fee:	0b 5f       	subi	r16, 0xFB	; 251
    2ff0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ff2:	c8 01       	movw	r24, r16
    2ff4:	0e 94 fc 28 	call	0x51f8	; 0x51f8 <_ZN9IPAddressC1Em>
    2ff8:	c6 01       	movw	r24, r12
    2ffa:	b8 01       	movw	r22, r16
    2ffc:	a5 01       	movw	r20, r10
    2ffe:	f7 01       	movw	r30, r14
    3000:	09 95       	icall
    3002:	9c 01       	movw	r18, r24
    3004:	02 c0       	rjmp	.+4      	; 0x300a <_ZN22Adafruit_CC3000_Client7connectEPKcj+0x8a>
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	30 e0       	ldi	r19, 0x00	; 0
  else 
    return 0;
}
    300a:	c9 01       	movw	r24, r18
    300c:	2a 96       	adiw	r28, 0x0a	; 10
    300e:	0f b6       	in	r0, 0x3f	; 63
    3010:	f8 94       	cli
    3012:	de bf       	out	0x3e, r29	; 62
    3014:	0f be       	out	0x3f, r0	; 63
    3016:	cd bf       	out	0x3d, r28	; 61
    3018:	cf 91       	pop	r28
    301a:	df 91       	pop	r29
    301c:	1f 91       	pop	r17
    301e:	0f 91       	pop	r16
    3020:	ff 90       	pop	r15
    3022:	ef 90       	pop	r14
    3024:	df 90       	pop	r13
    3026:	cf 90       	pop	r12
    3028:	bf 90       	pop	r11
    302a:	af 90       	pop	r10
    302c:	08 95       	ret

0000302e <_ZN22Adafruit_CC3000_ClientaSERKS_>:
  bufsiz = copy.bufsiz;
  _rx_buf_idx = copy._rx_buf_idx;
  memcpy(_rx_buf, copy._rx_buf, RXBUFFERSIZE);
}

void Adafruit_CC3000_Client::operator=(const Adafruit_CC3000_Client& other) {
    302e:	cf 93       	push	r28
    3030:	df 93       	push	r29
    3032:	fc 01       	movw	r30, r24
    3034:	9b 01       	movw	r18, r22
  // Copy all the members to assign a new value to this client.
  _socket = other._socket;
    3036:	e1 5b       	subi	r30, 0xB1	; 177
    3038:	ff 4f       	sbci	r31, 0xFF	; 255
    303a:	21 5b       	subi	r18, 0xB1	; 177
    303c:	3f 4f       	sbci	r19, 0xFF	; 255
    303e:	e9 01       	movw	r28, r18
    3040:	88 81       	ld	r24, Y
    3042:	99 81       	ldd	r25, Y+1	; 0x01
    3044:	aa 81       	ldd	r26, Y+2	; 0x02
    3046:	bb 81       	ldd	r27, Y+3	; 0x03
    3048:	80 83       	st	Z, r24
    304a:	91 83       	std	Z+1, r25	; 0x01
    304c:	a2 83       	std	Z+2, r26	; 0x02
    304e:	b3 83       	std	Z+3, r27	; 0x03
  bufsiz = other.bufsiz;
    3050:	d9 01       	movw	r26, r18
    3052:	9e 91       	ld	r25, -X
    3054:	8e 91       	ld	r24, -X
    3056:	92 93       	st	-Z, r25
    3058:	82 93       	st	-Z, r24
  _rx_buf_idx = other._rx_buf_idx;
    305a:	ed 01       	movw	r28, r26
    305c:	8a 91       	ld	r24, -Y
    305e:	82 93       	st	-Z, r24
  memcpy(_rx_buf, other._rx_buf, RXBUFFERSIZE);
    3060:	e0 54       	subi	r30, 0x40	; 64
    3062:	f0 40       	sbci	r31, 0x00	; 0
    3064:	de 01       	movw	r26, r28
    3066:	a0 54       	subi	r26, 0x40	; 64
    3068:	b0 40       	sbci	r27, 0x00	; 0
    306a:	80 e4       	ldi	r24, 0x40	; 64
    306c:	0d 90       	ld	r0, X+
    306e:	01 92       	st	Z+, r0
    3070:	81 50       	subi	r24, 0x01	; 1
    3072:	e1 f7       	brne	.-8      	; 0x306c <_ZN22Adafruit_CC3000_ClientaSERKS_+0x3e>
}
    3074:	df 91       	pop	r29
    3076:	cf 91       	pop	r28
    3078:	08 95       	ret

0000307a <_Z21CC3000_UsynchCallbacklPch>:
//!
//! @brief  The function handles asynchronous events that come from CC3000
//!         device and operates a led for indicate
//
//*****************************************************************************
void CC3000_UsynchCallback(long lEventType, char * data, unsigned char length)
    307a:	ef 92       	push	r14
    307c:	ff 92       	push	r15
    307e:	0f 93       	push	r16
    3080:	1f 93       	push	r17
    3082:	7b 01       	movw	r14, r22
    3084:	8c 01       	movw	r16, r24
    3086:	fa 01       	movw	r30, r20
    3088:	42 2f       	mov	r20, r18
{
  if (lEventType == HCI_EVNT_WLAN_ASYNC_SIMPLE_CONFIG_DONE)
    308a:	80 e8       	ldi	r24, 0x80	; 128
    308c:	e8 16       	cp	r14, r24
    308e:	80 e8       	ldi	r24, 0x80	; 128
    3090:	f8 06       	cpc	r15, r24
    3092:	80 e0       	ldi	r24, 0x00	; 0
    3094:	08 07       	cpc	r16, r24
    3096:	80 e0       	ldi	r24, 0x00	; 0
    3098:	18 07       	cpc	r17, r24
    309a:	31 f4       	brne	.+12     	; 0x30a8 <_Z21CC3000_UsynchCallbacklPch+0x2e>
  bool test(const byte flag) {
    return (flags & flag) != 0;
  }

  void set(const byte flag) {
    flags |= flag;
    309c:	80 91 d7 04 	lds	r24, 0x04D7
    30a0:	81 60       	ori	r24, 0x01	; 1
    30a2:	80 93 d7 04 	sts	0x04D7, r24
    30a6:	2b c0       	rjmp	.+86     	; 0x30fe <_Z21CC3000_UsynchCallbacklPch+0x84>
  if (lEventType == HCI_EVNT_WLAN_ASYNC_SIMPLE_CONFIG_DONE)
  {
    cc3000Bitset.set(CC3000BitSet::IsSmartConfigFinished);
  }

  if (lEventType == HCI_EVNT_WLAN_UNSOL_CONNECT)
    30a8:	81 e0       	ldi	r24, 0x01	; 1
    30aa:	e8 16       	cp	r14, r24
    30ac:	80 e8       	ldi	r24, 0x80	; 128
    30ae:	f8 06       	cpc	r15, r24
    30b0:	80 e0       	ldi	r24, 0x00	; 0
    30b2:	08 07       	cpc	r16, r24
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	18 07       	cpc	r17, r24
    30b8:	31 f4       	brne	.+12     	; 0x30c6 <_Z21CC3000_UsynchCallbacklPch+0x4c>
  bool test(const byte flag) {
    return (flags & flag) != 0;
  }

  void set(const byte flag) {
    flags |= flag;
    30ba:	80 91 d7 04 	lds	r24, 0x04D7
    30be:	82 60       	ori	r24, 0x02	; 2
    30c0:	80 93 d7 04 	sts	0x04D7, r24
    30c4:	28 c0       	rjmp	.+80     	; 0x3116 <_Z21CC3000_UsynchCallbacklPch+0x9c>
  if (lEventType == HCI_EVNT_WLAN_UNSOL_CONNECT)
  {
    cc3000Bitset.set(CC3000BitSet::IsConnected);
  }

  if (lEventType == HCI_EVNT_WLAN_UNSOL_DISCONNECT)
    30c6:	82 e0       	ldi	r24, 0x02	; 2
    30c8:	e8 16       	cp	r14, r24
    30ca:	80 e8       	ldi	r24, 0x80	; 128
    30cc:	f8 06       	cpc	r15, r24
    30ce:	80 e0       	ldi	r24, 0x00	; 0
    30d0:	08 07       	cpc	r16, r24
    30d2:	80 e0       	ldi	r24, 0x00	; 0
    30d4:	18 07       	cpc	r17, r24
    30d6:	31 f4       	brne	.+12     	; 0x30e4 <_Z21CC3000_UsynchCallbacklPch+0x6a>
  void set(const byte flag) {
    flags |= flag;
  }

  void reset(const byte flag) {
    flags &= ~flag;
    30d8:	80 91 d7 04 	lds	r24, 0x04D7
    30dc:	89 7f       	andi	r24, 0xF9	; 249
    30de:	80 93 d7 04 	sts	0x04D7, r24
    30e2:	2f c0       	rjmp	.+94     	; 0x3142 <_Z21CC3000_UsynchCallbacklPch+0xc8>
  if (lEventType == HCI_EVNT_WLAN_UNSOL_DISCONNECT)
  {
    cc3000Bitset.reset(CC3000BitSet::IsConnected | CC3000BitSet::HasDHCP);
  }
  
  if (lEventType == HCI_EVNT_WLAN_UNSOL_DHCP)
    30e4:	80 e1       	ldi	r24, 0x10	; 16
    30e6:	e8 16       	cp	r14, r24
    30e8:	80 e8       	ldi	r24, 0x80	; 128
    30ea:	f8 06       	cpc	r15, r24
    30ec:	80 e0       	ldi	r24, 0x00	; 0
    30ee:	08 07       	cpc	r16, r24
    30f0:	80 e0       	ldi	r24, 0x00	; 0
    30f2:	18 07       	cpc	r17, r24
    30f4:	21 f4       	brne	.+8      	; 0x30fe <_Z21CC3000_UsynchCallbacklPch+0x84>
  bool test(const byte flag) {
    return (flags & flag) != 0;
  }

  void set(const byte flag) {
    flags |= flag;
    30f6:	80 91 d7 04 	lds	r24, 0x04D7
    30fa:	84 60       	ori	r24, 0x04	; 4
    30fc:	09 c0       	rjmp	.+18     	; 0x3110 <_Z21CC3000_UsynchCallbacklPch+0x96>
  if (lEventType == HCI_EVNT_WLAN_UNSOL_DHCP)
  {
    cc3000Bitset.set(CC3000BitSet::HasDHCP);
  }

  if (lEventType == HCI_EVENT_CC3000_CAN_SHUT_DOWN)
    30fe:	89 e9       	ldi	r24, 0x99	; 153
    3100:	e8 16       	cp	r14, r24
    3102:	f1 04       	cpc	r15, r1
    3104:	01 05       	cpc	r16, r1
    3106:	11 05       	cpc	r17, r1
    3108:	31 f4       	brne	.+12     	; 0x3116 <_Z21CC3000_UsynchCallbacklPch+0x9c>
  bool test(const byte flag) {
    return (flags & flag) != 0;
  }

  void set(const byte flag) {
    flags |= flag;
    310a:	80 91 d7 04 	lds	r24, 0x04D7
    310e:	88 60       	ori	r24, 0x08	; 8
    3110:	80 93 d7 04 	sts	0x04D7, r24
    3114:	28 c0       	rjmp	.+80     	; 0x3166 <_Z21CC3000_UsynchCallbacklPch+0xec>
  if (lEventType == HCI_EVENT_CC3000_CAN_SHUT_DOWN)
  {
    cc3000Bitset.set(CC3000BitSet::OkToShutDown);
  }

  if (lEventType == HCI_EVNT_WLAN_ASYNC_PING_REPORT)
    3116:	80 e4       	ldi	r24, 0x40	; 64
    3118:	e8 16       	cp	r14, r24
    311a:	80 e8       	ldi	r24, 0x80	; 128
    311c:	f8 06       	cpc	r15, r24
    311e:	80 e0       	ldi	r24, 0x00	; 0
    3120:	08 07       	cpc	r16, r24
    3122:	80 e0       	ldi	r24, 0x00	; 0
    3124:	18 07       	cpc	r17, r24
    3126:	69 f4       	brne	.+26     	; 0x3142 <_Z21CC3000_UsynchCallbacklPch+0xc8>
  {
    //PRINT_F("CC3000: Ping report\n\r");
    pingReportnum++;
    3128:	80 91 a2 04 	lds	r24, 0x04A2
    312c:	8f 5f       	subi	r24, 0xFF	; 255
    312e:	80 93 a2 04 	sts	0x04A2, r24
    memcpy(&pingReport, data, length);
    3132:	23 ea       	ldi	r18, 0xA3	; 163
    3134:	34 e0       	ldi	r19, 0x04	; 4
    3136:	c9 01       	movw	r24, r18
    3138:	bf 01       	movw	r22, r30
    313a:	50 e0       	ldi	r21, 0x00	; 0
    313c:	0e 94 0d 01 	call	0x21a	; 0x21a <memcpy>
    3140:	12 c0       	rjmp	.+36     	; 0x3166 <_Z21CC3000_UsynchCallbacklPch+0xec>
  }

  if (lEventType == HCI_EVNT_BSD_TCP_CLOSE_WAIT) {
    3142:	80 e0       	ldi	r24, 0x00	; 0
    3144:	e8 16       	cp	r14, r24
    3146:	88 e8       	ldi	r24, 0x88	; 136
    3148:	f8 06       	cpc	r15, r24
    314a:	80 e0       	ldi	r24, 0x00	; 0
    314c:	08 07       	cpc	r16, r24
    314e:	80 e0       	ldi	r24, 0x00	; 0
    3150:	18 07       	cpc	r17, r24
    3152:	49 f4       	brne	.+18     	; 0x3166 <_Z21CC3000_UsynchCallbacklPch+0xec>
    uint8_t socketnum;
    socketnum = data[0];
    3154:	40 81       	ld	r20, Z
    //PRINT_F("TCP Close wait #"); printDec(socketnum);
    if (socketnum < MAX_SOCKETS)
    3156:	40 32       	cpi	r20, 0x20	; 32
    3158:	30 f4       	brcc	.+12     	; 0x3166 <_Z21CC3000_UsynchCallbacklPch+0xec>
      closed_sockets[socketnum] = true;
    315a:	e4 2f       	mov	r30, r20
    315c:	f0 e0       	ldi	r31, 0x00	; 0
    315e:	e9 54       	subi	r30, 0x49	; 73
    3160:	fb 4f       	sbci	r31, 0xFB	; 251
    3162:	81 e0       	ldi	r24, 0x01	; 1
    3164:	80 83       	st	Z, r24
  }
}
    3166:	1f 91       	pop	r17
    3168:	0f 91       	pop	r16
    316a:	ff 90       	pop	r15
    316c:	ef 90       	pop	r14
    316e:	08 95       	ret

00003170 <_ZN15Adafruit_CC300012getIPAddressEPmS0_S0_S0_S0_>:
    @brief   Reads the current IP address

    @returns  False if an error occured!
*/
/**************************************************************************/
bool Adafruit_CC3000::getIPAddress(uint32_t *retip, uint32_t *netmask, uint32_t *gateway, uint32_t *dhcpserv, uint32_t *dnsserv)
    3170:	8f 92       	push	r8
    3172:	9f 92       	push	r9
    3174:	af 92       	push	r10
    3176:	bf 92       	push	r11
    3178:	cf 92       	push	r12
    317a:	df 92       	push	r13
    317c:	ef 92       	push	r14
    317e:	ff 92       	push	r15
    3180:	0f 93       	push	r16
    3182:	1f 93       	push	r17
    3184:	df 93       	push	r29
    3186:	cf 93       	push	r28
    3188:	cd b7       	in	r28, 0x3d	; 61
    318a:	de b7       	in	r29, 0x3e	; 62
    318c:	ea 97       	sbiw	r28, 0x3a	; 58
    318e:	0f b6       	in	r0, 0x3f	; 63
    3190:	f8 94       	cli
    3192:	de bf       	out	0x3e, r29	; 62
    3194:	0f be       	out	0x3f, r0	; 63
    3196:	cd bf       	out	0x3d, r28	; 61
    3198:	fc 01       	movw	r30, r24
    319a:	6b 01       	movw	r12, r22
    319c:	5a 01       	movw	r10, r20
    319e:	49 01       	movw	r8, r18
{
  if (!_initialised) return false;
    31a0:	80 81       	ld	r24, Z
    31a2:	88 23       	and	r24, r24
    31a4:	f1 f1       	breq	.+124    	; 0x3222 <_ZN15Adafruit_CC300012getIPAddressEPmS0_S0_S0_S0_+0xb2>
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    31a6:	80 91 d7 04 	lds	r24, 0x04D7
*/
/**************************************************************************/
bool Adafruit_CC3000::getIPAddress(uint32_t *retip, uint32_t *netmask, uint32_t *gateway, uint32_t *dhcpserv, uint32_t *dnsserv)
{
  if (!_initialised) return false;
  if (!cc3000Bitset.test(CC3000BitSet::IsConnected)) return false;
    31aa:	81 ff       	sbrs	r24, 1
    31ac:	3a c0       	rjmp	.+116    	; 0x3222 <_ZN15Adafruit_CC300012getIPAddressEPmS0_S0_S0_S0_+0xb2>
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    31ae:	80 91 d7 04 	lds	r24, 0x04D7
/**************************************************************************/
bool Adafruit_CC3000::getIPAddress(uint32_t *retip, uint32_t *netmask, uint32_t *gateway, uint32_t *dhcpserv, uint32_t *dnsserv)
{
  if (!_initialised) return false;
  if (!cc3000Bitset.test(CC3000BitSet::IsConnected)) return false;
  if (!cc3000Bitset.test(CC3000BitSet::HasDHCP)) return false;
    31b2:	82 ff       	sbrs	r24, 2
    31b4:	36 c0       	rjmp	.+108    	; 0x3222 <_ZN15Adafruit_CC300012getIPAddressEPmS0_S0_S0_S0_+0xb2>

  tNetappIpconfigRetArgs ipconfig;
  netapp_ipconfig(&ipconfig);
    31b6:	ce 01       	movw	r24, r28
    31b8:	01 96       	adiw	r24, 0x01	; 1
    31ba:	0e 94 60 09 	call	0x12c0	; 0x12c0 <netapp_ipconfig>

  /* If byte 1 is 0 we don't have a valid address */
  if (ipconfig.aucIP[3] == 0) return false;
    31be:	8c 81       	ldd	r24, Y+4	; 0x04
    31c0:	88 23       	and	r24, r24
    31c2:	79 f1       	breq	.+94     	; 0x3222 <_ZN15Adafruit_CC300012getIPAddressEPmS0_S0_S0_S0_+0xb2>

  memcpy(retip, ipconfig.aucIP, 4);
    31c4:	89 81       	ldd	r24, Y+1	; 0x01
    31c6:	9a 81       	ldd	r25, Y+2	; 0x02
    31c8:	ab 81       	ldd	r26, Y+3	; 0x03
    31ca:	bc 81       	ldd	r27, Y+4	; 0x04
    31cc:	f6 01       	movw	r30, r12
    31ce:	80 83       	st	Z, r24
    31d0:	91 83       	std	Z+1, r25	; 0x01
    31d2:	a2 83       	std	Z+2, r26	; 0x02
    31d4:	b3 83       	std	Z+3, r27	; 0x03
  memcpy(netmask, ipconfig.aucSubnetMask, 4);
    31d6:	8d 81       	ldd	r24, Y+5	; 0x05
    31d8:	9e 81       	ldd	r25, Y+6	; 0x06
    31da:	af 81       	ldd	r26, Y+7	; 0x07
    31dc:	b8 85       	ldd	r27, Y+8	; 0x08
    31de:	f5 01       	movw	r30, r10
    31e0:	80 83       	st	Z, r24
    31e2:	91 83       	std	Z+1, r25	; 0x01
    31e4:	a2 83       	std	Z+2, r26	; 0x02
    31e6:	b3 83       	std	Z+3, r27	; 0x03
  memcpy(gateway, ipconfig.aucDefaultGateway, 4);
    31e8:	89 85       	ldd	r24, Y+9	; 0x09
    31ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ec:	ab 85       	ldd	r26, Y+11	; 0x0b
    31ee:	bc 85       	ldd	r27, Y+12	; 0x0c
    31f0:	f4 01       	movw	r30, r8
    31f2:	80 83       	st	Z, r24
    31f4:	91 83       	std	Z+1, r25	; 0x01
    31f6:	a2 83       	std	Z+2, r26	; 0x02
    31f8:	b3 83       	std	Z+3, r27	; 0x03
  memcpy(dhcpserv, ipconfig.aucDHCPServer, 4);
    31fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    31fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    31fe:	af 85       	ldd	r26, Y+15	; 0x0f
    3200:	b8 89       	ldd	r27, Y+16	; 0x10
    3202:	f8 01       	movw	r30, r16
    3204:	80 83       	st	Z, r24
    3206:	91 83       	std	Z+1, r25	; 0x01
    3208:	a2 83       	std	Z+2, r26	; 0x02
    320a:	b3 83       	std	Z+3, r27	; 0x03
  memcpy(dnsserv, ipconfig.aucDNSServer, 4);
    320c:	89 89       	ldd	r24, Y+17	; 0x11
    320e:	9a 89       	ldd	r25, Y+18	; 0x12
    3210:	ab 89       	ldd	r26, Y+19	; 0x13
    3212:	bc 89       	ldd	r27, Y+20	; 0x14
    3214:	f7 01       	movw	r30, r14
    3216:	80 83       	st	Z, r24
    3218:	91 83       	std	Z+1, r25	; 0x01
    321a:	a2 83       	std	Z+2, r26	; 0x02
    321c:	b3 83       	std	Z+3, r27	; 0x03
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	01 c0       	rjmp	.+2      	; 0x3224 <_ZN15Adafruit_CC300012getIPAddressEPmS0_S0_S0_S0_+0xb4>

  return true;
    3222:	80 e0       	ldi	r24, 0x00	; 0
}
    3224:	ea 96       	adiw	r28, 0x3a	; 58
    3226:	0f b6       	in	r0, 0x3f	; 63
    3228:	f8 94       	cli
    322a:	de bf       	out	0x3e, r29	; 62
    322c:	0f be       	out	0x3f, r0	; 63
    322e:	cd bf       	out	0x3d, r28	; 61
    3230:	cf 91       	pop	r28
    3232:	df 91       	pop	r29
    3234:	1f 91       	pop	r17
    3236:	0f 91       	pop	r16
    3238:	ff 90       	pop	r15
    323a:	ef 90       	pop	r14
    323c:	df 90       	pop	r13
    323e:	cf 90       	pop	r12
    3240:	bf 90       	pop	r11
    3242:	af 90       	pop	r10
    3244:	9f 90       	pop	r9
    3246:	8f 90       	pop	r8
    3248:	08 95       	ret

0000324a <_ZN15Adafruit_CC300013connectSecureEPKcS1_l>:

    @returns  False if an error occured!
*/
/**************************************************************************/
#ifndef CC3000_TINY_DRIVER
bool Adafruit_CC3000::connectSecure(const char *ssid, const char *key, int32_t secMode)
    324a:	2f 92       	push	r2
    324c:	3f 92       	push	r3
    324e:	4f 92       	push	r4
    3250:	5f 92       	push	r5
    3252:	6f 92       	push	r6
    3254:	7f 92       	push	r7
    3256:	8f 92       	push	r8
    3258:	9f 92       	push	r9
    325a:	af 92       	push	r10
    325c:	bf 92       	push	r11
    325e:	cf 92       	push	r12
    3260:	df 92       	push	r13
    3262:	ef 92       	push	r14
    3264:	ff 92       	push	r15
    3266:	0f 93       	push	r16
    3268:	1f 93       	push	r17
    326a:	fc 01       	movw	r30, r24
    326c:	d6 2e       	mov	r13, r22
    326e:	c7 2e       	mov	r12, r23
    3270:	34 2e       	mov	r3, r20
    3272:	25 2e       	mov	r2, r21
{
  if (!_initialised) {
    3274:	80 81       	ld	r24, Z
    3276:	88 23       	and	r24, r24
    3278:	09 f4       	brne	.+2      	; 0x327c <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0x32>
    327a:	66 c0       	rjmp	.+204    	; 0x3348 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0xfe>
    return false;
  }
  
  if ( (secMode < 0) || (secMode > 3)) {
    327c:	28 01       	movw	r4, r16
    327e:	39 01       	movw	r6, r18
    3280:	84 e0       	ldi	r24, 0x04	; 4
    3282:	48 16       	cp	r4, r24
    3284:	51 04       	cpc	r5, r1
    3286:	61 04       	cpc	r6, r1
    3288:	71 04       	cpc	r7, r1
    328a:	08 f0       	brcs	.+2      	; 0x328e <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0x44>
    328c:	5d c0       	rjmp	.+186    	; 0x3348 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0xfe>
      CC3KPrinter->println(F("Security mode must be between 0 and 3"));
    }
    return false;
  }

  if (strlen(ssid) > MAXSSID) {
    328e:	a6 2f       	mov	r26, r22
    3290:	b7 2f       	mov	r27, r23
    3292:	fd 01       	movw	r30, r26
    3294:	01 90       	ld	r0, Z+
    3296:	00 20       	and	r0, r0
    3298:	e9 f7       	brne	.-6      	; 0x3294 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0x4a>
    329a:	31 97       	sbiw	r30, 0x01	; 1
    329c:	ea 1b       	sub	r30, r26
    329e:	fb 0b       	sbc	r31, r27
    32a0:	b1 97       	sbiw	r30, 0x21	; 33
    32a2:	08 f0       	brcs	.+2      	; 0x32a6 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0x5c>
    32a4:	51 c0       	rjmp	.+162    	; 0x3348 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0xfe>
      CC3KPrinter->println(MAXSSID);
    }
    return false;
  }

  if (strlen(key) > MAXLENGTHKEY) {
    32a6:	a4 2f       	mov	r26, r20
    32a8:	b5 2f       	mov	r27, r21
    32aa:	fd 01       	movw	r30, r26
    32ac:	01 90       	ld	r0, Z+
    32ae:	00 20       	and	r0, r0
    32b0:	e9 f7       	brne	.-6      	; 0x32ac <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0x62>
    32b2:	31 97       	sbiw	r30, 0x01	; 1
    32b4:	ea 1b       	sub	r30, r26
    32b6:	fb 0b       	sbc	r31, r27
    32b8:	b1 97       	sbiw	r30, 0x21	; 33
    32ba:	08 f0       	brcs	.+2      	; 0x32be <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0x74>
    32bc:	45 c0       	rjmp	.+138    	; 0x3348 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0xfe>
      CC3KPrinter->println(MAXLENGTHKEY);
    }
    return false;
  }

  CHECK_SUCCESS(wlan_ioctl_set_connection_policy(0, 0, 0),
    32be:	60 e0       	ldi	r22, 0x00	; 0
    32c0:	70 e0       	ldi	r23, 0x00	; 0
    32c2:	80 e0       	ldi	r24, 0x00	; 0
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	20 e0       	ldi	r18, 0x00	; 0
    32c8:	30 e0       	ldi	r19, 0x00	; 0
    32ca:	40 e0       	ldi	r20, 0x00	; 0
    32cc:	50 e0       	ldi	r21, 0x00	; 0
    32ce:	ee 24       	eor	r14, r14
    32d0:	ff 24       	eor	r15, r15
    32d2:	87 01       	movw	r16, r14
    32d4:	0e 94 55 12 	call	0x24aa	; 0x24aa <wlan_ioctl_set_connection_policy>
    32d8:	61 15       	cp	r22, r1
    32da:	71 05       	cpc	r23, r1
    32dc:	81 05       	cpc	r24, r1
    32de:	91 05       	cpc	r25, r1
    32e0:	99 f5       	brne	.+102    	; 0x3348 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0xfe>
                "Failed setting the connection policy",
                false);
  delay(500);
    32e2:	64 ef       	ldi	r22, 0xF4	; 244
    32e4:	71 e0       	ldi	r23, 0x01	; 1
    32e6:	80 e0       	ldi	r24, 0x00	; 0
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <delay>
  CHECK_SUCCESS(wlan_connect(secMode, (char *)ssid, strlen(ssid),
    32ee:	ed 2d       	mov	r30, r13
    32f0:	fc 2d       	mov	r31, r12
    32f2:	df 01       	movw	r26, r30
    32f4:	0d 90       	ld	r0, X+
    32f6:	00 20       	and	r0, r0
    32f8:	e9 f7       	brne	.-6      	; 0x32f4 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0xaa>
    32fa:	8d 01       	movw	r16, r26
    32fc:	01 50       	subi	r16, 0x01	; 1
    32fe:	10 40       	sbci	r17, 0x00	; 0
    3300:	0e 1b       	sub	r16, r30
    3302:	1f 0b       	sbc	r17, r31
    3304:	e3 2d       	mov	r30, r3
    3306:	f2 2d       	mov	r31, r2
    3308:	df 01       	movw	r26, r30
    330a:	0d 90       	ld	r0, X+
    330c:	00 20       	and	r0, r0
    330e:	e9 f7       	brne	.-6      	; 0x330a <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0xc0>
    3310:	4d 01       	movw	r8, r26
    3312:	08 94       	sec
    3314:	81 08       	sbc	r8, r1
    3316:	91 08       	sbc	r9, r1
    3318:	8e 1a       	sub	r8, r30
    331a:	9f 0a       	sbc	r9, r31
    331c:	20 e0       	ldi	r18, 0x00	; 0
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	aa 24       	eor	r10, r10
    3322:	bb 24       	eor	r11, r11
    3324:	c3 01       	movw	r24, r6
    3326:	b2 01       	movw	r22, r4
    3328:	4d 2d       	mov	r20, r13
    332a:	5c 2d       	mov	r21, r12
    332c:	ee 24       	eor	r14, r14
    332e:	ff 24       	eor	r15, r15
    3330:	c3 2c       	mov	r12, r3
    3332:	d2 2c       	mov	r13, r2
    3334:	0e 94 ad 12 	call	0x255a	; 0x255a <wlan_connect>
    3338:	20 e0       	ldi	r18, 0x00	; 0
    333a:	61 15       	cp	r22, r1
    333c:	71 05       	cpc	r23, r1
    333e:	81 05       	cpc	r24, r1
    3340:	91 05       	cpc	r25, r1
    3342:	19 f4       	brne	.+6      	; 0x334a <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0x100>
    3344:	21 e0       	ldi	r18, 0x01	; 1
    3346:	01 c0       	rjmp	.+2      	; 0x334a <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0x100>
    3348:	20 e0       	ldi	r18, 0x00	; 0
                "SSID connection failed", false);

  /* Wait for 'HCI_EVNT_WLAN_UNSOL_CONNECT' in CC3000_UsynchCallback */

  return true;
}
    334a:	82 2f       	mov	r24, r18
    334c:	1f 91       	pop	r17
    334e:	0f 91       	pop	r16
    3350:	ff 90       	pop	r15
    3352:	ef 90       	pop	r14
    3354:	df 90       	pop	r13
    3356:	cf 90       	pop	r12
    3358:	bf 90       	pop	r11
    335a:	af 90       	pop	r10
    335c:	9f 90       	pop	r9
    335e:	8f 90       	pop	r8
    3360:	7f 90       	pop	r7
    3362:	6f 90       	pop	r6
    3364:	5f 90       	pop	r5
    3366:	4f 90       	pop	r4
    3368:	3f 90       	pop	r3
    336a:	2f 90       	pop	r2
    336c:	08 95       	ret

0000336e <_ZN15Adafruit_CC300011connectOpenEPKc>:
    @param  ssid      The named of the AP to connect to (max 32 chars)

    @returns  False if an error occured!
*/
/**************************************************************************/
bool Adafruit_CC3000::connectOpen(const char *ssid)
    336e:	8f 92       	push	r8
    3370:	9f 92       	push	r9
    3372:	af 92       	push	r10
    3374:	bf 92       	push	r11
    3376:	cf 92       	push	r12
    3378:	df 92       	push	r13
    337a:	ef 92       	push	r14
    337c:	ff 92       	push	r15
    337e:	0f 93       	push	r16
    3380:	1f 93       	push	r17
    3382:	fc 01       	movw	r30, r24
    3384:	d6 2e       	mov	r13, r22
    3386:	c7 2e       	mov	r12, r23
{
  if (!_initialised) {
    3388:	80 81       	ld	r24, Z
    338a:	88 23       	and	r24, r24
    338c:	e1 f1       	breq	.+120    	; 0x3406 <_ZN15Adafruit_CC300011connectOpenEPKc+0x98>
    return false;
  }

  #ifndef CC3000_TINY_DRIVER
    CHECK_SUCCESS(wlan_ioctl_set_connection_policy(0, 0, 0),
    338e:	60 e0       	ldi	r22, 0x00	; 0
    3390:	70 e0       	ldi	r23, 0x00	; 0
    3392:	80 e0       	ldi	r24, 0x00	; 0
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	20 e0       	ldi	r18, 0x00	; 0
    3398:	30 e0       	ldi	r19, 0x00	; 0
    339a:	40 e0       	ldi	r20, 0x00	; 0
    339c:	50 e0       	ldi	r21, 0x00	; 0
    339e:	ee 24       	eor	r14, r14
    33a0:	ff 24       	eor	r15, r15
    33a2:	87 01       	movw	r16, r14
    33a4:	0e 94 55 12 	call	0x24aa	; 0x24aa <wlan_ioctl_set_connection_policy>
    33a8:	61 15       	cp	r22, r1
    33aa:	71 05       	cpc	r23, r1
    33ac:	81 05       	cpc	r24, r1
    33ae:	91 05       	cpc	r25, r1
    33b0:	51 f5       	brne	.+84     	; 0x3406 <_ZN15Adafruit_CC300011connectOpenEPKc+0x98>
                 "Failed to set connection policy", false);
    delay(500);
    33b2:	64 ef       	ldi	r22, 0xF4	; 244
    33b4:	71 e0       	ldi	r23, 0x01	; 1
    33b6:	80 e0       	ldi	r24, 0x00	; 0
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <delay>
    CHECK_SUCCESS(wlan_connect(WLAN_SEC_UNSEC,
    33be:	ed 2d       	mov	r30, r13
    33c0:	fc 2d       	mov	r31, r12
    33c2:	df 01       	movw	r26, r30
    33c4:	0d 90       	ld	r0, X+
    33c6:	00 20       	and	r0, r0
    33c8:	e9 f7       	brne	.-6      	; 0x33c4 <_ZN15Adafruit_CC300011connectOpenEPKc+0x56>
    33ca:	8d 01       	movw	r16, r26
    33cc:	01 50       	subi	r16, 0x01	; 1
    33ce:	10 40       	sbci	r17, 0x00	; 0
    33d0:	0e 1b       	sub	r16, r30
    33d2:	1f 0b       	sbc	r17, r31
    33d4:	20 e0       	ldi	r18, 0x00	; 0
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	60 e0       	ldi	r22, 0x00	; 0
    33da:	70 e0       	ldi	r23, 0x00	; 0
    33dc:	80 e0       	ldi	r24, 0x00	; 0
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	4d 2d       	mov	r20, r13
    33e2:	5c 2d       	mov	r21, r12
    33e4:	ee 24       	eor	r14, r14
    33e6:	ff 24       	eor	r15, r15
    33e8:	cc 24       	eor	r12, r12
    33ea:	dd 24       	eor	r13, r13
    33ec:	88 24       	eor	r8, r8
    33ee:	99 24       	eor	r9, r9
    33f0:	54 01       	movw	r10, r8
    33f2:	0e 94 ad 12 	call	0x255a	; 0x255a <wlan_connect>
    33f6:	20 e0       	ldi	r18, 0x00	; 0
    33f8:	61 15       	cp	r22, r1
    33fa:	71 05       	cpc	r23, r1
    33fc:	81 05       	cpc	r24, r1
    33fe:	91 05       	cpc	r25, r1
    3400:	19 f4       	brne	.+6      	; 0x3408 <_ZN15Adafruit_CC300011connectOpenEPKc+0x9a>
    3402:	21 e0       	ldi	r18, 0x01	; 1
    3404:	01 c0       	rjmp	.+2      	; 0x3408 <_ZN15Adafruit_CC300011connectOpenEPKc+0x9a>
    3406:	20 e0       	ldi	r18, 0x00	; 0
  #else
    wlan_connect(ssid, strlen(ssid));
  #endif

  return true;
}
    3408:	82 2f       	mov	r24, r18
    340a:	1f 91       	pop	r17
    340c:	0f 91       	pop	r16
    340e:	ff 90       	pop	r15
    3410:	ef 90       	pop	r14
    3412:	df 90       	pop	r13
    3414:	cf 90       	pop	r12
    3416:	bf 90       	pop	r11
    3418:	af 90       	pop	r10
    341a:	9f 90       	pop	r9
    341c:	8f 90       	pop	r8
    341e:	08 95       	ret

00003420 <_ZN15Adafruit_CC300014printIPdotsRevEm>:
/*!
    @brief  Helper function to display an IP address with dots, printing
            the bytes in reverse order
*/
/**************************************************************************/
void Adafruit_CC3000::printIPdotsRev(uint32_t ip) {
    3420:	ef 92       	push	r14
    3422:	ff 92       	push	r15
    3424:	0f 93       	push	r16
    3426:	1f 93       	push	r17
    3428:	7a 01       	movw	r14, r20
    342a:	8b 01       	movw	r16, r22
  if (CC3KPrinter == 0) return;
    342c:	80 91 d8 04 	lds	r24, 0x04D8
    3430:	90 91 d9 04 	lds	r25, 0x04D9
    3434:	00 97       	sbiw	r24, 0x00	; 0
    3436:	09 f4       	brne	.+2      	; 0x343a <_ZN15Adafruit_CC300014printIPdotsRevEm+0x1a>
    3438:	40 c0       	rjmp	.+128    	; 0x34ba <_ZN15Adafruit_CC300014printIPdotsRevEm+0x9a>
  CC3KPrinter->print((uint8_t)(ip >> 24));
    343a:	27 2f       	mov	r18, r23
    343c:	33 27       	eor	r19, r19
    343e:	44 27       	eor	r20, r20
    3440:	55 27       	eor	r21, r21
    3442:	62 2f       	mov	r22, r18
    3444:	4a e0       	ldi	r20, 0x0A	; 10
    3446:	50 e0       	ldi	r21, 0x00	; 0
    3448:	0e 94 47 2a 	call	0x548e	; 0x548e <_ZN5Print5printEhi>
  CC3KPrinter->print('.');
    344c:	80 91 d8 04 	lds	r24, 0x04D8
    3450:	90 91 d9 04 	lds	r25, 0x04D9
    3454:	6e e2       	ldi	r22, 0x2E	; 46
    3456:	0e 94 5f 29 	call	0x52be	; 0x52be <_ZN5Print5printEc>
  CC3KPrinter->print((uint8_t)(ip >> 16));
    345a:	98 01       	movw	r18, r16
    345c:	44 27       	eor	r20, r20
    345e:	55 27       	eor	r21, r21
    3460:	80 91 d8 04 	lds	r24, 0x04D8
    3464:	90 91 d9 04 	lds	r25, 0x04D9
    3468:	62 2f       	mov	r22, r18
    346a:	4a e0       	ldi	r20, 0x0A	; 10
    346c:	50 e0       	ldi	r21, 0x00	; 0
    346e:	0e 94 47 2a 	call	0x548e	; 0x548e <_ZN5Print5printEhi>
  CC3KPrinter->print('.');
    3472:	80 91 d8 04 	lds	r24, 0x04D8
    3476:	90 91 d9 04 	lds	r25, 0x04D9
    347a:	6e e2       	ldi	r22, 0x2E	; 46
    347c:	0e 94 5f 29 	call	0x52be	; 0x52be <_ZN5Print5printEc>
  CC3KPrinter->print((uint8_t)(ip >> 8));
    3480:	55 27       	eor	r21, r21
    3482:	41 2f       	mov	r20, r17
    3484:	30 2f       	mov	r19, r16
    3486:	2f 2d       	mov	r18, r15
    3488:	80 91 d8 04 	lds	r24, 0x04D8
    348c:	90 91 d9 04 	lds	r25, 0x04D9
    3490:	62 2f       	mov	r22, r18
    3492:	4a e0       	ldi	r20, 0x0A	; 10
    3494:	50 e0       	ldi	r21, 0x00	; 0
    3496:	0e 94 47 2a 	call	0x548e	; 0x548e <_ZN5Print5printEhi>
  CC3KPrinter->print('.');
    349a:	80 91 d8 04 	lds	r24, 0x04D8
    349e:	90 91 d9 04 	lds	r25, 0x04D9
    34a2:	6e e2       	ldi	r22, 0x2E	; 46
    34a4:	0e 94 5f 29 	call	0x52be	; 0x52be <_ZN5Print5printEc>
  CC3KPrinter->print((uint8_t)(ip));  
    34a8:	80 91 d8 04 	lds	r24, 0x04D8
    34ac:	90 91 d9 04 	lds	r25, 0x04D9
    34b0:	6e 2d       	mov	r22, r14
    34b2:	4a e0       	ldi	r20, 0x0A	; 10
    34b4:	50 e0       	ldi	r21, 0x00	; 0
    34b6:	0e 94 47 2a 	call	0x548e	; 0x548e <_ZN5Print5printEhi>
}
    34ba:	1f 91       	pop	r17
    34bc:	0f 91       	pop	r16
    34be:	ff 90       	pop	r15
    34c0:	ef 90       	pop	r14
    34c2:	08 95       	ret

000034c4 <_ZN15Adafruit_CC30005beginEhbPKc>:
              that were stored on the device from the SmartConfig process,
              otherwise false to erase existing profiles and start a
              clean connection
*/
/**************************************************************************/
bool Adafruit_CC3000::begin(uint8_t patchReq, bool useSmartConfigData, const char *_deviceName)
    34c4:	6f 92       	push	r6
    34c6:	7f 92       	push	r7
    34c8:	8f 92       	push	r8
    34ca:	9f 92       	push	r9
    34cc:	af 92       	push	r10
    34ce:	bf 92       	push	r11
    34d0:	cf 92       	push	r12
    34d2:	df 92       	push	r13
    34d4:	ef 92       	push	r14
    34d6:	ff 92       	push	r15
    34d8:	0f 93       	push	r16
    34da:	1f 93       	push	r17
    34dc:	cf 93       	push	r28
    34de:	df 93       	push	r29
    34e0:	ec 01       	movw	r28, r24
    34e2:	96 2e       	mov	r9, r22
    34e4:	84 2e       	mov	r8, r20
    34e6:	72 2e       	mov	r7, r18
    34e8:	63 2e       	mov	r6, r19
{
  if (_initialised) return true;
    34ea:	88 81       	ld	r24, Y
    34ec:	88 23       	and	r24, r24
    34ee:	09 f0       	breq	.+2      	; 0x34f2 <_ZN15Adafruit_CC30005beginEhbPKc+0x2e>
    34f0:	91 c0       	rjmp	.+290    	; 0x3614 <_ZN15Adafruit_CC30005beginEhbPKc+0x150>
  #endif
  g_IRQnum = digitalPinToInterrupt(g_irqPin);
  #elif !defined(CORE_ADAX)
  // determine irq #
  for (uint8_t i=0; i<sizeof(dreqinttable); i+=2) {
    if (g_irqPin == dreqinttable[i]) {
    34f2:	90 91 9e 04 	lds	r25, 0x049E
    34f6:	80 91 a0 04 	lds	r24, 0x04A0
    34fa:	92 30       	cpi	r25, 0x02	; 2
    34fc:	11 f4       	brne	.+4      	; 0x3502 <_ZN15Adafruit_CC30005beginEhbPKc+0x3e>
      g_IRQnum = dreqinttable[i+1];
    34fe:	80 e0       	ldi	r24, 0x00	; 0
    3500:	03 c0       	rjmp	.+6      	; 0x3508 <_ZN15Adafruit_CC30005beginEhbPKc+0x44>
  #endif
  g_IRQnum = digitalPinToInterrupt(g_irqPin);
  #elif !defined(CORE_ADAX)
  // determine irq #
  for (uint8_t i=0; i<sizeof(dreqinttable); i+=2) {
    if (g_irqPin == dreqinttable[i]) {
    3502:	93 30       	cpi	r25, 0x03	; 3
    3504:	09 f4       	brne	.+2      	; 0x3508 <_ZN15Adafruit_CC30005beginEhbPKc+0x44>
      g_IRQnum = dreqinttable[i+1];
    3506:	81 e0       	ldi	r24, 0x01	; 1
    3508:	80 93 a0 04 	sts	0x04A0, r24
    }
  }
  if (g_IRQnum == 0xFF) {
    350c:	8f 3f       	cpi	r24, 0xFF	; 255
    350e:	09 f4       	brne	.+2      	; 0x3512 <_ZN15Adafruit_CC30005beginEhbPKc+0x4e>
    3510:	83 c0       	rjmp	.+262    	; 0x3618 <_ZN15Adafruit_CC30005beginEhbPKc+0x154>
  #else
  g_IRQnum = g_irqPin;
  // (almost) every single pin on Xmega supports interrupt
  #endif

  init_spi();
    3512:	0e 94 99 22 	call	0x4532	; 0x4532 <_Z8init_spiv>
  wlan_init(CC3000_UsynchCallback,
            sendWLFWPatch, sendDriverPatch, sendBootLoaderPatch,
            ReadWlanInterruptPin,
            WlanInterruptEnable,
            WlanInterruptDisable,
            WriteWlanPin);
    3516:	8d e3       	ldi	r24, 0x3D	; 61
    3518:	98 e1       	ldi	r25, 0x18	; 24
    351a:	6f e9       	ldi	r22, 0x9F	; 159
    351c:	7f e1       	ldi	r23, 0x1F	; 31
    351e:	4f e8       	ldi	r20, 0x8F	; 143
    3520:	5f e1       	ldi	r21, 0x1F	; 31
    3522:	27 e9       	ldi	r18, 0x97	; 151
    3524:	3f e1       	ldi	r19, 0x1F	; 31
    3526:	07 ea       	ldi	r16, 0xA7	; 167
    3528:	1f e1       	ldi	r17, 0x1F	; 31
    352a:	b5 e0       	ldi	r27, 0x05	; 5
    352c:	eb 2e       	mov	r14, r27
    352e:	b0 e2       	ldi	r27, 0x20	; 32
    3530:	fb 2e       	mov	r15, r27
    3532:	af eb       	ldi	r26, 0xBF	; 191
    3534:	ca 2e       	mov	r12, r26
    3536:	af e1       	ldi	r26, 0x1F	; 31
    3538:	da 2e       	mov	r13, r26
    353a:	f3 eb       	ldi	r31, 0xB3	; 179
    353c:	af 2e       	mov	r10, r31
    353e:	ff e1       	ldi	r31, 0x1F	; 31
    3540:	bf 2e       	mov	r11, r31
    3542:	0e 94 05 11 	call	0x220a	; 0x220a <wlan_init>
  DEBUGPRINT_F("start\n\r");

  wlan_start(patchReq);
    3546:	89 2d       	mov	r24, r9
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	0e 94 96 13 	call	0x272c	; 0x272c <wlan_start>
  
  DEBUGPRINT_F("ioctl\n\r");
  // Check if we should erase previous stored connection details
  // (most likely written with data from the SmartConfig app)
  if (!useSmartConfigData)
    354e:	88 20       	and	r8, r8
    3550:	a1 f4       	brne	.+40     	; 0x357a <_ZN15Adafruit_CC30005beginEhbPKc+0xb6>
  {
    // Manual connection only (no auto, profiles, etc.)
    wlan_ioctl_set_connection_policy(0, 0, 0);
    3552:	60 e0       	ldi	r22, 0x00	; 0
    3554:	70 e0       	ldi	r23, 0x00	; 0
    3556:	80 e0       	ldi	r24, 0x00	; 0
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	20 e0       	ldi	r18, 0x00	; 0
    355c:	30 e0       	ldi	r19, 0x00	; 0
    355e:	40 e0       	ldi	r20, 0x00	; 0
    3560:	50 e0       	ldi	r21, 0x00	; 0
    3562:	ee 24       	eor	r14, r14
    3564:	ff 24       	eor	r15, r15
    3566:	87 01       	movw	r16, r14
    3568:	0e 94 55 12 	call	0x24aa	; 0x24aa <wlan_ioctl_set_connection_policy>
    // Delete previous profiles from memory
    wlan_ioctl_del_profile(255);
    356c:	6f ef       	ldi	r22, 0xFF	; 255
    356e:	70 e0       	ldi	r23, 0x00	; 0
    3570:	80 e0       	ldi	r24, 0x00	; 0
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	0e 94 21 12 	call	0x2442	; 0x2442 <wlan_ioctl_del_profile>
    3578:	0f c0       	rjmp	.+30     	; 0x3598 <_ZN15Adafruit_CC30005beginEhbPKc+0xd4>
    
    // Fast Connect - the CC3000 device tries to reconnect to the last AP connected to:
    // wlan_ioctl_set_connection_policy(0, 1, 0)

    // Use Profiles - the CC3000 device tries to connect to an AP from profiles:
    wlan_ioctl_set_connection_policy(0, 0, 1);
    357a:	60 e0       	ldi	r22, 0x00	; 0
    357c:	70 e0       	ldi	r23, 0x00	; 0
    357e:	80 e0       	ldi	r24, 0x00	; 0
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	20 e0       	ldi	r18, 0x00	; 0
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	40 e0       	ldi	r20, 0x00	; 0
    3588:	50 e0       	ldi	r21, 0x00	; 0
    358a:	e1 e0       	ldi	r30, 0x01	; 1
    358c:	ee 2e       	mov	r14, r30
    358e:	f1 2c       	mov	r15, r1
    3590:	01 2d       	mov	r16, r1
    3592:	11 2d       	mov	r17, r1
    3594:	0e 94 55 12 	call	0x24aa	; 0x24aa <wlan_ioctl_set_connection_policy>
  }

  CHECK_SUCCESS(
    3598:	64 e0       	ldi	r22, 0x04	; 4
    359a:	72 e8       	ldi	r23, 0x82	; 130
    359c:	80 e0       	ldi	r24, 0x00	; 0
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	0e 94 39 11 	call	0x2272	; 0x2272 <wlan_set_event_mask>
    35a4:	61 15       	cp	r22, r1
    35a6:	71 05       	cpc	r23, r1
    35a8:	81 05       	cpc	r24, r1
    35aa:	91 05       	cpc	r25, r1
    35ac:	a9 f5       	brne	.+106    	; 0x3618 <_ZN15Adafruit_CC30005beginEhbPKc+0x154>
                        //HCI_EVNT_BSD_TCP_CLOSE_WAIT |
                        //HCI_EVNT_WLAN_TX_COMPLETE |
                        HCI_EVNT_WLAN_KEEPALIVE),
                        "WLAN Set Event Mask FAIL", false);

  _initialised = true;
    35ae:	81 e0       	ldi	r24, 0x01	; 1
    35b0:	88 83       	st	Y, r24

  // Wait for re-connection if we're using SmartConfig data
  if (useSmartConfigData)
    35b2:	88 20       	and	r8, r8
    35b4:	79 f1       	breq	.+94     	; 0x3614 <_ZN15Adafruit_CC30005beginEhbPKc+0x150>
    35b6:	00 e0       	ldi	r16, 0x00	; 0
    35b8:	10 e0       	ldi	r17, 0x00	; 0
    35ba:	0e c0       	rjmp	.+28     	; 0x35d8 <_ZN15Adafruit_CC30005beginEhbPKc+0x114>
  {
    // Wait for a connection
    uint32_t timeout = 0;
    while(!cc3000Bitset.test(CC3000BitSet::IsConnected))
    {
      cc3k_int_poll();
    35bc:	0e 94 47 21 	call	0x428e	; 0x428e <cc3k_int_poll>
    35c0:	0f 5f       	subi	r16, 0xFF	; 255
    35c2:	1f 4f       	sbci	r17, 0xFF	; 255
      if(timeout > WLAN_CONNECT_TIMEOUT)
    35c4:	83 e0       	ldi	r24, 0x03	; 3
    35c6:	0a 3e       	cpi	r16, 0xEA	; 234
    35c8:	18 07       	cpc	r17, r24
    35ca:	31 f1       	breq	.+76     	; 0x3618 <_ZN15Adafruit_CC30005beginEhbPKc+0x154>
          CC3KPrinter->println(F("Timed out using SmartConfig data"));
        }
        return false;
      }
      timeout += 10;
      delay(10);
    35cc:	6a e0       	ldi	r22, 0x0A	; 10
    35ce:	70 e0       	ldi	r23, 0x00	; 0
    35d0:	80 e0       	ldi	r24, 0x00	; 0
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <delay>
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    35d8:	80 91 d7 04 	lds	r24, 0x04D7
  // Wait for re-connection if we're using SmartConfig data
  if (useSmartConfigData)
  {
    // Wait for a connection
    uint32_t timeout = 0;
    while(!cc3000Bitset.test(CC3000BitSet::IsConnected))
    35dc:	81 ff       	sbrs	r24, 1
    35de:	ee cf       	rjmp	.-36     	; 0x35bc <_ZN15Adafruit_CC30005beginEhbPKc+0xf8>
      }
      timeout += 10;
      delay(10);
    }
    
    delay(1000);  
    35e0:	68 ee       	ldi	r22, 0xE8	; 232
    35e2:	73 e0       	ldi	r23, 0x03	; 3
    35e4:	80 e0       	ldi	r24, 0x00	; 0
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <delay>
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    35ec:	80 91 d7 04 	lds	r24, 0x04D7
      timeout += 10;
      delay(10);
    }
    
    delay(1000);  
    if (cc3000Bitset.test(CC3000BitSet::HasDHCP))
    35f0:	82 ff       	sbrs	r24, 2
    35f2:	10 c0       	rjmp	.+32     	; 0x3614 <_ZN15Adafruit_CC30005beginEhbPKc+0x150>
    {
      mdnsAdvertiser(1, (char *) _deviceName, strlen(_deviceName));
    35f4:	e7 2d       	mov	r30, r7
    35f6:	f6 2d       	mov	r31, r6
    35f8:	df 01       	movw	r26, r30
    35fa:	0d 90       	ld	r0, X+
    35fc:	00 20       	and	r0, r0
    35fe:	e9 f7       	brne	.-6      	; 0x35fa <_ZN15Adafruit_CC30005beginEhbPKc+0x136>
    3600:	11 97       	sbiw	r26, 0x01	; 1
    3602:	ae 1b       	sub	r26, r30
    3604:	bf 0b       	sbc	r27, r31
    3606:	81 e0       	ldi	r24, 0x01	; 1
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	67 2d       	mov	r22, r7
    360c:	76 2d       	mov	r23, r6
    360e:	ad 01       	movw	r20, r26
    3610:	0e 94 1e 0a 	call	0x143c	; 0x143c <mdnsAdvertiser>
    3614:	81 e0       	ldi	r24, 0x01	; 1
    3616:	01 c0       	rjmp	.+2      	; 0x361a <_ZN15Adafruit_CC30005beginEhbPKc+0x156>
    3618:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
    
  return true;
}
    361a:	df 91       	pop	r29
    361c:	cf 91       	pop	r28
    361e:	1f 91       	pop	r17
    3620:	0f 91       	pop	r16
    3622:	ff 90       	pop	r15
    3624:	ef 90       	pop	r14
    3626:	df 90       	pop	r13
    3628:	cf 90       	pop	r12
    362a:	bf 90       	pop	r11
    362c:	af 90       	pop	r10
    362e:	9f 90       	pop	r9
    3630:	8f 90       	pop	r8
    3632:	7f 90       	pop	r7
    3634:	6f 90       	pop	r6
    3636:	08 95       	ret

00003638 <_ZN15Adafruit_CC30009scanSSIDsEm>:

    @returns  False if an error occured!
*/
/**************************************************************************/
#ifndef CC3000_TINY_DRIVER
bool Adafruit_CC3000::scanSSIDs(uint32_t time)
    3638:	af 92       	push	r10
    363a:	bf 92       	push	r11
    363c:	cf 92       	push	r12
    363e:	df 92       	push	r13
    3640:	ef 92       	push	r14
    3642:	ff 92       	push	r15
    3644:	0f 93       	push	r16
    3646:	1f 93       	push	r17
    3648:	cf 93       	push	r28
    364a:	df 93       	push	r29
    364c:	fc 01       	movw	r30, r24
{
  const unsigned long intervalTime[16] = { 2000, 2000, 2000, 2000,  2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000 };

  if (!_initialised)
    364e:	80 81       	ld	r24, Z
    3650:	88 23       	and	r24, r24
    3652:	11 f4       	brne	.+4      	; 0x3658 <_ZN15Adafruit_CC30009scanSSIDsEm+0x20>
    3654:	20 e0       	ldi	r18, 0x00	; 0
    3656:	4f c0       	rjmp	.+158    	; 0x36f6 <_ZN15Adafruit_CC30009scanSSIDsEm+0xbe>
      CC3KPrinter->println(F("Started AP/SSID scan\n\r"));
    }
  }

  // Set  SSID Scan params to includes channels above 11 
  CHECK_SUCCESS(
    3658:	8d b7       	in	r24, 0x3d	; 61
    365a:	9e b7       	in	r25, 0x3e	; 62
    365c:	42 97       	sbiw	r24, 0x12	; 18
    365e:	0f b6       	in	r0, 0x3f	; 63
    3660:	f8 94       	cli
    3662:	9e bf       	out	0x3e, r25	; 62
    3664:	0f be       	out	0x3f, r0	; 63
    3666:	8d bf       	out	0x3d, r24	; 61
    3668:	ed b7       	in	r30, 0x3d	; 61
    366a:	fe b7       	in	r31, 0x3e	; 62
    366c:	31 96       	adiw	r30, 0x01	; 1
    366e:	8f ef       	ldi	r24, 0xFF	; 255
    3670:	9f e1       	ldi	r25, 0x1F	; 31
    3672:	a0 e0       	ldi	r26, 0x00	; 0
    3674:	b0 e0       	ldi	r27, 0x00	; 0
    3676:	cd b7       	in	r28, 0x3d	; 61
    3678:	de b7       	in	r29, 0x3e	; 62
    367a:	89 83       	std	Y+1, r24	; 0x01
    367c:	9a 83       	std	Y+2, r25	; 0x02
    367e:	ab 83       	std	Y+3, r26	; 0x03
    3680:	bc 83       	std	Y+4, r27	; 0x04
    3682:	88 e8       	ldi	r24, 0x88	; 136
    3684:	9f ef       	ldi	r25, 0xFF	; 255
    3686:	af ef       	ldi	r26, 0xFF	; 255
    3688:	bf ef       	ldi	r27, 0xFF	; 255
    368a:	84 83       	std	Z+4, r24	; 0x04
    368c:	95 83       	std	Z+5, r25	; 0x05
    368e:	a6 83       	std	Z+6, r26	; 0x06
    3690:	b7 83       	std	Z+7, r27	; 0x07
    3692:	10 86       	std	Z+8, r1	; 0x08
    3694:	11 86       	std	Z+9, r1	; 0x09
    3696:	12 86       	std	Z+10, r1	; 0x0a
    3698:	13 86       	std	Z+11, r1	; 0x0b
    369a:	8c e2       	ldi	r24, 0x2C	; 44
    369c:	91 e0       	ldi	r25, 0x01	; 1
    369e:	a0 e0       	ldi	r26, 0x00	; 0
    36a0:	b0 e0       	ldi	r27, 0x00	; 0
    36a2:	84 87       	std	Z+12, r24	; 0x0c
    36a4:	95 87       	std	Z+13, r25	; 0x0d
    36a6:	a6 87       	std	Z+14, r26	; 0x0e
    36a8:	b7 87       	std	Z+15, r27	; 0x0f
    36aa:	84 ef       	ldi	r24, 0xF4	; 244
    36ac:	93 e0       	ldi	r25, 0x03	; 3
    36ae:	91 8b       	std	Z+17, r25	; 0x11
    36b0:	80 8b       	std	Z+16, r24	; 0x10
    36b2:	cb 01       	movw	r24, r22
    36b4:	ba 01       	movw	r22, r20
    36b6:	24 e1       	ldi	r18, 0x14	; 20
    36b8:	30 e0       	ldi	r19, 0x00	; 0
    36ba:	40 e0       	ldi	r20, 0x00	; 0
    36bc:	50 e0       	ldi	r21, 0x00	; 0
    36be:	f4 e6       	ldi	r31, 0x64	; 100
    36c0:	ef 2e       	mov	r14, r31
    36c2:	f1 2c       	mov	r15, r1
    36c4:	01 2d       	mov	r16, r1
    36c6:	11 2d       	mov	r17, r1
    36c8:	e5 e0       	ldi	r30, 0x05	; 5
    36ca:	ae 2e       	mov	r10, r30
    36cc:	b1 2c       	mov	r11, r1
    36ce:	c1 2c       	mov	r12, r1
    36d0:	d1 2c       	mov	r13, r1
    36d2:	0e 94 92 11 	call	0x2324	; 0x2324 <wlan_ioctl_set_scan_params>
    36d6:	20 e0       	ldi	r18, 0x00	; 0
    36d8:	4d b7       	in	r20, 0x3d	; 61
    36da:	5e b7       	in	r21, 0x3e	; 62
    36dc:	4e 5e       	subi	r20, 0xEE	; 238
    36de:	5f 4f       	sbci	r21, 0xFF	; 255
    36e0:	0f b6       	in	r0, 0x3f	; 63
    36e2:	f8 94       	cli
    36e4:	5e bf       	out	0x3e, r21	; 62
    36e6:	0f be       	out	0x3f, r0	; 63
    36e8:	4d bf       	out	0x3d, r20	; 61
    36ea:	61 15       	cp	r22, r1
    36ec:	71 05       	cpc	r23, r1
    36ee:	81 05       	cpc	r24, r1
    36f0:	91 05       	cpc	r25, r1
    36f2:	09 f4       	brne	.+2      	; 0x36f6 <_ZN15Adafruit_CC30009scanSSIDsEm+0xbe>
    36f4:	21 e0       	ldi	r18, 0x01	; 1
      wlan_ioctl_set_scan_params(time, 20, 100, 5, 0x1FFF, -120, 0, 300,
          (unsigned long * ) &intervalTime),
          "Failed setting params for SSID scan", false);

  return true;
}
    36f6:	82 2f       	mov	r24, r18
    36f8:	df 91       	pop	r29
    36fa:	cf 91       	pop	r28
    36fc:	1f 91       	pop	r17
    36fe:	0f 91       	pop	r16
    3700:	ff 90       	pop	r15
    3702:	ef 90       	pop	r14
    3704:	df 90       	pop	r13
    3706:	cf 90       	pop	r12
    3708:	bf 90       	pop	r11
    370a:	af 90       	pop	r10
    370c:	08 95       	ret

0000370e <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh>:
  return true;
}
#endif

// Connect with timeout
bool Adafruit_CC3000::connectToAP(const char *ssid, const char *key, uint8_t secmode, uint8_t attempts) {
    370e:	5f 92       	push	r5
    3710:	6f 92       	push	r6
    3712:	7f 92       	push	r7
    3714:	8f 92       	push	r8
    3716:	9f 92       	push	r9
    3718:	af 92       	push	r10
    371a:	bf 92       	push	r11
    371c:	cf 92       	push	r12
    371e:	df 92       	push	r13
    3720:	ef 92       	push	r14
    3722:	ff 92       	push	r15
    3724:	0f 93       	push	r16
    3726:	1f 93       	push	r17
    3728:	cf 93       	push	r28
    372a:	df 93       	push	r29
    372c:	ec 01       	movw	r28, r24
    372e:	3b 01       	movw	r6, r22
    3730:	4a 01       	movw	r8, r20
    3732:	52 2e       	mov	r5, r18
    3734:	a0 2e       	mov	r10, r16
  if (!_initialised) {
    3736:	88 81       	ld	r24, Y
    3738:	88 23       	and	r24, r24
    373a:	09 f4       	brne	.+2      	; 0x373e <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0x30>
    373c:	52 c0       	rjmp	.+164    	; 0x37e2 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0xd4>
    373e:	b0 2e       	mov	r11, r16
      }
    } else {
      /* NOTE: Secure connections are not available in 'Tiny' mode! */
#ifndef CC3000_TINY_DRIVER
      /* Connect to a secure network using WPA2, etc */
      if (! connectSecure(ssid, key, secmode)) {
    3740:	c2 2e       	mov	r12, r18
    3742:	dd 24       	eor	r13, r13
    3744:	ee 24       	eor	r14, r14
    3746:	ff 24       	eor	r15, r15
  // If attempts is zero interpret that as no limit on number of retries.
  bool retryForever = attempts == 0;

  do {
    // Stop if the max number of attempts have been tried.
    if (!retryForever) {
    3748:	aa 20       	and	r10, r10
    374a:	51 f0       	breq	.+20     	; 0x3760 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0x52>
      if (attempts == 0) {
    374c:	bb 20       	and	r11, r11
    374e:	39 f4       	brne	.+14     	; 0x375e <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0x50>
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    3750:	80 91 d7 04 	lds	r24, 0x04D7
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	96 95       	lsr	r25
    3758:	87 95       	ror	r24
    375a:	81 70       	andi	r24, 0x01	; 1
    375c:	42 c0       	rjmp	.+132    	; 0x37e2 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0xd4>
    // Stop if the max number of attempts have been tried.
    if (!retryForever) {
      if (attempts == 0) {
        return checkConnected();
      }
      attempts -= 1;
    375e:	ba 94       	dec	r11
    }

    cc3k_int_poll();
    3760:	0e 94 47 21 	call	0x428e	; 0x428e <cc3k_int_poll>
    /* MEME: not sure why this is absolutely required but the cc3k freaks
       if you dont. maybe bootup delay? */
    // Setup a 4 second SSID scan
    scanSSIDs(4000);
    3764:	ce 01       	movw	r24, r28
    3766:	40 ea       	ldi	r20, 0xA0	; 160
    3768:	5f e0       	ldi	r21, 0x0F	; 15
    376a:	60 e0       	ldi	r22, 0x00	; 0
    376c:	70 e0       	ldi	r23, 0x00	; 0
    376e:	0e 94 1c 1b 	call	0x3638	; 0x3638 <_ZN15Adafruit_CC30009scanSSIDsEm>
    // Wait for results
    delay(4500);
    3772:	64 e9       	ldi	r22, 0x94	; 148
    3774:	71 e1       	ldi	r23, 0x11	; 17
    3776:	80 e0       	ldi	r24, 0x00	; 0
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <delay>
    scanSSIDs(0);
    377e:	ce 01       	movw	r24, r28
    3780:	40 e0       	ldi	r20, 0x00	; 0
    3782:	50 e0       	ldi	r21, 0x00	; 0
    3784:	60 e0       	ldi	r22, 0x00	; 0
    3786:	70 e0       	ldi	r23, 0x00	; 0
    3788:	0e 94 1c 1b 	call	0x3638	; 0x3638 <_ZN15Adafruit_CC30009scanSSIDsEm>
    CHECK_PRINTER {
      CC3KPrinter->print(F("\n\rConnecting to ")); 
      CC3KPrinter->print(ssid);
      CC3KPrinter->print(F("..."));
    }
    if ((secmode == 0) || (strlen(key) == 0)) {
    378c:	55 20       	and	r5, r5
    378e:	21 f0       	breq	.+8      	; 0x3798 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0x8a>
    3790:	f4 01       	movw	r30, r8
    3792:	80 81       	ld	r24, Z
    3794:	88 23       	and	r24, r24
    3796:	49 f4       	brne	.+18     	; 0x37aa <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0x9c>
      /* Connect to an unsecured network */
      if (! connectOpen(ssid)) {
    3798:	ce 01       	movw	r24, r28
    379a:	b3 01       	movw	r22, r6
    379c:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN15Adafruit_CC300011connectOpenEPKc>
    37a0:	88 23       	and	r24, r24
    37a2:	d1 f0       	breq	.+52     	; 0x37d8 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0xca>
        CHECK_PRINTER {
          CC3KPrinter->println(F("Failed!"));
        }
        continue;
    37a4:	00 e1       	ldi	r16, 0x10	; 16
    37a6:	17 e2       	ldi	r17, 0x27	; 39
    37a8:	08 c0       	rjmp	.+16     	; 0x37ba <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0xac>
      }
    } else {
      /* NOTE: Secure connections are not available in 'Tiny' mode! */
#ifndef CC3000_TINY_DRIVER
      /* Connect to a secure network using WPA2, etc */
      if (! connectSecure(ssid, key, secmode)) {
    37aa:	ce 01       	movw	r24, r28
    37ac:	b3 01       	movw	r22, r6
    37ae:	a4 01       	movw	r20, r8
    37b0:	97 01       	movw	r18, r14
    37b2:	86 01       	movw	r16, r12
    37b4:	0e 94 25 19 	call	0x324a	; 0x324a <_ZN15Adafruit_CC300013connectSecureEPKcS1_l>
    37b8:	f3 cf       	rjmp	.-26     	; 0x37a0 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0x92>
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    37ba:	80 91 d7 04 	lds	r24, 0x04D7

    /* Wait around a bit for the async connected signal to arrive or timeout */
    CHECK_PRINTER {
      CC3KPrinter->print(F("Waiting to connect..."));
    }
    while ((timer > 0) && !checkConnected())
    37be:	81 fd       	sbrc	r24, 1
    37c0:	0b c0       	rjmp	.+22     	; 0x37d8 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0xca>
    {
      cc3k_int_poll();
    37c2:	0e 94 47 21 	call	0x428e	; 0x428e <cc3k_int_poll>
      delay(10);
    37c6:	6a e0       	ldi	r22, 0x0A	; 10
    37c8:	70 e0       	ldi	r23, 0x00	; 0
    37ca:	80 e0       	ldi	r24, 0x00	; 0
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <delay>
      timer -= 10;
    37d2:	0a 50       	subi	r16, 0x0A	; 10
    37d4:	10 40       	sbci	r17, 0x00	; 0

    /* Wait around a bit for the async connected signal to arrive or timeout */
    CHECK_PRINTER {
      CC3KPrinter->print(F("Waiting to connect..."));
    }
    while ((timer > 0) && !checkConnected())
    37d6:	89 f7       	brne	.-30     	; 0x37ba <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0xac>
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    37d8:	80 91 d7 04 	lds	r24, 0x04D7
  int16_t timer;

  // If attempts is zero interpret that as no limit on number of retries.
  bool retryForever = attempts == 0;

  do {
    37dc:	81 ff       	sbrs	r24, 1
    37de:	b4 cf       	rjmp	.-152    	; 0x3748 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0x3a>
    37e0:	81 e0       	ldi	r24, 0x01	; 1
      }
    }
  } while (!checkConnected());

  return true;
}
    37e2:	df 91       	pop	r29
    37e4:	cf 91       	pop	r28
    37e6:	1f 91       	pop	r17
    37e8:	0f 91       	pop	r16
    37ea:	ff 90       	pop	r15
    37ec:	ef 90       	pop	r14
    37ee:	df 90       	pop	r13
    37f0:	cf 90       	pop	r12
    37f2:	bf 90       	pop	r11
    37f4:	af 90       	pop	r10
    37f6:	9f 90       	pop	r9
    37f8:	8f 90       	pop	r8
    37fa:	7f 90       	pop	r7
    37fc:	6f 90       	pop	r6
    37fe:	5f 90       	pop	r5
    3800:	08 95       	ret

00003802 <_ZN25Adafruit_CC3000_ClientRefcvbEv>:

// Return true if the referenced client is connected.  This is provided for
// compatibility with Ethernet library code.
Adafruit_CC3000_ClientRef::operator bool() {
    3802:	fc 01       	movw	r30, r24
  return connected();
    3804:	a0 81       	ld	r26, Z
    3806:	b1 81       	ldd	r27, Z+1	; 0x01
    3808:	54 96       	adiw	r26, 0x14	; 20
    380a:	2d 91       	ld	r18, X+
    380c:	3c 91       	ld	r19, X
    380e:	55 97       	sbiw	r26, 0x15	; 21
    3810:	f9 01       	movw	r30, r18
    3812:	09 95       	icall
    3814:	81 11       	cpse	r24, r1
    3816:	81 e0       	ldi	r24, 0x01	; 1
}
    3818:	08 95       	ret

0000381a <_ZN25Adafruit_CC3000_ClientRef7connectE9IPAddressj>:
// Below are wrappers around the public client functions.  These hide the fact that users
// are dealing with a reference to a client instance and allow code to be written using
// value semantics like in the Ethernet library.
int Adafruit_CC3000_ClientRef::connect(IPAddress ip, uint16_t port) {
    381a:	0f 93       	push	r16
    381c:	1f 93       	push	r17
    381e:	df 93       	push	r29
    3820:	cf 93       	push	r28
    3822:	00 d0       	rcall	.+0      	; 0x3824 <_ZN25Adafruit_CC3000_ClientRef7connectE9IPAddressj+0xa>
    3824:	00 d0       	rcall	.+0      	; 0x3826 <_ZN25Adafruit_CC3000_ClientRef7connectE9IPAddressj+0xc>
    3826:	00 d0       	rcall	.+0      	; 0x3828 <_ZN25Adafruit_CC3000_ClientRef7connectE9IPAddressj+0xe>
    3828:	cd b7       	in	r28, 0x3d	; 61
    382a:	de b7       	in	r29, 0x3e	; 62
    382c:	db 01       	movw	r26, r22
  HANDLE_NULL(_client, false);
    382e:	fc 01       	movw	r30, r24
    3830:	24 85       	ldd	r18, Z+12	; 0x0c
    3832:	35 85       	ldd	r19, Z+13	; 0x0d
    3834:	21 15       	cp	r18, r1
    3836:	31 05       	cpc	r19, r1
    3838:	19 f4       	brne	.+6      	; 0x3840 <_ZN25Adafruit_CC3000_ClientRef7connectE9IPAddressj+0x26>
    383a:	20 e0       	ldi	r18, 0x00	; 0
    383c:	30 e0       	ldi	r19, 0x00	; 0
    383e:	1b c0       	rjmp	.+54     	; 0x3876 <_ZN25Adafruit_CC3000_ClientRef7connectE9IPAddressj+0x5c>
  return _client->connect(ip, port);
    3840:	f9 01       	movw	r30, r18
    3842:	80 81       	ld	r24, Z
    3844:	91 81       	ldd	r25, Z+1	; 0x01
    3846:	fc 01       	movw	r30, r24
    3848:	04 85       	ldd	r16, Z+12	; 0x0c
    384a:	15 85       	ldd	r17, Z+13	; 0x0d

#include <Printable.h>

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    384c:	8e e6       	ldi	r24, 0x6E	; 110
    384e:	94 e0       	ldi	r25, 0x04	; 4
    3850:	9a 83       	std	Y+2, r25	; 0x02
    3852:	89 83       	std	Y+1, r24	; 0x01
    3854:	12 96       	adiw	r26, 0x02	; 2
    3856:	8d 91       	ld	r24, X+
    3858:	9d 91       	ld	r25, X+
    385a:	0d 90       	ld	r0, X+
    385c:	bc 91       	ld	r27, X
    385e:	a0 2d       	mov	r26, r0
    3860:	8b 83       	std	Y+3, r24	; 0x03
    3862:	9c 83       	std	Y+4, r25	; 0x04
    3864:	ad 83       	std	Y+5, r26	; 0x05
    3866:	be 83       	std	Y+6, r27	; 0x06
    3868:	c9 01       	movw	r24, r18
    386a:	be 01       	movw	r22, r28
    386c:	6f 5f       	subi	r22, 0xFF	; 255
    386e:	7f 4f       	sbci	r23, 0xFF	; 255
    3870:	f8 01       	movw	r30, r16
    3872:	09 95       	icall
    3874:	9c 01       	movw	r18, r24
}
    3876:	c9 01       	movw	r24, r18
    3878:	26 96       	adiw	r28, 0x06	; 6
    387a:	0f b6       	in	r0, 0x3f	; 63
    387c:	f8 94       	cli
    387e:	de bf       	out	0x3e, r29	; 62
    3880:	0f be       	out	0x3f, r0	; 63
    3882:	cd bf       	out	0x3d, r28	; 61
    3884:	cf 91       	pop	r28
    3886:	df 91       	pop	r29
    3888:	1f 91       	pop	r17
    388a:	0f 91       	pop	r16
    388c:	08 95       	ret

0000388e <_ZN25Adafruit_CC3000_ClientRef7connectEPKcj>:

int Adafruit_CC3000_ClientRef::connect(const char *host, uint16_t port) {
  HANDLE_NULL(_client, false);
    388e:	fc 01       	movw	r30, r24
    3890:	a4 85       	ldd	r26, Z+12	; 0x0c
    3892:	b5 85       	ldd	r27, Z+13	; 0x0d
    3894:	10 97       	sbiw	r26, 0x00	; 0
    3896:	19 f4       	brne	.+6      	; 0x389e <_ZN25Adafruit_CC3000_ClientRef7connectEPKcj+0x10>
    3898:	20 e0       	ldi	r18, 0x00	; 0
    389a:	30 e0       	ldi	r19, 0x00	; 0
    389c:	09 c0       	rjmp	.+18     	; 0x38b0 <_ZN25Adafruit_CC3000_ClientRef7connectEPKcj+0x22>
  return _client->connect(host, port);
    389e:	ed 91       	ld	r30, X+
    38a0:	fc 91       	ld	r31, X
    38a2:	11 97       	sbiw	r26, 0x01	; 1
    38a4:	06 84       	ldd	r0, Z+14	; 0x0e
    38a6:	f7 85       	ldd	r31, Z+15	; 0x0f
    38a8:	e0 2d       	mov	r30, r0
    38aa:	cd 01       	movw	r24, r26
    38ac:	09 95       	icall
    38ae:	9c 01       	movw	r18, r24
}
    38b0:	c9 01       	movw	r24, r18
    38b2:	08 95       	ret

000038b4 <_ZN25Adafruit_CC3000_ClientRef9connectedEv>:

uint8_t Adafruit_CC3000_ClientRef::connected(void) {
  HANDLE_NULL(_client, false);
    38b4:	fc 01       	movw	r30, r24
    38b6:	a4 85       	ldd	r26, Z+12	; 0x0c
    38b8:	b5 85       	ldd	r27, Z+13	; 0x0d
    38ba:	10 97       	sbiw	r26, 0x00	; 0
    38bc:	11 f4       	brne	.+4      	; 0x38c2 <_ZN25Adafruit_CC3000_ClientRef9connectedEv+0xe>
    38be:	80 e0       	ldi	r24, 0x00	; 0
    38c0:	08 95       	ret
  return _client->connected();
    38c2:	ed 91       	ld	r30, X+
    38c4:	fc 91       	ld	r31, X
    38c6:	11 97       	sbiw	r26, 0x01	; 1
    38c8:	04 88       	ldd	r0, Z+20	; 0x14
    38ca:	f5 89       	ldd	r31, Z+21	; 0x15
    38cc:	e0 2d       	mov	r30, r0
    38ce:	cd 01       	movw	r24, r26
    38d0:	09 95       	icall
}
    38d2:	08 95       	ret

000038d4 <_ZN25Adafruit_CC3000_ClientRef5writeEh>:

size_t Adafruit_CC3000_ClientRef::write(uint8_t c) {
  HANDLE_NULL(_client, 0);
    38d4:	fc 01       	movw	r30, r24
    38d6:	a4 85       	ldd	r26, Z+12	; 0x0c
    38d8:	b5 85       	ldd	r27, Z+13	; 0x0d
    38da:	10 97       	sbiw	r26, 0x00	; 0
    38dc:	19 f4       	brne	.+6      	; 0x38e4 <_ZN25Adafruit_CC3000_ClientRef5writeEh+0x10>
    38de:	20 e0       	ldi	r18, 0x00	; 0
    38e0:	30 e0       	ldi	r19, 0x00	; 0
    38e2:	09 c0       	rjmp	.+18     	; 0x38f6 <_ZN25Adafruit_CC3000_ClientRef5writeEh+0x22>
  return _client->write(c);
    38e4:	ed 91       	ld	r30, X+
    38e6:	fc 91       	ld	r31, X
    38e8:	11 97       	sbiw	r26, 0x01	; 1
    38ea:	01 90       	ld	r0, Z+
    38ec:	f0 81       	ld	r31, Z
    38ee:	e0 2d       	mov	r30, r0
    38f0:	cd 01       	movw	r24, r26
    38f2:	09 95       	icall
    38f4:	9c 01       	movw	r18, r24
}
    38f6:	c9 01       	movw	r24, r18
    38f8:	08 95       	ret

000038fa <_ZN25Adafruit_CC3000_ClientRef4readEv>:
  HANDLE_NULL(_client, 0);
  return _client->read(buf, len, flags);
}

int Adafruit_CC3000_ClientRef::read(void) {
  HANDLE_NULL(_client, 0);
    38fa:	fc 01       	movw	r30, r24
    38fc:	a4 85       	ldd	r26, Z+12	; 0x0c
    38fe:	b5 85       	ldd	r27, Z+13	; 0x0d
    3900:	10 97       	sbiw	r26, 0x00	; 0
    3902:	19 f4       	brne	.+6      	; 0x390a <_ZN25Adafruit_CC3000_ClientRef4readEv+0x10>
    3904:	20 e0       	ldi	r18, 0x00	; 0
    3906:	30 e0       	ldi	r19, 0x00	; 0
    3908:	09 c0       	rjmp	.+18     	; 0x391c <_ZN25Adafruit_CC3000_ClientRef4readEv+0x22>
  return _client->read();
    390a:	ed 91       	ld	r30, X+
    390c:	fc 91       	ld	r31, X
    390e:	11 97       	sbiw	r26, 0x01	; 1
    3910:	06 80       	ldd	r0, Z+6	; 0x06
    3912:	f7 81       	ldd	r31, Z+7	; 0x07
    3914:	e0 2d       	mov	r30, r0
    3916:	cd 01       	movw	r24, r26
    3918:	09 95       	icall
    391a:	9c 01       	movw	r18, r24
}
    391c:	c9 01       	movw	r24, r18
    391e:	08 95       	ret

00003920 <_ZN25Adafruit_CC3000_ClientRef9availableEv>:
  HANDLE_NULL(_client, 0);
  return _client->close();
}

int Adafruit_CC3000_ClientRef::available(void) {
  HANDLE_NULL(_client, 0);
    3920:	fc 01       	movw	r30, r24
    3922:	a4 85       	ldd	r26, Z+12	; 0x0c
    3924:	b5 85       	ldd	r27, Z+13	; 0x0d
    3926:	10 97       	sbiw	r26, 0x00	; 0
    3928:	19 f4       	brne	.+6      	; 0x3930 <_ZN25Adafruit_CC3000_ClientRef9availableEv+0x10>
    392a:	20 e0       	ldi	r18, 0x00	; 0
    392c:	30 e0       	ldi	r19, 0x00	; 0
    392e:	09 c0       	rjmp	.+18     	; 0x3942 <_ZN25Adafruit_CC3000_ClientRef9availableEv+0x22>
  return _client->available();
    3930:	ed 91       	ld	r30, X+
    3932:	fc 91       	ld	r31, X
    3934:	11 97       	sbiw	r26, 0x01	; 1
    3936:	04 80       	ldd	r0, Z+4	; 0x04
    3938:	f5 81       	ldd	r31, Z+5	; 0x05
    393a:	e0 2d       	mov	r30, r0
    393c:	cd 01       	movw	r24, r26
    393e:	09 95       	icall
    3940:	9c 01       	movw	r18, r24
}
    3942:	c9 01       	movw	r24, r18
    3944:	08 95       	ret

00003946 <_ZN25Adafruit_CC3000_ClientRef4readEPhj>:

int Adafruit_CC3000_ClientRef::read(uint8_t *buf, size_t size) {
  HANDLE_NULL(_client, 0);
    3946:	fc 01       	movw	r30, r24
    3948:	a4 85       	ldd	r26, Z+12	; 0x0c
    394a:	b5 85       	ldd	r27, Z+13	; 0x0d
    394c:	10 97       	sbiw	r26, 0x00	; 0
    394e:	19 f4       	brne	.+6      	; 0x3956 <_ZN25Adafruit_CC3000_ClientRef4readEPhj+0x10>
    3950:	20 e0       	ldi	r18, 0x00	; 0
    3952:	30 e0       	ldi	r19, 0x00	; 0
    3954:	09 c0       	rjmp	.+18     	; 0x3968 <_ZN25Adafruit_CC3000_ClientRef4readEPhj+0x22>
  return _client->read(buf, size);
    3956:	ed 91       	ld	r30, X+
    3958:	fc 91       	ld	r31, X
    395a:	11 97       	sbiw	r26, 0x01	; 1
    395c:	00 88       	ldd	r0, Z+16	; 0x10
    395e:	f1 89       	ldd	r31, Z+17	; 0x11
    3960:	e0 2d       	mov	r30, r0
    3962:	cd 01       	movw	r24, r26
    3964:	09 95       	icall
    3966:	9c 01       	movw	r18, r24
}
    3968:	c9 01       	movw	r24, r18
    396a:	08 95       	ret

0000396c <_ZN25Adafruit_CC3000_ClientRef5writeEPKhj>:

size_t Adafruit_CC3000_ClientRef::write(const uint8_t *buf, size_t size) {
  HANDLE_NULL(_client, 0);
    396c:	fc 01       	movw	r30, r24
    396e:	a4 85       	ldd	r26, Z+12	; 0x0c
    3970:	b5 85       	ldd	r27, Z+13	; 0x0d
    3972:	10 97       	sbiw	r26, 0x00	; 0
    3974:	19 f4       	brne	.+6      	; 0x397c <_ZN25Adafruit_CC3000_ClientRef5writeEPKhj+0x10>
    3976:	20 e0       	ldi	r18, 0x00	; 0
    3978:	30 e0       	ldi	r19, 0x00	; 0
    397a:	09 c0       	rjmp	.+18     	; 0x398e <_ZN25Adafruit_CC3000_ClientRef5writeEPKhj+0x22>
  return _client->write(buf, size);
    397c:	ed 91       	ld	r30, X+
    397e:	fc 91       	ld	r31, X
    3980:	11 97       	sbiw	r26, 0x01	; 1
    3982:	02 80       	ldd	r0, Z+2	; 0x02
    3984:	f3 81       	ldd	r31, Z+3	; 0x03
    3986:	e0 2d       	mov	r30, r0
    3988:	cd 01       	movw	r24, r26
    398a:	09 95       	icall
    398c:	9c 01       	movw	r18, r24
}
    398e:	c9 01       	movw	r24, r18
    3990:	08 95       	ret

00003992 <_ZN25Adafruit_CC3000_ClientRef4peekEv>:

int Adafruit_CC3000_ClientRef::peek() {
  HANDLE_NULL(_client, 0);
    3992:	fc 01       	movw	r30, r24
    3994:	a4 85       	ldd	r26, Z+12	; 0x0c
    3996:	b5 85       	ldd	r27, Z+13	; 0x0d
    3998:	10 97       	sbiw	r26, 0x00	; 0
    399a:	19 f4       	brne	.+6      	; 0x39a2 <_ZN25Adafruit_CC3000_ClientRef4peekEv+0x10>
    399c:	20 e0       	ldi	r18, 0x00	; 0
    399e:	30 e0       	ldi	r19, 0x00	; 0
    39a0:	09 c0       	rjmp	.+18     	; 0x39b4 <_ZN25Adafruit_CC3000_ClientRef4peekEv+0x22>
  return _client->peek();
    39a2:	ed 91       	ld	r30, X+
    39a4:	fc 91       	ld	r31, X
    39a6:	11 97       	sbiw	r26, 0x01	; 1
    39a8:	00 84       	ldd	r0, Z+8	; 0x08
    39aa:	f1 85       	ldd	r31, Z+9	; 0x09
    39ac:	e0 2d       	mov	r30, r0
    39ae:	cd 01       	movw	r24, r26
    39b0:	09 95       	icall
    39b2:	9c 01       	movw	r18, r24
}
    39b4:	c9 01       	movw	r24, r18
    39b6:	08 95       	ret

000039b8 <_ZN25Adafruit_CC3000_ClientRef5flushEv>:

void Adafruit_CC3000_ClientRef::flush() {
  if (_client != NULL) _client->flush();
    39b8:	fc 01       	movw	r30, r24
    39ba:	a4 85       	ldd	r26, Z+12	; 0x0c
    39bc:	b5 85       	ldd	r27, Z+13	; 0x0d
    39be:	10 97       	sbiw	r26, 0x00	; 0
    39c0:	41 f0       	breq	.+16     	; 0x39d2 <_ZN25Adafruit_CC3000_ClientRef5flushEv+0x1a>
    39c2:	ed 91       	ld	r30, X+
    39c4:	fc 91       	ld	r31, X
    39c6:	11 97       	sbiw	r26, 0x01	; 1
    39c8:	02 84       	ldd	r0, Z+10	; 0x0a
    39ca:	f3 85       	ldd	r31, Z+11	; 0x0b
    39cc:	e0 2d       	mov	r30, r0
    39ce:	cd 01       	movw	r24, r26
    39d0:	09 95       	icall
    39d2:	08 95       	ret

000039d4 <_ZN25Adafruit_CC3000_ClientRef4stopEv>:
}

void Adafruit_CC3000_ClientRef::stop() {
  if (_client != NULL) _client->stop();
    39d4:	fc 01       	movw	r30, r24
    39d6:	a4 85       	ldd	r26, Z+12	; 0x0c
    39d8:	b5 85       	ldd	r27, Z+13	; 0x0d
    39da:	10 97       	sbiw	r26, 0x00	; 0
    39dc:	41 f0       	breq	.+16     	; 0x39ee <_ZN25Adafruit_CC3000_ClientRef4stopEv+0x1a>
    39de:	ed 91       	ld	r30, X+
    39e0:	fc 91       	ld	r31, X
    39e2:	11 97       	sbiw	r26, 0x01	; 1
    39e4:	02 88       	ldd	r0, Z+18	; 0x12
    39e6:	f3 89       	ldd	r31, Z+19	; 0x13
    39e8:	e0 2d       	mov	r30, r0
    39ea:	cd 01       	movw	r24, r26
    39ec:	09 95       	icall
    39ee:	08 95       	ret

000039f0 <_ZN22Adafruit_CC3000_Server12getClientRefEa>:

  return -1;
}

// Given the index of client, returns the instance of that client for reading/writing
Adafruit_CC3000_ClientRef Adafruit_CC3000_Server::getClientRef(int8_t clientIndex) {
    39f0:	cf 93       	push	r28
    39f2:	df 93       	push	r29
    39f4:	9c 01       	movw	r18, r24
    39f6:	c2 e4       	ldi	r28, 0x42	; 66
    39f8:	d4 e0       	ldi	r29, 0x04	; 4
  if (clientIndex != -1) {
    39fa:	4f 3f       	cpi	r20, 0xFF	; 255
    39fc:	b9 f0       	breq	.+46     	; 0x3a2c <_ZN22Adafruit_CC3000_Server12getClientRefEa+0x3c>
    return Adafruit_CC3000_ClientRef(&_clients[clientIndex]);
    39fe:	fc 01       	movw	r30, r24
    3a00:	13 82       	std	Z+3, r1	; 0x03
    3a02:	12 82       	std	Z+2, r1	; 0x02
    3a04:	88 ee       	ldi	r24, 0xE8	; 232
    3a06:	93 e0       	ldi	r25, 0x03	; 3
    3a08:	a0 e0       	ldi	r26, 0x00	; 0
    3a0a:	b0 e0       	ldi	r27, 0x00	; 0
    3a0c:	84 83       	std	Z+4, r24	; 0x04
    3a0e:	95 83       	std	Z+5, r25	; 0x05
    3a10:	a6 83       	std	Z+6, r26	; 0x06
    3a12:	b7 83       	std	Z+7, r27	; 0x07
  Adafruit_CC3000_ClientRef implementation
*/
/**************************************************************************/

Adafruit_CC3000_ClientRef::Adafruit_CC3000_ClientRef(Adafruit_CC3000_Client* client)
  : _client(client) 
    3a14:	d1 83       	std	Z+1, r29	; 0x01
    3a16:	c0 83       	st	Z, r28
    3a18:	83 e5       	ldi	r24, 0x53	; 83
    3a1a:	48 02       	muls	r20, r24
    3a1c:	c0 01       	movw	r24, r0
    3a1e:	11 24       	eor	r1, r1
    3a20:	04 96       	adiw	r24, 0x04	; 4
    3a22:	86 0f       	add	r24, r22
    3a24:	97 1f       	adc	r25, r23
    3a26:	95 87       	std	Z+13, r25	; 0x0d
    3a28:	84 87       	std	Z+12, r24	; 0x0c
    3a2a:	0f c0       	rjmp	.+30     	; 0x3a4a <_ZN22Adafruit_CC3000_Server12getClientRefEa+0x5a>
  }
  
  // Couldn't find a client ready to read, so return a client that is not 
  // connected to signal no clients are available for reading (convention
  // used by the Ethernet library).
  return Adafruit_CC3000_ClientRef(NULL);
    3a2c:	fc 01       	movw	r30, r24
    3a2e:	13 82       	std	Z+3, r1	; 0x03
    3a30:	12 82       	std	Z+2, r1	; 0x02
    3a32:	88 ee       	ldi	r24, 0xE8	; 232
    3a34:	93 e0       	ldi	r25, 0x03	; 3
    3a36:	a0 e0       	ldi	r26, 0x00	; 0
    3a38:	b0 e0       	ldi	r27, 0x00	; 0
    3a3a:	84 83       	std	Z+4, r24	; 0x04
    3a3c:	95 83       	std	Z+5, r25	; 0x05
    3a3e:	a6 83       	std	Z+6, r26	; 0x06
    3a40:	b7 83       	std	Z+7, r27	; 0x07
  Adafruit_CC3000_ClientRef implementation
*/
/**************************************************************************/

Adafruit_CC3000_ClientRef::Adafruit_CC3000_ClientRef(Adafruit_CC3000_Client* client)
  : _client(client) 
    3a42:	d1 83       	std	Z+1, r29	; 0x01
    3a44:	c0 83       	st	Z, r28
    3a46:	15 86       	std	Z+13, r1	; 0x0d
    3a48:	14 86       	std	Z+12, r1	; 0x0c
  
  // Couldn't find a client ready to read, so return a client that is not 
  // connected to signal no clients are available for reading (convention
  // used by the Ethernet library).
  return Adafruit_CC3000_ClientRef(NULL);
}
    3a4a:	c9 01       	movw	r24, r18
    3a4c:	df 91       	pop	r29
    3a4e:	cf 91       	pop	r28
    3a50:	08 95       	ret

00003a52 <_ZN22Adafruit_CC3000_Server5writeEPKhj>:
}

// Write data to all connected clients.  Buffer is a pointer to an array
// of bytes, and size specifies how many bytes to write from the buffer.
// Return the sum of bytes written to all clients.
size_t Adafruit_CC3000_Server::write(const uint8_t *buffer, size_t size) {
    3a52:	4f 92       	push	r4
    3a54:	5f 92       	push	r5
    3a56:	6f 92       	push	r6
    3a58:	7f 92       	push	r7
    3a5a:	8f 92       	push	r8
    3a5c:	9f 92       	push	r9
    3a5e:	af 92       	push	r10
    3a60:	bf 92       	push	r11
    3a62:	cf 92       	push	r12
    3a64:	df 92       	push	r13
    3a66:	ef 92       	push	r14
    3a68:	ff 92       	push	r15
    3a6a:	0f 93       	push	r16
    3a6c:	1f 93       	push	r17
    3a6e:	cf 93       	push	r28
    3a70:	df 93       	push	r29
    3a72:	5c 01       	movw	r10, r24
    3a74:	3b 01       	movw	r6, r22
    3a76:	4a 01       	movw	r8, r20
    3a78:	7c 01       	movw	r14, r24
    3a7a:	cc 24       	eor	r12, r12
    3a7c:	dd 24       	eor	r13, r13
    3a7e:	00 e0       	ldi	r16, 0x00	; 0
    3a80:	10 e0       	ldi	r17, 0x00	; 0
  size_t written = 0;
  for (int i = 0; i < MAX_SERVER_CLIENTS; ++i) {
    if (_clients[i].connected()) {
    3a82:	83 e5       	ldi	r24, 0x53	; 83
    3a84:	48 2e       	mov	r4, r24
    3a86:	51 2c       	mov	r5, r1
    3a88:	04 9d       	mul	r16, r4
    3a8a:	e0 01       	movw	r28, r0
    3a8c:	05 9d       	mul	r16, r5
    3a8e:	d0 0d       	add	r29, r0
    3a90:	14 9d       	mul	r17, r4
    3a92:	d0 0d       	add	r29, r0
    3a94:	11 24       	eor	r1, r1
    3a96:	24 96       	adiw	r28, 0x04	; 4
    3a98:	ca 0d       	add	r28, r10
    3a9a:	db 1d       	adc	r29, r11
    3a9c:	d7 01       	movw	r26, r14
    3a9e:	14 96       	adiw	r26, 0x04	; 4
    3aa0:	ed 91       	ld	r30, X+
    3aa2:	fc 91       	ld	r31, X
    3aa4:	15 97       	sbiw	r26, 0x05	; 5
    3aa6:	04 88       	ldd	r0, Z+20	; 0x14
    3aa8:	f5 89       	ldd	r31, Z+21	; 0x15
    3aaa:	e0 2d       	mov	r30, r0
    3aac:	ce 01       	movw	r24, r28
    3aae:	09 95       	icall
    3ab0:	88 23       	and	r24, r24
    3ab2:	71 f0       	breq	.+28     	; 0x3ad0 <_ZN22Adafruit_CC3000_Server5writeEPKhj+0x7e>
      written += _clients[i].write(buffer, size);
    3ab4:	d7 01       	movw	r26, r14
    3ab6:	14 96       	adiw	r26, 0x04	; 4
    3ab8:	ed 91       	ld	r30, X+
    3aba:	fc 91       	ld	r31, X
    3abc:	15 97       	sbiw	r26, 0x05	; 5
    3abe:	02 80       	ldd	r0, Z+2	; 0x02
    3ac0:	f3 81       	ldd	r31, Z+3	; 0x03
    3ac2:	e0 2d       	mov	r30, r0
    3ac4:	ce 01       	movw	r24, r28
    3ac6:	b3 01       	movw	r22, r6
    3ac8:	a4 01       	movw	r20, r8
    3aca:	09 95       	icall
    3acc:	c8 0e       	add	r12, r24
    3ace:	d9 1e       	adc	r13, r25
// Write data to all connected clients.  Buffer is a pointer to an array
// of bytes, and size specifies how many bytes to write from the buffer.
// Return the sum of bytes written to all clients.
size_t Adafruit_CC3000_Server::write(const uint8_t *buffer, size_t size) {
  size_t written = 0;
  for (int i = 0; i < MAX_SERVER_CLIENTS; ++i) {
    3ad0:	0f 5f       	subi	r16, 0xFF	; 255
    3ad2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ad4:	83 e5       	ldi	r24, 0x53	; 83
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
    3ad8:	e8 0e       	add	r14, r24
    3ada:	f9 1e       	adc	r15, r25
    3adc:	03 30       	cpi	r16, 0x03	; 3
    3ade:	11 05       	cpc	r17, r1
    3ae0:	99 f6       	brne	.-90     	; 0x3a88 <_ZN22Adafruit_CC3000_Server5writeEPKhj+0x36>
    if (_clients[i].connected()) {
      written += _clients[i].write(buffer, size);
    }
  }
  return written;
}
    3ae2:	c6 01       	movw	r24, r12
    3ae4:	df 91       	pop	r29
    3ae6:	cf 91       	pop	r28
    3ae8:	1f 91       	pop	r17
    3aea:	0f 91       	pop	r16
    3aec:	ff 90       	pop	r15
    3aee:	ef 90       	pop	r14
    3af0:	df 90       	pop	r13
    3af2:	cf 90       	pop	r12
    3af4:	bf 90       	pop	r11
    3af6:	af 90       	pop	r10
    3af8:	9f 90       	pop	r9
    3afa:	8f 90       	pop	r8
    3afc:	7f 90       	pop	r7
    3afe:	6f 90       	pop	r6
    3b00:	5f 90       	pop	r5
    3b02:	4f 90       	pop	r4
    3b04:	08 95       	ret

00003b06 <_ZN22Adafruit_CC3000_Server5writeEh>:

// Write a byte value to all connected clients.
// Return the sum of bytes written to all clients.
size_t Adafruit_CC3000_Server::write(uint8_t value) {
    3b06:	df 93       	push	r29
    3b08:	cf 93       	push	r28
    3b0a:	0f 92       	push	r0
    3b0c:	cd b7       	in	r28, 0x3d	; 61
    3b0e:	de b7       	in	r29, 0x3e	; 62
    3b10:	fc 01       	movw	r30, r24
    3b12:	69 83       	std	Y+1, r22	; 0x01
  return write(&value, 1);
    3b14:	a0 81       	ld	r26, Z
    3b16:	b1 81       	ldd	r27, Z+1	; 0x01
    3b18:	12 96       	adiw	r26, 0x02	; 2
    3b1a:	2d 91       	ld	r18, X+
    3b1c:	3c 91       	ld	r19, X
    3b1e:	13 97       	sbiw	r26, 0x03	; 3
    3b20:	be 01       	movw	r22, r28
    3b22:	6f 5f       	subi	r22, 0xFF	; 255
    3b24:	7f 4f       	sbci	r23, 0xFF	; 255
    3b26:	41 e0       	ldi	r20, 0x01	; 1
    3b28:	50 e0       	ldi	r21, 0x00	; 0
    3b2a:	f9 01       	movw	r30, r18
    3b2c:	09 95       	icall
}
    3b2e:	0f 90       	pop	r0
    3b30:	cf 91       	pop	r28
    3b32:	df 91       	pop	r29
    3b34:	08 95       	ret

00003b36 <_GLOBAL__I__ZN25Adafruit_CC3000_ClientRefC2EP22Adafruit_CC3000_Client>:
      }
      // else either there were no sockets to accept or an error occured.
    }
  }
  return newClientCreated;
}
    3b36:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    3b38:	80 ee       	ldi	r24, 0xE0	; 224
    3b3a:	94 e0       	ldi	r25, 0x04	; 4
    3b3c:	60 e0       	ldi	r22, 0x00	; 0
    3b3e:	40 e0       	ldi	r20, 0x00	; 0
    3b40:	20 e0       	ldi	r18, 0x00	; 0
    3b42:	00 e0       	ldi	r16, 0x00	; 0
    3b44:	0e 94 9f 28 	call	0x513e	; 0x513e <_ZN9IPAddressC1Ehhhh>
    3b48:	0f 91       	pop	r16
    3b4a:	08 95       	ret

00003b4c <_ZN22Adafruit_CC3000_Server20acceptNewConnectionsEv>:
size_t Adafruit_CC3000_Server::write(uint8_t value) {
  return write(&value, 1);
}

// Accept new connections and update the connected clients.
bool Adafruit_CC3000_Server::acceptNewConnections() {
    3b4c:	2f 92       	push	r2
    3b4e:	3f 92       	push	r3
    3b50:	4f 92       	push	r4
    3b52:	5f 92       	push	r5
    3b54:	7f 92       	push	r7
    3b56:	8f 92       	push	r8
    3b58:	9f 92       	push	r9
    3b5a:	af 92       	push	r10
    3b5c:	bf 92       	push	r11
    3b5e:	cf 92       	push	r12
    3b60:	df 92       	push	r13
    3b62:	ef 92       	push	r14
    3b64:	ff 92       	push	r15
    3b66:	0f 93       	push	r16
    3b68:	1f 93       	push	r17
    3b6a:	df 93       	push	r29
    3b6c:	cf 93       	push	r28
    3b6e:	cd b7       	in	r28, 0x3d	; 61
    3b70:	de b7       	in	r29, 0x3e	; 62
    3b72:	c3 55       	subi	r28, 0x53	; 83
    3b74:	d0 40       	sbci	r29, 0x00	; 0
    3b76:	0f b6       	in	r0, 0x3f	; 63
    3b78:	f8 94       	cli
    3b7a:	de bf       	out	0x3e, r29	; 62
    3b7c:	0f be       	out	0x3f, r0	; 63
    3b7e:	cd bf       	out	0x3d, r28	; 61
    3b80:	5c 01       	movw	r10, r24
    3b82:	6c 01       	movw	r12, r24
    3b84:	77 24       	eor	r7, r7
    3b86:	ee 24       	eor	r14, r14
    3b88:	ff 24       	eor	r15, r15
  bool newClientCreated = false;
  // For any unconnected client, see if new connections are pending and accept
  // them as a new client.
  for (int i = 0; i < MAX_SERVER_CLIENTS; ++i) {
    if (!_clients[i].connected()) {
    3b8a:	23 e5       	ldi	r18, 0x53	; 83
    3b8c:	22 2e       	mov	r2, r18
    3b8e:	31 2c       	mov	r3, r1
      // Note: Because the non-blocking option was set for the listening
      // socket this call will not block and instead return SOC_IN_PROGRESS (-2) 
      // if there are no pending client connections. Also, the address of the 
      // connected client is not needed, so those parameters are set to NULL.
      cc3k_int_poll();
      int soc = accept(_listenSocket, NULL, NULL);
    3b90:	9f ef       	ldi	r25, 0xFF	; 255
    3b92:	89 2e       	mov	r8, r25
    3b94:	91 2c       	mov	r9, r1
    3b96:	8a 0c       	add	r8, r10
    3b98:	9b 1c       	adc	r9, r11
      if (soc > -1) {
        _clients[i] = Adafruit_CC3000_Client(soc);
    3b9a:	2e 01       	movw	r4, r28
    3b9c:	08 94       	sec
    3b9e:	41 1c       	adc	r4, r1
    3ba0:	51 1c       	adc	r5, r1
bool Adafruit_CC3000_Server::acceptNewConnections() {
  bool newClientCreated = false;
  // For any unconnected client, see if new connections are pending and accept
  // them as a new client.
  for (int i = 0; i < MAX_SERVER_CLIENTS; ++i) {
    if (!_clients[i].connected()) {
    3ba2:	e2 9c       	mul	r14, r2
    3ba4:	80 01       	movw	r16, r0
    3ba6:	e3 9c       	mul	r14, r3
    3ba8:	10 0d       	add	r17, r0
    3baa:	f2 9c       	mul	r15, r2
    3bac:	10 0d       	add	r17, r0
    3bae:	11 24       	eor	r1, r1
    3bb0:	0c 5f       	subi	r16, 0xFC	; 252
    3bb2:	1f 4f       	sbci	r17, 0xFF	; 255
    3bb4:	0a 0d       	add	r16, r10
    3bb6:	1b 1d       	adc	r17, r11
    3bb8:	d6 01       	movw	r26, r12
    3bba:	14 96       	adiw	r26, 0x04	; 4
    3bbc:	ed 91       	ld	r30, X+
    3bbe:	fc 91       	ld	r31, X
    3bc0:	15 97       	sbiw	r26, 0x05	; 5
    3bc2:	04 88       	ldd	r0, Z+20	; 0x14
    3bc4:	f5 89       	ldd	r31, Z+21	; 0x15
    3bc6:	e0 2d       	mov	r30, r0
    3bc8:	c8 01       	movw	r24, r16
    3bca:	09 95       	icall
    3bcc:	88 23       	and	r24, r24
    3bce:	f1 f4       	brne	.+60     	; 0x3c0c <_ZN22Adafruit_CC3000_Server20acceptNewConnectionsEv+0xc0>
      // Note: Because the non-blocking option was set for the listening
      // socket this call will not block and instead return SOC_IN_PROGRESS (-2) 
      // if there are no pending client connections. Also, the address of the 
      // connected client is not needed, so those parameters are set to NULL.
      cc3k_int_poll();
    3bd0:	0e 94 47 21 	call	0x428e	; 0x428e <cc3k_int_poll>
      int soc = accept(_listenSocket, NULL, NULL);
    3bd4:	f4 01       	movw	r30, r8
    3bd6:	60 81       	ld	r22, Z
    3bd8:	71 81       	ldd	r23, Z+1	; 0x01
    3bda:	82 81       	ldd	r24, Z+2	; 0x02
    3bdc:	93 81       	ldd	r25, Z+3	; 0x03
    3bde:	40 e0       	ldi	r20, 0x00	; 0
    3be0:	50 e0       	ldi	r21, 0x00	; 0
    3be2:	20 e0       	ldi	r18, 0x00	; 0
    3be4:	30 e0       	ldi	r19, 0x00	; 0
    3be6:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <accept>
    3bea:	cb 01       	movw	r24, r22
      if (soc > -1) {
    3bec:	77 fd       	sbrc	r23, 7
    3bee:	0e c0       	rjmp	.+28     	; 0x3c0c <_ZN22Adafruit_CC3000_Server20acceptNewConnectionsEv+0xc0>
        _clients[i] = Adafruit_CC3000_Client(soc);
    3bf0:	ac 01       	movw	r20, r24
    3bf2:	66 27       	eor	r22, r22
    3bf4:	57 fd       	sbrc	r21, 7
    3bf6:	60 95       	com	r22
    3bf8:	76 2f       	mov	r23, r22
    3bfa:	c2 01       	movw	r24, r4
    3bfc:	0e 94 79 14 	call	0x28f2	; 0x28f2 <_ZN22Adafruit_CC3000_ClientC1El>
    3c00:	c8 01       	movw	r24, r16
    3c02:	b2 01       	movw	r22, r4
    3c04:	0e 94 17 18 	call	0x302e	; 0x302e <_ZN22Adafruit_CC3000_ClientaSERKS_>
    3c08:	77 24       	eor	r7, r7
    3c0a:	73 94       	inc	r7
// Accept new connections and update the connected clients.
bool Adafruit_CC3000_Server::acceptNewConnections() {
  bool newClientCreated = false;
  // For any unconnected client, see if new connections are pending and accept
  // them as a new client.
  for (int i = 0; i < MAX_SERVER_CLIENTS; ++i) {
    3c0c:	08 94       	sec
    3c0e:	e1 1c       	adc	r14, r1
    3c10:	f1 1c       	adc	r15, r1
    3c12:	83 e5       	ldi	r24, 0x53	; 83
    3c14:	90 e0       	ldi	r25, 0x00	; 0
    3c16:	c8 0e       	add	r12, r24
    3c18:	d9 1e       	adc	r13, r25
    3c1a:	93 e0       	ldi	r25, 0x03	; 3
    3c1c:	e9 16       	cp	r14, r25
    3c1e:	f1 04       	cpc	r15, r1
    3c20:	09 f0       	breq	.+2      	; 0x3c24 <_ZN22Adafruit_CC3000_Server20acceptNewConnectionsEv+0xd8>
    3c22:	bf cf       	rjmp	.-130    	; 0x3ba2 <_ZN22Adafruit_CC3000_Server20acceptNewConnectionsEv+0x56>
      }
      // else either there were no sockets to accept or an error occured.
    }
  }
  return newClientCreated;
}
    3c24:	87 2d       	mov	r24, r7
    3c26:	cd 5a       	subi	r28, 0xAD	; 173
    3c28:	df 4f       	sbci	r29, 0xFF	; 255
    3c2a:	0f b6       	in	r0, 0x3f	; 63
    3c2c:	f8 94       	cli
    3c2e:	de bf       	out	0x3e, r29	; 62
    3c30:	0f be       	out	0x3f, r0	; 63
    3c32:	cd bf       	out	0x3d, r28	; 61
    3c34:	cf 91       	pop	r28
    3c36:	df 91       	pop	r29
    3c38:	1f 91       	pop	r17
    3c3a:	0f 91       	pop	r16
    3c3c:	ff 90       	pop	r15
    3c3e:	ef 90       	pop	r14
    3c40:	df 90       	pop	r13
    3c42:	cf 90       	pop	r12
    3c44:	bf 90       	pop	r11
    3c46:	af 90       	pop	r10
    3c48:	9f 90       	pop	r9
    3c4a:	8f 90       	pop	r8
    3c4c:	7f 90       	pop	r7
    3c4e:	5f 90       	pop	r5
    3c50:	4f 90       	pop	r4
    3c52:	3f 90       	pop	r3
    3c54:	2f 90       	pop	r2
    3c56:	08 95       	ret

00003c58 <_ZN22Adafruit_CC3000_Server14availableIndexEPb>:

// Return index of a client with data available for reading. Can be turned
// into a client instance with getClientRef().  Accepts an optional parameter
// to return a boolean (by reference) indicating if available client is connecting
// for the first time.
int8_t Adafruit_CC3000_Server::availableIndex(bool *newClient) {
    3c58:	af 92       	push	r10
    3c5a:	bf 92       	push	r11
    3c5c:	cf 92       	push	r12
    3c5e:	df 92       	push	r13
    3c60:	ef 92       	push	r14
    3c62:	ff 92       	push	r15
    3c64:	0f 93       	push	r16
    3c66:	1f 93       	push	r17
    3c68:	cf 93       	push	r28
    3c6a:	df 93       	push	r29
    3c6c:	6c 01       	movw	r12, r24
    3c6e:	eb 01       	movw	r28, r22
  bool newClientCreated = acceptNewConnections();
    3c70:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <_ZN22Adafruit_CC3000_Server20acceptNewConnectionsEv>

  if (newClient)
    3c74:	20 97       	sbiw	r28, 0x00	; 0
    3c76:	09 f0       	breq	.+2      	; 0x3c7a <_ZN22Adafruit_CC3000_Server14availableIndexEPb+0x22>
    *newClient = newClientCreated;
    3c78:	88 83       	st	Y, r24
    3c7a:	76 01       	movw	r14, r12
    3c7c:	00 e0       	ldi	r16, 0x00	; 0
    3c7e:	10 e0       	ldi	r17, 0x00	; 0

  // Find the first client which is ready to read and return it.
  for (int i = 0; i < MAX_SERVER_CLIENTS; ++i) {
    if (_clients[i].connected() && _clients[i].available() > 0) {
    3c80:	33 e5       	ldi	r19, 0x53	; 83
    3c82:	a3 2e       	mov	r10, r19
    3c84:	b1 2c       	mov	r11, r1
    3c86:	0a 9d       	mul	r16, r10
    3c88:	e0 01       	movw	r28, r0
    3c8a:	0b 9d       	mul	r16, r11
    3c8c:	d0 0d       	add	r29, r0
    3c8e:	1a 9d       	mul	r17, r10
    3c90:	d0 0d       	add	r29, r0
    3c92:	11 24       	eor	r1, r1
    3c94:	24 96       	adiw	r28, 0x04	; 4
    3c96:	cc 0d       	add	r28, r12
    3c98:	dd 1d       	adc	r29, r13
    3c9a:	d7 01       	movw	r26, r14
    3c9c:	14 96       	adiw	r26, 0x04	; 4
    3c9e:	ed 91       	ld	r30, X+
    3ca0:	fc 91       	ld	r31, X
    3ca2:	15 97       	sbiw	r26, 0x05	; 5
    3ca4:	04 88       	ldd	r0, Z+20	; 0x14
    3ca6:	f5 89       	ldd	r31, Z+21	; 0x15
    3ca8:	e0 2d       	mov	r30, r0
    3caa:	ce 01       	movw	r24, r28
    3cac:	09 95       	icall
    3cae:	88 23       	and	r24, r24
    3cb0:	c9 f0       	breq	.+50     	; 0x3ce4 <_ZN22Adafruit_CC3000_Server14availableIndexEPb+0x8c>
    3cb2:	d7 01       	movw	r26, r14
    3cb4:	14 96       	adiw	r26, 0x04	; 4
    3cb6:	ed 91       	ld	r30, X+
    3cb8:	fc 91       	ld	r31, X
    3cba:	15 97       	sbiw	r26, 0x05	; 5
    3cbc:	04 80       	ldd	r0, Z+4	; 0x04
    3cbe:	f5 81       	ldd	r31, Z+5	; 0x05
    3cc0:	e0 2d       	mov	r30, r0
    3cc2:	ce 01       	movw	r24, r28
    3cc4:	09 95       	icall
    3cc6:	18 16       	cp	r1, r24
    3cc8:	19 06       	cpc	r1, r25
    3cca:	64 f4       	brge	.+24     	; 0x3ce4 <_ZN22Adafruit_CC3000_Server14availableIndexEPb+0x8c>
      return i;
    3ccc:	80 2f       	mov	r24, r16
    }
  }

  return -1;
}
    3cce:	df 91       	pop	r29
    3cd0:	cf 91       	pop	r28
    3cd2:	1f 91       	pop	r17
    3cd4:	0f 91       	pop	r16
    3cd6:	ff 90       	pop	r15
    3cd8:	ef 90       	pop	r14
    3cda:	df 90       	pop	r13
    3cdc:	cf 90       	pop	r12
    3cde:	bf 90       	pop	r11
    3ce0:	af 90       	pop	r10
    3ce2:	08 95       	ret

  if (newClient)
    *newClient = newClientCreated;

  // Find the first client which is ready to read and return it.
  for (int i = 0; i < MAX_SERVER_CLIENTS; ++i) {
    3ce4:	0f 5f       	subi	r16, 0xFF	; 255
    3ce6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ce8:	83 e5       	ldi	r24, 0x53	; 83
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	e8 0e       	add	r14, r24
    3cee:	f9 1e       	adc	r15, r25
    3cf0:	03 30       	cpi	r16, 0x03	; 3
    3cf2:	11 05       	cpc	r17, r1
    3cf4:	41 f6       	brne	.-112    	; 0x3c86 <_ZN22Adafruit_CC3000_Server14availableIndexEPb+0x2e>
    3cf6:	8f ef       	ldi	r24, 0xFF	; 255
    3cf8:	ea cf       	rjmp	.-44     	; 0x3cce <_ZN22Adafruit_CC3000_Server14availableIndexEPb+0x76>

00003cfa <_ZN22Adafruit_CC3000_Server9availableEv>:
  // used by the Ethernet library).
  return Adafruit_CC3000_ClientRef(NULL);
}

// Return a reference to a client instance which has data available to read.
Adafruit_CC3000_ClientRef Adafruit_CC3000_Server::available() {
    3cfa:	ef 92       	push	r14
    3cfc:	ff 92       	push	r15
    3cfe:	0f 93       	push	r16
    3d00:	1f 93       	push	r17
    3d02:	f8 2e       	mov	r15, r24
    3d04:	e9 2e       	mov	r14, r25
    3d06:	8b 01       	movw	r16, r22
  return getClientRef(availableIndex(NULL));
    3d08:	cb 01       	movw	r24, r22
    3d0a:	60 e0       	ldi	r22, 0x00	; 0
    3d0c:	70 e0       	ldi	r23, 0x00	; 0
    3d0e:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <_ZN22Adafruit_CC3000_Server14availableIndexEPb>
    3d12:	48 2f       	mov	r20, r24
    3d14:	8f 2d       	mov	r24, r15
    3d16:	9e 2d       	mov	r25, r14
    3d18:	b8 01       	movw	r22, r16
    3d1a:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <_ZN22Adafruit_CC3000_Server12getClientRefEa>
}
    3d1e:	8f 2d       	mov	r24, r15
    3d20:	9e 2d       	mov	r25, r14
    3d22:	1f 91       	pop	r17
    3d24:	0f 91       	pop	r16
    3d26:	ff 90       	pop	r15
    3d28:	ef 90       	pop	r14
    3d2a:	08 95       	ret

00003d2c <_ZN22Adafruit_CC3000_Server5beginEv>:

// Initialize the server and start listening for connections.
void Adafruit_CC3000_Server::begin() {
    3d2c:	2f 92       	push	r2
    3d2e:	3f 92       	push	r3
    3d30:	4f 92       	push	r4
    3d32:	5f 92       	push	r5
    3d34:	6f 92       	push	r6
    3d36:	7f 92       	push	r7
    3d38:	8f 92       	push	r8
    3d3a:	9f 92       	push	r9
    3d3c:	af 92       	push	r10
    3d3e:	bf 92       	push	r11
    3d40:	cf 92       	push	r12
    3d42:	df 92       	push	r13
    3d44:	ef 92       	push	r14
    3d46:	ff 92       	push	r15
    3d48:	0f 93       	push	r16
    3d4a:	1f 93       	push	r17
    3d4c:	df 93       	push	r29
    3d4e:	cf 93       	push	r28
    3d50:	cd b7       	in	r28, 0x3d	; 61
    3d52:	de b7       	in	r29, 0x3e	; 62
    3d54:	a1 97       	sbiw	r28, 0x21	; 33
    3d56:	0f b6       	in	r0, 0x3f	; 63
    3d58:	f8 94       	cli
    3d5a:	de bf       	out	0x3e, r29	; 62
    3d5c:	0f be       	out	0x3f, r0	; 63
    3d5e:	cd bf       	out	0x3d, r28	; 61
    3d60:	1c 01       	movw	r2, r24
  // Set the CC3000 inactivity timeout to 0 (never timeout).  This will ensure 
  // the CC3000 does not close the listening socket when it's idle for more than 
  // 60 seconds (the default timeout).  See more information from:
  // http://e2e.ti.com/support/low_power_rf/f/851/t/292664.aspx
  unsigned long aucDHCP       = 14400;
    3d62:	80 e4       	ldi	r24, 0x40	; 64
    3d64:	98 e3       	ldi	r25, 0x38	; 56
    3d66:	a0 e0       	ldi	r26, 0x00	; 0
    3d68:	b0 e0       	ldi	r27, 0x00	; 0
    3d6a:	8a 83       	std	Y+2, r24	; 0x02
    3d6c:	9b 83       	std	Y+3, r25	; 0x03
    3d6e:	ac 83       	std	Y+4, r26	; 0x04
    3d70:	bd 83       	std	Y+5, r27	; 0x05
  unsigned long aucARP        = 3600;
    3d72:	80 e1       	ldi	r24, 0x10	; 16
    3d74:	9e e0       	ldi	r25, 0x0E	; 14
    3d76:	a0 e0       	ldi	r26, 0x00	; 0
    3d78:	b0 e0       	ldi	r27, 0x00	; 0
    3d7a:	8e 83       	std	Y+6, r24	; 0x06
    3d7c:	9f 83       	std	Y+7, r25	; 0x07
    3d7e:	a8 87       	std	Y+8, r26	; 0x08
    3d80:	b9 87       	std	Y+9, r27	; 0x09
  unsigned long aucKeepalive  = 30;
    3d82:	8e e1       	ldi	r24, 0x1E	; 30
    3d84:	90 e0       	ldi	r25, 0x00	; 0
    3d86:	a0 e0       	ldi	r26, 0x00	; 0
    3d88:	b0 e0       	ldi	r27, 0x00	; 0
    3d8a:	8a 87       	std	Y+10, r24	; 0x0a
    3d8c:	9b 87       	std	Y+11, r25	; 0x0b
    3d8e:	ac 87       	std	Y+12, r26	; 0x0c
    3d90:	bd 87       	std	Y+13, r27	; 0x0d
  unsigned long aucInactivity = 0;
    3d92:	1e 86       	std	Y+14, r1	; 0x0e
    3d94:	1f 86       	std	Y+15, r1	; 0x0f
    3d96:	18 8a       	std	Y+16, r1	; 0x10
    3d98:	19 8a       	std	Y+17, r1	; 0x11
  cc3k_int_poll();
    3d9a:	0e 94 47 21 	call	0x428e	; 0x428e <cc3k_int_poll>
  if (netapp_timeout_values(&aucDHCP, &aucARP, &aucKeepalive, &aucInactivity) != 0) {
    3d9e:	ce 01       	movw	r24, r28
    3da0:	02 96       	adiw	r24, 0x02	; 2
    3da2:	be 01       	movw	r22, r28
    3da4:	6a 5f       	subi	r22, 0xFA	; 250
    3da6:	7f 4f       	sbci	r23, 0xFF	; 255
    3da8:	ae 01       	movw	r20, r28
    3daa:	46 5f       	subi	r20, 0xF6	; 246
    3dac:	5f 4f       	sbci	r21, 0xFF	; 255
    3dae:	9e 01       	movw	r18, r28
    3db0:	22 5f       	subi	r18, 0xF2	; 242
    3db2:	3f 4f       	sbci	r19, 0xFF	; 255
    3db4:	0e 94 74 09 	call	0x12e8	; 0x12e8 <netapp_timeout_values>
    3db8:	61 15       	cp	r22, r1
    3dba:	71 05       	cpc	r23, r1
    3dbc:	81 05       	cpc	r24, r1
    3dbe:	91 05       	cpc	r25, r1
    3dc0:	09 f0       	breq	.+2      	; 0x3dc4 <_ZN22Adafruit_CC3000_Server5beginEv+0x98>
    3dc2:	67 c0       	rjmp	.+206    	; 0x3e92 <_ZN22Adafruit_CC3000_Server5beginEv+0x166>
    CC3K_PRINTLN_F("Error setting inactivity timeout!");
    return;
  }
  // Create a TCP socket
  cc3k_int_poll();
    3dc4:	0e 94 47 21 	call	0x428e	; 0x428e <cc3k_int_poll>
  int16_t soc = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    3dc8:	62 e0       	ldi	r22, 0x02	; 2
    3dca:	70 e0       	ldi	r23, 0x00	; 0
    3dcc:	80 e0       	ldi	r24, 0x00	; 0
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	21 e0       	ldi	r18, 0x01	; 1
    3dd2:	30 e0       	ldi	r19, 0x00	; 0
    3dd4:	40 e0       	ldi	r20, 0x00	; 0
    3dd6:	50 e0       	ldi	r21, 0x00	; 0
    3dd8:	a6 e0       	ldi	r26, 0x06	; 6
    3dda:	ea 2e       	mov	r14, r26
    3ddc:	f1 2c       	mov	r15, r1
    3dde:	01 2d       	mov	r16, r1
    3de0:	11 2d       	mov	r17, r1
    3de2:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <socket>
    3de6:	8b 01       	movw	r16, r22
  if (soc < 0) {
    3de8:	77 fd       	sbrc	r23, 7
    3dea:	53 c0       	rjmp	.+166    	; 0x3e92 <_ZN22Adafruit_CC3000_Server5beginEv+0x166>
    CC3K_PRINTLN_F("Couldn't create listening socket!");
    return;
  }
  // Set the socket's accept call as non-blocking.
  cc3k_int_poll();
    3dec:	0e 94 47 21 	call	0x428e	; 0x428e <cc3k_int_poll>
  char arg = SOCK_ON; // nsd: looked in TI example code and they pass this as a 'short' in one example, and 'char' in two others. 'char' seems as likely work, and has no endianess issue
    3df0:	19 82       	std	Y+1, r1	; 0x01
  if (setsockopt(soc, SOL_SOCKET, SOCKOPT_ACCEPT_NONBLOCK, &arg, sizeof(arg)) < 0) {
    3df2:	28 01       	movw	r4, r16
    3df4:	66 24       	eor	r6, r6
    3df6:	57 fc       	sbrc	r5, 7
    3df8:	60 94       	com	r6
    3dfa:	76 2c       	mov	r7, r6
    3dfc:	c3 01       	movw	r24, r6
    3dfe:	b2 01       	movw	r22, r4
    3e00:	2f ef       	ldi	r18, 0xFF	; 255
    3e02:	3f ef       	ldi	r19, 0xFF	; 255
    3e04:	40 e0       	ldi	r20, 0x00	; 0
    3e06:	50 e0       	ldi	r21, 0x00	; 0
    3e08:	f2 e0       	ldi	r31, 0x02	; 2
    3e0a:	ef 2e       	mov	r14, r31
    3e0c:	f1 2c       	mov	r15, r1
    3e0e:	01 2d       	mov	r16, r1
    3e10:	11 2d       	mov	r17, r1
    3e12:	6e 01       	movw	r12, r28
    3e14:	08 94       	sec
    3e16:	c1 1c       	adc	r12, r1
    3e18:	d1 1c       	adc	r13, r1
    3e1a:	e1 e0       	ldi	r30, 0x01	; 1
    3e1c:	8e 2e       	mov	r8, r30
    3e1e:	91 2c       	mov	r9, r1
    3e20:	a1 2c       	mov	r10, r1
    3e22:	b1 2c       	mov	r11, r1
    3e24:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <setsockopt>
    3e28:	97 fd       	sbrc	r25, 7
    3e2a:	33 c0       	rjmp	.+102    	; 0x3e92 <_ZN22Adafruit_CC3000_Server5beginEv+0x166>
    CC3K_PRINTLN_F("Couldn't set socket as non-blocking!");
    return;
  }
  // Bind the socket to a TCP address.
  sockaddr_in address;
  address.sin_family = AF_INET;
    3e2c:	82 e0       	ldi	r24, 0x02	; 2
    3e2e:	90 e0       	ldi	r25, 0x00	; 0
    3e30:	9b 8b       	std	Y+19, r25	; 0x13
    3e32:	8a 8b       	std	Y+18, r24	; 0x12
  address.sin_addr.s_addr = htonl(0);     // Listen on any network interface, equivalent to INADDR_ANY in sockets programming.
    3e34:	1e 8a       	std	Y+22, r1	; 0x16
    3e36:	1f 8a       	std	Y+23, r1	; 0x17
    3e38:	18 8e       	std	Y+24, r1	; 0x18
    3e3a:	19 8e       	std	Y+25, r1	; 0x19
  address.sin_port = htons(_port);        // Listen on the specified port.
    3e3c:	f1 01       	movw	r30, r2
    3e3e:	e3 50       	subi	r30, 0x03	; 3
    3e40:	ff 4f       	sbci	r31, 0xFF	; 255
    3e42:	90 81       	ld	r25, Z
    3e44:	81 81       	ldd	r24, Z+1	; 0x01
    3e46:	8c 8b       	std	Y+20, r24	; 0x14
    3e48:	9d 8b       	std	Y+21, r25	; 0x15
  cc3k_int_poll();
    3e4a:	0e 94 47 21 	call	0x428e	; 0x428e <cc3k_int_poll>
  if (bind(soc, (sockaddr*) &address, sizeof(address)) < 0) {
    3e4e:	c3 01       	movw	r24, r6
    3e50:	b2 01       	movw	r22, r4
    3e52:	ae 01       	movw	r20, r28
    3e54:	4e 5e       	subi	r20, 0xEE	; 238
    3e56:	5f 4f       	sbci	r21, 0xFF	; 255
    3e58:	00 e1       	ldi	r16, 0x10	; 16
    3e5a:	10 e0       	ldi	r17, 0x00	; 0
    3e5c:	20 e0       	ldi	r18, 0x00	; 0
    3e5e:	30 e0       	ldi	r19, 0x00	; 0
    3e60:	0e 94 1c 0c 	call	0x1838	; 0x1838 <bind>
    3e64:	97 fd       	sbrc	r25, 7
    3e66:	15 c0       	rjmp	.+42     	; 0x3e92 <_ZN22Adafruit_CC3000_Server5beginEv+0x166>
    CC3K_PRINTLN_F("Error binding listen socket to address!");
    return;
  }
  // Start listening for connections.
  // The backlog parameter is 0 as it is not supported on TI's CC3000 firmware.
  cc3k_int_poll();
    3e68:	0e 94 47 21 	call	0x428e	; 0x428e <cc3k_int_poll>
  if (listen(soc, 0) < 0) {
    3e6c:	c3 01       	movw	r24, r6
    3e6e:	b2 01       	movw	r22, r4
    3e70:	20 e0       	ldi	r18, 0x00	; 0
    3e72:	30 e0       	ldi	r19, 0x00	; 0
    3e74:	40 e0       	ldi	r20, 0x00	; 0
    3e76:	50 e0       	ldi	r21, 0x00	; 0
    3e78:	0e 94 cb 0b 	call	0x1796	; 0x1796 <listen>
    3e7c:	97 fd       	sbrc	r25, 7
    3e7e:	09 c0       	rjmp	.+18     	; 0x3e92 <_ZN22Adafruit_CC3000_Server5beginEv+0x166>
    CC3K_PRINTLN_F("Error opening socket for listening!");
    return;
  }
  _listenSocket = soc;
    3e80:	8f ef       	ldi	r24, 0xFF	; 255
    3e82:	90 e0       	ldi	r25, 0x00	; 0
    3e84:	28 0e       	add	r2, r24
    3e86:	39 1e       	adc	r3, r25
    3e88:	f1 01       	movw	r30, r2
    3e8a:	40 82       	st	Z, r4
    3e8c:	51 82       	std	Z+1, r5	; 0x01
    3e8e:	62 82       	std	Z+2, r6	; 0x02
    3e90:	73 82       	std	Z+3, r7	; 0x03
}
    3e92:	a1 96       	adiw	r28, 0x21	; 33
    3e94:	0f b6       	in	r0, 0x3f	; 63
    3e96:	f8 94       	cli
    3e98:	de bf       	out	0x3e, r29	; 62
    3e9a:	0f be       	out	0x3f, r0	; 63
    3e9c:	cd bf       	out	0x3d, r28	; 61
    3e9e:	cf 91       	pop	r28
    3ea0:	df 91       	pop	r29
    3ea2:	1f 91       	pop	r17
    3ea4:	0f 91       	pop	r16
    3ea6:	ff 90       	pop	r15
    3ea8:	ef 90       	pop	r14
    3eaa:	df 90       	pop	r13
    3eac:	cf 90       	pop	r12
    3eae:	bf 90       	pop	r11
    3eb0:	af 90       	pop	r10
    3eb2:	9f 90       	pop	r9
    3eb4:	8f 90       	pop	r8
    3eb6:	7f 90       	pop	r7
    3eb8:	6f 90       	pop	r6
    3eba:	5f 90       	pop	r5
    3ebc:	4f 90       	pop	r4
    3ebe:	3f 90       	pop	r3
    3ec0:	2f 90       	pop	r2
    3ec2:	08 95       	ret

00003ec4 <_ZN22Adafruit_CC3000_ServerC1Ej>:
  Adafruit_CC3000_Server implementation
*/
/**************************************************************************/

// Construct a TCP server to listen on the specified port.
Adafruit_CC3000_Server::Adafruit_CC3000_Server(uint16_t port)
    3ec4:	ef 92       	push	r14
    3ec6:	ff 92       	push	r15
    3ec8:	0f 93       	push	r16
    3eca:	1f 93       	push	r17
    3ecc:	8c 01       	movw	r16, r24
    3ece:	7b 01       	movw	r14, r22
    3ed0:	fc 01       	movw	r30, r24
    3ed2:	13 82       	std	Z+3, r1	; 0x03
    3ed4:	12 82       	std	Z+2, r1	; 0x02
  : _port(port)
  , _listenSocket(-1)
    3ed6:	88 e3       	ldi	r24, 0x38	; 56
    3ed8:	94 e0       	ldi	r25, 0x04	; 4
    3eda:	91 83       	std	Z+1, r25	; 0x01
    3edc:	80 83       	st	Z, r24
    3ede:	c8 01       	movw	r24, r16
    3ee0:	04 96       	adiw	r24, 0x04	; 4
    3ee2:	0e 94 5f 14 	call	0x28be	; 0x28be <_ZN22Adafruit_CC3000_ClientC1Ev>
    3ee6:	c8 01       	movw	r24, r16
    3ee8:	89 5a       	subi	r24, 0xA9	; 169
    3eea:	9f 4f       	sbci	r25, 0xFF	; 255
    3eec:	0e 94 5f 14 	call	0x28be	; 0x28be <_ZN22Adafruit_CC3000_ClientC1Ev>
    3ef0:	c8 01       	movw	r24, r16
    3ef2:	86 55       	subi	r24, 0x56	; 86
    3ef4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ef6:	0e 94 5f 14 	call	0x28be	; 0x28be <_ZN22Adafruit_CC3000_ClientC1Ev>
    3efa:	03 50       	subi	r16, 0x03	; 3
    3efc:	1f 4f       	sbci	r17, 0xFF	; 255
    3efe:	f8 01       	movw	r30, r16
    3f00:	e1 92       	st	Z+, r14
    3f02:	f1 92       	st	Z+, r15
    3f04:	8f ef       	ldi	r24, 0xFF	; 255
    3f06:	9f ef       	ldi	r25, 0xFF	; 255
    3f08:	af ef       	ldi	r26, 0xFF	; 255
    3f0a:	bf ef       	ldi	r27, 0xFF	; 255
    3f0c:	80 83       	st	Z, r24
    3f0e:	91 83       	std	Z+1, r25	; 0x01
    3f10:	a2 83       	std	Z+2, r26	; 0x02
    3f12:	b3 83       	std	Z+3, r27	; 0x03
{ }
    3f14:	1f 91       	pop	r17
    3f16:	0f 91       	pop	r16
    3f18:	ff 90       	pop	r15
    3f1a:	ef 90       	pop	r14
    3f1c:	08 95       	ret

00003f1e <_Z15sendDriverPatchPm>:
//!
//! @brief  The function returns a pointer to the driver patch:
//!         since there is no patch in the host - it returns 0
//
//*****************************************************************************
char *sendDriverPatch(unsigned long *Length) {
    3f1e:	fc 01       	movw	r30, r24
  *Length = 0;
    3f20:	10 82       	st	Z, r1
    3f22:	11 82       	std	Z+1, r1	; 0x01
    3f24:	12 82       	std	Z+2, r1	; 0x02
    3f26:	13 82       	std	Z+3, r1	; 0x03
  return NULL;
}
    3f28:	80 e0       	ldi	r24, 0x00	; 0
    3f2a:	90 e0       	ldi	r25, 0x00	; 0
    3f2c:	08 95       	ret

00003f2e <_Z19sendBootLoaderPatchPm>:
//!
//! @brief  The function returns a pointer to the boot loader patch:
//!         since there is no patch in the host - it returns 0
//
//*****************************************************************************
char *sendBootLoaderPatch(unsigned long *Length) {
    3f2e:	fc 01       	movw	r30, r24
  *Length = 0;
    3f30:	10 82       	st	Z, r1
    3f32:	11 82       	std	Z+1, r1	; 0x01
    3f34:	12 82       	std	Z+2, r1	; 0x02
    3f36:	13 82       	std	Z+3, r1	; 0x03
  return NULL;
}
    3f38:	80 e0       	ldi	r24, 0x00	; 0
    3f3a:	90 e0       	ldi	r25, 0x00	; 0
    3f3c:	08 95       	ret

00003f3e <_Z13sendWLFWPatchPm>:
//!
//! @brief  The function returns a pointer to the FW patch:
//!         since there is no patch in the host - it returns 0
//
//*****************************************************************************
char *sendWLFWPatch(unsigned long *Length) {
    3f3e:	fc 01       	movw	r30, r24
  *Length = 0;
    3f40:	10 82       	st	Z, r1
    3f42:	11 82       	std	Z+1, r1	; 0x01
    3f44:	12 82       	std	Z+2, r1	; 0x02
    3f46:	13 82       	std	Z+3, r1	; 0x03
  return NULL;
}
    3f48:	80 e0       	ldi	r24, 0x00	; 0
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
    3f4c:	08 95       	ret

00003f4e <_Z20ReadWlanInterruptPinv>:
{
  DEBUGPRINT_F("\tCC3000: ReadWlanInterruptPin - ");
  DEBUGPRINT_DEC(digitalRead(g_irqPin));
  DEBUGPRINT_F("\n\r");

  return(digitalRead(g_irqPin));
    3f4e:	80 91 9e 04 	lds	r24, 0x049E
    3f52:	0e 94 60 2e 	call	0x5cc0	; 0x5cc0 <digitalRead>
    3f56:	9c 01       	movw	r18, r24
    3f58:	44 27       	eor	r20, r20
    3f5a:	37 fd       	sbrc	r19, 7
    3f5c:	40 95       	com	r20
    3f5e:	54 2f       	mov	r21, r20
}
    3f60:	b9 01       	movw	r22, r18
    3f62:	ca 01       	movw	r24, r20
    3f64:	08 95       	ret

00003f66 <_Z12WriteWlanPinh>:
    DEBUGPRINT_F("\tCC3000: WriteWlanPin - ");
    DEBUGPRINT_DEC(val);
    DEBUGPRINT_F("\n\r");
    delay(1);
  }
  if (val)
    3f66:	88 23       	and	r24, r24
    3f68:	21 f0       	breq	.+8      	; 0x3f72 <_Z12WriteWlanPinh+0xc>
  {
    digitalWrite(g_vbatPin, HIGH);
    3f6a:	80 91 9f 04 	lds	r24, 0x049F
    3f6e:	61 e0       	ldi	r22, 0x01	; 1
    3f70:	03 c0       	rjmp	.+6      	; 0x3f78 <_Z12WriteWlanPinh+0x12>
  }
  else
  {
    digitalWrite(g_vbatPin, LOW);
    3f72:	80 91 9f 04 	lds	r24, 0x049F
    3f76:	60 e0       	ldi	r22, 0x00	; 0
    3f78:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <digitalWrite>
    3f7c:	08 95       	ret

00003f7e <_Z20WlanInterruptDisablev>:
 */
/**************************************************************************/
void WlanInterruptDisable()
{
  DEBUGPRINT_F("\tCC3000: WlanInterruptDisable\n\r");
  ccspi_int_enabled = 0;
    3f7e:	10 92 ff 05 	sts	0x05FF, r1
  detachInterrupt(g_IRQnum);
    3f82:	80 91 a0 04 	lds	r24, 0x04A0
    3f86:	0e 94 24 2b 	call	0x5648	; 0x5648 <detachInterrupt>
}
    3f8a:	08 95       	ret

00003f8c <_Z11SpiPauseSpiv>:
/**************************************************************************/
void SpiPauseSpi(void)
{
  DEBUGPRINT_F("\tCC3000: SpiPauseSpi\n\r");

  ccspi_int_enabled = 0;
    3f8c:	10 92 ff 05 	sts	0x05FF, r1
  detachInterrupt(g_IRQnum);
    3f90:	80 91 a0 04 	lds	r24, 0x04A0
    3f94:	0e 94 24 2b 	call	0x5648	; 0x5648 <detachInterrupt>
}
    3f98:	08 95       	ret

00003f9a <_Z22SpiTriggerRxProcessingv>:
/**************************************************************************/
/*!

 */
/**************************************************************************/
void SpiTriggerRxProcessing(void)
    3f9a:	cf 93       	push	r28
    3f9c:	df 93       	push	r29
{
  DEBUGPRINT_F("\tCC3000: SpiTriggerRxProcessing\n\r");

  /* Trigger Rx processing */
  SpiPauseSpi();
    3f9e:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <_Z11SpiPauseSpiv>
  CC3000_DEASSERT_CS;
    3fa2:	80 91 9d 04 	lds	r24, 0x049D
    3fa6:	61 e0       	ldi	r22, 0x01	; 1
    3fa8:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <digitalWrite>
    3fac:	80 91 e9 04 	lds	r24, 0x04E9
    3fb0:	8c bd       	out	0x2c, r24	; 44
    3fb2:	80 91 e8 04 	lds	r24, 0x04E8
    3fb6:	88 23       	and	r24, r24
    3fb8:	19 f0       	breq	.+6      	; 0x3fc0 <_Z22SpiTriggerRxProcessingv+0x26>
    3fba:	8d b5       	in	r24, 0x2d	; 45
    3fbc:	81 60       	ori	r24, 0x01	; 1
    3fbe:	02 c0       	rjmp	.+4      	; 0x3fc4 <_Z22SpiTriggerRxProcessingv+0x2a>
    3fc0:	8d b5       	in	r24, 0x2d	; 45
    3fc2:	8e 7f       	andi	r24, 0xFE	; 254
    3fc4:	8d bd       	out	0x2d, r24	; 45

  //DEBUGPRINT_F("Magic?\n\r");
  /* The magic number that resides at the end of the TX/RX buffer (1 byte after the allocated size)
   * for the purpose of detection of the overrun. If the magic number is overriten - buffer overrun
   * occurred - and we will stuck here forever! */
  if (sSpiInformation.pRxPacket[CC3000_RX_BUFFER_SIZE - 1] != CC3000_BUFFER_MAGIC_NUMBER)
    3fc6:	c0 91 f6 04 	lds	r28, 0x04F6
    3fca:	d0 91 f7 04 	lds	r29, 0x04F7
    3fce:	ce 57       	subi	r28, 0x7E	; 126
    3fd0:	df 4f       	sbci	r29, 0xFF	; 255
    3fd2:	88 81       	ld	r24, Y
    3fd4:	c2 58       	subi	r28, 0x82	; 130
    3fd6:	d0 40       	sbci	r29, 0x00	; 0
    3fd8:	8e 3d       	cpi	r24, 0xDE	; 222
    3fda:	09 f0       	breq	.+2      	; 0x3fde <_Z22SpiTriggerRxProcessingv+0x44>
    3fdc:	ff cf       	rjmp	.-2      	; 0x3fdc <_Z22SpiTriggerRxProcessingv+0x42>
    DEBUGPRINT_F("\tCC3000: ERROR - magic number missing!\n\r");
    while (1);
  }

  //DEBUGPRINT_F("OK!\n\r");
  sSpiInformation.ulSpiState = eSPI_STATE_IDLE;
    3fde:	82 e0       	ldi	r24, 0x02	; 2
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    3fe2:	a0 e0       	ldi	r26, 0x00	; 0
    3fe4:	b0 e0       	ldi	r27, 0x00	; 0
    3fe6:	80 93 f0 04 	sts	0x04F0, r24
    3fea:	90 93 f1 04 	sts	0x04F1, r25
    3fee:	a0 93 f2 04 	sts	0x04F2, r26
    3ff2:	b0 93 f3 04 	sts	0x04F3, r27
  sSpiInformation.SPIRxHandler(sSpiInformation.pRxPacket + SPI_HEADER_SIZE);
    3ff6:	e0 91 ea 04 	lds	r30, 0x04EA
    3ffa:	f0 91 eb 04 	lds	r31, 0x04EB
    3ffe:	ce 01       	movw	r24, r28
    4000:	05 96       	adiw	r24, 0x05	; 5
    4002:	09 95       	icall
}
    4004:	df 91       	pop	r29
    4006:	cf 91       	pop	r28
    4008:	08 95       	ret

0000400a <_Z19WlanInterruptEnablev>:
/**************************************************************************/
void WlanInterruptEnable()
{
  DEBUGPRINT_F("\tCC3000: WlanInterruptEnable.\n\r");
  // delay(100);
  ccspi_int_enabled = 1;
    400a:	81 e0       	ldi	r24, 0x01	; 1
    400c:	80 93 ff 05 	sts	0x05FF, r24
  attachInterrupt(g_IRQnum, SPI_IRQ, FALLING);
    4010:	80 91 a0 04 	lds	r24, 0x04A0
    4014:	62 eb       	ldi	r22, 0xB2	; 178
    4016:	70 e2       	ldi	r23, 0x20	; 32
    4018:	42 e0       	ldi	r20, 0x02	; 2
    401a:	50 e0       	ldi	r21, 0x00	; 0
    401c:	0e 94 01 2b 	call	0x5602	; 0x5602 <attachInterrupt>
}
    4020:	08 95       	ret

00004022 <_Z12SpiResumeSpiv>:
/**************************************************************************/
void SpiResumeSpi(void)
{
  DEBUGPRINT_F("\tCC3000: SpiResumeSpi\n\r");

  ccspi_int_enabled = 1;
    4022:	81 e0       	ldi	r24, 0x01	; 1
    4024:	80 93 ff 05 	sts	0x05FF, r24
  attachInterrupt(g_IRQnum, SPI_IRQ, FALLING);
    4028:	80 91 a0 04 	lds	r24, 0x04A0
    402c:	62 eb       	ldi	r22, 0xB2	; 178
    402e:	70 e2       	ldi	r23, 0x20	; 32
    4030:	42 e0       	ldi	r20, 0x02	; 2
    4032:	50 e0       	ldi	r21, 0x00	; 0
    4034:	0e 94 01 2b 	call	0x5602	; 0x5602 <attachInterrupt>
}
    4038:	08 95       	ret

0000403a <_Z22SpiReadDataSynchronousPht>:
/**************************************************************************/
/*!

 */
/**************************************************************************/
void SpiReadDataSynchronous(unsigned char *data, unsigned short size)
    403a:	0f 93       	push	r16
    403c:	1f 93       	push	r17
    403e:	cf 93       	push	r28
    4040:	df 93       	push	r29
    4042:	8c 01       	movw	r16, r24
    4044:	eb 01       	movw	r28, r22
{
  unsigned short i = 0;
  
  DEBUGPRINT_F("\tCC3000: SpiReadDataSynchronous\n\r");
  SPI.setDataMode(SPI_MODE1);
    4046:	84 e0       	ldi	r24, 0x04	; 4
    4048:	0e 94 26 01 	call	0x24c	; 0x24c <_ZN8SPIClass11setDataModeEh>
    404c:	20 e0       	ldi	r18, 0x00	; 0
    404e:	30 e0       	ldi	r19, 0x00	; 0
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    4050:	93 e0       	ldi	r25, 0x03	; 3
    4052:	0b c0       	rjmp	.+22     	; 0x406a <_Z22SpiReadDataSynchronousPht+0x30>
    4054:	9e bd       	out	0x2e, r25	; 46
  while (!(SPSR & _BV(SPIF)))
    4056:	0d b4       	in	r0, 0x2d	; 45
    4058:	07 fe       	sbrs	r0, 7
    405a:	fd cf       	rjmp	.-6      	; 0x4056 <_Z22SpiReadDataSynchronousPht+0x1c>
    ;
  return SPDR;
    405c:	8e b5       	in	r24, 0x2e	; 46
  for (i = 0; i < size; i ++)
  {
    data[i] = SPI.transfer(0x03);
    405e:	f8 01       	movw	r30, r16
    4060:	e2 0f       	add	r30, r18
    4062:	f3 1f       	adc	r31, r19
    4064:	80 83       	st	Z, r24
{
  unsigned short i = 0;
  
  DEBUGPRINT_F("\tCC3000: SpiReadDataSynchronous\n\r");
  SPI.setDataMode(SPI_MODE1);
  for (i = 0; i < size; i ++)
    4066:	2f 5f       	subi	r18, 0xFF	; 255
    4068:	3f 4f       	sbci	r19, 0xFF	; 255
    406a:	2c 17       	cp	r18, r28
    406c:	3d 07       	cpc	r19, r29
    406e:	90 f3       	brcs	.-28     	; 0x4054 <_Z22SpiReadDataSynchronousPht+0x1a>
    data[i] = SPI.transfer(0x03);
    DEBUGPRINT_F("  ");
    DEBUGPRINT_HEX(data[i]);
  }
  DEBUGPRINT_F("\n\r");
}
    4070:	df 91       	pop	r29
    4072:	cf 91       	pop	r28
    4074:	1f 91       	pop	r17
    4076:	0f 91       	pop	r16
    4078:	08 95       	ret

0000407a <_Z15SpiReadDataContv>:
/**************************************************************************/
/*!

 */
/**************************************************************************/
long SpiReadDataCont(void)
    407a:	ef 92       	push	r14
    407c:	ff 92       	push	r15
    407e:	0f 93       	push	r16
    4080:	1f 93       	push	r17
    4082:	cf 93       	push	r28
    4084:	df 93       	push	r29
  unsigned char *evnt_buff, type;

  DEBUGPRINT_F("\tCC3000: SpiReadDataCont\n\r");

  /* Determine what type of packet we have */
  evnt_buff =  sSpiInformation.pRxPacket;
    4086:	c0 91 f6 04 	lds	r28, 0x04F6
    408a:	d0 91 f7 04 	lds	r29, 0x04F7
  data_to_recv = 0;
  STREAM_TO_UINT8((uint8_t *)(evnt_buff + SPI_HEADER_SIZE), HCI_PACKET_TYPE_OFFSET, type);

  switch(type)
    408e:	8d 81       	ldd	r24, Y+5	; 0x05
    4090:	82 30       	cpi	r24, 0x02	; 2
    4092:	21 f0       	breq	.+8      	; 0x409c <_Z15SpiReadDataContv+0x22>
    4094:	84 30       	cpi	r24, 0x04	; 4
    4096:	09 f0       	breq	.+2      	; 0x409a <_Z15SpiReadDataContv+0x20>
    4098:	47 c0       	rjmp	.+142    	; 0x4128 <_Z15SpiReadDataContv+0xae>
    409a:	1b c0       	rjmp	.+54     	; 0x40d2 <_Z15SpiReadDataContv+0x58>
  {
    case HCI_TYPE_DATA:
      {
        /* We need to read the rest of data.. */
        STREAM_TO_UINT16((char *)(evnt_buff + SPI_HEADER_SIZE), HCI_DATA_LENGTH_OFFSET, data_to_recv);
    409c:	ce 01       	movw	r24, r28
    409e:	05 96       	adiw	r24, 0x05	; 5
    40a0:	63 e0       	ldi	r22, 0x03	; 3
    40a2:	70 e0       	ldi	r23, 0x00	; 0
    40a4:	0e 94 77 01 	call	0x2ee	; 0x2ee <STREAM_TO_UINT16_f>
    40a8:	9c 01       	movw	r18, r24
    40aa:	40 e0       	ldi	r20, 0x00	; 0
    40ac:	50 e0       	ldi	r21, 0x00	; 0
        if (!((HEADERS_SIZE_EVNT + data_to_recv) & 1))
    40ae:	80 fd       	sbrc	r24, 0
    40b0:	05 c0       	rjmp	.+10     	; 0x40bc <_Z15SpiReadDataContv+0x42>
        {
          data_to_recv++;
    40b2:	2f 5f       	subi	r18, 0xFF	; 255
    40b4:	3f 4f       	sbci	r19, 0xFF	; 255
    40b6:	4f 4f       	sbci	r20, 0xFF	; 255
    40b8:	5f 4f       	sbci	r21, 0xFF	; 255
    40ba:	05 c0       	rjmp	.+10     	; 0x40c6 <_Z15SpiReadDataContv+0x4c>
        }

        if (data_to_recv)
    40bc:	21 15       	cp	r18, r1
    40be:	31 05       	cpc	r19, r1
    40c0:	41 05       	cpc	r20, r1
    40c2:	51 05       	cpc	r21, r1
    40c4:	89 f1       	breq	.+98     	; 0x4128 <_Z15SpiReadDataContv+0xae>
        {
          SpiReadDataSynchronous(evnt_buff + HEADERS_SIZE_EVNT, data_to_recv);
    40c6:	ce 01       	movw	r24, r28
    40c8:	0a 96       	adiw	r24, 0x0a	; 10
    40ca:	b9 01       	movw	r22, r18
    40cc:	0e 94 1d 20 	call	0x403a	; 0x403a <_Z22SpiReadDataSynchronousPht>
    40d0:	2b c0       	rjmp	.+86     	; 0x4128 <_Z15SpiReadDataContv+0xae>
        break;
      }
    case HCI_TYPE_EVNT:
      {
        /* Calculate the rest length of the data */
        STREAM_TO_UINT8((char *)(evnt_buff + SPI_HEADER_SIZE), HCI_EVENT_LENGTH_OFFSET, data_to_recv);
    40d2:	88 85       	ldd	r24, Y+8	; 0x08
    40d4:	28 2f       	mov	r18, r24
    40d6:	30 e0       	ldi	r19, 0x00	; 0
    40d8:	40 e0       	ldi	r20, 0x00	; 0
    40da:	50 e0       	ldi	r21, 0x00	; 0
        data_to_recv -= 1;
    40dc:	79 01       	movw	r14, r18
    40de:	8a 01       	movw	r16, r20
    40e0:	08 94       	sec
    40e2:	e1 08       	sbc	r14, r1
    40e4:	f1 08       	sbc	r15, r1
    40e6:	01 09       	sbc	r16, r1
    40e8:	11 09       	sbc	r17, r1

        /* Add padding byte if needed */
        if ((HEADERS_SIZE_EVNT + data_to_recv) & 1)
    40ea:	da 01       	movw	r26, r20
    40ec:	c9 01       	movw	r24, r18
    40ee:	09 96       	adiw	r24, 0x09	; 9
    40f0:	a1 1d       	adc	r26, r1
    40f2:	b1 1d       	adc	r27, r1
    40f4:	80 ff       	sbrs	r24, 0
    40f6:	02 c0       	rjmp	.+4      	; 0x40fc <_Z15SpiReadDataContv+0x82>
    40f8:	79 01       	movw	r14, r18
    40fa:	8a 01       	movw	r16, r20
        {
          data_to_recv++;
        }

        if (data_to_recv)
    40fc:	e1 14       	cp	r14, r1
    40fe:	f1 04       	cpc	r15, r1
    4100:	01 05       	cpc	r16, r1
    4102:	11 05       	cpc	r17, r1
    4104:	29 f0       	breq	.+10     	; 0x4110 <_Z15SpiReadDataContv+0x96>
        {
          SpiReadDataSynchronous(evnt_buff + HEADERS_SIZE_EVNT, data_to_recv);
    4106:	ce 01       	movw	r24, r28
    4108:	0a 96       	adiw	r24, 0x0a	; 10
    410a:	b7 01       	movw	r22, r14
    410c:	0e 94 1d 20 	call	0x403a	; 0x403a <_Z22SpiReadDataSynchronousPht>
        }

        sSpiInformation.ulSpiState = eSPI_STATE_READ_EOT;
    4110:	88 e0       	ldi	r24, 0x08	; 8
    4112:	90 e0       	ldi	r25, 0x00	; 0
    4114:	a0 e0       	ldi	r26, 0x00	; 0
    4116:	b0 e0       	ldi	r27, 0x00	; 0
    4118:	80 93 f0 04 	sts	0x04F0, r24
    411c:	90 93 f1 04 	sts	0x04F1, r25
    4120:	a0 93 f2 04 	sts	0x04F2, r26
    4124:	b0 93 f3 04 	sts	0x04F3, r27
        break;
      }
  }

  return (0);
}
    4128:	60 e0       	ldi	r22, 0x00	; 0
    412a:	70 e0       	ldi	r23, 0x00	; 0
    412c:	80 e0       	ldi	r24, 0x00	; 0
    412e:	90 e0       	ldi	r25, 0x00	; 0
    4130:	df 91       	pop	r29
    4132:	cf 91       	pop	r28
    4134:	1f 91       	pop	r17
    4136:	0f 91       	pop	r16
    4138:	ff 90       	pop	r15
    413a:	ef 90       	pop	r14
    413c:	08 95       	ret

0000413e <_Z20SSIContReadOperationv>:
void SSIContReadOperation(void)
{
  DEBUGPRINT_F("\tCC3000: SpiContReadOperation\n\r");
  
  /* The header was read - continue with  the payload read */
  if (!SpiReadDataCont())
    413e:	0e 94 3d 20 	call	0x407a	; 0x407a <_Z15SpiReadDataContv>
    4142:	61 15       	cp	r22, r1
    4144:	71 05       	cpc	r23, r1
    4146:	81 05       	cpc	r24, r1
    4148:	91 05       	cpc	r25, r1
    414a:	11 f4       	brne	.+4      	; 0x4150 <_Z20SSIContReadOperationv+0x12>
  {
    /* All the data was read - finalize handling by switching to teh task
     *  and calling from task Event Handler */
    //DEBUGPRINT_F("SPItrig\n\r");
    SpiTriggerRxProcessing();
    414c:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <_Z22SpiTriggerRxProcessingv>
    4150:	08 95       	ret

00004152 <_Z13SpiReadHeaderv>:
/**************************************************************************/
void SpiReadHeader(void)
{
  DEBUGPRINT_F("\tCC3000: SpiReadHeader\n\r");

  SpiReadDataSynchronous(sSpiInformation.pRxPacket, HEADERS_SIZE_EVNT);
    4152:	80 91 f6 04 	lds	r24, 0x04F6
    4156:	90 91 f7 04 	lds	r25, 0x04F7
    415a:	6a e0       	ldi	r22, 0x0A	; 10
    415c:	70 e0       	ldi	r23, 0x00	; 0
    415e:	0e 94 1d 20 	call	0x403a	; 0x403a <_Z22SpiReadDataSynchronousPht>
}
    4162:	08 95       	ret

00004164 <_Z7SPI_IRQv>:
 */
/**************************************************************************/

void SPI_IRQ(void)
{
  ccspi_is_in_irq = 1;
    4164:	81 e0       	ldi	r24, 0x01	; 1
    4166:	80 93 fe 05 	sts	0x05FE, r24

  DEBUGPRINT_F("\tCC3000: Entering SPI_IRQ\n\r");
    
  if (sSpiInformation.ulSpiState == eSPI_STATE_POWERUP)
    416a:	80 91 f0 04 	lds	r24, 0x04F0
    416e:	90 91 f1 04 	lds	r25, 0x04F1
    4172:	a0 91 f2 04 	lds	r26, 0x04F2
    4176:	b0 91 f3 04 	lds	r27, 0x04F3
    417a:	00 97       	sbiw	r24, 0x00	; 0
    417c:	a1 05       	cpc	r26, r1
    417e:	b1 05       	cpc	r27, r1
    4180:	69 f4       	brne	.+26     	; 0x419c <_Z7SPI_IRQv+0x38>
  {
    /* IRQ line was low ... perform a callback on the HCI Layer */
    sSpiInformation.ulSpiState = eSPI_STATE_INITIALIZED;
    4182:	81 e0       	ldi	r24, 0x01	; 1
    4184:	90 e0       	ldi	r25, 0x00	; 0
    4186:	a0 e0       	ldi	r26, 0x00	; 0
    4188:	b0 e0       	ldi	r27, 0x00	; 0
    418a:	80 93 f0 04 	sts	0x04F0, r24
    418e:	90 93 f1 04 	sts	0x04F1, r25
    4192:	a0 93 f2 04 	sts	0x04F2, r26
    4196:	b0 93 f3 04 	sts	0x04F3, r27
    419a:	76 c0       	rjmp	.+236    	; 0x4288 <_Z7SPI_IRQv+0x124>
  }
  else if (sSpiInformation.ulSpiState == eSPI_STATE_IDLE)
    419c:	82 30       	cpi	r24, 0x02	; 2
    419e:	91 05       	cpc	r25, r1
    41a0:	a1 05       	cpc	r26, r1
    41a2:	b1 05       	cpc	r27, r1
    41a4:	b1 f5       	brne	.+108    	; 0x4212 <_Z7SPI_IRQv+0xae>
  {
    //DEBUGPRINT_F("IDLE\n\r");
    sSpiInformation.ulSpiState = eSPI_STATE_READ_IRQ;    
    41a6:	86 e0       	ldi	r24, 0x06	; 6
    41a8:	90 e0       	ldi	r25, 0x00	; 0
    41aa:	a0 e0       	ldi	r26, 0x00	; 0
    41ac:	b0 e0       	ldi	r27, 0x00	; 0
    41ae:	80 93 f0 04 	sts	0x04F0, r24
    41b2:	90 93 f1 04 	sts	0x04F1, r25
    41b6:	a0 93 f2 04 	sts	0x04F2, r26
    41ba:	b0 93 f3 04 	sts	0x04F3, r27
    /* IRQ line goes down - start reception */

    CC3000_ASSERT_CS;
    41be:	80 91 9d 04 	lds	r24, 0x049D
    41c2:	60 e0       	ldi	r22, 0x00	; 0
    41c4:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <digitalWrite>
    41c8:	8c b5       	in	r24, 0x2c	; 44
    41ca:	80 93 e9 04 	sts	0x04E9, r24
    41ce:	8d b5       	in	r24, 0x2d	; 45
    41d0:	81 70       	andi	r24, 0x01	; 1
    41d2:	80 93 e8 04 	sts	0x04E8, r24
    41d6:	80 91 e6 04 	lds	r24, 0x04E6
    41da:	8c bd       	out	0x2c, r24	; 44
    41dc:	80 91 e7 04 	lds	r24, 0x04E7
    41e0:	88 23       	and	r24, r24
    41e2:	19 f0       	breq	.+6      	; 0x41ea <_Z7SPI_IRQv+0x86>
    41e4:	8d b5       	in	r24, 0x2d	; 45
    41e6:	81 60       	ori	r24, 0x01	; 1
    41e8:	02 c0       	rjmp	.+4      	; 0x41ee <_Z7SPI_IRQv+0x8a>
    41ea:	8d b5       	in	r24, 0x2d	; 45
    41ec:	8e 7f       	andi	r24, 0xFE	; 254
    41ee:	8d bd       	out	0x2d, r24	; 45

    // Wait for TX/RX Compete which will come as DMA interrupt
    SpiReadHeader();
    41f0:	0e 94 a9 20 	call	0x4152	; 0x4152 <_Z13SpiReadHeaderv>
    sSpiInformation.ulSpiState = eSPI_STATE_READ_EOT;
    41f4:	88 e0       	ldi	r24, 0x08	; 8
    41f6:	90 e0       	ldi	r25, 0x00	; 0
    41f8:	a0 e0       	ldi	r26, 0x00	; 0
    41fa:	b0 e0       	ldi	r27, 0x00	; 0
    41fc:	80 93 f0 04 	sts	0x04F0, r24
    4200:	90 93 f1 04 	sts	0x04F1, r25
    4204:	a0 93 f2 04 	sts	0x04F2, r26
    4208:	b0 93 f3 04 	sts	0x04F3, r27
    //DEBUGPRINT_F("SSICont\n\r");
    SSIContReadOperation();
    420c:	0e 94 9f 20 	call	0x413e	; 0x413e <_Z20SSIContReadOperationv>
    4210:	3b c0       	rjmp	.+118    	; 0x4288 <_Z7SPI_IRQv+0x124>
  }
  else if (sSpiInformation.ulSpiState == eSPI_STATE_WRITE_IRQ)
    4212:	03 97       	sbiw	r24, 0x03	; 3
    4214:	a1 05       	cpc	r26, r1
    4216:	b1 05       	cpc	r27, r1
    4218:	b9 f5       	brne	.+110    	; 0x4288 <_Z7SPI_IRQv+0x124>
  {
    SpiWriteDataSynchronous(sSpiInformation.pTxPacket, sSpiInformation.usTxPacketLength);
    421a:	60 91 f4 04 	lds	r22, 0x04F4
    421e:	70 91 f5 04 	lds	r23, 0x04F5
    4222:	40 91 ec 04 	lds	r20, 0x04EC
    4226:	50 91 ed 04 	lds	r21, 0x04ED
    422a:	20 e0       	ldi	r18, 0x00	; 0
    422c:	30 e0       	ldi	r19, 0x00	; 0
    422e:	0b c0       	rjmp	.+22     	; 0x4246 <_Z7SPI_IRQv+0xe2>
  DEBUGPRINT_F("\tCC3000: SpiWriteDataSynchronous Start\n\r");

  unsigned short loc;
  for (loc = 0; loc < size; loc ++) 
  {
      SPI.transfer(data[loc]);
    4230:	fb 01       	movw	r30, r22
    4232:	e2 0f       	add	r30, r18
    4234:	f3 1f       	adc	r31, r19
    4236:	80 81       	ld	r24, Z
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    4238:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    423a:	0d b4       	in	r0, 0x2d	; 45
    423c:	07 fe       	sbrs	r0, 7
    423e:	fd cf       	rjmp	.-6      	; 0x423a <_Z7SPI_IRQv+0xd6>
    ;
  return SPDR;
    4240:	8e b5       	in	r24, 0x2e	; 46
void SpiWriteDataSynchronous(unsigned char *data, unsigned short size)
{
  DEBUGPRINT_F("\tCC3000: SpiWriteDataSynchronous Start\n\r");

  unsigned short loc;
  for (loc = 0; loc < size; loc ++) 
    4242:	2f 5f       	subi	r18, 0xFF	; 255
    4244:	3f 4f       	sbci	r19, 0xFF	; 255
    4246:	24 17       	cp	r18, r20
    4248:	35 07       	cpc	r19, r21
    424a:	90 f3       	brcs	.-28     	; 0x4230 <_Z7SPI_IRQv+0xcc>
    SSIContReadOperation();
  }
  else if (sSpiInformation.ulSpiState == eSPI_STATE_WRITE_IRQ)
  {
    SpiWriteDataSynchronous(sSpiInformation.pTxPacket, sSpiInformation.usTxPacketLength);
    sSpiInformation.ulSpiState = eSPI_STATE_IDLE;
    424c:	82 e0       	ldi	r24, 0x02	; 2
    424e:	90 e0       	ldi	r25, 0x00	; 0
    4250:	a0 e0       	ldi	r26, 0x00	; 0
    4252:	b0 e0       	ldi	r27, 0x00	; 0
    4254:	80 93 f0 04 	sts	0x04F0, r24
    4258:	90 93 f1 04 	sts	0x04F1, r25
    425c:	a0 93 f2 04 	sts	0x04F2, r26
    4260:	b0 93 f3 04 	sts	0x04F3, r27
    CC3000_DEASSERT_CS;
    4264:	80 91 9d 04 	lds	r24, 0x049D
    4268:	61 e0       	ldi	r22, 0x01	; 1
    426a:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <digitalWrite>
    426e:	80 91 e9 04 	lds	r24, 0x04E9
    4272:	8c bd       	out	0x2c, r24	; 44
    4274:	80 91 e8 04 	lds	r24, 0x04E8
    4278:	88 23       	and	r24, r24
    427a:	19 f0       	breq	.+6      	; 0x4282 <_Z7SPI_IRQv+0x11e>
    427c:	8d b5       	in	r24, 0x2d	; 45
    427e:	81 60       	ori	r24, 0x01	; 1
    4280:	02 c0       	rjmp	.+4      	; 0x4286 <_Z7SPI_IRQv+0x122>
    4282:	8d b5       	in	r24, 0x2d	; 45
    4284:	8e 7f       	andi	r24, 0xFE	; 254
    4286:	8d bd       	out	0x2d, r24	; 45
  }

  DEBUGPRINT_F("\tCC3000: Leaving SPI_IRQ\n\r");

  ccspi_is_in_irq = 0;
    4288:	10 92 fe 05 	sts	0x05FE, r1
  return;
}
    428c:	08 95       	ret

0000428e <cc3k_int_poll>:
//
//*****************************************************************************

void cc3k_int_poll()
{
  if (digitalRead(g_irqPin) == LOW && ccspi_is_in_irq == 0 && ccspi_int_enabled != 0) {
    428e:	80 91 9e 04 	lds	r24, 0x049E
    4292:	0e 94 60 2e 	call	0x5cc0	; 0x5cc0 <digitalRead>
    4296:	89 2b       	or	r24, r25
    4298:	51 f4       	brne	.+20     	; 0x42ae <cc3k_int_poll+0x20>
    429a:	80 91 fe 05 	lds	r24, 0x05FE
    429e:	88 23       	and	r24, r24
    42a0:	31 f4       	brne	.+12     	; 0x42ae <cc3k_int_poll+0x20>
    42a2:	80 91 ff 05 	lds	r24, 0x05FF
    42a6:	88 23       	and	r24, r24
    42a8:	11 f0       	breq	.+4      	; 0x42ae <cc3k_int_poll+0x20>
    SPI_IRQ();
    42aa:	0e 94 b2 20 	call	0x4164	; 0x4164 <_Z7SPI_IRQv>
    42ae:	08 95       	ret

000042b0 <_Z13SpiFirstWritePht>:
/**************************************************************************/
/*!

 */
/**************************************************************************/
long SpiFirstWrite(unsigned char *ucBuf, unsigned short usLength)
    42b0:	0f 93       	push	r16
    42b2:	1f 93       	push	r17
    42b4:	cf 93       	push	r28
    42b6:	df 93       	push	r29
    42b8:	ec 01       	movw	r28, r24
    42ba:	8b 01       	movw	r16, r22
{
  DEBUGPRINT_F("\tCC3000: SpiWriteFirst\n\r");
  
  /* Workaround for the first transaction */
  CC3000_ASSERT_CS;
    42bc:	80 91 9d 04 	lds	r24, 0x049D
    42c0:	60 e0       	ldi	r22, 0x00	; 0
    42c2:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <digitalWrite>
    42c6:	8c b5       	in	r24, 0x2c	; 44
    42c8:	80 93 e9 04 	sts	0x04E9, r24
    42cc:	8d b5       	in	r24, 0x2d	; 45
    42ce:	81 70       	andi	r24, 0x01	; 1
    42d0:	80 93 e8 04 	sts	0x04E8, r24
    42d4:	80 91 e6 04 	lds	r24, 0x04E6
    42d8:	8c bd       	out	0x2c, r24	; 44
    42da:	80 91 e7 04 	lds	r24, 0x04E7
    42de:	88 23       	and	r24, r24
    42e0:	19 f0       	breq	.+6      	; 0x42e8 <_Z13SpiFirstWritePht+0x38>
    42e2:	8d b5       	in	r24, 0x2d	; 45
    42e4:	81 60       	ori	r24, 0x01	; 1
    42e6:	02 c0       	rjmp	.+4      	; 0x42ec <_Z13SpiFirstWritePht+0x3c>
    42e8:	8d b5       	in	r24, 0x2d	; 45
    42ea:	8e 7f       	andi	r24, 0xFE	; 254
    42ec:	8d bd       	out	0x2d, r24	; 45

  /* delay (stay low) for ~50us */
  delay(1);
    42ee:	61 e0       	ldi	r22, 0x01	; 1
    42f0:	70 e0       	ldi	r23, 0x00	; 0
    42f2:	80 e0       	ldi	r24, 0x00	; 0
    42f4:	90 e0       	ldi	r25, 0x00	; 0
    42f6:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <delay>
    42fa:	20 e0       	ldi	r18, 0x00	; 0
    42fc:	30 e0       	ldi	r19, 0x00	; 0
  DEBUGPRINT_F("\tCC3000: SpiWriteDataSynchronous Start\n\r");

  unsigned short loc;
  for (loc = 0; loc < size; loc ++) 
  {
      SPI.transfer(data[loc]);
    42fe:	fe 01       	movw	r30, r28
    4300:	e2 0f       	add	r30, r18
    4302:	f3 1f       	adc	r31, r19
    4304:	80 81       	ld	r24, Z
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    4306:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    4308:	0d b4       	in	r0, 0x2d	; 45
    430a:	07 fe       	sbrs	r0, 7
    430c:	fd cf       	rjmp	.-6      	; 0x4308 <_Z13SpiFirstWritePht+0x58>
    ;
  return SPDR;
    430e:	8e b5       	in	r24, 0x2e	; 46
void SpiWriteDataSynchronous(unsigned char *data, unsigned short size)
{
  DEBUGPRINT_F("\tCC3000: SpiWriteDataSynchronous Start\n\r");

  unsigned short loc;
  for (loc = 0; loc < size; loc ++) 
    4310:	2f 5f       	subi	r18, 0xFF	; 255
    4312:	3f 4f       	sbci	r19, 0xFF	; 255
    4314:	24 30       	cpi	r18, 0x04	; 4
    4316:	31 05       	cpc	r19, r1
    4318:	91 f7       	brne	.-28     	; 0x42fe <_Z13SpiFirstWritePht+0x4e>
  delay(1);

  /* SPI writes first 4 bytes of data */
  SpiWriteDataSynchronous(ucBuf, 4);

  delay(1);
    431a:	61 e0       	ldi	r22, 0x01	; 1
    431c:	70 e0       	ldi	r23, 0x00	; 0
    431e:	80 e0       	ldi	r24, 0x00	; 0
    4320:	90 e0       	ldi	r25, 0x00	; 0
    4322:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <delay>

  SpiWriteDataSynchronous(ucBuf + 4, usLength - 4);
    4326:	b8 01       	movw	r22, r16
    4328:	64 50       	subi	r22, 0x04	; 4
    432a:	70 40       	sbci	r23, 0x00	; 0
    432c:	fe 01       	movw	r30, r28
    432e:	20 e0       	ldi	r18, 0x00	; 0
    4330:	30 e0       	ldi	r19, 0x00	; 0
    4332:	09 c0       	rjmp	.+18     	; 0x4346 <_Z13SpiFirstWritePht+0x96>
  DEBUGPRINT_F("\tCC3000: SpiWriteDataSynchronous Start\n\r");

  unsigned short loc;
  for (loc = 0; loc < size; loc ++) 
  {
      SPI.transfer(data[loc]);
    4334:	84 81       	ldd	r24, Z+4	; 0x04
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    4336:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    4338:	0d b4       	in	r0, 0x2d	; 45
    433a:	07 fe       	sbrs	r0, 7
    433c:	fd cf       	rjmp	.-6      	; 0x4338 <_Z13SpiFirstWritePht+0x88>
    ;
  return SPDR;
    433e:	8e b5       	in	r24, 0x2e	; 46
void SpiWriteDataSynchronous(unsigned char *data, unsigned short size)
{
  DEBUGPRINT_F("\tCC3000: SpiWriteDataSynchronous Start\n\r");

  unsigned short loc;
  for (loc = 0; loc < size; loc ++) 
    4340:	2f 5f       	subi	r18, 0xFF	; 255
    4342:	3f 4f       	sbci	r19, 0xFF	; 255
    4344:	31 96       	adiw	r30, 0x01	; 1
    4346:	26 17       	cp	r18, r22
    4348:	37 07       	cpc	r19, r23
    434a:	a0 f3       	brcs	.-24     	; 0x4334 <_Z13SpiFirstWritePht+0x84>
  delay(1);

  SpiWriteDataSynchronous(ucBuf + 4, usLength - 4);

  /* From this point on - operate in a regular manner */
  sSpiInformation.ulSpiState = eSPI_STATE_IDLE;
    434c:	82 e0       	ldi	r24, 0x02	; 2
    434e:	90 e0       	ldi	r25, 0x00	; 0
    4350:	a0 e0       	ldi	r26, 0x00	; 0
    4352:	b0 e0       	ldi	r27, 0x00	; 0
    4354:	80 93 f0 04 	sts	0x04F0, r24
    4358:	90 93 f1 04 	sts	0x04F1, r25
    435c:	a0 93 f2 04 	sts	0x04F2, r26
    4360:	b0 93 f3 04 	sts	0x04F3, r27

  CC3000_DEASSERT_CS;
    4364:	80 91 9d 04 	lds	r24, 0x049D
    4368:	61 e0       	ldi	r22, 0x01	; 1
    436a:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <digitalWrite>
    436e:	80 91 e9 04 	lds	r24, 0x04E9
    4372:	8c bd       	out	0x2c, r24	; 44
    4374:	80 91 e8 04 	lds	r24, 0x04E8
    4378:	88 23       	and	r24, r24
    437a:	19 f0       	breq	.+6      	; 0x4382 <_Z13SpiFirstWritePht+0xd2>
    437c:	8d b5       	in	r24, 0x2d	; 45
    437e:	81 60       	ori	r24, 0x01	; 1
    4380:	02 c0       	rjmp	.+4      	; 0x4386 <_Z13SpiFirstWritePht+0xd6>
    4382:	8d b5       	in	r24, 0x2d	; 45
    4384:	8e 7f       	andi	r24, 0xFE	; 254
    4386:	8d bd       	out	0x2d, r24	; 45

  return(0);
}
    4388:	60 e0       	ldi	r22, 0x00	; 0
    438a:	70 e0       	ldi	r23, 0x00	; 0
    438c:	80 e0       	ldi	r24, 0x00	; 0
    438e:	90 e0       	ldi	r25, 0x00	; 0
    4390:	df 91       	pop	r29
    4392:	cf 91       	pop	r28
    4394:	1f 91       	pop	r17
    4396:	0f 91       	pop	r16
    4398:	08 95       	ret

0000439a <_Z8SpiWritePht>:
/**************************************************************************/
/*!

 */
/**************************************************************************/
long SpiWrite(unsigned char *pUserBuffer, unsigned short usLength)
    439a:	0f 93       	push	r16
    439c:	1f 93       	push	r17
    439e:	cf 93       	push	r28
    43a0:	df 93       	push	r29
    43a2:	ec 01       	movw	r28, r24
    43a4:	90 e0       	ldi	r25, 0x00	; 0
    43a6:	60 ff       	sbrs	r22, 0
    43a8:	91 e0       	ldi	r25, 0x01	; 1
  if(!(usLength & 0x0001))
  {
    ucPad++;
  }

  pUserBuffer[0] = WRITE;
    43aa:	81 e0       	ldi	r24, 0x01	; 1
    43ac:	88 83       	st	Y, r24
  pUserBuffer[1] = HI(usLength + ucPad);
    43ae:	9b 01       	movw	r18, r22
    43b0:	29 0f       	add	r18, r25
    43b2:	31 1d       	adc	r19, r1
    43b4:	39 83       	std	Y+1, r19	; 0x01
  pUserBuffer[2] = LO(usLength + ucPad);
    43b6:	96 0f       	add	r25, r22
    43b8:	9a 83       	std	Y+2, r25	; 0x02
  pUserBuffer[3] = 0;
    43ba:	1b 82       	std	Y+3, r1	; 0x03
  pUserBuffer[4] = 0;
    43bc:	1c 82       	std	Y+4, r1	; 0x04
  usLength += (SPI_HEADER_SIZE + ucPad);

  /* The magic number that resides at the end of the TX/RX buffer (1 byte after the allocated size)
   * for the purpose of overrun detection. If the magic number is overwritten - buffer overrun
   * occurred - and we will be stuck here forever! */
  if (wlan_tx_buffer[CC3000_TX_BUFFER_SIZE - 1] != CC3000_BUFFER_MAGIC_NUMBER)
    43be:	80 91 fd 05 	lds	r24, 0x05FD
    43c2:	8e 3d       	cpi	r24, 0xDE	; 222
    43c4:	09 f0       	breq	.+2      	; 0x43c8 <_Z8SpiWritePht+0x2e>
    43c6:	ff cf       	rjmp	.-2      	; 0x43c6 <_Z8SpiWritePht+0x2c>
  {
    DEBUGPRINT_F("\tCC3000: Error - No magic number found in SpiWrite\n\r");
    while (1);
  }

  if (sSpiInformation.ulSpiState == eSPI_STATE_POWERUP)
    43c8:	80 91 f0 04 	lds	r24, 0x04F0
    43cc:	90 91 f1 04 	lds	r25, 0x04F1
    43d0:	a0 91 f2 04 	lds	r26, 0x04F2
    43d4:	b0 91 f3 04 	lds	r27, 0x04F3
    43d8:	00 97       	sbiw	r24, 0x00	; 0
    43da:	a1 05       	cpc	r26, r1
    43dc:	b1 05       	cpc	r27, r1
    43de:	09 f4       	brne	.+2      	; 0x43e2 <_Z8SpiWritePht+0x48>
    43e0:	ff cf       	rjmp	.-2      	; 0x43e0 <_Z8SpiWritePht+0x46>
  pUserBuffer[1] = HI(usLength + ucPad);
  pUserBuffer[2] = LO(usLength + ucPad);
  pUserBuffer[3] = 0;
  pUserBuffer[4] = 0;

  usLength += (SPI_HEADER_SIZE + ucPad);
    43e2:	89 01       	movw	r16, r18
    43e4:	0b 5f       	subi	r16, 0xFB	; 251
    43e6:	1f 4f       	sbci	r17, 0xFF	; 255
  if (sSpiInformation.ulSpiState == eSPI_STATE_POWERUP)
  {
    while (sSpiInformation.ulSpiState != eSPI_STATE_INITIALIZED);
  }

  if (sSpiInformation.ulSpiState == eSPI_STATE_INITIALIZED)
    43e8:	01 97       	sbiw	r24, 0x01	; 1
    43ea:	a1 05       	cpc	r26, r1
    43ec:	b1 05       	cpc	r27, r1
    43ee:	29 f4       	brne	.+10     	; 0x43fa <_Z8SpiWritePht+0x60>
  {
    /* This is time for first TX/RX transactions over SPI: the IRQ is down - so need to send read buffer size command */
    SpiFirstWrite(pUserBuffer, usLength);
    43f0:	ce 01       	movw	r24, r28
    43f2:	b8 01       	movw	r22, r16
    43f4:	0e 94 58 21 	call	0x42b0	; 0x42b0 <_Z13SpiFirstWritePht>
    43f8:	85 c0       	rjmp	.+266    	; 0x4504 <_Z8SpiWritePht+0x16a>
  }
  else
  {
    /* We need to prevent here race that can occur in case two back to back packets are sent to the
     * device, so the state will move to IDLE and once again to not IDLE due to IRQ */
    tSLInformation.WlanInterruptDisable();
    43fa:	e0 91 84 04 	lds	r30, 0x0484
    43fe:	f0 91 85 04 	lds	r31, 0x0485
    4402:	09 95       	icall

    while (sSpiInformation.ulSpiState != eSPI_STATE_IDLE);
    4404:	80 91 f0 04 	lds	r24, 0x04F0
    4408:	90 91 f1 04 	lds	r25, 0x04F1
    440c:	a0 91 f2 04 	lds	r26, 0x04F2
    4410:	b0 91 f3 04 	lds	r27, 0x04F3
    4414:	02 97       	sbiw	r24, 0x02	; 2
    4416:	a1 05       	cpc	r26, r1
    4418:	b1 05       	cpc	r27, r1
    441a:	09 f0       	breq	.+2      	; 0x441e <_Z8SpiWritePht+0x84>
    441c:	89 c0       	rjmp	.+274    	; 0x4530 <_Z8SpiWritePht+0x196>

    sSpiInformation.ulSpiState = eSPI_STATE_WRITE_IRQ;
    441e:	83 e0       	ldi	r24, 0x03	; 3
    4420:	90 e0       	ldi	r25, 0x00	; 0
    4422:	a0 e0       	ldi	r26, 0x00	; 0
    4424:	b0 e0       	ldi	r27, 0x00	; 0
    4426:	80 93 f0 04 	sts	0x04F0, r24
    442a:	90 93 f1 04 	sts	0x04F1, r25
    442e:	a0 93 f2 04 	sts	0x04F2, r26
    4432:	b0 93 f3 04 	sts	0x04F3, r27
    sSpiInformation.pTxPacket = pUserBuffer;
    4436:	d0 93 f5 04 	sts	0x04F5, r29
    443a:	c0 93 f4 04 	sts	0x04F4, r28
    sSpiInformation.usTxPacketLength = usLength;
    443e:	10 93 ed 04 	sts	0x04ED, r17
    4442:	00 93 ec 04 	sts	0x04EC, r16

    /* Assert the CS line and wait till SSI IRQ line is active and then initialize write operation */
    CC3000_ASSERT_CS;
    4446:	80 91 9d 04 	lds	r24, 0x049D
    444a:	60 e0       	ldi	r22, 0x00	; 0
    444c:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <digitalWrite>
    4450:	8c b5       	in	r24, 0x2c	; 44
    4452:	80 93 e9 04 	sts	0x04E9, r24
    4456:	8d b5       	in	r24, 0x2d	; 45
    4458:	81 70       	andi	r24, 0x01	; 1
    445a:	80 93 e8 04 	sts	0x04E8, r24
    445e:	80 91 e6 04 	lds	r24, 0x04E6
    4462:	8c bd       	out	0x2c, r24	; 44
    4464:	80 91 e7 04 	lds	r24, 0x04E7
    4468:	88 23       	and	r24, r24
    446a:	19 f0       	breq	.+6      	; 0x4472 <_Z8SpiWritePht+0xd8>
    446c:	8d b5       	in	r24, 0x2d	; 45
    446e:	81 60       	ori	r24, 0x01	; 1
    4470:	02 c0       	rjmp	.+4      	; 0x4476 <_Z8SpiWritePht+0xdc>
    4472:	8d b5       	in	r24, 0x2d	; 45
    4474:	8e 7f       	andi	r24, 0xFE	; 254
    4476:	8d bd       	out	0x2d, r24	; 45

    /* Re-enable IRQ - if it was not disabled - this is not a problem... */
    tSLInformation.WlanInterruptEnable();
    4478:	e0 91 82 04 	lds	r30, 0x0482
    447c:	f0 91 83 04 	lds	r31, 0x0483
    4480:	09 95       	icall

    /* Check for a missing interrupt between the CS assertion and enabling back the interrupts */
    if (tSLInformation.ReadWlanInterruptPin() == 0)
    4482:	e0 91 80 04 	lds	r30, 0x0480
    4486:	f0 91 81 04 	lds	r31, 0x0481
    448a:	09 95       	icall
    448c:	61 15       	cp	r22, r1
    448e:	71 05       	cpc	r23, r1
    4490:	81 05       	cpc	r24, r1
    4492:	91 05       	cpc	r25, r1
    4494:	b9 f5       	brne	.+110    	; 0x4504 <_Z8SpiWritePht+0x16a>
    {
      SpiWriteDataSynchronous(sSpiInformation.pTxPacket, sSpiInformation.usTxPacketLength);
    4496:	60 91 f4 04 	lds	r22, 0x04F4
    449a:	70 91 f5 04 	lds	r23, 0x04F5
    449e:	40 91 ec 04 	lds	r20, 0x04EC
    44a2:	50 91 ed 04 	lds	r21, 0x04ED
    44a6:	20 e0       	ldi	r18, 0x00	; 0
    44a8:	30 e0       	ldi	r19, 0x00	; 0
    44aa:	0b c0       	rjmp	.+22     	; 0x44c2 <_Z8SpiWritePht+0x128>
  DEBUGPRINT_F("\tCC3000: SpiWriteDataSynchronous Start\n\r");

  unsigned short loc;
  for (loc = 0; loc < size; loc ++) 
  {
      SPI.transfer(data[loc]);
    44ac:	fb 01       	movw	r30, r22
    44ae:	e2 0f       	add	r30, r18
    44b0:	f3 1f       	adc	r31, r19
    44b2:	80 81       	ld	r24, Z
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    44b4:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    44b6:	0d b4       	in	r0, 0x2d	; 45
    44b8:	07 fe       	sbrs	r0, 7
    44ba:	fd cf       	rjmp	.-6      	; 0x44b6 <_Z8SpiWritePht+0x11c>
    ;
  return SPDR;
    44bc:	8e b5       	in	r24, 0x2e	; 46
void SpiWriteDataSynchronous(unsigned char *data, unsigned short size)
{
  DEBUGPRINT_F("\tCC3000: SpiWriteDataSynchronous Start\n\r");

  unsigned short loc;
  for (loc = 0; loc < size; loc ++) 
    44be:	2f 5f       	subi	r18, 0xFF	; 255
    44c0:	3f 4f       	sbci	r19, 0xFF	; 255
    44c2:	24 17       	cp	r18, r20
    44c4:	35 07       	cpc	r19, r21
    44c6:	90 f3       	brcs	.-28     	; 0x44ac <_Z8SpiWritePht+0x112>
    /* Check for a missing interrupt between the CS assertion and enabling back the interrupts */
    if (tSLInformation.ReadWlanInterruptPin() == 0)
    {
      SpiWriteDataSynchronous(sSpiInformation.pTxPacket, sSpiInformation.usTxPacketLength);

      sSpiInformation.ulSpiState = eSPI_STATE_IDLE;
    44c8:	82 e0       	ldi	r24, 0x02	; 2
    44ca:	90 e0       	ldi	r25, 0x00	; 0
    44cc:	a0 e0       	ldi	r26, 0x00	; 0
    44ce:	b0 e0       	ldi	r27, 0x00	; 0
    44d0:	80 93 f0 04 	sts	0x04F0, r24
    44d4:	90 93 f1 04 	sts	0x04F1, r25
    44d8:	a0 93 f2 04 	sts	0x04F2, r26
    44dc:	b0 93 f3 04 	sts	0x04F3, r27

      CC3000_DEASSERT_CS;
    44e0:	80 91 9d 04 	lds	r24, 0x049D
    44e4:	61 e0       	ldi	r22, 0x01	; 1
    44e6:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <digitalWrite>
    44ea:	80 91 e9 04 	lds	r24, 0x04E9
    44ee:	8c bd       	out	0x2c, r24	; 44
    44f0:	80 91 e8 04 	lds	r24, 0x04E8
    44f4:	88 23       	and	r24, r24
    44f6:	19 f0       	breq	.+6      	; 0x44fe <_Z8SpiWritePht+0x164>
    44f8:	8d b5       	in	r24, 0x2d	; 45
    44fa:	81 60       	ori	r24, 0x01	; 1
    44fc:	02 c0       	rjmp	.+4      	; 0x4502 <_Z8SpiWritePht+0x168>
    44fe:	8d b5       	in	r24, 0x2d	; 45
    4500:	8e 7f       	andi	r24, 0xFE	; 254
    4502:	8d bd       	out	0x2d, r24	; 45
    }
  }

  /* Due to the fact that we are currently implementing a blocking situation
   * here we will wait till end of transaction */
  while (eSPI_STATE_IDLE != sSpiInformation.ulSpiState);
    4504:	80 91 f0 04 	lds	r24, 0x04F0
    4508:	90 91 f1 04 	lds	r25, 0x04F1
    450c:	a0 91 f2 04 	lds	r26, 0x04F2
    4510:	b0 91 f3 04 	lds	r27, 0x04F3
    4514:	02 97       	sbiw	r24, 0x02	; 2
    4516:	a1 05       	cpc	r26, r1
    4518:	b1 05       	cpc	r27, r1
    451a:	49 f4       	brne	.+18     	; 0x452e <_Z8SpiWritePht+0x194>

  return(0);
}
    451c:	60 e0       	ldi	r22, 0x00	; 0
    451e:	70 e0       	ldi	r23, 0x00	; 0
    4520:	80 e0       	ldi	r24, 0x00	; 0
    4522:	90 e0       	ldi	r25, 0x00	; 0
    4524:	df 91       	pop	r29
    4526:	cf 91       	pop	r28
    4528:	1f 91       	pop	r17
    452a:	0f 91       	pop	r16
    452c:	08 95       	ret
    452e:	ff cf       	rjmp	.-2      	; 0x452e <_Z8SpiWritePht+0x194>
    4530:	ff cf       	rjmp	.-2      	; 0x4530 <_Z8SpiWritePht+0x196>

00004532 <_Z8init_spiv>:
{

  DEBUGPRINT_F("\tCC3000: init_spi\n\r");
  
  /* Set POWER_EN pin to output and disable the CC3000 by default */
  pinMode(g_vbatPin, OUTPUT);
    4532:	80 91 9f 04 	lds	r24, 0x049F
    4536:	61 e0       	ldi	r22, 0x01	; 1
    4538:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <pinMode>
  digitalWrite(g_vbatPin, 0);
    453c:	80 91 9f 04 	lds	r24, 0x049F
    4540:	60 e0       	ldi	r22, 0x00	; 0
    4542:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <digitalWrite>
  delay(500);
    4546:	64 ef       	ldi	r22, 0xF4	; 244
    4548:	71 e0       	ldi	r23, 0x01	; 1
    454a:	80 e0       	ldi	r24, 0x00	; 0
    454c:	90 e0       	ldi	r25, 0x00	; 0
    454e:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <delay>

  /* Set CS pin to output (don't de-assert yet) */
  pinMode(g_csPin, OUTPUT);
    4552:	80 91 9d 04 	lds	r24, 0x049D
    4556:	61 e0       	ldi	r22, 0x01	; 1
    4558:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <pinMode>

  /* Set interrupt/gpio pin to input */
#if defined(INPUT_PULLUP)
  pinMode(g_irqPin, INPUT_PULLUP);
    455c:	80 91 9e 04 	lds	r24, 0x049E
    4560:	62 e0       	ldi	r22, 0x02	; 2
    4562:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <pinMode>
#else
  pinMode(g_irqPin, INPUT);
  digitalWrite(g_irqPin, HIGH); // w/weak pullup
#endif

  SpiConfigStoreOld(); // prime ccspi_old* values for DEASSERT
    4566:	8c b5       	in	r24, 0x2c	; 44
    4568:	80 93 e9 04 	sts	0x04E9, r24
    456c:	8d b5       	in	r24, 0x2d	; 45
    456e:	81 70       	andi	r24, 0x01	; 1
    4570:	80 93 e8 04 	sts	0x04E8, r24

  /* Initialise SPI (Mode 1) */
  SPI.begin();
    4574:	0e 94 3c 01 	call	0x278	; 0x278 <_ZN8SPIClass5beginEv>
  SPI.setDataMode(SPI_MODE1);
    4578:	84 e0       	ldi	r24, 0x04	; 4
    457a:	0e 94 26 01 	call	0x24c	; 0x24c <_ZN8SPIClass11setDataModeEh>
  SPI.setBitOrder(MSBFIRST);
    457e:	81 e0       	ldi	r24, 0x01	; 1
    4580:	0e 94 1d 01 	call	0x23a	; 0x23a <_ZN8SPIClass11setBitOrderEh>
  SPI.setClockDivider(g_SPIspeed);
    4584:	80 91 a1 04 	lds	r24, 0x04A1
    4588:	0e 94 2b 01 	call	0x256	; 0x256 <_ZN8SPIClass15setClockDividerEh>
  
  SpiConfigStoreMy(); // prime ccspi_my* values for ASSERT
    458c:	8c b5       	in	r24, 0x2c	; 44
    458e:	80 93 e6 04 	sts	0x04E6, r24
    4592:	8d b5       	in	r24, 0x2d	; 45
    4594:	81 70       	andi	r24, 0x01	; 1
    4596:	80 93 e7 04 	sts	0x04E7, r24
#ifdef SPI_HAS_TRANSACTION
  SPI.usingInterrupt(g_IRQnum);
  digitalWrite(g_csPin, HIGH);  // same as CC3000_DEASSERT_CS, but not
  SpiConfigPop();               // SPI.endTransaction, because none began
#else
  CC3000_DEASSERT_CS;
    459a:	80 91 9d 04 	lds	r24, 0x049D
    459e:	61 e0       	ldi	r22, 0x01	; 1
    45a0:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <digitalWrite>
    45a4:	80 91 e9 04 	lds	r24, 0x04E9
    45a8:	8c bd       	out	0x2c, r24	; 44
    45aa:	80 91 e8 04 	lds	r24, 0x04E8
    45ae:	88 23       	and	r24, r24
    45b0:	19 f0       	breq	.+6      	; 0x45b8 <_Z8init_spiv+0x86>
    45b2:	8d b5       	in	r24, 0x2d	; 45
    45b4:	81 60       	ori	r24, 0x01	; 1
    45b6:	02 c0       	rjmp	.+4      	; 0x45bc <_Z8init_spiv+0x8a>
    45b8:	8d b5       	in	r24, 0x2d	; 45
    45ba:	8e 7f       	andi	r24, 0xFE	; 254
    45bc:	8d bd       	out	0x2d, r24	; 45
  /* ToDo: Configure IRQ interrupt! */

  DEBUGPRINT_F("\tCC3000: Finished init_spi\n\r");
  
  return(ESUCCESS);
}
    45be:	80 e0       	ldi	r24, 0x00	; 0
    45c0:	90 e0       	ldi	r25, 0x00	; 0
    45c2:	08 95       	ret

000045c4 <_Z7SpiOpenPFvPvE>:
/**************************************************************************/
/*!

 */
/**************************************************************************/
void SpiOpen(gcSpiHandleRx pfRxHandler)
    45c4:	cf 93       	push	r28
    45c6:	df 93       	push	r29
{
  DEBUGPRINT_F("\tCC3000: SpiOpen");
  
  sSpiInformation.ulSpiState = eSPI_STATE_POWERUP;
    45c8:	10 92 f0 04 	sts	0x04F0, r1
    45cc:	10 92 f1 04 	sts	0x04F1, r1
    45d0:	10 92 f2 04 	sts	0x04F2, r1
    45d4:	10 92 f3 04 	sts	0x04F3, r1

  memset(spi_buffer, 0, sizeof(spi_buffer));
    45d8:	a8 ef       	ldi	r26, 0xF8	; 248
    45da:	b4 e0       	ldi	r27, 0x04	; 4
    45dc:	23 e8       	ldi	r18, 0x83	; 131
    45de:	ed 01       	movw	r28, r26
    45e0:	e2 2f       	mov	r30, r18
    45e2:	19 92       	st	Y+, r1
    45e4:	ea 95       	dec	r30
    45e6:	e9 f7       	brne	.-6      	; 0x45e2 <_Z7SpiOpenPFvPvE+0x1e>
  memset(wlan_tx_buffer, 0, sizeof(wlan_tx_buffer));
    45e8:	eb e7       	ldi	r30, 0x7B	; 123
    45ea:	f5 e0       	ldi	r31, 0x05	; 5
    45ec:	ef 01       	movw	r28, r30
    45ee:	19 92       	st	Y+, r1
    45f0:	2a 95       	dec	r18
    45f2:	e9 f7       	brne	.-6      	; 0x45ee <_Z7SpiOpenPFvPvE+0x2a>

  sSpiInformation.SPIRxHandler      = pfRxHandler;
    45f4:	90 93 eb 04 	sts	0x04EB, r25
    45f8:	80 93 ea 04 	sts	0x04EA, r24
  sSpiInformation.usTxPacketLength  = 0;
    45fc:	10 92 ed 04 	sts	0x04ED, r1
    4600:	10 92 ec 04 	sts	0x04EC, r1
  sSpiInformation.pTxPacket         = NULL;
    4604:	10 92 f5 04 	sts	0x04F5, r1
    4608:	10 92 f4 04 	sts	0x04F4, r1
  sSpiInformation.pRxPacket         = (unsigned char *)spi_buffer;
    460c:	b0 93 f7 04 	sts	0x04F7, r27
    4610:	a0 93 f6 04 	sts	0x04F6, r26
  sSpiInformation.usRxPacketLength  = 0;
    4614:	10 92 ef 04 	sts	0x04EF, r1
    4618:	10 92 ee 04 	sts	0x04EE, r1
  
  spi_buffer[CC3000_RX_BUFFER_SIZE - 1]     = CC3000_BUFFER_MAGIC_NUMBER;
    461c:	8e ed       	ldi	r24, 0xDE	; 222
    461e:	80 93 7a 05 	sts	0x057A, r24
  wlan_tx_buffer[CC3000_TX_BUFFER_SIZE - 1] = CC3000_BUFFER_MAGIC_NUMBER;
    4622:	80 93 fd 05 	sts	0x05FD, r24

  /* Enable interrupt on the GPIO pin of WLAN IRQ */
  tSLInformation.WlanInterruptEnable();
    4626:	e0 91 82 04 	lds	r30, 0x0482
    462a:	f0 91 83 04 	lds	r31, 0x0483
    462e:	09 95       	icall

  DEBUGPRINT_F("\tCC3000: Finished SpiOpen\n\r");
}
    4630:	df 91       	pop	r29
    4632:	cf 91       	pop	r28
    4634:	08 95       	ret

00004636 <_GLOBAL__I_test_http_headers>:
		Serial.print(F("\nDNSserv: "));
		cc3000.printIPdotsRev(dnsserv);
		Serial.println();
		return true;
	}
}
    4636:	ef 92       	push	r14
    4638:	ff 92       	push	r15
    463a:	0f 93       	push	r16
    463c:	84 e0       	ldi	r24, 0x04	; 4
    463e:	97 e0       	ldi	r25, 0x07	; 7
    4640:	60 e0       	ldi	r22, 0x00	; 0
    4642:	40 e0       	ldi	r20, 0x00	; 0
    4644:	20 e0       	ldi	r18, 0x00	; 0
    4646:	00 e0       	ldi	r16, 0x00	; 0
    4648:	0e 94 9f 28 	call	0x513e	; 0x513e <_ZN9IPAddressC1Ehhhh>
	" string [html+xml,application/xml;q=0.9],*/*;q=0.8"
};

// инициализируем WI-FI шилд
Adafruit_CC3000 cc3000 = Adafruit_CC3000(ADAFRUIT_CC3000_CS,
ADAFRUIT_CC3000_IRQ, ADAFRUIT_CC3000_VBAT, SPI_CLOCK_DIVIDER);
    464c:	80 e0       	ldi	r24, 0x00	; 0
    464e:	96 e0       	ldi	r25, 0x06	; 6
    4650:	6a e0       	ldi	r22, 0x0A	; 10
    4652:	43 e0       	ldi	r20, 0x03	; 3
    4654:	25 e0       	ldi	r18, 0x05	; 5
    4656:	04 e0       	ldi	r16, 0x04	; 4
    4658:	32 e9       	ldi	r19, 0x92	; 146
    465a:	e3 2e       	mov	r14, r19
    465c:	37 e0       	ldi	r19, 0x07	; 7
    465e:	f3 2e       	mov	r15, r19
    4660:	0e 94 45 14 	call	0x288a	; 0x288a <_ZN15Adafruit_CC3000C1EhhhhP5Print>

// Открываем серверный сокет
Adafruit_CC3000_Server chatServer(LISTEN_PORT);
    4664:	81 e0       	ldi	r24, 0x01	; 1
    4666:	96 e0       	ldi	r25, 0x06	; 6
    4668:	60 e5       	ldi	r22, 0x50	; 80
    466a:	70 e0       	ldi	r23, 0x00	; 0
    466c:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <_ZN22Adafruit_CC3000_ServerC1Ej>
		Serial.print(F("\nDNSserv: "));
		cc3000.printIPdotsRev(dnsserv);
		Serial.println();
		return true;
	}
}
    4670:	0f 91       	pop	r16
    4672:	ff 90       	pop	r15
    4674:	ef 90       	pop	r14
    4676:	08 95       	ret

00004678 <displayConnectionDetails>:
/**************************************************************************/
/*!
 @brief  Tries to read the IP address and other connection details
 */
/**************************************************************************/
bool displayConnectionDetails(void) {
    4678:	ef 92       	push	r14
    467a:	ff 92       	push	r15
    467c:	0f 93       	push	r16
    467e:	1f 93       	push	r17
    4680:	df 93       	push	r29
    4682:	cf 93       	push	r28
    4684:	cd b7       	in	r28, 0x3d	; 61
    4686:	de b7       	in	r29, 0x3e	; 62
    4688:	64 97       	sbiw	r28, 0x14	; 20
    468a:	0f b6       	in	r0, 0x3f	; 63
    468c:	f8 94       	cli
    468e:	de bf       	out	0x3e, r29	; 62
    4690:	0f be       	out	0x3f, r0	; 63
    4692:	cd bf       	out	0x3d, r28	; 61
	uint32_t ipAddress, netmask, gateway, dhcpserv, dnsserv;

	if (!cc3000.getIPAddress(&ipAddress, &netmask, &gateway, &dhcpserv,
    4694:	80 e0       	ldi	r24, 0x00	; 0
    4696:	96 e0       	ldi	r25, 0x06	; 6
    4698:	be 01       	movw	r22, r28
    469a:	6f 5f       	subi	r22, 0xFF	; 255
    469c:	7f 4f       	sbci	r23, 0xFF	; 255
    469e:	ae 01       	movw	r20, r28
    46a0:	4b 5f       	subi	r20, 0xFB	; 251
    46a2:	5f 4f       	sbci	r21, 0xFF	; 255
    46a4:	9e 01       	movw	r18, r28
    46a6:	27 5f       	subi	r18, 0xF7	; 247
    46a8:	3f 4f       	sbci	r19, 0xFF	; 255
    46aa:	8e 01       	movw	r16, r28
    46ac:	03 5f       	subi	r16, 0xF3	; 243
    46ae:	1f 4f       	sbci	r17, 0xFF	; 255
    46b0:	e1 e1       	ldi	r30, 0x11	; 17
    46b2:	ee 2e       	mov	r14, r30
    46b4:	f1 2c       	mov	r15, r1
    46b6:	ec 0e       	add	r14, r28
    46b8:	fd 1e       	adc	r15, r29
    46ba:	0e 94 b8 18 	call	0x3170	; 0x3170 <_ZN15Adafruit_CC300012getIPAddressEPmS0_S0_S0_S0_>
    46be:	88 23       	and	r24, r24
    46c0:	41 f4       	brne	.+16     	; 0x46d2 <displayConnectionDetails+0x5a>
			&dnsserv)) {
		Serial.println(F("Unable to retrieve the IP Address!\r\n"));
    46c2:	82 e9       	ldi	r24, 0x92	; 146
    46c4:	97 e0       	ldi	r25, 0x07	; 7
    46c6:	6f e9       	ldi	r22, 0x9F	; 159
    46c8:	70 e0       	ldi	r23, 0x00	; 0
    46ca:	0e 94 87 29 	call	0x530e	; 0x530e <_ZN5Print7printlnEPK19__FlashStringHelper>
    46ce:	80 e0       	ldi	r24, 0x00	; 0
    46d0:	4b c0       	rjmp	.+150    	; 0x4768 <displayConnectionDetails+0xf0>
		return false;
	} else {
		Serial.print(F("\nIP Addr: "));
    46d2:	82 e9       	ldi	r24, 0x92	; 146
    46d4:	97 e0       	ldi	r25, 0x07	; 7
    46d6:	64 e9       	ldi	r22, 0x94	; 148
    46d8:	70 e0       	ldi	r23, 0x00	; 0
    46da:	0e 94 3c 29 	call	0x5278	; 0x5278 <_ZN5Print5printEPK19__FlashStringHelper>
		cc3000.printIPdotsRev(ipAddress);
    46de:	49 81       	ldd	r20, Y+1	; 0x01
    46e0:	5a 81       	ldd	r21, Y+2	; 0x02
    46e2:	6b 81       	ldd	r22, Y+3	; 0x03
    46e4:	7c 81       	ldd	r23, Y+4	; 0x04
    46e6:	80 e0       	ldi	r24, 0x00	; 0
    46e8:	96 e0       	ldi	r25, 0x06	; 6
    46ea:	0e 94 10 1a 	call	0x3420	; 0x3420 <_ZN15Adafruit_CC300014printIPdotsRevEm>
		Serial.print(F("\nNetmask: "));
    46ee:	82 e9       	ldi	r24, 0x92	; 146
    46f0:	97 e0       	ldi	r25, 0x07	; 7
    46f2:	69 e8       	ldi	r22, 0x89	; 137
    46f4:	70 e0       	ldi	r23, 0x00	; 0
    46f6:	0e 94 3c 29 	call	0x5278	; 0x5278 <_ZN5Print5printEPK19__FlashStringHelper>
		cc3000.printIPdotsRev(netmask);
    46fa:	4d 81       	ldd	r20, Y+5	; 0x05
    46fc:	5e 81       	ldd	r21, Y+6	; 0x06
    46fe:	6f 81       	ldd	r22, Y+7	; 0x07
    4700:	78 85       	ldd	r23, Y+8	; 0x08
    4702:	80 e0       	ldi	r24, 0x00	; 0
    4704:	96 e0       	ldi	r25, 0x06	; 6
    4706:	0e 94 10 1a 	call	0x3420	; 0x3420 <_ZN15Adafruit_CC300014printIPdotsRevEm>
		Serial.print(F("\nGateway: "));
    470a:	82 e9       	ldi	r24, 0x92	; 146
    470c:	97 e0       	ldi	r25, 0x07	; 7
    470e:	6e e7       	ldi	r22, 0x7E	; 126
    4710:	70 e0       	ldi	r23, 0x00	; 0
    4712:	0e 94 3c 29 	call	0x5278	; 0x5278 <_ZN5Print5printEPK19__FlashStringHelper>
		cc3000.printIPdotsRev(gateway);
    4716:	49 85       	ldd	r20, Y+9	; 0x09
    4718:	5a 85       	ldd	r21, Y+10	; 0x0a
    471a:	6b 85       	ldd	r22, Y+11	; 0x0b
    471c:	7c 85       	ldd	r23, Y+12	; 0x0c
    471e:	80 e0       	ldi	r24, 0x00	; 0
    4720:	96 e0       	ldi	r25, 0x06	; 6
    4722:	0e 94 10 1a 	call	0x3420	; 0x3420 <_ZN15Adafruit_CC300014printIPdotsRevEm>
		Serial.print(F("\nDHCPsrv: "));
    4726:	82 e9       	ldi	r24, 0x92	; 146
    4728:	97 e0       	ldi	r25, 0x07	; 7
    472a:	63 e7       	ldi	r22, 0x73	; 115
    472c:	70 e0       	ldi	r23, 0x00	; 0
    472e:	0e 94 3c 29 	call	0x5278	; 0x5278 <_ZN5Print5printEPK19__FlashStringHelper>
		cc3000.printIPdotsRev(dhcpserv);
    4732:	4d 85       	ldd	r20, Y+13	; 0x0d
    4734:	5e 85       	ldd	r21, Y+14	; 0x0e
    4736:	6f 85       	ldd	r22, Y+15	; 0x0f
    4738:	78 89       	ldd	r23, Y+16	; 0x10
    473a:	80 e0       	ldi	r24, 0x00	; 0
    473c:	96 e0       	ldi	r25, 0x06	; 6
    473e:	0e 94 10 1a 	call	0x3420	; 0x3420 <_ZN15Adafruit_CC300014printIPdotsRevEm>
		Serial.print(F("\nDNSserv: "));
    4742:	82 e9       	ldi	r24, 0x92	; 146
    4744:	97 e0       	ldi	r25, 0x07	; 7
    4746:	68 e6       	ldi	r22, 0x68	; 104
    4748:	70 e0       	ldi	r23, 0x00	; 0
    474a:	0e 94 3c 29 	call	0x5278	; 0x5278 <_ZN5Print5printEPK19__FlashStringHelper>
		cc3000.printIPdotsRev(dnsserv);
    474e:	49 89       	ldd	r20, Y+17	; 0x11
    4750:	5a 89       	ldd	r21, Y+18	; 0x12
    4752:	6b 89       	ldd	r22, Y+19	; 0x13
    4754:	7c 89       	ldd	r23, Y+20	; 0x14
    4756:	80 e0       	ldi	r24, 0x00	; 0
    4758:	96 e0       	ldi	r25, 0x06	; 6
    475a:	0e 94 10 1a 	call	0x3420	; 0x3420 <_ZN15Adafruit_CC300014printIPdotsRevEm>
		Serial.println();
    475e:	82 e9       	ldi	r24, 0x92	; 146
    4760:	97 e0       	ldi	r25, 0x07	; 7
    4762:	0e 94 67 29 	call	0x52ce	; 0x52ce <_ZN5Print7printlnEv>
    4766:	81 e0       	ldi	r24, 0x01	; 1
		return true;
	}
}
    4768:	64 96       	adiw	r28, 0x14	; 20
    476a:	0f b6       	in	r0, 0x3f	; 63
    476c:	f8 94       	cli
    476e:	de bf       	out	0x3e, r29	; 62
    4770:	0f be       	out	0x3f, r0	; 63
    4772:	cd bf       	out	0x3d, r28	; 61
    4774:	cf 91       	pop	r28
    4776:	df 91       	pop	r29
    4778:	1f 91       	pop	r17
    477a:	0f 91       	pop	r16
    477c:	ff 90       	pop	r15
    477e:	ef 90       	pop	r14
    4780:	08 95       	ret

00004782 <setup>:


// Размер входного буфера (HTTP)
#define HTTP_GET_BUFFER_SIZE 100

void setup() {
    4782:	0f 93       	push	r16
	Serial.begin(115200);
    4784:	82 e9       	ldi	r24, 0x92	; 146
    4786:	97 e0       	ldi	r25, 0x07	; 7
    4788:	40 e0       	ldi	r20, 0x00	; 0
    478a:	52 ec       	ldi	r21, 0xC2	; 194
    478c:	61 e0       	ldi	r22, 0x01	; 1
    478e:	70 e0       	ldi	r23, 0x00	; 0
    4790:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN14HardwareSerial5beginEm>

	Serial.println(F("Hello, CC3000!\n"));
    4794:	82 e9       	ldi	r24, 0x92	; 146
    4796:	97 e0       	ldi	r25, 0x07	; 7
    4798:	62 e5       	ldi	r22, 0x52	; 82
    479a:	71 e0       	ldi	r23, 0x01	; 1
    479c:	0e 94 87 29 	call	0x530e	; 0x530e <_ZN5Print7printlnEPK19__FlashStringHelper>

	Serial.print("Free RAM: ");
    47a0:	82 e9       	ldi	r24, 0x92	; 146
    47a2:	97 e0       	ldi	r25, 0x07	; 7
    47a4:	62 e6       	ldi	r22, 0x62	; 98
    47a6:	71 e0       	ldi	r23, 0x01	; 1
    47a8:	0e 94 b8 2a 	call	0x5570	; 0x5570 <_ZN5Print5printEPKc>
	Serial.println(getFreeRam(), DEC);
    47ac:	0e 94 ab 01 	call	0x356	; 0x356 <_Z10getFreeRamv>
    47b0:	bc 01       	movw	r22, r24
    47b2:	82 e9       	ldi	r24, 0x92	; 146
    47b4:	97 e0       	ldi	r25, 0x07	; 7
    47b6:	4a e0       	ldi	r20, 0x0A	; 10
    47b8:	50 e0       	ldi	r21, 0x00	; 0
    47ba:	0e 94 99 2a 	call	0x5532	; 0x5532 <_ZN5Print7printlnEii>

	Serial.println(F("\nInitializing..."));
    47be:	82 e9       	ldi	r24, 0x92	; 146
    47c0:	97 e0       	ldi	r25, 0x07	; 7
    47c2:	61 e4       	ldi	r22, 0x41	; 65
    47c4:	71 e0       	ldi	r23, 0x01	; 1
    47c6:	0e 94 87 29 	call	0x530e	; 0x530e <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (!cc3000.begin()) {
    47ca:	80 e0       	ldi	r24, 0x00	; 0
    47cc:	96 e0       	ldi	r25, 0x06	; 6
    47ce:	60 e0       	ldi	r22, 0x00	; 0
    47d0:	40 e0       	ldi	r20, 0x00	; 0
    47d2:	20 e0       	ldi	r18, 0x00	; 0
    47d4:	30 e0       	ldi	r19, 0x00	; 0
    47d6:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <_ZN15Adafruit_CC30005beginEhbPKc>
    47da:	88 23       	and	r24, r24
    47dc:	39 f4       	brne	.+14     	; 0x47ec <setup+0x6a>
		Serial.println(F("Couldn't begin()! Check your wiring?"));
    47de:	82 e9       	ldi	r24, 0x92	; 146
    47e0:	97 e0       	ldi	r25, 0x07	; 7
    47e2:	6c e1       	ldi	r22, 0x1C	; 28
    47e4:	71 e0       	ldi	r23, 0x01	; 1
    47e6:	0e 94 87 29 	call	0x530e	; 0x530e <_ZN5Print7printlnEPK19__FlashStringHelper>
    47ea:	ff cf       	rjmp	.-2      	; 0x47ea <setup+0x68>
		while (1)
			;
	}

	Serial.print(F("\nAttempting to connect to "));
    47ec:	82 e9       	ldi	r24, 0x92	; 146
    47ee:	97 e0       	ldi	r25, 0x07	; 7
    47f0:	61 e0       	ldi	r22, 0x01	; 1
    47f2:	71 e0       	ldi	r23, 0x01	; 1
    47f4:	0e 94 3c 29 	call	0x5278	; 0x5278 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.println(WLAN_SSID);
    47f8:	82 e9       	ldi	r24, 0x92	; 146
    47fa:	97 e0       	ldi	r25, 0x07	; 7
    47fc:	6d e6       	ldi	r22, 0x6D	; 109
    47fe:	71 e0       	ldi	r23, 0x01	; 1
    4800:	0e 94 bb 2a 	call	0x5576	; 0x5576 <_ZN5Print7printlnEPKc>
	if (!cc3000.connectToAP(WLAN_SSID, WLAN_PASS, WLAN_SECURITY)) {
    4804:	80 e0       	ldi	r24, 0x00	; 0
    4806:	96 e0       	ldi	r25, 0x06	; 6
    4808:	6d e6       	ldi	r22, 0x6D	; 109
    480a:	71 e0       	ldi	r23, 0x01	; 1
    480c:	43 e7       	ldi	r20, 0x73	; 115
    480e:	51 e0       	ldi	r21, 0x01	; 1
    4810:	23 e0       	ldi	r18, 0x03	; 3
    4812:	00 e0       	ldi	r16, 0x00	; 0
    4814:	0e 94 87 1b 	call	0x370e	; 0x370e <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh>
    4818:	88 23       	and	r24, r24
    481a:	39 f4       	brne	.+14     	; 0x482a <setup+0xa8>
		Serial.println(F("Failed!"));
    481c:	82 e9       	ldi	r24, 0x92	; 146
    481e:	97 e0       	ldi	r25, 0x07	; 7
    4820:	69 ef       	ldi	r22, 0xF9	; 249
    4822:	70 e0       	ldi	r23, 0x00	; 0
    4824:	0e 94 87 29 	call	0x530e	; 0x530e <_ZN5Print7printlnEPK19__FlashStringHelper>
    4828:	ff cf       	rjmp	.-2      	; 0x4828 <setup+0xa6>
		while (1)
			;
	}

	Serial.println(F("Connected!"));
    482a:	82 e9       	ldi	r24, 0x92	; 146
    482c:	97 e0       	ldi	r25, 0x07	; 7
    482e:	6e ee       	ldi	r22, 0xEE	; 238
    4830:	70 e0       	ldi	r23, 0x00	; 0
    4832:	0e 94 87 29 	call	0x530e	; 0x530e <_ZN5Print7printlnEPK19__FlashStringHelper>

	Serial.println(F("Request DHCP"));
    4836:	82 e9       	ldi	r24, 0x92	; 146
    4838:	97 e0       	ldi	r25, 0x07	; 7
    483a:	61 ee       	ldi	r22, 0xE1	; 225
    483c:	70 e0       	ldi	r23, 0x00	; 0
    483e:	0e 94 87 29 	call	0x530e	; 0x530e <_ZN5Print7printlnEPK19__FlashStringHelper>
    4842:	06 c0       	rjmp	.+12     	; 0x4850 <setup+0xce>
	while (!cc3000.checkDHCP()) {
		delay(100); // ToDo: Insert a DHCP timeout!
    4844:	64 e6       	ldi	r22, 0x64	; 100
    4846:	70 e0       	ldi	r23, 0x00	; 0
    4848:	80 e0       	ldi	r24, 0x00	; 0
    484a:	90 e0       	ldi	r25, 0x00	; 0
    484c:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <delay>
	}

	Serial.println(F("Connected!"));

	Serial.println(F("Request DHCP"));
	while (!cc3000.checkDHCP()) {
    4850:	80 e0       	ldi	r24, 0x00	; 0
    4852:	96 e0       	ldi	r25, 0x06	; 6
    4854:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <_ZN15Adafruit_CC30009checkDHCPEv>
    4858:	88 23       	and	r24, r24
    485a:	a1 f3       	breq	.-24     	; 0x4844 <setup+0xc2>
    485c:	06 c0       	rjmp	.+12     	; 0x486a <setup+0xe8>
		delay(100); // ToDo: Insert a DHCP timeout!
	}

	/* Display the IP address DNS, Gateway, etc. */
	while (!displayConnectionDetails()) {
		delay(1000);
    485e:	68 ee       	ldi	r22, 0xE8	; 232
    4860:	73 e0       	ldi	r23, 0x03	; 3
    4862:	80 e0       	ldi	r24, 0x00	; 0
    4864:	90 e0       	ldi	r25, 0x00	; 0
    4866:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <delay>
	while (!cc3000.checkDHCP()) {
		delay(100); // ToDo: Insert a DHCP timeout!
	}

	/* Display the IP address DNS, Gateway, etc. */
	while (!displayConnectionDetails()) {
    486a:	0e 94 3c 23 	call	0x4678	; 0x4678 <displayConnectionDetails>
    486e:	88 23       	and	r24, r24
    4870:	b1 f3       	breq	.-20     	; 0x485e <setup+0xdc>
		delay(1000);
	}

	chatServer.begin();
    4872:	81 e0       	ldi	r24, 0x01	; 1
    4874:	96 e0       	ldi	r25, 0x06	; 6
    4876:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <_ZN22Adafruit_CC3000_Server5beginEv>

	Serial.println(F("Listening for connections..."));
    487a:	82 e9       	ldi	r24, 0x92	; 146
    487c:	97 e0       	ldi	r25, 0x07	; 7
    487e:	64 ec       	ldi	r22, 0xC4	; 196
    4880:	70 e0       	ldi	r23, 0x00	; 0
    4882:	0e 94 87 29 	call	0x530e	; 0x530e <_ZN5Print7printlnEPK19__FlashStringHelper>

}
    4886:	0f 91       	pop	r16
    4888:	08 95       	ret

0000488a <loop>:

void loop() {
    488a:	8f 92       	push	r8
    488c:	9f 92       	push	r9
    488e:	af 92       	push	r10
    4890:	bf 92       	push	r11
    4892:	cf 92       	push	r12
    4894:	df 92       	push	r13
    4896:	ef 92       	push	r14
    4898:	ff 92       	push	r15
    489a:	0f 93       	push	r16
    489c:	1f 93       	push	r17
    489e:	df 93       	push	r29
    48a0:	cf 93       	push	r28
    48a2:	cd b7       	in	r28, 0x3d	; 61
    48a4:	de b7       	in	r29, 0x3e	; 62
    48a6:	a3 97       	sbiw	r28, 0x23	; 35
    48a8:	0f b6       	in	r0, 0x3f	; 63
    48aa:	f8 94       	cli
    48ac:	de bf       	out	0x3e, r29	; 62
    48ae:	0f be       	out	0x3f, r0	; 63
    48b0:	cd bf       	out	0x3d, r28	; 61

	// Установка связи с клиентским сокетом
	Adafruit_CC3000_ClientRef client = chatServer.available();
    48b2:	b6 e1       	ldi	r27, 0x16	; 22
    48b4:	eb 2e       	mov	r14, r27
    48b6:	f1 2c       	mov	r15, r1
    48b8:	ec 0e       	add	r14, r28
    48ba:	fd 1e       	adc	r15, r29
    48bc:	c7 01       	movw	r24, r14
    48be:	61 e0       	ldi	r22, 0x01	; 1
    48c0:	76 e0       	ldi	r23, 0x06	; 6
    48c2:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <_ZN22Adafruit_CC3000_Server9availableEv>

	if (client) {
    48c6:	c7 01       	movw	r24, r14
    48c8:	0e 94 01 1c 	call	0x3802	; 0x3802 <_ZN25Adafruit_CC3000_ClientRefcvbEv>
    48cc:	88 23       	and	r24, r24
    48ce:	09 f4       	brne	.+2      	; 0x48d2 <loop+0x48>
    48d0:	dd c0       	rjmp	.+442    	; 0x4a8c <loop+0x202>

		Serial.println("new client");
    48d2:	82 e9       	ldi	r24, 0x92	; 146
    48d4:	97 e0       	ldi	r25, 0x07	; 7
    48d6:	6e e7       	ldi	r22, 0x7E	; 126
    48d8:	71 e0       	ldi	r23, 0x01	; 1
    48da:	0e 94 bb 2a 	call	0x5576	; 0x5576 <_ZN5Print7printlnEPKc>
		//Выделяем буфер для чтения строк
		//char buffer[HTTP_GET_BUFFER_SIZE];
		//int charIndex = 0;

		// Строка, для получения данных из сокета
		String readString = String();
    48de:	8e 01       	movw	r16, r28
    48e0:	0f 5f       	subi	r16, 0xFF	; 255
    48e2:	1f 4f       	sbci	r17, 0xFF	; 255
    48e4:	c8 01       	movw	r24, r16
    48e6:	69 e8       	ldi	r22, 0x89	; 137
    48e8:	71 e0       	ldi	r23, 0x01	; 1
    48ea:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <_ZN6StringC1EPKc>
    48ee:	88 24       	eor	r8, r8
    48f0:	83 94       	inc	r8

		while (client.connected()) {
    48f2:	c7 01       	movw	r24, r14
    48f4:	9e 2c       	mov	r9, r14
    48f6:	a9 2e       	mov	r10, r25


					readString = String();
				} else if (readString.length() < HTTP_GET_BUFFER_SIZE) {
					if (c != '\r') {
						readString.concat(c);
    48f8:	b0 2e       	mov	r11, r16
    48fa:	01 2f       	mov	r16, r17

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    48fc:	a8 e0       	ldi	r26, 0x08	; 8
    48fe:	ca 2e       	mov	r12, r26
    4900:	d1 2c       	mov	r13, r1
    4902:	cc 0e       	add	r12, r28
    4904:	dd 1e       	adc	r13, r29
						Serial.print("[GET COMMAND]=");
						Serial.println(readString.length());
						//Serial.println(i);


					readString = String();
    4906:	ff e0       	ldi	r31, 0x0F	; 15
    4908:	ef 2e       	mov	r14, r31
    490a:	f1 2c       	mov	r15, r1
    490c:	ec 0e       	add	r14, r28
    490e:	fd 1e       	adc	r15, r29
    4910:	a2 c0       	rjmp	.+324    	; 0x4a56 <loop+0x1cc>

		// Строка, для получения данных из сокета
		String readString = String();

		while (client.connected()) {
			if (client.available()) {
    4912:	89 2d       	mov	r24, r9
    4914:	9a 2d       	mov	r25, r10
    4916:	0e 94 90 1c 	call	0x3920	; 0x3920 <_ZN25Adafruit_CC3000_ClientRef9availableEv>
    491a:	89 2b       	or	r24, r25
    491c:	09 f4       	brne	.+2      	; 0x4920 <loop+0x96>
    491e:	9b c0       	rjmp	.+310    	; 0x4a56 <loop+0x1cc>
				char c = client.read();
    4920:	89 2d       	mov	r24, r9
    4922:	9a 2d       	mov	r25, r10
    4924:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <_ZN25Adafruit_CC3000_ClientRef4readEv>
    4928:	18 2f       	mov	r17, r24


				if (c == '\n') {
    492a:	8a 30       	cpi	r24, 0x0A	; 10
    492c:	91 f5       	brne	.+100    	; 0x4992 <loop+0x108>
    492e:	c6 01       	movw	r24, r12
    4930:	6a e8       	ldi	r22, 0x8A	; 138
    4932:	71 e0       	ldi	r23, 0x01	; 1
    4934:	0e 94 97 2c 	call	0x592e	; 0x592e <_ZN6StringC2EPKc>
					Serial.print("string [" + readString + "]\n");
    4938:	c6 01       	movw	r24, r12
    493a:	6b 2d       	mov	r22, r11
    493c:	70 2f       	mov	r23, r16
    493e:	0e 94 46 2c 	call	0x588c	; 0x588c <_ZplRK15StringSumHelperRK6String>
    4942:	63 e9       	ldi	r22, 0x93	; 147
    4944:	71 e0       	ldi	r23, 0x01	; 1
    4946:	0e 94 2a 2c 	call	0x5854	; 0x5854 <_ZplRK15StringSumHelperPKc>
    494a:	bc 01       	movw	r22, r24
    494c:	82 e9       	ldi	r24, 0x92	; 146
    494e:	97 e0       	ldi	r25, 0x07	; 7
    4950:	0e 94 ce 2a 	call	0x559c	; 0x559c <_ZN5Print5printERK6String>
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
{
    4954:	c6 01       	movw	r24, r12
    4956:	0e 94 ce 2c 	call	0x599c	; 0x599c <_ZN6StringD2Ev>


					//int i = readString.indexOf("GET ");

						Serial.print("[GET COMMAND]=");
    495a:	82 e9       	ldi	r24, 0x92	; 146
    495c:	97 e0       	ldi	r25, 0x07	; 7
    495e:	66 e9       	ldi	r22, 0x96	; 150
    4960:	71 e0       	ldi	r23, 0x01	; 1
    4962:	0e 94 b8 2a 	call	0x5570	; 0x5570 <_ZN5Print5printEPKc>
						Serial.println(readString.length());
    4966:	6d 81       	ldd	r22, Y+5	; 0x05
    4968:	7e 81       	ldd	r23, Y+6	; 0x06
    496a:	82 e9       	ldi	r24, 0x92	; 146
    496c:	97 e0       	ldi	r25, 0x07	; 7
    496e:	4a e0       	ldi	r20, 0x0A	; 10
    4970:	50 e0       	ldi	r21, 0x00	; 0
    4972:	0e 94 2a 2a 	call	0x5454	; 0x5454 <_ZN5Print7printlnEji>
						//Serial.println(i);


					readString = String();
    4976:	c7 01       	movw	r24, r14
    4978:	69 e8       	ldi	r22, 0x89	; 137
    497a:	71 e0       	ldi	r23, 0x01	; 1
    497c:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <_ZN6StringC1EPKc>
    4980:	8b 2d       	mov	r24, r11
    4982:	90 2f       	mov	r25, r16
    4984:	b7 01       	movw	r22, r14
    4986:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN6StringaSERKS_>
    498a:	c7 01       	movw	r24, r14
    498c:	0e 94 c8 2c 	call	0x5990	; 0x5990 <_ZN6StringD1Ev>
    4990:	0c c0       	rjmp	.+24     	; 0x49aa <loop+0x120>
				} else if (readString.length() < HTTP_GET_BUFFER_SIZE) {
    4992:	8d 81       	ldd	r24, Y+5	; 0x05
    4994:	9e 81       	ldd	r25, Y+6	; 0x06
    4996:	84 36       	cpi	r24, 0x64	; 100
    4998:	91 05       	cpc	r25, r1
    499a:	38 f4       	brcc	.+14     	; 0x49aa <loop+0x120>
					if (c != '\r') {
    499c:	1d 30       	cpi	r17, 0x0D	; 13
    499e:	29 f0       	breq	.+10     	; 0x49aa <loop+0x120>
						readString.concat(c);
    49a0:	8b 2d       	mov	r24, r11
    49a2:	90 2f       	mov	r25, r16
    49a4:	61 2f       	mov	r22, r17
    49a6:	0e 94 05 2c 	call	0x580a	; 0x580a <_ZN6String6concatEc>
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    49aa:	61 2f       	mov	r22, r17
    49ac:	77 27       	eor	r23, r23
    49ae:	67 fd       	sbrc	r22, 7
    49b0:	70 95       	com	r23
    49b2:	82 e9       	ldi	r24, 0x92	; 146
    49b4:	97 e0       	ldi	r25, 0x07	; 7
    49b6:	0e 94 09 28 	call	0x5012	; 0x5012 <_ZN14HardwareSerial5writeEh>

				Serial.write(c);
				// if you've gotten to the end of the line (received a newline
				// character) and the line is blank, the http request has ended,
				// so you can send a reply
				if (c == '\n' && currentLineIsBlank) {
    49ba:	1a 30       	cpi	r17, 0x0A	; 10
    49bc:	09 f0       	breq	.+2      	; 0x49c0 <loop+0x136>
    49be:	48 c0       	rjmp	.+144    	; 0x4a50 <loop+0x1c6>
    49c0:	88 20       	and	r8, r8
    49c2:	19 f4       	brne	.+6      	; 0x49ca <loop+0x140>
    49c4:	88 24       	eor	r8, r8
    49c6:	83 94       	inc	r8
    49c8:	46 c0       	rjmp	.+140    	; 0x4a56 <loop+0x1cc>
					// send a standard http response header
					client.println("HTTP/1.1 200 OK");
    49ca:	8e 01       	movw	r16, r28
    49cc:	0a 5e       	subi	r16, 0xEA	; 234
    49ce:	1f 4f       	sbci	r17, 0xFF	; 255
    49d0:	c8 01       	movw	r24, r16
    49d2:	65 ea       	ldi	r22, 0xA5	; 165
    49d4:	71 e0       	ldi	r23, 0x01	; 1
    49d6:	0e 94 bb 2a 	call	0x5576	; 0x5576 <_ZN5Print7printlnEPKc>
					client.println("Content-Type: text/html");
    49da:	c8 01       	movw	r24, r16
    49dc:	65 eb       	ldi	r22, 0xB5	; 181
    49de:	71 e0       	ldi	r23, 0x01	; 1
    49e0:	0e 94 bb 2a 	call	0x5576	; 0x5576 <_ZN5Print7printlnEPKc>
					client.println("Connection: close"); // the connection will be closed after completion of the response
    49e4:	c8 01       	movw	r24, r16
    49e6:	6d ec       	ldi	r22, 0xCD	; 205
    49e8:	71 e0       	ldi	r23, 0x01	; 1
    49ea:	0e 94 bb 2a 	call	0x5576	; 0x5576 <_ZN5Print7printlnEPKc>
//					client.println("Refresh: 20"); // refresh the page automatically every 5 sec
					client.println();
    49ee:	c8 01       	movw	r24, r16
    49f0:	0e 94 67 29 	call	0x52ce	; 0x52ce <_ZN5Print7printlnEv>
					client.println("<!DOCTYPE HTML>");
    49f4:	c8 01       	movw	r24, r16
    49f6:	6f ed       	ldi	r22, 0xDF	; 223
    49f8:	71 e0       	ldi	r23, 0x01	; 1
    49fa:	0e 94 bb 2a 	call	0x5576	; 0x5576 <_ZN5Print7printlnEPKc>
					client.println("<html>");
    49fe:	c8 01       	movw	r24, r16
    4a00:	6f ee       	ldi	r22, 0xEF	; 239
    4a02:	71 e0       	ldi	r23, 0x01	; 1
    4a04:	0e 94 bb 2a 	call	0x5576	; 0x5576 <_ZN5Print7printlnEPKc>

					client.println("<h1>TEST</h1>");
    4a08:	c8 01       	movw	r24, r16
    4a0a:	66 ef       	ldi	r22, 0xF6	; 246
    4a0c:	71 e0       	ldi	r23, 0x01	; 1
    4a0e:	0e 94 bb 2a 	call	0x5576	; 0x5576 <_ZN5Print7printlnEPKc>
					client.println("<form>");
    4a12:	c8 01       	movw	r24, r16
    4a14:	64 e0       	ldi	r22, 0x04	; 4
    4a16:	72 e0       	ldi	r23, 0x02	; 2
    4a18:	0e 94 bb 2a 	call	0x5576	; 0x5576 <_ZN5Print7printlnEPKc>
					client.println("<input type=text name='cmd' value='moveleft'>");
    4a1c:	c8 01       	movw	r24, r16
    4a1e:	6b e0       	ldi	r22, 0x0B	; 11
    4a20:	72 e0       	ldi	r23, 0x02	; 2
    4a22:	0e 94 bb 2a 	call	0x5576	; 0x5576 <_ZN5Print7printlnEPKc>
					client.println("<input type=text name='time' value='1000'>");
    4a26:	c8 01       	movw	r24, r16
    4a28:	69 e3       	ldi	r22, 0x39	; 57
    4a2a:	72 e0       	ldi	r23, 0x02	; 2
    4a2c:	0e 94 bb 2a 	call	0x5576	; 0x5576 <_ZN5Print7printlnEPKc>
					client.println("<input type='submit' value='Send data...'>");
    4a30:	c8 01       	movw	r24, r16
    4a32:	64 e6       	ldi	r22, 0x64	; 100
    4a34:	72 e0       	ldi	r23, 0x02	; 2
    4a36:	0e 94 bb 2a 	call	0x5576	; 0x5576 <_ZN5Print7printlnEPKc>
					client.println("</form>");
    4a3a:	c8 01       	movw	r24, r16
    4a3c:	6f e8       	ldi	r22, 0x8F	; 143
    4a3e:	72 e0       	ldi	r23, 0x02	; 2
    4a40:	0e 94 bb 2a 	call	0x5576	; 0x5576 <_ZN5Print7printlnEPKc>
					client.println("</html>");
    4a44:	c8 01       	movw	r24, r16
    4a46:	67 e9       	ldi	r22, 0x97	; 151
    4a48:	72 e0       	ldi	r23, 0x02	; 2
    4a4a:	0e 94 bb 2a 	call	0x5576	; 0x5576 <_ZN5Print7printlnEPKc>
    4a4e:	0a c0       	rjmp	.+20     	; 0x4a64 <loop+0x1da>
					break;
				}
				if (c == '\n') {
					// you're starting a new line
					currentLineIsBlank = true;
				} else if (c != '\r') {
    4a50:	1d 30       	cpi	r17, 0x0D	; 13
    4a52:	09 f0       	breq	.+2      	; 0x4a56 <loop+0x1cc>
    4a54:	88 24       	eor	r8, r8
		//int charIndex = 0;

		// Строка, для получения данных из сокета
		String readString = String();

		while (client.connected()) {
    4a56:	89 2d       	mov	r24, r9
    4a58:	9a 2d       	mov	r25, r10
    4a5a:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN25Adafruit_CC3000_ClientRef9connectedEv>
    4a5e:	88 23       	and	r24, r24
    4a60:	09 f0       	breq	.+2      	; 0x4a64 <loop+0x1da>
    4a62:	57 cf       	rjmp	.-338    	; 0x4912 <loop+0x88>
					currentLineIsBlank = false;
				}
			}
		}
		// give the web browser time to receive the data
		delay(1);
    4a64:	61 e0       	ldi	r22, 0x01	; 1
    4a66:	70 e0       	ldi	r23, 0x00	; 0
    4a68:	80 e0       	ldi	r24, 0x00	; 0
    4a6a:	90 e0       	ldi	r25, 0x00	; 0
    4a6c:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <delay>
		// close the connection:
		client.stop();
    4a70:	ce 01       	movw	r24, r28
    4a72:	46 96       	adiw	r24, 0x16	; 22
    4a74:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <_ZN25Adafruit_CC3000_ClientRef4stopEv>
		Serial.println("client disconnected");
    4a78:	82 e9       	ldi	r24, 0x92	; 146
    4a7a:	97 e0       	ldi	r25, 0x07	; 7
    4a7c:	6f e9       	ldi	r22, 0x9F	; 159
    4a7e:	72 e0       	ldi	r23, 0x02	; 2
    4a80:	0e 94 bb 2a 	call	0x5576	; 0x5576 <_ZN5Print7printlnEPKc>
    4a84:	ce 01       	movw	r24, r28
    4a86:	01 96       	adiw	r24, 0x01	; 1
    4a88:	0e 94 c8 2c 	call	0x5990	; 0x5990 <_ZN6StringD1Ev>
//		Serial.println(test_http_headers[i]);
//		ParseRequestStr(test_http_headers[i]);
//	}


}
    4a8c:	a3 96       	adiw	r28, 0x23	; 35
    4a8e:	0f b6       	in	r0, 0x3f	; 63
    4a90:	f8 94       	cli
    4a92:	de bf       	out	0x3e, r29	; 62
    4a94:	0f be       	out	0x3f, r0	; 63
    4a96:	cd bf       	out	0x3d, r28	; 61
    4a98:	cf 91       	pop	r28
    4a9a:	df 91       	pop	r29
    4a9c:	1f 91       	pop	r17
    4a9e:	0f 91       	pop	r16
    4aa0:	ff 90       	pop	r15
    4aa2:	ef 90       	pop	r14
    4aa4:	df 90       	pop	r13
    4aa6:	cf 90       	pop	r12
    4aa8:	bf 90       	pop	r11
    4aaa:	af 90       	pop	r10
    4aac:	9f 90       	pop	r9
    4aae:	8f 90       	pop	r8
    4ab0:	08 95       	ret

00004ab2 <malloc>:
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	if (len < sizeof(struct __freelist) - sizeof(size_t))
    4ab2:	0f 93       	push	r16
    4ab4:	1f 93       	push	r17
    4ab6:	cf 93       	push	r28
    4ab8:	df 93       	push	r29
    4aba:	bc 01       	movw	r22, r24
    4abc:	82 30       	cpi	r24, 0x02	; 2
    4abe:	91 05       	cpc	r25, r1
    4ac0:	10 f4       	brcc	.+4      	; 0x4ac6 <malloc+0x14>
    4ac2:	62 e0       	ldi	r22, 0x02	; 2
    4ac4:	70 e0       	ldi	r23, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    4ac6:	e0 91 c9 07 	lds	r30, 0x07C9
    4aca:	f0 91 ca 07 	lds	r31, 0x07CA
    4ace:	40 e0       	ldi	r20, 0x00	; 0
    4ad0:	50 e0       	ldi	r21, 0x00	; 0
    4ad2:	a0 e0       	ldi	r26, 0x00	; 0
    4ad4:	b0 e0       	ldi	r27, 0x00	; 0
    4ad6:	24 c0       	rjmp	.+72     	; 0x4b20 <malloc+0x6e>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
    4ad8:	80 81       	ld	r24, Z
    4ada:	91 81       	ldd	r25, Z+1	; 0x01
    4adc:	86 17       	cp	r24, r22
    4ade:	97 07       	cpc	r25, r23
    4ae0:	d0 f0       	brcs	.+52     	; 0x4b16 <malloc+0x64>
			continue;
		if (fp1->sz == len) {
    4ae2:	86 17       	cp	r24, r22
    4ae4:	97 07       	cpc	r25, r23
    4ae6:	71 f4       	brne	.+28     	; 0x4b04 <malloc+0x52>
    4ae8:	82 81       	ldd	r24, Z+2	; 0x02
    4aea:	93 81       	ldd	r25, Z+3	; 0x03
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
    4aec:	10 97       	sbiw	r26, 0x00	; 0
    4aee:	29 f0       	breq	.+10     	; 0x4afa <malloc+0x48>
				fp2->nx = fp1->nx;
    4af0:	13 96       	adiw	r26, 0x03	; 3
    4af2:	9c 93       	st	X, r25
    4af4:	8e 93       	st	-X, r24
    4af6:	12 97       	sbiw	r26, 0x02	; 2
    4af8:	2c c0       	rjmp	.+88     	; 0x4b52 <malloc+0xa0>
			else
				__flp = fp1->nx;
    4afa:	90 93 ca 07 	sts	0x07CA, r25
    4afe:	80 93 c9 07 	sts	0x07C9, r24
    4b02:	27 c0       	rjmp	.+78     	; 0x4b52 <malloc+0xa0>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    4b04:	41 15       	cp	r20, r1
    4b06:	51 05       	cpc	r21, r1
    4b08:	19 f0       	breq	.+6      	; 0x4b10 <malloc+0x5e>
    4b0a:	84 17       	cp	r24, r20
    4b0c:	95 07       	cpc	r25, r21
    4b0e:	18 f4       	brcc	.+6      	; 0x4b16 <malloc+0x64>
    4b10:	8d 01       	movw	r16, r26
    4b12:	ac 01       	movw	r20, r24
    4b14:	ef 01       	movw	r28, r30
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    4b16:	df 01       	movw	r26, r30
    4b18:	82 81       	ldd	r24, Z+2	; 0x02
    4b1a:	93 81       	ldd	r25, Z+3	; 0x03
    4b1c:	9c 01       	movw	r18, r24
    4b1e:	f9 01       	movw	r30, r18
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
    4b20:	30 97       	sbiw	r30, 0x00	; 0
    4b22:	d1 f6       	brne	.-76     	; 0x4ad8 <malloc+0x26>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
    4b24:	41 15       	cp	r20, r1
    4b26:	51 05       	cpc	r21, r1
    4b28:	f9 f0       	breq	.+62     	; 0x4b68 <malloc+0xb6>
		if (s - len < sizeof(struct __freelist)) {
    4b2a:	ca 01       	movw	r24, r20
    4b2c:	86 1b       	sub	r24, r22
    4b2e:	97 0b       	sbc	r25, r23
    4b30:	84 30       	cpi	r24, 0x04	; 4
    4b32:	91 05       	cpc	r25, r1
    4b34:	80 f4       	brcc	.+32     	; 0x4b56 <malloc+0xa4>
    4b36:	8a 81       	ldd	r24, Y+2	; 0x02
    4b38:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
    4b3a:	01 15       	cp	r16, r1
    4b3c:	11 05       	cpc	r17, r1
    4b3e:	21 f0       	breq	.+8      	; 0x4b48 <malloc+0x96>
				sfp2->nx = sfp1->nx;
    4b40:	f8 01       	movw	r30, r16
    4b42:	93 83       	std	Z+3, r25	; 0x03
    4b44:	82 83       	std	Z+2, r24	; 0x02
    4b46:	04 c0       	rjmp	.+8      	; 0x4b50 <malloc+0x9e>
			else
				__flp = sfp1->nx;
    4b48:	90 93 ca 07 	sts	0x07CA, r25
    4b4c:	80 93 c9 07 	sts	0x07C9, r24
			return &(sfp1->nx);
    4b50:	fe 01       	movw	r30, r28
    4b52:	32 96       	adiw	r30, 0x02	; 2
    4b54:	45 c0       	rjmp	.+138    	; 0x4be0 <malloc+0x12e>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
    4b56:	fe 01       	movw	r30, r28
    4b58:	e8 0f       	add	r30, r24
    4b5a:	f9 1f       	adc	r31, r25
    4b5c:	61 93       	st	Z+, r22
    4b5e:	71 93       	st	Z+, r23
		sfp1->sz = s - sizeof(size_t);
    4b60:	02 97       	sbiw	r24, 0x02	; 2
    4b62:	99 83       	std	Y+1, r25	; 0x01
    4b64:	88 83       	st	Y, r24
    4b66:	3c c0       	rjmp	.+120    	; 0x4be0 <malloc+0x12e>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
    4b68:	80 91 c7 07 	lds	r24, 0x07C7
    4b6c:	90 91 c8 07 	lds	r25, 0x07C8
    4b70:	89 2b       	or	r24, r25
    4b72:	41 f4       	brne	.+16     	; 0x4b84 <malloc+0xd2>
		__brkval = __malloc_heap_start;
    4b74:	80 91 d4 03 	lds	r24, 0x03D4
    4b78:	90 91 d5 03 	lds	r25, 0x03D5
    4b7c:	90 93 c8 07 	sts	0x07C8, r25
    4b80:	80 93 c7 07 	sts	0x07C7, r24
	cp = __malloc_heap_end;
    4b84:	40 91 d6 03 	lds	r20, 0x03D6
    4b88:	50 91 d7 03 	lds	r21, 0x03D7
	if (cp == 0)
    4b8c:	41 15       	cp	r20, r1
    4b8e:	51 05       	cpc	r21, r1
    4b90:	41 f4       	brne	.+16     	; 0x4ba2 <malloc+0xf0>
		cp = STACK_POINTER() - __malloc_margin;
    4b92:	4d b7       	in	r20, 0x3d	; 61
    4b94:	5e b7       	in	r21, 0x3e	; 62
    4b96:	80 91 d2 03 	lds	r24, 0x03D2
    4b9a:	90 91 d3 03 	lds	r25, 0x03D3
    4b9e:	48 1b       	sub	r20, r24
    4ba0:	59 0b       	sbc	r21, r25
	if (cp <= __brkval)
    4ba2:	20 91 c7 07 	lds	r18, 0x07C7
    4ba6:	30 91 c8 07 	lds	r19, 0x07C8
    4baa:	24 17       	cp	r18, r20
    4bac:	35 07       	cpc	r19, r21
    4bae:	b0 f4       	brcc	.+44     	; 0x4bdc <malloc+0x12a>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
    4bb0:	ca 01       	movw	r24, r20
    4bb2:	82 1b       	sub	r24, r18
    4bb4:	93 0b       	sbc	r25, r19
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    4bb6:	86 17       	cp	r24, r22
    4bb8:	97 07       	cpc	r25, r23
    4bba:	80 f0       	brcs	.+32     	; 0x4bdc <malloc+0x12a>
    4bbc:	ab 01       	movw	r20, r22
    4bbe:	4e 5f       	subi	r20, 0xFE	; 254
    4bc0:	5f 4f       	sbci	r21, 0xFF	; 255
    4bc2:	84 17       	cp	r24, r20
    4bc4:	95 07       	cpc	r25, r21
    4bc6:	50 f0       	brcs	.+20     	; 0x4bdc <malloc+0x12a>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    4bc8:	42 0f       	add	r20, r18
    4bca:	53 1f       	adc	r21, r19
    4bcc:	50 93 c8 07 	sts	0x07C8, r21
    4bd0:	40 93 c7 07 	sts	0x07C7, r20
		fp1->sz = len;
    4bd4:	f9 01       	movw	r30, r18
    4bd6:	61 93       	st	Z+, r22
    4bd8:	71 93       	st	Z+, r23
    4bda:	02 c0       	rjmp	.+4      	; 0x4be0 <malloc+0x12e>
		return &(fp1->nx);
    4bdc:	e0 e0       	ldi	r30, 0x00	; 0
    4bde:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
    4be0:	cf 01       	movw	r24, r30
    4be2:	df 91       	pop	r29
    4be4:	cf 91       	pop	r28
    4be6:	1f 91       	pop	r17
    4be8:	0f 91       	pop	r16
    4bea:	08 95       	ret

00004bec <free>:
{
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    4bec:	cf 93       	push	r28
    4bee:	df 93       	push	r29
    4bf0:	9c 01       	movw	r18, r24
    4bf2:	00 97       	sbiw	r24, 0x00	; 0
    4bf4:	09 f4       	brne	.+2      	; 0x4bf8 <free+0xc>
    4bf6:	8f c0       	rjmp	.+286    	; 0x4d16 <free+0x12a>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
    4bf8:	ec 01       	movw	r28, r24
    4bfa:	22 97       	sbiw	r28, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    4bfc:	1b 82       	std	Y+3, r1	; 0x03
    4bfe:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    4c00:	60 91 c9 07 	lds	r22, 0x07C9
    4c04:	70 91 ca 07 	lds	r23, 0x07CA
    4c08:	61 15       	cp	r22, r1
    4c0a:	71 05       	cpc	r23, r1
    4c0c:	81 f4       	brne	.+32     	; 0x4c2e <free+0x42>
		if ((char *)p + fpnew->sz == __brkval)
    4c0e:	88 81       	ld	r24, Y
    4c10:	99 81       	ldd	r25, Y+1	; 0x01
    4c12:	82 0f       	add	r24, r18
    4c14:	93 1f       	adc	r25, r19
    4c16:	20 91 c7 07 	lds	r18, 0x07C7
    4c1a:	30 91 c8 07 	lds	r19, 0x07C8
    4c1e:	28 17       	cp	r18, r24
    4c20:	39 07       	cpc	r19, r25
    4c22:	39 f5       	brne	.+78     	; 0x4c72 <free+0x86>
			__brkval = cpnew;
    4c24:	d0 93 c8 07 	sts	0x07C8, r29
    4c28:	c0 93 c7 07 	sts	0x07C7, r28
    4c2c:	74 c0       	rjmp	.+232    	; 0x4d16 <free+0x12a>
		else
			__flp = fpnew;
    4c2e:	db 01       	movw	r26, r22
    4c30:	40 e0       	ldi	r20, 0x00	; 0
    4c32:	50 e0       	ldi	r21, 0x00	; 0
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    4c34:	ac 17       	cp	r26, r28
    4c36:	bd 07       	cpc	r27, r29
    4c38:	08 f1       	brcs	.+66     	; 0x4c7c <free+0x90>
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    4c3a:	bb 83       	std	Y+3, r27	; 0x03
    4c3c:	aa 83       	std	Y+2, r26	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    4c3e:	fe 01       	movw	r30, r28
    4c40:	21 91       	ld	r18, Z+
    4c42:	31 91       	ld	r19, Z+
    4c44:	e2 0f       	add	r30, r18
    4c46:	f3 1f       	adc	r31, r19
    4c48:	ae 17       	cp	r26, r30
    4c4a:	bf 07       	cpc	r27, r31
    4c4c:	79 f4       	brne	.+30     	; 0x4c6c <free+0x80>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    4c4e:	8d 91       	ld	r24, X+
    4c50:	9c 91       	ld	r25, X
    4c52:	11 97       	sbiw	r26, 0x01	; 1
    4c54:	28 0f       	add	r18, r24
    4c56:	39 1f       	adc	r19, r25
    4c58:	2e 5f       	subi	r18, 0xFE	; 254
    4c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    4c5c:	39 83       	std	Y+1, r19	; 0x01
    4c5e:	28 83       	st	Y, r18
			fpnew->nx = fp1->nx;
    4c60:	12 96       	adiw	r26, 0x02	; 2
    4c62:	8d 91       	ld	r24, X+
    4c64:	9c 91       	ld	r25, X
    4c66:	13 97       	sbiw	r26, 0x03	; 3
    4c68:	9b 83       	std	Y+3, r25	; 0x03
    4c6a:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (fp2 == 0) {
    4c6c:	41 15       	cp	r20, r1
    4c6e:	51 05       	cpc	r21, r1
    4c70:	71 f4       	brne	.+28     	; 0x4c8e <free+0xa2>
			/* new head of freelist */
			__flp = fpnew;
    4c72:	d0 93 ca 07 	sts	0x07CA, r29
    4c76:	c0 93 c9 07 	sts	0x07C9, r28
    4c7a:	4d c0       	rjmp	.+154    	; 0x4d16 <free+0x12a>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    4c7c:	12 96       	adiw	r26, 0x02	; 2
    4c7e:	8d 91       	ld	r24, X+
    4c80:	9c 91       	ld	r25, X
    4c82:	13 97       	sbiw	r26, 0x03	; 3
    4c84:	ad 01       	movw	r20, r26
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
    4c86:	00 97       	sbiw	r24, 0x00	; 0
    4c88:	11 f0       	breq	.+4      	; 0x4c8e <free+0xa2>
    4c8a:	dc 01       	movw	r26, r24
    4c8c:	d3 cf       	rjmp	.-90     	; 0x4c34 <free+0x48>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    4c8e:	da 01       	movw	r26, r20
    4c90:	13 96       	adiw	r26, 0x03	; 3
    4c92:	dc 93       	st	X, r29
    4c94:	ce 93       	st	-X, r28
    4c96:	12 97       	sbiw	r26, 0x02	; 2
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    4c98:	fa 01       	movw	r30, r20
    4c9a:	21 91       	ld	r18, Z+
    4c9c:	31 91       	ld	r19, Z+
    4c9e:	e2 0f       	add	r30, r18
    4ca0:	f3 1f       	adc	r31, r19
    4ca2:	ce 17       	cp	r28, r30
    4ca4:	df 07       	cpc	r29, r31
    4ca6:	69 f4       	brne	.+26     	; 0x4cc2 <free+0xd6>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    4ca8:	88 81       	ld	r24, Y
    4caa:	99 81       	ldd	r25, Y+1	; 0x01
    4cac:	28 0f       	add	r18, r24
    4cae:	39 1f       	adc	r19, r25
    4cb0:	2e 5f       	subi	r18, 0xFE	; 254
    4cb2:	3f 4f       	sbci	r19, 0xFF	; 255
    4cb4:	fa 01       	movw	r30, r20
    4cb6:	31 83       	std	Z+1, r19	; 0x01
    4cb8:	20 83       	st	Z, r18
		fp2->nx = fpnew->nx;
    4cba:	8a 81       	ldd	r24, Y+2	; 0x02
    4cbc:	9b 81       	ldd	r25, Y+3	; 0x03
    4cbe:	93 83       	std	Z+3, r25	; 0x03
    4cc0:	82 83       	std	Z+2, r24	; 0x02
    4cc2:	e0 e0       	ldi	r30, 0x00	; 0
    4cc4:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1->nx != 0;
    4cc6:	db 01       	movw	r26, r22
    4cc8:	12 96       	adiw	r26, 0x02	; 2
    4cca:	8d 91       	ld	r24, X+
    4ccc:	9c 91       	ld	r25, X
    4cce:	13 97       	sbiw	r26, 0x03	; 3
    4cd0:	00 97       	sbiw	r24, 0x00	; 0
    4cd2:	19 f0       	breq	.+6      	; 0x4cda <free+0xee>
    4cd4:	bc 01       	movw	r22, r24
    4cd6:	fd 01       	movw	r30, r26
    4cd8:	f6 cf       	rjmp	.-20     	; 0x4cc6 <free+0xda>
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
    4cda:	ab 01       	movw	r20, r22
    4cdc:	4e 5f       	subi	r20, 0xFE	; 254
    4cde:	5f 4f       	sbci	r21, 0xFF	; 255
	if (cp2 + fp1->sz == __brkval) {
    4ce0:	db 01       	movw	r26, r22
    4ce2:	8d 91       	ld	r24, X+
    4ce4:	9c 91       	ld	r25, X
    4ce6:	84 0f       	add	r24, r20
    4ce8:	95 1f       	adc	r25, r21
    4cea:	20 91 c7 07 	lds	r18, 0x07C7
    4cee:	30 91 c8 07 	lds	r19, 0x07C8
    4cf2:	28 17       	cp	r18, r24
    4cf4:	39 07       	cpc	r19, r25
    4cf6:	79 f4       	brne	.+30     	; 0x4d16 <free+0x12a>
		if (fp2 == NULL)
    4cf8:	30 97       	sbiw	r30, 0x00	; 0
    4cfa:	29 f4       	brne	.+10     	; 0x4d06 <free+0x11a>
			/* Freelist is empty now. */
			__flp = NULL;
    4cfc:	10 92 ca 07 	sts	0x07CA, r1
    4d00:	10 92 c9 07 	sts	0x07C9, r1
    4d04:	02 c0       	rjmp	.+4      	; 0x4d0a <free+0x11e>
		else
			fp2->nx = NULL;
    4d06:	13 82       	std	Z+3, r1	; 0x03
    4d08:	12 82       	std	Z+2, r1	; 0x02
		__brkval = cp2 - sizeof(size_t);
    4d0a:	42 50       	subi	r20, 0x02	; 2
    4d0c:	50 40       	sbci	r21, 0x00	; 0
    4d0e:	50 93 c8 07 	sts	0x07C8, r21
    4d12:	40 93 c7 07 	sts	0x07C7, r20
	}
}
    4d16:	df 91       	pop	r29
    4d18:	cf 91       	pop	r28
    4d1a:	08 95       	ret

00004d1c <_Z11serialEventv>:
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    4d1c:	08 95       	ret

00004d1e <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
    4d1e:	1f 92       	push	r1
    4d20:	0f 92       	push	r0
    4d22:	0f b6       	in	r0, 0x3f	; 63
    4d24:	0f 92       	push	r0
    4d26:	11 24       	eor	r1, r1
    4d28:	2f 93       	push	r18
    4d2a:	3f 93       	push	r19
    4d2c:	4f 93       	push	r20
    4d2e:	8f 93       	push	r24
    4d30:	9f 93       	push	r25
    4d32:	ef 93       	push	r30
    4d34:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    4d36:	80 91 c0 00 	lds	r24, 0x00C0
    4d3a:	82 fd       	sbrc	r24, 2
    4d3c:	1d c0       	rjmp	.+58     	; 0x4d78 <__vector_18+0x5a>
      unsigned char c = UDR0;
    4d3e:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    4d42:	20 91 4a 07 	lds	r18, 0x074A
    4d46:	30 91 4b 07 	lds	r19, 0x074B

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    4d4a:	2f 5f       	subi	r18, 0xFF	; 255
    4d4c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d4e:	2f 73       	andi	r18, 0x3F	; 63
    4d50:	30 70       	andi	r19, 0x00	; 0
    4d52:	80 91 4c 07 	lds	r24, 0x074C
    4d56:	90 91 4d 07 	lds	r25, 0x074D
    4d5a:	28 17       	cp	r18, r24
    4d5c:	39 07       	cpc	r19, r25
    4d5e:	71 f0       	breq	.+28     	; 0x4d7c <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
    4d60:	e0 91 4a 07 	lds	r30, 0x074A
    4d64:	f0 91 4b 07 	lds	r31, 0x074B
    4d68:	e6 5f       	subi	r30, 0xF6	; 246
    4d6a:	f8 4f       	sbci	r31, 0xF8	; 248
    4d6c:	40 83       	st	Z, r20
    buffer->head = i;
    4d6e:	30 93 4b 07 	sts	0x074B, r19
    4d72:	20 93 4a 07 	sts	0x074A, r18
    4d76:	02 c0       	rjmp	.+4      	; 0x4d7c <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    4d78:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    4d7c:	ff 91       	pop	r31
    4d7e:	ef 91       	pop	r30
    4d80:	9f 91       	pop	r25
    4d82:	8f 91       	pop	r24
    4d84:	4f 91       	pop	r20
    4d86:	3f 91       	pop	r19
    4d88:	2f 91       	pop	r18
    4d8a:	0f 90       	pop	r0
    4d8c:	0f be       	out	0x3f, r0	; 63
    4d8e:	0f 90       	pop	r0
    4d90:	1f 90       	pop	r1
    4d92:	18 95       	reti

00004d94 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    4d94:	e0 91 9e 07 	lds	r30, 0x079E
    4d98:	f0 91 9f 07 	lds	r31, 0x079F
    4d9c:	e0 5c       	subi	r30, 0xC0	; 192
    4d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4da0:	81 91       	ld	r24, Z+
    4da2:	91 91       	ld	r25, Z+
    4da4:	20 81       	ld	r18, Z
    4da6:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    4da8:	82 1b       	sub	r24, r18
    4daa:	93 0b       	sbc	r25, r19
    4dac:	8f 73       	andi	r24, 0x3F	; 63
    4dae:	90 70       	andi	r25, 0x00	; 0
    4db0:	89 2b       	or	r24, r25
    4db2:	11 f0       	breq	.+4      	; 0x4db8 <_Z14serialEventRunv+0x24>
    4db4:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <_Z11serialEventv>
    4db8:	08 95       	ret

00004dba <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    4dba:	1f 92       	push	r1
    4dbc:	0f 92       	push	r0
    4dbe:	0f b6       	in	r0, 0x3f	; 63
    4dc0:	0f 92       	push	r0
    4dc2:	11 24       	eor	r1, r1
    4dc4:	2f 93       	push	r18
    4dc6:	3f 93       	push	r19
    4dc8:	8f 93       	push	r24
    4dca:	9f 93       	push	r25
    4dcc:	ef 93       	push	r30
    4dce:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    4dd0:	20 91 8e 07 	lds	r18, 0x078E
    4dd4:	30 91 8f 07 	lds	r19, 0x078F
    4dd8:	80 91 90 07 	lds	r24, 0x0790
    4ddc:	90 91 91 07 	lds	r25, 0x0791
    4de0:	28 17       	cp	r18, r24
    4de2:	39 07       	cpc	r19, r25
    4de4:	31 f4       	brne	.+12     	; 0x4df2 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    4de6:	80 91 c1 00 	lds	r24, 0x00C1
    4dea:	8f 7d       	andi	r24, 0xDF	; 223
    4dec:	80 93 c1 00 	sts	0x00C1, r24
    4df0:	14 c0       	rjmp	.+40     	; 0x4e1a <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    4df2:	e0 91 90 07 	lds	r30, 0x0790
    4df6:	f0 91 91 07 	lds	r31, 0x0791
    4dfa:	e2 5b       	subi	r30, 0xB2	; 178
    4dfc:	f8 4f       	sbci	r31, 0xF8	; 248
    4dfe:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    4e00:	80 91 90 07 	lds	r24, 0x0790
    4e04:	90 91 91 07 	lds	r25, 0x0791
    4e08:	01 96       	adiw	r24, 0x01	; 1
    4e0a:	8f 73       	andi	r24, 0x3F	; 63
    4e0c:	90 70       	andi	r25, 0x00	; 0
    4e0e:	90 93 91 07 	sts	0x0791, r25
    4e12:	80 93 90 07 	sts	0x0790, r24
	
  #if defined(UDR0)
    UDR0 = c;
    4e16:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    4e1a:	ff 91       	pop	r31
    4e1c:	ef 91       	pop	r30
    4e1e:	9f 91       	pop	r25
    4e20:	8f 91       	pop	r24
    4e22:	3f 91       	pop	r19
    4e24:	2f 91       	pop	r18
    4e26:	0f 90       	pop	r0
    4e28:	0f be       	out	0x3f, r0	; 63
    4e2a:	0f 90       	pop	r0
    4e2c:	1f 90       	pop	r1
    4e2e:	18 95       	reti

00004e30 <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    4e30:	af 92       	push	r10
    4e32:	bf 92       	push	r11
    4e34:	df 92       	push	r13
    4e36:	ef 92       	push	r14
    4e38:	ff 92       	push	r15
    4e3a:	0f 93       	push	r16
    4e3c:	1f 93       	push	r17
    4e3e:	cf 93       	push	r28
    4e40:	df 93       	push	r29
    4e42:	ec 01       	movw	r28, r24
    4e44:	7a 01       	movw	r14, r20
    4e46:	8b 01       	movw	r16, r22
    4e48:	dd 24       	eor	r13, r13
    4e4a:	40 30       	cpi	r20, 0x00	; 0
    4e4c:	81 ee       	ldi	r24, 0xE1	; 225
    4e4e:	58 07       	cpc	r21, r24
    4e50:	80 e0       	ldi	r24, 0x00	; 0
    4e52:	68 07       	cpc	r22, r24
    4e54:	80 e0       	ldi	r24, 0x00	; 0
    4e56:	78 07       	cpc	r23, r24
    4e58:	11 f0       	breq	.+4      	; 0x4e5e <_ZN14HardwareSerial5beginEm+0x2e>
    4e5a:	dd 24       	eor	r13, r13
    4e5c:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    4e5e:	91 e0       	ldi	r25, 0x01	; 1
    4e60:	a9 2e       	mov	r10, r25
    4e62:	b1 2c       	mov	r11, r1
    4e64:	ec 89       	ldd	r30, Y+20	; 0x14
    4e66:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    4e68:	dd 20       	and	r13, r13
    4e6a:	69 f0       	breq	.+26     	; 0x4e86 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    4e6c:	c5 01       	movw	r24, r10
    4e6e:	08 a0       	ldd	r0, Y+32	; 0x20
    4e70:	02 c0       	rjmp	.+4      	; 0x4e76 <_ZN14HardwareSerial5beginEm+0x46>
    4e72:	88 0f       	add	r24, r24
    4e74:	99 1f       	adc	r25, r25
    4e76:	0a 94       	dec	r0
    4e78:	e2 f7       	brpl	.-8      	; 0x4e72 <_ZN14HardwareSerial5beginEm+0x42>
    4e7a:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    4e7c:	60 e0       	ldi	r22, 0x00	; 0
    4e7e:	79 e0       	ldi	r23, 0x09	; 9
    4e80:	8d e3       	ldi	r24, 0x3D	; 61
    4e82:	90 e0       	ldi	r25, 0x00	; 0
    4e84:	05 c0       	rjmp	.+10     	; 0x4e90 <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    4e86:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    4e88:	60 e8       	ldi	r22, 0x80	; 128
    4e8a:	74 e8       	ldi	r23, 0x84	; 132
    4e8c:	8e e1       	ldi	r24, 0x1E	; 30
    4e8e:	90 e0       	ldi	r25, 0x00	; 0
    4e90:	a8 01       	movw	r20, r16
    4e92:	97 01       	movw	r18, r14
    4e94:	0e 94 c7 2f 	call	0x5f8e	; 0x5f8e <__udivmodsi4>
    4e98:	21 50       	subi	r18, 0x01	; 1
    4e9a:	30 40       	sbci	r19, 0x00	; 0
    4e9c:	40 40       	sbci	r20, 0x00	; 0
    4e9e:	50 40       	sbci	r21, 0x00	; 0
    4ea0:	56 95       	lsr	r21
    4ea2:	47 95       	ror	r20
    4ea4:	37 95       	ror	r19
    4ea6:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    4ea8:	80 e1       	ldi	r24, 0x10	; 16
    4eaa:	20 30       	cpi	r18, 0x00	; 0
    4eac:	38 07       	cpc	r19, r24
    4eae:	20 f0       	brcs	.+8      	; 0x4eb8 <_ZN14HardwareSerial5beginEm+0x88>
    4eb0:	dd 20       	and	r13, r13
    4eb2:	11 f0       	breq	.+4      	; 0x4eb8 <_ZN14HardwareSerial5beginEm+0x88>
    4eb4:	dd 24       	eor	r13, r13
    4eb6:	d6 cf       	rjmp	.-84     	; 0x4e64 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    4eb8:	e8 89       	ldd	r30, Y+16	; 0x10
    4eba:	f9 89       	ldd	r31, Y+17	; 0x11
    4ebc:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    4ebe:	ea 89       	ldd	r30, Y+18	; 0x12
    4ec0:	fb 89       	ldd	r31, Y+19	; 0x13
    4ec2:	20 83       	st	Z, r18

  transmitting = false;
    4ec4:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    4ec6:	ee 89       	ldd	r30, Y+22	; 0x16
    4ec8:	ff 89       	ldd	r31, Y+23	; 0x17
    4eca:	40 81       	ld	r20, Z
    4ecc:	21 e0       	ldi	r18, 0x01	; 1
    4ece:	30 e0       	ldi	r19, 0x00	; 0
    4ed0:	c9 01       	movw	r24, r18
    4ed2:	0c 8c       	ldd	r0, Y+28	; 0x1c
    4ed4:	02 c0       	rjmp	.+4      	; 0x4eda <_ZN14HardwareSerial5beginEm+0xaa>
    4ed6:	88 0f       	add	r24, r24
    4ed8:	99 1f       	adc	r25, r25
    4eda:	0a 94       	dec	r0
    4edc:	e2 f7       	brpl	.-8      	; 0x4ed6 <_ZN14HardwareSerial5beginEm+0xa6>
    4ede:	48 2b       	or	r20, r24
    4ee0:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    4ee2:	ee 89       	ldd	r30, Y+22	; 0x16
    4ee4:	ff 89       	ldd	r31, Y+23	; 0x17
    4ee6:	40 81       	ld	r20, Z
    4ee8:	c9 01       	movw	r24, r18
    4eea:	0d 8c       	ldd	r0, Y+29	; 0x1d
    4eec:	02 c0       	rjmp	.+4      	; 0x4ef2 <_ZN14HardwareSerial5beginEm+0xc2>
    4eee:	88 0f       	add	r24, r24
    4ef0:	99 1f       	adc	r25, r25
    4ef2:	0a 94       	dec	r0
    4ef4:	e2 f7       	brpl	.-8      	; 0x4eee <_ZN14HardwareSerial5beginEm+0xbe>
    4ef6:	48 2b       	or	r20, r24
    4ef8:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    4efa:	ee 89       	ldd	r30, Y+22	; 0x16
    4efc:	ff 89       	ldd	r31, Y+23	; 0x17
    4efe:	40 81       	ld	r20, Z
    4f00:	c9 01       	movw	r24, r18
    4f02:	0e 8c       	ldd	r0, Y+30	; 0x1e
    4f04:	02 c0       	rjmp	.+4      	; 0x4f0a <_ZN14HardwareSerial5beginEm+0xda>
    4f06:	88 0f       	add	r24, r24
    4f08:	99 1f       	adc	r25, r25
    4f0a:	0a 94       	dec	r0
    4f0c:	e2 f7       	brpl	.-8      	; 0x4f06 <_ZN14HardwareSerial5beginEm+0xd6>
    4f0e:	48 2b       	or	r20, r24
    4f10:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    4f12:	ee 89       	ldd	r30, Y+22	; 0x16
    4f14:	ff 89       	ldd	r31, Y+23	; 0x17
    4f16:	80 81       	ld	r24, Z
    4f18:	0f 8c       	ldd	r0, Y+31	; 0x1f
    4f1a:	02 c0       	rjmp	.+4      	; 0x4f20 <_ZN14HardwareSerial5beginEm+0xf0>
    4f1c:	22 0f       	add	r18, r18
    4f1e:	33 1f       	adc	r19, r19
    4f20:	0a 94       	dec	r0
    4f22:	e2 f7       	brpl	.-8      	; 0x4f1c <_ZN14HardwareSerial5beginEm+0xec>
    4f24:	20 95       	com	r18
    4f26:	28 23       	and	r18, r24
    4f28:	20 83       	st	Z, r18
}
    4f2a:	df 91       	pop	r29
    4f2c:	cf 91       	pop	r28
    4f2e:	1f 91       	pop	r17
    4f30:	0f 91       	pop	r16
    4f32:	ff 90       	pop	r15
    4f34:	ef 90       	pop	r14
    4f36:	df 90       	pop	r13
    4f38:	bf 90       	pop	r11
    4f3a:	af 90       	pop	r10
    4f3c:	08 95       	ret

00004f3e <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    4f3e:	dc 01       	movw	r26, r24
    4f40:	1c 96       	adiw	r26, 0x0c	; 12
    4f42:	ed 91       	ld	r30, X+
    4f44:	fc 91       	ld	r31, X
    4f46:	1d 97       	sbiw	r26, 0x0d	; 13
    4f48:	e0 5c       	subi	r30, 0xC0	; 192
    4f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f4c:	21 91       	ld	r18, Z+
    4f4e:	31 91       	ld	r19, Z+
    4f50:	80 81       	ld	r24, Z
    4f52:	91 81       	ldd	r25, Z+1	; 0x01
    4f54:	28 1b       	sub	r18, r24
    4f56:	39 0b       	sbc	r19, r25
    4f58:	2f 73       	andi	r18, 0x3F	; 63
    4f5a:	30 70       	andi	r19, 0x00	; 0
}
    4f5c:	c9 01       	movw	r24, r18
    4f5e:	08 95       	ret

00004f60 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    4f60:	dc 01       	movw	r26, r24
    4f62:	1c 96       	adiw	r26, 0x0c	; 12
    4f64:	ed 91       	ld	r30, X+
    4f66:	fc 91       	ld	r31, X
    4f68:	1d 97       	sbiw	r26, 0x0d	; 13
    4f6a:	e0 5c       	subi	r30, 0xC0	; 192
    4f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f6e:	20 81       	ld	r18, Z
    4f70:	31 81       	ldd	r19, Z+1	; 0x01
    4f72:	e0 54       	subi	r30, 0x40	; 64
    4f74:	f0 40       	sbci	r31, 0x00	; 0
    4f76:	df 01       	movw	r26, r30
    4f78:	ae 5b       	subi	r26, 0xBE	; 190
    4f7a:	bf 4f       	sbci	r27, 0xFF	; 255
    4f7c:	8d 91       	ld	r24, X+
    4f7e:	9c 91       	ld	r25, X
    4f80:	11 97       	sbiw	r26, 0x01	; 1
    4f82:	28 17       	cp	r18, r24
    4f84:	39 07       	cpc	r19, r25
    4f86:	19 f4       	brne	.+6      	; 0x4f8e <_ZN14HardwareSerial4peekEv+0x2e>
    4f88:	2f ef       	ldi	r18, 0xFF	; 255
    4f8a:	3f ef       	ldi	r19, 0xFF	; 255
    4f8c:	07 c0       	rjmp	.+14     	; 0x4f9c <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    4f8e:	8d 91       	ld	r24, X+
    4f90:	9c 91       	ld	r25, X
    4f92:	e8 0f       	add	r30, r24
    4f94:	f9 1f       	adc	r31, r25
    4f96:	80 81       	ld	r24, Z
    4f98:	28 2f       	mov	r18, r24
    4f9a:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    4f9c:	c9 01       	movw	r24, r18
    4f9e:	08 95       	ret

00004fa0 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    4fa0:	dc 01       	movw	r26, r24
    4fa2:	1c 96       	adiw	r26, 0x0c	; 12
    4fa4:	ed 91       	ld	r30, X+
    4fa6:	fc 91       	ld	r31, X
    4fa8:	1d 97       	sbiw	r26, 0x0d	; 13
    4faa:	e0 5c       	subi	r30, 0xC0	; 192
    4fac:	ff 4f       	sbci	r31, 0xFF	; 255
    4fae:	20 81       	ld	r18, Z
    4fb0:	31 81       	ldd	r19, Z+1	; 0x01
    4fb2:	e0 54       	subi	r30, 0x40	; 64
    4fb4:	f0 40       	sbci	r31, 0x00	; 0
    4fb6:	df 01       	movw	r26, r30
    4fb8:	ae 5b       	subi	r26, 0xBE	; 190
    4fba:	bf 4f       	sbci	r27, 0xFF	; 255
    4fbc:	8d 91       	ld	r24, X+
    4fbe:	9c 91       	ld	r25, X
    4fc0:	11 97       	sbiw	r26, 0x01	; 1
    4fc2:	28 17       	cp	r18, r24
    4fc4:	39 07       	cpc	r19, r25
    4fc6:	19 f4       	brne	.+6      	; 0x4fce <_ZN14HardwareSerial4readEv+0x2e>
    4fc8:	2f ef       	ldi	r18, 0xFF	; 255
    4fca:	3f ef       	ldi	r19, 0xFF	; 255
    4fcc:	10 c0       	rjmp	.+32     	; 0x4fee <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    4fce:	8d 91       	ld	r24, X+
    4fd0:	9c 91       	ld	r25, X
    4fd2:	11 97       	sbiw	r26, 0x01	; 1
    4fd4:	e8 0f       	add	r30, r24
    4fd6:	f9 1f       	adc	r31, r25
    4fd8:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    4fda:	8d 91       	ld	r24, X+
    4fdc:	9c 91       	ld	r25, X
    4fde:	11 97       	sbiw	r26, 0x01	; 1
    4fe0:	01 96       	adiw	r24, 0x01	; 1
    4fe2:	8f 73       	andi	r24, 0x3F	; 63
    4fe4:	90 70       	andi	r25, 0x00	; 0
    4fe6:	11 96       	adiw	r26, 0x01	; 1
    4fe8:	9c 93       	st	X, r25
    4fea:	8e 93       	st	-X, r24
    return c;
    4fec:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    4fee:	c9 01       	movw	r24, r18
    4ff0:	08 95       	ret

00004ff2 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
    4ff2:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    4ff4:	91 96       	adiw	r26, 0x21	; 33
    4ff6:	8c 91       	ld	r24, X
    4ff8:	91 97       	sbiw	r26, 0x21	; 33
    4ffa:	88 23       	and	r24, r24
    4ffc:	39 f0       	breq	.+14     	; 0x500c <_ZN14HardwareSerial5flushEv+0x1a>
    4ffe:	54 96       	adiw	r26, 0x14	; 20
    5000:	ed 91       	ld	r30, X+
    5002:	fc 91       	ld	r31, X
    5004:	55 97       	sbiw	r26, 0x15	; 21
    5006:	80 81       	ld	r24, Z
    5008:	86 ff       	sbrs	r24, 6
    500a:	f9 cf       	rjmp	.-14     	; 0x4ffe <_ZN14HardwareSerial5flushEv+0xc>
  transmitting = false;
    500c:	91 96       	adiw	r26, 0x21	; 33
    500e:	1c 92       	st	X, r1
}
    5010:	08 95       	ret

00005012 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    5012:	cf 93       	push	r28
    5014:	df 93       	push	r29
    5016:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    5018:	ee 85       	ldd	r30, Y+14	; 0x0e
    501a:	ff 85       	ldd	r31, Y+15	; 0x0f
    501c:	e0 5c       	subi	r30, 0xC0	; 192
    501e:	ff 4f       	sbci	r31, 0xFF	; 255
    5020:	20 81       	ld	r18, Z
    5022:	31 81       	ldd	r19, Z+1	; 0x01
    5024:	e0 54       	subi	r30, 0x40	; 64
    5026:	f0 40       	sbci	r31, 0x00	; 0
    5028:	2f 5f       	subi	r18, 0xFF	; 255
    502a:	3f 4f       	sbci	r19, 0xFF	; 255
    502c:	2f 73       	andi	r18, 0x3F	; 63
    502e:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    5030:	df 01       	movw	r26, r30
    5032:	ae 5b       	subi	r26, 0xBE	; 190
    5034:	bf 4f       	sbci	r27, 0xFF	; 255
    5036:	8d 91       	ld	r24, X+
    5038:	9c 91       	ld	r25, X
    503a:	11 97       	sbiw	r26, 0x01	; 1
    503c:	28 17       	cp	r18, r24
    503e:	39 07       	cpc	r19, r25
    5040:	d1 f3       	breq	.-12     	; 0x5036 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    5042:	e0 5c       	subi	r30, 0xC0	; 192
    5044:	ff 4f       	sbci	r31, 0xFF	; 255
    5046:	80 81       	ld	r24, Z
    5048:	91 81       	ldd	r25, Z+1	; 0x01
    504a:	e0 54       	subi	r30, 0x40	; 64
    504c:	f0 40       	sbci	r31, 0x00	; 0
    504e:	e8 0f       	add	r30, r24
    5050:	f9 1f       	adc	r31, r25
    5052:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    5054:	ee 85       	ldd	r30, Y+14	; 0x0e
    5056:	ff 85       	ldd	r31, Y+15	; 0x0f
    5058:	e0 5c       	subi	r30, 0xC0	; 192
    505a:	ff 4f       	sbci	r31, 0xFF	; 255
    505c:	31 83       	std	Z+1, r19	; 0x01
    505e:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    5060:	ee 89       	ldd	r30, Y+22	; 0x16
    5062:	ff 89       	ldd	r31, Y+23	; 0x17
    5064:	20 81       	ld	r18, Z
    5066:	81 e0       	ldi	r24, 0x01	; 1
    5068:	90 e0       	ldi	r25, 0x00	; 0
    506a:	0f 8c       	ldd	r0, Y+31	; 0x1f
    506c:	02 c0       	rjmp	.+4      	; 0x5072 <_ZN14HardwareSerial5writeEh+0x60>
    506e:	88 0f       	add	r24, r24
    5070:	99 1f       	adc	r25, r25
    5072:	0a 94       	dec	r0
    5074:	e2 f7       	brpl	.-8      	; 0x506e <_ZN14HardwareSerial5writeEh+0x5c>
    5076:	28 2b       	or	r18, r24
    5078:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    507a:	81 e0       	ldi	r24, 0x01	; 1
    507c:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    507e:	ec 89       	ldd	r30, Y+20	; 0x14
    5080:	fd 89       	ldd	r31, Y+21	; 0x15
    5082:	80 81       	ld	r24, Z
    5084:	80 64       	ori	r24, 0x40	; 64
    5086:	80 83       	st	Z, r24
  
  return 1;
}
    5088:	81 e0       	ldi	r24, 0x01	; 1
    508a:	90 e0       	ldi	r25, 0x00	; 0
    508c:	df 91       	pop	r29
    508e:	cf 91       	pop	r28
    5090:	08 95       	ret

00005092 <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    5092:	10 92 95 07 	sts	0x0795, r1
    5096:	10 92 94 07 	sts	0x0794, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    509a:	88 ee       	ldi	r24, 0xE8	; 232
    509c:	93 e0       	ldi	r25, 0x03	; 3
    509e:	a0 e0       	ldi	r26, 0x00	; 0
    50a0:	b0 e0       	ldi	r27, 0x00	; 0
    50a2:	80 93 96 07 	sts	0x0796, r24
    50a6:	90 93 97 07 	sts	0x0797, r25
    50aa:	a0 93 98 07 	sts	0x0798, r26
    50ae:	b0 93 99 07 	sts	0x0799, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    50b2:	8e e5       	ldi	r24, 0x5E	; 94
    50b4:	94 e0       	ldi	r25, 0x04	; 4
    50b6:	90 93 93 07 	sts	0x0793, r25
    50ba:	80 93 92 07 	sts	0x0792, r24
{
  _rx_buffer = rx_buffer;
    50be:	8a e0       	ldi	r24, 0x0A	; 10
    50c0:	97 e0       	ldi	r25, 0x07	; 7
    50c2:	90 93 9f 07 	sts	0x079F, r25
    50c6:	80 93 9e 07 	sts	0x079E, r24
  _tx_buffer = tx_buffer;
    50ca:	8e e4       	ldi	r24, 0x4E	; 78
    50cc:	97 e0       	ldi	r25, 0x07	; 7
    50ce:	90 93 a1 07 	sts	0x07A1, r25
    50d2:	80 93 a0 07 	sts	0x07A0, r24
  _ubrrh = ubrrh;
    50d6:	85 ec       	ldi	r24, 0xC5	; 197
    50d8:	90 e0       	ldi	r25, 0x00	; 0
    50da:	90 93 a3 07 	sts	0x07A3, r25
    50de:	80 93 a2 07 	sts	0x07A2, r24
  _ubrrl = ubrrl;
    50e2:	84 ec       	ldi	r24, 0xC4	; 196
    50e4:	90 e0       	ldi	r25, 0x00	; 0
    50e6:	90 93 a5 07 	sts	0x07A5, r25
    50ea:	80 93 a4 07 	sts	0x07A4, r24
  _ucsra = ucsra;
    50ee:	80 ec       	ldi	r24, 0xC0	; 192
    50f0:	90 e0       	ldi	r25, 0x00	; 0
    50f2:	90 93 a7 07 	sts	0x07A7, r25
    50f6:	80 93 a6 07 	sts	0x07A6, r24
  _ucsrb = ucsrb;
    50fa:	81 ec       	ldi	r24, 0xC1	; 193
    50fc:	90 e0       	ldi	r25, 0x00	; 0
    50fe:	90 93 a9 07 	sts	0x07A9, r25
    5102:	80 93 a8 07 	sts	0x07A8, r24
  _ucsrc = ucsrc;
    5106:	82 ec       	ldi	r24, 0xC2	; 194
    5108:	90 e0       	ldi	r25, 0x00	; 0
    510a:	90 93 ab 07 	sts	0x07AB, r25
    510e:	80 93 aa 07 	sts	0x07AA, r24
  _udr = udr;
    5112:	86 ec       	ldi	r24, 0xC6	; 198
    5114:	90 e0       	ldi	r25, 0x00	; 0
    5116:	90 93 ad 07 	sts	0x07AD, r25
    511a:	80 93 ac 07 	sts	0x07AC, r24
  _rxen = rxen;
    511e:	84 e0       	ldi	r24, 0x04	; 4
    5120:	80 93 ae 07 	sts	0x07AE, r24
  _txen = txen;
    5124:	83 e0       	ldi	r24, 0x03	; 3
    5126:	80 93 af 07 	sts	0x07AF, r24
  _rxcie = rxcie;
    512a:	87 e0       	ldi	r24, 0x07	; 7
    512c:	80 93 b0 07 	sts	0x07B0, r24
  _udrie = udrie;
    5130:	85 e0       	ldi	r24, 0x05	; 5
    5132:	80 93 b1 07 	sts	0x07B1, r24
  _u2x = u2x;
    5136:	81 e0       	ldi	r24, 0x01	; 1
    5138:	80 93 b2 07 	sts	0x07B2, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    513c:	08 95       	ret

0000513e <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    513e:	0f 93       	push	r16
    5140:	fc 01       	movw	r30, r24
    5142:	8e e6       	ldi	r24, 0x6E	; 110
    5144:	94 e0       	ldi	r25, 0x04	; 4
    5146:	91 83       	std	Z+1, r25	; 0x01
    5148:	80 83       	st	Z, r24
{
    _address[0] = first_octet;
    514a:	62 83       	std	Z+2, r22	; 0x02
    _address[1] = second_octet;
    514c:	43 83       	std	Z+3, r20	; 0x03
    _address[2] = third_octet;
    514e:	24 83       	std	Z+4, r18	; 0x04
    _address[3] = fourth_octet;
    5150:	05 83       	std	Z+5, r16	; 0x05
}
    5152:	0f 91       	pop	r16
    5154:	08 95       	ret

00005156 <_GLOBAL__I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    5156:	8e e6       	ldi	r24, 0x6E	; 110
    5158:	94 e0       	ldi	r25, 0x04	; 4
    515a:	90 93 b5 07 	sts	0x07B5, r25
    515e:	80 93 b4 07 	sts	0x07B4, r24
{
    _address[0] = first_octet;
    5162:	10 92 b6 07 	sts	0x07B6, r1
    _address[1] = second_octet;
    5166:	10 92 b7 07 	sts	0x07B7, r1
    _address[2] = third_octet;
    516a:	10 92 b8 07 	sts	0x07B8, r1
    _address[3] = fourth_octet;
    516e:	10 92 b9 07 	sts	0x07B9, r1
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
    5172:	08 95       	ret

00005174 <_ZNK9IPAddress7printToER5Print>:
bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
    5174:	8f 92       	push	r8
    5176:	9f 92       	push	r9
    5178:	af 92       	push	r10
    517a:	bf 92       	push	r11
    517c:	cf 92       	push	r12
    517e:	df 92       	push	r13
    5180:	ef 92       	push	r14
    5182:	ff 92       	push	r15
    5184:	0f 93       	push	r16
    5186:	1f 93       	push	r17
    5188:	cf 93       	push	r28
    518a:	df 93       	push	r29
    518c:	4c 01       	movw	r8, r24
    518e:	6b 01       	movw	r12, r22
    5190:	7c 01       	movw	r14, r24
    5192:	aa 24       	eor	r10, r10
    5194:	bb 24       	eor	r11, r11
    5196:	c0 e0       	ldi	r28, 0x00	; 0
    5198:	d0 e0       	ldi	r29, 0x00	; 0
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
    519a:	c6 01       	movw	r24, r12
    519c:	f7 01       	movw	r30, r14
    519e:	62 81       	ldd	r22, Z+2	; 0x02
    51a0:	4a e0       	ldi	r20, 0x0A	; 10
    51a2:	50 e0       	ldi	r21, 0x00	; 0
    51a4:	0e 94 47 2a 	call	0x548e	; 0x548e <_ZN5Print5printEhi>
    51a8:	8c 01       	movw	r16, r24
        n += p.print('.');
    51aa:	c6 01       	movw	r24, r12
    51ac:	6e e2       	ldi	r22, 0x2E	; 46
    51ae:	0e 94 5f 29 	call	0x52be	; 0x52be <_ZN5Print5printEc>
size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
    51b2:	08 0f       	add	r16, r24
    51b4:	19 1f       	adc	r17, r25
        n += p.print('.');
    51b6:	a0 0e       	add	r10, r16
    51b8:	b1 1e       	adc	r11, r17
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    51ba:	21 96       	adiw	r28, 0x01	; 1
    51bc:	08 94       	sec
    51be:	e1 1c       	adc	r14, r1
    51c0:	f1 1c       	adc	r15, r1
    51c2:	c3 30       	cpi	r28, 0x03	; 3
    51c4:	d1 05       	cpc	r29, r1
    51c6:	49 f7       	brne	.-46     	; 0x519a <_ZNK9IPAddress7printToER5Print+0x26>
    {
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    51c8:	c6 01       	movw	r24, r12
    51ca:	f4 01       	movw	r30, r8
    51cc:	65 81       	ldd	r22, Z+5	; 0x05
    51ce:	4a e0       	ldi	r20, 0x0A	; 10
    51d0:	50 e0       	ldi	r21, 0x00	; 0
    51d2:	0e 94 47 2a 	call	0x548e	; 0x548e <_ZN5Print5printEhi>
    51d6:	95 01       	movw	r18, r10
    51d8:	28 0f       	add	r18, r24
    51da:	39 1f       	adc	r19, r25
    return n;
}
    51dc:	c9 01       	movw	r24, r18
    51de:	df 91       	pop	r29
    51e0:	cf 91       	pop	r28
    51e2:	1f 91       	pop	r17
    51e4:	0f 91       	pop	r16
    51e6:	ff 90       	pop	r15
    51e8:	ef 90       	pop	r14
    51ea:	df 90       	pop	r13
    51ec:	cf 90       	pop	r12
    51ee:	bf 90       	pop	r11
    51f0:	af 90       	pop	r10
    51f2:	9f 90       	pop	r9
    51f4:	8f 90       	pop	r8
    51f6:	08 95       	ret

000051f8 <_ZN9IPAddressC1Em>:
    _address[1] = second_octet;
    _address[2] = third_octet;
    _address[3] = fourth_octet;
}

IPAddress::IPAddress(uint32_t address)
    51f8:	df 93       	push	r29
    51fa:	cf 93       	push	r28
    51fc:	00 d0       	rcall	.+0      	; 0x51fe <_ZN9IPAddressC1Em+0x6>
    51fe:	00 d0       	rcall	.+0      	; 0x5200 <_ZN9IPAddressC1Em+0x8>
    5200:	cd b7       	in	r28, 0x3d	; 61
    5202:	de b7       	in	r29, 0x3e	; 62
    5204:	fc 01       	movw	r30, r24
    5206:	8e e6       	ldi	r24, 0x6E	; 110
    5208:	94 e0       	ldi	r25, 0x04	; 4
    520a:	91 83       	std	Z+1, r25	; 0x01
    520c:	80 83       	st	Z, r24
{
    memcpy(_address, &address, sizeof(_address));
    520e:	42 83       	std	Z+2, r20	; 0x02
    5210:	53 83       	std	Z+3, r21	; 0x03
    5212:	64 83       	std	Z+4, r22	; 0x04
    5214:	75 83       	std	Z+5, r23	; 0x05
}
    5216:	0f 90       	pop	r0
    5218:	0f 90       	pop	r0
    521a:	0f 90       	pop	r0
    521c:	0f 90       	pop	r0
    521e:	cf 91       	pop	r28
    5220:	df 91       	pop	r29
    5222:	08 95       	ret

00005224 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    5224:	cf 92       	push	r12
    5226:	df 92       	push	r13
    5228:	ef 92       	push	r14
    522a:	ff 92       	push	r15
    522c:	0f 93       	push	r16
    522e:	1f 93       	push	r17
    5230:	cf 93       	push	r28
    5232:	df 93       	push	r29
    5234:	7c 01       	movw	r14, r24
    5236:	6b 01       	movw	r12, r22
    5238:	8a 01       	movw	r16, r20
    523a:	c0 e0       	ldi	r28, 0x00	; 0
    523c:	d0 e0       	ldi	r29, 0x00	; 0
    523e:	0f c0       	rjmp	.+30     	; 0x525e <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    5240:	d6 01       	movw	r26, r12
    5242:	6d 91       	ld	r22, X+
    5244:	6d 01       	movw	r12, r26
    5246:	d7 01       	movw	r26, r14
    5248:	ed 91       	ld	r30, X+
    524a:	fc 91       	ld	r31, X
    524c:	01 90       	ld	r0, Z+
    524e:	f0 81       	ld	r31, Z
    5250:	e0 2d       	mov	r30, r0
    5252:	c7 01       	movw	r24, r14
    5254:	09 95       	icall
    5256:	c8 0f       	add	r28, r24
    5258:	d9 1f       	adc	r29, r25
    525a:	01 50       	subi	r16, 0x01	; 1
    525c:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    525e:	01 15       	cp	r16, r1
    5260:	11 05       	cpc	r17, r1
    5262:	71 f7       	brne	.-36     	; 0x5240 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    5264:	ce 01       	movw	r24, r28
    5266:	df 91       	pop	r29
    5268:	cf 91       	pop	r28
    526a:	1f 91       	pop	r17
    526c:	0f 91       	pop	r16
    526e:	ff 90       	pop	r15
    5270:	ef 90       	pop	r14
    5272:	df 90       	pop	r13
    5274:	cf 90       	pop	r12
    5276:	08 95       	ret

00005278 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
    5278:	ef 92       	push	r14
    527a:	ff 92       	push	r15
    527c:	0f 93       	push	r16
    527e:	1f 93       	push	r17
    5280:	cf 93       	push	r28
    5282:	df 93       	push	r29
    5284:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    5286:	8b 01       	movw	r16, r22
    5288:	c0 e0       	ldi	r28, 0x00	; 0
    528a:	d0 e0       	ldi	r29, 0x00	; 0
    528c:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    528e:	0f 5f       	subi	r16, 0xFF	; 255
    5290:	1f 4f       	sbci	r17, 0xFF	; 255
    5292:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    5294:	66 23       	and	r22, r22
    5296:	59 f0       	breq	.+22     	; 0x52ae <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    n += write(c);
    5298:	d7 01       	movw	r26, r14
    529a:	ed 91       	ld	r30, X+
    529c:	fc 91       	ld	r31, X
    529e:	01 90       	ld	r0, Z+
    52a0:	f0 81       	ld	r31, Z
    52a2:	e0 2d       	mov	r30, r0
    52a4:	c7 01       	movw	r24, r14
    52a6:	09 95       	icall
    52a8:	c8 0f       	add	r28, r24
    52aa:	d9 1f       	adc	r29, r25
    52ac:	ef cf       	rjmp	.-34     	; 0x528c <_ZN5Print5printEPK19__FlashStringHelper+0x14>
  }
  return n;
}
    52ae:	ce 01       	movw	r24, r28
    52b0:	df 91       	pop	r29
    52b2:	cf 91       	pop	r28
    52b4:	1f 91       	pop	r17
    52b6:	0f 91       	pop	r16
    52b8:	ff 90       	pop	r15
    52ba:	ef 90       	pop	r14
    52bc:	08 95       	ret

000052be <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    52be:	dc 01       	movw	r26, r24
{
  return write(c);
    52c0:	ed 91       	ld	r30, X+
    52c2:	fc 91       	ld	r31, X
    52c4:	01 90       	ld	r0, Z+
    52c6:	f0 81       	ld	r31, Z
    52c8:	e0 2d       	mov	r30, r0
    52ca:	09 95       	icall
}
    52cc:	08 95       	ret

000052ce <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    52ce:	ef 92       	push	r14
    52d0:	ff 92       	push	r15
    52d2:	0f 93       	push	r16
    52d4:	1f 93       	push	r17
    52d6:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    52d8:	dc 01       	movw	r26, r24
    52da:	ed 91       	ld	r30, X+
    52dc:	fc 91       	ld	r31, X
    52de:	01 90       	ld	r0, Z+
    52e0:	f0 81       	ld	r31, Z
    52e2:	e0 2d       	mov	r30, r0
    52e4:	6d e0       	ldi	r22, 0x0D	; 13
    52e6:	09 95       	icall
    52e8:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    52ea:	d8 01       	movw	r26, r16
    52ec:	ed 91       	ld	r30, X+
    52ee:	fc 91       	ld	r31, X
    52f0:	01 90       	ld	r0, Z+
    52f2:	f0 81       	ld	r31, Z
    52f4:	e0 2d       	mov	r30, r0
    52f6:	c8 01       	movw	r24, r16
    52f8:	6a e0       	ldi	r22, 0x0A	; 10
    52fa:	09 95       	icall
    52fc:	9c 01       	movw	r18, r24
    52fe:	2e 0d       	add	r18, r14
    5300:	3f 1d       	adc	r19, r15
    5302:	c9 01       	movw	r24, r18
    5304:	1f 91       	pop	r17
    5306:	0f 91       	pop	r16
    5308:	ff 90       	pop	r15
    530a:	ef 90       	pop	r14
    530c:	08 95       	ret

0000530e <_ZN5Print7printlnEPK19__FlashStringHelper>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    530e:	ef 92       	push	r14
    5310:	ff 92       	push	r15
    5312:	0f 93       	push	r16
    5314:	1f 93       	push	r17
    5316:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
    5318:	0e 94 3c 29 	call	0x5278	; 0x5278 <_ZN5Print5printEPK19__FlashStringHelper>
    531c:	8c 01       	movw	r16, r24
  n += println();
    531e:	c7 01       	movw	r24, r14
    5320:	0e 94 67 29 	call	0x52ce	; 0x52ce <_ZN5Print7printlnEv>
    5324:	9c 01       	movw	r18, r24
    5326:	20 0f       	add	r18, r16
    5328:	31 1f       	adc	r19, r17
  return n;
}
    532a:	c9 01       	movw	r24, r18
    532c:	1f 91       	pop	r17
    532e:	0f 91       	pop	r16
    5330:	ff 90       	pop	r15
    5332:	ef 90       	pop	r14
    5334:	08 95       	ret

00005336 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    5336:	cf 93       	push	r28
    5338:	df 93       	push	r29
    533a:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    533c:	61 15       	cp	r22, r1
    533e:	71 05       	cpc	r23, r1
    5340:	19 f4       	brne	.+6      	; 0x5348 <_ZN5Print5writeEPKc+0x12>
    5342:	20 e0       	ldi	r18, 0x00	; 0
    5344:	30 e0       	ldi	r19, 0x00	; 0
    5346:	0f c0       	rjmp	.+30     	; 0x5366 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
    5348:	db 01       	movw	r26, r22
    534a:	0d 90       	ld	r0, X+
    534c:	00 20       	and	r0, r0
    534e:	e9 f7       	brne	.-6      	; 0x534a <_ZN5Print5writeEPKc+0x14>
    5350:	11 97       	sbiw	r26, 0x01	; 1
    5352:	a6 1b       	sub	r26, r22
    5354:	b7 0b       	sbc	r27, r23
    5356:	e8 81       	ld	r30, Y
    5358:	f9 81       	ldd	r31, Y+1	; 0x01
    535a:	02 80       	ldd	r0, Z+2	; 0x02
    535c:	f3 81       	ldd	r31, Z+3	; 0x03
    535e:	e0 2d       	mov	r30, r0
    5360:	ad 01       	movw	r20, r26
    5362:	09 95       	icall
    5364:	9c 01       	movw	r18, r24
    }
    5366:	c9 01       	movw	r24, r18
    5368:	df 91       	pop	r29
    536a:	cf 91       	pop	r28
    536c:	08 95       	ret

0000536e <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    536e:	4f 92       	push	r4
    5370:	5f 92       	push	r5
    5372:	7f 92       	push	r7
    5374:	8f 92       	push	r8
    5376:	9f 92       	push	r9
    5378:	af 92       	push	r10
    537a:	bf 92       	push	r11
    537c:	cf 92       	push	r12
    537e:	df 92       	push	r13
    5380:	ef 92       	push	r14
    5382:	ff 92       	push	r15
    5384:	0f 93       	push	r16
    5386:	1f 93       	push	r17
    5388:	df 93       	push	r29
    538a:	cf 93       	push	r28
    538c:	cd b7       	in	r28, 0x3d	; 61
    538e:	de b7       	in	r29, 0x3e	; 62
    5390:	a1 97       	sbiw	r28, 0x21	; 33
    5392:	0f b6       	in	r0, 0x3f	; 63
    5394:	f8 94       	cli
    5396:	de bf       	out	0x3e, r29	; 62
    5398:	0f be       	out	0x3f, r0	; 63
    539a:	cd bf       	out	0x3d, r28	; 61
    539c:	2c 01       	movw	r4, r24
    539e:	74 2e       	mov	r7, r20
    53a0:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    53a2:	22 30       	cpi	r18, 0x02	; 2
    53a4:	08 f4       	brcc	.+2      	; 0x53a8 <_ZN5Print11printNumberEmh+0x3a>
    53a6:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    53a8:	19 a2       	std	Y+33, r1	; 0x21
    53aa:	31 e2       	ldi	r19, 0x21	; 33
    53ac:	c3 2e       	mov	r12, r19
    53ae:	d1 2c       	mov	r13, r1
    53b0:	cc 0e       	add	r12, r28
    53b2:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    53b4:	82 2e       	mov	r8, r18
    53b6:	99 24       	eor	r9, r9
    53b8:	aa 24       	eor	r10, r10
    53ba:	bb 24       	eor	r11, r11
    53bc:	67 2d       	mov	r22, r7
    53be:	75 2f       	mov	r23, r21
    53c0:	a5 01       	movw	r20, r10
    53c2:	94 01       	movw	r18, r8
    53c4:	0e 94 c7 2f 	call	0x5f8e	; 0x5f8e <__udivmodsi4>
    53c8:	79 01       	movw	r14, r18
    53ca:	8a 01       	movw	r16, r20
    char c = m - base * n;
    53cc:	c8 01       	movw	r24, r16
    53ce:	b7 01       	movw	r22, r14
    53d0:	a5 01       	movw	r20, r10
    53d2:	94 01       	movw	r18, r8
    53d4:	0e 94 94 2f 	call	0x5f28	; 0x5f28 <__mulsi3>
    53d8:	47 2d       	mov	r20, r7
    53da:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    53dc:	08 94       	sec
    53de:	c1 08       	sbc	r12, r1
    53e0:	d1 08       	sbc	r13, r1
    53e2:	4a 30       	cpi	r20, 0x0A	; 10
    53e4:	14 f4       	brge	.+4      	; 0x53ea <_ZN5Print11printNumberEmh+0x7c>
    53e6:	40 5d       	subi	r20, 0xD0	; 208
    53e8:	01 c0       	rjmp	.+2      	; 0x53ec <_ZN5Print11printNumberEmh+0x7e>
    53ea:	49 5c       	subi	r20, 0xC9	; 201
    53ec:	f6 01       	movw	r30, r12
    53ee:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    53f0:	e1 14       	cp	r14, r1
    53f2:	f1 04       	cpc	r15, r1
    53f4:	01 05       	cpc	r16, r1
    53f6:	11 05       	cpc	r17, r1
    53f8:	21 f0       	breq	.+8      	; 0x5402 <_ZN5Print11printNumberEmh+0x94>
    53fa:	7e 2c       	mov	r7, r14
    53fc:	5f 2d       	mov	r21, r15
    53fe:	c8 01       	movw	r24, r16
    5400:	dd cf       	rjmp	.-70     	; 0x53bc <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    5402:	c2 01       	movw	r24, r4
    5404:	b6 01       	movw	r22, r12
    5406:	0e 94 9b 29 	call	0x5336	; 0x5336 <_ZN5Print5writeEPKc>
}
    540a:	a1 96       	adiw	r28, 0x21	; 33
    540c:	0f b6       	in	r0, 0x3f	; 63
    540e:	f8 94       	cli
    5410:	de bf       	out	0x3e, r29	; 62
    5412:	0f be       	out	0x3f, r0	; 63
    5414:	cd bf       	out	0x3d, r28	; 61
    5416:	cf 91       	pop	r28
    5418:	df 91       	pop	r29
    541a:	1f 91       	pop	r17
    541c:	0f 91       	pop	r16
    541e:	ff 90       	pop	r15
    5420:	ef 90       	pop	r14
    5422:	df 90       	pop	r13
    5424:	cf 90       	pop	r12
    5426:	bf 90       	pop	r11
    5428:	af 90       	pop	r10
    542a:	9f 90       	pop	r9
    542c:	8f 90       	pop	r8
    542e:	7f 90       	pop	r7
    5430:	5f 90       	pop	r5
    5432:	4f 90       	pop	r4
    5434:	08 95       	ret

00005436 <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    5436:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    5438:	21 15       	cp	r18, r1
    543a:	31 05       	cpc	r19, r1
    543c:	41 f4       	brne	.+16     	; 0x544e <_ZN5Print5printEmi+0x18>
    543e:	ed 91       	ld	r30, X+
    5440:	fc 91       	ld	r31, X
    5442:	01 90       	ld	r0, Z+
    5444:	f0 81       	ld	r31, Z
    5446:	e0 2d       	mov	r30, r0
    5448:	64 2f       	mov	r22, r20
    544a:	09 95       	icall
    544c:	08 95       	ret
  else return printNumber(n, base);
    544e:	0e 94 b7 29 	call	0x536e	; 0x536e <_ZN5Print11printNumberEmh>
}
    5452:	08 95       	ret

00005454 <_ZN5Print7printlnEji>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
    5454:	cf 92       	push	r12
    5456:	df 92       	push	r13
    5458:	ef 92       	push	r14
    545a:	ff 92       	push	r15
    545c:	0f 93       	push	r16
    545e:	1f 93       	push	r17
    5460:	6c 01       	movw	r12, r24
    5462:	7b 01       	movw	r14, r22
    5464:	9a 01       	movw	r18, r20
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    5466:	00 e0       	ldi	r16, 0x00	; 0
    5468:	10 e0       	ldi	r17, 0x00	; 0
    546a:	b8 01       	movw	r22, r16
    546c:	a7 01       	movw	r20, r14
    546e:	0e 94 1b 2a 	call	0x5436	; 0x5436 <_ZN5Print5printEmi>
    5472:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
    5474:	c6 01       	movw	r24, r12
    5476:	0e 94 67 29 	call	0x52ce	; 0x52ce <_ZN5Print7printlnEv>
    547a:	08 0f       	add	r16, r24
    547c:	19 1f       	adc	r17, r25
  return n;
}
    547e:	c8 01       	movw	r24, r16
    5480:	1f 91       	pop	r17
    5482:	0f 91       	pop	r16
    5484:	ff 90       	pop	r15
    5486:	ef 90       	pop	r14
    5488:	df 90       	pop	r13
    548a:	cf 90       	pop	r12
    548c:	08 95       	ret

0000548e <_ZN5Print5printEhi>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    548e:	ef 92       	push	r14
    5490:	ff 92       	push	r15
    5492:	0f 93       	push	r16
    5494:	1f 93       	push	r17
    5496:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    5498:	e6 2e       	mov	r14, r22
    549a:	ff 24       	eor	r15, r15
    549c:	00 e0       	ldi	r16, 0x00	; 0
    549e:	10 e0       	ldi	r17, 0x00	; 0
    54a0:	b8 01       	movw	r22, r16
    54a2:	a7 01       	movw	r20, r14
    54a4:	0e 94 1b 2a 	call	0x5436	; 0x5436 <_ZN5Print5printEmi>
}
    54a8:	1f 91       	pop	r17
    54aa:	0f 91       	pop	r16
    54ac:	ff 90       	pop	r15
    54ae:	ef 90       	pop	r14
    54b0:	08 95       	ret

000054b2 <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    54b2:	cf 92       	push	r12
    54b4:	df 92       	push	r13
    54b6:	ef 92       	push	r14
    54b8:	ff 92       	push	r15
    54ba:	0f 93       	push	r16
    54bc:	1f 93       	push	r17
    54be:	cf 93       	push	r28
    54c0:	df 93       	push	r29
    54c2:	ec 01       	movw	r28, r24
    54c4:	6a 01       	movw	r12, r20
    54c6:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    54c8:	21 15       	cp	r18, r1
    54ca:	31 05       	cpc	r19, r1
    54cc:	41 f4       	brne	.+16     	; 0x54de <_ZN5Print5printEli+0x2c>
    return write(n);
    54ce:	e8 81       	ld	r30, Y
    54d0:	f9 81       	ldd	r31, Y+1	; 0x01
    54d2:	01 90       	ld	r0, Z+
    54d4:	f0 81       	ld	r31, Z
    54d6:	e0 2d       	mov	r30, r0
    54d8:	64 2f       	mov	r22, r20
    54da:	09 95       	icall
    54dc:	1f c0       	rjmp	.+62     	; 0x551c <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
    54de:	2a 30       	cpi	r18, 0x0A	; 10
    54e0:	31 05       	cpc	r19, r1
    54e2:	d1 f4       	brne	.+52     	; 0x5518 <_ZN5Print5printEli+0x66>
    if (n < 0) {
    54e4:	77 ff       	sbrs	r23, 7
    54e6:	17 c0       	rjmp	.+46     	; 0x5516 <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    54e8:	e8 81       	ld	r30, Y
    54ea:	f9 81       	ldd	r31, Y+1	; 0x01
    54ec:	01 90       	ld	r0, Z+
    54ee:	f0 81       	ld	r31, Z
    54f0:	e0 2d       	mov	r30, r0
    54f2:	6d e2       	ldi	r22, 0x2D	; 45
    54f4:	09 95       	icall
    54f6:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    54f8:	44 27       	eor	r20, r20
    54fa:	55 27       	eor	r21, r21
    54fc:	ba 01       	movw	r22, r20
    54fe:	4c 19       	sub	r20, r12
    5500:	5d 09       	sbc	r21, r13
    5502:	6e 09       	sbc	r22, r14
    5504:	7f 09       	sbc	r23, r15
    5506:	ce 01       	movw	r24, r28
    5508:	2a e0       	ldi	r18, 0x0A	; 10
    550a:	0e 94 b7 29 	call	0x536e	; 0x536e <_ZN5Print11printNumberEmh>
    550e:	98 01       	movw	r18, r16
    5510:	28 0f       	add	r18, r24
    5512:	39 1f       	adc	r19, r25
    5514:	04 c0       	rjmp	.+8      	; 0x551e <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
    5516:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    5518:	0e 94 b7 29 	call	0x536e	; 0x536e <_ZN5Print11printNumberEmh>
    551c:	9c 01       	movw	r18, r24
  }
}
    551e:	c9 01       	movw	r24, r18
    5520:	df 91       	pop	r29
    5522:	cf 91       	pop	r28
    5524:	1f 91       	pop	r17
    5526:	0f 91       	pop	r16
    5528:	ff 90       	pop	r15
    552a:	ef 90       	pop	r14
    552c:	df 90       	pop	r13
    552e:	cf 90       	pop	r12
    5530:	08 95       	ret

00005532 <_ZN5Print7printlnEii>:
  size_t n = print(b, base);
  n += println();
  return n;
}

size_t Print::println(int num, int base)
    5532:	cf 92       	push	r12
    5534:	df 92       	push	r13
    5536:	ef 92       	push	r14
    5538:	ff 92       	push	r15
    553a:	0f 93       	push	r16
    553c:	1f 93       	push	r17
    553e:	6c 01       	movw	r12, r24
    5540:	7b 01       	movw	r14, r22
    5542:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    5544:	00 27       	eor	r16, r16
    5546:	f7 fc       	sbrc	r15, 7
    5548:	00 95       	com	r16
    554a:	10 2f       	mov	r17, r16
    554c:	b8 01       	movw	r22, r16
    554e:	a7 01       	movw	r20, r14
    5550:	0e 94 59 2a 	call	0x54b2	; 0x54b2 <_ZN5Print5printEli>
    5554:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
    5556:	c6 01       	movw	r24, r12
    5558:	0e 94 67 29 	call	0x52ce	; 0x52ce <_ZN5Print7printlnEv>
    555c:	08 0f       	add	r16, r24
    555e:	19 1f       	adc	r17, r25
  return n;
}
    5560:	c8 01       	movw	r24, r16
    5562:	1f 91       	pop	r17
    5564:	0f 91       	pop	r16
    5566:	ff 90       	pop	r15
    5568:	ef 90       	pop	r14
    556a:	df 90       	pop	r13
    556c:	cf 90       	pop	r12
    556e:	08 95       	ret

00005570 <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    5570:	0e 94 9b 29 	call	0x5336	; 0x5336 <_ZN5Print5writeEPKc>
}
    5574:	08 95       	ret

00005576 <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    5576:	ef 92       	push	r14
    5578:	ff 92       	push	r15
    557a:	0f 93       	push	r16
    557c:	1f 93       	push	r17
    557e:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    5580:	0e 94 9b 29 	call	0x5336	; 0x5336 <_ZN5Print5writeEPKc>
    5584:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    5586:	c7 01       	movw	r24, r14
    5588:	0e 94 67 29 	call	0x52ce	; 0x52ce <_ZN5Print7printlnEv>
    558c:	08 0f       	add	r16, r24
    558e:	19 1f       	adc	r17, r25
  return n;
}
    5590:	c8 01       	movw	r24, r16
    5592:	1f 91       	pop	r17
    5594:	0f 91       	pop	r16
    5596:	ff 90       	pop	r15
    5598:	ef 90       	pop	r14
    559a:	08 95       	ret

0000559c <_ZN5Print5printERK6String>:
    n += write(c);
  }
  return n;
}

size_t Print::print(const String &s)
    559c:	af 92       	push	r10
    559e:	bf 92       	push	r11
    55a0:	cf 92       	push	r12
    55a2:	df 92       	push	r13
    55a4:	ef 92       	push	r14
    55a6:	ff 92       	push	r15
    55a8:	0f 93       	push	r16
    55aa:	1f 93       	push	r17
    55ac:	cf 93       	push	r28
    55ae:	df 93       	push	r29
    55b0:	5c 01       	movw	r10, r24
    55b2:	6b 01       	movw	r12, r22
    55b4:	ee 24       	eor	r14, r14
    55b6:	ff 24       	eor	r15, r15
    55b8:	c0 e0       	ldi	r28, 0x00	; 0
    55ba:	d0 e0       	ldi	r29, 0x00	; 0
    55bc:	10 c0       	rjmp	.+32     	; 0x55de <_ZN5Print5printERK6String+0x42>
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    n += write(s[i]);
    55be:	d5 01       	movw	r26, r10
    55c0:	ed 91       	ld	r30, X+
    55c2:	fc 91       	ld	r31, X
    55c4:	00 81       	ld	r16, Z
    55c6:	11 81       	ldd	r17, Z+1	; 0x01
    55c8:	c6 01       	movw	r24, r12
    55ca:	be 01       	movw	r22, r28
    55cc:	0e 94 91 2b 	call	0x5722	; 0x5722 <_ZNK6StringixEj>
    55d0:	68 2f       	mov	r22, r24
    55d2:	c5 01       	movw	r24, r10
    55d4:	f8 01       	movw	r30, r16
    55d6:	09 95       	icall
    55d8:	e8 0e       	add	r14, r24
    55da:	f9 1e       	adc	r15, r25
}

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    55dc:	21 96       	adiw	r28, 0x01	; 1
    55de:	f6 01       	movw	r30, r12
    55e0:	84 81       	ldd	r24, Z+4	; 0x04
    55e2:	95 81       	ldd	r25, Z+5	; 0x05
    55e4:	c8 17       	cp	r28, r24
    55e6:	d9 07       	cpc	r29, r25
    55e8:	50 f3       	brcs	.-44     	; 0x55be <_ZN5Print5printERK6String+0x22>
    n += write(s[i]);
  }
  return n;
}
    55ea:	c7 01       	movw	r24, r14
    55ec:	df 91       	pop	r29
    55ee:	cf 91       	pop	r28
    55f0:	1f 91       	pop	r17
    55f2:	0f 91       	pop	r16
    55f4:	ff 90       	pop	r15
    55f6:	ef 90       	pop	r14
    55f8:	df 90       	pop	r13
    55fa:	cf 90       	pop	r12
    55fc:	bf 90       	pop	r11
    55fe:	af 90       	pop	r10
    5600:	08 95       	ret

00005602 <attachInterrupt>:

static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    5602:	82 30       	cpi	r24, 0x02	; 2
    5604:	00 f5       	brcc	.+64     	; 0x5646 <attachInterrupt+0x44>
    intFunc[interruptNum] = userFunc;
    5606:	e8 2f       	mov	r30, r24
    5608:	f0 e0       	ldi	r31, 0x00	; 0
    560a:	ee 0f       	add	r30, r30
    560c:	ff 1f       	adc	r31, r31
    560e:	e6 54       	subi	r30, 0x46	; 70
    5610:	f8 4f       	sbci	r31, 0xF8	; 248
    5612:	71 83       	std	Z+1, r23	; 0x01
    5614:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    5616:	88 23       	and	r24, r24
    5618:	19 f0       	breq	.+6      	; 0x5620 <attachInterrupt+0x1e>
    561a:	81 30       	cpi	r24, 0x01	; 1
    561c:	a1 f4       	brne	.+40     	; 0x5646 <attachInterrupt+0x44>
    561e:	08 c0       	rjmp	.+16     	; 0x5630 <attachInterrupt+0x2e>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    5620:	80 91 69 00 	lds	r24, 0x0069
    5624:	8c 7f       	andi	r24, 0xFC	; 252
    5626:	84 2b       	or	r24, r20
    5628:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT0);
    562c:	e8 9a       	sbi	0x1d, 0	; 29
    562e:	08 95       	ret
    #endif
      break;

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    5630:	80 91 69 00 	lds	r24, 0x0069
    5634:	44 0f       	add	r20, r20
    5636:	55 1f       	adc	r21, r21
    5638:	44 0f       	add	r20, r20
    563a:	55 1f       	adc	r21, r21
    563c:	83 7f       	andi	r24, 0xF3	; 243
    563e:	84 2b       	or	r24, r20
    5640:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT1);
    5644:	e9 9a       	sbi	0x1d, 1	; 29
    5646:	08 95       	ret

00005648 <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    5648:	82 30       	cpi	r24, 0x02	; 2
    564a:	80 f4       	brcc	.+32     	; 0x566c <detachInterrupt+0x24>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    564c:	88 23       	and	r24, r24
    564e:	19 f0       	breq	.+6      	; 0x5656 <detachInterrupt+0xe>
    5650:	81 30       	cpi	r24, 0x01	; 1
    5652:	21 f4       	brne	.+8      	; 0x565c <detachInterrupt+0x14>
    5654:	02 c0       	rjmp	.+4      	; 0x565a <detachInterrupt+0x12>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
    5656:	e8 98       	cbi	0x1d, 0	; 29
    5658:	01 c0       	rjmp	.+2      	; 0x565c <detachInterrupt+0x14>
    #endif
      break;

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
    565a:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;
#endif
    }
      
    intFunc[interruptNum] = 0;
    565c:	e8 2f       	mov	r30, r24
    565e:	f0 e0       	ldi	r31, 0x00	; 0
    5660:	ee 0f       	add	r30, r30
    5662:	ff 1f       	adc	r31, r31
    5664:	e6 54       	subi	r30, 0x46	; 70
    5666:	f8 4f       	sbci	r31, 0xF8	; 248
    5668:	11 82       	std	Z+1, r1	; 0x01
    566a:	10 82       	st	Z, r1
    566c:	08 95       	ret

0000566e <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
    566e:	1f 92       	push	r1
    5670:	0f 92       	push	r0
    5672:	0f b6       	in	r0, 0x3f	; 63
    5674:	0f 92       	push	r0
    5676:	11 24       	eor	r1, r1
    5678:	2f 93       	push	r18
    567a:	3f 93       	push	r19
    567c:	4f 93       	push	r20
    567e:	5f 93       	push	r21
    5680:	6f 93       	push	r22
    5682:	7f 93       	push	r23
    5684:	8f 93       	push	r24
    5686:	9f 93       	push	r25
    5688:	af 93       	push	r26
    568a:	bf 93       	push	r27
    568c:	ef 93       	push	r30
    568e:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    5690:	80 91 ba 07 	lds	r24, 0x07BA
    5694:	90 91 bb 07 	lds	r25, 0x07BB
    5698:	89 2b       	or	r24, r25
    569a:	29 f0       	breq	.+10     	; 0x56a6 <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
    569c:	e0 91 ba 07 	lds	r30, 0x07BA
    56a0:	f0 91 bb 07 	lds	r31, 0x07BB
    56a4:	09 95       	icall
}
    56a6:	ff 91       	pop	r31
    56a8:	ef 91       	pop	r30
    56aa:	bf 91       	pop	r27
    56ac:	af 91       	pop	r26
    56ae:	9f 91       	pop	r25
    56b0:	8f 91       	pop	r24
    56b2:	7f 91       	pop	r23
    56b4:	6f 91       	pop	r22
    56b6:	5f 91       	pop	r21
    56b8:	4f 91       	pop	r20
    56ba:	3f 91       	pop	r19
    56bc:	2f 91       	pop	r18
    56be:	0f 90       	pop	r0
    56c0:	0f be       	out	0x3f, r0	; 63
    56c2:	0f 90       	pop	r0
    56c4:	1f 90       	pop	r1
    56c6:	18 95       	reti

000056c8 <__vector_2>:

ISR(INT1_vect) {
    56c8:	1f 92       	push	r1
    56ca:	0f 92       	push	r0
    56cc:	0f b6       	in	r0, 0x3f	; 63
    56ce:	0f 92       	push	r0
    56d0:	11 24       	eor	r1, r1
    56d2:	2f 93       	push	r18
    56d4:	3f 93       	push	r19
    56d6:	4f 93       	push	r20
    56d8:	5f 93       	push	r21
    56da:	6f 93       	push	r22
    56dc:	7f 93       	push	r23
    56de:	8f 93       	push	r24
    56e0:	9f 93       	push	r25
    56e2:	af 93       	push	r26
    56e4:	bf 93       	push	r27
    56e6:	ef 93       	push	r30
    56e8:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    56ea:	80 91 bc 07 	lds	r24, 0x07BC
    56ee:	90 91 bd 07 	lds	r25, 0x07BD
    56f2:	89 2b       	or	r24, r25
    56f4:	29 f0       	breq	.+10     	; 0x5700 <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
    56f6:	e0 91 bc 07 	lds	r30, 0x07BC
    56fa:	f0 91 bd 07 	lds	r31, 0x07BD
    56fe:	09 95       	icall
}
    5700:	ff 91       	pop	r31
    5702:	ef 91       	pop	r30
    5704:	bf 91       	pop	r27
    5706:	af 91       	pop	r26
    5708:	9f 91       	pop	r25
    570a:	8f 91       	pop	r24
    570c:	7f 91       	pop	r23
    570e:	6f 91       	pop	r22
    5710:	5f 91       	pop	r21
    5712:	4f 91       	pop	r20
    5714:	3f 91       	pop	r19
    5716:	2f 91       	pop	r18
    5718:	0f 90       	pop	r0
    571a:	0f be       	out	0x3f, r0	; 63
    571c:	0f 90       	pop	r0
    571e:	1f 90       	pop	r1
    5720:	18 95       	reti

00005722 <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
    5722:	fc 01       	movw	r30, r24
{
	if (index >= len || !buffer) return 0;
    5724:	84 81       	ldd	r24, Z+4	; 0x04
    5726:	95 81       	ldd	r25, Z+5	; 0x05
    5728:	68 17       	cp	r22, r24
    572a:	79 07       	cpc	r23, r25
    572c:	48 f4       	brcc	.+18     	; 0x5740 <_ZNK6StringixEj+0x1e>
    572e:	01 90       	ld	r0, Z+
    5730:	f0 81       	ld	r31, Z
    5732:	e0 2d       	mov	r30, r0
    5734:	30 97       	sbiw	r30, 0x00	; 0
    5736:	21 f0       	breq	.+8      	; 0x5740 <_ZNK6StringixEj+0x1e>
	return buffer[index];
    5738:	e6 0f       	add	r30, r22
    573a:	f7 1f       	adc	r31, r23
    573c:	80 81       	ld	r24, Z
    573e:	08 95       	ret
    5740:	80 e0       	ldi	r24, 0x00	; 0
}
    5742:	08 95       	ret

00005744 <_ZN6String12changeBufferEj>:
		return 1;
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
    5744:	0f 93       	push	r16
    5746:	1f 93       	push	r17
    5748:	cf 93       	push	r28
    574a:	df 93       	push	r29
    574c:	ec 01       	movw	r28, r24
    574e:	8b 01       	movw	r16, r22
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    5750:	6f 5f       	subi	r22, 0xFF	; 255
    5752:	7f 4f       	sbci	r23, 0xFF	; 255
    5754:	88 81       	ld	r24, Y
    5756:	99 81       	ldd	r25, Y+1	; 0x01
    5758:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <realloc>
	if (newbuffer) {
    575c:	00 97       	sbiw	r24, 0x00	; 0
    575e:	11 f4       	brne	.+4      	; 0x5764 <_ZN6String12changeBufferEj+0x20>
    5760:	80 e0       	ldi	r24, 0x00	; 0
    5762:	05 c0       	rjmp	.+10     	; 0x576e <_ZN6String12changeBufferEj+0x2a>
		buffer = newbuffer;
    5764:	99 83       	std	Y+1, r25	; 0x01
    5766:	88 83       	st	Y, r24
		capacity = maxStrLen;
    5768:	1b 83       	std	Y+3, r17	; 0x03
    576a:	0a 83       	std	Y+2, r16	; 0x02
    576c:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    576e:	df 91       	pop	r29
    5770:	cf 91       	pop	r28
    5772:	1f 91       	pop	r17
    5774:	0f 91       	pop	r16
    5776:	08 95       	ret

00005778 <_ZN6String7reserveEj>:
	if (buffer) free(buffer);
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
    5778:	cf 93       	push	r28
    577a:	df 93       	push	r29
    577c:	ec 01       	movw	r28, r24
{
	if (buffer && capacity >= size) return 1;
    577e:	88 81       	ld	r24, Y
    5780:	99 81       	ldd	r25, Y+1	; 0x01
    5782:	89 2b       	or	r24, r25
    5784:	29 f0       	breq	.+10     	; 0x5790 <_ZN6String7reserveEj+0x18>
    5786:	8a 81       	ldd	r24, Y+2	; 0x02
    5788:	9b 81       	ldd	r25, Y+3	; 0x03
    578a:	86 17       	cp	r24, r22
    578c:	97 07       	cpc	r25, r23
    578e:	60 f4       	brcc	.+24     	; 0x57a8 <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    5790:	ce 01       	movw	r24, r28
    5792:	0e 94 a2 2b 	call	0x5744	; 0x5744 <_ZN6String12changeBufferEj>
    5796:	88 23       	and	r24, r24
    5798:	41 f0       	breq	.+16     	; 0x57aa <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    579a:	8c 81       	ldd	r24, Y+4	; 0x04
    579c:	9d 81       	ldd	r25, Y+5	; 0x05
    579e:	89 2b       	or	r24, r25
    57a0:	19 f4       	brne	.+6      	; 0x57a8 <_ZN6String7reserveEj+0x30>
    57a2:	e8 81       	ld	r30, Y
    57a4:	f9 81       	ldd	r31, Y+1	; 0x01
    57a6:	10 82       	st	Z, r1
    57a8:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    57aa:	df 91       	pop	r29
    57ac:	cf 91       	pop	r28
    57ae:	08 95       	ret

000057b0 <_ZN6String6concatEPKcj>:
unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
    57b0:	ef 92       	push	r14
    57b2:	ff 92       	push	r15
    57b4:	0f 93       	push	r16
    57b6:	1f 93       	push	r17
    57b8:	cf 93       	push	r28
    57ba:	df 93       	push	r29
    57bc:	ec 01       	movw	r28, r24
    57be:	7b 01       	movw	r14, r22
{
	unsigned int newlen = len + length;
    57c0:	6c 81       	ldd	r22, Y+4	; 0x04
    57c2:	7d 81       	ldd	r23, Y+5	; 0x05
	if (!cstr) return 0;
    57c4:	e1 14       	cp	r14, r1
    57c6:	f1 04       	cpc	r15, r1
    57c8:	c1 f0       	breq	.+48     	; 0x57fa <_ZN6String6concatEPKcj+0x4a>
	if (length == 0) return 1;
    57ca:	41 15       	cp	r20, r1
    57cc:	51 05       	cpc	r21, r1
    57ce:	99 f0       	breq	.+38     	; 0x57f6 <_ZN6String6concatEPKcj+0x46>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    57d0:	8a 01       	movw	r16, r20
    57d2:	06 0f       	add	r16, r22
    57d4:	17 1f       	adc	r17, r23
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
    57d6:	b8 01       	movw	r22, r16
    57d8:	0e 94 bc 2b 	call	0x5778	; 0x5778 <_ZN6String7reserveEj>
    57dc:	88 23       	and	r24, r24
    57de:	69 f0       	breq	.+26     	; 0x57fa <_ZN6String6concatEPKcj+0x4a>
	strcpy(buffer + len, cstr);
    57e0:	88 81       	ld	r24, Y
    57e2:	99 81       	ldd	r25, Y+1	; 0x01
    57e4:	2c 81       	ldd	r18, Y+4	; 0x04
    57e6:	3d 81       	ldd	r19, Y+5	; 0x05
    57e8:	82 0f       	add	r24, r18
    57ea:	93 1f       	adc	r25, r19
    57ec:	b7 01       	movw	r22, r14
    57ee:	0e 94 16 01 	call	0x22c	; 0x22c <strcpy>
	len = newlen;
    57f2:	1d 83       	std	Y+5, r17	; 0x05
    57f4:	0c 83       	std	Y+4, r16	; 0x04
    57f6:	81 e0       	ldi	r24, 0x01	; 1
    57f8:	01 c0       	rjmp	.+2      	; 0x57fc <_ZN6String6concatEPKcj+0x4c>
	return 1;
    57fa:	80 e0       	ldi	r24, 0x00	; 0
}
    57fc:	df 91       	pop	r29
    57fe:	cf 91       	pop	r28
    5800:	1f 91       	pop	r17
    5802:	0f 91       	pop	r16
    5804:	ff 90       	pop	r15
    5806:	ef 90       	pop	r14
    5808:	08 95       	ret

0000580a <_ZN6String6concatEc>:
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}

unsigned char String::concat(char c)
    580a:	df 93       	push	r29
    580c:	cf 93       	push	r28
    580e:	00 d0       	rcall	.+0      	; 0x5810 <_ZN6String6concatEc+0x6>
    5810:	cd b7       	in	r28, 0x3d	; 61
    5812:	de b7       	in	r29, 0x3e	; 62
{
	char buf[2];
	buf[0] = c;
    5814:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    5816:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
    5818:	be 01       	movw	r22, r28
    581a:	6f 5f       	subi	r22, 0xFF	; 255
    581c:	7f 4f       	sbci	r23, 0xFF	; 255
    581e:	41 e0       	ldi	r20, 0x01	; 1
    5820:	50 e0       	ldi	r21, 0x00	; 0
    5822:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <_ZN6String6concatEPKcj>
}
    5826:	0f 90       	pop	r0
    5828:	0f 90       	pop	r0
    582a:	cf 91       	pop	r28
    582c:	df 91       	pop	r29
    582e:	08 95       	ret

00005830 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
	flags = 0;
}

void String::invalidate(void)
    5830:	cf 93       	push	r28
    5832:	df 93       	push	r29
    5834:	ec 01       	movw	r28, r24
{
	if (buffer) free(buffer);
    5836:	88 81       	ld	r24, Y
    5838:	99 81       	ldd	r25, Y+1	; 0x01
    583a:	00 97       	sbiw	r24, 0x00	; 0
    583c:	11 f0       	breq	.+4      	; 0x5842 <_ZN6String10invalidateEv+0x12>
    583e:	0e 94 f6 25 	call	0x4bec	; 0x4bec <free>
	buffer = NULL;
    5842:	19 82       	std	Y+1, r1	; 0x01
    5844:	18 82       	st	Y, r1
	capacity = len = 0;
    5846:	1d 82       	std	Y+5, r1	; 0x05
    5848:	1c 82       	std	Y+4, r1	; 0x04
    584a:	1b 82       	std	Y+3, r1	; 0x03
    584c:	1a 82       	std	Y+2, r1	; 0x02
}
    584e:	df 91       	pop	r29
    5850:	cf 91       	pop	r28
    5852:	08 95       	ret

00005854 <_ZplRK15StringSumHelperPKc>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
    5854:	0f 93       	push	r16
    5856:	1f 93       	push	r17
    5858:	18 2f       	mov	r17, r24
    585a:	09 2f       	mov	r16, r25
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    585c:	61 15       	cp	r22, r1
    585e:	71 05       	cpc	r23, r1
    5860:	61 f0       	breq	.+24     	; 0x587a <_ZplRK15StringSumHelperPKc+0x26>
    5862:	db 01       	movw	r26, r22
    5864:	0d 90       	ld	r0, X+
    5866:	00 20       	and	r0, r0
    5868:	e9 f7       	brne	.-6      	; 0x5864 <_ZplRK15StringSumHelperPKc+0x10>
    586a:	11 97       	sbiw	r26, 0x01	; 1
    586c:	a6 1b       	sub	r26, r22
    586e:	b7 0b       	sbc	r27, r23
    5870:	ad 01       	movw	r20, r26
    5872:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <_ZN6String6concatEPKcj>
    5876:	88 23       	and	r24, r24
    5878:	21 f4       	brne	.+8      	; 0x5882 <_ZplRK15StringSumHelperPKc+0x2e>
    587a:	81 2f       	mov	r24, r17
    587c:	90 2f       	mov	r25, r16
    587e:	0e 94 18 2c 	call	0x5830	; 0x5830 <_ZN6String10invalidateEv>
	return a;
}
    5882:	81 2f       	mov	r24, r17
    5884:	90 2f       	mov	r25, r16
    5886:	1f 91       	pop	r17
    5888:	0f 91       	pop	r16
    588a:	08 95       	ret

0000588c <_ZplRK15StringSumHelperRK6String>:

/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
    588c:	0f 93       	push	r16
    588e:	1f 93       	push	r17
    5890:	18 2f       	mov	r17, r24
    5892:	09 2f       	mov	r16, r25
    5894:	fb 01       	movw	r30, r22
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    5896:	60 81       	ld	r22, Z
    5898:	71 81       	ldd	r23, Z+1	; 0x01
    589a:	44 81       	ldd	r20, Z+4	; 0x04
    589c:	55 81       	ldd	r21, Z+5	; 0x05
    589e:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <_ZN6String6concatEPKcj>
    58a2:	88 23       	and	r24, r24
    58a4:	21 f4       	brne	.+8      	; 0x58ae <_ZplRK15StringSumHelperRK6String+0x22>
    58a6:	81 2f       	mov	r24, r17
    58a8:	90 2f       	mov	r25, r16
    58aa:	0e 94 18 2c 	call	0x5830	; 0x5830 <_ZN6String10invalidateEv>
	return a;
}
    58ae:	81 2f       	mov	r24, r17
    58b0:	90 2f       	mov	r25, r16
    58b2:	1f 91       	pop	r17
    58b4:	0f 91       	pop	r16
    58b6:	08 95       	ret

000058b8 <_ZN6String4copyEPKcj>:

/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
    58b8:	ef 92       	push	r14
    58ba:	ff 92       	push	r15
    58bc:	0f 93       	push	r16
    58be:	1f 93       	push	r17
    58c0:	cf 93       	push	r28
    58c2:	df 93       	push	r29
    58c4:	ec 01       	movw	r28, r24
    58c6:	7b 01       	movw	r14, r22
    58c8:	8a 01       	movw	r16, r20
{
	if (!reserve(length)) {
    58ca:	ba 01       	movw	r22, r20
    58cc:	0e 94 bc 2b 	call	0x5778	; 0x5778 <_ZN6String7reserveEj>
    58d0:	88 23       	and	r24, r24
    58d2:	21 f4       	brne	.+8      	; 0x58dc <_ZN6String4copyEPKcj+0x24>
		invalidate();
    58d4:	ce 01       	movw	r24, r28
    58d6:	0e 94 18 2c 	call	0x5830	; 0x5830 <_ZN6String10invalidateEv>
    58da:	07 c0       	rjmp	.+14     	; 0x58ea <_ZN6String4copyEPKcj+0x32>
		return *this;
	}
	len = length;
    58dc:	1d 83       	std	Y+5, r17	; 0x05
    58de:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    58e0:	88 81       	ld	r24, Y
    58e2:	99 81       	ldd	r25, Y+1	; 0x01
    58e4:	b7 01       	movw	r22, r14
    58e6:	0e 94 16 01 	call	0x22c	; 0x22c <strcpy>
	return *this;
}
    58ea:	ce 01       	movw	r24, r28
    58ec:	df 91       	pop	r29
    58ee:	cf 91       	pop	r28
    58f0:	1f 91       	pop	r17
    58f2:	0f 91       	pop	r16
    58f4:	ff 90       	pop	r15
    58f6:	ef 90       	pop	r14
    58f8:	08 95       	ret

000058fa <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    58fa:	cf 93       	push	r28
    58fc:	df 93       	push	r29
    58fe:	ec 01       	movw	r28, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    5900:	19 82       	std	Y+1, r1	; 0x01
    5902:	18 82       	st	Y, r1
	capacity = 0;
    5904:	1b 82       	std	Y+3, r1	; 0x03
    5906:	1a 82       	std	Y+2, r1	; 0x02
	len = 0;
    5908:	1d 82       	std	Y+5, r1	; 0x05
    590a:	1c 82       	std	Y+4, r1	; 0x04
	flags = 0;
    590c:	1e 82       	std	Y+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    590e:	61 15       	cp	r22, r1
    5910:	71 05       	cpc	r23, r1
    5912:	51 f0       	breq	.+20     	; 0x5928 <_ZN6StringC1EPKc+0x2e>
    5914:	db 01       	movw	r26, r22
    5916:	0d 90       	ld	r0, X+
    5918:	00 20       	and	r0, r0
    591a:	e9 f7       	brne	.-6      	; 0x5916 <_ZN6StringC1EPKc+0x1c>
    591c:	11 97       	sbiw	r26, 0x01	; 1
    591e:	a6 1b       	sub	r26, r22
    5920:	b7 0b       	sbc	r27, r23
    5922:	ad 01       	movw	r20, r26
    5924:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <_ZN6String4copyEPKcj>
}
    5928:	df 91       	pop	r29
    592a:	cf 91       	pop	r28
    592c:	08 95       	ret

0000592e <_ZN6StringC2EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    592e:	cf 93       	push	r28
    5930:	df 93       	push	r29
    5932:	ec 01       	movw	r28, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    5934:	19 82       	std	Y+1, r1	; 0x01
    5936:	18 82       	st	Y, r1
	capacity = 0;
    5938:	1b 82       	std	Y+3, r1	; 0x03
    593a:	1a 82       	std	Y+2, r1	; 0x02
	len = 0;
    593c:	1d 82       	std	Y+5, r1	; 0x05
    593e:	1c 82       	std	Y+4, r1	; 0x04
	flags = 0;
    5940:	1e 82       	std	Y+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    5942:	61 15       	cp	r22, r1
    5944:	71 05       	cpc	r23, r1
    5946:	51 f0       	breq	.+20     	; 0x595c <_ZN6StringC2EPKc+0x2e>
    5948:	db 01       	movw	r26, r22
    594a:	0d 90       	ld	r0, X+
    594c:	00 20       	and	r0, r0
    594e:	e9 f7       	brne	.-6      	; 0x594a <_ZN6StringC2EPKc+0x1c>
    5950:	11 97       	sbiw	r26, 0x01	; 1
    5952:	a6 1b       	sub	r26, r22
    5954:	b7 0b       	sbc	r27, r23
    5956:	ad 01       	movw	r20, r26
    5958:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <_ZN6String4copyEPKcj>
}
    595c:	df 91       	pop	r29
    595e:	cf 91       	pop	r28
    5960:	08 95       	ret

00005962 <_ZN6StringaSERKS_>:
	rhs.capacity = 0;
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
    5962:	cf 93       	push	r28
    5964:	df 93       	push	r29
    5966:	ec 01       	movw	r28, r24
    5968:	fb 01       	movw	r30, r22
{
	if (this == &rhs) return *this;
    596a:	86 17       	cp	r24, r22
    596c:	97 07       	cpc	r25, r23
    596e:	61 f0       	breq	.+24     	; 0x5988 <_ZN6StringaSERKS_+0x26>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    5970:	60 81       	ld	r22, Z
    5972:	71 81       	ldd	r23, Z+1	; 0x01
    5974:	61 15       	cp	r22, r1
    5976:	71 05       	cpc	r23, r1
    5978:	29 f0       	breq	.+10     	; 0x5984 <_ZN6StringaSERKS_+0x22>
    597a:	44 81       	ldd	r20, Z+4	; 0x04
    597c:	55 81       	ldd	r21, Z+5	; 0x05
    597e:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <_ZN6String4copyEPKcj>
    5982:	02 c0       	rjmp	.+4      	; 0x5988 <_ZN6StringaSERKS_+0x26>
	else invalidate();
    5984:	0e 94 18 2c 	call	0x5830	; 0x5830 <_ZN6String10invalidateEv>
	
	return *this;
}
    5988:	ce 01       	movw	r24, r28
    598a:	df 91       	pop	r29
    598c:	cf 91       	pop	r28
    598e:	08 95       	ret

00005990 <_ZN6StringD1Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    5990:	fc 01       	movw	r30, r24
{
	free(buffer);
    5992:	80 81       	ld	r24, Z
    5994:	91 81       	ldd	r25, Z+1	; 0x01
    5996:	0e 94 f6 25 	call	0x4bec	; 0x4bec <free>
}
    599a:	08 95       	ret

0000599c <_ZN6StringD2Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    599c:	fc 01       	movw	r30, r24
{
	free(buffer);
    599e:	80 81       	ld	r24, Z
    59a0:	91 81       	ldd	r25, Z+1	; 0x01
    59a2:	0e 94 f6 25 	call	0x4bec	; 0x4bec <free>
}
    59a6:	08 95       	ret

000059a8 <main>:
#include <Arduino.h>

int main(void)
    59a8:	cf 93       	push	r28
    59aa:	df 93       	push	r29
{
	init();
    59ac:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    59b0:	0e 94 c1 23 	call	0x4782	; 0x4782 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    59b4:	ca ec       	ldi	r28, 0xCA	; 202
    59b6:	d6 e2       	ldi	r29, 0x26	; 38
#endif
	
	setup();
    
	for (;;) {
		loop();
    59b8:	0e 94 45 24 	call	0x488a	; 0x488a <loop>
		if (serialEventRun) serialEventRun();
    59bc:	20 97       	sbiw	r28, 0x00	; 0
    59be:	e1 f3       	breq	.-8      	; 0x59b8 <main+0x10>
    59c0:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <_Z14serialEventRunv>
    59c4:	f9 cf       	rjmp	.-14     	; 0x59b8 <main+0x10>

000059c6 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    59c6:	1f 92       	push	r1
    59c8:	0f 92       	push	r0
    59ca:	0f b6       	in	r0, 0x3f	; 63
    59cc:	0f 92       	push	r0
    59ce:	11 24       	eor	r1, r1
    59d0:	2f 93       	push	r18
    59d2:	3f 93       	push	r19
    59d4:	8f 93       	push	r24
    59d6:	9f 93       	push	r25
    59d8:	af 93       	push	r26
    59da:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    59dc:	80 91 c2 07 	lds	r24, 0x07C2
    59e0:	90 91 c3 07 	lds	r25, 0x07C3
    59e4:	a0 91 c4 07 	lds	r26, 0x07C4
    59e8:	b0 91 c5 07 	lds	r27, 0x07C5
	unsigned char f = timer0_fract;
    59ec:	30 91 c6 07 	lds	r19, 0x07C6

	m += MILLIS_INC;
    59f0:	01 96       	adiw	r24, 0x01	; 1
    59f2:	a1 1d       	adc	r26, r1
    59f4:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    59f6:	23 2f       	mov	r18, r19
    59f8:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    59fa:	2d 37       	cpi	r18, 0x7D	; 125
    59fc:	20 f0       	brcs	.+8      	; 0x5a06 <__vector_16+0x40>
		f -= FRACT_MAX;
    59fe:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    5a00:	01 96       	adiw	r24, 0x01	; 1
    5a02:	a1 1d       	adc	r26, r1
    5a04:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    5a06:	20 93 c6 07 	sts	0x07C6, r18
	timer0_millis = m;
    5a0a:	80 93 c2 07 	sts	0x07C2, r24
    5a0e:	90 93 c3 07 	sts	0x07C3, r25
    5a12:	a0 93 c4 07 	sts	0x07C4, r26
    5a16:	b0 93 c5 07 	sts	0x07C5, r27
	timer0_overflow_count++;
    5a1a:	80 91 be 07 	lds	r24, 0x07BE
    5a1e:	90 91 bf 07 	lds	r25, 0x07BF
    5a22:	a0 91 c0 07 	lds	r26, 0x07C0
    5a26:	b0 91 c1 07 	lds	r27, 0x07C1
    5a2a:	01 96       	adiw	r24, 0x01	; 1
    5a2c:	a1 1d       	adc	r26, r1
    5a2e:	b1 1d       	adc	r27, r1
    5a30:	80 93 be 07 	sts	0x07BE, r24
    5a34:	90 93 bf 07 	sts	0x07BF, r25
    5a38:	a0 93 c0 07 	sts	0x07C0, r26
    5a3c:	b0 93 c1 07 	sts	0x07C1, r27
}
    5a40:	bf 91       	pop	r27
    5a42:	af 91       	pop	r26
    5a44:	9f 91       	pop	r25
    5a46:	8f 91       	pop	r24
    5a48:	3f 91       	pop	r19
    5a4a:	2f 91       	pop	r18
    5a4c:	0f 90       	pop	r0
    5a4e:	0f be       	out	0x3f, r0	; 63
    5a50:	0f 90       	pop	r0
    5a52:	1f 90       	pop	r1
    5a54:	18 95       	reti

00005a56 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    5a56:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    5a58:	f8 94       	cli
	m = timer0_millis;
    5a5a:	20 91 c2 07 	lds	r18, 0x07C2
    5a5e:	30 91 c3 07 	lds	r19, 0x07C3
    5a62:	40 91 c4 07 	lds	r20, 0x07C4
    5a66:	50 91 c5 07 	lds	r21, 0x07C5
	SREG = oldSREG;
    5a6a:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    5a6c:	b9 01       	movw	r22, r18
    5a6e:	ca 01       	movw	r24, r20
    5a70:	08 95       	ret

00005a72 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    5a72:	9b 01       	movw	r18, r22
    5a74:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    5a76:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    5a78:	f8 94       	cli
	m = timer0_overflow_count;
    5a7a:	80 91 be 07 	lds	r24, 0x07BE
    5a7e:	90 91 bf 07 	lds	r25, 0x07BF
    5a82:	a0 91 c0 07 	lds	r26, 0x07C0
    5a86:	b0 91 c1 07 	lds	r27, 0x07C1
#if defined(TCNT0)
	t = TCNT0;
    5a8a:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    5a8c:	a8 9b       	sbis	0x15, 0	; 21
    5a8e:	05 c0       	rjmp	.+10     	; 0x5a9a <delay+0x28>
    5a90:	6f 3f       	cpi	r22, 0xFF	; 255
    5a92:	19 f0       	breq	.+6      	; 0x5a9a <delay+0x28>
		m++;
    5a94:	01 96       	adiw	r24, 0x01	; 1
    5a96:	a1 1d       	adc	r26, r1
    5a98:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    5a9a:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    5a9c:	ba 2f       	mov	r27, r26
    5a9e:	a9 2f       	mov	r26, r25
    5aa0:	98 2f       	mov	r25, r24
    5aa2:	88 27       	eor	r24, r24
    5aa4:	86 0f       	add	r24, r22
    5aa6:	91 1d       	adc	r25, r1
    5aa8:	a1 1d       	adc	r26, r1
    5aaa:	b1 1d       	adc	r27, r1
    5aac:	62 e0       	ldi	r22, 0x02	; 2
    5aae:	88 0f       	add	r24, r24
    5ab0:	99 1f       	adc	r25, r25
    5ab2:	aa 1f       	adc	r26, r26
    5ab4:	bb 1f       	adc	r27, r27
    5ab6:	6a 95       	dec	r22
    5ab8:	d1 f7       	brne	.-12     	; 0x5aae <delay+0x3c>
    5aba:	bc 01       	movw	r22, r24
    5abc:	2d c0       	rjmp	.+90     	; 0x5b18 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    5abe:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    5ac0:	f8 94       	cli
	m = timer0_overflow_count;
    5ac2:	80 91 be 07 	lds	r24, 0x07BE
    5ac6:	90 91 bf 07 	lds	r25, 0x07BF
    5aca:	a0 91 c0 07 	lds	r26, 0x07C0
    5ace:	b0 91 c1 07 	lds	r27, 0x07C1
#if defined(TCNT0)
	t = TCNT0;
    5ad2:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    5ad4:	a8 9b       	sbis	0x15, 0	; 21
    5ad6:	05 c0       	rjmp	.+10     	; 0x5ae2 <delay+0x70>
    5ad8:	ef 3f       	cpi	r30, 0xFF	; 255
    5ada:	19 f0       	breq	.+6      	; 0x5ae2 <delay+0x70>
		m++;
    5adc:	01 96       	adiw	r24, 0x01	; 1
    5ade:	a1 1d       	adc	r26, r1
    5ae0:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    5ae2:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    5ae4:	ba 2f       	mov	r27, r26
    5ae6:	a9 2f       	mov	r26, r25
    5ae8:	98 2f       	mov	r25, r24
    5aea:	88 27       	eor	r24, r24
    5aec:	8e 0f       	add	r24, r30
    5aee:	91 1d       	adc	r25, r1
    5af0:	a1 1d       	adc	r26, r1
    5af2:	b1 1d       	adc	r27, r1
    5af4:	e2 e0       	ldi	r30, 0x02	; 2
    5af6:	88 0f       	add	r24, r24
    5af8:	99 1f       	adc	r25, r25
    5afa:	aa 1f       	adc	r26, r26
    5afc:	bb 1f       	adc	r27, r27
    5afe:	ea 95       	dec	r30
    5b00:	d1 f7       	brne	.-12     	; 0x5af6 <delay+0x84>
    5b02:	86 1b       	sub	r24, r22
    5b04:	97 0b       	sbc	r25, r23
    5b06:	88 5e       	subi	r24, 0xE8	; 232
    5b08:	93 40       	sbci	r25, 0x03	; 3
    5b0a:	c8 f2       	brcs	.-78     	; 0x5abe <delay+0x4c>
			ms--;
    5b0c:	21 50       	subi	r18, 0x01	; 1
    5b0e:	30 40       	sbci	r19, 0x00	; 0
    5b10:	40 40       	sbci	r20, 0x00	; 0
    5b12:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    5b14:	68 51       	subi	r22, 0x18	; 24
    5b16:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    5b18:	21 15       	cp	r18, r1
    5b1a:	31 05       	cpc	r19, r1
    5b1c:	41 05       	cpc	r20, r1
    5b1e:	51 05       	cpc	r21, r1
    5b20:	71 f6       	brne	.-100    	; 0x5abe <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    5b22:	08 95       	ret

00005b24 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    5b24:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    5b26:	84 b5       	in	r24, 0x24	; 36
    5b28:	82 60       	ori	r24, 0x02	; 2
    5b2a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    5b2c:	84 b5       	in	r24, 0x24	; 36
    5b2e:	81 60       	ori	r24, 0x01	; 1
    5b30:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    5b32:	85 b5       	in	r24, 0x25	; 37
    5b34:	82 60       	ori	r24, 0x02	; 2
    5b36:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    5b38:	85 b5       	in	r24, 0x25	; 37
    5b3a:	81 60       	ori	r24, 0x01	; 1
    5b3c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    5b3e:	ee e6       	ldi	r30, 0x6E	; 110
    5b40:	f0 e0       	ldi	r31, 0x00	; 0
    5b42:	80 81       	ld	r24, Z
    5b44:	81 60       	ori	r24, 0x01	; 1
    5b46:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    5b48:	e1 e8       	ldi	r30, 0x81	; 129
    5b4a:	f0 e0       	ldi	r31, 0x00	; 0
    5b4c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    5b4e:	80 81       	ld	r24, Z
    5b50:	82 60       	ori	r24, 0x02	; 2
    5b52:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    5b54:	80 81       	ld	r24, Z
    5b56:	81 60       	ori	r24, 0x01	; 1
    5b58:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    5b5a:	e0 e8       	ldi	r30, 0x80	; 128
    5b5c:	f0 e0       	ldi	r31, 0x00	; 0
    5b5e:	80 81       	ld	r24, Z
    5b60:	81 60       	ori	r24, 0x01	; 1
    5b62:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    5b64:	e1 eb       	ldi	r30, 0xB1	; 177
    5b66:	f0 e0       	ldi	r31, 0x00	; 0
    5b68:	80 81       	ld	r24, Z
    5b6a:	84 60       	ori	r24, 0x04	; 4
    5b6c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    5b6e:	e0 eb       	ldi	r30, 0xB0	; 176
    5b70:	f0 e0       	ldi	r31, 0x00	; 0
    5b72:	80 81       	ld	r24, Z
    5b74:	81 60       	ori	r24, 0x01	; 1
    5b76:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    5b78:	ea e7       	ldi	r30, 0x7A	; 122
    5b7a:	f0 e0       	ldi	r31, 0x00	; 0
    5b7c:	80 81       	ld	r24, Z
    5b7e:	84 60       	ori	r24, 0x04	; 4
    5b80:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    5b82:	80 81       	ld	r24, Z
    5b84:	82 60       	ori	r24, 0x02	; 2
    5b86:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    5b88:	80 81       	ld	r24, Z
    5b8a:	81 60       	ori	r24, 0x01	; 1
    5b8c:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    5b8e:	80 81       	ld	r24, Z
    5b90:	80 68       	ori	r24, 0x80	; 128
    5b92:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    5b94:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    5b98:	08 95       	ret

00005b9a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    5b9a:	cf 93       	push	r28
    5b9c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    5b9e:	48 2f       	mov	r20, r24
    5ba0:	50 e0       	ldi	r21, 0x00	; 0
    5ba2:	ca 01       	movw	r24, r20
    5ba4:	8c 56       	subi	r24, 0x6C	; 108
    5ba6:	9e 4f       	sbci	r25, 0xFE	; 254
    5ba8:	fc 01       	movw	r30, r24
    5baa:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    5bac:	40 58       	subi	r20, 0x80	; 128
    5bae:	5e 4f       	sbci	r21, 0xFE	; 254
    5bb0:	fa 01       	movw	r30, r20
    5bb2:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    5bb4:	88 23       	and	r24, r24
    5bb6:	69 f1       	breq	.+90     	; 0x5c12 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    5bb8:	90 e0       	ldi	r25, 0x00	; 0
    5bba:	88 0f       	add	r24, r24
    5bbc:	99 1f       	adc	r25, r25
    5bbe:	fc 01       	movw	r30, r24
    5bc0:	ee 59       	subi	r30, 0x9E	; 158
    5bc2:	fe 4f       	sbci	r31, 0xFE	; 254
    5bc4:	a5 91       	lpm	r26, Z+
    5bc6:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    5bc8:	fc 01       	movw	r30, r24
    5bca:	e4 59       	subi	r30, 0x94	; 148
    5bcc:	fe 4f       	sbci	r31, 0xFE	; 254
    5bce:	c5 91       	lpm	r28, Z+
    5bd0:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    5bd2:	66 23       	and	r22, r22
    5bd4:	51 f4       	brne	.+20     	; 0x5bea <pinMode+0x50>
		uint8_t oldSREG = SREG;
    5bd6:	2f b7       	in	r18, 0x3f	; 63
                cli();
    5bd8:	f8 94       	cli
		*reg &= ~bit;
    5bda:	8c 91       	ld	r24, X
    5bdc:	93 2f       	mov	r25, r19
    5bde:	90 95       	com	r25
    5be0:	89 23       	and	r24, r25
    5be2:	8c 93       	st	X, r24
		*out &= ~bit;
    5be4:	88 81       	ld	r24, Y
    5be6:	89 23       	and	r24, r25
    5be8:	0b c0       	rjmp	.+22     	; 0x5c00 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    5bea:	62 30       	cpi	r22, 0x02	; 2
    5bec:	61 f4       	brne	.+24     	; 0x5c06 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    5bee:	2f b7       	in	r18, 0x3f	; 63
                cli();
    5bf0:	f8 94       	cli
		*reg &= ~bit;
    5bf2:	8c 91       	ld	r24, X
    5bf4:	93 2f       	mov	r25, r19
    5bf6:	90 95       	com	r25
    5bf8:	89 23       	and	r24, r25
    5bfa:	8c 93       	st	X, r24
		*out |= bit;
    5bfc:	88 81       	ld	r24, Y
    5bfe:	83 2b       	or	r24, r19
    5c00:	88 83       	st	Y, r24
		SREG = oldSREG;
    5c02:	2f bf       	out	0x3f, r18	; 63
    5c04:	06 c0       	rjmp	.+12     	; 0x5c12 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    5c06:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5c08:	f8 94       	cli
		*reg |= bit;
    5c0a:	8c 91       	ld	r24, X
    5c0c:	83 2b       	or	r24, r19
    5c0e:	8c 93       	st	X, r24
		SREG = oldSREG;
    5c10:	9f bf       	out	0x3f, r25	; 63
	}
}
    5c12:	df 91       	pop	r29
    5c14:	cf 91       	pop	r28
    5c16:	08 95       	ret

00005c18 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    5c18:	48 2f       	mov	r20, r24
    5c1a:	50 e0       	ldi	r21, 0x00	; 0
    5c1c:	ca 01       	movw	r24, r20
    5c1e:	88 55       	subi	r24, 0x58	; 88
    5c20:	9e 4f       	sbci	r25, 0xFE	; 254
    5c22:	fc 01       	movw	r30, r24
    5c24:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    5c26:	ca 01       	movw	r24, r20
    5c28:	8c 56       	subi	r24, 0x6C	; 108
    5c2a:	9e 4f       	sbci	r25, 0xFE	; 254
    5c2c:	fc 01       	movw	r30, r24
    5c2e:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    5c30:	40 58       	subi	r20, 0x80	; 128
    5c32:	5e 4f       	sbci	r21, 0xFE	; 254
    5c34:	fa 01       	movw	r30, r20
    5c36:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    5c38:	33 23       	and	r19, r19
    5c3a:	09 f4       	brne	.+2      	; 0x5c3e <digitalWrite+0x26>
    5c3c:	40 c0       	rjmp	.+128    	; 0x5cbe <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    5c3e:	22 23       	and	r18, r18
    5c40:	51 f1       	breq	.+84     	; 0x5c96 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    5c42:	23 30       	cpi	r18, 0x03	; 3
    5c44:	71 f0       	breq	.+28     	; 0x5c62 <digitalWrite+0x4a>
    5c46:	24 30       	cpi	r18, 0x04	; 4
    5c48:	28 f4       	brcc	.+10     	; 0x5c54 <digitalWrite+0x3c>
    5c4a:	21 30       	cpi	r18, 0x01	; 1
    5c4c:	a1 f0       	breq	.+40     	; 0x5c76 <digitalWrite+0x5e>
    5c4e:	22 30       	cpi	r18, 0x02	; 2
    5c50:	11 f5       	brne	.+68     	; 0x5c96 <digitalWrite+0x7e>
    5c52:	14 c0       	rjmp	.+40     	; 0x5c7c <digitalWrite+0x64>
    5c54:	26 30       	cpi	r18, 0x06	; 6
    5c56:	b1 f0       	breq	.+44     	; 0x5c84 <digitalWrite+0x6c>
    5c58:	27 30       	cpi	r18, 0x07	; 7
    5c5a:	c1 f0       	breq	.+48     	; 0x5c8c <digitalWrite+0x74>
    5c5c:	24 30       	cpi	r18, 0x04	; 4
    5c5e:	d9 f4       	brne	.+54     	; 0x5c96 <digitalWrite+0x7e>
    5c60:	04 c0       	rjmp	.+8      	; 0x5c6a <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    5c62:	80 91 80 00 	lds	r24, 0x0080
    5c66:	8f 77       	andi	r24, 0x7F	; 127
    5c68:	03 c0       	rjmp	.+6      	; 0x5c70 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    5c6a:	80 91 80 00 	lds	r24, 0x0080
    5c6e:	8f 7d       	andi	r24, 0xDF	; 223
    5c70:	80 93 80 00 	sts	0x0080, r24
    5c74:	10 c0       	rjmp	.+32     	; 0x5c96 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    5c76:	84 b5       	in	r24, 0x24	; 36
    5c78:	8f 77       	andi	r24, 0x7F	; 127
    5c7a:	02 c0       	rjmp	.+4      	; 0x5c80 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    5c7c:	84 b5       	in	r24, 0x24	; 36
    5c7e:	8f 7d       	andi	r24, 0xDF	; 223
    5c80:	84 bd       	out	0x24, r24	; 36
    5c82:	09 c0       	rjmp	.+18     	; 0x5c96 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    5c84:	80 91 b0 00 	lds	r24, 0x00B0
    5c88:	8f 77       	andi	r24, 0x7F	; 127
    5c8a:	03 c0       	rjmp	.+6      	; 0x5c92 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    5c8c:	80 91 b0 00 	lds	r24, 0x00B0
    5c90:	8f 7d       	andi	r24, 0xDF	; 223
    5c92:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    5c96:	e3 2f       	mov	r30, r19
    5c98:	f0 e0       	ldi	r31, 0x00	; 0
    5c9a:	ee 0f       	add	r30, r30
    5c9c:	ff 1f       	adc	r31, r31
    5c9e:	e4 59       	subi	r30, 0x94	; 148
    5ca0:	fe 4f       	sbci	r31, 0xFE	; 254
    5ca2:	a5 91       	lpm	r26, Z+
    5ca4:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    5ca6:	2f b7       	in	r18, 0x3f	; 63
	cli();
    5ca8:	f8 94       	cli

	if (val == LOW) {
    5caa:	66 23       	and	r22, r22
    5cac:	21 f4       	brne	.+8      	; 0x5cb6 <digitalWrite+0x9e>
		*out &= ~bit;
    5cae:	8c 91       	ld	r24, X
    5cb0:	90 95       	com	r25
    5cb2:	89 23       	and	r24, r25
    5cb4:	02 c0       	rjmp	.+4      	; 0x5cba <digitalWrite+0xa2>
	} else {
		*out |= bit;
    5cb6:	8c 91       	ld	r24, X
    5cb8:	89 2b       	or	r24, r25
    5cba:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    5cbc:	2f bf       	out	0x3f, r18	; 63
    5cbe:	08 95       	ret

00005cc0 <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    5cc0:	68 2f       	mov	r22, r24
    5cc2:	70 e0       	ldi	r23, 0x00	; 0
    5cc4:	cb 01       	movw	r24, r22
    5cc6:	88 55       	subi	r24, 0x58	; 88
    5cc8:	9e 4f       	sbci	r25, 0xFE	; 254
    5cca:	fc 01       	movw	r30, r24
    5ccc:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    5cce:	cb 01       	movw	r24, r22
    5cd0:	8c 56       	subi	r24, 0x6C	; 108
    5cd2:	9e 4f       	sbci	r25, 0xFE	; 254
    5cd4:	fc 01       	movw	r30, r24
    5cd6:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    5cd8:	60 58       	subi	r22, 0x80	; 128
    5cda:	7e 4f       	sbci	r23, 0xFE	; 254
    5cdc:	fb 01       	movw	r30, r22
    5cde:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
    5ce0:	99 23       	and	r25, r25
    5ce2:	19 f4       	brne	.+6      	; 0x5cea <digitalRead+0x2a>
    5ce4:	20 e0       	ldi	r18, 0x00	; 0
    5ce6:	30 e0       	ldi	r19, 0x00	; 0
    5ce8:	3c c0       	rjmp	.+120    	; 0x5d62 <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    5cea:	22 23       	and	r18, r18
    5cec:	51 f1       	breq	.+84     	; 0x5d42 <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    5cee:	23 30       	cpi	r18, 0x03	; 3
    5cf0:	71 f0       	breq	.+28     	; 0x5d0e <digitalRead+0x4e>
    5cf2:	24 30       	cpi	r18, 0x04	; 4
    5cf4:	28 f4       	brcc	.+10     	; 0x5d00 <digitalRead+0x40>
    5cf6:	21 30       	cpi	r18, 0x01	; 1
    5cf8:	a1 f0       	breq	.+40     	; 0x5d22 <digitalRead+0x62>
    5cfa:	22 30       	cpi	r18, 0x02	; 2
    5cfc:	11 f5       	brne	.+68     	; 0x5d42 <digitalRead+0x82>
    5cfe:	14 c0       	rjmp	.+40     	; 0x5d28 <digitalRead+0x68>
    5d00:	26 30       	cpi	r18, 0x06	; 6
    5d02:	b1 f0       	breq	.+44     	; 0x5d30 <digitalRead+0x70>
    5d04:	27 30       	cpi	r18, 0x07	; 7
    5d06:	c1 f0       	breq	.+48     	; 0x5d38 <digitalRead+0x78>
    5d08:	24 30       	cpi	r18, 0x04	; 4
    5d0a:	d9 f4       	brne	.+54     	; 0x5d42 <digitalRead+0x82>
    5d0c:	04 c0       	rjmp	.+8      	; 0x5d16 <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    5d0e:	80 91 80 00 	lds	r24, 0x0080
    5d12:	8f 77       	andi	r24, 0x7F	; 127
    5d14:	03 c0       	rjmp	.+6      	; 0x5d1c <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    5d16:	80 91 80 00 	lds	r24, 0x0080
    5d1a:	8f 7d       	andi	r24, 0xDF	; 223
    5d1c:	80 93 80 00 	sts	0x0080, r24
    5d20:	10 c0       	rjmp	.+32     	; 0x5d42 <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    5d22:	84 b5       	in	r24, 0x24	; 36
    5d24:	8f 77       	andi	r24, 0x7F	; 127
    5d26:	02 c0       	rjmp	.+4      	; 0x5d2c <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    5d28:	84 b5       	in	r24, 0x24	; 36
    5d2a:	8f 7d       	andi	r24, 0xDF	; 223
    5d2c:	84 bd       	out	0x24, r24	; 36
    5d2e:	09 c0       	rjmp	.+18     	; 0x5d42 <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    5d30:	80 91 b0 00 	lds	r24, 0x00B0
    5d34:	8f 77       	andi	r24, 0x7F	; 127
    5d36:	03 c0       	rjmp	.+6      	; 0x5d3e <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    5d38:	80 91 b0 00 	lds	r24, 0x00B0
    5d3c:	8f 7d       	andi	r24, 0xDF	; 223
    5d3e:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    5d42:	89 2f       	mov	r24, r25
    5d44:	90 e0       	ldi	r25, 0x00	; 0
    5d46:	88 0f       	add	r24, r24
    5d48:	99 1f       	adc	r25, r25
    5d4a:	8a 58       	subi	r24, 0x8A	; 138
    5d4c:	9e 4f       	sbci	r25, 0xFE	; 254
    5d4e:	fc 01       	movw	r30, r24
    5d50:	a5 91       	lpm	r26, Z+
    5d52:	b4 91       	lpm	r27, Z+
    5d54:	8c 91       	ld	r24, X
    5d56:	20 e0       	ldi	r18, 0x00	; 0
    5d58:	30 e0       	ldi	r19, 0x00	; 0
    5d5a:	84 23       	and	r24, r20
    5d5c:	11 f0       	breq	.+4      	; 0x5d62 <digitalRead+0xa2>
    5d5e:	21 e0       	ldi	r18, 0x01	; 1
    5d60:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    5d62:	c9 01       	movw	r24, r18
    5d64:	08 95       	ret

00005d66 <realloc>:
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
    5d66:	6f 92       	push	r6
    5d68:	7f 92       	push	r7
    5d6a:	8f 92       	push	r8
    5d6c:	9f 92       	push	r9
    5d6e:	af 92       	push	r10
    5d70:	bf 92       	push	r11
    5d72:	cf 92       	push	r12
    5d74:	df 92       	push	r13
    5d76:	ef 92       	push	r14
    5d78:	ff 92       	push	r15
    5d7a:	0f 93       	push	r16
    5d7c:	1f 93       	push	r17
    5d7e:	cf 93       	push	r28
    5d80:	df 93       	push	r29
    5d82:	8c 01       	movw	r16, r24
    5d84:	00 97       	sbiw	r24, 0x00	; 0
    5d86:	29 f4       	brne	.+10     	; 0x5d92 <realloc+0x2c>
		return malloc(len);
    5d88:	cb 01       	movw	r24, r22
    5d8a:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <malloc>
    5d8e:	8c 01       	movw	r16, r24
    5d90:	bb c0       	rjmp	.+374    	; 0x5f08 <realloc+0x1a2>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
    5d92:	8e ef       	ldi	r24, 0xFE	; 254
    5d94:	e8 2e       	mov	r14, r24
    5d96:	8f ef       	ldi	r24, 0xFF	; 255
    5d98:	f8 2e       	mov	r15, r24
    5d9a:	e0 0e       	add	r14, r16
    5d9c:	f1 1e       	adc	r15, r17
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
    5d9e:	48 01       	movw	r8, r16
    5da0:	86 0e       	add	r8, r22
    5da2:	97 1e       	adc	r9, r23
	if (cp < cp1)
    5da4:	8e 14       	cp	r8, r14
    5da6:	9f 04       	cpc	r9, r15
    5da8:	08 f4       	brcc	.+2      	; 0x5dac <realloc+0x46>
    5daa:	ac c0       	rjmp	.+344    	; 0x5f04 <realloc+0x19e>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
    5dac:	d7 01       	movw	r26, r14
    5dae:	4d 91       	ld	r20, X+
    5db0:	5c 91       	ld	r21, X
    5db2:	11 97       	sbiw	r26, 0x01	; 1
    5db4:	46 17       	cp	r20, r22
    5db6:	57 07       	cpc	r21, r23
    5db8:	b8 f0       	brcs	.+46     	; 0x5de8 <realloc+0x82>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    5dba:	45 30       	cpi	r20, 0x05	; 5
    5dbc:	51 05       	cpc	r21, r1
    5dbe:	08 f4       	brcc	.+2      	; 0x5dc2 <realloc+0x5c>
    5dc0:	a3 c0       	rjmp	.+326    	; 0x5f08 <realloc+0x1a2>
    5dc2:	ca 01       	movw	r24, r20
    5dc4:	04 97       	sbiw	r24, 0x04	; 4
    5dc6:	86 17       	cp	r24, r22
    5dc8:	97 07       	cpc	r25, r23
    5dca:	08 f4       	brcc	.+2      	; 0x5dce <realloc+0x68>
    5dcc:	9d c0       	rjmp	.+314    	; 0x5f08 <realloc+0x1a2>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
    5dce:	42 50       	subi	r20, 0x02	; 2
    5dd0:	50 40       	sbci	r21, 0x00	; 0
    5dd2:	46 1b       	sub	r20, r22
    5dd4:	57 0b       	sbc	r21, r23
    5dd6:	f4 01       	movw	r30, r8
    5dd8:	41 93       	st	Z+, r20
    5dda:	51 93       	st	Z+, r21
		fp1->sz = len;
    5ddc:	6d 93       	st	X+, r22
    5dde:	7c 93       	st	X, r23
		free(&(fp2->nx));
    5de0:	cf 01       	movw	r24, r30
    5de2:	0e 94 f6 25 	call	0x4bec	; 0x4bec <free>
    5de6:	90 c0       	rjmp	.+288    	; 0x5f08 <realloc+0x1a2>

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
    5de8:	5b 01       	movw	r10, r22
    5dea:	a4 1a       	sub	r10, r20
    5dec:	b5 0a       	sbc	r11, r21
	cp = (char *)ptr + fp1->sz;
    5dee:	38 01       	movw	r6, r16
    5df0:	64 0e       	add	r6, r20
    5df2:	75 1e       	adc	r7, r21
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
    5df4:	a0 91 c9 07 	lds	r26, 0x07C9
    5df8:	b0 91 ca 07 	lds	r27, 0x07CA
    5dfc:	e0 e0       	ldi	r30, 0x00	; 0
    5dfe:	f0 e0       	ldi	r31, 0x00	; 0
    5e00:	cc 24       	eor	r12, r12
    5e02:	dd 24       	eor	r13, r13
    5e04:	47 c0       	rjmp	.+142    	; 0x5e94 <realloc+0x12e>
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
    5e06:	a6 15       	cp	r26, r6
    5e08:	b7 05       	cpc	r27, r7
    5e0a:	a9 f5       	brne	.+106    	; 0x5e76 <realloc+0x110>
    5e0c:	cd 91       	ld	r28, X+
    5e0e:	dc 91       	ld	r29, X
    5e10:	11 97       	sbiw	r26, 0x01	; 1
    5e12:	ce 01       	movw	r24, r28
    5e14:	02 96       	adiw	r24, 0x02	; 2
    5e16:	8a 15       	cp	r24, r10
    5e18:	9b 05       	cpc	r25, r11
    5e1a:	68 f1       	brcs	.+90     	; 0x5e76 <realloc+0x110>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
    5e1c:	ce 01       	movw	r24, r28
    5e1e:	8a 19       	sub	r24, r10
    5e20:	9b 09       	sbc	r25, r11
    5e22:	02 96       	adiw	r24, 0x02	; 2
    5e24:	12 96       	adiw	r26, 0x02	; 2
    5e26:	2c 91       	ld	r18, X
    5e28:	12 97       	sbiw	r26, 0x02	; 2
    5e2a:	13 96       	adiw	r26, 0x03	; 3
    5e2c:	3c 91       	ld	r19, X
    5e2e:	05 97       	sbiw	r24, 0x05	; 5
    5e30:	58 f0       	brcs	.+22     	; 0x5e48 <realloc+0xe2>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
    5e32:	f4 01       	movw	r30, r8
				fp2->nx = fp3->nx;
    5e34:	22 83       	std	Z+2, r18	; 0x02
    5e36:	33 83       	std	Z+3, r19	; 0x03
				fp2->sz = fp3->sz - incr;
    5e38:	ca 19       	sub	r28, r10
    5e3a:	db 09       	sbc	r29, r11
    5e3c:	d1 83       	std	Z+1, r29	; 0x01
    5e3e:	c0 83       	st	Z, r28
				fp1->sz = len;
    5e40:	d7 01       	movw	r26, r14
    5e42:	6d 93       	st	X+, r22
    5e44:	7c 93       	st	X, r23
    5e46:	09 c0       	rjmp	.+18     	; 0x5e5a <realloc+0xf4>
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
    5e48:	4e 5f       	subi	r20, 0xFE	; 254
    5e4a:	5f 4f       	sbci	r21, 0xFF	; 255
    5e4c:	4c 0f       	add	r20, r28
    5e4e:	5d 1f       	adc	r21, r29
    5e50:	f7 01       	movw	r30, r14
    5e52:	51 83       	std	Z+1, r21	; 0x01
    5e54:	40 83       	st	Z, r20
				fp2 = fp3->nx;
    5e56:	c9 01       	movw	r24, r18
    5e58:	fc 01       	movw	r30, r24
			}
			if (ofp3)
    5e5a:	c1 14       	cp	r12, r1
    5e5c:	d1 04       	cpc	r13, r1
    5e5e:	31 f0       	breq	.+12     	; 0x5e6c <realloc+0x106>
				ofp3->nx = fp2;
    5e60:	d6 01       	movw	r26, r12
    5e62:	13 96       	adiw	r26, 0x03	; 3
    5e64:	fc 93       	st	X, r31
    5e66:	ee 93       	st	-X, r30
    5e68:	12 97       	sbiw	r26, 0x02	; 2
    5e6a:	4e c0       	rjmp	.+156    	; 0x5f08 <realloc+0x1a2>
			else
				__flp = fp2;
    5e6c:	f0 93 ca 07 	sts	0x07CA, r31
    5e70:	e0 93 c9 07 	sts	0x07C9, r30
    5e74:	49 c0       	rjmp	.+146    	; 0x5f08 <realloc+0x1a2>
    5e76:	8d 91       	ld	r24, X+
    5e78:	9c 91       	ld	r25, X
    5e7a:	11 97       	sbiw	r26, 0x01	; 1
    5e7c:	e8 17       	cp	r30, r24
    5e7e:	f9 07       	cpc	r31, r25
    5e80:	08 f4       	brcc	.+2      	; 0x5e84 <realloc+0x11e>
    5e82:	fc 01       	movw	r30, r24
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
    5e84:	6d 01       	movw	r12, r26
    5e86:	12 96       	adiw	r26, 0x02	; 2
    5e88:	8c 91       	ld	r24, X
    5e8a:	12 97       	sbiw	r26, 0x02	; 2
    5e8c:	13 96       	adiw	r26, 0x03	; 3
    5e8e:	9c 91       	ld	r25, X
    5e90:	9c 01       	movw	r18, r24
    5e92:	d9 01       	movw	r26, r18
	 */
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
    5e94:	10 97       	sbiw	r26, 0x00	; 0
    5e96:	09 f0       	breq	.+2      	; 0x5e9a <realloc+0x134>
    5e98:	b6 cf       	rjmp	.-148    	; 0x5e06 <realloc+0xa0>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
    5e9a:	80 91 c7 07 	lds	r24, 0x07C7
    5e9e:	90 91 c8 07 	lds	r25, 0x07C8
    5ea2:	86 15       	cp	r24, r6
    5ea4:	97 05       	cpc	r25, r7
    5ea6:	e9 f4       	brne	.+58     	; 0x5ee2 <realloc+0x17c>
    5ea8:	e6 17       	cp	r30, r22
    5eaa:	f7 07       	cpc	r31, r23
    5eac:	d0 f4       	brcc	.+52     	; 0x5ee2 <realloc+0x17c>
		cp1 = __malloc_heap_end;
    5eae:	20 91 d6 03 	lds	r18, 0x03D6
    5eb2:	30 91 d7 03 	lds	r19, 0x03D7
		cp = (char *)ptr + len;
		if (cp1 == 0)
    5eb6:	21 15       	cp	r18, r1
    5eb8:	31 05       	cpc	r19, r1
    5eba:	41 f4       	brne	.+16     	; 0x5ecc <realloc+0x166>
			cp1 = STACK_POINTER() - __malloc_margin;
    5ebc:	2d b7       	in	r18, 0x3d	; 61
    5ebe:	3e b7       	in	r19, 0x3e	; 62
    5ec0:	80 91 d2 03 	lds	r24, 0x03D2
    5ec4:	90 91 d3 03 	lds	r25, 0x03D3
    5ec8:	28 1b       	sub	r18, r24
    5eca:	39 0b       	sbc	r19, r25
		if (cp < cp1) {
    5ecc:	82 16       	cp	r8, r18
    5ece:	93 06       	cpc	r9, r19
    5ed0:	c8 f4       	brcc	.+50     	; 0x5f04 <realloc+0x19e>
			__brkval = cp;
    5ed2:	90 92 c8 07 	sts	0x07C8, r9
    5ed6:	80 92 c7 07 	sts	0x07C7, r8
			fp1->sz = len;
    5eda:	f7 01       	movw	r30, r14
    5edc:	71 83       	std	Z+1, r23	; 0x01
    5ede:	60 83       	st	Z, r22
    5ee0:	13 c0       	rjmp	.+38     	; 0x5f08 <realloc+0x1a2>

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
    5ee2:	cb 01       	movw	r24, r22
    5ee4:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <malloc>
    5ee8:	ec 01       	movw	r28, r24
    5eea:	00 97       	sbiw	r24, 0x00	; 0
    5eec:	59 f0       	breq	.+22     	; 0x5f04 <realloc+0x19e>
		return 0;
	memcpy(memp, ptr, fp1->sz);
    5eee:	d7 01       	movw	r26, r14
    5ef0:	4d 91       	ld	r20, X+
    5ef2:	5c 91       	ld	r21, X
    5ef4:	b8 01       	movw	r22, r16
    5ef6:	0e 94 0d 01 	call	0x21a	; 0x21a <memcpy>
	free(ptr);
    5efa:	c8 01       	movw	r24, r16
    5efc:	0e 94 f6 25 	call	0x4bec	; 0x4bec <free>
    5f00:	8e 01       	movw	r16, r28
    5f02:	02 c0       	rjmp	.+4      	; 0x5f08 <realloc+0x1a2>
	return memp;
    5f04:	00 e0       	ldi	r16, 0x00	; 0
    5f06:	10 e0       	ldi	r17, 0x00	; 0
}
    5f08:	c8 01       	movw	r24, r16
    5f0a:	df 91       	pop	r29
    5f0c:	cf 91       	pop	r28
    5f0e:	1f 91       	pop	r17
    5f10:	0f 91       	pop	r16
    5f12:	ff 90       	pop	r15
    5f14:	ef 90       	pop	r14
    5f16:	df 90       	pop	r13
    5f18:	cf 90       	pop	r12
    5f1a:	bf 90       	pop	r11
    5f1c:	af 90       	pop	r10
    5f1e:	9f 90       	pop	r9
    5f20:	8f 90       	pop	r8
    5f22:	7f 90       	pop	r7
    5f24:	6f 90       	pop	r6
    5f26:	08 95       	ret

00005f28 <__mulsi3>:
    5f28:	62 9f       	mul	r22, r18
    5f2a:	d0 01       	movw	r26, r0
    5f2c:	73 9f       	mul	r23, r19
    5f2e:	f0 01       	movw	r30, r0
    5f30:	82 9f       	mul	r24, r18
    5f32:	e0 0d       	add	r30, r0
    5f34:	f1 1d       	adc	r31, r1
    5f36:	64 9f       	mul	r22, r20
    5f38:	e0 0d       	add	r30, r0
    5f3a:	f1 1d       	adc	r31, r1
    5f3c:	92 9f       	mul	r25, r18
    5f3e:	f0 0d       	add	r31, r0
    5f40:	83 9f       	mul	r24, r19
    5f42:	f0 0d       	add	r31, r0
    5f44:	74 9f       	mul	r23, r20
    5f46:	f0 0d       	add	r31, r0
    5f48:	65 9f       	mul	r22, r21
    5f4a:	f0 0d       	add	r31, r0
    5f4c:	99 27       	eor	r25, r25
    5f4e:	72 9f       	mul	r23, r18
    5f50:	b0 0d       	add	r27, r0
    5f52:	e1 1d       	adc	r30, r1
    5f54:	f9 1f       	adc	r31, r25
    5f56:	63 9f       	mul	r22, r19
    5f58:	b0 0d       	add	r27, r0
    5f5a:	e1 1d       	adc	r30, r1
    5f5c:	f9 1f       	adc	r31, r25
    5f5e:	bd 01       	movw	r22, r26
    5f60:	cf 01       	movw	r24, r30
    5f62:	11 24       	eor	r1, r1
    5f64:	08 95       	ret

00005f66 <__udivmodhi4>:
    5f66:	aa 1b       	sub	r26, r26
    5f68:	bb 1b       	sub	r27, r27
    5f6a:	51 e1       	ldi	r21, 0x11	; 17
    5f6c:	07 c0       	rjmp	.+14     	; 0x5f7c <__udivmodhi4_ep>

00005f6e <__udivmodhi4_loop>:
    5f6e:	aa 1f       	adc	r26, r26
    5f70:	bb 1f       	adc	r27, r27
    5f72:	a6 17       	cp	r26, r22
    5f74:	b7 07       	cpc	r27, r23
    5f76:	10 f0       	brcs	.+4      	; 0x5f7c <__udivmodhi4_ep>
    5f78:	a6 1b       	sub	r26, r22
    5f7a:	b7 0b       	sbc	r27, r23

00005f7c <__udivmodhi4_ep>:
    5f7c:	88 1f       	adc	r24, r24
    5f7e:	99 1f       	adc	r25, r25
    5f80:	5a 95       	dec	r21
    5f82:	a9 f7       	brne	.-22     	; 0x5f6e <__udivmodhi4_loop>
    5f84:	80 95       	com	r24
    5f86:	90 95       	com	r25
    5f88:	bc 01       	movw	r22, r24
    5f8a:	cd 01       	movw	r24, r26
    5f8c:	08 95       	ret

00005f8e <__udivmodsi4>:
    5f8e:	a1 e2       	ldi	r26, 0x21	; 33
    5f90:	1a 2e       	mov	r1, r26
    5f92:	aa 1b       	sub	r26, r26
    5f94:	bb 1b       	sub	r27, r27
    5f96:	fd 01       	movw	r30, r26
    5f98:	0d c0       	rjmp	.+26     	; 0x5fb4 <__udivmodsi4_ep>

00005f9a <__udivmodsi4_loop>:
    5f9a:	aa 1f       	adc	r26, r26
    5f9c:	bb 1f       	adc	r27, r27
    5f9e:	ee 1f       	adc	r30, r30
    5fa0:	ff 1f       	adc	r31, r31
    5fa2:	a2 17       	cp	r26, r18
    5fa4:	b3 07       	cpc	r27, r19
    5fa6:	e4 07       	cpc	r30, r20
    5fa8:	f5 07       	cpc	r31, r21
    5faa:	20 f0       	brcs	.+8      	; 0x5fb4 <__udivmodsi4_ep>
    5fac:	a2 1b       	sub	r26, r18
    5fae:	b3 0b       	sbc	r27, r19
    5fb0:	e4 0b       	sbc	r30, r20
    5fb2:	f5 0b       	sbc	r31, r21

00005fb4 <__udivmodsi4_ep>:
    5fb4:	66 1f       	adc	r22, r22
    5fb6:	77 1f       	adc	r23, r23
    5fb8:	88 1f       	adc	r24, r24
    5fba:	99 1f       	adc	r25, r25
    5fbc:	1a 94       	dec	r1
    5fbe:	69 f7       	brne	.-38     	; 0x5f9a <__udivmodsi4_loop>
    5fc0:	60 95       	com	r22
    5fc2:	70 95       	com	r23
    5fc4:	80 95       	com	r24
    5fc6:	90 95       	com	r25
    5fc8:	9b 01       	movw	r18, r22
    5fca:	ac 01       	movw	r20, r24
    5fcc:	bd 01       	movw	r22, r26
    5fce:	cf 01       	movw	r24, r30
    5fd0:	08 95       	ret

00005fd2 <__divmodsi4>:
    5fd2:	97 fb       	bst	r25, 7
    5fd4:	09 2e       	mov	r0, r25
    5fd6:	05 26       	eor	r0, r21
    5fd8:	0e d0       	rcall	.+28     	; 0x5ff6 <__divmodsi4_neg1>
    5fda:	57 fd       	sbrc	r21, 7
    5fdc:	04 d0       	rcall	.+8      	; 0x5fe6 <__divmodsi4_neg2>
    5fde:	d7 df       	rcall	.-82     	; 0x5f8e <__udivmodsi4>
    5fe0:	0a d0       	rcall	.+20     	; 0x5ff6 <__divmodsi4_neg1>
    5fe2:	00 1c       	adc	r0, r0
    5fe4:	38 f4       	brcc	.+14     	; 0x5ff4 <__divmodsi4_exit>

00005fe6 <__divmodsi4_neg2>:
    5fe6:	50 95       	com	r21
    5fe8:	40 95       	com	r20
    5fea:	30 95       	com	r19
    5fec:	21 95       	neg	r18
    5fee:	3f 4f       	sbci	r19, 0xFF	; 255
    5ff0:	4f 4f       	sbci	r20, 0xFF	; 255
    5ff2:	5f 4f       	sbci	r21, 0xFF	; 255

00005ff4 <__divmodsi4_exit>:
    5ff4:	08 95       	ret

00005ff6 <__divmodsi4_neg1>:
    5ff6:	f6 f7       	brtc	.-4      	; 0x5ff4 <__divmodsi4_exit>
    5ff8:	90 95       	com	r25
    5ffa:	80 95       	com	r24
    5ffc:	70 95       	com	r23
    5ffe:	61 95       	neg	r22
    6000:	7f 4f       	sbci	r23, 0xFF	; 255
    6002:	8f 4f       	sbci	r24, 0xFF	; 255
    6004:	9f 4f       	sbci	r25, 0xFF	; 255
    6006:	08 95       	ret

00006008 <__tablejump2__>:
    6008:	ee 0f       	add	r30, r30
    600a:	ff 1f       	adc	r31, r31

0000600c <__tablejump__>:
    600c:	05 90       	lpm	r0, Z+
    600e:	f4 91       	lpm	r31, Z+
    6010:	e0 2d       	mov	r30, r0
    6012:	09 94       	ijmp

00006014 <_exit>:
    6014:	f8 94       	cli

00006016 <__stop_program>:
    6016:	ff cf       	rjmp	.-2      	; 0x6016 <__stop_program>
