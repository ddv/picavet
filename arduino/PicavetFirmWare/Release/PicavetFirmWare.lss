
PicavetFirmWare.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000dc  00800100  000067fa  0000688e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000067fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000409  008001dc  008001dc  0000696a  2**0
                  ALLOC
  3 .stab         00015f0c  00000000  00000000  0000696c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0002f544  00000000  00000000  0001c878  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 42 02 	jmp	0x484	; 0x484 <__ctors_end>
       4:	0c 94 81 2e 	jmp	0x5d02	; 0x5d02 <__vector_1>
       8:	0c 94 ae 2e 	jmp	0x5d5c	; 0x5d5c <__vector_2>
       c:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__bad_interrupt>
      10:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__bad_interrupt>
      14:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__bad_interrupt>
      18:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__bad_interrupt>
      1c:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__bad_interrupt>
      20:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__bad_interrupt>
      24:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__bad_interrupt>
      28:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__bad_interrupt>
      2c:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__bad_interrupt>
      30:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__bad_interrupt>
      34:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__bad_interrupt>
      38:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__bad_interrupt>
      3c:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__bad_interrupt>
      40:	0c 94 2b 30 	jmp	0x6056	; 0x6056 <__vector_16>
      44:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__bad_interrupt>
      48:	0c 94 ea 29 	jmp	0x53d4	; 0x53d4 <__vector_18>
      4c:	0c 94 31 2a 	jmp	0x5462	; 0x5462 <__vector_19>
      50:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__bad_interrupt>
      54:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__bad_interrupt>
      58:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__bad_interrupt>
      5c:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__bad_interrupt>
      60:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__bad_interrupt>
      64:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__bad_interrupt>

00000068 <_ZZN22Adafruit_CC3000_Client12fastrprintlnEPcE3__c>:
      68:	0d 0a 00                                            ...

0000006b <_ZZN22Adafruit_CC3000_Client12fastrprintlnEPK19__FlashStringHelperE3__c>:
      6b:	0d 0a 00                                            ...

0000006e <_ZZN15Adafruit_CC30008printHexEPKhmE3__c_0>:
      6e:	30 00                                               0.

00000070 <_ZZN15Adafruit_CC30008printHexEPKhmE3__c>:
      70:	30 78 00                                            0x.

00000073 <_ZZ24displayConnectionDetailsE3__c_4>:
      73:	0a 44 4e 53 73 65 72 76 3a 20 00                    .DNSserv: .

0000007e <_ZZ24displayConnectionDetailsE3__c_3>:
      7e:	0a 44 48 43 50 73 72 76 3a 20 00                    .DHCPsrv: .

00000089 <_ZZ24displayConnectionDetailsE3__c_2>:
      89:	0a 47 61 74 65 77 61 79 3a 20 00                    .Gateway: .

00000094 <_ZZ24displayConnectionDetailsE3__c_1>:
      94:	0a 4e 65 74 6d 61 73 6b 3a 20 00                    .Netmask: .

0000009f <_ZZ24displayConnectionDetailsE3__c_0>:
      9f:	0a 49 50 20 41 64 64 72 3a 20 00                    .IP Addr: .

000000aa <_ZZ24displayConnectionDetailsE3__c>:
      aa:	55 6e 61 62 6c 65 20 74 6f 20 72 65 74 72 69 65     Unable to retrie
      ba:	76 65 20 74 68 65 20 49 50 20 41 64 64 72 65 73     ve the IP Addres
      ca:	73 21 0d 0a 00                                      s!...

000000cf <_ZZ4loopE3__c_21>:
      cf:	43 6c 69 65 6e 74 20 64 69 73 63 6f 6e 6e 65 63     Client disconnec
      df:	74 65 64 00                                         ted.

000000e3 <_ZZ4loopE3__c_20>:
	...

000000e4 <_ZZ4loopE3__c_19>:
      e4:	48 54 54 50 2f 31 2e 31 20 34 30 35 20 4d 65 74     HTTP/1.1 405 Met
      f4:	68 6f 64 20 4e 6f 74 20 41 6c 6c 6f 77 65 64 00     hod Not Allowed.

00000104 <_ZZ4loopE3__c_18>:
     104:	5d 00                                               ].

00000106 <_ZZ4loopE3__c_17>:
     106:	3e 3e 3e 43 4d 44 20 56 41 4c 3d 5b 00              >>>CMD VAL=[.

00000113 <_ZZ4loopE3__c_16>:
     113:	3e 3e 3e 50 41 54 48 3a 00                          >>>PATH:.

0000011c <_ZZ4loopE3__c_15>:
     11c:	3c 2f 68 74 6d 6c 3e 00                             </html>.

00000124 <_ZZ4loopE3__c_14>:
     124:	59 6f 75 20 61 63 63 65 73 73 65 64 20 70 61 74     You accessed pat
     134:	68 3a 20 00                                         h: .

00000138 <_ZZ4loopE3__c_13>:
     138:	3c 2f 66 6f 72 6d 3e 00                             </form>.

00000140 <_ZZ4loopE3__c_12>:
     140:	3c 69 6e 70 75 74 20 74 79 70 65 3d 27 73 75 62     <input type='sub
     150:	6d 69 74 27 20 76 61 6c 75 65 3d 27 53 65 6e 64     mit' value='Send
     160:	20 64 61 74 61 2e 2e 2e 27 3e 00                     data...'>.

0000016b <_ZZ4loopE3__c_11>:
     16b:	3c 69 6e 70 75 74 20 74 79 70 65 3d 74 65 78 74     <input type=text
     17b:	20 6e 61 6d 65 3d 27 74 69 6d 65 27 20 76 61 6c      name='time' val
     18b:	75 65 3d 27 31 30 30 30 27 3e 00                    ue='1000'>.

00000196 <_ZZ4loopE3__c_10>:
     196:	3c 69 6e 70 75 74 20 74 79 70 65 3d 74 65 78 74     <input type=text
     1a6:	20 6e 61 6d 65 3d 27 63 6d 64 27 20 76 61 6c 75      name='cmd' valu
     1b6:	65 3d 27 6d 6f 76 65 6c 65 66 74 27 3e 00           e='moveleft'>.

000001c4 <_ZZ4loopE3__c_9>:
     1c4:	3c 66 6f 72 6d 3e 00                                <form>.

000001cb <_ZZ4loopE3__c_8>:
     1cb:	3c 68 31 3e 54 45 53 54 3c 2f 68 31 3e 00           <h1>TEST</h1>.

000001d9 <_ZZ4loopE3__c_7>:
     1d9:	3c 68 74 6d 6c 3e 00                                <html>.

000001e0 <_ZZ4loopE3__c_6>:
     1e0:	3c 21 44 4f 43 54 59 50 45 20 48 54 4d 4c 3e 00     <!DOCTYPE HTML>.

000001f0 <_ZZ4loopE3__c_5>:
     1f0:	43 6f 6e 6e 65 63 74 69 6f 6e 3a 20 63 6c 6f 73     Connection: clos
     200:	65 00                                               e.

00000202 <_ZZ4loopE3__c_4>:
     202:	43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74 65     Content-Type: te
     212:	78 74 2f 68 74 6d 6c 00                             xt/html.

0000021a <_ZZ4loopE3__c_3>:
     21a:	48 54 54 50 2f 31 2e 31 20 32 30 30 20 4f 4b 00     HTTP/1.1 200 OK.

0000022a <_ZZ4loopE3__c_2>:
     22a:	50 61 74 68 3a 20 00                                Path: .

00000231 <_ZZ4loopE3__c_1>:
     231:	41 63 74 69 6f 6e 3a 20 00                          Action: .

0000023a <_ZZ4loopE3__c_0>:
     23a:	50 72 6f 63 65 73 73 69 6e 67 20 72 65 71 75 65     Processing reque
     24a:	73 74 00                                            st.

0000024d <_ZZ4loopE3__c>:
     24d:	43 6c 69 65 6e 74 20 63 6f 6e 6e 65 63 74 65 64     Client connected
     25d:	2e 00                                               ..

0000025f <_ZZ5setupE3__c_11>:
     25f:	4c 69 73 74 65 6e 69 6e 67 20 66 6f 72 20 63 6f     Listening for co
     26f:	6e 6e 65 63 74 69 6f 6e 73 2e 2e 2e 00              nnections....

0000027c <_ZZ5setupE3__c_10>:
     27c:	74 68 65 72 65 20 69 73 6e 27 74 20 61 6e 20 6f     there isn't an o
     28c:	62 76 69 6f 75 73 20 6d 6f 6d 65 6e 74 20 74 6f     bvious moment to
     29c:	20 64 69 73 63 6f 6e 6e 65 63 74 20 77 69 74 68      disconnect with
     2ac:	20 61 20 73 65 72 76 65 72 2e 0d 0a 00               a server....

000002b9 <_ZZ5setupE3__c_9>:
     2b9:	74 69 6d 65 6f 75 74 20 70 65 72 69 6f 64 20 70     timeout period p
     2c9:	61 73 73 65 73 2e 20 20 54 68 69 73 20 69 73 20     asses.  This is 
     2d9:	6e 6f 72 6d 61 6c 20 62 65 68 61 76 69 6f 75 72     normal behaviour
     2e9:	20 73 69 6e 63 65 00                                 since.

000002f0 <_ZZ5setupE3__c_8>:
     2f0:	41 50 20 6d 61 79 20 72 65 66 75 73 65 20 63 6f     AP may refuse co
     300:	6e 6e 65 63 74 69 6f 6e 20 72 65 71 75 65 73 74     nnection request
     310:	73 20 66 72 6f 6d 20 74 68 65 20 43 43 33 30 30     s from the CC300
     320:	30 20 75 6e 74 69 6c 20 61 00                       0 until a.

0000032a <_ZZ5setupE3__c_7>:
     32a:	73 69 6e 63 65 20 74 68 65 20 2e 64 69 73 63 6f     since the .disco
     33a:	6e 6e 65 63 74 28 29 20 66 75 6e 63 74 69 6f 6e     nnect() function
     34a:	20 69 73 20 6e 65 76 65 72 20 63 61 6c 6c 65 64      is never called
     35a:	2c 20 73 6f 20 74 68 65 00                          , so the.

00000363 <_ZZ5setupE3__c_6>:
     363:	0d 0a 4e 4f 54 45 3a 20 54 68 69 73 20 73 6b 65     ..NOTE: This ske
     373:	74 63 68 20 6d 61 79 20 63 61 75 73 65 20 70 72     tch may cause pr
     383:	6f 62 6c 65 6d 73 20 77 69 74 68 20 6f 74 68 65     oblems with othe
     393:	72 20 73 6b 65 74 63 68 65 73 00                    r sketches.

0000039e <_ZZ5setupE3__c_5>:
     39e:	52 65 71 75 65 73 74 20 44 48 43 50 00              Request DHCP.

000003ab <_ZZ5setupE3__c_4>:
     3ab:	43 6f 6e 6e 65 63 74 65 64 21 00                    Connected!.

000003b6 <_ZZ5setupE3__c_3>:
     3b6:	46 61 69 6c 65 64 21 00                             Failed!.

000003be <_ZZ5setupE3__c_2>:
     3be:	0a 41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 63     .Attempting to c
     3ce:	6f 6e 6e 65 63 74 20 74 6f 20 00                    onnect to .

000003d9 <_ZZ5setupE3__c_1>:
     3d9:	43 6f 75 6c 64 6e 27 74 20 62 65 67 69 6e 28 29     Couldn't begin()
     3e9:	21 20 43 68 65 63 6b 20 79 6f 75 72 20 77 69 72     ! Check your wir
     3f9:	69 6e 67 3f 00                                      ing?.

000003fe <_ZZ5setupE3__c_0>:
     3fe:	0a 49 6e 69 74 69 61 6c 69 7a 69 6e 67 2e 2e 2e     .Initializing...
	...

0000040f <_ZZ5setupE3__c>:
     40f:	48 65 6c 6c 6f 2c 20 43 43 33 30 30 30 21 0a 00     Hello, CC3000!..

0000041f <port_to_mode_PGM>:
     41f:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000429 <port_to_output_PGM>:
     429:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000433 <port_to_input_PGM>:
     433:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000043d <digital_pin_to_port_PGM>:
     43d:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     44d:	03 03 03 03                                         ....

00000451 <digital_pin_to_bit_mask_PGM>:
     451:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     461:	04 08 10 20                                         ... 

00000465 <digital_pin_to_timer_PGM>:
     465:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     475:	00 00 00 00 00                                      .....

0000047a <__ctors_start>:
     47a:	ee 15       	cp	r30, r14
     47c:	d5 1f       	adc	r29, r21
     47e:	8d 25       	eor	r24, r13
     480:	97 2b       	or	r25, r23
     482:	f3 2b       	or	r31, r19

00000484 <__ctors_end>:
     484:	11 24       	eor	r1, r1
     486:	1f be       	out	0x3f, r1	; 63
     488:	cf ef       	ldi	r28, 0xFF	; 255
     48a:	d8 e0       	ldi	r29, 0x08	; 8
     48c:	de bf       	out	0x3e, r29	; 62
     48e:	cd bf       	out	0x3d, r28	; 61

00000490 <__do_copy_data>:
     490:	11 e0       	ldi	r17, 0x01	; 1
     492:	a0 e0       	ldi	r26, 0x00	; 0
     494:	b1 e0       	ldi	r27, 0x01	; 1
     496:	ea ef       	ldi	r30, 0xFA	; 250
     498:	f7 e6       	ldi	r31, 0x67	; 103
     49a:	02 c0       	rjmp	.+4      	; 0x4a0 <.do_copy_data_start>

0000049c <.do_copy_data_loop>:
     49c:	05 90       	lpm	r0, Z+
     49e:	0d 92       	st	X+, r0

000004a0 <.do_copy_data_start>:
     4a0:	ac 3d       	cpi	r26, 0xDC	; 220
     4a2:	b1 07       	cpc	r27, r17
     4a4:	d9 f7       	brne	.-10     	; 0x49c <.do_copy_data_loop>

000004a6 <__do_clear_bss>:
     4a6:	15 e0       	ldi	r17, 0x05	; 5
     4a8:	ac ed       	ldi	r26, 0xDC	; 220
     4aa:	b1 e0       	ldi	r27, 0x01	; 1
     4ac:	01 c0       	rjmp	.+2      	; 0x4b0 <.do_clear_bss_start>

000004ae <.do_clear_bss_loop>:
     4ae:	1d 92       	st	X+, r1

000004b0 <.do_clear_bss_start>:
     4b0:	a5 3e       	cpi	r26, 0xE5	; 229
     4b2:	b1 07       	cpc	r27, r17
     4b4:	e1 f7       	brne	.-8      	; 0x4ae <.do_clear_bss_loop>

000004b6 <__do_global_ctors>:
     4b6:	14 e0       	ldi	r17, 0x04	; 4
     4b8:	c4 e8       	ldi	r28, 0x84	; 132
     4ba:	d4 e0       	ldi	r29, 0x04	; 4
     4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <.do_global_ctors_start>

000004be <.do_global_ctors_loop>:
     4be:	22 97       	sbiw	r28, 0x02	; 2
     4c0:	fe 01       	movw	r30, r28
     4c2:	0e 94 4e 33 	call	0x669c	; 0x669c <__tablejump__>

000004c6 <.do_global_ctors_start>:
     4c6:	ca 37       	cpi	r28, 0x7A	; 122
     4c8:	d1 07       	cpc	r29, r17
     4ca:	c9 f7       	brne	.-14     	; 0x4be <.do_global_ctors_loop>
     4cc:	0e 94 1c 30 	call	0x6038	; 0x6038 <main>
     4d0:	0c 94 fb 33 	jmp	0x67f6	; 0x67f6 <_exit>

000004d4 <__bad_interrupt>:
     4d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000004d8 <_ZN8SPIClass11setBitOrderEh>:
  SPCR &= ~_BV(SPE);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  if(bitOrder == LSBFIRST) {
     4d8:	88 23       	and	r24, r24
     4da:	19 f4       	brne	.+6      	; 0x4e2 <_ZN8SPIClass11setBitOrderEh+0xa>
    SPCR |= _BV(DORD);
     4dc:	8c b5       	in	r24, 0x2c	; 44
     4de:	80 62       	ori	r24, 0x20	; 32
     4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <_ZN8SPIClass11setBitOrderEh+0xe>
  } else {
    SPCR &= ~(_BV(DORD));
     4e2:	8c b5       	in	r24, 0x2c	; 44
     4e4:	8f 7d       	andi	r24, 0xDF	; 223
     4e6:	8c bd       	out	0x2c, r24	; 44
     4e8:	08 95       	ret

000004ea <_ZN8SPIClass11setDataModeEh>:
  }
}

void SPIClass::setDataMode(uint8_t mode)
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
     4ea:	9c b5       	in	r25, 0x2c	; 44
     4ec:	93 7f       	andi	r25, 0xF3	; 243
     4ee:	98 2b       	or	r25, r24
     4f0:	9c bd       	out	0x2c, r25	; 44
}
     4f2:	08 95       	ret

000004f4 <_ZN8SPIClass15setClockDividerEh>:

void SPIClass::setClockDivider(uint8_t rate)
{
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
     4f4:	2c b5       	in	r18, 0x2c	; 44
     4f6:	38 2f       	mov	r19, r24
     4f8:	33 70       	andi	r19, 0x03	; 3
     4fa:	2c 7f       	andi	r18, 0xFC	; 252
     4fc:	32 2b       	or	r19, r18
     4fe:	3c bd       	out	0x2c, r19	; 44
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
     500:	2d b5       	in	r18, 0x2d	; 45
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	95 95       	asr	r25
     506:	87 95       	ror	r24
     508:	95 95       	asr	r25
     50a:	87 95       	ror	r24
     50c:	81 70       	andi	r24, 0x01	; 1
     50e:	2e 7f       	andi	r18, 0xFE	; 254
     510:	82 2b       	or	r24, r18
     512:	8d bd       	out	0x2d, r24	; 45
}
     514:	08 95       	ret

00000516 <_ZN8SPIClass5beginEv>:
SPIClass SPI;

void SPIClass::begin() {

  // Set SS to high so a connected chip will be "deselected" by default
  digitalWrite(SS, HIGH);
     516:	8a e0       	ldi	r24, 0x0A	; 10
     518:	61 e0       	ldi	r22, 0x01	; 1
     51a:	0e 94 54 31 	call	0x62a8	; 0x62a8 <digitalWrite>

  // When the SS pin is set as OUTPUT, it can be used as
  // a general purpose output port (it doesn't influence
  // SPI operations).
  pinMode(SS, OUTPUT);
     51e:	8a e0       	ldi	r24, 0x0A	; 10
     520:	61 e0       	ldi	r22, 0x01	; 1
     522:	0e 94 15 31 	call	0x622a	; 0x622a <pinMode>

  // Warning: if the SS pin ever becomes a LOW INPUT then SPI
  // automatically switches to Slave, so the data direction of
  // the SS pin MUST be kept as OUTPUT.
  SPCR |= _BV(MSTR);
     526:	8c b5       	in	r24, 0x2c	; 44
     528:	80 61       	ori	r24, 0x10	; 16
     52a:	8c bd       	out	0x2c, r24	; 44
  SPCR |= _BV(SPE);
     52c:	8c b5       	in	r24, 0x2c	; 44
     52e:	80 64       	ori	r24, 0x40	; 64
     530:	8c bd       	out	0x2c, r24	; 44
  // MISO pin automatically overrides to INPUT.
  // By doing this AFTER enabling SPI, we avoid accidentally
  // clocking in a single bit since the lines go directly
  // from "input" to SPI control.  
  // http://code.google.com/p/arduino/issues/detail?id=888
  pinMode(SCK, OUTPUT);
     532:	8d e0       	ldi	r24, 0x0D	; 13
     534:	61 e0       	ldi	r22, 0x01	; 1
     536:	0e 94 15 31 	call	0x622a	; 0x622a <pinMode>
  pinMode(MOSI, OUTPUT);
     53a:	8b e0       	ldi	r24, 0x0B	; 11
     53c:	61 e0       	ldi	r22, 0x01	; 1
     53e:	0e 94 15 31 	call	0x622a	; 0x622a <pinMode>
}
     542:	08 95       	ret

00000544 <UINT32_TO_STREAM_f>:
//!  @brief                This function is used for copying 32 bit to stream
//!						   while converting to little endian format.
//
//*****************************************************************************

UINT8* UINT32_TO_STREAM_f (UINT8 *p, UINT32 u32)
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	fc 01       	movw	r30, r24
{
	*(p)++ = (UINT8)(u32);
     54a:	dc 01       	movw	r26, r24
     54c:	4d 93       	st	X+, r20
     54e:	9d 01       	movw	r18, r26
	*(p)++ = (UINT8)((u32) >> 8);
     550:	bb 27       	eor	r27, r27
     552:	a7 2f       	mov	r26, r23
     554:	96 2f       	mov	r25, r22
     556:	85 2f       	mov	r24, r21
     558:	81 83       	std	Z+1, r24	; 0x01
     55a:	f9 01       	movw	r30, r18
     55c:	31 96       	adiw	r30, 0x01	; 1
	*(p)++ = (UINT8)((u32) >> 16);
     55e:	cb 01       	movw	r24, r22
     560:	aa 27       	eor	r26, r26
     562:	bb 27       	eor	r27, r27
     564:	e9 01       	movw	r28, r18
     566:	89 83       	std	Y+1, r24	; 0x01
	*(p)++ = (UINT8)((u32) >> 24);
     568:	47 2f       	mov	r20, r23
     56a:	55 27       	eor	r21, r21
     56c:	66 27       	eor	r22, r22
     56e:	77 27       	eor	r23, r23
     570:	41 83       	std	Z+1, r20	; 0x01
     572:	32 96       	adiw	r30, 0x02	; 2
	return p;
}
     574:	cf 01       	movw	r24, r30
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	08 95       	ret

0000057c <UINT16_TO_STREAM_f>:
//!  @brief               This function is used for copying 16 bit to stream
//!                       while converting to little endian format.
//
//*****************************************************************************

UINT8* UINT16_TO_STREAM_f (UINT8 *p, UINT16 u16)
     57c:	dc 01       	movw	r26, r24
{
	*(p)++ = (UINT8)(u16);
     57e:	fc 01       	movw	r30, r24
     580:	61 93       	st	Z+, r22
	*(p)++ = (UINT8)((u16) >> 8);
     582:	11 96       	adiw	r26, 0x01	; 1
     584:	7c 93       	st	X, r23
     586:	31 96       	adiw	r30, 0x01	; 1
	return p;
}
     588:	cf 01       	movw	r24, r30
     58a:	08 95       	ret

0000058c <STREAM_TO_UINT16_f>:
//!  @brief               This function is used for copying received stream to
//!                       16 bit in little endian format.
//
//*****************************************************************************

UINT16 STREAM_TO_UINT16_f(CHAR* cp, UINT16 offset)
     58c:	fb 01       	movw	r30, r22
{
  // Adafruit CC3k Host Driver Difference
  // Explicit cast to UINT8 pointer is required or decoding parameters breaks on Arduino.
  // Noted 12-12-2014 by tdicola
  UINT8 *p = (UINT8 *)cp;
     58e:	e8 0f       	add	r30, r24
     590:	f9 1f       	adc	r31, r25
     592:	31 81       	ldd	r19, Z+1	; 0x01
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	80 81       	ld	r24, Z
     598:	28 0f       	add	r18, r24
     59a:	31 1d       	adc	r19, r1
  DEBUGPRINT_F("\n\r");
  */

  return (UINT16)((UINT16)((UINT16)
          (*(p + offset + 1)) << 8) + (UINT16)(*(p + offset)));
}
     59c:	c9 01       	movw	r24, r18
     59e:	08 95       	ret

000005a0 <STREAM_TO_UINT32_f>:
//!  @brief               This function is used for copying received stream to
//!                       32 bit in little endian format.
//
//*****************************************************************************

UINT32 STREAM_TO_UINT32_f(CHAR* cp, UINT16 offset)
     5a0:	fb 01       	movw	r30, r22
{
  // Adafruit CC3k Host Driver Difference
  // Explicit cast to UINT8 pointer is required or decoding parameters breaks on Arduino.
  // Noted 12-12-2014 by tdicola
  UINT8 *p = (UINT8 *)cp;
     5a2:	e8 0f       	add	r30, r24
     5a4:	f9 1f       	adc	r31, r25
     5a6:	23 81       	ldd	r18, Z+3	; 0x03
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	40 e0       	ldi	r20, 0x00	; 0
     5ac:	50 e0       	ldi	r21, 0x00	; 0
     5ae:	52 2f       	mov	r21, r18
     5b0:	44 27       	eor	r20, r20
     5b2:	33 27       	eor	r19, r19
     5b4:	22 27       	eor	r18, r18
     5b6:	82 81       	ldd	r24, Z+2	; 0x02
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	a0 e0       	ldi	r26, 0x00	; 0
     5bc:	b0 e0       	ldi	r27, 0x00	; 0
     5be:	dc 01       	movw	r26, r24
     5c0:	99 27       	eor	r25, r25
     5c2:	88 27       	eor	r24, r24
     5c4:	28 0f       	add	r18, r24
     5c6:	39 1f       	adc	r19, r25
     5c8:	4a 1f       	adc	r20, r26
     5ca:	5b 1f       	adc	r21, r27
     5cc:	80 81       	ld	r24, Z
     5ce:	28 0f       	add	r18, r24
     5d0:	31 1d       	adc	r19, r1
     5d2:	41 1d       	adc	r20, r1
     5d4:	51 1d       	adc	r21, r1
     5d6:	81 81       	ldd	r24, Z+1	; 0x01
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	a0 e0       	ldi	r26, 0x00	; 0
     5dc:	b0 e0       	ldi	r27, 0x00	; 0
     5de:	ba 2f       	mov	r27, r26
     5e0:	a9 2f       	mov	r26, r25
     5e2:	98 2f       	mov	r25, r24
     5e4:	88 27       	eor	r24, r24
     5e6:	28 0f       	add	r18, r24
     5e8:	39 1f       	adc	r19, r25
     5ea:	4a 1f       	adc	r20, r26
     5ec:	5b 1f       	adc	r21, r27

  return (UINT32)((UINT32)((UINT32)
	(*(p + offset + 3)) << 24) + (UINT32)((UINT32)
	(*(p + offset + 2)) << 16) + (UINT32)((UINT32)
	(*(p + offset + 1)) << 8) + (UINT32)(*(p + offset)));
}
     5ee:	b9 01       	movw	r22, r18
     5f0:	ca 01       	movw	r24, r20
     5f2:	08 95       	ret

000005f4 <_Z10getFreeRamv>:
int getFreeRam(void) {
  char top;
  return &top - reinterpret_cast<char*>(sbrk(0));
}
#else // AVR 
int getFreeRam(void)
     5f4:	df 93       	push	r29
     5f6:	cf 93       	push	r28
     5f8:	00 d0       	rcall	.+0      	; 0x5fa <_Z10getFreeRamv+0x6>
     5fa:	cd b7       	in	r28, 0x3d	; 61
     5fc:	de b7       	in	r29, 0x3e	; 62
{
  extern int  __bss_end;
  extern int  *__brkval;
  int free_memory;
  if((int)__brkval == 0) {
     5fe:	20 91 df 05 	lds	r18, 0x05DF
     602:	30 91 e0 05 	lds	r19, 0x05E0
     606:	ce 01       	movw	r24, r28
     608:	01 96       	adiw	r24, 0x01	; 1
     60a:	21 15       	cp	r18, r1
     60c:	31 05       	cpc	r19, r1
     60e:	19 f4       	brne	.+6      	; 0x616 <_Z10getFreeRamv+0x22>
    free_memory = ((int)&free_memory) - ((int)&__bss_end);
     610:	85 5e       	subi	r24, 0xE5	; 229
     612:	95 40       	sbci	r25, 0x05	; 5
     614:	02 c0       	rjmp	.+4      	; 0x61a <_Z10getFreeRamv+0x26>
  }
  else {
    free_memory = ((int)&free_memory) - ((int)__brkval);
     616:	82 1b       	sub	r24, r18
     618:	93 0b       	sbc	r25, r19
     61a:	9a 83       	std	Y+2, r25	; 0x02
     61c:	89 83       	std	Y+1, r24	; 0x01
  }

  return free_memory;
} 
     61e:	89 81       	ldd	r24, Y+1	; 0x01
     620:	9a 81       	ldd	r25, Y+2	; 0x02
     622:	0f 90       	pop	r0
     624:	0f 90       	pop	r0
     626:	cf 91       	pop	r28
     628:	df 91       	pop	r29
     62a:	08 95       	ret

0000062c <set_socket_active_status>:
//!
//!  @brief          Check if the socket ID and status are valid and set 
//!                  accordingly  the global socket status
//
//*****************************************************************************
void set_socket_active_status(INT32 Sd, INT32 Status)
     62c:	af 92       	push	r10
     62e:	bf 92       	push	r11
     630:	cf 92       	push	r12
     632:	df 92       	push	r13
     634:	ef 92       	push	r14
     636:	ff 92       	push	r15
     638:	0f 93       	push	r16
     63a:	1f 93       	push	r17
     63c:	59 01       	movw	r10, r18
     63e:	6a 01       	movw	r12, r20
{
	if(M_IS_VALID_SD(Sd) && M_IS_VALID_STATUS(Status))
     640:	68 30       	cpi	r22, 0x08	; 8
     642:	71 05       	cpc	r23, r1
     644:	81 05       	cpc	r24, r1
     646:	91 05       	cpc	r25, r1
     648:	a0 f5       	brcc	.+104    	; 0x6b2 <set_socket_active_status+0x86>
     64a:	22 e0       	ldi	r18, 0x02	; 2
     64c:	a2 16       	cp	r10, r18
     64e:	b1 04       	cpc	r11, r1
     650:	c1 04       	cpc	r12, r1
     652:	d1 04       	cpc	r13, r1
     654:	70 f5       	brcc	.+92     	; 0x6b2 <set_socket_active_status+0x86>
	{
		socket_active_status &= ~(1 << Sd);      /* clean socket's mask */
		socket_active_status |= (Status << Sd); /* set new socket's mask */
     656:	21 e0       	ldi	r18, 0x01	; 1
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	06 2e       	mov	r0, r22
     65c:	02 c0       	rjmp	.+4      	; 0x662 <set_socket_active_status+0x36>
     65e:	22 0f       	add	r18, r18
     660:	33 1f       	adc	r19, r19
     662:	0a 94       	dec	r0
     664:	e2 f7       	brpl	.-8      	; 0x65e <set_socket_active_status+0x32>
     666:	20 95       	com	r18
     668:	30 95       	com	r19
     66a:	44 27       	eor	r20, r20
     66c:	37 fd       	sbrc	r19, 7
     66e:	40 95       	com	r20
     670:	54 2f       	mov	r21, r20
     672:	e0 90 3a 01 	lds	r14, 0x013A
     676:	f0 90 3b 01 	lds	r15, 0x013B
     67a:	00 91 3c 01 	lds	r16, 0x013C
     67e:	10 91 3d 01 	lds	r17, 0x013D
     682:	2e 21       	and	r18, r14
     684:	3f 21       	and	r19, r15
     686:	40 23       	and	r20, r16
     688:	51 23       	and	r21, r17
     68a:	06 2e       	mov	r0, r22
     68c:	04 c0       	rjmp	.+8      	; 0x696 <set_socket_active_status+0x6a>
     68e:	aa 0c       	add	r10, r10
     690:	bb 1c       	adc	r11, r11
     692:	cc 1c       	adc	r12, r12
     694:	dd 1c       	adc	r13, r13
     696:	0a 94       	dec	r0
     698:	d2 f7       	brpl	.-12     	; 0x68e <set_socket_active_status+0x62>
     69a:	2a 29       	or	r18, r10
     69c:	3b 29       	or	r19, r11
     69e:	4c 29       	or	r20, r12
     6a0:	5d 29       	or	r21, r13
     6a2:	20 93 3a 01 	sts	0x013A, r18
     6a6:	30 93 3b 01 	sts	0x013B, r19
     6aa:	40 93 3c 01 	sts	0x013C, r20
     6ae:	50 93 3d 01 	sts	0x013D, r21
	}
}
     6b2:	1f 91       	pop	r17
     6b4:	0f 91       	pop	r16
     6b6:	ff 90       	pop	r15
     6b8:	ef 90       	pop	r14
     6ba:	df 90       	pop	r13
     6bc:	cf 90       	pop	r12
     6be:	bf 90       	pop	r11
     6c0:	af 90       	pop	r10
     6c2:	08 95       	ret

000006c4 <get_socket_active_status>:
//!
//!  @brief  Retrieve socket status
//
//*****************************************************************************

INT32 get_socket_active_status(INT32 Sd)
     6c4:	9b 01       	movw	r18, r22
     6c6:	ac 01       	movw	r20, r24
{
	if(M_IS_VALID_SD(Sd))
     6c8:	68 30       	cpi	r22, 0x08	; 8
     6ca:	71 05       	cpc	r23, r1
     6cc:	81 05       	cpc	r24, r1
     6ce:	91 05       	cpc	r25, r1
     6d0:	e8 f4       	brcc	.+58     	; 0x70c <get_socket_active_status+0x48>
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <get_socket_active_status+0x18>
     6d8:	88 0f       	add	r24, r24
     6da:	99 1f       	adc	r25, r25
     6dc:	2a 95       	dec	r18
     6de:	e2 f7       	brpl	.-8      	; 0x6d8 <get_socket_active_status+0x14>
     6e0:	9c 01       	movw	r18, r24
     6e2:	44 27       	eor	r20, r20
     6e4:	37 fd       	sbrc	r19, 7
     6e6:	40 95       	com	r20
     6e8:	54 2f       	mov	r21, r20
     6ea:	80 91 3a 01 	lds	r24, 0x013A
     6ee:	90 91 3b 01 	lds	r25, 0x013B
     6f2:	a0 91 3c 01 	lds	r26, 0x013C
     6f6:	b0 91 3d 01 	lds	r27, 0x013D
     6fa:	28 23       	and	r18, r24
     6fc:	39 23       	and	r19, r25
     6fe:	4a 23       	and	r20, r26
     700:	5b 23       	and	r21, r27
     702:	21 15       	cp	r18, r1
     704:	31 05       	cpc	r19, r1
     706:	41 05       	cpc	r20, r1
     708:	51 05       	cpc	r21, r1
     70a:	21 f0       	breq	.+8      	; 0x714 <get_socket_active_status+0x50>
     70c:	21 e0       	ldi	r18, 0x01	; 1
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	40 e0       	ldi	r20, 0x00	; 0
     712:	50 e0       	ldi	r21, 0x00	; 0
	{
		return (socket_active_status & (1 << Sd)) ? SOCKET_STATUS_INACTIVE : SOCKET_STATUS_ACTIVE;
	}
	return SOCKET_STATUS_INACTIVE;
}
     714:	b9 01       	movw	r22, r18
     716:	ca 01       	movw	r24, r20
     718:	08 95       	ret

0000071a <hci_unsol_event_handler>:
//!                      0 if event is not supported
//!
//!  @brief              Handle unsolicited events
//
//*****************************************************************************
INT32 hci_unsol_event_handler(CHAR *event_hdr)
     71a:	8f 92       	push	r8
     71c:	9f 92       	push	r9
     71e:	af 92       	push	r10
     720:	bf 92       	push	r11
     722:	cf 92       	push	r12
     724:	df 92       	push	r13
     726:	ef 92       	push	r14
     728:	ff 92       	push	r15
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	df 93       	push	r29
     730:	cf 93       	push	r28
     732:	cd b7       	in	r28, 0x3d	; 61
     734:	de b7       	in	r29, 0x3e	; 62
     736:	a9 97       	sbiw	r28, 0x29	; 41
     738:	0f b6       	in	r0, 0x3f	; 63
     73a:	f8 94       	cli
     73c:	de bf       	out	0x3e, r29	; 62
     73e:	0f be       	out	0x3f, r0	; 63
     740:	cd bf       	out	0x3d, r28	; 61
     742:	8c 01       	movw	r16, r24
	CHAR * data = NULL;
	INT32 event_type;
	UINT32 NumberOfReleasedPackets;
	UINT32 NumberOfSentPackets;

	STREAM_TO_UINT16(event_hdr, HCI_EVENT_OPCODE_OFFSET,event_type);
     744:	61 e0       	ldi	r22, 0x01	; 1
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	0e 94 c6 02 	call	0x58c	; 0x58c <STREAM_TO_UINT16_f>
     74c:	9c 01       	movw	r18, r24
     74e:	6c 01       	movw	r12, r24
     750:	ee 24       	eor	r14, r14
     752:	ff 24       	eor	r15, r15
	// Extra debug output.
	// Noted 12-12-2014 by tdicola
	DEBUGPRINT_F("\tHCI_UNSOL_EVT: ");
	DEBUGPRINT_HEX16(event_type);

	if (event_type & HCI_EVNT_UNSOL_BASE)
     754:	d6 fe       	sbrs	r13, 6
     756:	6d c0       	rjmp	.+218    	; 0x832 <hci_unsol_event_handler+0x118>
	{
		switch(event_type)
     758:	81 e4       	ldi	r24, 0x41	; 65
     75a:	20 30       	cpi	r18, 0x00	; 0
     75c:	38 07       	cpc	r19, r24
     75e:	09 f0       	breq	.+2      	; 0x762 <hci_unsol_event_handler+0x48>
     760:	68 c0       	rjmp	.+208    	; 0x832 <hci_unsol_event_handler+0x118>
	INT32 temp, value;
	UINT16 i;
	UINT16  pusNumberOfHandles=0;
	CHAR *pReadPayload;

	STREAM_TO_UINT16((CHAR *)pEvent,HCI_EVENT_HEADER_SIZE,pusNumberOfHandles);
     762:	c8 01       	movw	r24, r16
     764:	65 e0       	ldi	r22, 0x05	; 5
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	0e 94 c6 02 	call	0x58c	; 0x58c <STREAM_TO_UINT16_f>
     76c:	4c 01       	movw	r8, r24
	pReadPayload = ((CHAR *)pEvent +
		HCI_EVENT_HEADER_SIZE + sizeof(pusNumberOfHandles));	
     76e:	97 e0       	ldi	r25, 0x07	; 7
     770:	a9 2e       	mov	r10, r25
     772:	b1 2c       	mov	r11, r1
     774:	a0 0e       	add	r10, r16
     776:	b1 1e       	adc	r11, r17
     778:	cc 24       	eor	r12, r12
     77a:	dd 24       	eor	r13, r13
     77c:	ee 24       	eor	r14, r14
     77e:	ff 24       	eor	r15, r15
     780:	87 01       	movw	r16, r14
     782:	12 c0       	rjmp	.+36     	; 0x7a8 <hci_unsol_event_handler+0x8e>
	temp = 0;

	for(i = 0; i < pusNumberOfHandles ; i++)
	{
		STREAM_TO_UINT16(pReadPayload, FLOW_CONTROL_EVENT_FREE_BUFFS_OFFSET, value);
     784:	c5 01       	movw	r24, r10
     786:	62 e0       	ldi	r22, 0x02	; 2
     788:	70 e0       	ldi	r23, 0x00	; 0
     78a:	0e 94 c6 02 	call	0x58c	; 0x58c <STREAM_TO_UINT16_f>
		temp += value;
     78e:	a0 e0       	ldi	r26, 0x00	; 0
     790:	b0 e0       	ldi	r27, 0x00	; 0
     792:	e8 0e       	add	r14, r24
     794:	f9 1e       	adc	r15, r25
     796:	0a 1f       	adc	r16, r26
     798:	1b 1f       	adc	r17, r27
		pReadPayload += FLOW_CONTROL_EVENT_SIZE;  
     79a:	a4 e0       	ldi	r26, 0x04	; 4
     79c:	b0 e0       	ldi	r27, 0x00	; 0
     79e:	aa 0e       	add	r10, r26
     7a0:	bb 1e       	adc	r11, r27
	STREAM_TO_UINT16((CHAR *)pEvent,HCI_EVENT_HEADER_SIZE,pusNumberOfHandles);
	pReadPayload = ((CHAR *)pEvent +
		HCI_EVENT_HEADER_SIZE + sizeof(pusNumberOfHandles));	
	temp = 0;

	for(i = 0; i < pusNumberOfHandles ; i++)
     7a2:	08 94       	sec
     7a4:	c1 1c       	adc	r12, r1
     7a6:	d1 1c       	adc	r13, r1
     7a8:	c8 14       	cp	r12, r8
     7aa:	d9 04       	cpc	r13, r9
     7ac:	58 f3       	brcs	.-42     	; 0x784 <hci_unsol_event_handler+0x6a>
		STREAM_TO_UINT16(pReadPayload, FLOW_CONTROL_EVENT_FREE_BUFFS_OFFSET, value);
		temp += value;
		pReadPayload += FLOW_CONTROL_EVENT_SIZE;  
	}

	tSLInformation.usNumberOfFreeBuffers += temp;
     7ae:	80 91 fa 01 	lds	r24, 0x01FA
     7b2:	90 91 fb 01 	lds	r25, 0x01FB
     7b6:	8e 0d       	add	r24, r14
     7b8:	9f 1d       	adc	r25, r15
     7ba:	90 93 fb 01 	sts	0x01FB, r25
     7be:	80 93 fa 01 	sts	0x01FA, r24
	tSLInformation.NumberOfReleasedPackets += temp;
     7c2:	80 91 06 02 	lds	r24, 0x0206
     7c6:	90 91 07 02 	lds	r25, 0x0207
     7ca:	a0 91 08 02 	lds	r26, 0x0208
     7ce:	b0 91 09 02 	lds	r27, 0x0209
     7d2:	e8 0e       	add	r14, r24
     7d4:	f9 1e       	adc	r15, r25
     7d6:	0a 1f       	adc	r16, r26
     7d8:	1b 1f       	adc	r17, r27
     7da:	e0 92 06 02 	sts	0x0206, r14
     7de:	f0 92 07 02 	sts	0x0207, r15
     7e2:	00 93 08 02 	sts	0x0208, r16
     7e6:	10 93 09 02 	sts	0x0209, r17

		case HCI_EVNT_DATA_UNSOL_FREE_BUFF:
			{
				hci_event_unsol_flowcontrol_handler(event_hdr);

				NumberOfReleasedPackets = tSLInformation.NumberOfReleasedPackets;
     7ea:	20 91 06 02 	lds	r18, 0x0206
     7ee:	30 91 07 02 	lds	r19, 0x0207
     7f2:	40 91 08 02 	lds	r20, 0x0208
     7f6:	50 91 09 02 	lds	r21, 0x0209
				NumberOfSentPackets = tSLInformation.NumberOfSentPackets;
     7fa:	80 91 02 02 	lds	r24, 0x0202
     7fe:	90 91 03 02 	lds	r25, 0x0203
     802:	a0 91 04 02 	lds	r26, 0x0204
     806:	b0 91 05 02 	lds	r27, 0x0205

				if (NumberOfReleasedPackets == NumberOfSentPackets)
     80a:	28 17       	cp	r18, r24
     80c:	39 07       	cpc	r19, r25
     80e:	4a 07       	cpc	r20, r26
     810:	5b 07       	cpc	r21, r27
     812:	09 f0       	breq	.+2      	; 0x816 <hci_unsol_event_handler+0xfc>
     814:	ad c0       	rjmp	.+346    	; 0x970 <__stack+0x71>
				{
					if (tSLInformation.InformHostOnTxComplete)
     816:	80 91 0a 02 	lds	r24, 0x020A
     81a:	88 23       	and	r24, r24
     81c:	09 f4       	brne	.+2      	; 0x820 <hci_unsol_event_handler+0x106>
     81e:	a8 c0       	rjmp	.+336    	; 0x970 <__stack+0x71>
					{
						tSLInformation.sWlanCB(HCI_EVENT_CC3000_CAN_SHUT_DOWN, NULL, 0);
     820:	e0 91 ec 01 	lds	r30, 0x01EC
     824:	f0 91 ed 01 	lds	r31, 0x01ED
     828:	69 e9       	ldi	r22, 0x99	; 153
     82a:	70 e0       	ldi	r23, 0x00	; 0
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	4a c0       	rjmp	.+148    	; 0x8c6 <hci_unsol_event_handler+0x1ac>

			}
		}
	}

	if(event_type & HCI_EVNT_WLAN_UNSOL_BASE)
     832:	c6 01       	movw	r24, r12
     834:	80 70       	andi	r24, 0x00	; 0
     836:	90 78       	andi	r25, 0x80	; 128
     838:	89 2b       	or	r24, r25
     83a:	09 f4       	brne	.+2      	; 0x83e <hci_unsol_event_handler+0x124>
     83c:	f2 c0       	rjmp	.+484    	; 0xa22 <__stack+0x123>
	{           
		switch(event_type)
     83e:	b0 e8       	ldi	r27, 0x80	; 128
     840:	20 34       	cpi	r18, 0x40	; 64
     842:	3b 07       	cpc	r19, r27
     844:	09 f4       	brne	.+2      	; 0x848 <hci_unsol_event_handler+0x12e>
     846:	99 c0       	rjmp	.+306    	; 0x97a <__stack+0x7b>
     848:	e0 e8       	ldi	r30, 0x80	; 128
     84a:	21 34       	cpi	r18, 0x41	; 65
     84c:	3e 07       	cpc	r19, r30
     84e:	a0 f4       	brcc	.+40     	; 0x878 <hci_unsol_event_handler+0x15e>
     850:	f0 e8       	ldi	r31, 0x80	; 128
     852:	24 30       	cpi	r18, 0x04	; 4
     854:	3f 07       	cpc	r19, r31
     856:	51 f1       	breq	.+84     	; 0x8ac <hci_unsol_event_handler+0x192>
     858:	80 e8       	ldi	r24, 0x80	; 128
     85a:	25 30       	cpi	r18, 0x05	; 5
     85c:	38 07       	cpc	r19, r24
     85e:	38 f4       	brcc	.+14     	; 0x86e <hci_unsol_event_handler+0x154>
     860:	21 50       	subi	r18, 0x01	; 1
     862:	30 48       	sbci	r19, 0x80	; 128
     864:	22 30       	cpi	r18, 0x02	; 2
     866:	31 05       	cpc	r19, r1
     868:	08 f0       	brcs	.+2      	; 0x86c <hci_unsol_event_handler+0x152>
     86a:	7e c1       	rjmp	.+764    	; 0xb68 <__stack+0x269>
     86c:	1f c0       	rjmp	.+62     	; 0x8ac <hci_unsol_event_handler+0x192>
     86e:	20 51       	subi	r18, 0x10	; 16
     870:	30 48       	sbci	r19, 0x80	; 128
     872:	09 f0       	breq	.+2      	; 0x876 <hci_unsol_event_handler+0x15c>
     874:	79 c1       	rjmp	.+754    	; 0xb68 <__stack+0x269>
     876:	2b c0       	rjmp	.+86     	; 0x8ce <hci_unsol_event_handler+0x1b4>
     878:	a4 e8       	ldi	r26, 0x84	; 132
     87a:	20 30       	cpi	r18, 0x00	; 0
     87c:	3a 07       	cpc	r19, r26
     87e:	b1 f0       	breq	.+44     	; 0x8ac <hci_unsol_event_handler+0x192>
     880:	b4 e8       	ldi	r27, 0x84	; 132
     882:	21 30       	cpi	r18, 0x01	; 1
     884:	3b 07       	cpc	r19, r27
     886:	48 f4       	brcc	.+18     	; 0x89a <hci_unsol_event_handler+0x180>
     888:	e0 e8       	ldi	r30, 0x80	; 128
     88a:	20 38       	cpi	r18, 0x80	; 128
     88c:	3e 07       	cpc	r19, r30
     88e:	71 f0       	breq	.+28     	; 0x8ac <hci_unsol_event_handler+0x192>
     890:	20 50       	subi	r18, 0x00	; 0
     892:	32 48       	sbci	r19, 0x82	; 130
     894:	09 f0       	breq	.+2      	; 0x898 <hci_unsol_event_handler+0x17e>
     896:	68 c1       	rjmp	.+720    	; 0xb68 <__stack+0x269>
     898:	09 c0       	rjmp	.+18     	; 0x8ac <hci_unsol_event_handler+0x192>
     89a:	88 e8       	ldi	r24, 0x88	; 136
     89c:	20 30       	cpi	r18, 0x00	; 0
     89e:	38 07       	cpc	r19, r24
     8a0:	09 f4       	brne	.+2      	; 0x8a4 <hci_unsol_event_handler+0x18a>
     8a2:	ad c0       	rjmp	.+346    	; 0x9fe <__stack+0xff>
     8a4:	20 50       	subi	r18, 0x00	; 0
     8a6:	39 48       	sbci	r19, 0x89	; 137
     8a8:	09 f0       	breq	.+2      	; 0x8ac <hci_unsol_event_handler+0x192>
     8aa:	5e c1       	rjmp	.+700    	; 0xb68 <__stack+0x269>
		case HCI_EVNT_WLAN_UNSOL_CONNECT:
		case HCI_EVNT_WLAN_UNSOL_DISCONNECT:
		case HCI_EVNT_WLAN_UNSOL_INIT:
		case HCI_EVNT_WLAN_ASYNC_SIMPLE_CONFIG_DONE:

			if( tSLInformation.sWlanCB )
     8ac:	80 91 ec 01 	lds	r24, 0x01EC
     8b0:	90 91 ed 01 	lds	r25, 0x01ED
     8b4:	89 2b       	or	r24, r25
     8b6:	09 f4       	brne	.+2      	; 0x8ba <hci_unsol_event_handler+0x1a0>
     8b8:	5b c0       	rjmp	.+182    	; 0x970 <__stack+0x71>
			{
				tSLInformation.sWlanCB(event_type, 0, 0);
     8ba:	e0 91 ec 01 	lds	r30, 0x01EC
     8be:	f0 91 ed 01 	lds	r31, 0x01ED
     8c2:	c7 01       	movw	r24, r14
     8c4:	b6 01       	movw	r22, r12
     8c6:	40 e0       	ldi	r20, 0x00	; 0
     8c8:	50 e0       	ldi	r21, 0x00	; 0
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	50 c0       	rjmp	.+160    	; 0x96e <__stack+0x6f>
		case HCI_EVNT_WLAN_UNSOL_DHCP:
			{
				UINT8	params[NETAPP_IPCONFIG_MAC_OFFSET + 1];	// extra byte is for the status
				UINT8 *recParams = params;

				data = (CHAR*)(event_hdr) + HCI_EVENT_HEADER_SIZE;
     8ce:	f8 01       	movw	r30, r16
     8d0:	35 96       	adiw	r30, 0x05	; 5

				//Read IP address
				STREAM_TO_STREAM(data,recParams,NETAPP_IPCONFIG_IP_LENGTH);
     8d2:	d8 01       	movw	r26, r16
     8d4:	15 96       	adiw	r26, 0x05	; 5
     8d6:	8c 91       	ld	r24, X
     8d8:	15 97       	sbiw	r26, 0x05	; 5
     8da:	8d 8b       	std	Y+21, r24	; 0x15
     8dc:	81 81       	ldd	r24, Z+1	; 0x01
     8de:	8e 8b       	std	Y+22, r24	; 0x16
     8e0:	82 81       	ldd	r24, Z+2	; 0x02
     8e2:	8f 8b       	std	Y+23, r24	; 0x17
     8e4:	83 81       	ldd	r24, Z+3	; 0x03
     8e6:	88 8f       	std	Y+24, r24	; 0x18
				data += 4;
     8e8:	f8 01       	movw	r30, r16
     8ea:	39 96       	adiw	r30, 0x09	; 9
				localIP[1] = *(recParams-NETAPP_IPCONFIG_IP_LENGTH + 1);
				localIP[2] = *(recParams-NETAPP_IPCONFIG_IP_LENGTH + 2);
				localIP[3] = *(recParams-NETAPP_IPCONFIG_IP_LENGTH + 3);
#endif
				//Read subnet
				STREAM_TO_STREAM(data,recParams,NETAPP_IPCONFIG_IP_LENGTH);
     8ec:	19 96       	adiw	r26, 0x09	; 9
     8ee:	8c 91       	ld	r24, X
     8f0:	19 97       	sbiw	r26, 0x09	; 9
     8f2:	89 8f       	std	Y+25, r24	; 0x19
     8f4:	81 81       	ldd	r24, Z+1	; 0x01
     8f6:	8a 8f       	std	Y+26, r24	; 0x1a
     8f8:	82 81       	ldd	r24, Z+2	; 0x02
     8fa:	8b 8f       	std	Y+27, r24	; 0x1b
     8fc:	83 81       	ldd	r24, Z+3	; 0x03
     8fe:	8c 8f       	std	Y+28, r24	; 0x1c
				data += 4;
     900:	f8 01       	movw	r30, r16
     902:	3d 96       	adiw	r30, 0x0d	; 13
				//Read default GW
				STREAM_TO_STREAM(data,recParams,NETAPP_IPCONFIG_IP_LENGTH); 
     904:	1d 96       	adiw	r26, 0x0d	; 13
     906:	8c 91       	ld	r24, X
     908:	1d 97       	sbiw	r26, 0x0d	; 13
     90a:	8d 8f       	std	Y+29, r24	; 0x1d
     90c:	81 81       	ldd	r24, Z+1	; 0x01
     90e:	8e 8f       	std	Y+30, r24	; 0x1e
     910:	82 81       	ldd	r24, Z+2	; 0x02
     912:	8f 8f       	std	Y+31, r24	; 0x1f
     914:	83 81       	ldd	r24, Z+3	; 0x03
     916:	88 a3       	std	Y+32, r24	; 0x20
				data += 4;
     918:	f8 01       	movw	r30, r16
     91a:	71 96       	adiw	r30, 0x11	; 17
				//Read DHCP server  
				STREAM_TO_STREAM(data,recParams,NETAPP_IPCONFIG_IP_LENGTH);     
     91c:	51 96       	adiw	r26, 0x11	; 17
     91e:	8c 91       	ld	r24, X
     920:	51 97       	sbiw	r26, 0x11	; 17
     922:	89 a3       	std	Y+33, r24	; 0x21
     924:	81 81       	ldd	r24, Z+1	; 0x01
     926:	8a a3       	std	Y+34, r24	; 0x22
     928:	82 81       	ldd	r24, Z+2	; 0x02
     92a:	8b a3       	std	Y+35, r24	; 0x23
     92c:	83 81       	ldd	r24, Z+3	; 0x03
     92e:	8c a3       	std	Y+36, r24	; 0x24
				data += 4;
				//Read DNS server  
				STREAM_TO_STREAM(data,recParams,NETAPP_IPCONFIG_IP_LENGTH); 
     930:	f8 01       	movw	r30, r16
     932:	75 96       	adiw	r30, 0x15	; 21
     934:	55 96       	adiw	r26, 0x15	; 21
     936:	8c 91       	ld	r24, X
     938:	55 97       	sbiw	r26, 0x15	; 21
     93a:	8d a3       	std	Y+37, r24	; 0x25
     93c:	81 81       	ldd	r24, Z+1	; 0x01
     93e:	8e a3       	std	Y+38, r24	; 0x26
     940:	82 81       	ldd	r24, Z+2	; 0x02
     942:	8f a3       	std	Y+39, r24	; 0x27
     944:	83 81       	ldd	r24, Z+3	; 0x03
     946:	88 a7       	std	Y+40, r24	; 0x28
				// read the status
				STREAM_TO_UINT8(event_hdr, HCI_EVENT_STATUS_OFFSET, *recParams);
     948:	14 96       	adiw	r26, 0x04	; 4
     94a:	8c 91       	ld	r24, X
     94c:	89 a7       	std	Y+41, r24	; 0x29


				if( tSLInformation.sWlanCB )
     94e:	80 91 ec 01 	lds	r24, 0x01EC
     952:	90 91 ed 01 	lds	r25, 0x01ED
     956:	89 2b       	or	r24, r25
     958:	59 f0       	breq	.+22     	; 0x970 <__stack+0x71>
				{
					tSLInformation.sWlanCB(event_type, (CHAR *)params, sizeof(params));
     95a:	e0 91 ec 01 	lds	r30, 0x01EC
     95e:	f0 91 ed 01 	lds	r31, 0x01ED
     962:	c7 01       	movw	r24, r14
     964:	b6 01       	movw	r22, r12
     966:	ae 01       	movw	r20, r28
     968:	4b 5e       	subi	r20, 0xEB	; 235
     96a:	5f 4f       	sbci	r21, 0xFF	; 255
     96c:	25 e1       	ldi	r18, 0x15	; 21
     96e:	09 95       	icall
     970:	21 e0       	ldi	r18, 0x01	; 1
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	40 e0       	ldi	r20, 0x00	; 0
     976:	50 e0       	ldi	r21, 0x00	; 0
     978:	fb c0       	rjmp	.+502    	; 0xb70 <__stack+0x271>
			break;

		case HCI_EVNT_WLAN_ASYNC_PING_REPORT:
			{
				netapp_pingreport_args_t params;			
				data = (CHAR*)(event_hdr) + HCI_EVENT_HEADER_SIZE;			
     97a:	0b 5f       	subi	r16, 0xFB	; 251
     97c:	1f 4f       	sbci	r17, 0xFF	; 255
				STREAM_TO_UINT32(data, NETAPP_PING_PACKETS_SENT_OFFSET, params.packets_sent);			
     97e:	c8 01       	movw	r24, r16
     980:	60 e0       	ldi	r22, 0x00	; 0
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <STREAM_TO_UINT32_f>
     988:	69 83       	std	Y+1, r22	; 0x01
     98a:	7a 83       	std	Y+2, r23	; 0x02
     98c:	8b 83       	std	Y+3, r24	; 0x03
     98e:	9c 83       	std	Y+4, r25	; 0x04
				STREAM_TO_UINT32(data, NETAPP_PING_PACKETS_RCVD_OFFSET, params.packets_received);			
     990:	c8 01       	movw	r24, r16
     992:	64 e0       	ldi	r22, 0x04	; 4
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <STREAM_TO_UINT32_f>
     99a:	6d 83       	std	Y+5, r22	; 0x05
     99c:	7e 83       	std	Y+6, r23	; 0x06
     99e:	8f 83       	std	Y+7, r24	; 0x07
     9a0:	98 87       	std	Y+8, r25	; 0x08
				STREAM_TO_UINT32(data, NETAPP_PING_MIN_RTT_OFFSET, params.min_round_time);		
     9a2:	c8 01       	movw	r24, r16
     9a4:	68 e0       	ldi	r22, 0x08	; 8
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <STREAM_TO_UINT32_f>
     9ac:	69 87       	std	Y+9, r22	; 0x09
     9ae:	7a 87       	std	Y+10, r23	; 0x0a
     9b0:	8b 87       	std	Y+11, r24	; 0x0b
     9b2:	9c 87       	std	Y+12, r25	; 0x0c
				STREAM_TO_UINT32(data, NETAPP_PING_MAX_RTT_OFFSET, params.max_round_time);	
     9b4:	c8 01       	movw	r24, r16
     9b6:	6c e0       	ldi	r22, 0x0C	; 12
     9b8:	70 e0       	ldi	r23, 0x00	; 0
     9ba:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <STREAM_TO_UINT32_f>
     9be:	6d 87       	std	Y+13, r22	; 0x0d
     9c0:	7e 87       	std	Y+14, r23	; 0x0e
     9c2:	8f 87       	std	Y+15, r24	; 0x0f
     9c4:	98 8b       	std	Y+16, r25	; 0x10
				STREAM_TO_UINT32(data, NETAPP_PING_AVG_RTT_OFFSET, params.avg_round_time);
     9c6:	c8 01       	movw	r24, r16
     9c8:	60 e1       	ldi	r22, 0x10	; 16
     9ca:	70 e0       	ldi	r23, 0x00	; 0
     9cc:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <STREAM_TO_UINT32_f>
     9d0:	9b 01       	movw	r18, r22
     9d2:	ac 01       	movw	r20, r24

				if( tSLInformation.sWlanCB )
     9d4:	80 91 ec 01 	lds	r24, 0x01EC
     9d8:	90 91 ed 01 	lds	r25, 0x01ED
     9dc:	89 2b       	or	r24, r25
     9de:	41 f2       	breq	.-112    	; 0x970 <__stack+0x71>
				{
					tSLInformation.sWlanCB(event_type, (CHAR *)&params, sizeof(params));
     9e0:	e0 91 ec 01 	lds	r30, 0x01EC
     9e4:	f0 91 ed 01 	lds	r31, 0x01ED
				data = (CHAR*)(event_hdr) + HCI_EVENT_HEADER_SIZE;			
				STREAM_TO_UINT32(data, NETAPP_PING_PACKETS_SENT_OFFSET, params.packets_sent);			
				STREAM_TO_UINT32(data, NETAPP_PING_PACKETS_RCVD_OFFSET, params.packets_received);			
				STREAM_TO_UINT32(data, NETAPP_PING_MIN_RTT_OFFSET, params.min_round_time);		
				STREAM_TO_UINT32(data, NETAPP_PING_MAX_RTT_OFFSET, params.max_round_time);	
				STREAM_TO_UINT32(data, NETAPP_PING_AVG_RTT_OFFSET, params.avg_round_time);
     9e8:	29 8b       	std	Y+17, r18	; 0x11
     9ea:	3a 8b       	std	Y+18, r19	; 0x12
     9ec:	4b 8b       	std	Y+19, r20	; 0x13
     9ee:	5c 8b       	std	Y+20, r21	; 0x14

				if( tSLInformation.sWlanCB )
				{
					tSLInformation.sWlanCB(event_type, (CHAR *)&params, sizeof(params));
     9f0:	c7 01       	movw	r24, r14
     9f2:	b6 01       	movw	r22, r12
     9f4:	ae 01       	movw	r20, r28
     9f6:	4f 5f       	subi	r20, 0xFF	; 255
     9f8:	5f 4f       	sbci	r21, 0xFF	; 255
     9fa:	24 e1       	ldi	r18, 0x14	; 20
     9fc:	b8 cf       	rjmp	.-144    	; 0x96e <__stack+0x6f>
			  // Adafruit CC3k Host Driver Difference
			  // Extra debug output.
			  // Noted 12-12-2014 by tdicola
			  DEBUGPRINT_F("\tTCP Close Wait\n\r");
			  data = (CHAR*)(event_hdr) + HCI_EVENT_HEADER_SIZE;
			  if( tSLInformation.sWlanCB )
     9fe:	80 91 ec 01 	lds	r24, 0x01EC
     a02:	90 91 ed 01 	lds	r25, 0x01ED
     a06:	89 2b       	or	r24, r25
     a08:	09 f4       	brne	.+2      	; 0xa0c <__stack+0x10d>
     a0a:	b2 cf       	rjmp	.-156    	; 0x970 <__stack+0x71>
			    {
				  //data[0] represents the socket id, for which FIN was received by remote.
				  //Upon receiving this event, the user can close the socket, or else the 
				  //socket will be closded after inacvitity timeout (by default 60 seconds)
			      tSLInformation.sWlanCB(event_type, data, 1);
     a0c:	e0 91 ec 01 	lds	r30, 0x01EC
     a10:	f0 91 ed 01 	lds	r31, 0x01ED
     a14:	0b 5f       	subi	r16, 0xFB	; 251
     a16:	1f 4f       	sbci	r17, 0xFF	; 255
     a18:	c7 01       	movw	r24, r14
     a1a:	b6 01       	movw	r22, r12
     a1c:	a8 01       	movw	r20, r16
     a1e:	21 e0       	ldi	r18, 0x01	; 1
     a20:	a6 cf       	rjmp	.-180    	; 0x96e <__stack+0x6f>
			return (0);
		}
		return(1);
	}

	if ((event_type == HCI_EVNT_SEND) || (event_type == HCI_EVNT_SENDTO)
     a22:	b3 e0       	ldi	r27, 0x03	; 3
     a24:	cb 16       	cp	r12, r27
     a26:	b0 e1       	ldi	r27, 0x10	; 16
     a28:	db 06       	cpc	r13, r27
     a2a:	b0 e0       	ldi	r27, 0x00	; 0
     a2c:	eb 06       	cpc	r14, r27
     a2e:	b0 e0       	ldi	r27, 0x00	; 0
     a30:	fb 06       	cpc	r15, r27
     a32:	99 f0       	breq	.+38     	; 0xa5a <__stack+0x15b>
     a34:	ef e0       	ldi	r30, 0x0F	; 15
     a36:	ce 16       	cp	r12, r30
     a38:	e0 e1       	ldi	r30, 0x10	; 16
     a3a:	de 06       	cpc	r13, r30
     a3c:	e0 e0       	ldi	r30, 0x00	; 0
     a3e:	ee 06       	cpc	r14, r30
     a40:	e0 e0       	ldi	r30, 0x00	; 0
     a42:	fe 06       	cpc	r15, r30
     a44:	51 f0       	breq	.+20     	; 0xa5a <__stack+0x15b>
     a46:	fe e0       	ldi	r31, 0x0E	; 14
     a48:	cf 16       	cp	r12, r31
     a4a:	f0 e1       	ldi	r31, 0x10	; 16
     a4c:	df 06       	cpc	r13, r31
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	ef 06       	cpc	r14, r31
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	ff 06       	cpc	r15, r31
     a56:	09 f0       	breq	.+2      	; 0xa5a <__stack+0x15b>
     a58:	6a c0       	rjmp	.+212    	; 0xb2e <__stack+0x22f>
		// Adafruit CC3k Host Driver Difference
		// Extra debug output.
		// Noted 12-12-2014 by tdicola
		DEBUGPRINT_F("\tSEND event response\n\r");

                pArg = M_BSD_RESP_PARAMS_OFFSET(event_hdr);
     a5a:	85 e0       	ldi	r24, 0x05	; 5
     a5c:	c8 2e       	mov	r12, r24
     a5e:	d1 2c       	mov	r13, r1
     a60:	c0 0e       	add	r12, r16
     a62:	d1 1e       	adc	r13, r17
                STREAM_TO_UINT32(pArg, BSD_RSP_PARAMS_STATUS_OFFSET,status);
     a64:	c6 01       	movw	r24, r12
     a66:	64 e0       	ldi	r22, 0x04	; 4
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <STREAM_TO_UINT32_f>

                if (ERROR_SOCKET_INACTIVE == status)
     a6e:	67 5c       	subi	r22, 0xC7	; 199
     a70:	7f 4f       	sbci	r23, 0xFF	; 255
     a72:	8f 4f       	sbci	r24, 0xFF	; 255
     a74:	9f 4f       	sbci	r25, 0xFF	; 255
     a76:	09 f0       	breq	.+2      	; 0xa7a <__stack+0x17b>
     a78:	77 c0       	rjmp	.+238    	; 0xb68 <__stack+0x269>
                {
                    // The only synchronous event that can come from SL device in form of
                    // command complete is "Command Complete" on data sent, in case SL device
                    // was unable to transmit
                    STREAM_TO_UINT8(event_hdr, HCI_EVENT_STATUS_OFFSET, tSLInformation.slTransmitDataError);
     a7a:	d8 01       	movw	r26, r16
     a7c:	14 96       	adiw	r26, 0x04	; 4
     a7e:	8c 91       	ld	r24, X
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	a0 e0       	ldi	r26, 0x00	; 0
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	80 93 f6 01 	sts	0x01F6, r24
     a8a:	90 93 f7 01 	sts	0x01F7, r25
     a8e:	a0 93 f8 01 	sts	0x01F8, r26
     a92:	b0 93 f9 01 	sts	0x01F9, r27
//*****************************************************************************
void update_socket_active_status(CHAR *resp_params)
{
	INT32 status, sd;

	STREAM_TO_UINT32(resp_params, BSD_RSP_PARAMS_SOCKET_OFFSET,sd);
     a96:	c6 01       	movw	r24, r12
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <STREAM_TO_UINT32_f>
     aa0:	7b 01       	movw	r14, r22
     aa2:	8c 01       	movw	r16, r24
	STREAM_TO_UINT32(resp_params, BSD_RSP_PARAMS_STATUS_OFFSET,status);
     aa4:	c6 01       	movw	r24, r12
     aa6:	64 e0       	ldi	r22, 0x04	; 4
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <STREAM_TO_UINT32_f>

	if(ERROR_SOCKET_INACTIVE == status)
     aae:	67 5c       	subi	r22, 0xC7	; 199
     ab0:	7f 4f       	sbci	r23, 0xFF	; 255
     ab2:	8f 4f       	sbci	r24, 0xFF	; 255
     ab4:	9f 4f       	sbci	r25, 0xFF	; 255
     ab6:	09 f0       	breq	.+2      	; 0xaba <__stack+0x1bb>
     ab8:	5b cf       	rjmp	.-330    	; 0x970 <__stack+0x71>
//!                  accordingly  the global socket status
//
//*****************************************************************************
void set_socket_active_status(INT32 Sd, INT32 Status)
{
	if(M_IS_VALID_SD(Sd) && M_IS_VALID_STATUS(Status))
     aba:	e8 e0       	ldi	r30, 0x08	; 8
     abc:	ee 16       	cp	r14, r30
     abe:	f1 04       	cpc	r15, r1
     ac0:	01 05       	cpc	r16, r1
     ac2:	11 05       	cpc	r17, r1
     ac4:	08 f0       	brcs	.+2      	; 0xac8 <__stack+0x1c9>
     ac6:	54 cf       	rjmp	.-344    	; 0x970 <__stack+0x71>
	{
		socket_active_status &= ~(1 << Sd);      /* clean socket's mask */
		socket_active_status |= (Status << Sd); /* set new socket's mask */
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	0e 2c       	mov	r0, r14
     ace:	02 c0       	rjmp	.+4      	; 0xad4 <__stack+0x1d5>
     ad0:	88 0f       	add	r24, r24
     ad2:	99 1f       	adc	r25, r25
     ad4:	0a 94       	dec	r0
     ad6:	e2 f7       	brpl	.-8      	; 0xad0 <__stack+0x1d1>
     ad8:	80 95       	com	r24
     ada:	90 95       	com	r25
     adc:	aa 27       	eor	r26, r26
     ade:	97 fd       	sbrc	r25, 7
     ae0:	a0 95       	com	r26
     ae2:	ba 2f       	mov	r27, r26
     ae4:	20 91 3a 01 	lds	r18, 0x013A
     ae8:	30 91 3b 01 	lds	r19, 0x013B
     aec:	40 91 3c 01 	lds	r20, 0x013C
     af0:	50 91 3d 01 	lds	r21, 0x013D
     af4:	82 23       	and	r24, r18
     af6:	93 23       	and	r25, r19
     af8:	a4 23       	and	r26, r20
     afa:	b5 23       	and	r27, r21
     afc:	21 e0       	ldi	r18, 0x01	; 1
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	40 e0       	ldi	r20, 0x00	; 0
     b02:	50 e0       	ldi	r21, 0x00	; 0
     b04:	0e 2c       	mov	r0, r14
     b06:	04 c0       	rjmp	.+8      	; 0xb10 <__stack+0x211>
     b08:	22 0f       	add	r18, r18
     b0a:	33 1f       	adc	r19, r19
     b0c:	44 1f       	adc	r20, r20
     b0e:	55 1f       	adc	r21, r21
     b10:	0a 94       	dec	r0
     b12:	d2 f7       	brpl	.-12     	; 0xb08 <__stack+0x209>
     b14:	82 2b       	or	r24, r18
     b16:	93 2b       	or	r25, r19
     b18:	a4 2b       	or	r26, r20
     b1a:	b5 2b       	or	r27, r21
     b1c:	80 93 3a 01 	sts	0x013A, r24
     b20:	90 93 3b 01 	sts	0x013B, r25
     b24:	a0 93 3c 01 	sts	0x013C, r26
     b28:	b0 93 3d 01 	sts	0x013D, r27
     b2c:	21 cf       	rjmp	.-446    	; 0x970 <__stack+0x71>
                else
                    return (0);
	}

	//handle a case where unsolicited event arrived, but was not handled by any of the cases above
	if ((event_type != tSLInformation.usRxEventOpcode) && (event_type != HCI_EVNT_PATCHES_REQ))
     b2e:	80 91 de 01 	lds	r24, 0x01DE
     b32:	90 91 df 01 	lds	r25, 0x01DF
     b36:	a0 e0       	ldi	r26, 0x00	; 0
     b38:	b0 e0       	ldi	r27, 0x00	; 0
     b3a:	c8 16       	cp	r12, r24
     b3c:	d9 06       	cpc	r13, r25
     b3e:	ea 06       	cpc	r14, r26
     b40:	fb 06       	cpc	r15, r27
     b42:	91 f0       	breq	.+36     	; 0xb68 <__stack+0x269>
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	cf 16       	cp	r12, r31
     b4a:	f0 e1       	ldi	r31, 0x10	; 16
     b4c:	df 06       	cpc	r13, r31
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	ef 06       	cpc	r14, r31
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	ff 06       	cpc	r15, r31
     b56:	09 f4       	brne	.+2      	; 0xb5a <__stack+0x25b>
     b58:	61 e0       	ldi	r22, 0x01	; 1
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	68 27       	eor	r22, r24
     b5e:	26 2f       	mov	r18, r22
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	40 e0       	ldi	r20, 0x00	; 0
     b64:	50 e0       	ldi	r21, 0x00	; 0
     b66:	04 c0       	rjmp	.+8      	; 0xb70 <__stack+0x271>
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	50 e0       	ldi	r21, 0x00	; 0
	{
		return(1);
	}

	return(0);
}
     b70:	b9 01       	movw	r22, r18
     b72:	ca 01       	movw	r24, r20
     b74:	a9 96       	adiw	r28, 0x29	; 41
     b76:	0f b6       	in	r0, 0x3f	; 63
     b78:	f8 94       	cli
     b7a:	de bf       	out	0x3e, r29	; 62
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	cd bf       	out	0x3d, r28	; 61
     b80:	cf 91       	pop	r28
     b82:	df 91       	pop	r29
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	df 90       	pop	r13
     b8e:	cf 90       	pop	r12
     b90:	bf 90       	pop	r11
     b92:	af 90       	pop	r10
     b94:	9f 90       	pop	r9
     b96:	8f 90       	pop	r8
     b98:	08 95       	ret

00000b9a <hci_unsolicited_event_handler>:
INT32 hci_unsolicited_event_handler(void)
{
	UINT32   res = 0;
	UINT8 *pucReceivedData;

	if (tSLInformation.usEventOrDataReceived != 0)
     b9a:	80 91 e0 01 	lds	r24, 0x01E0
     b9e:	90 91 e1 01 	lds	r25, 0x01E1
     ba2:	89 2b       	or	r24, r25
     ba4:	d1 f0       	breq	.+52     	; 0xbda <hci_unsolicited_event_handler+0x40>
	{
		pucReceivedData = (tSLInformation.pucReceivedData);
     ba6:	e0 91 e2 01 	lds	r30, 0x01E2
     baa:	f0 91 e3 01 	lds	r31, 0x01E3

		if (*pucReceivedData == HCI_TYPE_EVNT)
     bae:	80 81       	ld	r24, Z
     bb0:	84 30       	cpi	r24, 0x04	; 4
     bb2:	99 f4       	brne	.+38     	; 0xbda <hci_unsolicited_event_handler+0x40>
		{			

			// In case unsolicited event received - here the handling finished
			if (hci_unsol_event_handler((CHAR *)pucReceivedData) == 1)
     bb4:	cf 01       	movw	r24, r30
     bb6:	0e 94 8d 03 	call	0x71a	; 0x71a <hci_unsol_event_handler>
     bba:	61 30       	cpi	r22, 0x01	; 1
     bbc:	71 05       	cpc	r23, r1
     bbe:	81 05       	cpc	r24, r1
     bc0:	91 05       	cpc	r25, r1
     bc2:	59 f4       	brne	.+22     	; 0xbda <hci_unsolicited_event_handler+0x40>
			{

				// There was an unsolicited event received - we can release the buffer
				// and clean the event received 
				tSLInformation.usEventOrDataReceived = 0;
     bc4:	10 92 e1 01 	sts	0x01E1, r1
     bc8:	10 92 e0 01 	sts	0x01E0, r1

				res = 1;
				SpiResumeSpi();
     bcc:	0e 94 83 22 	call	0x4506	; 0x4506 <_Z12SpiResumeSpiv>
     bd0:	21 e0       	ldi	r18, 0x01	; 1
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	40 e0       	ldi	r20, 0x00	; 0
     bd6:	50 e0       	ldi	r21, 0x00	; 0
     bd8:	04 c0       	rjmp	.+8      	; 0xbe2 <hci_unsolicited_event_handler+0x48>
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	40 e0       	ldi	r20, 0x00	; 0
     be0:	50 e0       	ldi	r21, 0x00	; 0
			}
		}
	}

	return res;
}
     be2:	b9 01       	movw	r22, r18
     be4:	ca 01       	movw	r24, r20
     be6:	08 95       	ret

00000be8 <_Z30hci_unsol_handle_patch_requestPc>:
//!  @return none
//!
//!  @brief   Handle unsolicited event from type patch request
//
//*****************************************************************************
void hci_unsol_handle_patch_request(CHAR *event_hdr)
     be8:	df 93       	push	r29
     bea:	cf 93       	push	r28
     bec:	00 d0       	rcall	.+0      	; 0xbee <_Z30hci_unsol_handle_patch_requestPc+0x6>
     bee:	00 d0       	rcall	.+0      	; 0xbf0 <_Z30hci_unsol_handle_patch_requestPc+0x8>
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
{
	CHAR *params = (CHAR *)(event_hdr) + HCI_EVENT_HEADER_SIZE;
	UINT32 ucLength = 0;
     bf4:	19 82       	std	Y+1, r1	; 0x01
     bf6:	1a 82       	std	Y+2, r1	; 0x02
     bf8:	1b 82       	std	Y+3, r1	; 0x03
     bfa:	1c 82       	std	Y+4, r1	; 0x04
	CHAR *patch;

	switch (*params)
     bfc:	fc 01       	movw	r30, r24
     bfe:	85 81       	ldd	r24, Z+5	; 0x05
     c00:	82 30       	cpi	r24, 0x02	; 2
     c02:	21 f1       	breq	.+72     	; 0xc4c <_Z30hci_unsol_handle_patch_requestPc+0x64>
     c04:	83 30       	cpi	r24, 0x03	; 3
     c06:	09 f4       	brne	.+2      	; 0xc0a <_Z30hci_unsol_handle_patch_requestPc+0x22>
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <_Z30hci_unsol_handle_patch_requestPc+0xa0>
     c0a:	81 30       	cpi	r24, 0x01	; 1
     c0c:	09 f0       	breq	.+2      	; 0xc10 <_Z30hci_unsol_handle_patch_requestPc+0x28>
     c0e:	5f c0       	rjmp	.+190    	; 0xcce <_Z30hci_unsol_handle_patch_requestPc+0xe6>
	{
	case HCI_EVENT_PATCHES_DRV_REQ:

		if (tSLInformation.sDriverPatches)
     c10:	80 91 e8 01 	lds	r24, 0x01E8
     c14:	90 91 e9 01 	lds	r25, 0x01E9
     c18:	89 2b       	or	r24, r25
     c1a:	91 f0       	breq	.+36     	; 0xc40 <_Z30hci_unsol_handle_patch_requestPc+0x58>
		{
			patch = tSLInformation.sDriverPatches(&ucLength);
     c1c:	e0 91 e8 01 	lds	r30, 0x01E8
     c20:	f0 91 e9 01 	lds	r31, 0x01E9
     c24:	ce 01       	movw	r24, r28
     c26:	01 96       	adiw	r24, 0x01	; 1
     c28:	09 95       	icall
     c2a:	ac 01       	movw	r20, r24

			if (patch)
     c2c:	00 97       	sbiw	r24, 0x00	; 0
     c2e:	41 f0       	breq	.+16     	; 0xc40 <_Z30hci_unsol_handle_patch_requestPc+0x58>
			{
				hci_patch_send(HCI_EVENT_PATCHES_DRV_REQ, 
					tSLInformation.pucTxCommandBuffer, patch, ucLength);
     c30:	60 91 e4 01 	lds	r22, 0x01E4
     c34:	70 91 e5 01 	lds	r23, 0x01E5
     c38:	29 81       	ldd	r18, Y+1	; 0x01
     c3a:	3a 81       	ldd	r19, Y+2	; 0x02
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	45 c0       	rjmp	.+138    	; 0xcca <_Z30hci_unsol_handle_patch_requestPc+0xe2>
			}
		}

		// Send 0 length Patches response event
		hci_patch_send(HCI_EVENT_PATCHES_DRV_REQ, 
			tSLInformation.pucTxCommandBuffer, 0, 0);
     c40:	60 91 e4 01 	lds	r22, 0x01E4
     c44:	70 91 e5 01 	lds	r23, 0x01E5
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	3b c0       	rjmp	.+118    	; 0xcc2 <_Z30hci_unsol_handle_patch_requestPc+0xda>
		break;

	case HCI_EVENT_PATCHES_FW_REQ:

		if (tSLInformation.sFWPatches)
     c4c:	80 91 e6 01 	lds	r24, 0x01E6
     c50:	90 91 e7 01 	lds	r25, 0x01E7
     c54:	89 2b       	or	r24, r25
     c56:	91 f0       	breq	.+36     	; 0xc7c <_Z30hci_unsol_handle_patch_requestPc+0x94>
		{
			patch = tSLInformation.sFWPatches(&ucLength);
     c58:	e0 91 e6 01 	lds	r30, 0x01E6
     c5c:	f0 91 e7 01 	lds	r31, 0x01E7
     c60:	ce 01       	movw	r24, r28
     c62:	01 96       	adiw	r24, 0x01	; 1
     c64:	09 95       	icall
     c66:	ac 01       	movw	r20, r24

			// Build and send a patch
			if (patch)
     c68:	00 97       	sbiw	r24, 0x00	; 0
     c6a:	41 f0       	breq	.+16     	; 0xc7c <_Z30hci_unsol_handle_patch_requestPc+0x94>
			{
				hci_patch_send(HCI_EVENT_PATCHES_FW_REQ, 
					tSLInformation.pucTxCommandBuffer, patch, ucLength);
     c6c:	60 91 e4 01 	lds	r22, 0x01E4
     c70:	70 91 e5 01 	lds	r23, 0x01E5
     c74:	29 81       	ldd	r18, Y+1	; 0x01
     c76:	3a 81       	ldd	r19, Y+2	; 0x02
     c78:	82 e0       	ldi	r24, 0x02	; 2
     c7a:	27 c0       	rjmp	.+78     	; 0xcca <_Z30hci_unsol_handle_patch_requestPc+0xe2>
			}
		}

		// Send 0 length Patches response event
		hci_patch_send(HCI_EVENT_PATCHES_FW_REQ, 
			tSLInformation.pucTxCommandBuffer, 0, 0);
     c7c:	60 91 e4 01 	lds	r22, 0x01E4
     c80:	70 91 e5 01 	lds	r23, 0x01E5
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	1d c0       	rjmp	.+58     	; 0xcc2 <_Z30hci_unsol_handle_patch_requestPc+0xda>
		break;

	case HCI_EVENT_PATCHES_BOOTLOAD_REQ:

		if (tSLInformation.sBootLoaderPatches)
     c88:	80 91 ea 01 	lds	r24, 0x01EA
     c8c:	90 91 eb 01 	lds	r25, 0x01EB
     c90:	89 2b       	or	r24, r25
     c92:	91 f0       	breq	.+36     	; 0xcb8 <_Z30hci_unsol_handle_patch_requestPc+0xd0>
		{
			patch = tSLInformation.sBootLoaderPatches(&ucLength);
     c94:	e0 91 ea 01 	lds	r30, 0x01EA
     c98:	f0 91 eb 01 	lds	r31, 0x01EB
     c9c:	ce 01       	movw	r24, r28
     c9e:	01 96       	adiw	r24, 0x01	; 1
     ca0:	09 95       	icall
     ca2:	ac 01       	movw	r20, r24

			if (patch)
     ca4:	00 97       	sbiw	r24, 0x00	; 0
     ca6:	41 f0       	breq	.+16     	; 0xcb8 <_Z30hci_unsol_handle_patch_requestPc+0xd0>
			{
				hci_patch_send(HCI_EVENT_PATCHES_BOOTLOAD_REQ,  
					tSLInformation.pucTxCommandBuffer, patch, ucLength);
     ca8:	60 91 e4 01 	lds	r22, 0x01E4
     cac:	70 91 e5 01 	lds	r23, 0x01E5
     cb0:	29 81       	ldd	r18, Y+1	; 0x01
     cb2:	3a 81       	ldd	r19, Y+2	; 0x02
     cb4:	83 e0       	ldi	r24, 0x03	; 3
     cb6:	09 c0       	rjmp	.+18     	; 0xcca <_Z30hci_unsol_handle_patch_requestPc+0xe2>
			}
		}

		// Send 0 length Patches response event
		hci_patch_send(HCI_EVENT_PATCHES_BOOTLOAD_REQ, 
			tSLInformation.pucTxCommandBuffer, 0, 0);
     cb8:	60 91 e4 01 	lds	r22, 0x01E4
     cbc:	70 91 e5 01 	lds	r23, 0x01E5
     cc0:	83 e0       	ldi	r24, 0x03	; 3
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	50 e0       	ldi	r21, 0x00	; 0
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	0e 94 13 0a 	call	0x1426	; 0x1426 <hci_patch_send>
		break;
	}
}
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
     cd6:	cf 91       	pop	r28
     cd8:	df 91       	pop	r29
     cda:	08 95       	ret

00000cdc <hci_event_handler>:
//!                  event handler from global array of handlers pointers
//
//*****************************************************************************


UINT8 * hci_event_handler(void *pRetParams, UINT8 *from, UINT8 *fromlen)
     cdc:	4f 92       	push	r4
     cde:	5f 92       	push	r5
     ce0:	6f 92       	push	r6
     ce2:	7f 92       	push	r7
     ce4:	8f 92       	push	r8
     ce6:	9f 92       	push	r9
     ce8:	af 92       	push	r10
     cea:	bf 92       	push	r11
     cec:	cf 92       	push	r12
     cee:	df 92       	push	r13
     cf0:	ef 92       	push	r14
     cf2:	ff 92       	push	r15
     cf4:	0f 93       	push	r16
     cf6:	1f 93       	push	r17
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	6c 01       	movw	r12, r24
     cfe:	2b 01       	movw	r4, r22
     d00:	3a 01       	movw	r6, r20
     d02:	aa 24       	eor	r10, r10
     d04:	bb 24       	eor	r11, r11
	while (1)
	{
		// Adafruit CC3k Host Driver Difference
		// Call cc3k_int_poll to try to keep from missing interrupts.
		// Noted 12-12-2014 by tdicola
		cc3k_int_poll();
     d06:	0e 94 b9 23 	call	0x4772	; 0x4772 <cc3k_int_poll>

		if (tSLInformation.usEventOrDataReceived != 0)
     d0a:	80 91 e0 01 	lds	r24, 0x01E0
     d0e:	90 91 e1 01 	lds	r25, 0x01E1
     d12:	89 2b       	or	r24, r25
     d14:	c1 f3       	breq	.-16     	; 0xd06 <hci_event_handler+0x2a>
		{				
			pucReceivedData = (tSLInformation.pucReceivedData);
     d16:	80 90 e2 01 	lds	r8, 0x01E2
     d1a:	90 90 e3 01 	lds	r9, 0x01E3

			if (*pucReceivedData == HCI_TYPE_EVNT)
     d1e:	d4 01       	movw	r26, r8
     d20:	8c 91       	ld	r24, X
     d22:	84 30       	cpi	r24, 0x04	; 4
     d24:	09 f0       	breq	.+2      	; 0xd28 <hci_event_handler+0x4c>
     d26:	bf c2       	rjmp	.+1406   	; 0x12a6 <hci_event_handler+0x5ca>
			{
				// Event Received
				STREAM_TO_UINT16((CHAR *)pucReceivedData, HCI_EVENT_OPCODE_OFFSET,
     d28:	c4 01       	movw	r24, r8
     d2a:	61 e0       	ldi	r22, 0x01	; 1
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	0e 94 c6 02 	call	0x58c	; 0x58c <STREAM_TO_UINT16_f>
     d32:	5c 01       	movw	r10, r24
				// Explicit cast of pRetParams to UINT8* to fix compiler warning.
				// Noted 12-12-2014 by tdicola
				RetParams = (UINT8 *)pRetParams;

				// In case unsolicited event received - here the handling finished
				if (hci_unsol_event_handler((CHAR *)pucReceivedData) == 0)
     d34:	c4 01       	movw	r24, r8
     d36:	0e 94 8d 03 	call	0x71a	; 0x71a <hci_unsol_event_handler>
     d3a:	61 15       	cp	r22, r1
     d3c:	71 05       	cpc	r23, r1
     d3e:	81 05       	cpc	r24, r1
     d40:	91 05       	cpc	r25, r1
     d42:	09 f0       	breq	.+2      	; 0xd46 <hci_event_handler+0x6a>
     d44:	a4 c2       	rjmp	.+1352   	; 0x128e <hci_event_handler+0x5b2>
			if (*pucReceivedData == HCI_TYPE_EVNT)
			{
				// Event Received
				STREAM_TO_UINT16((CHAR *)pucReceivedData, HCI_EVENT_OPCODE_OFFSET,
					usReceivedEventOpcode);
				pucReceivedParams = pucReceivedData + HCI_EVENT_HEADER_SIZE;		
     d46:	e4 01       	movw	r28, r8
     d48:	25 96       	adiw	r28, 0x05	; 5
				// In case unsolicited event received - here the handling finished
				if (hci_unsol_event_handler((CHAR *)pucReceivedData) == 0)
				{
					STREAM_TO_UINT8(pucReceivedData, HCI_DATA_LENGTH_OFFSET, usLength);

					switch(usReceivedEventOpcode)
     d4a:	b8 e0       	ldi	r27, 0x08	; 8
     d4c:	ab 16       	cp	r10, r27
     d4e:	b0 e1       	ldi	r27, 0x10	; 16
     d50:	bb 06       	cpc	r11, r27
     d52:	08 f0       	brcs	.+2      	; 0xd56 <hci_event_handler+0x7a>
     d54:	56 c0       	rjmp	.+172    	; 0xe02 <hci_event_handler+0x126>
     d56:	e6 e0       	ldi	r30, 0x06	; 6
     d58:	ae 16       	cp	r10, r30
     d5a:	e0 e1       	ldi	r30, 0x10	; 16
     d5c:	be 06       	cpc	r11, r30
     d5e:	08 f0       	brcs	.+2      	; 0xd62 <hci_event_handler+0x86>
     d60:	cc c0       	rjmp	.+408    	; 0xefa <hci_event_handler+0x21e>
     d62:	f2 e0       	ldi	r31, 0x02	; 2
     d64:	af 16       	cp	r10, r31
     d66:	f2 e0       	ldi	r31, 0x02	; 2
     d68:	bf 06       	cpc	r11, r31
     d6a:	09 f4       	brne	.+2      	; 0xd6e <hci_event_handler+0x92>
     d6c:	c6 c0       	rjmp	.+396    	; 0xefa <hci_event_handler+0x21e>
     d6e:	03 e0       	ldi	r16, 0x03	; 3
     d70:	a0 16       	cp	r10, r16
     d72:	02 e0       	ldi	r16, 0x02	; 2
     d74:	b0 06       	cpc	r11, r16
     d76:	00 f5       	brcc	.+64     	; 0xdb8 <hci_event_handler+0xdc>
     d78:	1d e0       	ldi	r17, 0x0D	; 13
     d7a:	a1 16       	cp	r10, r17
     d7c:	b1 04       	cpc	r11, r1
     d7e:	80 f4       	brcc	.+32     	; 0xda0 <hci_event_handler+0xc4>
     d80:	68 e0       	ldi	r22, 0x08	; 8
     d82:	a6 16       	cp	r10, r22
     d84:	b1 04       	cpc	r11, r1
     d86:	08 f0       	brcs	.+2      	; 0xd8a <hci_event_handler+0xae>
     d88:	b8 c0       	rjmp	.+368    	; 0xefa <hci_event_handler+0x21e>
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	a8 16       	cp	r10, r24
     d8e:	b1 04       	cpc	r11, r1
     d90:	08 f4       	brcc	.+2      	; 0xd94 <hci_event_handler+0xb8>
     d92:	7d c2       	rjmp	.+1274   	; 0x128e <hci_event_handler+0x5b2>
     d94:	97 e0       	ldi	r25, 0x07	; 7
     d96:	a9 16       	cp	r10, r25
     d98:	b1 04       	cpc	r11, r1
     d9a:	08 f4       	brcc	.+2      	; 0xd9e <hci_event_handler+0xc2>
     d9c:	ae c0       	rjmp	.+348    	; 0xefa <hci_event_handler+0x21e>
     d9e:	d4 c1       	rjmp	.+936    	; 0x1148 <hci_event_handler+0x46c>
     da0:	ad e0       	ldi	r26, 0x0D	; 13
     da2:	aa 16       	cp	r10, r26
     da4:	b1 04       	cpc	r11, r1
     da6:	09 f4       	brne	.+2      	; 0xdaa <hci_event_handler+0xce>
     da8:	a3 c0       	rjmp	.+326    	; 0xef0 <hci_event_handler+0x214>
     daa:	b1 e0       	ldi	r27, 0x01	; 1
     dac:	ab 16       	cp	r10, r27
     dae:	b2 e0       	ldi	r27, 0x02	; 2
     db0:	bb 06       	cpc	r11, r27
     db2:	09 f0       	breq	.+2      	; 0xdb6 <hci_event_handler+0xda>
     db4:	6c c2       	rjmp	.+1240   	; 0x128e <hci_event_handler+0x5b2>
     db6:	9c c0       	rjmp	.+312    	; 0xef0 <hci_event_handler+0x214>
     db8:	e3 e0       	ldi	r30, 0x03	; 3
     dba:	ae 16       	cp	r10, r30
     dbc:	e0 e1       	ldi	r30, 0x10	; 16
     dbe:	be 06       	cpc	r11, r30
     dc0:	98 f4       	brcc	.+38     	; 0xde8 <hci_event_handler+0x10c>
     dc2:	f1 e0       	ldi	r31, 0x01	; 1
     dc4:	af 16       	cp	r10, r31
     dc6:	f0 e1       	ldi	r31, 0x10	; 16
     dc8:	bf 06       	cpc	r11, r31
     dca:	08 f0       	brcs	.+2      	; 0xdce <hci_event_handler+0xf2>
     dcc:	96 c0       	rjmp	.+300    	; 0xefa <hci_event_handler+0x21e>
     dce:	05 e0       	ldi	r16, 0x05	; 5
     dd0:	a0 16       	cp	r10, r16
     dd2:	02 e0       	ldi	r16, 0x02	; 2
     dd4:	b0 06       	cpc	r11, r16
     dd6:	08 f4       	brcc	.+2      	; 0xdda <hci_event_handler+0xfe>
     dd8:	8b c0       	rjmp	.+278    	; 0xef0 <hci_event_handler+0x214>
     dda:	17 e0       	ldi	r17, 0x07	; 7
     ddc:	a1 16       	cp	r10, r17
     dde:	12 e0       	ldi	r17, 0x02	; 2
     de0:	b1 06       	cpc	r11, r17
     de2:	09 f0       	breq	.+2      	; 0xde6 <hci_event_handler+0x10a>
     de4:	54 c2       	rjmp	.+1192   	; 0x128e <hci_event_handler+0x5b2>
     de6:	8d c0       	rjmp	.+282    	; 0xf02 <hci_event_handler+0x226>
     de8:	64 e0       	ldi	r22, 0x04	; 4
     dea:	a6 16       	cp	r10, r22
     dec:	60 e1       	ldi	r22, 0x10	; 16
     dee:	b6 06       	cpc	r11, r22
     df0:	09 f4       	brne	.+2      	; 0xdf4 <hci_event_handler+0x118>
     df2:	dc c0       	rjmp	.+440    	; 0xfac <hci_event_handler+0x2d0>
     df4:	85 e0       	ldi	r24, 0x05	; 5
     df6:	a8 16       	cp	r10, r24
     df8:	80 e1       	ldi	r24, 0x10	; 16
     dfa:	b8 06       	cpc	r11, r24
     dfc:	08 f0       	brcs	.+2      	; 0xe00 <hci_event_handler+0x124>
     dfe:	b1 c0       	rjmp	.+354    	; 0xf62 <hci_event_handler+0x286>
     e00:	42 c1       	rjmp	.+644    	; 0x1086 <hci_event_handler+0x3aa>
     e02:	91 e1       	ldi	r25, 0x11	; 17
     e04:	a9 16       	cp	r10, r25
     e06:	90 e1       	ldi	r25, 0x10	; 16
     e08:	b9 06       	cpc	r11, r25
     e0a:	09 f4       	brne	.+2      	; 0xe0e <hci_event_handler+0x132>
     e0c:	71 c0       	rjmp	.+226    	; 0xef0 <hci_event_handler+0x214>
     e0e:	a2 e1       	ldi	r26, 0x12	; 18
     e10:	aa 16       	cp	r10, r26
     e12:	a0 e1       	ldi	r26, 0x10	; 16
     e14:	ba 06       	cpc	r11, r26
     e16:	58 f5       	brcc	.+86     	; 0xe6e <hci_event_handler+0x192>
     e18:	bb e0       	ldi	r27, 0x0B	; 11
     e1a:	ab 16       	cp	r10, r27
     e1c:	b0 e1       	ldi	r27, 0x10	; 16
     e1e:	bb 06       	cpc	r11, r27
     e20:	09 f4       	brne	.+2      	; 0xe24 <hci_event_handler+0x148>
     e22:	6b c0       	rjmp	.+214    	; 0xefa <hci_event_handler+0x21e>
     e24:	ec e0       	ldi	r30, 0x0C	; 12
     e26:	ae 16       	cp	r10, r30
     e28:	e0 e1       	ldi	r30, 0x10	; 16
     e2a:	be 06       	cpc	r11, r30
     e2c:	68 f4       	brcc	.+26     	; 0xe48 <hci_event_handler+0x16c>
     e2e:	f9 e0       	ldi	r31, 0x09	; 9
     e30:	af 16       	cp	r10, r31
     e32:	f0 e1       	ldi	r31, 0x10	; 16
     e34:	bf 06       	cpc	r11, r31
     e36:	09 f4       	brne	.+2      	; 0xe3a <hci_event_handler+0x15e>
     e38:	60 c0       	rjmp	.+192    	; 0xefa <hci_event_handler+0x21e>
     e3a:	0a e0       	ldi	r16, 0x0A	; 10
     e3c:	a0 16       	cp	r10, r16
     e3e:	00 e1       	ldi	r16, 0x10	; 16
     e40:	b0 06       	cpc	r11, r16
     e42:	08 f0       	brcs	.+2      	; 0xe46 <hci_event_handler+0x16a>
     e44:	73 c1       	rjmp	.+742    	; 0x112c <hci_event_handler+0x450>
     e46:	3a c1       	rjmp	.+628    	; 0x10bc <hci_event_handler+0x3e0>
     e48:	1f e0       	ldi	r17, 0x0F	; 15
     e4a:	a1 16       	cp	r10, r17
     e4c:	10 e1       	ldi	r17, 0x10	; 16
     e4e:	b1 06       	cpc	r11, r17
     e50:	09 f4       	brne	.+2      	; 0xe54 <hci_event_handler+0x178>
     e52:	19 c1       	rjmp	.+562    	; 0x1086 <hci_event_handler+0x3aa>
     e54:	60 e1       	ldi	r22, 0x10	; 16
     e56:	a6 16       	cp	r10, r22
     e58:	60 e1       	ldi	r22, 0x10	; 16
     e5a:	b6 06       	cpc	r11, r22
     e5c:	08 f0       	brcs	.+2      	; 0xe60 <hci_event_handler+0x184>
     e5e:	61 c0       	rjmp	.+194    	; 0xf22 <hci_event_handler+0x246>
     e60:	8d e0       	ldi	r24, 0x0D	; 13
     e62:	a8 16       	cp	r10, r24
     e64:	80 e1       	ldi	r24, 0x10	; 16
     e66:	b8 06       	cpc	r11, r24
     e68:	09 f0       	breq	.+2      	; 0xe6c <hci_event_handler+0x190>
     e6a:	11 c2       	rjmp	.+1058   	; 0x128e <hci_event_handler+0x5b2>
     e6c:	9f c0       	rjmp	.+318    	; 0xfac <hci_event_handler+0x2d0>
     e6e:	95 e0       	ldi	r25, 0x05	; 5
     e70:	a9 16       	cp	r10, r25
     e72:	90 e2       	ldi	r25, 0x20	; 32
     e74:	b9 06       	cpc	r11, r25
     e76:	09 f4       	brne	.+2      	; 0xe7a <hci_event_handler+0x19e>
     e78:	a4 c1       	rjmp	.+840    	; 0x11c2 <hci_event_handler+0x4e6>
     e7a:	a6 e0       	ldi	r26, 0x06	; 6
     e7c:	aa 16       	cp	r10, r26
     e7e:	a0 e2       	ldi	r26, 0x20	; 32
     e80:	ba 06       	cpc	r11, r26
     e82:	68 f4       	brcc	.+26     	; 0xe9e <hci_event_handler+0x1c2>
     e84:	b2 e1       	ldi	r27, 0x12	; 18
     e86:	ab 16       	cp	r10, r27
     e88:	b0 e1       	ldi	r27, 0x10	; 16
     e8a:	bb 06       	cpc	r11, r27
     e8c:	09 f4       	brne	.+2      	; 0xe90 <hci_event_handler+0x1b4>
     e8e:	60 c0       	rjmp	.+192    	; 0xf50 <hci_event_handler+0x274>
     e90:	e1 e0       	ldi	r30, 0x01	; 1
     e92:	ae 16       	cp	r10, r30
     e94:	e0 e2       	ldi	r30, 0x20	; 32
     e96:	be 06       	cpc	r11, r30
     e98:	08 f4       	brcc	.+2      	; 0xe9c <hci_event_handler+0x1c0>
     e9a:	f9 c1       	rjmp	.+1010   	; 0x128e <hci_event_handler+0x5b2>
     e9c:	29 c0       	rjmp	.+82     	; 0xef0 <hci_event_handler+0x214>
     e9e:	fa e0       	ldi	r31, 0x0A	; 10
     ea0:	af 16       	cp	r10, r31
     ea2:	f0 e2       	ldi	r31, 0x20	; 32
     ea4:	bf 06       	cpc	r11, r31
     ea6:	60 f4       	brcc	.+24     	; 0xec0 <hci_event_handler+0x1e4>
     ea8:	08 e0       	ldi	r16, 0x08	; 8
     eaa:	a0 16       	cp	r10, r16
     eac:	00 e2       	ldi	r16, 0x20	; 32
     eae:	b0 06       	cpc	r11, r16
     eb0:	f8 f4       	brcc	.+62     	; 0xef0 <hci_event_handler+0x214>
     eb2:	16 e0       	ldi	r17, 0x06	; 6
     eb4:	a1 16       	cp	r10, r17
     eb6:	10 e2       	ldi	r17, 0x20	; 32
     eb8:	b1 06       	cpc	r11, r17
     eba:	09 f0       	breq	.+2      	; 0xebe <hci_event_handler+0x1e2>
     ebc:	e8 c1       	rjmp	.+976    	; 0x128e <hci_event_handler+0x5b2>
     ebe:	18 c0       	rjmp	.+48     	; 0xef0 <hci_event_handler+0x214>
     ec0:	6b e0       	ldi	r22, 0x0B	; 11
     ec2:	a6 16       	cp	r10, r22
     ec4:	60 e4       	ldi	r22, 0x40	; 64
     ec6:	b6 06       	cpc	r11, r22
     ec8:	09 f0       	breq	.+2      	; 0xecc <hci_event_handler+0x1f0>
     eca:	e1 c1       	rjmp	.+962    	; 0x128e <hci_event_handler+0x5b2>
					{		
					case HCI_CMND_READ_BUFFER_SIZE:
						{
							STREAM_TO_UINT8((CHAR *)pucReceivedParams, 0, 
     ecc:	d4 01       	movw	r26, r8
     ece:	15 96       	adiw	r26, 0x05	; 5
     ed0:	8c 91       	ld	r24, X
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	90 93 fb 01 	sts	0x01FB, r25
     ed8:	80 93 fa 01 	sts	0x01FA, r24
								tSLInformation.usNumberOfFreeBuffers);
							STREAM_TO_UINT16((CHAR *)pucReceivedParams, 1, 
     edc:	ce 01       	movw	r24, r28
     ede:	61 e0       	ldi	r22, 0x01	; 1
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	0e 94 c6 02 	call	0x58c	; 0x58c <STREAM_TO_UINT16_f>
     ee6:	90 93 fd 01 	sts	0x01FD, r25
     eea:	80 93 fc 01 	sts	0x01FC, r24
     eee:	cf c1       	rjmp	.+926    	; 0x128e <hci_event_handler+0x5b2>
					case HCI_EVNT_NVMEM_CREATE_ENTRY:
					case HCI_CMND_NVMEM_WRITE_PATCH:
					case HCI_NETAPP_PING_REPORT:
					case HCI_EVNT_MDNS_ADVERTISE:

						STREAM_TO_UINT8(pucReceivedData, HCI_EVENT_STATUS_OFFSET
     ef0:	e4 01       	movw	r28, r8
     ef2:	8c 81       	ldd	r24, Y+4	; 0x04
     ef4:	f6 01       	movw	r30, r12
     ef6:	80 83       	st	Z, r24
     ef8:	ca c1       	rjmp	.+916    	; 0x128e <hci_event_handler+0x5b2>
					case HCI_CMND_LISTEN:
					case HCI_EVNT_CLOSE_SOCKET:
					case HCI_EVNT_CONNECT:
					case HCI_EVNT_NVMEM_WRITE:

						STREAM_TO_UINT32((CHAR *)pucReceivedParams,0
     efa:	ce 01       	movw	r24, r28
     efc:	60 e0       	ldi	r22, 0x00	; 0
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	1e c0       	rjmp	.+60     	; 0xf3e <hci_event_handler+0x262>
							,*(UINT32 *)pRetParams);
						break;

					case HCI_EVNT_READ_SP_VERSION:

						STREAM_TO_UINT8(pucReceivedData, HCI_EVENT_STATUS_OFFSET
     f02:	f4 01       	movw	r30, r8
     f04:	84 81       	ldd	r24, Z+4	; 0x04
     f06:	d6 01       	movw	r26, r12
     f08:	8d 93       	st	X+, r24
     f0a:	6d 01       	movw	r12, r26
							,*(UINT8 *)pRetParams);
						pRetParams = ((CHAR *)pRetParams) + 1;
						STREAM_TO_UINT32((CHAR *)pucReceivedParams, 0, retValue32);
     f0c:	ce 01       	movw	r24, r28
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <STREAM_TO_UINT32_f>
     f16:	ab 01       	movw	r20, r22
     f18:	bc 01       	movw	r22, r24
						UINT32_TO_STREAM((UINT8 *)pRetParams, retValue32);				
     f1a:	c6 01       	movw	r24, r12
     f1c:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
     f20:	b6 c1       	rjmp	.+876    	; 0x128e <hci_event_handler+0x5b2>
						break;

					case HCI_EVNT_BSD_GETHOSTBYNAME:

						STREAM_TO_UINT32((CHAR *)pucReceivedParams
     f22:	ce 01       	movw	r24, r28
     f24:	60 e0       	ldi	r22, 0x00	; 0
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <STREAM_TO_UINT32_f>
     f2c:	f6 01       	movw	r30, r12
     f2e:	61 93       	st	Z+, r22
     f30:	71 93       	st	Z+, r23
     f32:	81 93       	st	Z+, r24
     f34:	91 93       	st	Z+, r25
     f36:	6f 01       	movw	r12, r30
							,GET_HOST_BY_NAME_RETVAL_OFFSET,*(UINT32 *)pRetParams);
						pRetParams = ((CHAR *)pRetParams) + 4;
						STREAM_TO_UINT32((CHAR *)pucReceivedParams
     f38:	ce 01       	movw	r24, r28
     f3a:	64 e0       	ldi	r22, 0x04	; 4
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <STREAM_TO_UINT32_f>
     f42:	d6 01       	movw	r26, r12
     f44:	6d 93       	st	X+, r22
     f46:	7d 93       	st	X+, r23
     f48:	8d 93       	st	X+, r24
     f4a:	9c 93       	st	X, r25
     f4c:	13 97       	sbiw	r26, 0x03	; 3
     f4e:	9f c1       	rjmp	.+830    	; 0x128e <hci_event_handler+0x5b2>
							,GET_HOST_BY_NAME_ADDR_OFFSET,*(UINT32 *)pRetParams);					
						break;

					case HCI_EVNT_GETMSSVALUE:

						STREAM_TO_UINT16((CHAR *)pucReceivedParams
     f50:	ce 01       	movw	r24, r28
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	0e 94 c6 02 	call	0x58c	; 0x58c <STREAM_TO_UINT16_f>
     f5a:	e6 01       	movw	r28, r12
     f5c:	99 83       	std	Y+1, r25	; 0x01
     f5e:	88 83       	st	Y, r24
     f60:	96 c1       	rjmp	.+812    	; 0x128e <hci_event_handler+0x5b2>

						break;

					case HCI_EVNT_ACCEPT:
						{
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,ACCEPT_SD_OFFSET
     f62:	ce 01       	movw	r24, r28
     f64:	60 e0       	ldi	r22, 0x00	; 0
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <STREAM_TO_UINT32_f>
     f6c:	f6 01       	movw	r30, r12
     f6e:	61 93       	st	Z+, r22
     f70:	71 93       	st	Z+, r23
     f72:	81 93       	st	Z+, r24
     f74:	91 93       	st	Z+, r25
     f76:	8f 01       	movw	r16, r30
								,*(UINT32 *)pRetParams);
							pRetParams = ((CHAR *)pRetParams) + 4;
							STREAM_TO_UINT32((CHAR *)pucReceivedParams
     f78:	ce 01       	movw	r24, r28
     f7a:	64 e0       	ldi	r22, 0x04	; 4
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <STREAM_TO_UINT32_f>
     f82:	d6 01       	movw	r26, r12
     f84:	14 96       	adiw	r26, 0x04	; 4
     f86:	6d 93       	st	X+, r22
     f88:	7d 93       	st	X+, r23
     f8a:	8d 93       	st	X+, r24
     f8c:	9c 93       	st	X, r25
     f8e:	17 97       	sbiw	r26, 0x07	; 7
								,ACCEPT_RETURN_STATUS_OFFSET,*(UINT32 *)pRetParams);
							pRetParams = ((CHAR *)pRetParams) + 4; 
     f90:	e4 e0       	ldi	r30, 0x04	; 4
     f92:	ce 2e       	mov	r12, r30
     f94:	d1 2c       	mov	r13, r1
     f96:	c0 0e       	add	r12, r16
     f98:	d1 1e       	adc	r13, r17

							//This argument returns in network order
							memcpy((UINT8 *)pRetParams, 
								pucReceivedParams + ACCEPT_ADDRESS__OFFSET, sizeof(sockaddr));	
     f9a:	d6 01       	movw	r26, r12
     f9c:	fe 01       	movw	r30, r28
     f9e:	38 96       	adiw	r30, 0x08	; 8
     fa0:	80 e1       	ldi	r24, 0x10	; 16
     fa2:	01 90       	ld	r0, Z+
     fa4:	0d 92       	st	X+, r0
     fa6:	81 50       	subi	r24, 0x01	; 1
     fa8:	e1 f7       	brne	.-8      	; 0xfa2 <hci_event_handler+0x2c6>
     faa:	71 c1       	rjmp	.+738    	; 0x128e <hci_event_handler+0x5b2>
						}

					case HCI_EVNT_RECV:
					case HCI_EVNT_RECVFROM:
						{
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SL_RECEIVE_SD_OFFSET ,*(UINT32 *)pRetParams);
     fac:	ce 01       	movw	r24, r28
     fae:	60 e0       	ldi	r22, 0x00	; 0
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <STREAM_TO_UINT32_f>
     fb6:	f6 01       	movw	r30, r12
     fb8:	61 93       	st	Z+, r22
     fba:	71 93       	st	Z+, r23
     fbc:	81 93       	st	Z+, r24
     fbe:	91 93       	st	Z+, r25
     fc0:	8f 01       	movw	r16, r30
							pRetParams = ((CHAR *)pRetParams) + 4;
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SL_RECEIVE_NUM_BYTES_OFFSET,*(UINT32 *)pRetParams);
     fc2:	ce 01       	movw	r24, r28
     fc4:	64 e0       	ldi	r22, 0x04	; 4
     fc6:	70 e0       	ldi	r23, 0x00	; 0
     fc8:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <STREAM_TO_UINT32_f>
     fcc:	d6 01       	movw	r26, r12
     fce:	14 96       	adiw	r26, 0x04	; 4
     fd0:	6d 93       	st	X+, r22
     fd2:	7d 93       	st	X+, r23
     fd4:	8d 93       	st	X+, r24
     fd6:	9c 93       	st	X, r25
     fd8:	17 97       	sbiw	r26, 0x07	; 7
							pRetParams = ((CHAR *)pRetParams) + 4;
     fda:	74 e0       	ldi	r23, 0x04	; 4
     fdc:	c7 2e       	mov	r12, r23
     fde:	d1 2c       	mov	r13, r1
     fe0:	c0 0e       	add	r12, r16
     fe2:	d1 1e       	adc	r13, r17
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SL_RECEIVE__FLAGS__OFFSET,*(UINT32 *)pRetParams);
     fe4:	ce 01       	movw	r24, r28
     fe6:	68 e0       	ldi	r22, 0x08	; 8
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <STREAM_TO_UINT32_f>
     fee:	9b 01       	movw	r18, r22
     ff0:	ac 01       	movw	r20, r24
     ff2:	e8 01       	movw	r28, r16
     ff4:	6c 83       	std	Y+4, r22	; 0x04
     ff6:	7d 83       	std	Y+5, r23	; 0x05
     ff8:	8e 83       	std	Y+6, r24	; 0x06
     ffa:	9f 83       	std	Y+7, r25	; 0x07

							if(((tBsdReadReturnParams *)pRetParams)->iNumberOfBytes == ERROR_SOCKET_INACTIVE)
     ffc:	f6 01       	movw	r30, r12
     ffe:	84 81       	ldd	r24, Z+4	; 0x04
    1000:	95 81       	ldd	r25, Z+5	; 0x05
    1002:	a6 81       	ldd	r26, Z+6	; 0x06
    1004:	b7 81       	ldd	r27, Z+7	; 0x07
    1006:	87 5c       	subi	r24, 0xC7	; 199
    1008:	9f 4f       	sbci	r25, 0xFF	; 255
    100a:	af 4f       	sbci	r26, 0xFF	; 255
    100c:	bf 4f       	sbci	r27, 0xFF	; 255
    100e:	09 f0       	breq	.+2      	; 0x1012 <hci_event_handler+0x336>
    1010:	3e c1       	rjmp	.+636    	; 0x128e <hci_event_handler+0x5b2>
//!                  accordingly  the global socket status
//
//*****************************************************************************
void set_socket_active_status(INT32 Sd, INT32 Status)
{
	if(M_IS_VALID_SD(Sd) && M_IS_VALID_STATUS(Status))
    1012:	28 30       	cpi	r18, 0x08	; 8
    1014:	31 05       	cpc	r19, r1
    1016:	41 05       	cpc	r20, r1
    1018:	51 05       	cpc	r21, r1
    101a:	08 f0       	brcs	.+2      	; 0x101e <hci_event_handler+0x342>
    101c:	38 c1       	rjmp	.+624    	; 0x128e <hci_event_handler+0x5b2>
	{
		socket_active_status &= ~(1 << Sd);      /* clean socket's mask */
    101e:	82 2f       	mov	r24, r18
    1020:	21 e0       	ldi	r18, 0x01	; 1
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	08 2e       	mov	r0, r24
    1026:	02 c0       	rjmp	.+4      	; 0x102c <hci_event_handler+0x350>
    1028:	22 0f       	add	r18, r18
    102a:	33 1f       	adc	r19, r19
    102c:	0a 94       	dec	r0
    102e:	e2 f7       	brpl	.-8      	; 0x1028 <hci_event_handler+0x34c>
    1030:	20 95       	com	r18
    1032:	30 95       	com	r19
    1034:	44 27       	eor	r20, r20
    1036:	37 fd       	sbrc	r19, 7
    1038:	40 95       	com	r20
    103a:	54 2f       	mov	r21, r20
    103c:	e0 90 3a 01 	lds	r14, 0x013A
    1040:	f0 90 3b 01 	lds	r15, 0x013B
    1044:	00 91 3c 01 	lds	r16, 0x013C
    1048:	10 91 3d 01 	lds	r17, 0x013D
    104c:	2e 21       	and	r18, r14
    104e:	3f 21       	and	r19, r15
    1050:	40 23       	and	r20, r16
    1052:	51 23       	and	r21, r17
		socket_active_status |= (Status << Sd); /* set new socket's mask */
    1054:	61 e0       	ldi	r22, 0x01	; 1
    1056:	e6 2e       	mov	r14, r22
    1058:	f1 2c       	mov	r15, r1
    105a:	01 2d       	mov	r16, r1
    105c:	11 2d       	mov	r17, r1
    105e:	04 c0       	rjmp	.+8      	; 0x1068 <hci_event_handler+0x38c>
    1060:	ee 0c       	add	r14, r14
    1062:	ff 1c       	adc	r15, r15
    1064:	00 1f       	adc	r16, r16
    1066:	11 1f       	adc	r17, r17
    1068:	8a 95       	dec	r24
    106a:	d2 f7       	brpl	.-12     	; 0x1060 <hci_event_handler+0x384>
    106c:	2e 29       	or	r18, r14
    106e:	3f 29       	or	r19, r15
    1070:	40 2b       	or	r20, r16
    1072:	51 2b       	or	r21, r17
    1074:	20 93 3a 01 	sts	0x013A, r18
    1078:	30 93 3b 01 	sts	0x013B, r19
    107c:	40 93 3c 01 	sts	0x013C, r20
    1080:	50 93 3d 01 	sts	0x013D, r21
    1084:	04 c1       	rjmp	.+520    	; 0x128e <hci_event_handler+0x5b2>
						}

					case HCI_EVNT_SEND:
					case HCI_EVNT_SENDTO:
						{
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SL_RECEIVE_SD_OFFSET ,*(UINT32 *)pRetParams);
    1086:	ce 01       	movw	r24, r28
    1088:	60 e0       	ldi	r22, 0x00	; 0
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <STREAM_TO_UINT32_f>
    1090:	d6 01       	movw	r26, r12
    1092:	6d 93       	st	X+, r22
    1094:	7d 93       	st	X+, r23
    1096:	8d 93       	st	X+, r24
    1098:	9d 93       	st	X+, r25
    109a:	8d 01       	movw	r16, r26
							pRetParams = ((CHAR *)pRetParams) + 4;
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SL_RECEIVE_NUM_BYTES_OFFSET,*(UINT32 *)pRetParams);
    109c:	ce 01       	movw	r24, r28
    109e:	64 e0       	ldi	r22, 0x04	; 4
    10a0:	70 e0       	ldi	r23, 0x00	; 0
    10a2:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <STREAM_TO_UINT32_f>
    10a6:	e6 01       	movw	r28, r12
    10a8:	6c 83       	std	Y+4, r22	; 0x04
    10aa:	7d 83       	std	Y+5, r23	; 0x05
    10ac:	8e 83       	std	Y+6, r24	; 0x06
    10ae:	9f 83       	std	Y+7, r25	; 0x07
							pRetParams = ((CHAR *)pRetParams) + 4;
    10b0:	54 e0       	ldi	r21, 0x04	; 4
    10b2:	c5 2e       	mov	r12, r21
    10b4:	d1 2c       	mov	r13, r1
    10b6:	c0 0e       	add	r12, r16
    10b8:	d1 1e       	adc	r13, r17
    10ba:	e9 c0       	rjmp	.+466    	; 0x128e <hci_event_handler+0x5b2>
							break;
						}

					case HCI_EVNT_SELECT:
						{ 
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SELECT_STATUS_OFFSET,*(UINT32 *)pRetParams);
    10bc:	ce 01       	movw	r24, r28
    10be:	60 e0       	ldi	r22, 0x00	; 0
    10c0:	70 e0       	ldi	r23, 0x00	; 0
    10c2:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <STREAM_TO_UINT32_f>
    10c6:	f6 01       	movw	r30, r12
    10c8:	61 93       	st	Z+, r22
    10ca:	71 93       	st	Z+, r23
    10cc:	81 93       	st	Z+, r24
    10ce:	91 93       	st	Z+, r25
    10d0:	8f 01       	movw	r16, r30
							pRetParams = ((CHAR *)pRetParams) + 4;
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SELECT_READFD_OFFSET,*(UINT32 *)pRetParams);
    10d2:	ce 01       	movw	r24, r28
    10d4:	64 e0       	ldi	r22, 0x04	; 4
    10d6:	70 e0       	ldi	r23, 0x00	; 0
    10d8:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <STREAM_TO_UINT32_f>
    10dc:	d6 01       	movw	r26, r12
    10de:	14 96       	adiw	r26, 0x04	; 4
    10e0:	6d 93       	st	X+, r22
    10e2:	7d 93       	st	X+, r23
    10e4:	8d 93       	st	X+, r24
    10e6:	9c 93       	st	X, r25
    10e8:	17 97       	sbiw	r26, 0x07	; 7
							pRetParams = ((CHAR *)pRetParams) + 4;
    10ea:	44 e0       	ldi	r20, 0x04	; 4
    10ec:	e4 2e       	mov	r14, r20
    10ee:	f1 2c       	mov	r15, r1
    10f0:	e0 0e       	add	r14, r16
    10f2:	f1 1e       	adc	r15, r17
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SELECT_WRITEFD_OFFSET,*(UINT32 *)pRetParams);
    10f4:	ce 01       	movw	r24, r28
    10f6:	68 e0       	ldi	r22, 0x08	; 8
    10f8:	70 e0       	ldi	r23, 0x00	; 0
    10fa:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <STREAM_TO_UINT32_f>
    10fe:	f8 01       	movw	r30, r16
    1100:	64 83       	std	Z+4, r22	; 0x04
    1102:	75 83       	std	Z+5, r23	; 0x05
    1104:	86 83       	std	Z+6, r24	; 0x06
    1106:	97 83       	std	Z+7, r25	; 0x07
							pRetParams = ((CHAR *)pRetParams) + 4;
    1108:	34 e0       	ldi	r19, 0x04	; 4
    110a:	c3 2e       	mov	r12, r19
    110c:	d1 2c       	mov	r13, r1
    110e:	ce 0c       	add	r12, r14
    1110:	df 1c       	adc	r13, r15
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SELECT_EXFD_OFFSET,*(UINT32 *)pRetParams);			
    1112:	ce 01       	movw	r24, r28
    1114:	6c e0       	ldi	r22, 0x0C	; 12
    1116:	70 e0       	ldi	r23, 0x00	; 0
    1118:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <STREAM_TO_UINT32_f>
    111c:	d7 01       	movw	r26, r14
    111e:	14 96       	adiw	r26, 0x04	; 4
    1120:	6d 93       	st	X+, r22
    1122:	7d 93       	st	X+, r23
    1124:	8d 93       	st	X+, r24
    1126:	9c 93       	st	X, r25
    1128:	17 97       	sbiw	r26, 0x07	; 7
    112a:	b1 c0       	rjmp	.+354    	; 0x128e <hci_event_handler+0x5b2>
							break;
						}

					case HCI_CMND_GETSOCKOPT:

						STREAM_TO_UINT8(pucReceivedData, HCI_EVENT_STATUS_OFFSET,((tBsdGetSockOptReturnParams *)pRetParams)->iStatus);
    112c:	e4 01       	movw	r28, r8
    112e:	8c 81       	ldd	r24, Y+4	; 0x04
    1130:	f6 01       	movw	r30, r12
    1132:	84 83       	std	Z+4, r24	; 0x04
						//This argument returns in network order
						memcpy((UINT8 *)pRetParams, pucReceivedParams, 4);
    1134:	8d 81       	ldd	r24, Y+5	; 0x05
    1136:	9e 81       	ldd	r25, Y+6	; 0x06
    1138:	af 81       	ldd	r26, Y+7	; 0x07
    113a:	b8 85       	ldd	r27, Y+8	; 0x08
    113c:	e6 01       	movw	r28, r12
    113e:	88 83       	st	Y, r24
    1140:	99 83       	std	Y+1, r25	; 0x01
    1142:	aa 83       	std	Y+2, r26	; 0x02
    1144:	bb 83       	std	Y+3, r27	; 0x03
    1146:	a3 c0       	rjmp	.+326    	; 0x128e <hci_event_handler+0x5b2>
						break;

					case HCI_CMND_WLAN_IOCTL_GET_SCAN_RESULTS:

						STREAM_TO_UINT32((CHAR *)pucReceivedParams,GET_SCAN_RESULTS_TABlE_COUNT_OFFSET,*(UINT32 *)pRetParams);
    1148:	ce 01       	movw	r24, r28
    114a:	60 e0       	ldi	r22, 0x00	; 0
    114c:	70 e0       	ldi	r23, 0x00	; 0
    114e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <STREAM_TO_UINT32_f>
    1152:	f6 01       	movw	r30, r12
    1154:	61 93       	st	Z+, r22
    1156:	71 93       	st	Z+, r23
    1158:	81 93       	st	Z+, r24
    115a:	91 93       	st	Z+, r25
    115c:	8f 01       	movw	r16, r30
						pRetParams = ((CHAR *)pRetParams) + 4;   					
						STREAM_TO_UINT32((CHAR *)pucReceivedParams,GET_SCAN_RESULTS_SCANRESULT_STATUS_OFFSET,*(UINT32 *)pRetParams);
    115e:	ce 01       	movw	r24, r28
    1160:	64 e0       	ldi	r22, 0x04	; 4
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <STREAM_TO_UINT32_f>
    1168:	d6 01       	movw	r26, r12
    116a:	14 96       	adiw	r26, 0x04	; 4
    116c:	6d 93       	st	X+, r22
    116e:	7d 93       	st	X+, r23
    1170:	8d 93       	st	X+, r24
    1172:	9c 93       	st	X, r25
    1174:	17 97       	sbiw	r26, 0x07	; 7
						pRetParams = ((CHAR *)pRetParams) + 4;                                                        					
						STREAM_TO_UINT16((CHAR *)pucReceivedParams,GET_SCAN_RESULTS_ISVALID_TO_SSIDLEN_OFFSET,*(UINT32 *)pRetParams);
    1176:	ce 01       	movw	r24, r28
    1178:	68 e0       	ldi	r22, 0x08	; 8
    117a:	70 e0       	ldi	r23, 0x00	; 0
    117c:	0e 94 c6 02 	call	0x58c	; 0x58c <STREAM_TO_UINT16_f>
    1180:	a0 e0       	ldi	r26, 0x00	; 0
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	f8 01       	movw	r30, r16
    1186:	84 83       	std	Z+4, r24	; 0x04
    1188:	95 83       	std	Z+5, r25	; 0x05
    118a:	a6 83       	std	Z+6, r26	; 0x06
    118c:	b7 83       	std	Z+7, r27	; 0x07
						pRetParams = ((CHAR *)pRetParams) + 2;   					
						STREAM_TO_UINT16((CHAR *)pucReceivedParams,GET_SCAN_RESULTS_FRAME_TIME_OFFSET,*(UINT32 *)pRetParams);
    118e:	ce 01       	movw	r24, r28
    1190:	6a e0       	ldi	r22, 0x0A	; 10
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	0e 94 c6 02 	call	0x58c	; 0x58c <STREAM_TO_UINT16_f>
    1198:	a0 e0       	ldi	r26, 0x00	; 0
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	f6 01       	movw	r30, r12
    119e:	82 87       	std	Z+10, r24	; 0x0a
    11a0:	93 87       	std	Z+11, r25	; 0x0b
    11a2:	a4 87       	std	Z+12, r26	; 0x0c
    11a4:	b5 87       	std	Z+13, r27	; 0x0d
						pRetParams = ((CHAR *)pRetParams) + 2;  
    11a6:	2c e0       	ldi	r18, 0x0C	; 12
    11a8:	e2 2e       	mov	r14, r18
    11aa:	f1 2c       	mov	r15, r1
    11ac:	ce 0c       	add	r12, r14
    11ae:	df 1c       	adc	r13, r15
						memcpy((UINT8 *)pRetParams, (CHAR *)(pucReceivedParams + GET_SCAN_RESULTS_FRAME_TIME_OFFSET + 2), GET_SCAN_RESULTS_SSID_MAC_LENGTH);	
    11b0:	d6 01       	movw	r26, r12
    11b2:	fe 01       	movw	r30, r28
    11b4:	3c 96       	adiw	r30, 0x0c	; 12
    11b6:	86 e2       	ldi	r24, 0x26	; 38
    11b8:	01 90       	ld	r0, Z+
    11ba:	0d 92       	st	X+, r0
    11bc:	81 50       	subi	r24, 0x01	; 1
    11be:	e1 f7       	brne	.-8      	; 0x11b8 <hci_event_handler+0x4dc>
    11c0:	66 c0       	rjmp	.+204    	; 0x128e <hci_event_handler+0x5b2>
						break;

					case HCI_NETAPP_IPCONFIG:

						//Read IP address
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_IP_LENGTH);
    11c2:	d4 01       	movw	r26, r8
    11c4:	15 96       	adiw	r26, 0x05	; 5
    11c6:	8c 91       	ld	r24, X
    11c8:	f6 01       	movw	r30, r12
    11ca:	81 93       	st	Z+, r24
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	d6 01       	movw	r26, r12
    11d0:	11 96       	adiw	r26, 0x01	; 1
    11d2:	8c 93       	st	X, r24
    11d4:	11 97       	sbiw	r26, 0x01	; 1
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	81 83       	std	Z+1, r24	; 0x01
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	82 83       	std	Z+2, r24	; 0x02
    11de:	14 96       	adiw	r26, 0x04	; 4
						RecvParams += 4;
    11e0:	f4 01       	movw	r30, r8
    11e2:	39 96       	adiw	r30, 0x09	; 9

						//Read subnet
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_IP_LENGTH);
    11e4:	e4 01       	movw	r28, r8
    11e6:	89 85       	ldd	r24, Y+9	; 0x09
    11e8:	e6 01       	movw	r28, r12
    11ea:	8c 83       	std	Y+4, r24	; 0x04
    11ec:	81 81       	ldd	r24, Z+1	; 0x01
    11ee:	8d 83       	std	Y+5, r24	; 0x05
    11f0:	82 81       	ldd	r24, Z+2	; 0x02
    11f2:	8e 83       	std	Y+6, r24	; 0x06
    11f4:	83 81       	ldd	r24, Z+3	; 0x03
    11f6:	8f 83       	std	Y+7, r24	; 0x07
    11f8:	9d 01       	movw	r18, r26
    11fa:	2c 5f       	subi	r18, 0xFC	; 252
    11fc:	3f 4f       	sbci	r19, 0xFF	; 255
						RecvParams += 4;
    11fe:	f4 01       	movw	r30, r8
    1200:	3d 96       	adiw	r30, 0x0d	; 13

						//Read default GW
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_IP_LENGTH);
    1202:	e4 01       	movw	r28, r8
    1204:	8d 85       	ldd	r24, Y+13	; 0x0d
    1206:	14 96       	adiw	r26, 0x04	; 4
    1208:	8c 93       	st	X, r24
    120a:	14 97       	sbiw	r26, 0x04	; 4
    120c:	81 81       	ldd	r24, Z+1	; 0x01
    120e:	e6 01       	movw	r28, r12
    1210:	89 87       	std	Y+9, r24	; 0x09
    1212:	82 81       	ldd	r24, Z+2	; 0x02
    1214:	8a 87       	std	Y+10, r24	; 0x0a
    1216:	83 81       	ldd	r24, Z+3	; 0x03
    1218:	8b 87       	std	Y+11, r24	; 0x0b
						RecvParams += 4;
    121a:	f4 01       	movw	r30, r8
    121c:	71 96       	adiw	r30, 0x11	; 17

						//Read DHCP server                                          	
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_IP_LENGTH);
    121e:	e4 01       	movw	r28, r8
    1220:	89 89       	ldd	r24, Y+17	; 0x11
    1222:	e9 01       	movw	r28, r18
    1224:	8c 83       	std	Y+4, r24	; 0x04
    1226:	81 81       	ldd	r24, Z+1	; 0x01
    1228:	e6 01       	movw	r28, r12
    122a:	8d 87       	std	Y+13, r24	; 0x0d
    122c:	82 81       	ldd	r24, Z+2	; 0x02
    122e:	8e 87       	std	Y+14, r24	; 0x0e
    1230:	83 81       	ldd	r24, Z+3	; 0x03
    1232:	8f 87       	std	Y+15, r24	; 0x0f
						RecvParams += 4;
    1234:	f4 01       	movw	r30, r8
    1236:	75 96       	adiw	r30, 0x15	; 21

						//Read DNS server                                           
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_IP_LENGTH);
    1238:	e4 01       	movw	r28, r8
    123a:	8d 89       	ldd	r24, Y+21	; 0x15
    123c:	e9 01       	movw	r28, r18
    123e:	88 87       	std	Y+8, r24	; 0x08
    1240:	81 81       	ldd	r24, Z+1	; 0x01
    1242:	1d 96       	adiw	r26, 0x0d	; 13
    1244:	8c 93       	st	X, r24
    1246:	1d 97       	sbiw	r26, 0x0d	; 13
    1248:	82 81       	ldd	r24, Z+2	; 0x02
    124a:	1e 96       	adiw	r26, 0x0e	; 14
    124c:	8c 93       	st	X, r24
    124e:	1e 97       	sbiw	r26, 0x0e	; 14
    1250:	83 81       	ldd	r24, Z+3	; 0x03
    1252:	1f 96       	adiw	r26, 0x0f	; 15
    1254:	8c 93       	st	X, r24
    1256:	e4 01       	movw	r28, r8
    1258:	96 01       	movw	r18, r12
    125a:	f4 01       	movw	r30, r8
    125c:	d6 01       	movw	r26, r12
						RecvParams += 4;

						//Read Mac address                            	
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_MAC_LENGTH);
    125e:	a4 01       	movw	r20, r8
    1260:	4a 5f       	subi	r20, 0xFA	; 250
    1262:	5f 4f       	sbci	r21, 0xFF	; 255
    1264:	81 8d       	ldd	r24, Z+25	; 0x19
    1266:	54 96       	adiw	r26, 0x14	; 20
    1268:	8c 93       	st	X, r24
    126a:	54 97       	sbiw	r26, 0x14	; 20
    126c:	31 96       	adiw	r30, 0x01	; 1
    126e:	11 96       	adiw	r26, 0x01	; 1
    1270:	e4 17       	cp	r30, r20
    1272:	f5 07       	cpc	r31, r21
    1274:	b9 f7       	brne	.-18     	; 0x1264 <hci_event_handler+0x588>
						RecvParams += 6;

						//Read SSID
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_SSID_LENGTH);
    1276:	a4 01       	movw	r20, r8
    1278:	40 5e       	subi	r20, 0xE0	; 224
    127a:	5f 4f       	sbci	r21, 0xFF	; 255
    127c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    127e:	f9 01       	movw	r30, r18
    1280:	82 8f       	std	Z+26, r24	; 0x1a
    1282:	21 96       	adiw	r28, 0x01	; 1
    1284:	2f 5f       	subi	r18, 0xFF	; 255
    1286:	3f 4f       	sbci	r19, 0xFF	; 255
    1288:	c4 17       	cp	r28, r20
    128a:	d5 07       	cpc	r29, r21
    128c:	b9 f7       	brne	.-18     	; 0x127c <hci_event_handler+0x5a0>

					}
				}

				if (usReceivedEventOpcode == tSLInformation.usRxEventOpcode)
    128e:	80 91 de 01 	lds	r24, 0x01DE
    1292:	90 91 df 01 	lds	r25, 0x01DF
    1296:	a8 16       	cp	r10, r24
    1298:	b9 06       	cpc	r11, r25
    129a:	b9 f5       	brne	.+110    	; 0x130a <hci_event_handler+0x62e>
				{
					tSLInformation.usRxEventOpcode = 0;
    129c:	10 92 df 01 	sts	0x01DF, r1
    12a0:	10 92 de 01 	sts	0x01DE, r1
    12a4:	32 c0       	rjmp	.+100    	; 0x130a <hci_event_handler+0x62e>
				}
			}
			else
			{				
				pucReceivedParams = pucReceivedData;
				STREAM_TO_UINT8((CHAR *)pucReceivedData, HCI_PACKET_ARGSIZE_OFFSET, ucArgsize);
    12a6:	d4 01       	movw	r26, r8
    12a8:	12 96       	adiw	r26, 0x02	; 2
    12aa:	0c 91       	ld	r16, X

				STREAM_TO_UINT16((CHAR *)pucReceivedData, HCI_PACKET_LENGTH_OFFSET, usLength);
    12ac:	c4 01       	movw	r24, r8
    12ae:	63 e0       	ldi	r22, 0x03	; 3
    12b0:	70 e0       	ldi	r23, 0x00	; 0
    12b2:	0e 94 c6 02 	call	0x58c	; 0x58c <STREAM_TO_UINT16_f>
    12b6:	ec 01       	movw	r28, r24

				// Data received: note that the only case where from and from length 
				// are not null is in recv from, so fill the args accordingly
				if (from)
    12b8:	41 14       	cp	r4, r1
    12ba:	51 04       	cpc	r5, r1
    12bc:	a1 f0       	breq	.+40     	; 0x12e6 <hci_event_handler+0x60a>
				{
					STREAM_TO_UINT32((CHAR *)(pucReceivedData + HCI_DATA_HEADER_SIZE), BSD_RECV_FROM_FROMLEN_OFFSET, *(UINT32 *)fromlen);
    12be:	c4 01       	movw	r24, r8
    12c0:	05 96       	adiw	r24, 0x05	; 5
    12c2:	64 e0       	ldi	r22, 0x04	; 4
    12c4:	70 e0       	ldi	r23, 0x00	; 0
    12c6:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <STREAM_TO_UINT32_f>
    12ca:	46 2f       	mov	r20, r22
    12cc:	f3 01       	movw	r30, r6
    12ce:	60 83       	st	Z, r22
    12d0:	71 83       	std	Z+1, r23	; 0x01
    12d2:	82 83       	std	Z+2, r24	; 0x02
    12d4:	93 83       	std	Z+3, r25	; 0x03
					memcpy(from, (pucReceivedData + HCI_DATA_HEADER_SIZE + BSD_RECV_FROM_FROM_OFFSET) ,*fromlen);
    12d6:	94 01       	movw	r18, r8
    12d8:	2b 5e       	subi	r18, 0xEB	; 235
    12da:	3f 4f       	sbci	r19, 0xFF	; 255
    12dc:	c2 01       	movw	r24, r4
    12de:	b9 01       	movw	r22, r18
    12e0:	50 e0       	ldi	r21, 0x00	; 0
    12e2:	0e 94 7e 33 	call	0x66fc	; 0x66fc <memcpy>
				}

				memcpy(pRetParams, pucReceivedParams + HCI_DATA_HEADER_SIZE + ucArgsize,
					usLength - ucArgsize);
    12e6:	20 2f       	mov	r18, r16
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	fe 01       	movw	r30, r28
    12ec:	e2 1b       	sub	r30, r18
    12ee:	f3 0b       	sbc	r31, r19
    12f0:	2b 5f       	subi	r18, 0xFB	; 251
    12f2:	3f 4f       	sbci	r19, 0xFF	; 255
    12f4:	28 0d       	add	r18, r8
    12f6:	39 1d       	adc	r19, r9
    12f8:	c6 01       	movw	r24, r12
    12fa:	b9 01       	movw	r22, r18
    12fc:	af 01       	movw	r20, r30
    12fe:	0e 94 7e 33 	call	0x66fc	; 0x66fc <memcpy>

				tSLInformation.usRxDataPending = 0;
    1302:	10 92 01 02 	sts	0x0201, r1
    1306:	10 92 00 02 	sts	0x0200, r1
			}

			tSLInformation.usEventOrDataReceived = 0;
    130a:	10 92 e1 01 	sts	0x01E1, r1
    130e:	10 92 e0 01 	sts	0x01E0, r1

			SpiResumeSpi();
    1312:	0e 94 83 22 	call	0x4506	; 0x4506 <_Z12SpiResumeSpiv>

			// Since we are going to TX - we need to handle this event after the 
			// ResumeSPi since we need interrupts
			if ((*pucReceivedData == HCI_TYPE_EVNT) &&
    1316:	d4 01       	movw	r26, r8
    1318:	8c 91       	ld	r24, X
    131a:	84 30       	cpi	r24, 0x04	; 4
    131c:	41 f4       	brne	.+16     	; 0x132e <hci_event_handler+0x652>
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	ab 16       	cp	r10, r27
    1322:	b0 e1       	ldi	r27, 0x10	; 16
    1324:	bb 06       	cpc	r11, r27
    1326:	19 f4       	brne	.+6      	; 0x132e <hci_event_handler+0x652>
				(usReceivedEventOpcode == HCI_EVNT_PATCHES_REQ))
			{
				hci_unsol_handle_patch_request((CHAR *)pucReceivedData);
    1328:	c4 01       	movw	r24, r8
    132a:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <_Z30hci_unsol_handle_patch_requestPc>
			}

			if ((tSLInformation.usRxEventOpcode == 0) && (tSLInformation.usRxDataPending == 0))
    132e:	80 91 de 01 	lds	r24, 0x01DE
    1332:	90 91 df 01 	lds	r25, 0x01DF
    1336:	89 2b       	or	r24, r25
    1338:	09 f0       	breq	.+2      	; 0x133c <hci_event_handler+0x660>
    133a:	e5 cc       	rjmp	.-1590   	; 0xd06 <hci_event_handler+0x2a>
    133c:	80 91 00 02 	lds	r24, 0x0200
    1340:	90 91 01 02 	lds	r25, 0x0201
    1344:	89 2b       	or	r24, r25
    1346:	09 f0       	breq	.+2      	; 0x134a <hci_event_handler+0x66e>
    1348:	de cc       	rjmp	.-1604   	; 0xd06 <hci_event_handler+0x2a>
				return NULL;
			}	
		}
	}

}
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	df 91       	pop	r29
    1350:	cf 91       	pop	r28
    1352:	1f 91       	pop	r17
    1354:	0f 91       	pop	r16
    1356:	ff 90       	pop	r15
    1358:	ef 90       	pop	r14
    135a:	df 90       	pop	r13
    135c:	cf 90       	pop	r12
    135e:	bf 90       	pop	r11
    1360:	af 90       	pop	r10
    1362:	9f 90       	pop	r9
    1364:	8f 90       	pop	r8
    1366:	7f 90       	pop	r7
    1368:	6f 90       	pop	r6
    136a:	5f 90       	pop	r5
    136c:	4f 90       	pop	r4
    136e:	08 95       	ret

00001370 <SimpleLinkWaitData>:

void SimpleLinkWaitData(UINT8 *pBuf, UINT8 *from, UINT8 *fromlen)
{
	// In the blocking implementation the control to caller will be returned only 
	// after the end of current transaction, i.e. only after data will be received
	tSLInformation.usRxDataPending = 1;
    1370:	21 e0       	ldi	r18, 0x01	; 1
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	30 93 01 02 	sts	0x0201, r19
    1378:	20 93 00 02 	sts	0x0200, r18
	hci_event_handler(pBuf, from, fromlen);
    137c:	0e 94 6e 06 	call	0xcdc	; 0xcdc <hci_event_handler>
}
    1380:	08 95       	ret

00001382 <SimpleLinkWaitEvent>:

void SimpleLinkWaitEvent(UINT16 usOpcode, void *pRetParams)
{
	// In the blocking implementation the control to caller will be returned only 
	// after the end of current transaction
	tSLInformation.usRxEventOpcode = usOpcode;
    1382:	90 93 df 01 	sts	0x01DF, r25
    1386:	80 93 de 01 	sts	0x01DE, r24
	hci_event_handler(pRetParams, 0, 0);
    138a:	cb 01       	movw	r24, r22
    138c:	60 e0       	ldi	r22, 0x00	; 0
    138e:	70 e0       	ldi	r23, 0x00	; 0
    1390:	40 e0       	ldi	r20, 0x00	; 0
    1392:	50 e0       	ldi	r21, 0x00	; 0
    1394:	0e 94 6e 06 	call	0xcdc	; 0xcdc <hci_event_handler>
}
    1398:	08 95       	ret

0000139a <hci_data_send>:
INT32 hci_data_send(UINT8 ucOpcode, 
	UINT8 *ucArgs,
	UINT16 usArgsLength, 
	UINT16 usDataLength,
	const UINT8 *ucTail,
	UINT16 usTailLength)
    139a:	cf 92       	push	r12
    139c:	df 92       	push	r13
    139e:	ef 92       	push	r14
    13a0:	ff 92       	push	r15
    13a2:	0f 93       	push	r16
    13a4:	1f 93       	push	r17
    13a6:	6b 01       	movw	r12, r22
    13a8:	89 01       	movw	r16, r18
{
	UINT8 *stream;

	stream = ((ucArgs) + SPI_HEADER_SIZE);

	UINT8_TO_STREAM(stream, HCI_TYPE_DATA);
    13aa:	92 e0       	ldi	r25, 0x02	; 2
    13ac:	fb 01       	movw	r30, r22
    13ae:	95 83       	std	Z+5, r25	; 0x05
	UINT8_TO_STREAM(stream, ucOpcode);
    13b0:	86 83       	std	Z+6, r24	; 0x06
	UINT8_TO_STREAM(stream, usArgsLength);
    13b2:	47 83       	std	Z+7, r20	; 0x07
	stream = UINT16_TO_STREAM(stream, usArgsLength + usDataLength + usTailLength);
    13b4:	04 0f       	add	r16, r20
    13b6:	15 1f       	adc	r17, r21
    13b8:	0e 0d       	add	r16, r14
    13ba:	1f 1d       	adc	r17, r15
    13bc:	cb 01       	movw	r24, r22
    13be:	08 96       	adiw	r24, 0x08	; 8
    13c0:	b8 01       	movw	r22, r16
    13c2:	0e 94 be 02 	call	0x57c	; 0x57c <UINT16_TO_STREAM_f>

	// Send the packet over the SPI
	SpiWrite(ucArgs, SIMPLE_LINK_HCI_DATA_HEADER_SIZE + usArgsLength + usDataLength + usTailLength);
    13c6:	0b 5f       	subi	r16, 0xFB	; 251
    13c8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ca:	c6 01       	movw	r24, r12
    13cc:	b8 01       	movw	r22, r16
    13ce:	0e 94 3f 24 	call	0x487e	; 0x487e <_Z8SpiWritePht>

	return(ESUCCESS);
}
    13d2:	60 e0       	ldi	r22, 0x00	; 0
    13d4:	70 e0       	ldi	r23, 0x00	; 0
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	1f 91       	pop	r17
    13dc:	0f 91       	pop	r16
    13de:	ff 90       	pop	r15
    13e0:	ef 90       	pop	r14
    13e2:	df 90       	pop	r13
    13e4:	cf 90       	pop	r12
    13e6:	08 95       	ret

000013e8 <hci_command_send>:
//!  @return              none
//!
//!  @brief               Initiate an HCI command.
//
//*****************************************************************************
UINT16 hci_command_send(UINT16 usOpcode, UINT8 *pucBuff, UINT8 ucArgsLength)
    13e8:	ef 92       	push	r14
    13ea:	ff 92       	push	r15
    13ec:	0f 93       	push	r16
    13ee:	1f 93       	push	r17
    13f0:	9c 01       	movw	r18, r24
    13f2:	7b 01       	movw	r14, r22
    13f4:	04 2f       	mov	r16, r20
{ 
	UINT8 *stream;

	stream = (pucBuff + SPI_HEADER_SIZE);

	UINT8_TO_STREAM(stream, HCI_TYPE_CMND);
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	fb 01       	movw	r30, r22
    13fa:	85 83       	std	Z+5, r24	; 0x05
	stream = UINT16_TO_STREAM(stream, usOpcode);
    13fc:	cb 01       	movw	r24, r22
    13fe:	06 96       	adiw	r24, 0x06	; 6
    1400:	b9 01       	movw	r22, r18
    1402:	0e 94 be 02 	call	0x57c	; 0x57c <UINT16_TO_STREAM_f>
    1406:	fc 01       	movw	r30, r24
	UINT8_TO_STREAM(stream, ucArgsLength);
    1408:	00 83       	st	Z, r16

	//Update the opcode of the event we will be waiting for
	SpiWrite(pucBuff, ucArgsLength + SIMPLE_LINK_HCI_CMND_HEADER_SIZE);
    140a:	10 e0       	ldi	r17, 0x00	; 0
    140c:	0c 5f       	subi	r16, 0xFC	; 252
    140e:	1f 4f       	sbci	r17, 0xFF	; 255
    1410:	c7 01       	movw	r24, r14
    1412:	b8 01       	movw	r22, r16
    1414:	0e 94 3f 24 	call	0x487e	; 0x487e <_Z8SpiWritePht>

	return(0);
}
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	1f 91       	pop	r17
    141e:	0f 91       	pop	r16
    1420:	ff 90       	pop	r15
    1422:	ef 90       	pop	r14
    1424:	08 95       	ret

00001426 <hci_patch_send>:
//!  @return              none
//!
//!  @brief               Prepeare HCI header and initiate an HCI patch write operation
//
//*****************************************************************************
void hci_patch_send(UINT8 ucOpcode, UINT8 *pucBuff, CHAR *patch, UINT16 usDataLength)
    1426:	4f 92       	push	r4
    1428:	5f 92       	push	r5
    142a:	6f 92       	push	r6
    142c:	7f 92       	push	r7
    142e:	8f 92       	push	r8
    1430:	9f 92       	push	r9
    1432:	af 92       	push	r10
    1434:	bf 92       	push	r11
    1436:	cf 92       	push	r12
    1438:	df 92       	push	r13
    143a:	ef 92       	push	r14
    143c:	ff 92       	push	r15
    143e:	0f 93       	push	r16
    1440:	1f 93       	push	r17
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    1446:	6b 01       	movw	r12, r22
    1448:	4a 01       	movw	r8, r20
    144a:	e9 01       	movw	r28, r18
{ 
	UINT8 *data_ptr = (pucBuff + SPI_HEADER_SIZE);
    144c:	45 e0       	ldi	r20, 0x05	; 5
    144e:	44 2e       	mov	r4, r20
    1450:	51 2c       	mov	r5, r1
    1452:	46 0e       	add	r4, r22
    1454:	57 1e       	adc	r5, r23
	UINT16 usTransLength;
	UINT8 *stream = (pucBuff + SPI_HEADER_SIZE);

	UINT8_TO_STREAM(stream, HCI_TYPE_PATCH);
    1456:	93 e0       	ldi	r25, 0x03	; 3
    1458:	fb 01       	movw	r30, r22
    145a:	95 83       	std	Z+5, r25	; 0x05
	UINT8_TO_STREAM(stream, ucOpcode);
    145c:	86 83       	std	Z+6, r24	; 0x06
    145e:	37 e0       	ldi	r19, 0x07	; 7
    1460:	63 2e       	mov	r6, r19
    1462:	71 2c       	mov	r7, r1
    1464:	66 0e       	add	r6, r22
    1466:	77 1e       	adc	r7, r23
	stream = UINT16_TO_STREAM(stream, usDataLength + SIMPLE_LINK_HCI_PATCH_HEADER_SIZE);
    1468:	8e 01       	movw	r16, r28
    146a:	0e 5f       	subi	r16, 0xFE	; 254
    146c:	1f 4f       	sbci	r17, 0xFF	; 255
    146e:	c3 01       	movw	r24, r6
    1470:	b8 01       	movw	r22, r16
    1472:	0e 94 be 02 	call	0x57c	; 0x57c <UINT16_TO_STREAM_f>
    1476:	7c 01       	movw	r14, r24
    1478:	2b e0       	ldi	r18, 0x0B	; 11
    147a:	a2 2e       	mov	r10, r18
    147c:	b1 2c       	mov	r11, r1
    147e:	ac 0c       	add	r10, r12
    1480:	bd 1c       	adc	r11, r13

	if (usDataLength <= SL_PATCH_PORTION_SIZE)
    1482:	f3 e0       	ldi	r31, 0x03	; 3
    1484:	c9 3e       	cpi	r28, 0xE9	; 233
    1486:	df 07       	cpc	r29, r31
    1488:	90 f4       	brcc	.+36     	; 0x14ae <hci_patch_send+0x88>
	{
		UINT16_TO_STREAM(stream, usDataLength);
    148a:	be 01       	movw	r22, r28
    148c:	0e 94 be 02 	call	0x57c	; 0x57c <UINT16_TO_STREAM_f>
		stream = UINT16_TO_STREAM(stream, usDataLength);
    1490:	c7 01       	movw	r24, r14
    1492:	be 01       	movw	r22, r28
    1494:	0e 94 be 02 	call	0x57c	; 0x57c <UINT16_TO_STREAM_f>
		memcpy((pucBuff + SPI_HEADER_SIZE) + HCI_PATCH_HEADER_SIZE, patch, usDataLength);
    1498:	c5 01       	movw	r24, r10
    149a:	b4 01       	movw	r22, r8
    149c:	ae 01       	movw	r20, r28
    149e:	0e 94 7e 33 	call	0x66fc	; 0x66fc <memcpy>

		// Update the opcode of the event we will be waiting for
		SpiWrite(pucBuff, usDataLength + HCI_PATCH_HEADER_SIZE);
    14a2:	26 96       	adiw	r28, 0x06	; 6
    14a4:	c6 01       	movw	r24, r12
    14a6:	be 01       	movw	r22, r28
    14a8:	0e 94 3f 24 	call	0x487e	; 0x487e <_Z8SpiWritePht>
    14ac:	47 c0       	rjmp	.+142    	; 0x153c <hci_patch_send+0x116>
	}
	else
	{

		usTransLength = (usDataLength/SL_PATCH_PORTION_SIZE);
		UINT16_TO_STREAM(stream, usDataLength + SIMPLE_LINK_HCI_PATCH_HEADER_SIZE + usTransLength*SIMPLE_LINK_HCI_PATCH_HEADER_SIZE);
    14ae:	ce 01       	movw	r24, r28
    14b0:	68 ee       	ldi	r22, 0xE8	; 232
    14b2:	73 e0       	ldi	r23, 0x03	; 3
    14b4:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <__udivmodhi4>
    14b8:	66 0f       	add	r22, r22
    14ba:	77 1f       	adc	r23, r23
    14bc:	06 0f       	add	r16, r22
    14be:	17 1f       	adc	r17, r23
    14c0:	c7 01       	movw	r24, r14
    14c2:	b8 01       	movw	r22, r16
    14c4:	0e 94 be 02 	call	0x57c	; 0x57c <UINT16_TO_STREAM_f>
		stream = UINT16_TO_STREAM(stream, SL_PATCH_PORTION_SIZE);
    14c8:	c7 01       	movw	r24, r14
    14ca:	68 ee       	ldi	r22, 0xE8	; 232
    14cc:	73 e0       	ldi	r23, 0x03	; 3
    14ce:	0e 94 be 02 	call	0x57c	; 0x57c <UINT16_TO_STREAM_f>
		memcpy(pucBuff + SPI_HEADER_SIZE + HCI_PATCH_HEADER_SIZE, patch, SL_PATCH_PORTION_SIZE);
    14d2:	d5 01       	movw	r26, r10
    14d4:	f4 01       	movw	r30, r8
    14d6:	88 ee       	ldi	r24, 0xE8	; 232
    14d8:	93 e0       	ldi	r25, 0x03	; 3
    14da:	01 90       	ld	r0, Z+
    14dc:	0d 92       	st	X+, r0
    14de:	01 97       	sbiw	r24, 0x01	; 1
    14e0:	e1 f7       	brne	.-8      	; 0x14da <hci_patch_send+0xb4>
		usDataLength -= SL_PATCH_PORTION_SIZE;
    14e2:	8e 01       	movw	r16, r28
    14e4:	08 5e       	subi	r16, 0xE8	; 232
    14e6:	13 40       	sbci	r17, 0x03	; 3
		patch += SL_PATCH_PORTION_SIZE;
    14e8:	88 ee       	ldi	r24, 0xE8	; 232
    14ea:	e8 2e       	mov	r14, r24
    14ec:	83 e0       	ldi	r24, 0x03	; 3
    14ee:	f8 2e       	mov	r15, r24
    14f0:	e8 0c       	add	r14, r8
    14f2:	f9 1c       	adc	r15, r9

		// Update the opcode of the event we will be waiting for
		SpiWrite(pucBuff, SL_PATCH_PORTION_SIZE + HCI_PATCH_HEADER_SIZE);
    14f4:	c6 01       	movw	r24, r12
    14f6:	6e ee       	ldi	r22, 0xEE	; 238
    14f8:	73 e0       	ldi	r23, 0x03	; 3
    14fa:	1b c0       	rjmp	.+54     	; 0x1532 <hci_patch_send+0x10c>
		while (usDataLength)
		{
			// Adafruit CC3k Host Driver Difference
			// Check for missed interrupt to try to make code more reliable.
			// Noted 12-12-2014 by tdicola
			cc3k_int_poll();
    14fc:	0e 94 b9 23 	call	0x4772	; 0x4772 <cc3k_int_poll>

			if (usDataLength <= SL_PATCH_PORTION_SIZE)
    1500:	83 e0       	ldi	r24, 0x03	; 3
    1502:	09 3e       	cpi	r16, 0xE9	; 233
    1504:	18 07       	cpc	r17, r24
    1506:	20 f4       	brcc	.+8      	; 0x1510 <hci_patch_send+0xea>
    1508:	e8 01       	movw	r28, r16
    150a:	00 e0       	ldi	r16, 0x00	; 0
    150c:	10 e0       	ldi	r17, 0x00	; 0
    150e:	04 c0       	rjmp	.+8      	; 0x1518 <hci_patch_send+0xf2>

			}
			else
			{
				usTransLength = SL_PATCH_PORTION_SIZE;
				usDataLength -= usTransLength;
    1510:	08 5e       	subi	r16, 0xE8	; 232
    1512:	13 40       	sbci	r17, 0x03	; 3
    1514:	c8 ee       	ldi	r28, 0xE8	; 232
    1516:	d3 e0       	ldi	r29, 0x03	; 3
			}

			*(UINT16 *)data_ptr = usTransLength;
    1518:	f2 01       	movw	r30, r4
    151a:	d1 83       	std	Z+1, r29	; 0x01
    151c:	c0 83       	st	Z, r28
			memcpy(data_ptr + SIMPLE_LINK_HCI_PATCH_HEADER_SIZE, patch, usTransLength);
    151e:	c3 01       	movw	r24, r6
    1520:	b7 01       	movw	r22, r14
    1522:	ae 01       	movw	r20, r28
    1524:	0e 94 7e 33 	call	0x66fc	; 0x66fc <memcpy>
			patch += usTransLength;
    1528:	ec 0e       	add	r14, r28
    152a:	fd 1e       	adc	r15, r29

			// Update the opcode of the event we will be waiting for
			SpiWrite((UINT8 *)data_ptr, usTransLength + sizeof(usTransLength));
    152c:	22 96       	adiw	r28, 0x02	; 2
    152e:	c2 01       	movw	r24, r4
    1530:	be 01       	movw	r22, r28
    1532:	0e 94 3f 24 	call	0x487e	; 0x487e <_Z8SpiWritePht>
		patch += SL_PATCH_PORTION_SIZE;

		// Update the opcode of the event we will be waiting for
		SpiWrite(pucBuff, SL_PATCH_PORTION_SIZE + HCI_PATCH_HEADER_SIZE);

		while (usDataLength)
    1536:	01 15       	cp	r16, r1
    1538:	11 05       	cpc	r17, r1
    153a:	01 f7       	brne	.-64     	; 0x14fc <hci_patch_send+0xd6>

			// Update the opcode of the event we will be waiting for
			SpiWrite((UINT8 *)data_ptr, usTransLength + sizeof(usTransLength));
		}
	}
}
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	1f 91       	pop	r17
    1542:	0f 91       	pop	r16
    1544:	ff 90       	pop	r15
    1546:	ef 90       	pop	r14
    1548:	df 90       	pop	r13
    154a:	cf 90       	pop	r12
    154c:	bf 90       	pop	r11
    154e:	af 90       	pop	r10
    1550:	9f 90       	pop	r9
    1552:	8f 90       	pop	r8
    1554:	7f 90       	pop	r7
    1556:	6f 90       	pop	r6
    1558:	5f 90       	pop	r5
    155a:	4f 90       	pop	r4
    155c:	08 95       	ret

0000155e <netapp_ipconfig>:
//!       		the Wireless network the device is associated with.
//!
//*****************************************************************************

#ifndef CC3000_TINY_DRIVER
void netapp_ipconfig( tNetappIpconfigRetArgs * ipconfig )
    155e:	0f 93       	push	r16
    1560:	1f 93       	push	r17
    1562:	8c 01       	movw	r16, r24
{
	UINT8 *ptr;

	ptr = tSLInformation.pucTxCommandBuffer;
    1564:	60 91 e4 01 	lds	r22, 0x01E4
    1568:	70 91 e5 01 	lds	r23, 0x01E5

	// Initiate a HCI command
	hci_command_send(HCI_NETAPP_IPCONFIG, ptr, 0);
    156c:	85 e0       	ldi	r24, 0x05	; 5
    156e:	90 e2       	ldi	r25, 0x20	; 32
    1570:	40 e0       	ldi	r20, 0x00	; 0
    1572:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <hci_command_send>

	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_NETAPP_IPCONFIG, ipconfig );
    1576:	85 e0       	ldi	r24, 0x05	; 5
    1578:	90 e2       	ldi	r25, 0x20	; 32
    157a:	b8 01       	movw	r22, r16
    157c:	0e 94 c1 09 	call	0x1382	; 0x1382 <SimpleLinkWaitEvent>

}
    1580:	1f 91       	pop	r17
    1582:	0f 91       	pop	r16
    1584:	08 95       	ret

00001586 <netapp_timeout_values>:
//!               it will be set automatically to 10s.
//!
//*****************************************************************************

#ifndef CC3000_TINY_DRIVER
INT32 netapp_timeout_values(UINT32 *aucDHCP, UINT32 *aucARP,UINT32 *aucKeepalive,	UINT32 *aucInactivity)
    1586:	8f 92       	push	r8
    1588:	9f 92       	push	r9
    158a:	af 92       	push	r10
    158c:	bf 92       	push	r11
    158e:	cf 92       	push	r12
    1590:	df 92       	push	r13
    1592:	ef 92       	push	r14
    1594:	ff 92       	push	r15
    1596:	0f 93       	push	r16
    1598:	1f 93       	push	r17
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	0f 92       	push	r0
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	4c 01       	movw	r8, r24
    15a6:	8b 01       	movw	r16, r22
    15a8:	7a 01       	movw	r14, r20
    15aa:	69 01       	movw	r12, r18
{
	INT8 scRet;
	UINT8 *ptr;
	UINT8 *args;

	scRet = EFAIL;
    15ac:	8f ef       	ldi	r24, 0xFF	; 255
    15ae:	89 83       	std	Y+1, r24	; 0x01
	ptr = tSLInformation.pucTxCommandBuffer;
    15b0:	a0 90 e4 01 	lds	r10, 0x01E4
    15b4:	b0 90 e5 01 	lds	r11, 0x01E5
	args = (ptr + HEADERS_SIZE_CMD);

	// Set minimal values of timers 
	MIN_TIMER_SET(*aucDHCP)
    15b8:	f4 01       	movw	r30, r8
    15ba:	80 81       	ld	r24, Z
    15bc:	91 81       	ldd	r25, Z+1	; 0x01
    15be:	a2 81       	ldd	r26, Z+2	; 0x02
    15c0:	b3 81       	ldd	r27, Z+3	; 0x03
    15c2:	01 97       	sbiw	r24, 0x01	; 1
    15c4:	a1 09       	sbc	r26, r1
    15c6:	b1 09       	sbc	r27, r1
    15c8:	09 97       	sbiw	r24, 0x09	; 9
    15ca:	a1 05       	cpc	r26, r1
    15cc:	b1 05       	cpc	r27, r1
    15ce:	40 f4       	brcc	.+16     	; 0x15e0 <netapp_timeout_values+0x5a>
    15d0:	8a e0       	ldi	r24, 0x0A	; 10
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	a0 e0       	ldi	r26, 0x00	; 0
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	80 83       	st	Z, r24
    15da:	91 83       	std	Z+1, r25	; 0x01
    15dc:	a2 83       	std	Z+2, r26	; 0x02
    15de:	b3 83       	std	Z+3, r27	; 0x03
		MIN_TIMER_SET(*aucARP)
    15e0:	f8 01       	movw	r30, r16
    15e2:	80 81       	ld	r24, Z
    15e4:	91 81       	ldd	r25, Z+1	; 0x01
    15e6:	a2 81       	ldd	r26, Z+2	; 0x02
    15e8:	b3 81       	ldd	r27, Z+3	; 0x03
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	a1 09       	sbc	r26, r1
    15ee:	b1 09       	sbc	r27, r1
    15f0:	09 97       	sbiw	r24, 0x09	; 9
    15f2:	a1 05       	cpc	r26, r1
    15f4:	b1 05       	cpc	r27, r1
    15f6:	40 f4       	brcc	.+16     	; 0x1608 <netapp_timeout_values+0x82>
    15f8:	8a e0       	ldi	r24, 0x0A	; 10
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	a0 e0       	ldi	r26, 0x00	; 0
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	80 83       	st	Z, r24
    1602:	91 83       	std	Z+1, r25	; 0x01
    1604:	a2 83       	std	Z+2, r26	; 0x02
    1606:	b3 83       	std	Z+3, r27	; 0x03
		MIN_TIMER_SET(*aucKeepalive)
    1608:	f7 01       	movw	r30, r14
    160a:	80 81       	ld	r24, Z
    160c:	91 81       	ldd	r25, Z+1	; 0x01
    160e:	a2 81       	ldd	r26, Z+2	; 0x02
    1610:	b3 81       	ldd	r27, Z+3	; 0x03
    1612:	01 97       	sbiw	r24, 0x01	; 1
    1614:	a1 09       	sbc	r26, r1
    1616:	b1 09       	sbc	r27, r1
    1618:	09 97       	sbiw	r24, 0x09	; 9
    161a:	a1 05       	cpc	r26, r1
    161c:	b1 05       	cpc	r27, r1
    161e:	40 f4       	brcc	.+16     	; 0x1630 <netapp_timeout_values+0xaa>
    1620:	8a e0       	ldi	r24, 0x0A	; 10
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	a0 e0       	ldi	r26, 0x00	; 0
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	80 83       	st	Z, r24
    162a:	91 83       	std	Z+1, r25	; 0x01
    162c:	a2 83       	std	Z+2, r26	; 0x02
    162e:	b3 83       	std	Z+3, r27	; 0x03
		MIN_TIMER_SET(*aucInactivity)
    1630:	f6 01       	movw	r30, r12
    1632:	80 81       	ld	r24, Z
    1634:	91 81       	ldd	r25, Z+1	; 0x01
    1636:	a2 81       	ldd	r26, Z+2	; 0x02
    1638:	b3 81       	ldd	r27, Z+3	; 0x03
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	a1 09       	sbc	r26, r1
    163e:	b1 09       	sbc	r27, r1
    1640:	09 97       	sbiw	r24, 0x09	; 9
    1642:	a1 05       	cpc	r26, r1
    1644:	b1 05       	cpc	r27, r1
    1646:	40 f4       	brcc	.+16     	; 0x1658 <netapp_timeout_values+0xd2>
    1648:	8a e0       	ldi	r24, 0x0A	; 10
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	a0 e0       	ldi	r26, 0x00	; 0
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	80 83       	st	Z, r24
    1652:	91 83       	std	Z+1, r25	; 0x01
    1654:	a2 83       	std	Z+2, r26	; 0x02
    1656:	b3 83       	std	Z+3, r27	; 0x03

		// Fill in temporary command buffer
		args = UINT32_TO_STREAM(args, *aucDHCP);
    1658:	f4 01       	movw	r30, r8
    165a:	40 81       	ld	r20, Z
    165c:	51 81       	ldd	r21, Z+1	; 0x01
    165e:	62 81       	ldd	r22, Z+2	; 0x02
    1660:	73 81       	ldd	r23, Z+3	; 0x03
    1662:	c5 01       	movw	r24, r10
    1664:	09 96       	adiw	r24, 0x09	; 9
    1666:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, *aucARP);
    166a:	f8 01       	movw	r30, r16
    166c:	40 81       	ld	r20, Z
    166e:	51 81       	ldd	r21, Z+1	; 0x01
    1670:	62 81       	ldd	r22, Z+2	; 0x02
    1672:	73 81       	ldd	r23, Z+3	; 0x03
    1674:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, *aucKeepalive);
    1678:	f7 01       	movw	r30, r14
    167a:	40 81       	ld	r20, Z
    167c:	51 81       	ldd	r21, Z+1	; 0x01
    167e:	62 81       	ldd	r22, Z+2	; 0x02
    1680:	73 81       	ldd	r23, Z+3	; 0x03
    1682:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, *aucInactivity);
    1686:	f6 01       	movw	r30, r12
    1688:	40 81       	ld	r20, Z
    168a:	51 81       	ldd	r21, Z+1	; 0x01
    168c:	62 81       	ldd	r22, Z+2	; 0x02
    168e:	73 81       	ldd	r23, Z+3	; 0x03
    1690:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>

	// Initiate a HCI command
	hci_command_send(HCI_NETAPP_SET_TIMERS, ptr, NETAPP_SET_TIMER_PARAMS_LEN);
    1694:	89 e0       	ldi	r24, 0x09	; 9
    1696:	90 e2       	ldi	r25, 0x20	; 32
    1698:	b5 01       	movw	r22, r10
    169a:	44 e1       	ldi	r20, 0x14	; 20
    169c:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <hci_command_send>

	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_NETAPP_SET_TIMERS, &scRet);
    16a0:	89 e0       	ldi	r24, 0x09	; 9
    16a2:	90 e2       	ldi	r25, 0x20	; 32
    16a4:	be 01       	movw	r22, r28
    16a6:	6f 5f       	subi	r22, 0xFF	; 255
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	0e 94 c1 09 	call	0x1382	; 0x1382 <SimpleLinkWaitEvent>
    16ae:	29 81       	ldd	r18, Y+1	; 0x01
    16b0:	33 27       	eor	r19, r19
    16b2:	27 fd       	sbrc	r18, 7
    16b4:	30 95       	com	r19
    16b6:	43 2f       	mov	r20, r19
    16b8:	53 2f       	mov	r21, r19

	return(scRet);
}
    16ba:	b9 01       	movw	r22, r18
    16bc:	ca 01       	movw	r24, r20
    16be:	0f 90       	pop	r0
    16c0:	cf 91       	pop	r28
    16c2:	df 91       	pop	r29
    16c4:	1f 91       	pop	r17
    16c6:	0f 91       	pop	r16
    16c8:	ff 90       	pop	r15
    16ca:	ef 90       	pop	r14
    16cc:	df 90       	pop	r13
    16ce:	cf 90       	pop	r12
    16d0:	bf 90       	pop	r11
    16d2:	af 90       	pop	r10
    16d4:	9f 90       	pop	r9
    16d6:	8f 90       	pop	r8
    16d8:	08 95       	ret

000016da <mdnsAdvertiser>:
//!
//!  @brief    Set CC3000 in mDNS advertiser mode in order to advertise itself.
//
//*****************************************************************************

INT16 mdnsAdvertiser(UINT16 mdnsEnabled, CHAR * deviceServiceName, UINT16 deviceServiceNameLength)
    16da:	cf 92       	push	r12
    16dc:	df 92       	push	r13
    16de:	ef 92       	push	r14
    16e0:	ff 92       	push	r15
    16e2:	0f 93       	push	r16
    16e4:	1f 93       	push	r17
    16e6:	df 93       	push	r29
    16e8:	cf 93       	push	r28
    16ea:	0f 92       	push	r0
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
    16f0:	d6 2e       	mov	r13, r22
    16f2:	c7 2e       	mov	r12, r23
    16f4:	8a 01       	movw	r16, r20
{
	INT8 ret;
	UINT8 *pTxBuffer, *pArgs;

	if (deviceServiceNameLength > MDNS_DEVICE_SERVICE_MAX_LENGTH)
    16f6:	41 32       	cpi	r20, 0x21	; 33
    16f8:	51 05       	cpc	r21, r1
    16fa:	18 f0       	brcs	.+6      	; 0x1702 <mdnsAdvertiser+0x28>
    16fc:	2f ef       	ldi	r18, 0xFF	; 255
    16fe:	3f ef       	ldi	r19, 0xFF	; 255
    1700:	36 c0       	rjmp	.+108    	; 0x176e <mdnsAdvertiser+0x94>
	{
		return EFAIL;
	}

	pTxBuffer = tSLInformation.pucTxCommandBuffer;
    1702:	e0 90 e4 01 	lds	r14, 0x01E4
    1706:	f0 90 e5 01 	lds	r15, 0x01E5
	pArgs = (pTxBuffer + SIMPLE_LINK_HCI_CMND_TRANSPORT_HEADER_SIZE);

	// Fill in HCI packet structure
	pArgs = UINT32_TO_STREAM(pArgs, mdnsEnabled);
    170a:	ac 01       	movw	r20, r24
    170c:	60 e0       	ldi	r22, 0x00	; 0
    170e:	70 e0       	ldi	r23, 0x00	; 0
    1710:	c7 01       	movw	r24, r14
    1712:	09 96       	adiw	r24, 0x09	; 9
    1714:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	pArgs = UINT32_TO_STREAM(pArgs, 8);
    1718:	48 e0       	ldi	r20, 0x08	; 8
    171a:	50 e0       	ldi	r21, 0x00	; 0
    171c:	60 e0       	ldi	r22, 0x00	; 0
    171e:	70 e0       	ldi	r23, 0x00	; 0
    1720:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	pArgs = UINT32_TO_STREAM(pArgs, deviceServiceNameLength);
    1724:	a8 01       	movw	r20, r16
    1726:	60 e0       	ldi	r22, 0x00	; 0
    1728:	70 e0       	ldi	r23, 0x00	; 0
    172a:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
    172e:	dc 01       	movw	r26, r24
    1730:	8d 2d       	mov	r24, r13
    1732:	9c 2d       	mov	r25, r12
    1734:	fc 01       	movw	r30, r24
	ARRAY_TO_STREAM(pArgs, deviceServiceName, deviceServiceNameLength);
    1736:	9f 01       	movw	r18, r30
    1738:	20 0f       	add	r18, r16
    173a:	31 1f       	adc	r19, r17
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <mdnsAdvertiser+0x68>
    173e:	81 91       	ld	r24, Z+
    1740:	8d 93       	st	X+, r24
    1742:	e2 17       	cp	r30, r18
    1744:	f3 07       	cpc	r31, r19
    1746:	d9 f7       	brne	.-10     	; 0x173e <mdnsAdvertiser+0x64>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_MDNS_ADVERTISE, pTxBuffer, SOCKET_MDNS_ADVERTISE_PARAMS_LEN + deviceServiceNameLength);
    1748:	40 2f       	mov	r20, r16
    174a:	44 5f       	subi	r20, 0xF4	; 244
    174c:	81 e1       	ldi	r24, 0x11	; 17
    174e:	90 e1       	ldi	r25, 0x10	; 16
    1750:	b7 01       	movw	r22, r14
    1752:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_EVNT_MDNS_ADVERTISE, &ret);
    1756:	81 e1       	ldi	r24, 0x11	; 17
    1758:	90 e1       	ldi	r25, 0x10	; 16
    175a:	be 01       	movw	r22, r28
    175c:	6f 5f       	subi	r22, 0xFF	; 255
    175e:	7f 4f       	sbci	r23, 0xFF	; 255
    1760:	0e 94 c1 09 	call	0x1382	; 0x1382 <SimpleLinkWaitEvent>

	return ret;
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	28 2f       	mov	r18, r24
    1768:	33 27       	eor	r19, r19
    176a:	27 fd       	sbrc	r18, 7
    176c:	30 95       	com	r19

}
    176e:	c9 01       	movw	r24, r18
    1770:	0f 90       	pop	r0
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	1f 91       	pop	r17
    1778:	0f 91       	pop	r16
    177a:	ff 90       	pop	r15
    177c:	ef 90       	pop	r14
    177e:	df 90       	pop	r13
    1780:	cf 90       	pop	r12
    1782:	08 95       	ret

00001784 <setsockopt>:
//
//*****************************************************************************

#ifndef CC3000_TINY_DRIVER
INT16 setsockopt(INT32 sd, INT32 level, INT32 optname, const void *optval,
	socklen_t optlen)
    1784:	2f 92       	push	r2
    1786:	3f 92       	push	r3
    1788:	4f 92       	push	r4
    178a:	5f 92       	push	r5
    178c:	6f 92       	push	r6
    178e:	7f 92       	push	r7
    1790:	8f 92       	push	r8
    1792:	9f 92       	push	r9
    1794:	af 92       	push	r10
    1796:	bf 92       	push	r11
    1798:	cf 92       	push	r12
    179a:	df 92       	push	r13
    179c:	ef 92       	push	r14
    179e:	ff 92       	push	r15
    17a0:	0f 93       	push	r16
    17a2:	1f 93       	push	r17
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
    17ac:	28 97       	sbiw	r28, 0x08	; 8
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	f8 94       	cli
    17b2:	de bf       	out	0x3e, r29	; 62
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	cd bf       	out	0x3d, r28	; 61
    17b8:	2b 01       	movw	r4, r22
    17ba:	3c 01       	movw	r6, r24
    17bc:	2d 83       	std	Y+5, r18	; 0x05
    17be:	3e 83       	std	Y+6, r19	; 0x06
    17c0:	4f 83       	std	Y+7, r20	; 0x07
    17c2:	58 87       	std	Y+8, r21	; 0x08
    17c4:	16 01       	movw	r2, r12
{
	INT32 ret;
	UINT8 *ptr, *args;

	ptr = tSLInformation.pucTxCommandBuffer;
    17c6:	c0 90 e4 01 	lds	r12, 0x01E4
    17ca:	d0 90 e5 01 	lds	r13, 0x01E5
	args = (ptr + HEADERS_SIZE_CMD);

	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, sd);
    17ce:	c6 01       	movw	r24, r12
    17d0:	09 96       	adiw	r24, 0x09	; 9
    17d2:	b3 01       	movw	r22, r6
    17d4:	a2 01       	movw	r20, r4
    17d6:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, level);
    17da:	4d 81       	ldd	r20, Y+5	; 0x05
    17dc:	5e 81       	ldd	r21, Y+6	; 0x06
    17de:	6f 81       	ldd	r22, Y+7	; 0x07
    17e0:	78 85       	ldd	r23, Y+8	; 0x08
    17e2:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, optname);
    17e6:	b8 01       	movw	r22, r16
    17e8:	a7 01       	movw	r20, r14
    17ea:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, 0x00000008);
    17ee:	48 e0       	ldi	r20, 0x08	; 8
    17f0:	50 e0       	ldi	r21, 0x00	; 0
    17f2:	60 e0       	ldi	r22, 0x00	; 0
    17f4:	70 e0       	ldi	r23, 0x00	; 0
    17f6:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, optlen);
    17fa:	b5 01       	movw	r22, r10
    17fc:	a4 01       	movw	r20, r8
    17fe:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
    1802:	bc 01       	movw	r22, r24
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	40 e0       	ldi	r20, 0x00	; 0
    180a:	50 e0       	ldi	r21, 0x00	; 0
    180c:	0c c0       	rjmp	.+24     	; 0x1826 <setsockopt+0xa2>
//
//*****************************************************************************

#ifndef CC3000_TINY_DRIVER
INT16 setsockopt(INT32 sd, INT32 level, INT32 optname, const void *optval,
	socklen_t optlen)
    180e:	f9 01       	movw	r30, r18
	args = UINT32_TO_STREAM(args, sd);
	args = UINT32_TO_STREAM(args, level);
	args = UINT32_TO_STREAM(args, optname);
	args = UINT32_TO_STREAM(args, 0x00000008);
	args = UINT32_TO_STREAM(args, optlen);
	ARRAY_TO_STREAM(args, ((UINT8 *)optval), optlen);
    1810:	db 01       	movw	r26, r22
    1812:	a2 0f       	add	r26, r18
    1814:	b3 1f       	adc	r27, r19
    1816:	e2 0d       	add	r30, r2
    1818:	f3 1d       	adc	r31, r3
    181a:	80 81       	ld	r24, Z
    181c:	8c 93       	st	X, r24
    181e:	2f 5f       	subi	r18, 0xFF	; 255
    1820:	3f 4f       	sbci	r19, 0xFF	; 255
    1822:	4f 4f       	sbci	r20, 0xFF	; 255
    1824:	5f 4f       	sbci	r21, 0xFF	; 255
    1826:	28 15       	cp	r18, r8
    1828:	39 05       	cpc	r19, r9
    182a:	4a 05       	cpc	r20, r10
    182c:	5b 05       	cpc	r21, r11
    182e:	78 f3       	brcs	.-34     	; 0x180e <setsockopt+0x8a>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_SETSOCKOPT,
		ptr, SOCKET_SET_SOCK_OPT_PARAMS_LEN  + optlen);
    1830:	48 2d       	mov	r20, r8
    1832:	4c 5e       	subi	r20, 0xEC	; 236
    1834:	89 e0       	ldi	r24, 0x09	; 9
    1836:	90 e1       	ldi	r25, 0x10	; 16
    1838:	b6 01       	movw	r22, r12
    183a:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_SETSOCKOPT, &ret);
    183e:	89 e0       	ldi	r24, 0x09	; 9
    1840:	90 e1       	ldi	r25, 0x10	; 16
    1842:	be 01       	movw	r22, r28
    1844:	6f 5f       	subi	r22, 0xFF	; 255
    1846:	7f 4f       	sbci	r23, 0xFF	; 255
    1848:	0e 94 c1 09 	call	0x1382	; 0x1382 <SimpleLinkWaitEvent>

	if (ret >= 0)
    184c:	29 81       	ldd	r18, Y+1	; 0x01
    184e:	3a 81       	ldd	r19, Y+2	; 0x02
    1850:	4b 81       	ldd	r20, Y+3	; 0x03
    1852:	5c 81       	ldd	r21, Y+4	; 0x04
    1854:	57 fd       	sbrc	r21, 7
    1856:	03 c0       	rjmp	.+6      	; 0x185e <setsockopt+0xda>
    1858:	60 e0       	ldi	r22, 0x00	; 0
    185a:	70 e0       	ldi	r23, 0x00	; 0
    185c:	05 c0       	rjmp	.+10     	; 0x1868 <setsockopt+0xe4>
	{
		return (0);
	}
	else
	{
		errno = ret;
    185e:	b9 01       	movw	r22, r18
    1860:	30 93 e4 05 	sts	0x05E4, r19
    1864:	20 93 e3 05 	sts	0x05E3, r18
		return ret;
	}
}
    1868:	cb 01       	movw	r24, r22
    186a:	28 96       	adiw	r28, 0x08	; 8
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	de bf       	out	0x3e, r29	; 62
    1872:	0f be       	out	0x3f, r0	; 63
    1874:	cd bf       	out	0x3d, r28	; 61
    1876:	cf 91       	pop	r28
    1878:	df 91       	pop	r29
    187a:	1f 91       	pop	r17
    187c:	0f 91       	pop	r16
    187e:	ff 90       	pop	r15
    1880:	ef 90       	pop	r14
    1882:	df 90       	pop	r13
    1884:	cf 90       	pop	r12
    1886:	bf 90       	pop	r11
    1888:	af 90       	pop	r10
    188a:	9f 90       	pop	r9
    188c:	8f 90       	pop	r8
    188e:	7f 90       	pop	r7
    1890:	6f 90       	pop	r6
    1892:	5f 90       	pop	r5
    1894:	4f 90       	pop	r4
    1896:	3f 90       	pop	r3
    1898:	2f 90       	pop	r2
    189a:	08 95       	ret

0000189c <connect>:
//!
//!  @sa socket
//
//*****************************************************************************

INT32 connect(INT32 sd, const sockaddr *addr, INT32 addrlen)
    189c:	cf 92       	push	r12
    189e:	df 92       	push	r13
    18a0:	ef 92       	push	r14
    18a2:	ff 92       	push	r15
    18a4:	0f 93       	push	r16
    18a6:	1f 93       	push	r17
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <connect+0x12>
    18ae:	00 d0       	rcall	.+0      	; 0x18b0 <connect+0x14>
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
    18b4:	8b 01       	movw	r16, r22
    18b6:	9c 01       	movw	r18, r24
    18b8:	f4 2e       	mov	r15, r20
    18ba:	e5 2e       	mov	r14, r21
{
	INT32 ret;
	UINT8 *ptr, *args;

	ret = EFAIL;
    18bc:	8f ef       	ldi	r24, 0xFF	; 255
    18be:	9f ef       	ldi	r25, 0xFF	; 255
    18c0:	af ef       	ldi	r26, 0xFF	; 255
    18c2:	bf ef       	ldi	r27, 0xFF	; 255
    18c4:	89 83       	std	Y+1, r24	; 0x01
    18c6:	9a 83       	std	Y+2, r25	; 0x02
    18c8:	ab 83       	std	Y+3, r26	; 0x03
    18ca:	bc 83       	std	Y+4, r27	; 0x04
	ptr = tSLInformation.pucTxCommandBuffer;
    18cc:	c0 90 e4 01 	lds	r12, 0x01E4
    18d0:	d0 90 e5 01 	lds	r13, 0x01E5
	args = (ptr + SIMPLE_LINK_HCI_CMND_TRANSPORT_HEADER_SIZE);
	addrlen = 8;

	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, sd);
    18d4:	c6 01       	movw	r24, r12
    18d6:	09 96       	adiw	r24, 0x09	; 9
    18d8:	b9 01       	movw	r22, r18
    18da:	a8 01       	movw	r20, r16
    18dc:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, 0x00000008);
    18e0:	48 e0       	ldi	r20, 0x08	; 8
    18e2:	50 e0       	ldi	r21, 0x00	; 0
    18e4:	60 e0       	ldi	r22, 0x00	; 0
    18e6:	70 e0       	ldi	r23, 0x00	; 0
    18e8:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, addrlen);
    18ec:	48 e0       	ldi	r20, 0x08	; 8
    18ee:	50 e0       	ldi	r21, 0x00	; 0
    18f0:	60 e0       	ldi	r22, 0x00	; 0
    18f2:	70 e0       	ldi	r23, 0x00	; 0
    18f4:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
    18f8:	dc 01       	movw	r26, r24
    18fa:	8f 2d       	mov	r24, r15
    18fc:	9e 2d       	mov	r25, r14
    18fe:	fc 01       	movw	r30, r24
	ARRAY_TO_STREAM(args, ((UINT8 *)addr), addrlen);
    1900:	9f 01       	movw	r18, r30
    1902:	28 5f       	subi	r18, 0xF8	; 248
    1904:	3f 4f       	sbci	r19, 0xFF	; 255
    1906:	81 91       	ld	r24, Z+
    1908:	8d 93       	st	X+, r24
    190a:	e2 17       	cp	r30, r18
    190c:	f3 07       	cpc	r31, r19
    190e:	d9 f7       	brne	.-10     	; 0x1906 <connect+0x6a>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_CONNECT,
		ptr, SOCKET_CONNECT_PARAMS_LEN);
    1910:	87 e0       	ldi	r24, 0x07	; 7
    1912:	90 e1       	ldi	r25, 0x10	; 16
    1914:	b6 01       	movw	r22, r12
    1916:	44 e1       	ldi	r20, 0x14	; 20
    1918:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_CONNECT, &ret);
    191c:	87 e0       	ldi	r24, 0x07	; 7
    191e:	90 e1       	ldi	r25, 0x10	; 16
    1920:	be 01       	movw	r22, r28
    1922:	6f 5f       	subi	r22, 0xFF	; 255
    1924:	7f 4f       	sbci	r23, 0xFF	; 255
    1926:	0e 94 c1 09 	call	0x1382	; 0x1382 <SimpleLinkWaitEvent>

	errno = ret;
    192a:	69 81       	ldd	r22, Y+1	; 0x01
    192c:	7a 81       	ldd	r23, Y+2	; 0x02
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	9c 81       	ldd	r25, Y+4	; 0x04
    1932:	9b 01       	movw	r18, r22
    1934:	20 93 e3 05 	sts	0x05E3, r18
    1938:	30 93 e4 05 	sts	0x05E4, r19

	return((INT32)ret);
}
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	1f 91       	pop	r17
    194a:	0f 91       	pop	r16
    194c:	ff 90       	pop	r15
    194e:	ef 90       	pop	r14
    1950:	df 90       	pop	r13
    1952:	cf 90       	pop	r12
    1954:	08 95       	ret

00001956 <gethostbyname>:
// Adafruit CC3k Host Driver Difference
// Make hostname a const char pointer because it isn't modified and the Adafruit
// driver code needs it to be const to interface with Arduino's client library.
// Noted 12-12-2014 by tdicola
INT16 gethostbyname(const CHAR * hostname, UINT16 usNameLen, 
	UINT32* out_ip_addr)
    1956:	af 92       	push	r10
    1958:	bf 92       	push	r11
    195a:	cf 92       	push	r12
    195c:	df 92       	push	r13
    195e:	ef 92       	push	r14
    1960:	ff 92       	push	r15
    1962:	0f 93       	push	r16
    1964:	1f 93       	push	r17
    1966:	df 93       	push	r29
    1968:	cf 93       	push	r28
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	28 97       	sbiw	r28, 0x08	; 8
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	f8 94       	cli
    1974:	de bf       	out	0x3e, r29	; 62
    1976:	0f be       	out	0x3f, r0	; 63
    1978:	cd bf       	out	0x3d, r28	; 61
    197a:	b8 2e       	mov	r11, r24
    197c:	a9 2e       	mov	r10, r25
    197e:	8b 01       	movw	r16, r22
    1980:	6a 01       	movw	r12, r20
{
	tBsdGethostbynameParams ret;
	UINT8 *ptr, *args;

	errno = EFAIL;
    1982:	8f ef       	ldi	r24, 0xFF	; 255
    1984:	9f ef       	ldi	r25, 0xFF	; 255
    1986:	90 93 e4 05 	sts	0x05E4, r25
    198a:	80 93 e3 05 	sts	0x05E3, r24

	if (usNameLen > HOSTNAME_MAX_LENGTH)
    198e:	67 3e       	cpi	r22, 0xE7	; 231
    1990:	71 05       	cpc	r23, r1
    1992:	18 f0       	brcs	.+6      	; 0x199a <gethostbyname+0x44>
    1994:	2f ef       	ldi	r18, 0xFF	; 255
    1996:	3f ef       	ldi	r19, 0xFF	; 255
    1998:	3b c0       	rjmp	.+118    	; 0x1a10 <gethostbyname+0xba>
	{
		return errno;
	}

	ptr = tSLInformation.pucTxCommandBuffer;
    199a:	e0 90 e4 01 	lds	r14, 0x01E4
    199e:	f0 90 e5 01 	lds	r15, 0x01E5
	args = (ptr + SIMPLE_LINK_HCI_CMND_TRANSPORT_HEADER_SIZE);

	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, 8);
    19a2:	c7 01       	movw	r24, r14
    19a4:	09 96       	adiw	r24, 0x09	; 9
    19a6:	48 e0       	ldi	r20, 0x08	; 8
    19a8:	50 e0       	ldi	r21, 0x00	; 0
    19aa:	60 e0       	ldi	r22, 0x00	; 0
    19ac:	70 e0       	ldi	r23, 0x00	; 0
    19ae:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, usNameLen);
    19b2:	a8 01       	movw	r20, r16
    19b4:	60 e0       	ldi	r22, 0x00	; 0
    19b6:	70 e0       	ldi	r23, 0x00	; 0
    19b8:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
    19bc:	dc 01       	movw	r26, r24
    19be:	8b 2d       	mov	r24, r11
    19c0:	9a 2d       	mov	r25, r10
    19c2:	fc 01       	movw	r30, r24
	ARRAY_TO_STREAM(args, hostname, usNameLen);
    19c4:	9f 01       	movw	r18, r30
    19c6:	20 0f       	add	r18, r16
    19c8:	31 1f       	adc	r19, r17
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <gethostbyname+0x7a>
    19cc:	81 91       	ld	r24, Z+
    19ce:	8d 93       	st	X+, r24
    19d0:	e2 17       	cp	r30, r18
    19d2:	f3 07       	cpc	r31, r19
    19d4:	d9 f7       	brne	.-10     	; 0x19cc <gethostbyname+0x76>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_GETHOSTNAME, ptr, SOCKET_GET_HOST_BY_NAME_PARAMS_LEN
		+ usNameLen - 1);
    19d6:	40 2f       	mov	r20, r16
    19d8:	48 5f       	subi	r20, 0xF8	; 248
    19da:	80 e1       	ldi	r24, 0x10	; 16
    19dc:	90 e1       	ldi	r25, 0x10	; 16
    19de:	b7 01       	movw	r22, r14
    19e0:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_EVNT_BSD_GETHOSTBYNAME, &ret);
    19e4:	80 e1       	ldi	r24, 0x10	; 16
    19e6:	90 e1       	ldi	r25, 0x10	; 16
    19e8:	be 01       	movw	r22, r28
    19ea:	6f 5f       	subi	r22, 0xFF	; 255
    19ec:	7f 4f       	sbci	r23, 0xFF	; 255
    19ee:	0e 94 c1 09 	call	0x1382	; 0x1382 <SimpleLinkWaitEvent>

	errno = ret.retVal;
    19f2:	29 81       	ldd	r18, Y+1	; 0x01
    19f4:	3a 81       	ldd	r19, Y+2	; 0x02
    19f6:	30 93 e4 05 	sts	0x05E4, r19
    19fa:	20 93 e3 05 	sts	0x05E3, r18

	(*((INT32*)out_ip_addr)) = ret.outputAddress;
    19fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1a00:	9e 81       	ldd	r25, Y+6	; 0x06
    1a02:	af 81       	ldd	r26, Y+7	; 0x07
    1a04:	b8 85       	ldd	r27, Y+8	; 0x08
    1a06:	f6 01       	movw	r30, r12
    1a08:	80 83       	st	Z, r24
    1a0a:	91 83       	std	Z+1, r25	; 0x01
    1a0c:	a2 83       	std	Z+2, r26	; 0x02
    1a0e:	b3 83       	std	Z+3, r27	; 0x03

	return (errno);

}
    1a10:	c9 01       	movw	r24, r18
    1a12:	28 96       	adiw	r28, 0x08	; 8
    1a14:	0f b6       	in	r0, 0x3f	; 63
    1a16:	f8 94       	cli
    1a18:	de bf       	out	0x3e, r29	; 62
    1a1a:	0f be       	out	0x3f, r0	; 63
    1a1c:	cd bf       	out	0x3d, r28	; 61
    1a1e:	cf 91       	pop	r28
    1a20:	df 91       	pop	r29
    1a22:	1f 91       	pop	r17
    1a24:	0f 91       	pop	r16
    1a26:	ff 90       	pop	r15
    1a28:	ef 90       	pop	r14
    1a2a:	df 90       	pop	r13
    1a2c:	cf 90       	pop	r12
    1a2e:	bf 90       	pop	r11
    1a30:	af 90       	pop	r10
    1a32:	08 95       	ret

00001a34 <listen>:
//!
//! @note   On this version, backlog is not supported
//
//*****************************************************************************

INT32 listen(INT32 sd, INT32 backlog)
    1a34:	8f 92       	push	r8
    1a36:	9f 92       	push	r9
    1a38:	af 92       	push	r10
    1a3a:	bf 92       	push	r11
    1a3c:	cf 92       	push	r12
    1a3e:	df 92       	push	r13
    1a40:	ef 92       	push	r14
    1a42:	ff 92       	push	r15
    1a44:	0f 93       	push	r16
    1a46:	1f 93       	push	r17
    1a48:	df 93       	push	r29
    1a4a:	cf 93       	push	r28
    1a4c:	00 d0       	rcall	.+0      	; 0x1a4e <listen+0x1a>
    1a4e:	00 d0       	rcall	.+0      	; 0x1a50 <listen+0x1c>
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
    1a54:	7b 01       	movw	r14, r22
    1a56:	8c 01       	movw	r16, r24
    1a58:	59 01       	movw	r10, r18
    1a5a:	6a 01       	movw	r12, r20
{
	INT32 ret;
	UINT8 *ptr, *args;

	ret = EFAIL;
    1a5c:	8f ef       	ldi	r24, 0xFF	; 255
    1a5e:	9f ef       	ldi	r25, 0xFF	; 255
    1a60:	af ef       	ldi	r26, 0xFF	; 255
    1a62:	bf ef       	ldi	r27, 0xFF	; 255
    1a64:	89 83       	std	Y+1, r24	; 0x01
    1a66:	9a 83       	std	Y+2, r25	; 0x02
    1a68:	ab 83       	std	Y+3, r26	; 0x03
    1a6a:	bc 83       	std	Y+4, r27	; 0x04
	ptr = tSLInformation.pucTxCommandBuffer;
    1a6c:	80 90 e4 01 	lds	r8, 0x01E4
    1a70:	90 90 e5 01 	lds	r9, 0x01E5
	args = (ptr + HEADERS_SIZE_CMD);

	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, sd);
    1a74:	c4 01       	movw	r24, r8
    1a76:	09 96       	adiw	r24, 0x09	; 9
    1a78:	b8 01       	movw	r22, r16
    1a7a:	a7 01       	movw	r20, r14
    1a7c:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, backlog);
    1a80:	b6 01       	movw	r22, r12
    1a82:	a5 01       	movw	r20, r10
    1a84:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_LISTEN,
		ptr, SOCKET_LISTEN_PARAMS_LEN);
    1a88:	86 e0       	ldi	r24, 0x06	; 6
    1a8a:	90 e1       	ldi	r25, 0x10	; 16
    1a8c:	b4 01       	movw	r22, r8
    1a8e:	48 e0       	ldi	r20, 0x08	; 8
    1a90:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_LISTEN, &ret);
    1a94:	86 e0       	ldi	r24, 0x06	; 6
    1a96:	90 e1       	ldi	r25, 0x10	; 16
    1a98:	be 01       	movw	r22, r28
    1a9a:	6f 5f       	subi	r22, 0xFF	; 255
    1a9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9e:	0e 94 c1 09 	call	0x1382	; 0x1382 <SimpleLinkWaitEvent>
	errno = ret;
    1aa2:	69 81       	ldd	r22, Y+1	; 0x01
    1aa4:	7a 81       	ldd	r23, Y+2	; 0x02
    1aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aaa:	9b 01       	movw	r18, r22
    1aac:	20 93 e3 05 	sts	0x05E3, r18
    1ab0:	30 93 e4 05 	sts	0x05E4, r19

	return(ret);
}
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	cf 91       	pop	r28
    1abe:	df 91       	pop	r29
    1ac0:	1f 91       	pop	r17
    1ac2:	0f 91       	pop	r16
    1ac4:	ff 90       	pop	r15
    1ac6:	ef 90       	pop	r14
    1ac8:	df 90       	pop	r13
    1aca:	cf 90       	pop	r12
    1acc:	bf 90       	pop	r11
    1ace:	af 90       	pop	r10
    1ad0:	9f 90       	pop	r9
    1ad2:	8f 90       	pop	r8
    1ad4:	08 95       	ret

00001ad6 <bind>:
//!
//! @sa     socket ; accept ; listen
//
//*****************************************************************************

INT32 bind(INT32 sd, const sockaddr *addr, INT32 addrlen)
    1ad6:	cf 92       	push	r12
    1ad8:	df 92       	push	r13
    1ada:	ef 92       	push	r14
    1adc:	ff 92       	push	r15
    1ade:	0f 93       	push	r16
    1ae0:	1f 93       	push	r17
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	00 d0       	rcall	.+0      	; 0x1ae8 <bind+0x12>
    1ae8:	00 d0       	rcall	.+0      	; 0x1aea <bind+0x14>
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
    1aee:	8b 01       	movw	r16, r22
    1af0:	9c 01       	movw	r18, r24
    1af2:	f4 2e       	mov	r15, r20
    1af4:	e5 2e       	mov	r14, r21
{
	INT32 ret;
	UINT8 *ptr, *args;

	ret = EFAIL;
    1af6:	8f ef       	ldi	r24, 0xFF	; 255
    1af8:	9f ef       	ldi	r25, 0xFF	; 255
    1afa:	af ef       	ldi	r26, 0xFF	; 255
    1afc:	bf ef       	ldi	r27, 0xFF	; 255
    1afe:	89 83       	std	Y+1, r24	; 0x01
    1b00:	9a 83       	std	Y+2, r25	; 0x02
    1b02:	ab 83       	std	Y+3, r26	; 0x03
    1b04:	bc 83       	std	Y+4, r27	; 0x04
	ptr = tSLInformation.pucTxCommandBuffer;
    1b06:	c0 90 e4 01 	lds	r12, 0x01E4
    1b0a:	d0 90 e5 01 	lds	r13, 0x01E5
	args = (ptr + HEADERS_SIZE_CMD);

	addrlen = ASIC_ADDR_LEN;

	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, sd);
    1b0e:	c6 01       	movw	r24, r12
    1b10:	09 96       	adiw	r24, 0x09	; 9
    1b12:	b9 01       	movw	r22, r18
    1b14:	a8 01       	movw	r20, r16
    1b16:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, 0x00000008);
    1b1a:	48 e0       	ldi	r20, 0x08	; 8
    1b1c:	50 e0       	ldi	r21, 0x00	; 0
    1b1e:	60 e0       	ldi	r22, 0x00	; 0
    1b20:	70 e0       	ldi	r23, 0x00	; 0
    1b22:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, addrlen);
    1b26:	48 e0       	ldi	r20, 0x08	; 8
    1b28:	50 e0       	ldi	r21, 0x00	; 0
    1b2a:	60 e0       	ldi	r22, 0x00	; 0
    1b2c:	70 e0       	ldi	r23, 0x00	; 0
    1b2e:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
    1b32:	dc 01       	movw	r26, r24
    1b34:	8f 2d       	mov	r24, r15
    1b36:	9e 2d       	mov	r25, r14
    1b38:	fc 01       	movw	r30, r24
	ARRAY_TO_STREAM(args, ((UINT8 *)addr), addrlen);
    1b3a:	9f 01       	movw	r18, r30
    1b3c:	28 5f       	subi	r18, 0xF8	; 248
    1b3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b40:	81 91       	ld	r24, Z+
    1b42:	8d 93       	st	X+, r24
    1b44:	e2 17       	cp	r30, r18
    1b46:	f3 07       	cpc	r31, r19
    1b48:	d9 f7       	brne	.-10     	; 0x1b40 <bind+0x6a>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_BIND,
		ptr, SOCKET_BIND_PARAMS_LEN);
    1b4a:	82 e0       	ldi	r24, 0x02	; 2
    1b4c:	90 e1       	ldi	r25, 0x10	; 16
    1b4e:	b6 01       	movw	r22, r12
    1b50:	44 e1       	ldi	r20, 0x14	; 20
    1b52:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_BIND, &ret);
    1b56:	82 e0       	ldi	r24, 0x02	; 2
    1b58:	90 e1       	ldi	r25, 0x10	; 16
    1b5a:	be 01       	movw	r22, r28
    1b5c:	6f 5f       	subi	r22, 0xFF	; 255
    1b5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b60:	0e 94 c1 09 	call	0x1382	; 0x1382 <SimpleLinkWaitEvent>

	errno = ret;
    1b64:	69 81       	ldd	r22, Y+1	; 0x01
    1b66:	7a 81       	ldd	r23, Y+2	; 0x02
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6c:	9b 01       	movw	r18, r22
    1b6e:	20 93 e3 05 	sts	0x05E3, r18
    1b72:	30 93 e4 05 	sts	0x05E4, r19

	return(ret);
}
    1b76:	0f 90       	pop	r0
    1b78:	0f 90       	pop	r0
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	cf 91       	pop	r28
    1b80:	df 91       	pop	r29
    1b82:	1f 91       	pop	r17
    1b84:	0f 91       	pop	r16
    1b86:	ff 90       	pop	r15
    1b88:	ef 90       	pop	r14
    1b8a:	df 90       	pop	r13
    1b8c:	cf 90       	pop	r12
    1b8e:	08 95       	ret

00001b90 <_Z16simple_link_recvlPvllP11_sockaddr_tPml>:
//!                  excess bytes may be discarded depending on the type of
//!                  socket the message is received from
//
//*****************************************************************************
INT16 simple_link_recv(INT32 sd, void *buf, INT32 len, INT32 flags, sockaddr *from,
	socklen_t *fromlen, INT32 opcode)
    1b90:	2f 92       	push	r2
    1b92:	3f 92       	push	r3
    1b94:	4f 92       	push	r4
    1b96:	5f 92       	push	r5
    1b98:	6f 92       	push	r6
    1b9a:	7f 92       	push	r7
    1b9c:	8f 92       	push	r8
    1b9e:	9f 92       	push	r9
    1ba0:	af 92       	push	r10
    1ba2:	bf 92       	push	r11
    1ba4:	cf 92       	push	r12
    1ba6:	df 92       	push	r13
    1ba8:	ef 92       	push	r14
    1baa:	ff 92       	push	r15
    1bac:	0f 93       	push	r16
    1bae:	1f 93       	push	r17
    1bb0:	df 93       	push	r29
    1bb2:	cf 93       	push	r28
    1bb4:	cd b7       	in	r28, 0x3d	; 61
    1bb6:	de b7       	in	r29, 0x3e	; 62
    1bb8:	64 97       	sbiw	r28, 0x14	; 20
    1bba:	0f b6       	in	r0, 0x3f	; 63
    1bbc:	f8 94       	cli
    1bbe:	de bf       	out	0x3e, r29	; 62
    1bc0:	0f be       	out	0x3f, r0	; 63
    1bc2:	cd bf       	out	0x3d, r28	; 61
    1bc4:	2b 01       	movw	r4, r22
    1bc6:	3c 01       	movw	r6, r24
    1bc8:	5e 87       	std	Y+14, r21	; 0x0e
    1bca:	4d 87       	std	Y+13, r20	; 0x0d
    1bcc:	0f 87       	std	Y+15, r16	; 0x0f
    1bce:	18 8b       	std	Y+16, r17	; 0x10
    1bd0:	29 8b       	std	Y+17, r18	; 0x11
    1bd2:	3a 8b       	std	Y+18, r19	; 0x12
    1bd4:	15 01       	movw	r2, r10
    1bd6:	9c 8a       	std	Y+20, r9	; 0x14
    1bd8:	8b 8a       	std	Y+19, r8	; 0x13
    1bda:	89 a4       	ldd	r8, Y+41	; 0x29
    1bdc:	9a a4       	ldd	r9, Y+42	; 0x2a
    1bde:	ab a4       	ldd	r10, Y+43	; 0x2b
    1be0:	bc a4       	ldd	r11, Y+44	; 0x2c
{
	UINT8 *ptr, *args;
	tBsdReadReturnParams tSocketReadEvent;

	ptr = tSLInformation.pucTxCommandBuffer;
    1be2:	00 91 e4 01 	lds	r16, 0x01E4
    1be6:	10 91 e5 01 	lds	r17, 0x01E5
	args = (ptr + HEADERS_SIZE_CMD);

	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, sd);
    1bea:	c8 01       	movw	r24, r16
    1bec:	09 96       	adiw	r24, 0x09	; 9
    1bee:	b3 01       	movw	r22, r6
    1bf0:	a2 01       	movw	r20, r4
    1bf2:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, len);
    1bf6:	4f 85       	ldd	r20, Y+15	; 0x0f
    1bf8:	58 89       	ldd	r21, Y+16	; 0x10
    1bfa:	69 89       	ldd	r22, Y+17	; 0x11
    1bfc:	7a 89       	ldd	r23, Y+18	; 0x12
    1bfe:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, flags);
    1c02:	b7 01       	movw	r22, r14
    1c04:	a6 01       	movw	r20, r12
    1c06:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>

	// Generate the read command, and wait for the 
	hci_command_send(opcode,  ptr, SOCKET_RECV_FROM_PARAMS_LEN);
    1c0a:	c4 01       	movw	r24, r8
    1c0c:	b8 01       	movw	r22, r16
    1c0e:	4c e0       	ldi	r20, 0x0C	; 12
    1c10:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(opcode, &tSocketReadEvent);
    1c14:	c4 01       	movw	r24, r8
    1c16:	be 01       	movw	r22, r28
    1c18:	6f 5f       	subi	r22, 0xFF	; 255
    1c1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c1c:	0e 94 c1 09 	call	0x1382	; 0x1382 <SimpleLinkWaitEvent>
	DEBUGPRINT_F(" Flags: 0x");
	DEBUGPRINT_HEX(tSocketReadEvent.uiFlags);
	DEBUGPRINT_F("\n\r");

	// In case the number of bytes is more then zero - read data
	if (tSocketReadEvent.iNumberOfBytes > 0)
    1c20:	8d 81       	ldd	r24, Y+5	; 0x05
    1c22:	9e 81       	ldd	r25, Y+6	; 0x06
    1c24:	af 81       	ldd	r26, Y+7	; 0x07
    1c26:	b8 85       	ldd	r27, Y+8	; 0x08
    1c28:	18 16       	cp	r1, r24
    1c2a:	19 06       	cpc	r1, r25
    1c2c:	1a 06       	cpc	r1, r26
    1c2e:	1b 06       	cpc	r1, r27
    1c30:	3c f4       	brge	.+14     	; 0x1c40 <_Z16simple_link_recvlPvllP11_sockaddr_tPml+0xb0>
		// Wait for the data in a synchronous way. Here we assume that the bug is 
		// big enough to store also parameters of receive from too....
		// Adafruit CC3k Host Driver Difference
		// Fix compiler error with explicit cast from void to UINT8 pointer.
		// Noted 12-12-2014 by tdicola
		SimpleLinkWaitData((UINT8*)buf, (UINT8 *)from, (UINT8 *)fromlen);
    1c32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c36:	b1 01       	movw	r22, r2
    1c38:	4b 89       	ldd	r20, Y+19	; 0x13
    1c3a:	5c 89       	ldd	r21, Y+20	; 0x14
    1c3c:	0e 94 b8 09 	call	0x1370	; 0x1370 <SimpleLinkWaitData>
	}

	errno = tSocketReadEvent.iNumberOfBytes;
    1c40:	8d 81       	ldd	r24, Y+5	; 0x05
    1c42:	9e 81       	ldd	r25, Y+6	; 0x06
    1c44:	80 93 e3 05 	sts	0x05E3, r24
    1c48:	90 93 e4 05 	sts	0x05E4, r25
	  uart_putchar(((UINT8 *)buf)[i]);
	}
#endif
	
	return(tSocketReadEvent.iNumberOfBytes);
}
    1c4c:	64 96       	adiw	r28, 0x14	; 20
    1c4e:	0f b6       	in	r0, 0x3f	; 63
    1c50:	f8 94       	cli
    1c52:	de bf       	out	0x3e, r29	; 62
    1c54:	0f be       	out	0x3f, r0	; 63
    1c56:	cd bf       	out	0x3d, r28	; 61
    1c58:	cf 91       	pop	r28
    1c5a:	df 91       	pop	r29
    1c5c:	1f 91       	pop	r17
    1c5e:	0f 91       	pop	r16
    1c60:	ff 90       	pop	r15
    1c62:	ef 90       	pop	r14
    1c64:	df 90       	pop	r13
    1c66:	cf 90       	pop	r12
    1c68:	bf 90       	pop	r11
    1c6a:	af 90       	pop	r10
    1c6c:	9f 90       	pop	r9
    1c6e:	8f 90       	pop	r8
    1c70:	7f 90       	pop	r7
    1c72:	6f 90       	pop	r6
    1c74:	5f 90       	pop	r5
    1c76:	4f 90       	pop	r4
    1c78:	3f 90       	pop	r3
    1c7a:	2f 90       	pop	r2
    1c7c:	08 95       	ret

00001c7e <recv>:
//!
//!  @Note On this version, only blocking mode is supported.
//
//*****************************************************************************

INT16 recv(INT32 sd, void *buf, INT32 len, INT32 flags)
    1c7e:	8f 92       	push	r8
    1c80:	9f 92       	push	r9
    1c82:	af 92       	push	r10
    1c84:	bf 92       	push	r11
    1c86:	cf 92       	push	r12
    1c88:	df 92       	push	r13
    1c8a:	ef 92       	push	r14
    1c8c:	ff 92       	push	r15
    1c8e:	0f 93       	push	r16
    1c90:	1f 93       	push	r17
{
	return(simple_link_recv(sd, buf, len, flags, NULL, NULL, HCI_CMND_RECV));
    1c92:	00 d0       	rcall	.+0      	; 0x1c94 <recv+0x16>
    1c94:	00 d0       	rcall	.+0      	; 0x1c96 <recv+0x18>
    1c96:	f4 e0       	ldi	r31, 0x04	; 4
    1c98:	8f 2e       	mov	r8, r31
    1c9a:	f0 e1       	ldi	r31, 0x10	; 16
    1c9c:	9f 2e       	mov	r9, r31
    1c9e:	a1 2c       	mov	r10, r1
    1ca0:	b1 2c       	mov	r11, r1
    1ca2:	ed b7       	in	r30, 0x3d	; 61
    1ca4:	fe b7       	in	r31, 0x3e	; 62
    1ca6:	81 82       	std	Z+1, r8	; 0x01
    1ca8:	92 82       	std	Z+2, r9	; 0x02
    1caa:	a3 82       	std	Z+3, r10	; 0x03
    1cac:	b4 82       	std	Z+4, r11	; 0x04
    1cae:	aa 24       	eor	r10, r10
    1cb0:	bb 24       	eor	r11, r11
    1cb2:	88 24       	eor	r8, r8
    1cb4:	99 24       	eor	r9, r9
    1cb6:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <_Z16simple_link_recvlPvllP11_sockaddr_tPml>
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
}
    1cc2:	1f 91       	pop	r17
    1cc4:	0f 91       	pop	r16
    1cc6:	ff 90       	pop	r15
    1cc8:	ef 90       	pop	r14
    1cca:	df 90       	pop	r13
    1ccc:	cf 90       	pop	r12
    1cce:	bf 90       	pop	r11
    1cd0:	af 90       	pop	r10
    1cd2:	9f 90       	pop	r9
    1cd4:	8f 90       	pop	r8
    1cd6:	08 95       	ret

00001cd8 <select>:
//!  @sa socket
//
//*****************************************************************************

INT16 select(INT32 nfds, fd_set *readsds, fd_set *writesds, fd_set *exceptsds, 
struct timeval *timeout)
    1cd8:	4f 92       	push	r4
    1cda:	5f 92       	push	r5
    1cdc:	6f 92       	push	r6
    1cde:	7f 92       	push	r7
    1ce0:	8f 92       	push	r8
    1ce2:	9f 92       	push	r9
    1ce4:	af 92       	push	r10
    1ce6:	bf 92       	push	r11
    1ce8:	cf 92       	push	r12
    1cea:	df 92       	push	r13
    1cec:	ef 92       	push	r14
    1cee:	ff 92       	push	r15
    1cf0:	0f 93       	push	r16
    1cf2:	1f 93       	push	r17
    1cf4:	df 93       	push	r29
    1cf6:	cf 93       	push	r28
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62
    1cfc:	60 97       	sbiw	r28, 0x10	; 16
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	f8 94       	cli
    1d02:	de bf       	out	0x3e, r29	; 62
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	cd bf       	out	0x3d, r28	; 61
    1d08:	5b 01       	movw	r10, r22
    1d0a:	6c 01       	movw	r12, r24
    1d0c:	4a 01       	movw	r8, r20
    1d0e:	39 01       	movw	r6, r18
    1d10:	28 01       	movw	r4, r16
    1d12:	87 01       	movw	r16, r14
	{
		is_blocking = 0; /* no blocking, timeout */
	}

	// Fill in HCI packet structure
	ptr = tSLInformation.pucTxCommandBuffer;
    1d14:	e0 90 e4 01 	lds	r14, 0x01E4
    1d18:	f0 90 e5 01 	lds	r15, 0x01E5
	args = (ptr + HEADERS_SIZE_CMD);

	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, nfds);
    1d1c:	c7 01       	movw	r24, r14
    1d1e:	09 96       	adiw	r24, 0x09	; 9
    1d20:	b6 01       	movw	r22, r12
    1d22:	a5 01       	movw	r20, r10
    1d24:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, 0x00000014);
    1d28:	44 e1       	ldi	r20, 0x14	; 20
    1d2a:	50 e0       	ldi	r21, 0x00	; 0
    1d2c:	60 e0       	ldi	r22, 0x00	; 0
    1d2e:	70 e0       	ldi	r23, 0x00	; 0
    1d30:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, 0x00000014);
    1d34:	44 e1       	ldi	r20, 0x14	; 20
    1d36:	50 e0       	ldi	r21, 0x00	; 0
    1d38:	60 e0       	ldi	r22, 0x00	; 0
    1d3a:	70 e0       	ldi	r23, 0x00	; 0
    1d3c:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, 0x00000014);
    1d40:	44 e1       	ldi	r20, 0x14	; 20
    1d42:	50 e0       	ldi	r21, 0x00	; 0
    1d44:	60 e0       	ldi	r22, 0x00	; 0
    1d46:	70 e0       	ldi	r23, 0x00	; 0
    1d48:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, 0x00000014);
    1d4c:	44 e1       	ldi	r20, 0x14	; 20
    1d4e:	50 e0       	ldi	r21, 0x00	; 0
    1d50:	60 e0       	ldi	r22, 0x00	; 0
    1d52:	70 e0       	ldi	r23, 0x00	; 0
    1d54:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, is_blocking);
    1d58:	40 e0       	ldi	r20, 0x00	; 0
    1d5a:	50 e0       	ldi	r21, 0x00	; 0
    1d5c:	60 e0       	ldi	r22, 0x00	; 0
    1d5e:	70 e0       	ldi	r23, 0x00	; 0
    1d60:	01 15       	cp	r16, r1
    1d62:	11 05       	cpc	r17, r1
    1d64:	21 f4       	brne	.+8      	; 0x1d6e <select+0x96>
    1d66:	41 e0       	ldi	r20, 0x01	; 1
    1d68:	50 e0       	ldi	r21, 0x00	; 0
    1d6a:	60 e0       	ldi	r22, 0x00	; 0
    1d6c:	70 e0       	ldi	r23, 0x00	; 0
    1d6e:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, ((readsds) ? *(UINT32*)readsds : 0));
    1d72:	81 14       	cp	r8, r1
    1d74:	91 04       	cpc	r9, r1
    1d76:	29 f4       	brne	.+10     	; 0x1d82 <select+0xaa>
    1d78:	40 e0       	ldi	r20, 0x00	; 0
    1d7a:	50 e0       	ldi	r21, 0x00	; 0
    1d7c:	60 e0       	ldi	r22, 0x00	; 0
    1d7e:	70 e0       	ldi	r23, 0x00	; 0
    1d80:	05 c0       	rjmp	.+10     	; 0x1d8c <select+0xb4>
    1d82:	f4 01       	movw	r30, r8
    1d84:	40 81       	ld	r20, Z
    1d86:	51 81       	ldd	r21, Z+1	; 0x01
    1d88:	62 81       	ldd	r22, Z+2	; 0x02
    1d8a:	73 81       	ldd	r23, Z+3	; 0x03
    1d8c:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, ((writesds) ? *(UINT32*)writesds : 0));
    1d90:	61 14       	cp	r6, r1
    1d92:	71 04       	cpc	r7, r1
    1d94:	29 f4       	brne	.+10     	; 0x1da0 <select+0xc8>
    1d96:	40 e0       	ldi	r20, 0x00	; 0
    1d98:	50 e0       	ldi	r21, 0x00	; 0
    1d9a:	60 e0       	ldi	r22, 0x00	; 0
    1d9c:	70 e0       	ldi	r23, 0x00	; 0
    1d9e:	05 c0       	rjmp	.+10     	; 0x1daa <select+0xd2>
    1da0:	f3 01       	movw	r30, r6
    1da2:	40 81       	ld	r20, Z
    1da4:	51 81       	ldd	r21, Z+1	; 0x01
    1da6:	62 81       	ldd	r22, Z+2	; 0x02
    1da8:	73 81       	ldd	r23, Z+3	; 0x03
    1daa:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, ((exceptsds) ? *(UINT32*)exceptsds : 0));
    1dae:	41 14       	cp	r4, r1
    1db0:	51 04       	cpc	r5, r1
    1db2:	29 f4       	brne	.+10     	; 0x1dbe <select+0xe6>
    1db4:	40 e0       	ldi	r20, 0x00	; 0
    1db6:	50 e0       	ldi	r21, 0x00	; 0
    1db8:	60 e0       	ldi	r22, 0x00	; 0
    1dba:	70 e0       	ldi	r23, 0x00	; 0
    1dbc:	05 c0       	rjmp	.+10     	; 0x1dc8 <select+0xf0>
    1dbe:	f2 01       	movw	r30, r4
    1dc0:	40 81       	ld	r20, Z
    1dc2:	51 81       	ldd	r21, Z+1	; 0x01
    1dc4:	62 81       	ldd	r22, Z+2	; 0x02
    1dc6:	73 81       	ldd	r23, Z+3	; 0x03
    1dc8:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
    1dcc:	9c 01       	movw	r18, r24

	if (timeout)
    1dce:	01 15       	cp	r16, r1
    1dd0:	11 05       	cpc	r17, r1
    1dd2:	51 f1       	breq	.+84     	; 0x1e28 <select+0x150>
	{
		if ( 0 == timeout->tv_sec && timeout->tv_usec < 
    1dd4:	f8 01       	movw	r30, r16
    1dd6:	80 81       	ld	r24, Z
    1dd8:	91 81       	ldd	r25, Z+1	; 0x01
    1dda:	a2 81       	ldd	r26, Z+2	; 0x02
    1ddc:	b3 81       	ldd	r27, Z+3	; 0x03
    1dde:	00 97       	sbiw	r24, 0x00	; 0
    1de0:	a1 05       	cpc	r26, r1
    1de2:	b1 05       	cpc	r27, r1
    1de4:	91 f4       	brne	.+36     	; 0x1e0a <select+0x132>
    1de6:	84 81       	ldd	r24, Z+4	; 0x04
    1de8:	95 81       	ldd	r25, Z+5	; 0x05
    1dea:	a6 81       	ldd	r26, Z+6	; 0x06
    1dec:	b7 81       	ldd	r27, Z+7	; 0x07
    1dee:	88 58       	subi	r24, 0x88	; 136
    1df0:	93 41       	sbci	r25, 0x13	; 19
    1df2:	a0 40       	sbci	r26, 0x00	; 0
    1df4:	b0 40       	sbci	r27, 0x00	; 0
    1df6:	4c f4       	brge	.+18     	; 0x1e0a <select+0x132>
			SELECT_TIMEOUT_MIN_MICRO_SECONDS)
		{
			timeout->tv_usec = SELECT_TIMEOUT_MIN_MICRO_SECONDS;
    1df8:	88 e8       	ldi	r24, 0x88	; 136
    1dfa:	93 e1       	ldi	r25, 0x13	; 19
    1dfc:	a0 e0       	ldi	r26, 0x00	; 0
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	f8 01       	movw	r30, r16
    1e02:	84 83       	std	Z+4, r24	; 0x04
    1e04:	95 83       	std	Z+5, r25	; 0x05
    1e06:	a6 83       	std	Z+6, r26	; 0x06
    1e08:	b7 83       	std	Z+7, r27	; 0x07
		}
		args = UINT32_TO_STREAM(args, timeout->tv_sec);
    1e0a:	f8 01       	movw	r30, r16
    1e0c:	40 81       	ld	r20, Z
    1e0e:	51 81       	ldd	r21, Z+1	; 0x01
    1e10:	62 81       	ldd	r22, Z+2	; 0x02
    1e12:	73 81       	ldd	r23, Z+3	; 0x03
    1e14:	c9 01       	movw	r24, r18
    1e16:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
		args = UINT32_TO_STREAM(args, timeout->tv_usec);
    1e1a:	f8 01       	movw	r30, r16
    1e1c:	44 81       	ldd	r20, Z+4	; 0x04
    1e1e:	55 81       	ldd	r21, Z+5	; 0x05
    1e20:	66 81       	ldd	r22, Z+6	; 0x06
    1e22:	77 81       	ldd	r23, Z+7	; 0x07
    1e24:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	}

	// Initiate a HCI command
	hci_command_send(HCI_CMND_BSD_SELECT, ptr, SOCKET_SELECT_PARAMS_LEN);
    1e28:	88 e0       	ldi	r24, 0x08	; 8
    1e2a:	90 e1       	ldi	r25, 0x10	; 16
    1e2c:	b7 01       	movw	r22, r14
    1e2e:	4c e2       	ldi	r20, 0x2C	; 44
    1e30:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_EVNT_SELECT, &tParams);
    1e34:	88 e0       	ldi	r24, 0x08	; 8
    1e36:	90 e1       	ldi	r25, 0x10	; 16
    1e38:	be 01       	movw	r22, r28
    1e3a:	6f 5f       	subi	r22, 0xFF	; 255
    1e3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e3e:	0e 94 c1 09 	call	0x1382	; 0x1382 <SimpleLinkWaitEvent>

	// Update actually read FD
	if (tParams.iStatus >= 0)
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	9a 81       	ldd	r25, Y+2	; 0x02
    1e46:	ab 81       	ldd	r26, Y+3	; 0x03
    1e48:	bc 81       	ldd	r27, Y+4	; 0x04
    1e4a:	b7 fd       	sbrc	r27, 7
    1e4c:	27 c0       	rjmp	.+78     	; 0x1e9c <select+0x1c4>
	{
		if (readsds)
    1e4e:	81 14       	cp	r8, r1
    1e50:	91 04       	cpc	r9, r1
    1e52:	49 f0       	breq	.+18     	; 0x1e66 <select+0x18e>
		{
			memcpy(readsds, &tParams.uiRdfd, sizeof(tParams.uiRdfd));
    1e54:	8d 81       	ldd	r24, Y+5	; 0x05
    1e56:	9e 81       	ldd	r25, Y+6	; 0x06
    1e58:	af 81       	ldd	r26, Y+7	; 0x07
    1e5a:	b8 85       	ldd	r27, Y+8	; 0x08
    1e5c:	f4 01       	movw	r30, r8
    1e5e:	80 83       	st	Z, r24
    1e60:	91 83       	std	Z+1, r25	; 0x01
    1e62:	a2 83       	std	Z+2, r26	; 0x02
    1e64:	b3 83       	std	Z+3, r27	; 0x03
		}

		if (writesds)
    1e66:	61 14       	cp	r6, r1
    1e68:	71 04       	cpc	r7, r1
    1e6a:	49 f0       	breq	.+18     	; 0x1e7e <select+0x1a6>
		{
			memcpy(writesds, &tParams.uiWrfd, sizeof(tParams.uiWrfd)); 
    1e6c:	89 85       	ldd	r24, Y+9	; 0x09
    1e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e70:	ab 85       	ldd	r26, Y+11	; 0x0b
    1e72:	bc 85       	ldd	r27, Y+12	; 0x0c
    1e74:	f3 01       	movw	r30, r6
    1e76:	80 83       	st	Z, r24
    1e78:	91 83       	std	Z+1, r25	; 0x01
    1e7a:	a2 83       	std	Z+2, r26	; 0x02
    1e7c:	b3 83       	std	Z+3, r27	; 0x03
		}

		if (exceptsds)
    1e7e:	41 14       	cp	r4, r1
    1e80:	51 04       	cpc	r5, r1
    1e82:	49 f0       	breq	.+18     	; 0x1e96 <select+0x1be>
		{
			memcpy(exceptsds, &tParams.uiExfd, sizeof(tParams.uiExfd)); 
    1e84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e88:	af 85       	ldd	r26, Y+15	; 0x0f
    1e8a:	b8 89       	ldd	r27, Y+16	; 0x10
    1e8c:	f2 01       	movw	r30, r4
    1e8e:	80 83       	st	Z, r24
    1e90:	91 83       	std	Z+1, r25	; 0x01
    1e92:	a2 83       	std	Z+2, r26	; 0x02
    1e94:	b3 83       	std	Z+3, r27	; 0x03
		}

		return(tParams.iStatus);
    1e96:	29 81       	ldd	r18, Y+1	; 0x01
    1e98:	3a 81       	ldd	r19, Y+2	; 0x02
    1e9a:	06 c0       	rjmp	.+12     	; 0x1ea8 <select+0x1d0>

	}
	else
	{
		errno = tParams.iStatus;
    1e9c:	90 93 e4 05 	sts	0x05E4, r25
    1ea0:	80 93 e3 05 	sts	0x05E3, r24
    1ea4:	2f ef       	ldi	r18, 0xFF	; 255
    1ea6:	3f ef       	ldi	r19, 0xFF	; 255
		return(-1);
	}
}
    1ea8:	c9 01       	movw	r24, r18
    1eaa:	60 96       	adiw	r28, 0x10	; 16
    1eac:	0f b6       	in	r0, 0x3f	; 63
    1eae:	f8 94       	cli
    1eb0:	de bf       	out	0x3e, r29	; 62
    1eb2:	0f be       	out	0x3f, r0	; 63
    1eb4:	cd bf       	out	0x3d, r28	; 61
    1eb6:	cf 91       	pop	r28
    1eb8:	df 91       	pop	r29
    1eba:	1f 91       	pop	r17
    1ebc:	0f 91       	pop	r16
    1ebe:	ff 90       	pop	r15
    1ec0:	ef 90       	pop	r14
    1ec2:	df 90       	pop	r13
    1ec4:	cf 90       	pop	r12
    1ec6:	bf 90       	pop	r11
    1ec8:	af 90       	pop	r10
    1eca:	9f 90       	pop	r9
    1ecc:	8f 90       	pop	r8
    1ece:	7f 90       	pop	r7
    1ed0:	6f 90       	pop	r6
    1ed2:	5f 90       	pop	r5
    1ed4:	4f 90       	pop	r4
    1ed6:	08 95       	ret

00001ed8 <accept>:
//!
//! @sa     socket ; bind ; listen
//
//*****************************************************************************

INT32 accept(INT32 sd, sockaddr *addr, socklen_t *addrlen)
    1ed8:	8f 92       	push	r8
    1eda:	9f 92       	push	r9
    1edc:	af 92       	push	r10
    1ede:	bf 92       	push	r11
    1ee0:	cf 92       	push	r12
    1ee2:	df 92       	push	r13
    1ee4:	ef 92       	push	r14
    1ee6:	ff 92       	push	r15
    1ee8:	0f 93       	push	r16
    1eea:	1f 93       	push	r17
    1eec:	df 93       	push	r29
    1eee:	cf 93       	push	r28
    1ef0:	cd b7       	in	r28, 0x3d	; 61
    1ef2:	de b7       	in	r29, 0x3e	; 62
    1ef4:	68 97       	sbiw	r28, 0x18	; 24
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	de bf       	out	0x3e, r29	; 62
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	cd bf       	out	0x3d, r28	; 61
    1f00:	5b 01       	movw	r10, r22
    1f02:	6c 01       	movw	r12, r24
    1f04:	7a 01       	movw	r14, r20
    1f06:	49 01       	movw	r8, r18
	INT32 ret;
	UINT8 *ptr, *args;
	tBsdReturnParams tAcceptReturnArguments;

	ret = EFAIL;
	ptr = tSLInformation.pucTxCommandBuffer;
    1f08:	00 91 e4 01 	lds	r16, 0x01E4
    1f0c:	10 91 e5 01 	lds	r17, 0x01E5
	args = (ptr + HEADERS_SIZE_CMD);

	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, sd);
    1f10:	c8 01       	movw	r24, r16
    1f12:	09 96       	adiw	r24, 0x09	; 9
    1f14:	b6 01       	movw	r22, r12
    1f16:	a5 01       	movw	r20, r10
    1f18:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_ACCEPT,
		ptr, SOCKET_ACCEPT_PARAMS_LEN);
    1f1c:	85 e0       	ldi	r24, 0x05	; 5
    1f1e:	90 e1       	ldi	r25, 0x10	; 16
    1f20:	b8 01       	movw	r22, r16
    1f22:	44 e0       	ldi	r20, 0x04	; 4
    1f24:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_ACCEPT, &tAcceptReturnArguments);
    1f28:	85 e0       	ldi	r24, 0x05	; 5
    1f2a:	90 e1       	ldi	r25, 0x10	; 16
    1f2c:	be 01       	movw	r22, r28
    1f2e:	6f 5f       	subi	r22, 0xFF	; 255
    1f30:	7f 4f       	sbci	r23, 0xFF	; 255
    1f32:	0e 94 c1 09 	call	0x1382	; 0x1382 <SimpleLinkWaitEvent>

	// need specify return parameters!!!
	// Adafruit CC3k Host Driver Difference
	// Bug fix to prevent writing to null memory pointer.
	// Noted 12-12-2014 by tdicola
	if (addr) memcpy(addr, &tAcceptReturnArguments.tSocketAddress, ASIC_ADDR_LEN);
    1f36:	e1 14       	cp	r14, r1
    1f38:	f1 04       	cpc	r15, r1
    1f3a:	41 f0       	breq	.+16     	; 0x1f4c <accept+0x74>
    1f3c:	d7 01       	movw	r26, r14
    1f3e:	fe 01       	movw	r30, r28
    1f40:	39 96       	adiw	r30, 0x09	; 9
    1f42:	88 e0       	ldi	r24, 0x08	; 8
    1f44:	01 90       	ld	r0, Z+
    1f46:	0d 92       	st	X+, r0
    1f48:	81 50       	subi	r24, 0x01	; 1
    1f4a:	e1 f7       	brne	.-8      	; 0x1f44 <accept+0x6c>
	if (addrlen) *addrlen = ASIC_ADDR_LEN;
    1f4c:	81 14       	cp	r8, r1
    1f4e:	91 04       	cpc	r9, r1
    1f50:	49 f0       	breq	.+18     	; 0x1f64 <accept+0x8c>
    1f52:	88 e0       	ldi	r24, 0x08	; 8
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	a0 e0       	ldi	r26, 0x00	; 0
    1f58:	b0 e0       	ldi	r27, 0x00	; 0
    1f5a:	f4 01       	movw	r30, r8
    1f5c:	80 83       	st	Z, r24
    1f5e:	91 83       	std	Z+1, r25	; 0x01
    1f60:	a2 83       	std	Z+2, r26	; 0x02
    1f62:	b3 83       	std	Z+3, r27	; 0x03
	errno = tAcceptReturnArguments.iStatus; 
    1f64:	8d 81       	ldd	r24, Y+5	; 0x05
    1f66:	9e 81       	ldd	r25, Y+6	; 0x06
    1f68:	90 93 e4 05 	sts	0x05E4, r25
    1f6c:	80 93 e3 05 	sts	0x05E3, r24
	ret = errno;
    1f70:	7c 01       	movw	r14, r24
    1f72:	00 27       	eor	r16, r16
    1f74:	f7 fc       	sbrc	r15, 7
    1f76:	00 95       	com	r16
    1f78:	10 2f       	mov	r17, r16

	// if succeeded, iStatus = new socket descriptor. otherwise - error number 
	if(M_IS_VALID_SD(ret))
    1f7a:	f8 e0       	ldi	r31, 0x08	; 8
    1f7c:	ef 16       	cp	r14, r31
    1f7e:	f1 04       	cpc	r15, r1
    1f80:	01 05       	cpc	r16, r1
    1f82:	11 05       	cpc	r17, r1
    1f84:	38 f4       	brcc	.+14     	; 0x1f94 <accept+0xbc>
	{
		set_socket_active_status(ret, SOCKET_STATUS_ACTIVE);
    1f86:	c8 01       	movw	r24, r16
    1f88:	b7 01       	movw	r22, r14
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	40 e0       	ldi	r20, 0x00	; 0
    1f90:	50 e0       	ldi	r21, 0x00	; 0
    1f92:	06 c0       	rjmp	.+12     	; 0x1fa0 <accept+0xc8>
	}
	else
	{
		set_socket_active_status(sd, SOCKET_STATUS_INACTIVE);
    1f94:	c6 01       	movw	r24, r12
    1f96:	b5 01       	movw	r22, r10
    1f98:	21 e0       	ldi	r18, 0x01	; 1
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e0       	ldi	r20, 0x00	; 0
    1f9e:	50 e0       	ldi	r21, 0x00	; 0
    1fa0:	0e 94 16 03 	call	0x62c	; 0x62c <set_socket_active_status>
	}

	return(ret);
}
    1fa4:	b7 01       	movw	r22, r14
    1fa6:	c8 01       	movw	r24, r16
    1fa8:	68 96       	adiw	r28, 0x18	; 24
    1faa:	0f b6       	in	r0, 0x3f	; 63
    1fac:	f8 94       	cli
    1fae:	de bf       	out	0x3e, r29	; 62
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	cd bf       	out	0x3d, r28	; 61
    1fb4:	cf 91       	pop	r28
    1fb6:	df 91       	pop	r29
    1fb8:	1f 91       	pop	r17
    1fba:	0f 91       	pop	r16
    1fbc:	ff 90       	pop	r15
    1fbe:	ef 90       	pop	r14
    1fc0:	df 90       	pop	r13
    1fc2:	cf 90       	pop	r12
    1fc4:	bf 90       	pop	r11
    1fc6:	af 90       	pop	r10
    1fc8:	9f 90       	pop	r9
    1fca:	8f 90       	pop	r8
    1fcc:	08 95       	ret

00001fce <closesocket>:
//!
//!  @brief  The socket function closes a created socket.
//
//*****************************************************************************

INT32 closesocket(INT32 sd)
    1fce:	cf 92       	push	r12
    1fd0:	df 92       	push	r13
    1fd2:	ef 92       	push	r14
    1fd4:	ff 92       	push	r15
    1fd6:	0f 93       	push	r16
    1fd8:	1f 93       	push	r17
    1fda:	df 93       	push	r29
    1fdc:	cf 93       	push	r28
    1fde:	00 d0       	rcall	.+0      	; 0x1fe0 <closesocket+0x12>
    1fe0:	00 d0       	rcall	.+0      	; 0x1fe2 <closesocket+0x14>
    1fe2:	cd b7       	in	r28, 0x3d	; 61
    1fe4:	de b7       	in	r29, 0x3e	; 62
    1fe6:	6b 01       	movw	r12, r22
    1fe8:	7c 01       	movw	r14, r24
{
	INT32 ret;
	UINT8 *ptr, *args;

	ret = EFAIL;
    1fea:	8f ef       	ldi	r24, 0xFF	; 255
    1fec:	9f ef       	ldi	r25, 0xFF	; 255
    1fee:	af ef       	ldi	r26, 0xFF	; 255
    1ff0:	bf ef       	ldi	r27, 0xFF	; 255
    1ff2:	89 83       	std	Y+1, r24	; 0x01
    1ff4:	9a 83       	std	Y+2, r25	; 0x02
    1ff6:	ab 83       	std	Y+3, r26	; 0x03
    1ff8:	bc 83       	std	Y+4, r27	; 0x04
	ptr = tSLInformation.pucTxCommandBuffer;
    1ffa:	00 91 e4 01 	lds	r16, 0x01E4
    1ffe:	10 91 e5 01 	lds	r17, 0x01E5
	args = (ptr + HEADERS_SIZE_CMD);

	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, sd);
    2002:	c8 01       	movw	r24, r16
    2004:	09 96       	adiw	r24, 0x09	; 9
    2006:	b7 01       	movw	r22, r14
    2008:	a6 01       	movw	r20, r12
    200a:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_CLOSE_SOCKET,
		ptr, SOCKET_CLOSE_PARAMS_LEN);
    200e:	8b e0       	ldi	r24, 0x0B	; 11
    2010:	90 e1       	ldi	r25, 0x10	; 16
    2012:	b8 01       	movw	r22, r16
    2014:	44 e0       	ldi	r20, 0x04	; 4
    2016:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_CLOSE_SOCKET, &ret);
    201a:	8b e0       	ldi	r24, 0x0B	; 11
    201c:	90 e1       	ldi	r25, 0x10	; 16
    201e:	be 01       	movw	r22, r28
    2020:	6f 5f       	subi	r22, 0xFF	; 255
    2022:	7f 4f       	sbci	r23, 0xFF	; 255
    2024:	0e 94 c1 09 	call	0x1382	; 0x1382 <SimpleLinkWaitEvent>
	errno = ret;
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	9a 81       	ldd	r25, Y+2	; 0x02
    202c:	90 93 e4 05 	sts	0x05E4, r25
    2030:	80 93 e3 05 	sts	0x05E3, r24

	// since 'close' call may result in either OK (and then it closed) or error 
	// mark this socket as invalid 
	set_socket_active_status(sd, SOCKET_STATUS_INACTIVE);
    2034:	c7 01       	movw	r24, r14
    2036:	b6 01       	movw	r22, r12
    2038:	21 e0       	ldi	r18, 0x01	; 1
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	40 e0       	ldi	r20, 0x00	; 0
    203e:	50 e0       	ldi	r21, 0x00	; 0
    2040:	0e 94 16 03 	call	0x62c	; 0x62c <set_socket_active_status>
    2044:	69 81       	ldd	r22, Y+1	; 0x01
    2046:	7a 81       	ldd	r23, Y+2	; 0x02

	return(ret);
}
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	9c 81       	ldd	r25, Y+4	; 0x04
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	1f 91       	pop	r17
    205a:	0f 91       	pop	r16
    205c:	ff 90       	pop	r15
    205e:	ef 90       	pop	r14
    2060:	df 90       	pop	r13
    2062:	cf 90       	pop	r12
    2064:	08 95       	ret

00002066 <socket>:
//!          transport service provider. This function is called by the 
//!          application layer to obtain a socket handle.
//
//*****************************************************************************

INT32 socket(INT32 domain, INT32 type, INT32 protocol)
    2066:	4f 92       	push	r4
    2068:	5f 92       	push	r5
    206a:	6f 92       	push	r6
    206c:	7f 92       	push	r7
    206e:	8f 92       	push	r8
    2070:	9f 92       	push	r9
    2072:	af 92       	push	r10
    2074:	bf 92       	push	r11
    2076:	cf 92       	push	r12
    2078:	df 92       	push	r13
    207a:	ef 92       	push	r14
    207c:	ff 92       	push	r15
    207e:	0f 93       	push	r16
    2080:	1f 93       	push	r17
    2082:	df 93       	push	r29
    2084:	cf 93       	push	r28
    2086:	00 d0       	rcall	.+0      	; 0x2088 <socket+0x22>
    2088:	00 d0       	rcall	.+0      	; 0x208a <socket+0x24>
    208a:	cd b7       	in	r28, 0x3d	; 61
    208c:	de b7       	in	r29, 0x3e	; 62
    208e:	5b 01       	movw	r10, r22
    2090:	6c 01       	movw	r12, r24
    2092:	39 01       	movw	r6, r18
    2094:	4a 01       	movw	r8, r20
{
	INT32 ret;
	UINT8 *ptr, *args;

	ret = EFAIL;
    2096:	8f ef       	ldi	r24, 0xFF	; 255
    2098:	9f ef       	ldi	r25, 0xFF	; 255
    209a:	af ef       	ldi	r26, 0xFF	; 255
    209c:	bf ef       	ldi	r27, 0xFF	; 255
    209e:	89 83       	std	Y+1, r24	; 0x01
    20a0:	9a 83       	std	Y+2, r25	; 0x02
    20a2:	ab 83       	std	Y+3, r26	; 0x03
    20a4:	bc 83       	std	Y+4, r27	; 0x04
	ptr = tSLInformation.pucTxCommandBuffer;
    20a6:	40 90 e4 01 	lds	r4, 0x01E4
    20aa:	50 90 e5 01 	lds	r5, 0x01E5
	args = (ptr + HEADERS_SIZE_CMD);

	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, domain);
    20ae:	c2 01       	movw	r24, r4
    20b0:	09 96       	adiw	r24, 0x09	; 9
    20b2:	b6 01       	movw	r22, r12
    20b4:	a5 01       	movw	r20, r10
    20b6:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, type);
    20ba:	b4 01       	movw	r22, r8
    20bc:	a3 01       	movw	r20, r6
    20be:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, protocol);
    20c2:	b8 01       	movw	r22, r16
    20c4:	a7 01       	movw	r20, r14
    20c6:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_SOCKET, ptr, SOCKET_OPEN_PARAMS_LEN);
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	90 e1       	ldi	r25, 0x10	; 16
    20ce:	b2 01       	movw	r22, r4
    20d0:	4c e0       	ldi	r20, 0x0C	; 12
    20d2:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_SOCKET, &ret);
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	90 e1       	ldi	r25, 0x10	; 16
    20da:	be 01       	movw	r22, r28
    20dc:	6f 5f       	subi	r22, 0xFF	; 255
    20de:	7f 4f       	sbci	r23, 0xFF	; 255
    20e0:	0e 94 c1 09 	call	0x1382	; 0x1382 <SimpleLinkWaitEvent>

	// Process the event 
	errno = ret;
    20e4:	69 81       	ldd	r22, Y+1	; 0x01
    20e6:	7a 81       	ldd	r23, Y+2	; 0x02
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	9c 81       	ldd	r25, Y+4	; 0x04
    20ec:	70 93 e4 05 	sts	0x05E4, r23
    20f0:	60 93 e3 05 	sts	0x05E3, r22

	set_socket_active_status(ret, SOCKET_STATUS_ACTIVE);
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e0       	ldi	r20, 0x00	; 0
    20fa:	50 e0       	ldi	r21, 0x00	; 0
    20fc:	0e 94 16 03 	call	0x62c	; 0x62c <set_socket_active_status>
    2100:	69 81       	ldd	r22, Y+1	; 0x01
    2102:	7a 81       	ldd	r23, Y+2	; 0x02

	return(ret);
}
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	9c 81       	ldd	r25, Y+4	; 0x04
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	0f 90       	pop	r0
    210e:	0f 90       	pop	r0
    2110:	cf 91       	pop	r28
    2112:	df 91       	pop	r29
    2114:	1f 91       	pop	r17
    2116:	0f 91       	pop	r16
    2118:	ff 90       	pop	r15
    211a:	ef 90       	pop	r14
    211c:	df 90       	pop	r13
    211e:	cf 90       	pop	r12
    2120:	bf 90       	pop	r11
    2122:	af 90       	pop	r10
    2124:	9f 90       	pop	r9
    2126:	8f 90       	pop	r8
    2128:	7f 90       	pop	r7
    212a:	6f 90       	pop	r6
    212c:	5f 90       	pop	r5
    212e:	4f 90       	pop	r4
    2130:	08 95       	ret

00002132 <_Z26HostFlowControlConsumeBuffs>:
//!  @brief  if SEND_NON_BLOCKING not define - block until have free buffer 
//!          becomes available, else return immediately  with correct status 
//!          regarding the buffers available.
//
//*****************************************************************************
INT16 HostFlowControlConsumeBuff(INT16 sd)
    2132:	8f 92       	push	r8
    2134:	9f 92       	push	r9
    2136:	af 92       	push	r10
    2138:	bf 92       	push	r11
    213a:	cf 92       	push	r12
    213c:	df 92       	push	r13
    213e:	ef 92       	push	r14
    2140:	ff 92       	push	r15
    2142:	0f 93       	push	r16
    2144:	1f 93       	push	r17
    2146:	8c 01       	movw	r16, r24

// Adafruit CC3k Host Driver Difference
// Allow defining a send timeout period.
// Noted 12-12-2014 by tdicola
#ifdef SEND_TIMEOUT_MS
	unsigned long startTime = millis();
    2148:	0e 94 73 30 	call	0x60e6	; 0x60e6 <millis>
    214c:	4b 01       	movw	r8, r22
    214e:	5c 01       	movw	r10, r24
			errno = tSLInformation.slTransmitDataError;
			tSLInformation.slTransmitDataError = 0;
			return errno;
		}

		if(SOCKET_STATUS_ACTIVE != get_socket_active_status(sd))
    2150:	68 01       	movw	r12, r16
    2152:	ee 24       	eor	r14, r14
    2154:	d7 fc       	sbrc	r13, 7
    2156:	e0 94       	com	r14
    2158:	fe 2c       	mov	r15, r14
	do
	{
		// In case last transmission failed then we will return the last failure 
		// reason here.
		// Note that the buffer will not be allocated in this case
		if (tSLInformation.slTransmitDataError != 0)
    215a:	80 91 f6 01 	lds	r24, 0x01F6
    215e:	90 91 f7 01 	lds	r25, 0x01F7
    2162:	a0 91 f8 01 	lds	r26, 0x01F8
    2166:	b0 91 f9 01 	lds	r27, 0x01F9
    216a:	00 97       	sbiw	r24, 0x00	; 0
    216c:	a1 05       	cpc	r26, r1
    216e:	b1 05       	cpc	r27, r1
    2170:	b1 f0       	breq	.+44     	; 0x219e <_Z26HostFlowControlConsumeBuffs+0x6c>
		{
			errno = tSLInformation.slTransmitDataError;
    2172:	80 91 f6 01 	lds	r24, 0x01F6
    2176:	90 91 f7 01 	lds	r25, 0x01F7
    217a:	a0 91 f8 01 	lds	r26, 0x01F8
    217e:	b0 91 f9 01 	lds	r27, 0x01F9
    2182:	9c 01       	movw	r18, r24
    2184:	90 93 e4 05 	sts	0x05E4, r25
    2188:	80 93 e3 05 	sts	0x05E3, r24
			tSLInformation.slTransmitDataError = 0;
    218c:	10 92 f6 01 	sts	0x01F6, r1
    2190:	10 92 f7 01 	sts	0x01F7, r1
    2194:	10 92 f8 01 	sts	0x01F8, r1
    2198:	10 92 f9 01 	sts	0x01F9, r1
    219c:	2c c0       	rjmp	.+88     	; 0x21f6 <_Z26HostFlowControlConsumeBuffs+0xc4>
			return errno;
		}

		if(SOCKET_STATUS_ACTIVE != get_socket_active_status(sd))
    219e:	c7 01       	movw	r24, r14
    21a0:	b6 01       	movw	r22, r12
    21a2:	0e 94 62 03 	call	0x6c4	; 0x6c4 <get_socket_active_status>
    21a6:	61 15       	cp	r22, r1
    21a8:	71 05       	cpc	r23, r1
    21aa:	81 05       	cpc	r24, r1
    21ac:	91 05       	cpc	r25, r1
    21ae:	19 f0       	breq	.+6      	; 0x21b6 <_Z26HostFlowControlConsumeBuffs+0x84>
    21b0:	2f ef       	ldi	r18, 0xFF	; 255
    21b2:	3f ef       	ldi	r19, 0xFF	; 255
    21b4:	20 c0       	rjmp	.+64     	; 0x21f6 <_Z26HostFlowControlConsumeBuffs+0xc4>

// Adafruit CC3k Host Driver Difference
// Implementation of send timeout.
// Noted 12-12-2014 by tdicola
#ifdef SEND_TIMEOUT_MS
		if ((millis() - startTime) > SEND_TIMEOUT_MS)
    21b6:	0e 94 73 30 	call	0x60e6	; 0x60e6 <millis>
    21ba:	68 19       	sub	r22, r8
    21bc:	79 09       	sbc	r23, r9
    21be:	8a 09       	sbc	r24, r10
    21c0:	9b 09       	sbc	r25, r11
    21c2:	61 53       	subi	r22, 0x31	; 49
    21c4:	75 47       	sbci	r23, 0x75	; 117
    21c6:	80 40       	sbci	r24, 0x00	; 0
    21c8:	90 40       	sbci	r25, 0x00	; 0
    21ca:	18 f0       	brcs	.+6      	; 0x21d2 <_Z26HostFlowControlConsumeBuffs+0xa0>
    21cc:	2d ef       	ldi	r18, 0xFD	; 253
    21ce:	3f ef       	ldi	r19, 0xFF	; 255
    21d0:	12 c0       	rjmp	.+36     	; 0x21f6 <_Z26HostFlowControlConsumeBuffs+0xc4>
// Noted 12-12-2014 by tdicola
#ifdef SEND_TIMEOUT_MS
	unsigned long startTime = millis();
#endif

	do
    21d2:	80 91 fa 01 	lds	r24, 0x01FA
    21d6:	90 91 fb 01 	lds	r25, 0x01FB
    21da:	89 2b       	or	r24, r25
    21dc:	09 f4       	brne	.+2      	; 0x21e0 <_Z26HostFlowControlConsumeBuffs+0xae>
    21de:	bd cf       	rjmp	.-134    	; 0x215a <_Z26HostFlowControlConsumeBuffs+0x28>
		}
#endif

	} while(0 == tSLInformation.usNumberOfFreeBuffers);

	tSLInformation.usNumberOfFreeBuffers--;
    21e0:	80 91 fa 01 	lds	r24, 0x01FA
    21e4:	90 91 fb 01 	lds	r25, 0x01FB
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	90 93 fb 01 	sts	0x01FB, r25
    21ee:	80 93 fa 01 	sts	0x01FA, r24
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
	{
		tSLInformation.usNumberOfFreeBuffers--;
		return 0;
	}
#endif
}
    21f6:	c9 01       	movw	r24, r18
    21f8:	1f 91       	pop	r17
    21fa:	0f 91       	pop	r16
    21fc:	ff 90       	pop	r15
    21fe:	ef 90       	pop	r14
    2200:	df 90       	pop	r13
    2202:	cf 90       	pop	r12
    2204:	bf 90       	pop	r11
    2206:	af 90       	pop	r10
    2208:	9f 90       	pop	r9
    220a:	8f 90       	pop	r8
    220c:	08 95       	ret

0000220e <_Z16simple_link_sendlPKvllPK11_sockaddr_tll>:
//!  @brief          This function is used to transmit a message to another
//!                  socket
//
//*****************************************************************************
INT16 simple_link_send(INT32 sd, const void *buf, INT32 len, INT32 flags,
	const sockaddr *to, INT32 tolen, INT32 opcode)
    220e:	2f 92       	push	r2
    2210:	3f 92       	push	r3
    2212:	4f 92       	push	r4
    2214:	5f 92       	push	r5
    2216:	6f 92       	push	r6
    2218:	7f 92       	push	r7
    221a:	8f 92       	push	r8
    221c:	9f 92       	push	r9
    221e:	af 92       	push	r10
    2220:	bf 92       	push	r11
    2222:	cf 92       	push	r12
    2224:	df 92       	push	r13
    2226:	ef 92       	push	r14
    2228:	ff 92       	push	r15
    222a:	0f 93       	push	r16
    222c:	1f 93       	push	r17
    222e:	df 93       	push	r29
    2230:	cf 93       	push	r28
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
    2236:	6a 97       	sbiw	r28, 0x1a	; 26
    2238:	0f b6       	in	r0, 0x3f	; 63
    223a:	f8 94       	cli
    223c:	de bf       	out	0x3e, r29	; 62
    223e:	0f be       	out	0x3f, r0	; 63
    2240:	cd bf       	out	0x3d, r28	; 61
    2242:	1b 01       	movw	r2, r22
    2244:	2c 01       	movw	r4, r24
    2246:	5c 8b       	std	Y+20, r21	; 0x14
    2248:	4b 8b       	std	Y+19, r20	; 0x13
    224a:	38 01       	movw	r6, r16
    224c:	49 01       	movw	r8, r18
    224e:	cd 8a       	std	Y+21, r12	; 0x15
    2250:	de 8a       	std	Y+22, r13	; 0x16
    2252:	ef 8a       	std	Y+23, r14	; 0x17
    2254:	f8 8e       	std	Y+24, r15	; 0x18
    2256:	ba 8e       	std	Y+26, r11	; 0x1a
    2258:	a9 8e       	std	Y+25, r10	; 0x19
    225a:	cf a4       	ldd	r12, Y+47	; 0x2f
    225c:	d8 a8       	ldd	r13, Y+48	; 0x30
    225e:	e9 a8       	ldd	r14, Y+49	; 0x31
    2260:	fa a8       	ldd	r15, Y+50	; 0x32
	UINT32 addr_offset;
	INT16 res;
	tBsdReadReturnParams tSocketSendEvent;

	// Check the bsd_arguments
	if (0 != (res = HostFlowControlConsumeBuff(sd)))
    2262:	cb 01       	movw	r24, r22
    2264:	0e 94 99 10 	call	0x2132	; 0x2132 <_Z26HostFlowControlConsumeBuffs>
    2268:	9c 01       	movw	r18, r24
    226a:	00 97       	sbiw	r24, 0x00	; 0
    226c:	09 f0       	breq	.+2      	; 0x2270 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x62>
    226e:	cb c0       	rjmp	.+406    	; 0x2406 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x1f8>
	{
		return res;
	}

	//Update the number of sent packets
	tSLInformation.NumberOfSentPackets++;
    2270:	80 91 02 02 	lds	r24, 0x0202
    2274:	90 91 03 02 	lds	r25, 0x0203
    2278:	a0 91 04 02 	lds	r26, 0x0204
    227c:	b0 91 05 02 	lds	r27, 0x0205
    2280:	01 96       	adiw	r24, 0x01	; 1
    2282:	a1 1d       	adc	r26, r1
    2284:	b1 1d       	adc	r27, r1
    2286:	80 93 02 02 	sts	0x0202, r24
    228a:	90 93 03 02 	sts	0x0203, r25
    228e:	a0 93 04 02 	sts	0x0204, r26
    2292:	b0 93 05 02 	sts	0x0205, r27

	// Allocate a buffer and construct a packet and send it over spi
	ptr = tSLInformation.pucTxCommandBuffer;
    2296:	20 91 e4 01 	lds	r18, 0x01E4
    229a:	30 91 e5 01 	lds	r19, 0x01E5
    229e:	3a 8b       	std	Y+18, r19	; 0x12
    22a0:	29 8b       	std	Y+17, r18	; 0x11
	args = (ptr + HEADERS_SIZE_DATA);

	// Update the offset of data and parameters according to the command
	switch(opcode)
    22a2:	8b a9       	ldd	r24, Y+51	; 0x33
    22a4:	9c a9       	ldd	r25, Y+52	; 0x34
    22a6:	ad a9       	ldd	r26, Y+53	; 0x35
    22a8:	be a9       	ldd	r27, Y+54	; 0x36
    22aa:	81 38       	cpi	r24, 0x81	; 129
    22ac:	91 05       	cpc	r25, r1
    22ae:	a1 05       	cpc	r26, r1
    22b0:	b1 05       	cpc	r27, r1
    22b2:	b9 f0       	breq	.+46     	; 0x22e2 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0xd4>
    22b4:	83 38       	cpi	r24, 0x83	; 131
    22b6:	91 05       	cpc	r25, r1
    22b8:	a1 05       	cpc	r26, r1
    22ba:	b1 05       	cpc	r27, r1
    22bc:	f1 f4       	brne	.+60     	; 0x22fa <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0xec>
	{ 
	case HCI_CMND_SENDTO:
		{
			addr_offset = len + sizeof(len) + sizeof(len);
    22be:	a4 01       	movw	r20, r8
    22c0:	93 01       	movw	r18, r6
    22c2:	28 5f       	subi	r18, 0xF8	; 248
    22c4:	3f 4f       	sbci	r19, 0xFF	; 255
    22c6:	4f 4f       	sbci	r20, 0xFF	; 255
    22c8:	5f 4f       	sbci	r21, 0xFF	; 255
    22ca:	2d 87       	std	Y+13, r18	; 0x0d
    22cc:	3e 87       	std	Y+14, r19	; 0x0e
    22ce:	4f 87       	std	Y+15, r20	; 0x0f
    22d0:	58 8b       	std	Y+16, r21	; 0x10
			addrlen = 8;
			uArgSize = SOCKET_SENDTO_PARAMS_LEN;
			pDataPtr = ptr + HEADERS_SIZE_DATA + SOCKET_SENDTO_PARAMS_LEN;
    22d2:	a9 88       	ldd	r10, Y+17	; 0x11
    22d4:	ba 88       	ldd	r11, Y+18	; 0x12
    22d6:	42 e2       	ldi	r20, 0x22	; 34
    22d8:	50 e0       	ldi	r21, 0x00	; 0
    22da:	a4 0e       	add	r10, r20
    22dc:	b5 1e       	adc	r11, r21
    22de:	18 e1       	ldi	r17, 0x18	; 24
    22e0:	0c c0       	rjmp	.+24     	; 0x22fa <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0xec>
	case HCI_CMND_SEND:
		{
			tolen = 0;
			to = NULL;
			uArgSize = HCI_CMND_SEND_ARG_LENGTH;
			pDataPtr = ptr + HEADERS_SIZE_DATA + HCI_CMND_SEND_ARG_LENGTH;
    22e2:	a9 88       	ldd	r10, Y+17	; 0x11
    22e4:	ba 88       	ldd	r11, Y+18	; 0x12
    22e6:	8a e1       	ldi	r24, 0x1A	; 26
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	a8 0e       	add	r10, r24
    22ec:	b9 1e       	adc	r11, r25
    22ee:	1a 8e       	std	Y+26, r1	; 0x1a
    22f0:	19 8e       	std	Y+25, r1	; 0x19
    22f2:	cc 24       	eor	r12, r12
    22f4:	dd 24       	eor	r13, r13
    22f6:	76 01       	movw	r14, r12
    22f8:	10 e1       	ldi	r17, 0x10	; 16
			break;
		}
	}

	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, sd);
    22fa:	89 89       	ldd	r24, Y+17	; 0x11
    22fc:	9a 89       	ldd	r25, Y+18	; 0x12
    22fe:	0a 96       	adiw	r24, 0x0a	; 10
    2300:	b2 01       	movw	r22, r4
    2302:	a1 01       	movw	r20, r2
    2304:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, uArgSize - sizeof(sd));
    2308:	01 2f       	mov	r16, r17
    230a:	10 e0       	ldi	r17, 0x00	; 0
    230c:	04 50       	subi	r16, 0x04	; 4
    230e:	10 40       	sbci	r17, 0x00	; 0
    2310:	a8 01       	movw	r20, r16
    2312:	60 e0       	ldi	r22, 0x00	; 0
    2314:	70 e0       	ldi	r23, 0x00	; 0
    2316:	0c 5f       	subi	r16, 0xFC	; 252
    2318:	1f 4f       	sbci	r17, 0xFF	; 255
    231a:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, len);
    231e:	b4 01       	movw	r22, r8
    2320:	a3 01       	movw	r20, r6
    2322:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, flags);
    2326:	4d 89       	ldd	r20, Y+21	; 0x15
    2328:	5e 89       	ldd	r21, Y+22	; 0x16
    232a:	6f 89       	ldd	r22, Y+23	; 0x17
    232c:	78 8d       	ldd	r23, Y+24	; 0x18
    232e:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>

	if (opcode == HCI_CMND_SENDTO)
    2332:	2b a9       	ldd	r18, Y+51	; 0x33
    2334:	3c a9       	ldd	r19, Y+52	; 0x34
    2336:	4d a9       	ldd	r20, Y+53	; 0x35
    2338:	5e a9       	ldd	r21, Y+54	; 0x36
    233a:	23 38       	cpi	r18, 0x83	; 131
    233c:	31 05       	cpc	r19, r1
    233e:	41 05       	cpc	r20, r1
    2340:	51 05       	cpc	r21, r1
    2342:	61 f4       	brne	.+24     	; 0x235c <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x14e>
	{
		args = UINT32_TO_STREAM(args, addr_offset);
    2344:	4d 85       	ldd	r20, Y+13	; 0x0d
    2346:	5e 85       	ldd	r21, Y+14	; 0x0e
    2348:	6f 85       	ldd	r22, Y+15	; 0x0f
    234a:	78 89       	ldd	r23, Y+16	; 0x10
    234c:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
		args = UINT32_TO_STREAM(args, addrlen);
    2350:	48 e0       	ldi	r20, 0x08	; 8
    2352:	50 e0       	ldi	r21, 0x00	; 0
    2354:	60 e0       	ldi	r22, 0x00	; 0
    2356:	70 e0       	ldi	r23, 0x00	; 0
    2358:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	40 e0       	ldi	r20, 0x00	; 0
    2362:	50 e0       	ldi	r21, 0x00	; 0
    2364:	0c c0       	rjmp	.+24     	; 0x237e <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x170>
	}

	// Copy the data received from user into the TX Buffer
	ARRAY_TO_STREAM(pDataPtr, ((UINT8 *)buf), len);
    2366:	eb 89       	ldd	r30, Y+19	; 0x13
    2368:	fc 89       	ldd	r31, Y+20	; 0x14
    236a:	e2 0f       	add	r30, r18
    236c:	f3 1f       	adc	r31, r19
    236e:	80 81       	ld	r24, Z
    2370:	d5 01       	movw	r26, r10
    2372:	8d 93       	st	X+, r24
    2374:	5d 01       	movw	r10, r26
    2376:	2f 5f       	subi	r18, 0xFF	; 255
    2378:	3f 4f       	sbci	r19, 0xFF	; 255
    237a:	4f 4f       	sbci	r20, 0xFF	; 255
    237c:	5f 4f       	sbci	r21, 0xFF	; 255
    237e:	26 15       	cp	r18, r6
    2380:	37 05       	cpc	r19, r7
    2382:	48 05       	cpc	r20, r8
    2384:	59 05       	cpc	r21, r9
    2386:	7c f3       	brlt	.-34     	; 0x2366 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x158>

	// In case we are using SendTo, copy the to parameters
	if (opcode == HCI_CMND_SENDTO)
    2388:	2b a9       	ldd	r18, Y+51	; 0x33
    238a:	3c a9       	ldd	r19, Y+52	; 0x34
    238c:	4d a9       	ldd	r20, Y+53	; 0x35
    238e:	5e a9       	ldd	r21, Y+54	; 0x36
    2390:	23 38       	cpi	r18, 0x83	; 131
    2392:	31 05       	cpc	r19, r1
    2394:	41 05       	cpc	r20, r1
    2396:	51 05       	cpc	r21, r1
    2398:	c1 f4       	brne	.+48     	; 0x23ca <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x1bc>
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	40 e0       	ldi	r20, 0x00	; 0
    23a0:	50 e0       	ldi	r21, 0x00	; 0
    23a2:	0e c0       	rjmp	.+28     	; 0x23c0 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x1b2>
//!  @brief          This function is used to transmit a message to another
//!                  socket
//
//*****************************************************************************
INT16 simple_link_send(INT32 sd, const void *buf, INT32 len, INT32 flags,
	const sockaddr *to, INT32 tolen, INT32 opcode)
    23a4:	f9 01       	movw	r30, r18
	ARRAY_TO_STREAM(pDataPtr, ((UINT8 *)buf), len);

	// In case we are using SendTo, copy the to parameters
	if (opcode == HCI_CMND_SENDTO)
	{	
		ARRAY_TO_STREAM(pDataPtr, ((UINT8 *)to), tolen);
    23a6:	d5 01       	movw	r26, r10
    23a8:	a2 0f       	add	r26, r18
    23aa:	b3 1f       	adc	r27, r19
    23ac:	89 8d       	ldd	r24, Y+25	; 0x19
    23ae:	9a 8d       	ldd	r25, Y+26	; 0x1a
    23b0:	e8 0f       	add	r30, r24
    23b2:	f9 1f       	adc	r31, r25
    23b4:	80 81       	ld	r24, Z
    23b6:	8c 93       	st	X, r24
    23b8:	2f 5f       	subi	r18, 0xFF	; 255
    23ba:	3f 4f       	sbci	r19, 0xFF	; 255
    23bc:	4f 4f       	sbci	r20, 0xFF	; 255
    23be:	5f 4f       	sbci	r21, 0xFF	; 255
    23c0:	2c 15       	cp	r18, r12
    23c2:	3d 05       	cpc	r19, r13
    23c4:	4e 05       	cpc	r20, r14
    23c6:	5f 05       	cpc	r21, r15
    23c8:	6c f3       	brlt	.-38     	; 0x23a4 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x196>
	}

	// Initiate a HCI command
	hci_data_send(opcode, ptr, uArgSize, len,(UINT8*)to, tolen);
    23ca:	8b a9       	ldd	r24, Y+51	; 0x33
    23cc:	69 89       	ldd	r22, Y+17	; 0x11
    23ce:	7a 89       	ldd	r23, Y+18	; 0x12
    23d0:	a8 01       	movw	r20, r16
    23d2:	93 01       	movw	r18, r6
    23d4:	09 8d       	ldd	r16, Y+25	; 0x19
    23d6:	1a 8d       	ldd	r17, Y+26	; 0x1a
    23d8:	76 01       	movw	r14, r12
    23da:	0e 94 cd 09 	call	0x139a	; 0x139a <hci_data_send>
    23de:	be 01       	movw	r22, r28
    23e0:	6f 5f       	subi	r22, 0xFF	; 255
    23e2:	7f 4f       	sbci	r23, 0xFF	; 255

	if (opcode == HCI_CMND_SENDTO)
    23e4:	2b a9       	ldd	r18, Y+51	; 0x33
    23e6:	3c a9       	ldd	r19, Y+52	; 0x34
    23e8:	4d a9       	ldd	r20, Y+53	; 0x35
    23ea:	5e a9       	ldd	r21, Y+54	; 0x36
    23ec:	23 38       	cpi	r18, 0x83	; 131
    23ee:	31 05       	cpc	r19, r1
    23f0:	41 05       	cpc	r20, r1
    23f2:	51 05       	cpc	r21, r1
    23f4:	19 f4       	brne	.+6      	; 0x23fc <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x1ee>
		SimpleLinkWaitEvent(HCI_EVNT_SENDTO, &tSocketSendEvent);
    23f6:	8f e0       	ldi	r24, 0x0F	; 15
    23f8:	90 e1       	ldi	r25, 0x10	; 16
    23fa:	02 c0       	rjmp	.+4      	; 0x2400 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x1f2>
	else
		SimpleLinkWaitEvent(HCI_EVNT_SEND, &tSocketSendEvent);
    23fc:	83 e0       	ldi	r24, 0x03	; 3
    23fe:	90 e1       	ldi	r25, 0x10	; 16
    2400:	0e 94 c1 09 	call	0x1382	; 0x1382 <SimpleLinkWaitEvent>

	return	(len);
    2404:	93 01       	movw	r18, r6
}
    2406:	c9 01       	movw	r24, r18
    2408:	6a 96       	adiw	r28, 0x1a	; 26
    240a:	0f b6       	in	r0, 0x3f	; 63
    240c:	f8 94       	cli
    240e:	de bf       	out	0x3e, r29	; 62
    2410:	0f be       	out	0x3f, r0	; 63
    2412:	cd bf       	out	0x3d, r28	; 61
    2414:	cf 91       	pop	r28
    2416:	df 91       	pop	r29
    2418:	1f 91       	pop	r17
    241a:	0f 91       	pop	r16
    241c:	ff 90       	pop	r15
    241e:	ef 90       	pop	r14
    2420:	df 90       	pop	r13
    2422:	cf 90       	pop	r12
    2424:	bf 90       	pop	r11
    2426:	af 90       	pop	r10
    2428:	9f 90       	pop	r9
    242a:	8f 90       	pop	r8
    242c:	7f 90       	pop	r7
    242e:	6f 90       	pop	r6
    2430:	5f 90       	pop	r5
    2432:	4f 90       	pop	r4
    2434:	3f 90       	pop	r3
    2436:	2f 90       	pop	r2
    2438:	08 95       	ret

0000243a <send>:
//!
//!  @sa             sendto
//
//*****************************************************************************

INT16 send(INT32 sd, const void *buf, INT32 len, INT32 flags)
    243a:	8f 92       	push	r8
    243c:	9f 92       	push	r9
    243e:	af 92       	push	r10
    2440:	bf 92       	push	r11
    2442:	cf 92       	push	r12
    2444:	df 92       	push	r13
    2446:	ef 92       	push	r14
    2448:	ff 92       	push	r15
    244a:	0f 93       	push	r16
    244c:	1f 93       	push	r17
{
	return(simple_link_send(sd, buf, len, flags, NULL, 0, HCI_CMND_SEND));
    244e:	ed b7       	in	r30, 0x3d	; 61
    2450:	fe b7       	in	r31, 0x3e	; 62
    2452:	38 97       	sbiw	r30, 0x08	; 8
    2454:	0f b6       	in	r0, 0x3f	; 63
    2456:	f8 94       	cli
    2458:	fe bf       	out	0x3e, r31	; 62
    245a:	0f be       	out	0x3f, r0	; 63
    245c:	ed bf       	out	0x3d, r30	; 61
    245e:	11 82       	std	Z+1, r1	; 0x01
    2460:	12 82       	std	Z+2, r1	; 0x02
    2462:	13 82       	std	Z+3, r1	; 0x03
    2464:	14 82       	std	Z+4, r1	; 0x04
    2466:	b1 e8       	ldi	r27, 0x81	; 129
    2468:	8b 2e       	mov	r8, r27
    246a:	91 2c       	mov	r9, r1
    246c:	a1 2c       	mov	r10, r1
    246e:	b1 2c       	mov	r11, r1
    2470:	85 82       	std	Z+5, r8	; 0x05
    2472:	96 82       	std	Z+6, r9	; 0x06
    2474:	a7 82       	std	Z+7, r10	; 0x07
    2476:	b0 86       	std	Z+8, r11	; 0x08
    2478:	aa 24       	eor	r10, r10
    247a:	bb 24       	eor	r11, r11
    247c:	0e 94 07 11 	call	0x220e	; 0x220e <_Z16simple_link_sendlPKvllPK11_sockaddr_tll>
    2480:	2d b7       	in	r18, 0x3d	; 61
    2482:	3e b7       	in	r19, 0x3e	; 62
    2484:	28 5f       	subi	r18, 0xF8	; 248
    2486:	3f 4f       	sbci	r19, 0xFF	; 255
    2488:	0f b6       	in	r0, 0x3f	; 63
    248a:	f8 94       	cli
    248c:	3e bf       	out	0x3e, r19	; 62
    248e:	0f be       	out	0x3f, r0	; 63
    2490:	2d bf       	out	0x3d, r18	; 61
}
    2492:	1f 91       	pop	r17
    2494:	0f 91       	pop	r16
    2496:	ff 90       	pop	r15
    2498:	ef 90       	pop	r14
    249a:	df 90       	pop	r13
    249c:	cf 90       	pop	r12
    249e:	bf 90       	pop	r11
    24a0:	af 90       	pop	r10
    24a2:	9f 90       	pop	r9
    24a4:	8f 90       	pop	r8
    24a6:	08 95       	ret

000024a8 <wlan_init>:
	tDriverPatches sDriverPatches,
	tBootLoaderPatches sBootLoaderPatches,
	tWlanReadInteruptPin  sReadWlanInterruptPin,
	tWlanInterruptEnable  sWlanInterruptEnable,
	tWlanInterruptDisable sWlanInterruptDisable,
	tWriteWlanPin         sWriteWlanPin)
    24a8:	af 92       	push	r10
    24aa:	bf 92       	push	r11
    24ac:	cf 92       	push	r12
    24ae:	df 92       	push	r13
    24b0:	ef 92       	push	r14
    24b2:	ff 92       	push	r15
    24b4:	0f 93       	push	r16
    24b6:	1f 93       	push	r17
{

	tSLInformation.sFWPatches = sFWPatches;
    24b8:	70 93 e7 01 	sts	0x01E7, r23
    24bc:	60 93 e6 01 	sts	0x01E6, r22
	tSLInformation.sDriverPatches = sDriverPatches;
    24c0:	50 93 e9 01 	sts	0x01E9, r21
    24c4:	40 93 e8 01 	sts	0x01E8, r20
	tSLInformation.sBootLoaderPatches = sBootLoaderPatches;
    24c8:	30 93 eb 01 	sts	0x01EB, r19
    24cc:	20 93 ea 01 	sts	0x01EA, r18

	// init io callback
	tSLInformation.ReadWlanInterruptPin = sReadWlanInterruptPin;
    24d0:	10 93 ef 01 	sts	0x01EF, r17
    24d4:	00 93 ee 01 	sts	0x01EE, r16
	tSLInformation.WlanInterruptEnable  = sWlanInterruptEnable;
    24d8:	f0 92 f1 01 	sts	0x01F1, r15
    24dc:	e0 92 f0 01 	sts	0x01F0, r14
	tSLInformation.WlanInterruptDisable = sWlanInterruptDisable;
    24e0:	d0 92 f3 01 	sts	0x01F3, r13
    24e4:	c0 92 f2 01 	sts	0x01F2, r12
	tSLInformation.WriteWlanPin = sWriteWlanPin;
    24e8:	b0 92 f5 01 	sts	0x01F5, r11
    24ec:	a0 92 f4 01 	sts	0x01F4, r10

	//init asynchronous events callback
	tSLInformation.sWlanCB= sWlanCB;
    24f0:	90 93 ed 01 	sts	0x01ED, r25
    24f4:	80 93 ec 01 	sts	0x01EC, r24

	// By default TX Complete events are routed to host too
	tSLInformation.InformHostOnTxComplete = 1;
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	80 93 0a 02 	sts	0x020A, r24
}
    24fe:	1f 91       	pop	r17
    2500:	0f 91       	pop	r16
    2502:	ff 90       	pop	r15
    2504:	ef 90       	pop	r14
    2506:	df 90       	pop	r13
    2508:	cf 90       	pop	r12
    250a:	bf 90       	pop	r11
    250c:	af 90       	pop	r10
    250e:	08 95       	ret

00002510 <wlan_set_event_mask>:
//!  @brief    Mask event according to bit mask. In case that event is 
//!            masked (1), the device will not send the masked event to host. 
//
//*****************************************************************************

INT32 wlan_set_event_mask(UINT32 ulMask)
    2510:	0f 93       	push	r16
    2512:	1f 93       	push	r17
    2514:	df 93       	push	r29
    2516:	cf 93       	push	r28
    2518:	00 d0       	rcall	.+0      	; 0x251a <wlan_set_event_mask+0xa>
    251a:	00 d0       	rcall	.+0      	; 0x251c <wlan_set_event_mask+0xc>
    251c:	cd b7       	in	r28, 0x3d	; 61
    251e:	de b7       	in	r29, 0x3e	; 62
    2520:	ab 01       	movw	r20, r22
    2522:	bc 01       	movw	r22, r24
	INT32 ret;
	UINT8 *ptr;
	UINT8 *args;


	if ((ulMask & HCI_EVNT_WLAN_TX_COMPLETE) == HCI_EVNT_WLAN_TX_COMPLETE)
    2524:	db 01       	movw	r26, r22
    2526:	ca 01       	movw	r24, r20
    2528:	88 70       	andi	r24, 0x08	; 8
    252a:	90 78       	andi	r25, 0x80	; 128
    252c:	a0 70       	andi	r26, 0x00	; 0
    252e:	b0 70       	andi	r27, 0x00	; 0
    2530:	88 50       	subi	r24, 0x08	; 8
    2532:	90 48       	sbci	r25, 0x80	; 128
    2534:	a0 40       	sbci	r26, 0x00	; 0
    2536:	b0 40       	sbci	r27, 0x00	; 0
    2538:	a9 f4       	brne	.+42     	; 0x2564 <wlan_set_event_mask+0x54>
	{
		tSLInformation.InformHostOnTxComplete = 0;
    253a:	10 92 0a 02 	sts	0x020A, r1

		// Since an event is a virtual event - i.e. it is not coming from CC3000
		// there is no need to send anything to the device if it was an only event
		if (ulMask == HCI_EVNT_WLAN_TX_COMPLETE)
    253e:	48 30       	cpi	r20, 0x08	; 8
    2540:	80 e8       	ldi	r24, 0x80	; 128
    2542:	58 07       	cpc	r21, r24
    2544:	80 e0       	ldi	r24, 0x00	; 0
    2546:	68 07       	cpc	r22, r24
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	78 07       	cpc	r23, r24
    254c:	29 f4       	brne	.+10     	; 0x2558 <wlan_set_event_mask+0x48>
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	40 e0       	ldi	r20, 0x00	; 0
    2554:	50 e0       	ldi	r21, 0x00	; 0
    2556:	2a c0       	rjmp	.+84     	; 0x25ac <wlan_set_event_mask+0x9c>
		{
			return 0;
		}

		ulMask &= ~HCI_EVNT_WLAN_TX_COMPLETE;
    2558:	47 7f       	andi	r20, 0xF7	; 247
    255a:	5f 77       	andi	r21, 0x7F	; 127
    255c:	60 70       	andi	r22, 0x00	; 0
    255e:	70 70       	andi	r23, 0x00	; 0
		ulMask |= HCI_EVNT_WLAN_UNSOL_BASE;
    2560:	50 68       	ori	r21, 0x80	; 128
    2562:	03 c0       	rjmp	.+6      	; 0x256a <wlan_set_event_mask+0x5a>
	}
	else
	{
		tSLInformation.InformHostOnTxComplete = 1;
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	80 93 0a 02 	sts	0x020A, r24
	}

	ret = EFAIL;
    256a:	8f ef       	ldi	r24, 0xFF	; 255
    256c:	9f ef       	ldi	r25, 0xFF	; 255
    256e:	af ef       	ldi	r26, 0xFF	; 255
    2570:	bf ef       	ldi	r27, 0xFF	; 255
    2572:	89 83       	std	Y+1, r24	; 0x01
    2574:	9a 83       	std	Y+2, r25	; 0x02
    2576:	ab 83       	std	Y+3, r26	; 0x03
    2578:	bc 83       	std	Y+4, r27	; 0x04
	ptr = tSLInformation.pucTxCommandBuffer;
    257a:	00 91 e4 01 	lds	r16, 0x01E4
    257e:	10 91 e5 01 	lds	r17, 0x01E5
	args = (UINT8 *)(ptr + HEADERS_SIZE_CMD);

	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, ulMask);
    2582:	c8 01       	movw	r24, r16
    2584:	09 96       	adiw	r24, 0x09	; 9
    2586:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_EVENT_MASK,
		ptr, WLAN_SET_MASK_PARAMS_LEN);
    258a:	88 e0       	ldi	r24, 0x08	; 8
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	b8 01       	movw	r22, r16
    2590:	44 e0       	ldi	r20, 0x04	; 4
    2592:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <hci_command_send>

	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_CMND_EVENT_MASK, &ret);
    2596:	88 e0       	ldi	r24, 0x08	; 8
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	be 01       	movw	r22, r28
    259c:	6f 5f       	subi	r22, 0xFF	; 255
    259e:	7f 4f       	sbci	r23, 0xFF	; 255
    25a0:	0e 94 c1 09 	call	0x1382	; 0x1382 <SimpleLinkWaitEvent>

	return(ret);
    25a4:	29 81       	ldd	r18, Y+1	; 0x01
    25a6:	3a 81       	ldd	r19, Y+2	; 0x02
    25a8:	4b 81       	ldd	r20, Y+3	; 0x03
    25aa:	5c 81       	ldd	r21, Y+4	; 0x04
}
    25ac:	b9 01       	movw	r22, r18
    25ae:	ca 01       	movw	r24, r20
    25b0:	0f 90       	pop	r0
    25b2:	0f 90       	pop	r0
    25b4:	0f 90       	pop	r0
    25b6:	0f 90       	pop	r0
    25b8:	cf 91       	pop	r28
    25ba:	df 91       	pop	r29
    25bc:	1f 91       	pop	r17
    25be:	0f 91       	pop	r16
    25c0:	08 95       	ret

000025c2 <wlan_ioctl_set_scan_params>:
	UINT32 uiMaxDwellTime,
	UINT32 uiNumOfProbeRequests,
	UINT32 uiChannelMask,INT32 iRSSIThreshold,
	UINT32 uiSNRThreshold,
	UINT32 uiDefaultTxPower,
	UINT32 *aiIntervalList)
    25c2:	2f 92       	push	r2
    25c4:	3f 92       	push	r3
    25c6:	4f 92       	push	r4
    25c8:	5f 92       	push	r5
    25ca:	6f 92       	push	r6
    25cc:	7f 92       	push	r7
    25ce:	8f 92       	push	r8
    25d0:	9f 92       	push	r9
    25d2:	af 92       	push	r10
    25d4:	bf 92       	push	r11
    25d6:	cf 92       	push	r12
    25d8:	df 92       	push	r13
    25da:	ef 92       	push	r14
    25dc:	ff 92       	push	r15
    25de:	0f 93       	push	r16
    25e0:	1f 93       	push	r17
    25e2:	df 93       	push	r29
    25e4:	cf 93       	push	r28
    25e6:	cd b7       	in	r28, 0x3d	; 61
    25e8:	de b7       	in	r29, 0x3e	; 62
    25ea:	28 97       	sbiw	r28, 0x08	; 8
    25ec:	0f b6       	in	r0, 0x3f	; 63
    25ee:	f8 94       	cli
    25f0:	de bf       	out	0x3e, r29	; 62
    25f2:	0f be       	out	0x3f, r0	; 63
    25f4:	cd bf       	out	0x3d, r28	; 61
    25f6:	3b 01       	movw	r6, r22
    25f8:	4c 01       	movw	r8, r24
    25fa:	19 01       	movw	r2, r18
    25fc:	2a 01       	movw	r4, r20
    25fe:	8d a5       	ldd	r24, Y+45	; 0x2d
    2600:	8f 83       	std	Y+7, r24	; 0x07
    2602:	9e a5       	ldd	r25, Y+46	; 0x2e
    2604:	98 87       	std	Y+8, r25	; 0x08
{
	UINT32  uiRes;
	UINT8 *ptr;
	UINT8 *args;

	ptr = tSLInformation.pucTxCommandBuffer;
    2606:	80 91 e4 01 	lds	r24, 0x01E4
    260a:	90 91 e5 01 	lds	r25, 0x01E5
    260e:	9e 83       	std	Y+6, r25	; 0x06
    2610:	8d 83       	std	Y+5, r24	; 0x05
	args = (ptr + HEADERS_SIZE_CMD);

	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, 36);
    2612:	09 96       	adiw	r24, 0x09	; 9
    2614:	44 e2       	ldi	r20, 0x24	; 36
    2616:	50 e0       	ldi	r21, 0x00	; 0
    2618:	60 e0       	ldi	r22, 0x00	; 0
    261a:	70 e0       	ldi	r23, 0x00	; 0
    261c:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, uiEnable);
    2620:	b4 01       	movw	r22, r8
    2622:	a3 01       	movw	r20, r6
    2624:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, uiMinDwellTime);
    2628:	b2 01       	movw	r22, r4
    262a:	a1 01       	movw	r20, r2
    262c:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, uiMaxDwellTime);
    2630:	b8 01       	movw	r22, r16
    2632:	a7 01       	movw	r20, r14
    2634:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, uiNumOfProbeRequests);
    2638:	b6 01       	movw	r22, r12
    263a:	a5 01       	movw	r20, r10
    263c:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, uiChannelMask);
    2640:	4d 8d       	ldd	r20, Y+29	; 0x1d
    2642:	5e 8d       	ldd	r21, Y+30	; 0x1e
    2644:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2646:	78 a1       	ldd	r23, Y+32	; 0x20
    2648:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, iRSSIThreshold);
    264c:	49 a1       	ldd	r20, Y+33	; 0x21
    264e:	5a a1       	ldd	r21, Y+34	; 0x22
    2650:	6b a1       	ldd	r22, Y+35	; 0x23
    2652:	7c a1       	ldd	r23, Y+36	; 0x24
    2654:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, uiSNRThreshold);
    2658:	4d a1       	ldd	r20, Y+37	; 0x25
    265a:	5e a1       	ldd	r21, Y+38	; 0x26
    265c:	6f a1       	ldd	r22, Y+39	; 0x27
    265e:	78 a5       	ldd	r23, Y+40	; 0x28
    2660:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, uiDefaultTxPower);
    2664:	49 a5       	ldd	r20, Y+41	; 0x29
    2666:	5a a5       	ldd	r21, Y+42	; 0x2a
    2668:	6b a5       	ldd	r22, Y+43	; 0x2b
    266a:	7c a5       	ldd	r23, Y+44	; 0x2c
    266c:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
    2670:	dc 01       	movw	r26, r24
    2672:	8f 81       	ldd	r24, Y+7	; 0x07
    2674:	98 85       	ldd	r25, Y+8	; 0x08
    2676:	fc 01       	movw	r30, r24
	ARRAY_TO_STREAM(args, aiIntervalList, sizeof(UINT32) * 
    2678:	9f 01       	movw	r18, r30
    267a:	20 5c       	subi	r18, 0xC0	; 192
    267c:	3f 4f       	sbci	r19, 0xFF	; 255
    267e:	02 c0       	rjmp	.+4      	; 0x2684 <wlan_ioctl_set_scan_params+0xc2>
    2680:	81 91       	ld	r24, Z+
    2682:	8d 93       	st	X+, r24
    2684:	e2 17       	cp	r30, r18
    2686:	f3 07       	cpc	r31, r19
    2688:	d9 f7       	brne	.-10     	; 0x2680 <wlan_ioctl_set_scan_params+0xbe>
		SL_SET_SCAN_PARAMS_INTERVAL_LIST_SIZE);

	// Initiate a HCI command
	hci_command_send(HCI_CMND_WLAN_IOCTL_SET_SCANPARAM,
		ptr, WLAN_SET_SCAN_PARAMS_LEN);
    268a:	83 e0       	ldi	r24, 0x03	; 3
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	6d 81       	ldd	r22, Y+5	; 0x05
    2690:	7e 81       	ldd	r23, Y+6	; 0x06
    2692:	44 e6       	ldi	r20, 0x64	; 100
    2694:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <hci_command_send>

	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_CMND_WLAN_IOCTL_SET_SCANPARAM, &uiRes);
    2698:	83 e0       	ldi	r24, 0x03	; 3
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	be 01       	movw	r22, r28
    269e:	6f 5f       	subi	r22, 0xFF	; 255
    26a0:	7f 4f       	sbci	r23, 0xFF	; 255
    26a2:	0e 94 c1 09 	call	0x1382	; 0x1382 <SimpleLinkWaitEvent>
    26a6:	69 81       	ldd	r22, Y+1	; 0x01
    26a8:	7a 81       	ldd	r23, Y+2	; 0x02

	return(uiRes);
}
    26aa:	8b 81       	ldd	r24, Y+3	; 0x03
    26ac:	9c 81       	ldd	r25, Y+4	; 0x04
    26ae:	28 96       	adiw	r28, 0x08	; 8
    26b0:	0f b6       	in	r0, 0x3f	; 63
    26b2:	f8 94       	cli
    26b4:	de bf       	out	0x3e, r29	; 62
    26b6:	0f be       	out	0x3f, r0	; 63
    26b8:	cd bf       	out	0x3d, r28	; 61
    26ba:	cf 91       	pop	r28
    26bc:	df 91       	pop	r29
    26be:	1f 91       	pop	r17
    26c0:	0f 91       	pop	r16
    26c2:	ff 90       	pop	r15
    26c4:	ef 90       	pop	r14
    26c6:	df 90       	pop	r13
    26c8:	cf 90       	pop	r12
    26ca:	bf 90       	pop	r11
    26cc:	af 90       	pop	r10
    26ce:	9f 90       	pop	r9
    26d0:	8f 90       	pop	r8
    26d2:	7f 90       	pop	r7
    26d4:	6f 90       	pop	r6
    26d6:	5f 90       	pop	r5
    26d8:	4f 90       	pop	r4
    26da:	3f 90       	pop	r3
    26dc:	2f 90       	pop	r2
    26de:	08 95       	ret

000026e0 <wlan_ioctl_del_profile>:
//!
//!  @sa        wlan_add_profile 
//
//*****************************************************************************

INT32 wlan_ioctl_del_profile(UINT32 ulIndex)
    26e0:	0f 93       	push	r16
    26e2:	1f 93       	push	r17
    26e4:	df 93       	push	r29
    26e6:	cf 93       	push	r28
    26e8:	00 d0       	rcall	.+0      	; 0x26ea <wlan_ioctl_del_profile+0xa>
    26ea:	00 d0       	rcall	.+0      	; 0x26ec <wlan_ioctl_del_profile+0xc>
    26ec:	cd b7       	in	r28, 0x3d	; 61
    26ee:	de b7       	in	r29, 0x3e	; 62
    26f0:	ab 01       	movw	r20, r22
    26f2:	bc 01       	movw	r22, r24
{
	INT32 ret;
	UINT8 *ptr;
	UINT8 *args;

	ptr = tSLInformation.pucTxCommandBuffer;
    26f4:	00 91 e4 01 	lds	r16, 0x01E4
    26f8:	10 91 e5 01 	lds	r17, 0x01E5
	args = (UINT8 *)(ptr + HEADERS_SIZE_CMD);

	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, ulIndex);
    26fc:	c8 01       	movw	r24, r16
    26fe:	09 96       	adiw	r24, 0x09	; 9
    2700:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	ret = EFAIL;
    2704:	8f ef       	ldi	r24, 0xFF	; 255
    2706:	9f ef       	ldi	r25, 0xFF	; 255
    2708:	af ef       	ldi	r26, 0xFF	; 255
    270a:	bf ef       	ldi	r27, 0xFF	; 255
    270c:	89 83       	std	Y+1, r24	; 0x01
    270e:	9a 83       	std	Y+2, r25	; 0x02
    2710:	ab 83       	std	Y+3, r26	; 0x03
    2712:	bc 83       	std	Y+4, r27	; 0x04

	// Initiate a HCI command
	hci_command_send(HCI_CMND_WLAN_IOCTL_DEL_PROFILE,
		ptr, WLAN_DEL_PROFILE_PARAMS_LEN);
    2714:	86 e0       	ldi	r24, 0x06	; 6
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	b8 01       	movw	r22, r16
    271a:	44 e0       	ldi	r20, 0x04	; 4
    271c:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <hci_command_send>

	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_CMND_WLAN_IOCTL_DEL_PROFILE, &ret);
    2720:	86 e0       	ldi	r24, 0x06	; 6
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	be 01       	movw	r22, r28
    2726:	6f 5f       	subi	r22, 0xFF	; 255
    2728:	7f 4f       	sbci	r23, 0xFF	; 255
    272a:	0e 94 c1 09 	call	0x1382	; 0x1382 <SimpleLinkWaitEvent>
    272e:	69 81       	ldd	r22, Y+1	; 0x01
    2730:	7a 81       	ldd	r23, Y+2	; 0x02

	return(ret);
}
    2732:	8b 81       	ldd	r24, Y+3	; 0x03
    2734:	9c 81       	ldd	r25, Y+4	; 0x04
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	0f 90       	pop	r0
    273c:	0f 90       	pop	r0
    273e:	cf 91       	pop	r28
    2740:	df 91       	pop	r29
    2742:	1f 91       	pop	r17
    2744:	0f 91       	pop	r16
    2746:	08 95       	ret

00002748 <wlan_ioctl_set_connection_policy>:
//
//*****************************************************************************

INT32 wlan_ioctl_set_connection_policy(UINT32 should_connect_to_open_ap, 
	UINT32 ulShouldUseFastConnect,
	UINT32 ulUseProfiles)
    2748:	4f 92       	push	r4
    274a:	5f 92       	push	r5
    274c:	6f 92       	push	r6
    274e:	7f 92       	push	r7
    2750:	8f 92       	push	r8
    2752:	9f 92       	push	r9
    2754:	af 92       	push	r10
    2756:	bf 92       	push	r11
    2758:	cf 92       	push	r12
    275a:	df 92       	push	r13
    275c:	ef 92       	push	r14
    275e:	ff 92       	push	r15
    2760:	0f 93       	push	r16
    2762:	1f 93       	push	r17
    2764:	df 93       	push	r29
    2766:	cf 93       	push	r28
    2768:	00 d0       	rcall	.+0      	; 0x276a <wlan_ioctl_set_connection_policy+0x22>
    276a:	00 d0       	rcall	.+0      	; 0x276c <wlan_ioctl_set_connection_policy+0x24>
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
    2770:	5b 01       	movw	r10, r22
    2772:	6c 01       	movw	r12, r24
    2774:	39 01       	movw	r6, r18
    2776:	4a 01       	movw	r8, r20
{
	INT32 ret;
	UINT8 *ptr;
	UINT8 *args;

	ret = EFAIL;
    2778:	8f ef       	ldi	r24, 0xFF	; 255
    277a:	9f ef       	ldi	r25, 0xFF	; 255
    277c:	af ef       	ldi	r26, 0xFF	; 255
    277e:	bf ef       	ldi	r27, 0xFF	; 255
    2780:	89 83       	std	Y+1, r24	; 0x01
    2782:	9a 83       	std	Y+2, r25	; 0x02
    2784:	ab 83       	std	Y+3, r26	; 0x03
    2786:	bc 83       	std	Y+4, r27	; 0x04
	ptr = tSLInformation.pucTxCommandBuffer;
    2788:	40 90 e4 01 	lds	r4, 0x01E4
    278c:	50 90 e5 01 	lds	r5, 0x01E5
	args = (UINT8 *)(ptr + HEADERS_SIZE_CMD);

	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, should_connect_to_open_ap);
    2790:	c2 01       	movw	r24, r4
    2792:	09 96       	adiw	r24, 0x09	; 9
    2794:	b6 01       	movw	r22, r12
    2796:	a5 01       	movw	r20, r10
    2798:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, ulShouldUseFastConnect);
    279c:	b4 01       	movw	r22, r8
    279e:	a3 01       	movw	r20, r6
    27a0:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, ulUseProfiles);
    27a4:	b8 01       	movw	r22, r16
    27a6:	a7 01       	movw	r20, r14
    27a8:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_WLAN_IOCTL_SET_CONNECTION_POLICY,
		ptr, WLAN_SET_CONNECTION_POLICY_PARAMS_LEN);
    27ac:	84 e0       	ldi	r24, 0x04	; 4
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	b2 01       	movw	r22, r4
    27b2:	4c e0       	ldi	r20, 0x0C	; 12
    27b4:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <hci_command_send>

	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_CMND_WLAN_IOCTL_SET_CONNECTION_POLICY, &ret);
    27b8:	84 e0       	ldi	r24, 0x04	; 4
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	be 01       	movw	r22, r28
    27be:	6f 5f       	subi	r22, 0xFF	; 255
    27c0:	7f 4f       	sbci	r23, 0xFF	; 255
    27c2:	0e 94 c1 09 	call	0x1382	; 0x1382 <SimpleLinkWaitEvent>
    27c6:	69 81       	ldd	r22, Y+1	; 0x01
    27c8:	7a 81       	ldd	r23, Y+2	; 0x02

	return(ret);
}
    27ca:	8b 81       	ldd	r24, Y+3	; 0x03
    27cc:	9c 81       	ldd	r25, Y+4	; 0x04
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	0f 90       	pop	r0
    27d4:	0f 90       	pop	r0
    27d6:	cf 91       	pop	r28
    27d8:	df 91       	pop	r29
    27da:	1f 91       	pop	r17
    27dc:	0f 91       	pop	r16
    27de:	ff 90       	pop	r15
    27e0:	ef 90       	pop	r14
    27e2:	df 90       	pop	r13
    27e4:	cf 90       	pop	r12
    27e6:	bf 90       	pop	r11
    27e8:	af 90       	pop	r10
    27ea:	9f 90       	pop	r9
    27ec:	8f 90       	pop	r8
    27ee:	7f 90       	pop	r7
    27f0:	6f 90       	pop	r6
    27f2:	5f 90       	pop	r5
    27f4:	4f 90       	pop	r4
    27f6:	08 95       	ret

000027f8 <wlan_connect>:
// Adafruit CC3k Host Driver Difference
// Make ssid a const char pointer because it isn't modified and the Adafruit
// driver code needs it to be const to interface with Arduino's client library.
// Noted 12-12-2014 by tdicola
INT32 wlan_connect(UINT32 ulSecType, const CHAR *ssid, INT32 ssid_len,
	UINT8 *bssid, UINT8 *key, INT32 key_len)
    27f8:	2f 92       	push	r2
    27fa:	3f 92       	push	r3
    27fc:	4f 92       	push	r4
    27fe:	5f 92       	push	r5
    2800:	6f 92       	push	r6
    2802:	7f 92       	push	r7
    2804:	8f 92       	push	r8
    2806:	9f 92       	push	r9
    2808:	af 92       	push	r10
    280a:	bf 92       	push	r11
    280c:	cf 92       	push	r12
    280e:	df 92       	push	r13
    2810:	ef 92       	push	r14
    2812:	ff 92       	push	r15
    2814:	0f 93       	push	r16
    2816:	1f 93       	push	r17
    2818:	df 93       	push	r29
    281a:	cf 93       	push	r28
    281c:	cd b7       	in	r28, 0x3d	; 61
    281e:	de b7       	in	r29, 0x3e	; 62
    2820:	60 97       	sbiw	r28, 0x10	; 16
    2822:	0f b6       	in	r0, 0x3f	; 63
    2824:	f8 94       	cli
    2826:	de bf       	out	0x3e, r29	; 62
    2828:	0f be       	out	0x3f, r0	; 63
    282a:	cd bf       	out	0x3d, r28	; 61
    282c:	2b 01       	movw	r4, r22
    282e:	3c 01       	movw	r6, r24
    2830:	5c 87       	std	Y+12, r21	; 0x0c
    2832:	4b 87       	std	Y+11, r20	; 0x0b
    2834:	0d 87       	std	Y+13, r16	; 0x0d
    2836:	1e 87       	std	Y+14, r17	; 0x0e
    2838:	2f 87       	std	Y+15, r18	; 0x0f
    283a:	38 8b       	std	Y+16, r19	; 0x10
    283c:	16 01       	movw	r2, r12
{
	INT32 ret;
	UINT8 *ptr;
	UINT8 *args;
	UINT8 bssid_zero[] = {0, 0, 0, 0, 0, 0};
    283e:	8e 01       	movw	r16, r28
    2840:	0b 5f       	subi	r16, 0xFB	; 251
    2842:	1f 4f       	sbci	r17, 0xFF	; 255
    2844:	86 e0       	ldi	r24, 0x06	; 6
    2846:	d8 01       	movw	r26, r16
    2848:	1d 92       	st	X+, r1
    284a:	8a 95       	dec	r24
    284c:	e9 f7       	brne	.-6      	; 0x2848 <wlan_connect+0x50>

	ret  	= EFAIL;
    284e:	8f ef       	ldi	r24, 0xFF	; 255
    2850:	9f ef       	ldi	r25, 0xFF	; 255
    2852:	af ef       	ldi	r26, 0xFF	; 255
    2854:	bf ef       	ldi	r27, 0xFF	; 255
    2856:	89 83       	std	Y+1, r24	; 0x01
    2858:	9a 83       	std	Y+2, r25	; 0x02
    285a:	ab 83       	std	Y+3, r26	; 0x03
    285c:	bc 83       	std	Y+4, r27	; 0x04
	ptr  	= tSLInformation.pucTxCommandBuffer;
    285e:	c0 90 e4 01 	lds	r12, 0x01E4
    2862:	d0 90 e5 01 	lds	r13, 0x01E5
	args 	= (ptr + HEADERS_SIZE_CMD);

	// Fill in command buffer
	args = UINT32_TO_STREAM(args, 0x0000001c);
    2866:	c6 01       	movw	r24, r12
    2868:	09 96       	adiw	r24, 0x09	; 9
    286a:	4c e1       	ldi	r20, 0x1C	; 28
    286c:	50 e0       	ldi	r21, 0x00	; 0
    286e:	60 e0       	ldi	r22, 0x00	; 0
    2870:	70 e0       	ldi	r23, 0x00	; 0
    2872:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, ssid_len);
    2876:	4d 85       	ldd	r20, Y+13	; 0x0d
    2878:	5e 85       	ldd	r21, Y+14	; 0x0e
    287a:	6f 85       	ldd	r22, Y+15	; 0x0f
    287c:	78 89       	ldd	r23, Y+16	; 0x10
    287e:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, ulSecType);
    2882:	b3 01       	movw	r22, r6
    2884:	a2 01       	movw	r20, r4
    2886:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, 0x00000010 + ssid_len);
    288a:	4d 85       	ldd	r20, Y+13	; 0x0d
    288c:	5e 85       	ldd	r21, Y+14	; 0x0e
    288e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2890:	78 89       	ldd	r23, Y+16	; 0x10
    2892:	40 5f       	subi	r20, 0xF0	; 240
    2894:	5f 4f       	sbci	r21, 0xFF	; 255
    2896:	6f 4f       	sbci	r22, 0xFF	; 255
    2898:	7f 4f       	sbci	r23, 0xFF	; 255
    289a:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, key_len);
    289e:	b5 01       	movw	r22, r10
    28a0:	a4 01       	movw	r20, r8
    28a2:	0e 94 a2 02 	call	0x544	; 0x544 <UINT32_TO_STREAM_f>
	args = UINT16_TO_STREAM(args, 0);
    28a6:	60 e0       	ldi	r22, 0x00	; 0
    28a8:	70 e0       	ldi	r23, 0x00	; 0
    28aa:	0e 94 be 02 	call	0x57c	; 0x57c <UINT16_TO_STREAM_f>
    28ae:	dc 01       	movw	r26, r24

	// padding shall be zeroed
	if(bssid)
    28b0:	e1 14       	cp	r14, r1
    28b2:	f1 04       	cpc	r15, r1
    28b4:	81 f0       	breq	.+32     	; 0x28d6 <wlan_connect+0xde>
    28b6:	ac 01       	movw	r20, r24
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	30 e0       	ldi	r19, 0x00	; 0
	{
		ARRAY_TO_STREAM(args, bssid, ETH_ALEN);
    28bc:	f7 01       	movw	r30, r14
    28be:	e2 0f       	add	r30, r18
    28c0:	f3 1f       	adc	r31, r19
    28c2:	80 81       	ld	r24, Z
    28c4:	fa 01       	movw	r30, r20
    28c6:	81 93       	st	Z+, r24
    28c8:	af 01       	movw	r20, r30
    28ca:	2f 5f       	subi	r18, 0xFF	; 255
    28cc:	3f 4f       	sbci	r19, 0xFF	; 255
    28ce:	26 30       	cpi	r18, 0x06	; 6
    28d0:	31 05       	cpc	r19, r1
    28d2:	a1 f7       	brne	.-24     	; 0x28bc <wlan_connect+0xc4>
    28d4:	0e c0       	rjmp	.+28     	; 0x28f2 <wlan_connect+0xfa>
    28d6:	b8 01       	movw	r22, r16
    28d8:	9c 01       	movw	r18, r24
	}
	else
	{
		ARRAY_TO_STREAM(args, bssid_zero, ETH_ALEN);
    28da:	ae 01       	movw	r20, r28
    28dc:	45 5f       	subi	r20, 0xF5	; 245
    28de:	5f 4f       	sbci	r21, 0xFF	; 255
    28e0:	fb 01       	movw	r30, r22
    28e2:	81 91       	ld	r24, Z+
    28e4:	bf 01       	movw	r22, r30
    28e6:	f9 01       	movw	r30, r18
    28e8:	81 93       	st	Z+, r24
    28ea:	9f 01       	movw	r18, r30
    28ec:	64 17       	cp	r22, r20
    28ee:	75 07       	cpc	r23, r21
    28f0:	b9 f7       	brne	.-18     	; 0x28e0 <wlan_connect+0xe8>
    28f2:	bd 01       	movw	r22, r26
    28f4:	6a 5f       	subi	r22, 0xFA	; 250
    28f6:	7f 4f       	sbci	r23, 0xFF	; 255
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	40 e0       	ldi	r20, 0x00	; 0
    28fe:	50 e0       	ldi	r21, 0x00	; 0
    2900:	0c c0       	rjmp	.+24     	; 0x291a <wlan_connect+0x122>
	}

	ARRAY_TO_STREAM(args, ssid, ssid_len);
    2902:	eb 85       	ldd	r30, Y+11	; 0x0b
    2904:	fc 85       	ldd	r31, Y+12	; 0x0c
    2906:	e2 0f       	add	r30, r18
    2908:	f3 1f       	adc	r31, r19
    290a:	80 81       	ld	r24, Z
    290c:	db 01       	movw	r26, r22
    290e:	8d 93       	st	X+, r24
    2910:	bd 01       	movw	r22, r26
    2912:	2f 5f       	subi	r18, 0xFF	; 255
    2914:	3f 4f       	sbci	r19, 0xFF	; 255
    2916:	4f 4f       	sbci	r20, 0xFF	; 255
    2918:	5f 4f       	sbci	r21, 0xFF	; 255
    291a:	8d 85       	ldd	r24, Y+13	; 0x0d
    291c:	9e 85       	ldd	r25, Y+14	; 0x0e
    291e:	af 85       	ldd	r26, Y+15	; 0x0f
    2920:	b8 89       	ldd	r27, Y+16	; 0x10
    2922:	28 17       	cp	r18, r24
    2924:	39 07       	cpc	r19, r25
    2926:	4a 07       	cpc	r20, r26
    2928:	5b 07       	cpc	r21, r27
    292a:	5c f3       	brlt	.-42     	; 0x2902 <wlan_connect+0x10a>

	if(key_len && key)
    292c:	81 14       	cp	r8, r1
    292e:	91 04       	cpc	r9, r1
    2930:	a1 04       	cpc	r10, r1
    2932:	b1 04       	cpc	r11, r1
    2934:	c9 f0       	breq	.+50     	; 0x2968 <wlan_connect+0x170>
    2936:	21 14       	cp	r2, r1
    2938:	31 04       	cpc	r3, r1
    293a:	b1 f0       	breq	.+44     	; 0x2968 <wlan_connect+0x170>
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	40 e0       	ldi	r20, 0x00	; 0
    2942:	50 e0       	ldi	r21, 0x00	; 0
    2944:	0c c0       	rjmp	.+24     	; 0x295e <wlan_connect+0x166>
// Adafruit CC3k Host Driver Difference
// Make ssid a const char pointer because it isn't modified and the Adafruit
// driver code needs it to be const to interface with Arduino's client library.
// Noted 12-12-2014 by tdicola
INT32 wlan_connect(UINT32 ulSecType, const CHAR *ssid, INT32 ssid_len,
	UINT8 *bssid, UINT8 *key, INT32 key_len)
    2946:	f9 01       	movw	r30, r18

	ARRAY_TO_STREAM(args, ssid, ssid_len);

	if(key_len && key)
	{
		ARRAY_TO_STREAM(args, key, key_len);
    2948:	db 01       	movw	r26, r22
    294a:	a2 0f       	add	r26, r18
    294c:	b3 1f       	adc	r27, r19
    294e:	e2 0d       	add	r30, r2
    2950:	f3 1d       	adc	r31, r3
    2952:	80 81       	ld	r24, Z
    2954:	8c 93       	st	X, r24
    2956:	2f 5f       	subi	r18, 0xFF	; 255
    2958:	3f 4f       	sbci	r19, 0xFF	; 255
    295a:	4f 4f       	sbci	r20, 0xFF	; 255
    295c:	5f 4f       	sbci	r21, 0xFF	; 255
    295e:	28 15       	cp	r18, r8
    2960:	39 05       	cpc	r19, r9
    2962:	4a 05       	cpc	r20, r10
    2964:	5b 05       	cpc	r21, r11
    2966:	7c f3       	brlt	.-34     	; 0x2946 <wlan_connect+0x14e>
	}

	// Initiate a HCI command
	hci_command_send(HCI_CMND_WLAN_CONNECT, ptr, WLAN_CONNECT_PARAM_LEN + 
		ssid_len + key_len - 1);
    2968:	4d 85       	ldd	r20, Y+13	; 0x0d
    296a:	44 5e       	subi	r20, 0xE4	; 228
    296c:	48 0d       	add	r20, r8
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	b6 01       	movw	r22, r12
    2974:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <hci_command_send>

	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_CMND_WLAN_CONNECT, &ret);
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	be 01       	movw	r22, r28
    297e:	6f 5f       	subi	r22, 0xFF	; 255
    2980:	7f 4f       	sbci	r23, 0xFF	; 255
    2982:	0e 94 c1 09 	call	0x1382	; 0x1382 <SimpleLinkWaitEvent>
	errno = ret;
    2986:	69 81       	ldd	r22, Y+1	; 0x01
    2988:	7a 81       	ldd	r23, Y+2	; 0x02
    298a:	8b 81       	ldd	r24, Y+3	; 0x03
    298c:	9c 81       	ldd	r25, Y+4	; 0x04
    298e:	9b 01       	movw	r18, r22
    2990:	20 93 e3 05 	sts	0x05E3, r18
    2994:	30 93 e4 05 	sts	0x05E4, r19

	return(ret);
}
    2998:	60 96       	adiw	r28, 0x10	; 16
    299a:	0f b6       	in	r0, 0x3f	; 63
    299c:	f8 94       	cli
    299e:	de bf       	out	0x3e, r29	; 62
    29a0:	0f be       	out	0x3f, r0	; 63
    29a2:	cd bf       	out	0x3d, r28	; 61
    29a4:	cf 91       	pop	r28
    29a6:	df 91       	pop	r29
    29a8:	1f 91       	pop	r17
    29aa:	0f 91       	pop	r16
    29ac:	ff 90       	pop	r15
    29ae:	ef 90       	pop	r14
    29b0:	df 90       	pop	r13
    29b2:	cf 90       	pop	r12
    29b4:	bf 90       	pop	r11
    29b6:	af 90       	pop	r10
    29b8:	9f 90       	pop	r9
    29ba:	8f 90       	pop	r8
    29bc:	7f 90       	pop	r7
    29be:	6f 90       	pop	r6
    29c0:	5f 90       	pop	r5
    29c2:	4f 90       	pop	r4
    29c4:	3f 90       	pop	r3
    29c6:	2f 90       	pop	r2
    29c8:	08 95       	ret

000029ca <wlan_start>:
//!  @sa            wlan_init , wlan_stop
//!
//
//*****************************************************************************

void wlan_start(UINT16 usPatchesAvailableAtHost)
    29ca:	ef 92       	push	r14
    29cc:	ff 92       	push	r15
    29ce:	0f 93       	push	r16
    29d0:	1f 93       	push	r17
    29d2:	cf 93       	push	r28
    29d4:	df 93       	push	r29
    29d6:	ec 01       	movw	r28, r24
{

	UINT32 ulSpiIRQState;

	tSLInformation.NumberOfSentPackets = 0;
    29d8:	10 92 02 02 	sts	0x0202, r1
    29dc:	10 92 03 02 	sts	0x0203, r1
    29e0:	10 92 04 02 	sts	0x0204, r1
    29e4:	10 92 05 02 	sts	0x0205, r1
	tSLInformation.NumberOfReleasedPackets = 0;
    29e8:	10 92 06 02 	sts	0x0206, r1
    29ec:	10 92 07 02 	sts	0x0207, r1
    29f0:	10 92 08 02 	sts	0x0208, r1
    29f4:	10 92 09 02 	sts	0x0209, r1
	tSLInformation.usRxEventOpcode = 0;
    29f8:	10 92 df 01 	sts	0x01DF, r1
    29fc:	10 92 de 01 	sts	0x01DE, r1
	tSLInformation.usNumberOfFreeBuffers = 0;
    2a00:	10 92 fb 01 	sts	0x01FB, r1
    2a04:	10 92 fa 01 	sts	0x01FA, r1
	tSLInformation.usSlBufferLength = 0;
    2a08:	10 92 fd 01 	sts	0x01FD, r1
    2a0c:	10 92 fc 01 	sts	0x01FC, r1
	tSLInformation.usBufferSize = 0;
    2a10:	10 92 ff 01 	sts	0x01FF, r1
    2a14:	10 92 fe 01 	sts	0x01FE, r1
	tSLInformation.usRxDataPending = 0;
    2a18:	10 92 01 02 	sts	0x0201, r1
    2a1c:	10 92 00 02 	sts	0x0200, r1
	tSLInformation.slTransmitDataError = 0;
    2a20:	10 92 f6 01 	sts	0x01F6, r1
    2a24:	10 92 f7 01 	sts	0x01F7, r1
    2a28:	10 92 f8 01 	sts	0x01F8, r1
    2a2c:	10 92 f9 01 	sts	0x01F9, r1
	tSLInformation.usEventOrDataReceived = 0;
    2a30:	10 92 e1 01 	sts	0x01E1, r1
    2a34:	10 92 e0 01 	sts	0x01E0, r1
	tSLInformation.pucReceivedData = 0;
    2a38:	10 92 e3 01 	sts	0x01E3, r1
    2a3c:	10 92 e2 01 	sts	0x01E2, r1

	// Allocate the memory for the RX/TX data transactions
	tSLInformation.pucTxCommandBuffer = (UINT8 *)wlan_tx_buffer;
    2a40:	89 ee       	ldi	r24, 0xE9	; 233
    2a42:	92 e0       	ldi	r25, 0x02	; 2
    2a44:	90 93 e5 01 	sts	0x01E5, r25
    2a48:	80 93 e4 01 	sts	0x01E4, r24

	// init spi
	SpiOpen(SpiReceiveHandler);
    2a4c:	87 e8       	ldi	r24, 0x87	; 135
    2a4e:	95 e1       	ldi	r25, 0x15	; 21
    2a50:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <_Z7SpiOpenPFvPvE>

	// Check the IRQ line
	ulSpiIRQState = tSLInformation.ReadWlanInterruptPin();
    2a54:	e0 91 ee 01 	lds	r30, 0x01EE
    2a58:	f0 91 ef 01 	lds	r31, 0x01EF
    2a5c:	09 95       	icall
    2a5e:	7b 01       	movw	r14, r22
    2a60:	8c 01       	movw	r16, r24

	// Chip enable: toggle WLAN EN line
	tSLInformation.WriteWlanPin( WLAN_ENABLE );
    2a62:	e0 91 f4 01 	lds	r30, 0x01F4
    2a66:	f0 91 f5 01 	lds	r31, 0x01F5
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	09 95       	icall

	if (ulSpiIRQState)
    2a6e:	e1 14       	cp	r14, r1
    2a70:	f1 04       	cpc	r15, r1
    2a72:	01 05       	cpc	r16, r1
    2a74:	11 05       	cpc	r17, r1
    2a76:	59 f0       	breq	.+22     	; 0x2a8e <wlan_start+0xc4>
	{
		// wait till the IRQ line goes low
		while(tSLInformation.ReadWlanInterruptPin() != 0)
    2a78:	e0 91 ee 01 	lds	r30, 0x01EE
    2a7c:	f0 91 ef 01 	lds	r31, 0x01EF
    2a80:	09 95       	icall
    2a82:	61 15       	cp	r22, r1
    2a84:	71 05       	cpc	r23, r1
    2a86:	81 05       	cpc	r24, r1
    2a88:	91 05       	cpc	r25, r1
    2a8a:	b1 f7       	brne	.-20     	; 0x2a78 <wlan_start+0xae>
    2a8c:	14 c0       	rjmp	.+40     	; 0x2ab6 <wlan_start+0xec>
		}
	}
	else
	{
		// wait till the IRQ line goes high and than low
		while(tSLInformation.ReadWlanInterruptPin() == 0)
    2a8e:	e0 91 ee 01 	lds	r30, 0x01EE
    2a92:	f0 91 ef 01 	lds	r31, 0x01EF
    2a96:	09 95       	icall
    2a98:	61 15       	cp	r22, r1
    2a9a:	71 05       	cpc	r23, r1
    2a9c:	81 05       	cpc	r24, r1
    2a9e:	91 05       	cpc	r25, r1
    2aa0:	b1 f3       	breq	.-20     	; 0x2a8e <wlan_start+0xc4>
		{
		}

		while(tSLInformation.ReadWlanInterruptPin() != 0)
    2aa2:	e0 91 ee 01 	lds	r30, 0x01EE
    2aa6:	f0 91 ef 01 	lds	r31, 0x01EF
    2aaa:	09 95       	icall
    2aac:	61 15       	cp	r22, r1
    2aae:	71 05       	cpc	r23, r1
    2ab0:	81 05       	cpc	r24, r1
    2ab2:	91 05       	cpc	r25, r1
    2ab4:	b1 f7       	brne	.-20     	; 0x2aa2 <wlan_start+0xd8>
static void SimpleLink_Init_Start(UINT16 usPatchesAvailableAtHost)
{
	UINT8 *ptr;
	UINT8 *args;

	ptr = tSLInformation.pucTxCommandBuffer;
    2ab6:	e0 91 e4 01 	lds	r30, 0x01E4
    2aba:	f0 91 e5 01 	lds	r31, 0x01E5
	args = (UINT8 *)(ptr + HEADERS_SIZE_CMD);

	UINT8_TO_STREAM(args, ((usPatchesAvailableAtHost) ? SL_PATCHES_REQUEST_FORCE_NONE : SL_PATCHES_REQUEST_DEFAULT));
    2abe:	cd 2b       	or	r28, r29
    2ac0:	11 f4       	brne	.+4      	; 0x2ac6 <wlan_start+0xfc>
    2ac2:	80 e0       	ldi	r24, 0x00	; 0
    2ac4:	01 c0       	rjmp	.+2      	; 0x2ac8 <wlan_start+0xfe>
    2ac6:	82 e0       	ldi	r24, 0x02	; 2
    2ac8:	81 87       	std	Z+9, r24	; 0x09

	// IRQ Line asserted - send HCI_CMND_SIMPLE_LINK_START to CC3000
	hci_command_send(HCI_CMND_SIMPLE_LINK_START, ptr, WLAN_SL_INIT_START_PARAMS_LEN);
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	90 e4       	ldi	r25, 0x40	; 64
    2ace:	bf 01       	movw	r22, r30
    2ad0:	41 e0       	ldi	r20, 0x01	; 1
    2ad2:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <hci_command_send>

	SimpleLinkWaitEvent(HCI_CMND_SIMPLE_LINK_START, 0);
    2ad6:	80 e0       	ldi	r24, 0x00	; 0
    2ad8:	90 e4       	ldi	r25, 0x40	; 64
    2ada:	60 e0       	ldi	r22, 0x00	; 0
    2adc:	70 e0       	ldi	r23, 0x00	; 0
    2ade:	0e 94 c1 09 	call	0x1382	; 0x1382 <SimpleLinkWaitEvent>
	DEBUGPRINT_F("SimpleLink start\n\r");
	SimpleLink_Init_Start(usPatchesAvailableAtHost);

	// Read Buffer's size and finish
	DEBUGPRINT_F("Read buffer\n\r");
	hci_command_send(HCI_CMND_READ_BUFFER_SIZE, tSLInformation.pucTxCommandBuffer, 0);
    2ae2:	60 91 e4 01 	lds	r22, 0x01E4
    2ae6:	70 91 e5 01 	lds	r23, 0x01E5
    2aea:	8b e0       	ldi	r24, 0x0B	; 11
    2aec:	90 e4       	ldi	r25, 0x40	; 64
    2aee:	40 e0       	ldi	r20, 0x00	; 0
    2af0:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <hci_command_send>
	SimpleLinkWaitEvent(HCI_CMND_READ_BUFFER_SIZE, 0);
    2af4:	8b e0       	ldi	r24, 0x0B	; 11
    2af6:	90 e4       	ldi	r25, 0x40	; 64
    2af8:	60 e0       	ldi	r22, 0x00	; 0
    2afa:	70 e0       	ldi	r23, 0x00	; 0
    2afc:	0e 94 c1 09 	call	0x1382	; 0x1382 <SimpleLinkWaitEvent>
}
    2b00:	df 91       	pop	r29
    2b02:	cf 91       	pop	r28
    2b04:	1f 91       	pop	r17
    2b06:	0f 91       	pop	r16
    2b08:	ff 90       	pop	r15
    2b0a:	ef 90       	pop	r14
    2b0c:	08 95       	ret

00002b0e <_Z17SpiReceiveHandlerPv>:
//! 			          called from the SPI library to receive the data
//
//*****************************************************************************
void SpiReceiveHandler(void *pvBuffer)
{	
	tSLInformation.usEventOrDataReceived = 1;
    2b0e:	21 e0       	ldi	r18, 0x01	; 1
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	30 93 e1 01 	sts	0x01E1, r19
    2b16:	20 93 e0 01 	sts	0x01E0, r18
	tSLInformation.pucReceivedData = (UINT8 *)pvBuffer;
    2b1a:	90 93 e3 01 	sts	0x01E3, r25
    2b1e:	80 93 e2 01 	sts	0x01E2, r24

	hci_unsolicited_event_handler();
    2b22:	0e 94 cd 05 	call	0xb9a	; 0xb9a <hci_unsolicited_event_handler>
}
    2b26:	08 95       	ret

00002b28 <_ZN15Adafruit_CC3000C1EhhhhP5Print>:
            Note that by default this class will assume the first hardware 
            serial should be used for debug output.  This behavior can be
            changed by explicitly specifying a cc3kPrinter parameter.
*/
/**************************************************************************/
Adafruit_CC3000::Adafruit_CC3000(uint8_t csPin, uint8_t irqPin, uint8_t vbatPin, uint8_t SPIspeed, Print* cc3kPrinter)
    2b28:	ef 92       	push	r14
    2b2a:	ff 92       	push	r15
    2b2c:	0f 93       	push	r16
    2b2e:	fc 01       	movw	r30, r24
{
  _initialised = false;
    2b30:	10 82       	st	Z, r1
  g_csPin = csPin;
    2b32:	60 93 0b 02 	sts	0x020B, r22
  g_irqPin = irqPin;
    2b36:	40 93 0c 02 	sts	0x020C, r20
  g_vbatPin = vbatPin;
    2b3a:	20 93 0d 02 	sts	0x020D, r18
  g_IRQnum = 0xFF;
    2b3e:	8f ef       	ldi	r24, 0xFF	; 255
    2b40:	80 93 0e 02 	sts	0x020E, r24
  g_SPIspeed = SPIspeed;
    2b44:	00 93 0f 02 	sts	0x020F, r16
  static const byte IsConnected = 0x02;
  static const byte HasDHCP = 0x04;
  static const byte OkToShutDown = 0x08;

  void clear() {
    flags = 0;
    2b48:	10 92 45 02 	sts	0x0245, r1
  g_IRQnum = 0xFF;
  g_SPIspeed = SPIspeed;

  cc3000Bitset.clear();

  CC3KPrinter = cc3kPrinter;
    2b4c:	f0 92 47 02 	sts	0x0247, r15
    2b50:	e0 92 46 02 	sts	0x0246, r14
}
    2b54:	0f 91       	pop	r16
    2b56:	ff 90       	pop	r15
    2b58:	ef 90       	pop	r14
    2b5a:	08 95       	ret

00002b5c <_ZN22Adafruit_CC3000_ClientC1Ev>:
  return Adafruit_CC3000_Client(udp_socket);
}


/**********************************************************************/
Adafruit_CC3000_Client::Adafruit_CC3000_Client(void) {
    2b5c:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2b5e:	13 82       	std	Z+3, r1	; 0x03
    2b60:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2b62:	88 ee       	ldi	r24, 0xE8	; 232
    2b64:	93 e0       	ldi	r25, 0x03	; 3
    2b66:	a0 e0       	ldi	r26, 0x00	; 0
    2b68:	b0 e0       	ldi	r27, 0x00	; 0
    2b6a:	84 83       	std	Z+4, r24	; 0x04
    2b6c:	95 83       	std	Z+5, r25	; 0x05
    2b6e:	a6 83       	std	Z+6, r26	; 0x06
    2b70:	b7 83       	std	Z+7, r27	; 0x07
    2b72:	88 e4       	ldi	r24, 0x48	; 72
    2b74:	91 e0       	ldi	r25, 0x01	; 1
    2b76:	91 83       	std	Z+1, r25	; 0x01
    2b78:	80 83       	st	Z, r24
  _socket = -1;
    2b7a:	e1 5b       	subi	r30, 0xB1	; 177
    2b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7e:	8f ef       	ldi	r24, 0xFF	; 255
    2b80:	9f ef       	ldi	r25, 0xFF	; 255
    2b82:	af ef       	ldi	r26, 0xFF	; 255
    2b84:	bf ef       	ldi	r27, 0xFF	; 255
    2b86:	80 83       	st	Z, r24
    2b88:	91 83       	std	Z+1, r25	; 0x01
    2b8a:	a2 83       	std	Z+2, r26	; 0x02
    2b8c:	b3 83       	std	Z+3, r27	; 0x03
}
    2b8e:	08 95       	ret

00002b90 <_ZN22Adafruit_CC3000_ClientC1El>:

Adafruit_CC3000_Client::Adafruit_CC3000_Client(int32_t s) {
    2b90:	fc 01       	movw	r30, r24
    2b92:	13 82       	std	Z+3, r1	; 0x03
    2b94:	12 82       	std	Z+2, r1	; 0x02
    2b96:	88 ee       	ldi	r24, 0xE8	; 232
    2b98:	93 e0       	ldi	r25, 0x03	; 3
    2b9a:	a0 e0       	ldi	r26, 0x00	; 0
    2b9c:	b0 e0       	ldi	r27, 0x00	; 0
    2b9e:	84 83       	std	Z+4, r24	; 0x04
    2ba0:	95 83       	std	Z+5, r25	; 0x05
    2ba2:	a6 83       	std	Z+6, r26	; 0x06
    2ba4:	b7 83       	std	Z+7, r27	; 0x07
    2ba6:	88 e4       	ldi	r24, 0x48	; 72
    2ba8:	91 e0       	ldi	r25, 0x01	; 1
    2baa:	91 83       	std	Z+1, r25	; 0x01
    2bac:	80 83       	st	Z, r24
  _socket = s; 
    2bae:	e1 5b       	subi	r30, 0xB1	; 177
    2bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb2:	40 83       	st	Z, r20
    2bb4:	51 83       	std	Z+1, r21	; 0x01
    2bb6:	62 83       	std	Z+2, r22	; 0x02
    2bb8:	73 83       	std	Z+3, r23	; 0x03
  bufsiz = 0;
    2bba:	12 92       	st	-Z, r1
    2bbc:	12 92       	st	-Z, r1
  _rx_buf_idx = 0;
    2bbe:	12 92       	st	-Z, r1
}
    2bc0:	08 95       	ret

00002bc2 <_ZN22Adafruit_CC3000_ClientcvbEv>:
  bufsiz = other.bufsiz;
  _rx_buf_idx = other._rx_buf_idx;
  memcpy(_rx_buf, other._rx_buf, RXBUFFERSIZE);
}

Adafruit_CC3000_Client::operator bool()
    2bc2:	fc 01       	movw	r30, r24
{
  return connected();
    2bc4:	a0 81       	ld	r26, Z
    2bc6:	b1 81       	ldd	r27, Z+1	; 0x01
    2bc8:	54 96       	adiw	r26, 0x14	; 20
    2bca:	2d 91       	ld	r18, X+
    2bcc:	3c 91       	ld	r19, X
    2bce:	55 97       	sbiw	r26, 0x15	; 21
    2bd0:	f9 01       	movw	r30, r18
    2bd2:	09 95       	icall
    2bd4:	81 11       	cpse	r24, r1
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
}
    2bd8:	08 95       	ret

00002bda <_ZN22Adafruit_CC3000_Client5flushEv>:
  else return 0;  // no data is available
}

void Adafruit_CC3000_Client::flush(){
  // No flush implementation, unclear if necessary.
}
    2bda:	08 95       	ret

00002bdc <_GLOBAL__I_g_csPin>:
  return ret;
}

void Adafruit_CC3000::setPrinter(Print* p) {
  CC3KPrinter = p;
}
    2bdc:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    2bde:	88 e4       	ldi	r24, 0x48	; 72
    2be0:	92 e0       	ldi	r25, 0x02	; 2
    2be2:	60 e0       	ldi	r22, 0x00	; 0
    2be4:	40 e0       	ldi	r20, 0x00	; 0
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	00 e0       	ldi	r16, 0x00	; 0
    2bea:	0e 94 e7 2b 	call	0x57ce	; 0x57ce <_ZN9IPAddressC1Ehhhh>
    2bee:	0f 91       	pop	r16
    2bf0:	08 95       	ret

00002bf2 <_ZN22Adafruit_CC3000_Client4readEPhj>:
{
  return recv(_socket, buf, len, flags);

}

int Adafruit_CC3000_Client::read(uint8_t *buf, size_t len) 
    2bf2:	cf 92       	push	r12
    2bf4:	df 92       	push	r13
    2bf6:	ef 92       	push	r14
    2bf8:	ff 92       	push	r15
    2bfa:	0f 93       	push	r16
    2bfc:	1f 93       	push	r17
    2bfe:	db 01       	movw	r26, r22
  return r;
}

int Adafruit_CC3000_Client::read(void *buf, uint16_t len, uint32_t flags) 
{
  return recv(_socket, buf, len, flags);
    2c00:	fc 01       	movw	r30, r24
    2c02:	e1 5b       	subi	r30, 0xB1	; 177
    2c04:	ff 4f       	sbci	r31, 0xFF	; 255
    2c06:	60 81       	ld	r22, Z
    2c08:	71 81       	ldd	r23, Z+1	; 0x01
    2c0a:	82 81       	ldd	r24, Z+2	; 0x02
    2c0c:	93 81       	ldd	r25, Z+3	; 0x03
    2c0e:	8a 01       	movw	r16, r20
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	ad 01       	movw	r20, r26
    2c16:	cc 24       	eor	r12, r12
    2c18:	dd 24       	eor	r13, r13
    2c1a:	76 01       	movw	r14, r12
    2c1c:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <recv>
}

int Adafruit_CC3000_Client::read(uint8_t *buf, size_t len) 
{
  return read(buf, len, 0);
}
    2c20:	1f 91       	pop	r17
    2c22:	0f 91       	pop	r16
    2c24:	ff 90       	pop	r15
    2c26:	ef 90       	pop	r14
    2c28:	df 90       	pop	r13
    2c2a:	cf 90       	pop	r12
    2c2c:	08 95       	ret

00002c2e <_ZN22Adafruit_CC3000_Client9availableEv>:
  _rx_buf_idx++;
  //if (CC3KPrinter != 0) { CC3KPrinter->print("("); CC3KPrinter->write(ret); CC3KPrinter->print(")"); }
  return ret;
}

int Adafruit_CC3000_Client::available(void) {
    2c2e:	8f 92       	push	r8
    2c30:	9f 92       	push	r9
    2c32:	af 92       	push	r10
    2c34:	bf 92       	push	r11
    2c36:	cf 92       	push	r12
    2c38:	df 92       	push	r13
    2c3a:	ef 92       	push	r14
    2c3c:	ff 92       	push	r15
    2c3e:	0f 93       	push	r16
    2c40:	1f 93       	push	r17
    2c42:	df 93       	push	r29
    2c44:	cf 93       	push	r28
    2c46:	cd b7       	in	r28, 0x3d	; 61
    2c48:	de b7       	in	r29, 0x3e	; 62
    2c4a:	2c 97       	sbiw	r28, 0x0c	; 12
    2c4c:	0f b6       	in	r0, 0x3f	; 63
    2c4e:	f8 94       	cli
    2c50:	de bf       	out	0x3e, r29	; 62
    2c52:	0f be       	out	0x3f, r0	; 63
    2c54:	cd bf       	out	0x3d, r28	; 61
    2c56:	fc 01       	movw	r30, r24
  // not open!
  if (_socket < 0) return 0;
    2c58:	e1 5b       	subi	r30, 0xB1	; 177
    2c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5c:	80 81       	ld	r24, Z
    2c5e:	91 81       	ldd	r25, Z+1	; 0x01
    2c60:	a2 81       	ldd	r26, Z+2	; 0x02
    2c62:	b3 81       	ldd	r27, Z+3	; 0x03
    2c64:	ef 54       	subi	r30, 0x4F	; 79
    2c66:	f0 40       	sbci	r31, 0x00	; 0
    2c68:	b7 ff       	sbrs	r27, 7
    2c6a:	03 c0       	rjmp	.+6      	; 0x2c72 <_ZN22Adafruit_CC3000_Client9availableEv+0x44>
    2c6c:	20 e0       	ldi	r18, 0x00	; 0
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	82 c0       	rjmp	.+260    	; 0x2d76 <_ZN22Adafruit_CC3000_Client9availableEv+0x148>

  if ((bufsiz > 0) // we have some data in the internal buffer
    2c72:	e3 5b       	subi	r30, 0xB3	; 179
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	20 81       	ld	r18, Z
    2c78:	31 81       	ldd	r19, Z+1	; 0x01
    2c7a:	ed 54       	subi	r30, 0x4D	; 77
    2c7c:	f0 40       	sbci	r31, 0x00	; 0
    2c7e:	12 16       	cp	r1, r18
    2c80:	13 06       	cpc	r1, r19
    2c82:	64 f4       	brge	.+24     	; 0x2c9c <_ZN22Adafruit_CC3000_Client9availableEv+0x6e>
    2c84:	e4 5b       	subi	r30, 0xB4	; 180
    2c86:	ff 4f       	sbci	r31, 0xFF	; 255
    2c88:	80 81       	ld	r24, Z
    2c8a:	ec 54       	subi	r30, 0x4C	; 76
    2c8c:	f0 40       	sbci	r31, 0x00	; 0
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	82 17       	cp	r24, r18
    2c92:	93 07       	cpc	r25, r19
    2c94:	1c f4       	brge	.+6      	; 0x2c9c <_ZN22Adafruit_CC3000_Client9availableEv+0x6e>
      && (_rx_buf_idx < bufsiz)) {  // we havent already spit it all out
    return (bufsiz - _rx_buf_idx);
    2c96:	28 1b       	sub	r18, r24
    2c98:	39 0b       	sbc	r19, r25
    2c9a:	6d c0       	rjmp	.+218    	; 0x2d76 <_ZN22Adafruit_CC3000_Client9availableEv+0x148>

  // do a select() call on this socket
  timeval timeout;
  fd_set fd_read;

  memset(&fd_read, 0, sizeof(fd_read));
    2c9c:	19 82       	std	Y+1, r1	; 0x01
    2c9e:	1a 82       	std	Y+2, r1	; 0x02
    2ca0:	1b 82       	std	Y+3, r1	; 0x03
    2ca2:	1c 82       	std	Y+4, r1	; 0x04
  FD_SET(_socket, &fd_read);
    2ca4:	e1 5b       	subi	r30, 0xB1	; 177
    2ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca8:	c0 80       	ld	r12, Z
    2caa:	d1 80       	ldd	r13, Z+1	; 0x01
    2cac:	e2 80       	ldd	r14, Z+2	; 0x02
    2cae:	f3 80       	ldd	r15, Z+3	; 0x03
    2cb0:	c7 01       	movw	r24, r14
    2cb2:	b6 01       	movw	r22, r12
    2cb4:	20 e2       	ldi	r18, 0x20	; 32
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	40 e0       	ldi	r20, 0x00	; 0
    2cba:	50 e0       	ldi	r21, 0x00	; 0
    2cbc:	0e 94 31 33 	call	0x6662	; 0x6662 <__divmodsi4>
    2cc0:	92 2e       	mov	r9, r18
    2cc2:	83 2e       	mov	r8, r19
    2cc4:	02 2f       	mov	r16, r18
    2cc6:	13 2f       	mov	r17, r19
    2cc8:	00 0f       	add	r16, r16
    2cca:	11 1f       	adc	r17, r17
    2ccc:	00 0f       	add	r16, r16
    2cce:	11 1f       	adc	r17, r17
    2cd0:	5e 01       	movw	r10, r28
    2cd2:	08 94       	sec
    2cd4:	a1 1c       	adc	r10, r1
    2cd6:	b1 1c       	adc	r11, r1
    2cd8:	0a 0d       	add	r16, r10
    2cda:	1b 1d       	adc	r17, r11
    2cdc:	c7 01       	movw	r24, r14
    2cde:	b6 01       	movw	r22, r12
    2ce0:	20 e2       	ldi	r18, 0x20	; 32
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	40 e0       	ldi	r20, 0x00	; 0
    2ce6:	50 e0       	ldi	r21, 0x00	; 0
    2ce8:	0e 94 31 33 	call	0x6662	; 0x6662 <__divmodsi4>
    2cec:	21 e0       	ldi	r18, 0x01	; 1
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	40 e0       	ldi	r20, 0x00	; 0
    2cf2:	50 e0       	ldi	r21, 0x00	; 0
    2cf4:	04 c0       	rjmp	.+8      	; 0x2cfe <_ZN22Adafruit_CC3000_Client9availableEv+0xd0>
    2cf6:	22 0f       	add	r18, r18
    2cf8:	33 1f       	adc	r19, r19
    2cfa:	44 1f       	adc	r20, r20
    2cfc:	55 1f       	adc	r21, r21
    2cfe:	6a 95       	dec	r22
    2d00:	d2 f7       	brpl	.-12     	; 0x2cf6 <_ZN22Adafruit_CC3000_Client9availableEv+0xc8>
    2d02:	e9 2d       	mov	r30, r9
    2d04:	f8 2d       	mov	r31, r8
    2d06:	ee 0f       	add	r30, r30
    2d08:	ff 1f       	adc	r31, r31
    2d0a:	ee 0f       	add	r30, r30
    2d0c:	ff 1f       	adc	r31, r31
    2d0e:	ea 0d       	add	r30, r10
    2d10:	fb 1d       	adc	r31, r11
    2d12:	80 81       	ld	r24, Z
    2d14:	91 81       	ldd	r25, Z+1	; 0x01
    2d16:	a2 81       	ldd	r26, Z+2	; 0x02
    2d18:	b3 81       	ldd	r27, Z+3	; 0x03
    2d1a:	28 2b       	or	r18, r24
    2d1c:	39 2b       	or	r19, r25
    2d1e:	4a 2b       	or	r20, r26
    2d20:	5b 2b       	or	r21, r27
    2d22:	f8 01       	movw	r30, r16
    2d24:	20 83       	st	Z, r18
    2d26:	31 83       	std	Z+1, r19	; 0x01
    2d28:	42 83       	std	Z+2, r20	; 0x02
    2d2a:	53 83       	std	Z+3, r21	; 0x03

  timeout.tv_sec = 0;
    2d2c:	1d 82       	std	Y+5, r1	; 0x05
    2d2e:	1e 82       	std	Y+6, r1	; 0x06
    2d30:	1f 82       	std	Y+7, r1	; 0x07
    2d32:	18 86       	std	Y+8, r1	; 0x08
  timeout.tv_usec = 5000; // 5 millisec
    2d34:	88 e8       	ldi	r24, 0x88	; 136
    2d36:	93 e1       	ldi	r25, 0x13	; 19
    2d38:	a0 e0       	ldi	r26, 0x00	; 0
    2d3a:	b0 e0       	ldi	r27, 0x00	; 0
    2d3c:	89 87       	std	Y+9, r24	; 0x09
    2d3e:	9a 87       	std	Y+10, r25	; 0x0a
    2d40:	ab 87       	std	Y+11, r26	; 0x0b
    2d42:	bc 87       	std	Y+12, r27	; 0x0c

  int16_t s = select(_socket+1, &fd_read, NULL, NULL, &timeout);
    2d44:	08 94       	sec
    2d46:	c1 1c       	adc	r12, r1
    2d48:	d1 1c       	adc	r13, r1
    2d4a:	e1 1c       	adc	r14, r1
    2d4c:	f1 1c       	adc	r15, r1
    2d4e:	c7 01       	movw	r24, r14
    2d50:	b6 01       	movw	r22, r12
    2d52:	a5 01       	movw	r20, r10
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	00 e0       	ldi	r16, 0x00	; 0
    2d5a:	10 e0       	ldi	r17, 0x00	; 0
    2d5c:	e5 e0       	ldi	r30, 0x05	; 5
    2d5e:	ee 2e       	mov	r14, r30
    2d60:	f1 2c       	mov	r15, r1
    2d62:	ec 0e       	add	r14, r28
    2d64:	fd 1e       	adc	r15, r29
    2d66:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <select>
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	11 f4       	brne	.+4      	; 0x2d76 <_ZN22Adafruit_CC3000_Client9availableEv+0x148>
    2d72:	21 e0       	ldi	r18, 0x01	; 1
    2d74:	30 e0       	ldi	r19, 0x00	; 0
  //if (CC3KPrinter != 0) } CC3KPrinter->print(F("Select: ")); CC3KPrinter->println(s); }
  if (s == 1) return 1;  // some data is available to read
  else return 0;  // no data is available
}
    2d76:	c9 01       	movw	r24, r18
    2d78:	2c 96       	adiw	r28, 0x0c	; 12
    2d7a:	0f b6       	in	r0, 0x3f	; 63
    2d7c:	f8 94       	cli
    2d7e:	de bf       	out	0x3e, r29	; 62
    2d80:	0f be       	out	0x3f, r0	; 63
    2d82:	cd bf       	out	0x3d, r28	; 61
    2d84:	cf 91       	pop	r28
    2d86:	df 91       	pop	r29
    2d88:	1f 91       	pop	r17
    2d8a:	0f 91       	pop	r16
    2d8c:	ff 90       	pop	r15
    2d8e:	ef 90       	pop	r14
    2d90:	df 90       	pop	r13
    2d92:	cf 90       	pop	r12
    2d94:	bf 90       	pop	r11
    2d96:	af 90       	pop	r10
    2d98:	9f 90       	pop	r9
    2d9a:	8f 90       	pop	r8
    2d9c:	08 95       	ret

00002d9e <_ZN22Adafruit_CC3000_Client5closeEv>:
int Adafruit_CC3000_Client::read(uint8_t *buf, size_t len) 
{
  return read(buf, len, 0);
}

int32_t Adafruit_CC3000_Client::close(void) {
    2d9e:	0f 93       	push	r16
    2da0:	1f 93       	push	r17
  int32_t x = closesocket(_socket);
    2da2:	8c 01       	movw	r16, r24
    2da4:	01 5b       	subi	r16, 0xB1	; 177
    2da6:	1f 4f       	sbci	r17, 0xFF	; 255
    2da8:	f8 01       	movw	r30, r16
    2daa:	60 81       	ld	r22, Z
    2dac:	71 81       	ldd	r23, Z+1	; 0x01
    2dae:	82 81       	ldd	r24, Z+2	; 0x02
    2db0:	93 81       	ldd	r25, Z+3	; 0x03
    2db2:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <closesocket>
  _socket = -1;
    2db6:	2f ef       	ldi	r18, 0xFF	; 255
    2db8:	3f ef       	ldi	r19, 0xFF	; 255
    2dba:	4f ef       	ldi	r20, 0xFF	; 255
    2dbc:	5f ef       	ldi	r21, 0xFF	; 255
    2dbe:	f8 01       	movw	r30, r16
    2dc0:	20 83       	st	Z, r18
    2dc2:	31 83       	std	Z+1, r19	; 0x01
    2dc4:	42 83       	std	Z+2, r20	; 0x02
    2dc6:	53 83       	std	Z+3, r21	; 0x03
  return x;
}
    2dc8:	1f 91       	pop	r17
    2dca:	0f 91       	pop	r16
    2dcc:	08 95       	ret

00002dce <_ZN22Adafruit_CC3000_Client4peekEv>:

void Adafruit_CC3000_Client::flush(){
  // No flush implementation, unclear if necessary.
}

int Adafruit_CC3000_Client::peek(){
    2dce:	4f 92       	push	r4
    2dd0:	5f 92       	push	r5
    2dd2:	6f 92       	push	r6
    2dd4:	7f 92       	push	r7
    2dd6:	8f 92       	push	r8
    2dd8:	9f 92       	push	r9
    2dda:	af 92       	push	r10
    2ddc:	bf 92       	push	r11
    2dde:	cf 92       	push	r12
    2de0:	df 92       	push	r13
    2de2:	ef 92       	push	r14
    2de4:	ff 92       	push	r15
    2de6:	0f 93       	push	r16
    2de8:	1f 93       	push	r17
    2dea:	cf 93       	push	r28
    2dec:	df 93       	push	r29
    2dee:	ec 01       	movw	r28, r24
  while ((bufsiz <= 0) || (bufsiz == _rx_buf_idx)) {
    cc3k_int_poll();
    // buffer in some more data
    bufsiz = recv(_socket, _rx_buf, sizeof(_rx_buf), 0);
    2df0:	9c e0       	ldi	r25, 0x0C	; 12
    2df2:	49 2e       	mov	r4, r25
    2df4:	51 2c       	mov	r5, r1
    2df6:	4c 0e       	add	r4, r28
    2df8:	5d 1e       	adc	r5, r29
void Adafruit_CC3000_Client::flush(){
  // No flush implementation, unclear if necessary.
}

int Adafruit_CC3000_Client::peek(){
  while ((bufsiz <= 0) || (bufsiz == _rx_buf_idx)) {
    2dfa:	8d e4       	ldi	r24, 0x4D	; 77
    2dfc:	88 2e       	mov	r8, r24
    2dfe:	91 2c       	mov	r9, r1
    2e00:	8c 0e       	add	r8, r28
    2e02:	9d 1e       	adc	r9, r29
    2e04:	0c e4       	ldi	r16, 0x4C	; 76
    2e06:	a0 2e       	mov	r10, r16
    2e08:	b1 2c       	mov	r11, r1
    2e0a:	ac 0e       	add	r10, r28
    2e0c:	bd 1e       	adc	r11, r29
    cc3k_int_poll();
    // buffer in some more data
    bufsiz = recv(_socket, _rx_buf, sizeof(_rx_buf), 0);
    2e0e:	1f e4       	ldi	r17, 0x4F	; 79
    2e10:	61 2e       	mov	r6, r17
    2e12:	71 2c       	mov	r7, r1
    2e14:	6c 0e       	add	r6, r28
    2e16:	7d 1e       	adc	r7, r29
    2e18:	1f c0       	rjmp	.+62     	; 0x2e58 <_ZN22Adafruit_CC3000_Client4peekEv+0x8a>
  // No flush implementation, unclear if necessary.
}

int Adafruit_CC3000_Client::peek(){
  while ((bufsiz <= 0) || (bufsiz == _rx_buf_idx)) {
    cc3k_int_poll();
    2e1a:	0e 94 b9 23 	call	0x4772	; 0x4772 <cc3k_int_poll>
    // buffer in some more data
    bufsiz = recv(_socket, _rx_buf, sizeof(_rx_buf), 0);
    2e1e:	f3 01       	movw	r30, r6
    2e20:	60 81       	ld	r22, Z
    2e22:	71 81       	ldd	r23, Z+1	; 0x01
    2e24:	82 81       	ldd	r24, Z+2	; 0x02
    2e26:	93 81       	ldd	r25, Z+3	; 0x03
    2e28:	a2 01       	movw	r20, r4
    2e2a:	00 e4       	ldi	r16, 0x40	; 64
    2e2c:	10 e0       	ldi	r17, 0x00	; 0
    2e2e:	20 e0       	ldi	r18, 0x00	; 0
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	cc 24       	eor	r12, r12
    2e34:	dd 24       	eor	r13, r13
    2e36:	76 01       	movw	r14, r12
    2e38:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <recv>
    2e3c:	f4 01       	movw	r30, r8
    2e3e:	91 83       	std	Z+1, r25	; 0x01
    2e40:	80 83       	st	Z, r24
    if (bufsiz == -57) {
    2e42:	87 5c       	subi	r24, 0xC7	; 199
    2e44:	9f 4f       	sbci	r25, 0xFF	; 255
    2e46:	31 f4       	brne	.+12     	; 0x2e54 <_ZN22Adafruit_CC3000_Client4peekEv+0x86>
      close();
    2e48:	ce 01       	movw	r24, r28
    2e4a:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <_ZN22Adafruit_CC3000_Client5closeEv>
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	14 c0       	rjmp	.+40     	; 0x2e7c <_ZN22Adafruit_CC3000_Client4peekEv+0xae>
      return 0;
    }
    //if (CC3KPrinter != 0) { CC3KPrinter->println("Read "); CC3KPrinter->print(bufsiz); CC3KPrinter->println(" bytes"); }
    _rx_buf_idx = 0;
    2e54:	f5 01       	movw	r30, r10
    2e56:	10 82       	st	Z, r1
void Adafruit_CC3000_Client::flush(){
  // No flush implementation, unclear if necessary.
}

int Adafruit_CC3000_Client::peek(){
  while ((bufsiz <= 0) || (bufsiz == _rx_buf_idx)) {
    2e58:	f4 01       	movw	r30, r8
    2e5a:	20 81       	ld	r18, Z
    2e5c:	31 81       	ldd	r19, Z+1	; 0x01
    2e5e:	12 16       	cp	r1, r18
    2e60:	13 06       	cpc	r1, r19
    2e62:	dc f6       	brge	.-74     	; 0x2e1a <_ZN22Adafruit_CC3000_Client4peekEv+0x4c>
    2e64:	f5 01       	movw	r30, r10
    2e66:	80 81       	ld	r24, Z
    2e68:	e8 2f       	mov	r30, r24
    2e6a:	f0 e0       	ldi	r31, 0x00	; 0
    2e6c:	2e 17       	cp	r18, r30
    2e6e:	3f 07       	cpc	r19, r31
    2e70:	a1 f2       	breq	.-88     	; 0x2e1a <_ZN22Adafruit_CC3000_Client4peekEv+0x4c>
    _rx_buf_idx = 0;
  }
  uint8_t ret = _rx_buf[_rx_buf_idx];

  //if (CC3KPrinter != 0) { CC3KPrinter->print("("); CC3KPrinter->write(ret); CC3KPrinter->print(")"); }
  return ret;
    2e72:	ec 0f       	add	r30, r28
    2e74:	fd 1f       	adc	r31, r29
    2e76:	84 85       	ldd	r24, Z+12	; 0x0c
    2e78:	28 2f       	mov	r18, r24
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
}
    2e7c:	c9 01       	movw	r24, r18
    2e7e:	df 91       	pop	r29
    2e80:	cf 91       	pop	r28
    2e82:	1f 91       	pop	r17
    2e84:	0f 91       	pop	r16
    2e86:	ff 90       	pop	r15
    2e88:	ef 90       	pop	r14
    2e8a:	df 90       	pop	r13
    2e8c:	cf 90       	pop	r12
    2e8e:	bf 90       	pop	r11
    2e90:	af 90       	pop	r10
    2e92:	9f 90       	pop	r9
    2e94:	8f 90       	pop	r8
    2e96:	7f 90       	pop	r7
    2e98:	6f 90       	pop	r6
    2e9a:	5f 90       	pop	r5
    2e9c:	4f 90       	pop	r4
    2e9e:	08 95       	ret

00002ea0 <_ZN22Adafruit_CC3000_Client4readEv>:

void Adafruit_CC3000_Client::stop(){
  close();
}

int Adafruit_CC3000_Client::read(void) 
    2ea0:	4f 92       	push	r4
    2ea2:	5f 92       	push	r5
    2ea4:	6f 92       	push	r6
    2ea6:	7f 92       	push	r7
    2ea8:	8f 92       	push	r8
    2eaa:	9f 92       	push	r9
    2eac:	af 92       	push	r10
    2eae:	bf 92       	push	r11
    2eb0:	cf 92       	push	r12
    2eb2:	df 92       	push	r13
    2eb4:	ef 92       	push	r14
    2eb6:	ff 92       	push	r15
    2eb8:	0f 93       	push	r16
    2eba:	1f 93       	push	r17
    2ebc:	cf 93       	push	r28
    2ebe:	df 93       	push	r29
    2ec0:	ec 01       	movw	r28, r24
{
  while ((bufsiz <= 0) || (bufsiz == _rx_buf_idx)) {
    cc3k_int_poll();
    // buffer in some more data
    bufsiz = recv(_socket, _rx_buf, sizeof(_rx_buf), 0);
    2ec2:	5c e0       	ldi	r21, 0x0C	; 12
    2ec4:	45 2e       	mov	r4, r21
    2ec6:	51 2c       	mov	r5, r1
    2ec8:	48 0e       	add	r4, r24
    2eca:	59 1e       	adc	r5, r25
  close();
}

int Adafruit_CC3000_Client::read(void) 
{
  while ((bufsiz <= 0) || (bufsiz == _rx_buf_idx)) {
    2ecc:	4d e4       	ldi	r20, 0x4D	; 77
    2ece:	84 2e       	mov	r8, r20
    2ed0:	91 2c       	mov	r9, r1
    2ed2:	88 0e       	add	r8, r24
    2ed4:	99 1e       	adc	r9, r25
    2ed6:	3c e4       	ldi	r19, 0x4C	; 76
    2ed8:	a3 2e       	mov	r10, r19
    2eda:	b1 2c       	mov	r11, r1
    2edc:	a8 0e       	add	r10, r24
    2ede:	b9 1e       	adc	r11, r25
    cc3k_int_poll();
    // buffer in some more data
    bufsiz = recv(_socket, _rx_buf, sizeof(_rx_buf), 0);
    2ee0:	2f e4       	ldi	r18, 0x4F	; 79
    2ee2:	62 2e       	mov	r6, r18
    2ee4:	71 2c       	mov	r7, r1
    2ee6:	68 0e       	add	r6, r24
    2ee8:	79 1e       	adc	r7, r25
    2eea:	1f c0       	rjmp	.+62     	; 0x2f2a <_ZN22Adafruit_CC3000_Client4readEv+0x8a>
}

int Adafruit_CC3000_Client::read(void) 
{
  while ((bufsiz <= 0) || (bufsiz == _rx_buf_idx)) {
    cc3k_int_poll();
    2eec:	0e 94 b9 23 	call	0x4772	; 0x4772 <cc3k_int_poll>
    // buffer in some more data
    bufsiz = recv(_socket, _rx_buf, sizeof(_rx_buf), 0);
    2ef0:	f3 01       	movw	r30, r6
    2ef2:	60 81       	ld	r22, Z
    2ef4:	71 81       	ldd	r23, Z+1	; 0x01
    2ef6:	82 81       	ldd	r24, Z+2	; 0x02
    2ef8:	93 81       	ldd	r25, Z+3	; 0x03
    2efa:	a2 01       	movw	r20, r4
    2efc:	00 e4       	ldi	r16, 0x40	; 64
    2efe:	10 e0       	ldi	r17, 0x00	; 0
    2f00:	20 e0       	ldi	r18, 0x00	; 0
    2f02:	30 e0       	ldi	r19, 0x00	; 0
    2f04:	cc 24       	eor	r12, r12
    2f06:	dd 24       	eor	r13, r13
    2f08:	76 01       	movw	r14, r12
    2f0a:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <recv>
    2f0e:	f4 01       	movw	r30, r8
    2f10:	91 83       	std	Z+1, r25	; 0x01
    2f12:	80 83       	st	Z, r24
    if (bufsiz == -57) {
    2f14:	87 5c       	subi	r24, 0xC7	; 199
    2f16:	9f 4f       	sbci	r25, 0xFF	; 255
    2f18:	31 f4       	brne	.+12     	; 0x2f26 <_ZN22Adafruit_CC3000_Client4readEv+0x86>
      close();
    2f1a:	ce 01       	movw	r24, r28
    2f1c:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <_ZN22Adafruit_CC3000_Client5closeEv>
    2f20:	20 e0       	ldi	r18, 0x00	; 0
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	17 c0       	rjmp	.+46     	; 0x2f54 <_ZN22Adafruit_CC3000_Client4readEv+0xb4>
      return 0;
    }
    //if (CC3KPrinter != 0) { CC3KPrinter->println("Read "); CC3KPrinter->print(bufsiz); CC3KPrinter->println(" bytes"); }
    _rx_buf_idx = 0;
    2f26:	f5 01       	movw	r30, r10
    2f28:	10 82       	st	Z, r1
  close();
}

int Adafruit_CC3000_Client::read(void) 
{
  while ((bufsiz <= 0) || (bufsiz == _rx_buf_idx)) {
    2f2a:	f4 01       	movw	r30, r8
    2f2c:	80 81       	ld	r24, Z
    2f2e:	91 81       	ldd	r25, Z+1	; 0x01
    2f30:	18 16       	cp	r1, r24
    2f32:	19 06       	cpc	r1, r25
    2f34:	dc f6       	brge	.-74     	; 0x2eec <_ZN22Adafruit_CC3000_Client4readEv+0x4c>
    2f36:	f5 01       	movw	r30, r10
    2f38:	20 81       	ld	r18, Z
    2f3a:	e2 2f       	mov	r30, r18
    2f3c:	f0 e0       	ldi	r31, 0x00	; 0
    2f3e:	8e 17       	cp	r24, r30
    2f40:	9f 07       	cpc	r25, r31
    2f42:	a1 f2       	breq	.-88     	; 0x2eec <_ZN22Adafruit_CC3000_Client4readEv+0x4c>
      return 0;
    }
    //if (CC3KPrinter != 0) { CC3KPrinter->println("Read "); CC3KPrinter->print(bufsiz); CC3KPrinter->println(" bytes"); }
    _rx_buf_idx = 0;
  }
  uint8_t ret = _rx_buf[_rx_buf_idx];
    2f44:	ec 0f       	add	r30, r28
    2f46:	fd 1f       	adc	r31, r29
    2f48:	84 85       	ldd	r24, Z+12	; 0x0c
  _rx_buf_idx++;
    2f4a:	2f 5f       	subi	r18, 0xFF	; 255
    2f4c:	f5 01       	movw	r30, r10
    2f4e:	20 83       	st	Z, r18
  //if (CC3KPrinter != 0) { CC3KPrinter->print("("); CC3KPrinter->write(ret); CC3KPrinter->print(")"); }
  return ret;
    2f50:	28 2f       	mov	r18, r24
    2f52:	30 e0       	ldi	r19, 0x00	; 0
}
    2f54:	c9 01       	movw	r24, r18
    2f56:	df 91       	pop	r29
    2f58:	cf 91       	pop	r28
    2f5a:	1f 91       	pop	r17
    2f5c:	0f 91       	pop	r16
    2f5e:	ff 90       	pop	r15
    2f60:	ef 90       	pop	r14
    2f62:	df 90       	pop	r13
    2f64:	cf 90       	pop	r12
    2f66:	bf 90       	pop	r11
    2f68:	af 90       	pop	r10
    2f6a:	9f 90       	pop	r9
    2f6c:	8f 90       	pop	r8
    2f6e:	7f 90       	pop	r7
    2f70:	6f 90       	pop	r6
    2f72:	5f 90       	pop	r5
    2f74:	4f 90       	pop	r4
    2f76:	08 95       	ret

00002f78 <_ZN22Adafruit_CC3000_Client4stopEv>:
  _socket = -1;
  return x;
}

void Adafruit_CC3000_Client::stop(){
  close();
    2f78:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <_ZN22Adafruit_CC3000_Client5closeEv>
}
    2f7c:	08 95       	ret

00002f7e <_ZN22Adafruit_CC3000_Client9connectedEv>:

  _socket = tcp_socket;
  return 1;
}

uint8_t Adafruit_CC3000_Client::connected(void) { 
    2f7e:	0f 93       	push	r16
    2f80:	1f 93       	push	r17
    2f82:	cf 93       	push	r28
    2f84:	df 93       	push	r29
    2f86:	ec 01       	movw	r28, r24
  if (_socket < 0) return false;
    2f88:	8c 01       	movw	r16, r24
    2f8a:	01 5b       	subi	r16, 0xB1	; 177
    2f8c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f8e:	f8 01       	movw	r30, r16
    2f90:	80 81       	ld	r24, Z
    2f92:	91 81       	ldd	r25, Z+1	; 0x01
    2f94:	a2 81       	ldd	r26, Z+2	; 0x02
    2f96:	b3 81       	ldd	r27, Z+3	; 0x03
    2f98:	b7 fd       	sbrc	r27, 7
    2f9a:	27 c0       	rjmp	.+78     	; 0x2fea <_ZN22Adafruit_CC3000_Client9connectedEv+0x6c>

  if (! available() && closed_sockets[_socket] == true) {
    2f9c:	e8 81       	ld	r30, Y
    2f9e:	f9 81       	ldd	r31, Y+1	; 0x01
    2fa0:	04 80       	ldd	r0, Z+4	; 0x04
    2fa2:	f5 81       	ldd	r31, Z+5	; 0x05
    2fa4:	e0 2d       	mov	r30, r0
    2fa6:	ce 01       	movw	r24, r28
    2fa8:	09 95       	icall
    2faa:	89 2b       	or	r24, r25
    2fac:	01 f5       	brne	.+64     	; 0x2fee <_ZN22Adafruit_CC3000_Client9connectedEv+0x70>
    2fae:	d8 01       	movw	r26, r16
    2fb0:	2d 91       	ld	r18, X+
    2fb2:	3d 91       	ld	r19, X+
    2fb4:	4d 91       	ld	r20, X+
    2fb6:	5c 91       	ld	r21, X
    2fb8:	f9 01       	movw	r30, r18
    2fba:	eb 5d       	subi	r30, 0xDB	; 219
    2fbc:	fd 4f       	sbci	r31, 0xFD	; 253
    2fbe:	80 81       	ld	r24, Z
    2fc0:	81 30       	cpi	r24, 0x01	; 1
    2fc2:	a9 f4       	brne	.+42     	; 0x2fee <_ZN22Adafruit_CC3000_Client9connectedEv+0x70>
    //if (CC3KPrinter != 0) CC3KPrinter->println("No more data, and closed!");
    closesocket(_socket);
    2fc4:	ca 01       	movw	r24, r20
    2fc6:	b9 01       	movw	r22, r18
    2fc8:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <closesocket>
    closed_sockets[_socket] = false;
    2fcc:	d8 01       	movw	r26, r16
    2fce:	ed 91       	ld	r30, X+
    2fd0:	fc 91       	ld	r31, X
    2fd2:	eb 5d       	subi	r30, 0xDB	; 219
    2fd4:	fd 4f       	sbci	r31, 0xFD	; 253
    2fd6:	10 82       	st	Z, r1
    _socket = -1;
    2fd8:	8f ef       	ldi	r24, 0xFF	; 255
    2fda:	9f ef       	ldi	r25, 0xFF	; 255
    2fdc:	af ef       	ldi	r26, 0xFF	; 255
    2fde:	bf ef       	ldi	r27, 0xFF	; 255
    2fe0:	f8 01       	movw	r30, r16
    2fe2:	80 83       	st	Z, r24
    2fe4:	91 83       	std	Z+1, r25	; 0x01
    2fe6:	a2 83       	std	Z+2, r26	; 0x02
    2fe8:	b3 83       	std	Z+3, r27	; 0x03
    2fea:	80 e0       	ldi	r24, 0x00	; 0
    2fec:	01 c0       	rjmp	.+2      	; 0x2ff0 <_ZN22Adafruit_CC3000_Client9connectedEv+0x72>
    return false;
    2fee:	81 e0       	ldi	r24, 0x01	; 1
  }

  else return true;  
}
    2ff0:	df 91       	pop	r29
    2ff2:	cf 91       	pop	r28
    2ff4:	1f 91       	pop	r17
    2ff6:	0f 91       	pop	r16
    2ff8:	08 95       	ret

00002ffa <_ZN22Adafruit_CC3000_Client10fastrprintEPK19__FlashStringHelper>:
  r = send(_socket, &c, 1, 0);
  if ( r < 0 ) return 0;
  return r;
}

size_t Adafruit_CC3000_Client::fastrprint(const __FlashStringHelper *ifsh)
    2ffa:	2f 92       	push	r2
    2ffc:	3f 92       	push	r3
    2ffe:	4f 92       	push	r4
    3000:	5f 92       	push	r5
    3002:	6f 92       	push	r6
    3004:	7f 92       	push	r7
    3006:	8f 92       	push	r8
    3008:	9f 92       	push	r9
    300a:	af 92       	push	r10
    300c:	bf 92       	push	r11
    300e:	cf 92       	push	r12
    3010:	df 92       	push	r13
    3012:	ef 92       	push	r14
    3014:	ff 92       	push	r15
    3016:	0f 93       	push	r16
    3018:	1f 93       	push	r17
    301a:	df 93       	push	r29
    301c:	cf 93       	push	r28
    301e:	cd b7       	in	r28, 0x3d	; 61
    3020:	de b7       	in	r29, 0x3e	; 62
    3022:	a0 97       	sbiw	r28, 0x20	; 32
    3024:	0f b6       	in	r0, 0x3f	; 63
    3026:	f8 94       	cli
    3028:	de bf       	out	0x3e, r29	; 62
    302a:	0f be       	out	0x3f, r0	; 63
    302c:	cd bf       	out	0x3d, r28	; 61
    302e:	3c 01       	movw	r6, r24
{
  char _tx_buf[TXBUFFERSIZE];
  uint8_t idx = 0;

  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    3030:	4b 01       	movw	r8, r22
    3032:	00 e0       	ldi	r16, 0x00	; 0
    3034:	aa 24       	eor	r10, r10
    3036:	bb 24       	eor	r11, r11
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    if (c == 0) break;
    _tx_buf[idx] = c;
    3038:	1e 01       	movw	r2, r28
    303a:	08 94       	sec
    303c:	21 1c       	adc	r2, r1
    303e:	31 1c       	adc	r3, r1
    idx++;
    if (idx >= TXBUFFERSIZE) {
      // lets send it!
      n += send(_socket, _tx_buf, TXBUFFERSIZE, 0);
    3040:	6f e4       	ldi	r22, 0x4F	; 79
    3042:	46 2e       	mov	r4, r22
    3044:	51 2c       	mov	r5, r1
    3046:	46 0c       	add	r4, r6
    3048:	57 1c       	adc	r5, r7
size_t Adafruit_CC3000_Client::fastrprint(const __FlashStringHelper *ifsh)
{
  char _tx_buf[TXBUFFERSIZE];
  uint8_t idx = 0;

  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    304a:	f4 01       	movw	r30, r8
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    304c:	08 94       	sec
    304e:	81 1c       	adc	r8, r1
    3050:	91 1c       	adc	r9, r1
    3052:	84 91       	lpm	r24, Z+
    if (c == 0) break;
    3054:	88 23       	and	r24, r24
    3056:	d1 f0       	breq	.+52     	; 0x308c <_ZN22Adafruit_CC3000_Client10fastrprintEPK19__FlashStringHelper+0x92>
    _tx_buf[idx] = c;
    3058:	f1 01       	movw	r30, r2
    305a:	e0 0f       	add	r30, r16
    305c:	f1 1d       	adc	r31, r1
    305e:	80 83       	st	Z, r24
    idx++;
    3060:	0f 5f       	subi	r16, 0xFF	; 255
    if (idx >= TXBUFFERSIZE) {
    3062:	00 32       	cpi	r16, 0x20	; 32
    3064:	90 f3       	brcs	.-28     	; 0x304a <_ZN22Adafruit_CC3000_Client10fastrprintEPK19__FlashStringHelper+0x50>
      // lets send it!
      n += send(_socket, _tx_buf, TXBUFFERSIZE, 0);
    3066:	f2 01       	movw	r30, r4
    3068:	60 81       	ld	r22, Z
    306a:	71 81       	ldd	r23, Z+1	; 0x01
    306c:	82 81       	ldd	r24, Z+2	; 0x02
    306e:	93 81       	ldd	r25, Z+3	; 0x03
    3070:	a1 01       	movw	r20, r2
    3072:	00 e2       	ldi	r16, 0x20	; 32
    3074:	10 e0       	ldi	r17, 0x00	; 0
    3076:	20 e0       	ldi	r18, 0x00	; 0
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	cc 24       	eor	r12, r12
    307c:	dd 24       	eor	r13, r13
    307e:	76 01       	movw	r14, r12
    3080:	0e 94 1d 12 	call	0x243a	; 0x243a <send>
    3084:	a8 0e       	add	r10, r24
    3086:	b9 1e       	adc	r11, r25
    3088:	00 e0       	ldi	r16, 0x00	; 0
    308a:	df cf       	rjmp	.-66     	; 0x304a <_ZN22Adafruit_CC3000_Client10fastrprintEPK19__FlashStringHelper+0x50>
      idx = 0;
    }
  }
  if (idx > 0) {
    308c:	00 23       	and	r16, r16
    308e:	b1 f0       	breq	.+44     	; 0x30bc <_ZN22Adafruit_CC3000_Client10fastrprintEPK19__FlashStringHelper+0xc2>
    // Send any remaining data in the transmit buffer.
    n += send(_socket, _tx_buf, idx, 0);
    3090:	8f e4       	ldi	r24, 0x4F	; 79
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	68 0e       	add	r6, r24
    3096:	79 1e       	adc	r7, r25
    3098:	f3 01       	movw	r30, r6
    309a:	60 81       	ld	r22, Z
    309c:	71 81       	ldd	r23, Z+1	; 0x01
    309e:	82 81       	ldd	r24, Z+2	; 0x02
    30a0:	93 81       	ldd	r25, Z+3	; 0x03
    30a2:	10 e0       	ldi	r17, 0x00	; 0
    30a4:	20 e0       	ldi	r18, 0x00	; 0
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	ae 01       	movw	r20, r28
    30aa:	4f 5f       	subi	r20, 0xFF	; 255
    30ac:	5f 4f       	sbci	r21, 0xFF	; 255
    30ae:	cc 24       	eor	r12, r12
    30b0:	dd 24       	eor	r13, r13
    30b2:	76 01       	movw	r14, r12
    30b4:	0e 94 1d 12 	call	0x243a	; 0x243a <send>
    30b8:	a8 0e       	add	r10, r24
    30ba:	b9 1e       	adc	r11, r25
  }

  return n;
}
    30bc:	c5 01       	movw	r24, r10
    30be:	a0 96       	adiw	r28, 0x20	; 32
    30c0:	0f b6       	in	r0, 0x3f	; 63
    30c2:	f8 94       	cli
    30c4:	de bf       	out	0x3e, r29	; 62
    30c6:	0f be       	out	0x3f, r0	; 63
    30c8:	cd bf       	out	0x3d, r28	; 61
    30ca:	cf 91       	pop	r28
    30cc:	df 91       	pop	r29
    30ce:	1f 91       	pop	r17
    30d0:	0f 91       	pop	r16
    30d2:	ff 90       	pop	r15
    30d4:	ef 90       	pop	r14
    30d6:	df 90       	pop	r13
    30d8:	cf 90       	pop	r12
    30da:	bf 90       	pop	r11
    30dc:	af 90       	pop	r10
    30de:	9f 90       	pop	r9
    30e0:	8f 90       	pop	r8
    30e2:	7f 90       	pop	r7
    30e4:	6f 90       	pop	r6
    30e6:	5f 90       	pop	r5
    30e8:	4f 90       	pop	r4
    30ea:	3f 90       	pop	r3
    30ec:	2f 90       	pop	r2
    30ee:	08 95       	ret

000030f0 <_ZN22Adafruit_CC3000_Client12fastrprintlnEPK19__FlashStringHelper>:

size_t Adafruit_CC3000_Client::fastrprintln(const __FlashStringHelper *ifsh)
    30f0:	ef 92       	push	r14
    30f2:	ff 92       	push	r15
    30f4:	0f 93       	push	r16
    30f6:	1f 93       	push	r17
    30f8:	8c 01       	movw	r16, r24
{
  size_t r = 0;
  r = fastrprint(ifsh);
    30fa:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <_ZN22Adafruit_CC3000_Client10fastrprintEPK19__FlashStringHelper>
    30fe:	7c 01       	movw	r14, r24
  r+= fastrprint(F("\r\n"));
    3100:	c8 01       	movw	r24, r16
    3102:	6b e6       	ldi	r22, 0x6B	; 107
    3104:	70 e0       	ldi	r23, 0x00	; 0
    3106:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <_ZN22Adafruit_CC3000_Client10fastrprintEPK19__FlashStringHelper>
    310a:	9c 01       	movw	r18, r24
    310c:	2e 0d       	add	r18, r14
    310e:	3f 1d       	adc	r19, r15
  return r;
}
    3110:	c9 01       	movw	r24, r18
    3112:	1f 91       	pop	r17
    3114:	0f 91       	pop	r16
    3116:	ff 90       	pop	r15
    3118:	ef 90       	pop	r14
    311a:	08 95       	ret

0000311c <_ZN22Adafruit_CC3000_Client5writeEh>:
size_t Adafruit_CC3000_Client::write(const uint8_t *buf, size_t len)
{
  return write(buf, len, 0);
}

size_t Adafruit_CC3000_Client::write(uint8_t c)
    311c:	cf 92       	push	r12
    311e:	df 92       	push	r13
    3120:	ef 92       	push	r14
    3122:	ff 92       	push	r15
    3124:	0f 93       	push	r16
    3126:	1f 93       	push	r17
    3128:	df 93       	push	r29
    312a:	cf 93       	push	r28
    312c:	0f 92       	push	r0
    312e:	cd b7       	in	r28, 0x3d	; 61
    3130:	de b7       	in	r29, 0x3e	; 62
    3132:	69 83       	std	Y+1, r22	; 0x01
{
  int32_t r;
  r = send(_socket, &c, 1, 0);
    3134:	fc 01       	movw	r30, r24
    3136:	e1 5b       	subi	r30, 0xB1	; 177
    3138:	ff 4f       	sbci	r31, 0xFF	; 255
    313a:	60 81       	ld	r22, Z
    313c:	71 81       	ldd	r23, Z+1	; 0x01
    313e:	82 81       	ldd	r24, Z+2	; 0x02
    3140:	93 81       	ldd	r25, Z+3	; 0x03
    3142:	ae 01       	movw	r20, r28
    3144:	4f 5f       	subi	r20, 0xFF	; 255
    3146:	5f 4f       	sbci	r21, 0xFF	; 255
    3148:	01 e0       	ldi	r16, 0x01	; 1
    314a:	10 e0       	ldi	r17, 0x00	; 0
    314c:	20 e0       	ldi	r18, 0x00	; 0
    314e:	30 e0       	ldi	r19, 0x00	; 0
    3150:	cc 24       	eor	r12, r12
    3152:	dd 24       	eor	r13, r13
    3154:	76 01       	movw	r14, r12
    3156:	0e 94 1d 12 	call	0x243a	; 0x243a <send>
    315a:	9c 01       	movw	r18, r24
    315c:	44 27       	eor	r20, r20
    315e:	37 fd       	sbrc	r19, 7
    3160:	40 95       	com	r20
    3162:	54 2f       	mov	r21, r20
  if ( r < 0 ) return 0;
    3164:	57 ff       	sbrs	r21, 7
    3166:	02 c0       	rjmp	.+4      	; 0x316c <_ZN22Adafruit_CC3000_Client5writeEh+0x50>
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	30 e0       	ldi	r19, 0x00	; 0
  return r;
}
    316c:	c9 01       	movw	r24, r18
    316e:	0f 90       	pop	r0
    3170:	cf 91       	pop	r28
    3172:	df 91       	pop	r29
    3174:	1f 91       	pop	r17
    3176:	0f 91       	pop	r16
    3178:	ff 90       	pop	r15
    317a:	ef 90       	pop	r14
    317c:	df 90       	pop	r13
    317e:	cf 90       	pop	r12
    3180:	08 95       	ret

00003182 <_ZN22Adafruit_CC3000_Client10fastrprintEPc>:
  else {
    return 0;
  }
}

size_t Adafruit_CC3000_Client::fastrprint(char *str)
    3182:	cf 92       	push	r12
    3184:	df 92       	push	r13
    3186:	ef 92       	push	r14
    3188:	ff 92       	push	r15
    318a:	0f 93       	push	r16
    318c:	1f 93       	push	r17
    318e:	cf 93       	push	r28
    3190:	df 93       	push	r29
    3192:	ec 01       	movw	r28, r24
    3194:	ab 01       	movw	r20, r22
{
  size_t len = strlen(str);
    3196:	db 01       	movw	r26, r22
    3198:	0d 90       	ld	r0, X+
    319a:	00 20       	and	r0, r0
    319c:	e9 f7       	brne	.-6      	; 0x3198 <_ZN22Adafruit_CC3000_Client10fastrprintEPc+0x16>
    319e:	11 97       	sbiw	r26, 0x01	; 1
    31a0:	a6 1b       	sub	r26, r22
    31a2:	b7 0b       	sbc	r27, r23
  if (len > 0) {
    31a4:	19 f4       	brne	.+6      	; 0x31ac <_ZN22Adafruit_CC3000_Client10fastrprintEPc+0x2a>
    31a6:	20 e0       	ldi	r18, 0x00	; 0
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	0f c0       	rjmp	.+30     	; 0x31ca <_ZN22Adafruit_CC3000_Client10fastrprintEPc+0x48>
  else return true;  
}

size_t Adafruit_CC3000_Client::write(const void *buf, uint16_t len, uint32_t flags)
{
  return send(_socket, buf, len, flags);
    31ac:	c1 5b       	subi	r28, 0xB1	; 177
    31ae:	df 4f       	sbci	r29, 0xFF	; 255
    31b0:	68 81       	ld	r22, Y
    31b2:	79 81       	ldd	r23, Y+1	; 0x01
    31b4:	8a 81       	ldd	r24, Y+2	; 0x02
    31b6:	9b 81       	ldd	r25, Y+3	; 0x03
    31b8:	8d 01       	movw	r16, r26
    31ba:	20 e0       	ldi	r18, 0x00	; 0
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	cc 24       	eor	r12, r12
    31c0:	dd 24       	eor	r13, r13
    31c2:	76 01       	movw	r14, r12
    31c4:	0e 94 1d 12 	call	0x243a	; 0x243a <send>
    31c8:	9c 01       	movw	r18, r24
    return write(str, len, 0);
  }
  else {
    return 0;
  }
}
    31ca:	c9 01       	movw	r24, r18
    31cc:	df 91       	pop	r29
    31ce:	cf 91       	pop	r28
    31d0:	1f 91       	pop	r17
    31d2:	0f 91       	pop	r16
    31d4:	ff 90       	pop	r15
    31d6:	ef 90       	pop	r14
    31d8:	df 90       	pop	r13
    31da:	cf 90       	pop	r12
    31dc:	08 95       	ret

000031de <_ZN22Adafruit_CC3000_Client12fastrprintlnEPc>:

size_t Adafruit_CC3000_Client::fastrprintln(char *str) {
    31de:	ef 92       	push	r14
    31e0:	ff 92       	push	r15
    31e2:	0f 93       	push	r16
    31e4:	1f 93       	push	r17
    31e6:	8c 01       	movw	r16, r24
  size_t r = 0;
  r = fastrprint(str);
    31e8:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZN22Adafruit_CC3000_Client10fastrprintEPc>
    31ec:	7c 01       	movw	r14, r24
  r+= fastrprint(F("\r\n"));
    31ee:	c8 01       	movw	r24, r16
    31f0:	68 e6       	ldi	r22, 0x68	; 104
    31f2:	70 e0       	ldi	r23, 0x00	; 0
    31f4:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <_ZN22Adafruit_CC3000_Client10fastrprintEPK19__FlashStringHelper>
    31f8:	9c 01       	movw	r18, r24
    31fa:	2e 0d       	add	r18, r14
    31fc:	3f 1d       	adc	r19, r15
  return r;
}
    31fe:	c9 01       	movw	r24, r18
    3200:	1f 91       	pop	r17
    3202:	0f 91       	pop	r16
    3204:	ff 90       	pop	r15
    3206:	ef 90       	pop	r14
    3208:	08 95       	ret

0000320a <_ZN22Adafruit_CC3000_Client5writeEPKhj>:
size_t Adafruit_CC3000_Client::write(const void *buf, uint16_t len, uint32_t flags)
{
  return send(_socket, buf, len, flags);
}

size_t Adafruit_CC3000_Client::write(const uint8_t *buf, size_t len)
    320a:	cf 92       	push	r12
    320c:	df 92       	push	r13
    320e:	ef 92       	push	r14
    3210:	ff 92       	push	r15
    3212:	0f 93       	push	r16
    3214:	1f 93       	push	r17
    3216:	db 01       	movw	r26, r22
  else return true;  
}

size_t Adafruit_CC3000_Client::write(const void *buf, uint16_t len, uint32_t flags)
{
  return send(_socket, buf, len, flags);
    3218:	fc 01       	movw	r30, r24
    321a:	e1 5b       	subi	r30, 0xB1	; 177
    321c:	ff 4f       	sbci	r31, 0xFF	; 255
    321e:	60 81       	ld	r22, Z
    3220:	71 81       	ldd	r23, Z+1	; 0x01
    3222:	82 81       	ldd	r24, Z+2	; 0x02
    3224:	93 81       	ldd	r25, Z+3	; 0x03
    3226:	8a 01       	movw	r16, r20
    3228:	20 e0       	ldi	r18, 0x00	; 0
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	ad 01       	movw	r20, r26
    322e:	cc 24       	eor	r12, r12
    3230:	dd 24       	eor	r13, r13
    3232:	76 01       	movw	r14, r12
    3234:	0e 94 1d 12 	call	0x243a	; 0x243a <send>
}

size_t Adafruit_CC3000_Client::write(const uint8_t *buf, size_t len)
{
  return write(buf, len, 0);
}
    3238:	1f 91       	pop	r17
    323a:	0f 91       	pop	r16
    323c:	ff 90       	pop	r15
    323e:	ef 90       	pop	r14
    3240:	df 90       	pop	r13
    3242:	cf 90       	pop	r12
    3244:	08 95       	ret

00003246 <_ZN22Adafruit_CC3000_Client7connectE9IPAddressj>:
    return connect(ip, port);
  else 
    return 0;
}

int Adafruit_CC3000_Client::connect(IPAddress destIP, uint16_t destPort)
    3246:	6f 92       	push	r6
    3248:	7f 92       	push	r7
    324a:	8f 92       	push	r8
    324c:	9f 92       	push	r9
    324e:	af 92       	push	r10
    3250:	bf 92       	push	r11
    3252:	cf 92       	push	r12
    3254:	df 92       	push	r13
    3256:	ef 92       	push	r14
    3258:	ff 92       	push	r15
    325a:	0f 93       	push	r16
    325c:	1f 93       	push	r17
    325e:	df 93       	push	r29
    3260:	cf 93       	push	r28
    3262:	cd b7       	in	r28, 0x3d	; 61
    3264:	de b7       	in	r29, 0x3e	; 62
    3266:	60 97       	sbiw	r28, 0x10	; 16
    3268:	0f b6       	in	r0, 0x3f	; 63
    326a:	f8 94       	cli
    326c:	de bf       	out	0x3e, r29	; 62
    326e:	0f be       	out	0x3f, r0	; 63
    3270:	cd bf       	out	0x3d, r28	; 61
    3272:	5c 01       	movw	r10, r24
    3274:	4b 01       	movw	r8, r22
    3276:	3a 01       	movw	r6, r20
  // The only difference is it resets the client's buffers to be empty, and then implements the
  // same logic as connect.
  // TODO: Refactor this entire function away so there is a single common function for connecting
  // to a TCP socket that both this function and the connectTCP function will use.

  bufsiz = 0;
    3278:	8d e4       	ldi	r24, 0x4D	; 77
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	a8 0e       	add	r10, r24
    327e:	b9 1e       	adc	r11, r25
    3280:	d5 01       	movw	r26, r10
    3282:	1d 92       	st	X+, r1
    3284:	1c 92       	st	X, r1
  _rx_buf_idx = 0;
    3286:	f5 01       	movw	r30, r10
    3288:	12 92       	st	-Z, r1
    328a:	5f 01       	movw	r10, r30
    328c:	84 eb       	ldi	r24, 0xB4	; 180
    328e:	9f ef       	ldi	r25, 0xFF	; 255
    3290:	a8 0e       	add	r10, r24
    3292:	b9 1e       	adc	r11, r25
  sockaddr      socketAddress;
  int32_t       tcp_socket;

  // Create the socket(s)
  //if (CC3KPrinter != 0) CC3KPrinter->print(F("Creating socket ... "));
  tcp_socket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    3294:	62 e0       	ldi	r22, 0x02	; 2
    3296:	70 e0       	ldi	r23, 0x00	; 0
    3298:	80 e0       	ldi	r24, 0x00	; 0
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	21 e0       	ldi	r18, 0x01	; 1
    329e:	30 e0       	ldi	r19, 0x00	; 0
    32a0:	40 e0       	ldi	r20, 0x00	; 0
    32a2:	50 e0       	ldi	r21, 0x00	; 0
    32a4:	e6 e0       	ldi	r30, 0x06	; 6
    32a6:	ee 2e       	mov	r14, r30
    32a8:	f1 2c       	mov	r15, r1
    32aa:	01 2d       	mov	r16, r1
    32ac:	11 2d       	mov	r17, r1
    32ae:	0e 94 33 10 	call	0x2066	; 0x2066 <socket>
    32b2:	6b 01       	movw	r12, r22
    32b4:	7c 01       	movw	r14, r24
  if (-1 == tcp_socket)
    32b6:	9f ef       	ldi	r25, 0xFF	; 255
    32b8:	c9 16       	cp	r12, r25
    32ba:	9f ef       	ldi	r25, 0xFF	; 255
    32bc:	d9 06       	cpc	r13, r25
    32be:	9f ef       	ldi	r25, 0xFF	; 255
    32c0:	e9 06       	cpc	r14, r25
    32c2:	9f ef       	ldi	r25, 0xFF	; 255
    32c4:	f9 06       	cpc	r15, r25
    32c6:	c9 f1       	breq	.+114    	; 0x333a <_ZN22Adafruit_CC3000_Client7connectE9IPAddressj+0xf4>
    }
    return 0;
  }
  //CC3KPrinter->print(F("DONE (socket ")); CC3KPrinter->print(tcp_socket); CC3KPrinter->println(F(")"));

  closed_sockets[tcp_socket] = false; // Clear any previous closed event
    32c8:	f6 01       	movw	r30, r12
    32ca:	eb 5d       	subi	r30, 0xDB	; 219
    32cc:	fd 4f       	sbci	r31, 0xFD	; 253
    32ce:	10 82       	st	Z, r1

  // Try to open the socket
  memset(&socketAddress, 0x00, sizeof(socketAddress));
    32d0:	8e 01       	movw	r16, r28
    32d2:	0f 5f       	subi	r16, 0xFF	; 255
    32d4:	1f 4f       	sbci	r17, 0xFF	; 255
    32d6:	80 e1       	ldi	r24, 0x10	; 16
    32d8:	d8 01       	movw	r26, r16
    32da:	1d 92       	st	X+, r1
    32dc:	8a 95       	dec	r24
    32de:	e9 f7       	brne	.-6      	; 0x32da <_ZN22Adafruit_CC3000_Client7connectE9IPAddressj+0x94>
  socketAddress.sa_family = AF_INET;
    32e0:	82 e0       	ldi	r24, 0x02	; 2
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	9a 83       	std	Y+2, r25	; 0x02
    32e6:	89 83       	std	Y+1, r24	; 0x01
  socketAddress.sa_data[0] = (destPort & 0xFF00) >> 8;  // Set the Port Number
    32e8:	7b 82       	std	Y+3, r7	; 0x03
  socketAddress.sa_data[1] = (destPort & 0x00FF);
    32ea:	6c 82       	std	Y+4, r6	; 0x04
  socketAddress.sa_data[2] = destIP >> 24;
    32ec:	f4 01       	movw	r30, r8
    32ee:	82 81       	ldd	r24, Z+2	; 0x02
    32f0:	93 81       	ldd	r25, Z+3	; 0x03
    32f2:	a4 81       	ldd	r26, Z+4	; 0x04
    32f4:	b5 81       	ldd	r27, Z+5	; 0x05
    32f6:	2b 2f       	mov	r18, r27
    32f8:	33 27       	eor	r19, r19
    32fa:	44 27       	eor	r20, r20
    32fc:	55 27       	eor	r21, r21
    32fe:	2d 83       	std	Y+5, r18	; 0x05
  socketAddress.sa_data[3] = destIP >> 16;
    3300:	9d 01       	movw	r18, r26
    3302:	44 27       	eor	r20, r20
    3304:	55 27       	eor	r21, r21
    3306:	2e 83       	std	Y+6, r18	; 0x06
  socketAddress.sa_data[4] = destIP >> 8;
    3308:	89 2f       	mov	r24, r25
    330a:	9a 2f       	mov	r25, r26
    330c:	ab 2f       	mov	r26, r27
    330e:	bb 27       	eor	r27, r27
    3310:	8f 83       	std	Y+7, r24	; 0x07
  socketAddress.sa_data[5] = destIP;
    3312:	82 81       	ldd	r24, Z+2	; 0x02
    3314:	88 87       	std	Y+8, r24	; 0x08
    CC3KPrinter->println(destPort);
  }

  //printHex((byte *)&socketAddress, sizeof(socketAddress));
  //if (CC3KPrinter != 0) CC3KPrinter->print(F("Connecting socket ... "));
  if (-1 == ::connect(tcp_socket, &socketAddress, sizeof(socketAddress)))
    3316:	c7 01       	movw	r24, r14
    3318:	b6 01       	movw	r22, r12
    331a:	a8 01       	movw	r20, r16
    331c:	00 e1       	ldi	r16, 0x10	; 16
    331e:	10 e0       	ldi	r17, 0x00	; 0
    3320:	20 e0       	ldi	r18, 0x00	; 0
    3322:	30 e0       	ldi	r19, 0x00	; 0
    3324:	0e 94 4e 0c 	call	0x189c	; 0x189c <connect>
    3328:	6f 5f       	subi	r22, 0xFF	; 255
    332a:	7f 4f       	sbci	r23, 0xFF	; 255
    332c:	8f 4f       	sbci	r24, 0xFF	; 255
    332e:	9f 4f       	sbci	r25, 0xFF	; 255
    3330:	39 f4       	brne	.+14     	; 0x3340 <_ZN22Adafruit_CC3000_Client7connectE9IPAddressj+0xfa>
  {
    CHECK_PRINTER {
      CC3KPrinter->println(F("Connection error"));
    }
    closesocket(tcp_socket);
    3332:	c7 01       	movw	r24, r14
    3334:	b6 01       	movw	r22, r12
    3336:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <closesocket>
    333a:	20 e0       	ldi	r18, 0x00	; 0
    333c:	30 e0       	ldi	r19, 0x00	; 0
    333e:	0c c0       	rjmp	.+24     	; 0x3358 <_ZN22Adafruit_CC3000_Client7connectE9IPAddressj+0x112>
    return 0;
  }
  // if (CC3KPrinter != 0) CC3KPrinter->println(F("DONE"));

  _socket = tcp_socket;
    3340:	8f e4       	ldi	r24, 0x4F	; 79
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	a8 0e       	add	r10, r24
    3346:	b9 1e       	adc	r11, r25
    3348:	d5 01       	movw	r26, r10
    334a:	cd 92       	st	X+, r12
    334c:	dd 92       	st	X+, r13
    334e:	ed 92       	st	X+, r14
    3350:	fc 92       	st	X, r15
    3352:	13 97       	sbiw	r26, 0x03	; 3
    3354:	21 e0       	ldi	r18, 0x01	; 1
    3356:	30 e0       	ldi	r19, 0x00	; 0
  return 1;
}
    3358:	c9 01       	movw	r24, r18
    335a:	60 96       	adiw	r28, 0x10	; 16
    335c:	0f b6       	in	r0, 0x3f	; 63
    335e:	f8 94       	cli
    3360:	de bf       	out	0x3e, r29	; 62
    3362:	0f be       	out	0x3f, r0	; 63
    3364:	cd bf       	out	0x3d, r28	; 61
    3366:	cf 91       	pop	r28
    3368:	df 91       	pop	r29
    336a:	1f 91       	pop	r17
    336c:	0f 91       	pop	r16
    336e:	ff 90       	pop	r15
    3370:	ef 90       	pop	r14
    3372:	df 90       	pop	r13
    3374:	cf 90       	pop	r12
    3376:	bf 90       	pop	r11
    3378:	af 90       	pop	r10
    337a:	9f 90       	pop	r9
    337c:	8f 90       	pop	r8
    337e:	7f 90       	pop	r7
    3380:	6f 90       	pop	r6
    3382:	08 95       	ret

00003384 <_ZN15Adafruit_CC30009checkDHCPEv>:
    Checks if the DHCP process is complete or not

    @returns  True if DHCP process is complete (IP address assigned)
*/
/**************************************************************************/
bool Adafruit_CC3000::checkDHCP(void)
    3384:	df 93       	push	r29
    3386:	cf 93       	push	r28
    3388:	00 d0       	rcall	.+0      	; 0x338a <_ZN15Adafruit_CC30009checkDHCPEv+0x6>
    338a:	00 d0       	rcall	.+0      	; 0x338c <_ZN15Adafruit_CC30009checkDHCPEv+0x8>
    338c:	cd b7       	in	r28, 0x3d	; 61
    338e:	de b7       	in	r29, 0x3e	; 62
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    3390:	80 91 45 02 	lds	r24, 0x0245
  // but for some reason this call is necessary or else UDP won't 
  // work.  See this thread from TI for more details and the genesis
  // of the workaround: http://e2e.ti.com/support/wireless_connectivity/f/851/t/342177.aspx
  // Putting this in checkDHCP is a nice way to make it just work
  // for people without any need to add to their sketch.
  if (cc3000Bitset.test(CC3000BitSet::HasDHCP)) {
    3394:	82 ff       	sbrs	r24, 2
    3396:	09 c0       	rjmp	.+18     	; 0x33aa <_ZN15Adafruit_CC30009checkDHCPEv+0x26>
    uint32_t output;
    gethostbyname("localhost", 9, &output);
    3398:	83 e0       	ldi	r24, 0x03	; 3
    339a:	91 e0       	ldi	r25, 0x01	; 1
    339c:	69 e0       	ldi	r22, 0x09	; 9
    339e:	70 e0       	ldi	r23, 0x00	; 0
    33a0:	ae 01       	movw	r20, r28
    33a2:	4f 5f       	subi	r20, 0xFF	; 255
    33a4:	5f 4f       	sbci	r21, 0xFF	; 255
    33a6:	0e 94 ab 0c 	call	0x1956	; 0x1956 <gethostbyname>
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    33aa:	80 91 45 02 	lds	r24, 0x0245
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	96 95       	lsr	r25
    33b2:	87 95       	ror	r24
    33b4:	96 95       	lsr	r25
    33b6:	87 95       	ror	r24
  if (cc3000Bitset.test(CC3000BitSet::HasDHCP)) {
    uint32_t output;
    gethostbyname("localhost", 9, &output);
  }
  return cc3000Bitset.test(CC3000BitSet::HasDHCP);
}
    33b8:	81 70       	andi	r24, 0x01	; 1
    33ba:	0f 90       	pop	r0
    33bc:	0f 90       	pop	r0
    33be:	0f 90       	pop	r0
    33c0:	0f 90       	pop	r0
    33c2:	cf 91       	pop	r28
    33c4:	df 91       	pop	r29
    33c6:	08 95       	ret

000033c8 <_ZN22Adafruit_CC3000_Client7connectEPKcj>:
Adafruit_CC3000_Client::operator bool()
{
  return connected();
}

int Adafruit_CC3000_Client::connect(const char *host, uint16_t port){
    33c8:	af 92       	push	r10
    33ca:	bf 92       	push	r11
    33cc:	cf 92       	push	r12
    33ce:	df 92       	push	r13
    33d0:	ef 92       	push	r14
    33d2:	ff 92       	push	r15
    33d4:	0f 93       	push	r16
    33d6:	1f 93       	push	r17
    33d8:	df 93       	push	r29
    33da:	cf 93       	push	r28
    33dc:	cd b7       	in	r28, 0x3d	; 61
    33de:	de b7       	in	r29, 0x3e	; 62
    33e0:	2a 97       	sbiw	r28, 0x0a	; 10
    33e2:	0f b6       	in	r0, 0x3f	; 63
    33e4:	f8 94       	cli
    33e6:	de bf       	out	0x3e, r29	; 62
    33e8:	0f be       	out	0x3f, r0	; 63
    33ea:	cd bf       	out	0x3d, r28	; 61
    33ec:	6c 01       	movw	r12, r24
    33ee:	cb 01       	movw	r24, r22
    33f0:	5a 01       	movw	r10, r20
  
  // if (!_initialised) return 0;
  // if (!ulCC3000Connected) return 0;
  // if (!ulCC3000DHCP) return 0;

  uint32_t ip = 0;
    33f2:	19 82       	std	Y+1, r1	; 0x01
    33f4:	1a 82       	std	Y+2, r1	; 0x02
    33f6:	1b 82       	std	Y+3, r1	; 0x03
    33f8:	1c 82       	std	Y+4, r1	; 0x04

  int16_t r = gethostbyname(host, strlen(host), &ip);
    33fa:	db 01       	movw	r26, r22
    33fc:	0d 90       	ld	r0, X+
    33fe:	00 20       	and	r0, r0
    3400:	e9 f7       	brne	.-6      	; 0x33fc <_ZN22Adafruit_CC3000_Client7connectEPKcj+0x34>
    3402:	11 97       	sbiw	r26, 0x01	; 1
    3404:	a6 1b       	sub	r26, r22
    3406:	b7 0b       	sbc	r27, r23
    3408:	bd 01       	movw	r22, r26
    340a:	ae 01       	movw	r20, r28
    340c:	4f 5f       	subi	r20, 0xFF	; 255
    340e:	5f 4f       	sbci	r21, 0xFF	; 255
    3410:	0e 94 ab 0c 	call	0x1956	; 0x1956 <gethostbyname>

  if (ip!=0 && r!=0)
    3414:	49 81       	ldd	r20, Y+1	; 0x01
    3416:	5a 81       	ldd	r21, Y+2	; 0x02
    3418:	6b 81       	ldd	r22, Y+3	; 0x03
    341a:	7c 81       	ldd	r23, Y+4	; 0x04
    341c:	41 15       	cp	r20, r1
    341e:	51 05       	cpc	r21, r1
    3420:	61 05       	cpc	r22, r1
    3422:	71 05       	cpc	r23, r1
    3424:	a1 f0       	breq	.+40     	; 0x344e <_ZN22Adafruit_CC3000_Client7connectEPKcj+0x86>
    3426:	89 2b       	or	r24, r25
    3428:	91 f0       	breq	.+36     	; 0x344e <_ZN22Adafruit_CC3000_Client7connectEPKcj+0x86>
    return connect(ip, port);
    342a:	d6 01       	movw	r26, r12
    342c:	ed 91       	ld	r30, X+
    342e:	fc 91       	ld	r31, X
    3430:	e4 84       	ldd	r14, Z+12	; 0x0c
    3432:	f5 84       	ldd	r15, Z+13	; 0x0d
    3434:	8e 01       	movw	r16, r28
    3436:	0b 5f       	subi	r16, 0xFB	; 251
    3438:	1f 4f       	sbci	r17, 0xFF	; 255
    343a:	c8 01       	movw	r24, r16
    343c:	0e 94 44 2c 	call	0x5888	; 0x5888 <_ZN9IPAddressC1Em>
    3440:	c6 01       	movw	r24, r12
    3442:	b8 01       	movw	r22, r16
    3444:	a5 01       	movw	r20, r10
    3446:	f7 01       	movw	r30, r14
    3448:	09 95       	icall
    344a:	9c 01       	movw	r18, r24
    344c:	02 c0       	rjmp	.+4      	; 0x3452 <_ZN22Adafruit_CC3000_Client7connectEPKcj+0x8a>
    344e:	20 e0       	ldi	r18, 0x00	; 0
    3450:	30 e0       	ldi	r19, 0x00	; 0
  else 
    return 0;
}
    3452:	c9 01       	movw	r24, r18
    3454:	2a 96       	adiw	r28, 0x0a	; 10
    3456:	0f b6       	in	r0, 0x3f	; 63
    3458:	f8 94       	cli
    345a:	de bf       	out	0x3e, r29	; 62
    345c:	0f be       	out	0x3f, r0	; 63
    345e:	cd bf       	out	0x3d, r28	; 61
    3460:	cf 91       	pop	r28
    3462:	df 91       	pop	r29
    3464:	1f 91       	pop	r17
    3466:	0f 91       	pop	r16
    3468:	ff 90       	pop	r15
    346a:	ef 90       	pop	r14
    346c:	df 90       	pop	r13
    346e:	cf 90       	pop	r12
    3470:	bf 90       	pop	r11
    3472:	af 90       	pop	r10
    3474:	08 95       	ret

00003476 <_ZN22Adafruit_CC3000_ClientaSERKS_>:
  bufsiz = copy.bufsiz;
  _rx_buf_idx = copy._rx_buf_idx;
  memcpy(_rx_buf, copy._rx_buf, RXBUFFERSIZE);
}

void Adafruit_CC3000_Client::operator=(const Adafruit_CC3000_Client& other) {
    3476:	cf 93       	push	r28
    3478:	df 93       	push	r29
    347a:	fc 01       	movw	r30, r24
    347c:	9b 01       	movw	r18, r22
  // Copy all the members to assign a new value to this client.
  _socket = other._socket;
    347e:	e1 5b       	subi	r30, 0xB1	; 177
    3480:	ff 4f       	sbci	r31, 0xFF	; 255
    3482:	21 5b       	subi	r18, 0xB1	; 177
    3484:	3f 4f       	sbci	r19, 0xFF	; 255
    3486:	e9 01       	movw	r28, r18
    3488:	88 81       	ld	r24, Y
    348a:	99 81       	ldd	r25, Y+1	; 0x01
    348c:	aa 81       	ldd	r26, Y+2	; 0x02
    348e:	bb 81       	ldd	r27, Y+3	; 0x03
    3490:	80 83       	st	Z, r24
    3492:	91 83       	std	Z+1, r25	; 0x01
    3494:	a2 83       	std	Z+2, r26	; 0x02
    3496:	b3 83       	std	Z+3, r27	; 0x03
  bufsiz = other.bufsiz;
    3498:	d9 01       	movw	r26, r18
    349a:	9e 91       	ld	r25, -X
    349c:	8e 91       	ld	r24, -X
    349e:	92 93       	st	-Z, r25
    34a0:	82 93       	st	-Z, r24
  _rx_buf_idx = other._rx_buf_idx;
    34a2:	ed 01       	movw	r28, r26
    34a4:	8a 91       	ld	r24, -Y
    34a6:	82 93       	st	-Z, r24
  memcpy(_rx_buf, other._rx_buf, RXBUFFERSIZE);
    34a8:	e0 54       	subi	r30, 0x40	; 64
    34aa:	f0 40       	sbci	r31, 0x00	; 0
    34ac:	de 01       	movw	r26, r28
    34ae:	a0 54       	subi	r26, 0x40	; 64
    34b0:	b0 40       	sbci	r27, 0x00	; 0
    34b2:	80 e4       	ldi	r24, 0x40	; 64
    34b4:	0d 90       	ld	r0, X+
    34b6:	01 92       	st	Z+, r0
    34b8:	81 50       	subi	r24, 0x01	; 1
    34ba:	e1 f7       	brne	.-8      	; 0x34b4 <_ZN22Adafruit_CC3000_ClientaSERKS_+0x3e>
}
    34bc:	df 91       	pop	r29
    34be:	cf 91       	pop	r28
    34c0:	08 95       	ret

000034c2 <_Z21CC3000_UsynchCallbacklPch>:
//!
//! @brief  The function handles asynchronous events that come from CC3000
//!         device and operates a led for indicate
//
//*****************************************************************************
void CC3000_UsynchCallback(long lEventType, char * data, unsigned char length)
    34c2:	ef 92       	push	r14
    34c4:	ff 92       	push	r15
    34c6:	0f 93       	push	r16
    34c8:	1f 93       	push	r17
    34ca:	7b 01       	movw	r14, r22
    34cc:	8c 01       	movw	r16, r24
    34ce:	fa 01       	movw	r30, r20
    34d0:	42 2f       	mov	r20, r18
{
  if (lEventType == HCI_EVNT_WLAN_ASYNC_SIMPLE_CONFIG_DONE)
    34d2:	80 e8       	ldi	r24, 0x80	; 128
    34d4:	e8 16       	cp	r14, r24
    34d6:	80 e8       	ldi	r24, 0x80	; 128
    34d8:	f8 06       	cpc	r15, r24
    34da:	80 e0       	ldi	r24, 0x00	; 0
    34dc:	08 07       	cpc	r16, r24
    34de:	80 e0       	ldi	r24, 0x00	; 0
    34e0:	18 07       	cpc	r17, r24
    34e2:	31 f4       	brne	.+12     	; 0x34f0 <_Z21CC3000_UsynchCallbacklPch+0x2e>
  bool test(const byte flag) {
    return (flags & flag) != 0;
  }

  void set(const byte flag) {
    flags |= flag;
    34e4:	80 91 45 02 	lds	r24, 0x0245
    34e8:	81 60       	ori	r24, 0x01	; 1
    34ea:	80 93 45 02 	sts	0x0245, r24
    34ee:	2b c0       	rjmp	.+86     	; 0x3546 <_Z21CC3000_UsynchCallbacklPch+0x84>
  if (lEventType == HCI_EVNT_WLAN_ASYNC_SIMPLE_CONFIG_DONE)
  {
    cc3000Bitset.set(CC3000BitSet::IsSmartConfigFinished);
  }

  if (lEventType == HCI_EVNT_WLAN_UNSOL_CONNECT)
    34f0:	81 e0       	ldi	r24, 0x01	; 1
    34f2:	e8 16       	cp	r14, r24
    34f4:	80 e8       	ldi	r24, 0x80	; 128
    34f6:	f8 06       	cpc	r15, r24
    34f8:	80 e0       	ldi	r24, 0x00	; 0
    34fa:	08 07       	cpc	r16, r24
    34fc:	80 e0       	ldi	r24, 0x00	; 0
    34fe:	18 07       	cpc	r17, r24
    3500:	31 f4       	brne	.+12     	; 0x350e <_Z21CC3000_UsynchCallbacklPch+0x4c>
  bool test(const byte flag) {
    return (flags & flag) != 0;
  }

  void set(const byte flag) {
    flags |= flag;
    3502:	80 91 45 02 	lds	r24, 0x0245
    3506:	82 60       	ori	r24, 0x02	; 2
    3508:	80 93 45 02 	sts	0x0245, r24
    350c:	28 c0       	rjmp	.+80     	; 0x355e <_Z21CC3000_UsynchCallbacklPch+0x9c>
  if (lEventType == HCI_EVNT_WLAN_UNSOL_CONNECT)
  {
    cc3000Bitset.set(CC3000BitSet::IsConnected);
  }

  if (lEventType == HCI_EVNT_WLAN_UNSOL_DISCONNECT)
    350e:	82 e0       	ldi	r24, 0x02	; 2
    3510:	e8 16       	cp	r14, r24
    3512:	80 e8       	ldi	r24, 0x80	; 128
    3514:	f8 06       	cpc	r15, r24
    3516:	80 e0       	ldi	r24, 0x00	; 0
    3518:	08 07       	cpc	r16, r24
    351a:	80 e0       	ldi	r24, 0x00	; 0
    351c:	18 07       	cpc	r17, r24
    351e:	31 f4       	brne	.+12     	; 0x352c <_Z21CC3000_UsynchCallbacklPch+0x6a>
  void set(const byte flag) {
    flags |= flag;
  }

  void reset(const byte flag) {
    flags &= ~flag;
    3520:	80 91 45 02 	lds	r24, 0x0245
    3524:	89 7f       	andi	r24, 0xF9	; 249
    3526:	80 93 45 02 	sts	0x0245, r24
    352a:	2f c0       	rjmp	.+94     	; 0x358a <_Z21CC3000_UsynchCallbacklPch+0xc8>
  if (lEventType == HCI_EVNT_WLAN_UNSOL_DISCONNECT)
  {
    cc3000Bitset.reset(CC3000BitSet::IsConnected | CC3000BitSet::HasDHCP);
  }
  
  if (lEventType == HCI_EVNT_WLAN_UNSOL_DHCP)
    352c:	80 e1       	ldi	r24, 0x10	; 16
    352e:	e8 16       	cp	r14, r24
    3530:	80 e8       	ldi	r24, 0x80	; 128
    3532:	f8 06       	cpc	r15, r24
    3534:	80 e0       	ldi	r24, 0x00	; 0
    3536:	08 07       	cpc	r16, r24
    3538:	80 e0       	ldi	r24, 0x00	; 0
    353a:	18 07       	cpc	r17, r24
    353c:	21 f4       	brne	.+8      	; 0x3546 <_Z21CC3000_UsynchCallbacklPch+0x84>
  bool test(const byte flag) {
    return (flags & flag) != 0;
  }

  void set(const byte flag) {
    flags |= flag;
    353e:	80 91 45 02 	lds	r24, 0x0245
    3542:	84 60       	ori	r24, 0x04	; 4
    3544:	09 c0       	rjmp	.+18     	; 0x3558 <_Z21CC3000_UsynchCallbacklPch+0x96>
  if (lEventType == HCI_EVNT_WLAN_UNSOL_DHCP)
  {
    cc3000Bitset.set(CC3000BitSet::HasDHCP);
  }

  if (lEventType == HCI_EVENT_CC3000_CAN_SHUT_DOWN)
    3546:	89 e9       	ldi	r24, 0x99	; 153
    3548:	e8 16       	cp	r14, r24
    354a:	f1 04       	cpc	r15, r1
    354c:	01 05       	cpc	r16, r1
    354e:	11 05       	cpc	r17, r1
    3550:	31 f4       	brne	.+12     	; 0x355e <_Z21CC3000_UsynchCallbacklPch+0x9c>
  bool test(const byte flag) {
    return (flags & flag) != 0;
  }

  void set(const byte flag) {
    flags |= flag;
    3552:	80 91 45 02 	lds	r24, 0x0245
    3556:	88 60       	ori	r24, 0x08	; 8
    3558:	80 93 45 02 	sts	0x0245, r24
    355c:	28 c0       	rjmp	.+80     	; 0x35ae <_Z21CC3000_UsynchCallbacklPch+0xec>
  if (lEventType == HCI_EVENT_CC3000_CAN_SHUT_DOWN)
  {
    cc3000Bitset.set(CC3000BitSet::OkToShutDown);
  }

  if (lEventType == HCI_EVNT_WLAN_ASYNC_PING_REPORT)
    355e:	80 e4       	ldi	r24, 0x40	; 64
    3560:	e8 16       	cp	r14, r24
    3562:	80 e8       	ldi	r24, 0x80	; 128
    3564:	f8 06       	cpc	r15, r24
    3566:	80 e0       	ldi	r24, 0x00	; 0
    3568:	08 07       	cpc	r16, r24
    356a:	80 e0       	ldi	r24, 0x00	; 0
    356c:	18 07       	cpc	r17, r24
    356e:	69 f4       	brne	.+26     	; 0x358a <_Z21CC3000_UsynchCallbacklPch+0xc8>
  {
    //PRINT_F("CC3000: Ping report\n\r");
    pingReportnum++;
    3570:	80 91 10 02 	lds	r24, 0x0210
    3574:	8f 5f       	subi	r24, 0xFF	; 255
    3576:	80 93 10 02 	sts	0x0210, r24
    memcpy(&pingReport, data, length);
    357a:	21 e1       	ldi	r18, 0x11	; 17
    357c:	32 e0       	ldi	r19, 0x02	; 2
    357e:	c9 01       	movw	r24, r18
    3580:	bf 01       	movw	r22, r30
    3582:	50 e0       	ldi	r21, 0x00	; 0
    3584:	0e 94 7e 33 	call	0x66fc	; 0x66fc <memcpy>
    3588:	12 c0       	rjmp	.+36     	; 0x35ae <_Z21CC3000_UsynchCallbacklPch+0xec>
  }

  if (lEventType == HCI_EVNT_BSD_TCP_CLOSE_WAIT) {
    358a:	80 e0       	ldi	r24, 0x00	; 0
    358c:	e8 16       	cp	r14, r24
    358e:	88 e8       	ldi	r24, 0x88	; 136
    3590:	f8 06       	cpc	r15, r24
    3592:	80 e0       	ldi	r24, 0x00	; 0
    3594:	08 07       	cpc	r16, r24
    3596:	80 e0       	ldi	r24, 0x00	; 0
    3598:	18 07       	cpc	r17, r24
    359a:	49 f4       	brne	.+18     	; 0x35ae <_Z21CC3000_UsynchCallbacklPch+0xec>
    uint8_t socketnum;
    socketnum = data[0];
    359c:	40 81       	ld	r20, Z
    //PRINT_F("TCP Close wait #"); printDec(socketnum);
    if (socketnum < MAX_SOCKETS)
    359e:	40 32       	cpi	r20, 0x20	; 32
    35a0:	30 f4       	brcc	.+12     	; 0x35ae <_Z21CC3000_UsynchCallbacklPch+0xec>
      closed_sockets[socketnum] = true;
    35a2:	e4 2f       	mov	r30, r20
    35a4:	f0 e0       	ldi	r31, 0x00	; 0
    35a6:	eb 5d       	subi	r30, 0xDB	; 219
    35a8:	fd 4f       	sbci	r31, 0xFD	; 253
    35aa:	81 e0       	ldi	r24, 0x01	; 1
    35ac:	80 83       	st	Z, r24
  }
}
    35ae:	1f 91       	pop	r17
    35b0:	0f 91       	pop	r16
    35b2:	ff 90       	pop	r15
    35b4:	ef 90       	pop	r14
    35b6:	08 95       	ret

000035b8 <_ZN15Adafruit_CC300012getIPAddressEPmS0_S0_S0_S0_>:
    @brief   Reads the current IP address

    @returns  False if an error occured!
*/
/**************************************************************************/
bool Adafruit_CC3000::getIPAddress(uint32_t *retip, uint32_t *netmask, uint32_t *gateway, uint32_t *dhcpserv, uint32_t *dnsserv)
    35b8:	8f 92       	push	r8
    35ba:	9f 92       	push	r9
    35bc:	af 92       	push	r10
    35be:	bf 92       	push	r11
    35c0:	cf 92       	push	r12
    35c2:	df 92       	push	r13
    35c4:	ef 92       	push	r14
    35c6:	ff 92       	push	r15
    35c8:	0f 93       	push	r16
    35ca:	1f 93       	push	r17
    35cc:	df 93       	push	r29
    35ce:	cf 93       	push	r28
    35d0:	cd b7       	in	r28, 0x3d	; 61
    35d2:	de b7       	in	r29, 0x3e	; 62
    35d4:	ea 97       	sbiw	r28, 0x3a	; 58
    35d6:	0f b6       	in	r0, 0x3f	; 63
    35d8:	f8 94       	cli
    35da:	de bf       	out	0x3e, r29	; 62
    35dc:	0f be       	out	0x3f, r0	; 63
    35de:	cd bf       	out	0x3d, r28	; 61
    35e0:	fc 01       	movw	r30, r24
    35e2:	6b 01       	movw	r12, r22
    35e4:	5a 01       	movw	r10, r20
    35e6:	49 01       	movw	r8, r18
{
  if (!_initialised) return false;
    35e8:	80 81       	ld	r24, Z
    35ea:	88 23       	and	r24, r24
    35ec:	f1 f1       	breq	.+124    	; 0x366a <_ZN15Adafruit_CC300012getIPAddressEPmS0_S0_S0_S0_+0xb2>
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    35ee:	80 91 45 02 	lds	r24, 0x0245
*/
/**************************************************************************/
bool Adafruit_CC3000::getIPAddress(uint32_t *retip, uint32_t *netmask, uint32_t *gateway, uint32_t *dhcpserv, uint32_t *dnsserv)
{
  if (!_initialised) return false;
  if (!cc3000Bitset.test(CC3000BitSet::IsConnected)) return false;
    35f2:	81 ff       	sbrs	r24, 1
    35f4:	3a c0       	rjmp	.+116    	; 0x366a <_ZN15Adafruit_CC300012getIPAddressEPmS0_S0_S0_S0_+0xb2>
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    35f6:	80 91 45 02 	lds	r24, 0x0245
/**************************************************************************/
bool Adafruit_CC3000::getIPAddress(uint32_t *retip, uint32_t *netmask, uint32_t *gateway, uint32_t *dhcpserv, uint32_t *dnsserv)
{
  if (!_initialised) return false;
  if (!cc3000Bitset.test(CC3000BitSet::IsConnected)) return false;
  if (!cc3000Bitset.test(CC3000BitSet::HasDHCP)) return false;
    35fa:	82 ff       	sbrs	r24, 2
    35fc:	36 c0       	rjmp	.+108    	; 0x366a <_ZN15Adafruit_CC300012getIPAddressEPmS0_S0_S0_S0_+0xb2>

  tNetappIpconfigRetArgs ipconfig;
  netapp_ipconfig(&ipconfig);
    35fe:	ce 01       	movw	r24, r28
    3600:	01 96       	adiw	r24, 0x01	; 1
    3602:	0e 94 af 0a 	call	0x155e	; 0x155e <netapp_ipconfig>

  /* If byte 1 is 0 we don't have a valid address */
  if (ipconfig.aucIP[3] == 0) return false;
    3606:	8c 81       	ldd	r24, Y+4	; 0x04
    3608:	88 23       	and	r24, r24
    360a:	79 f1       	breq	.+94     	; 0x366a <_ZN15Adafruit_CC300012getIPAddressEPmS0_S0_S0_S0_+0xb2>

  memcpy(retip, ipconfig.aucIP, 4);
    360c:	89 81       	ldd	r24, Y+1	; 0x01
    360e:	9a 81       	ldd	r25, Y+2	; 0x02
    3610:	ab 81       	ldd	r26, Y+3	; 0x03
    3612:	bc 81       	ldd	r27, Y+4	; 0x04
    3614:	f6 01       	movw	r30, r12
    3616:	80 83       	st	Z, r24
    3618:	91 83       	std	Z+1, r25	; 0x01
    361a:	a2 83       	std	Z+2, r26	; 0x02
    361c:	b3 83       	std	Z+3, r27	; 0x03
  memcpy(netmask, ipconfig.aucSubnetMask, 4);
    361e:	8d 81       	ldd	r24, Y+5	; 0x05
    3620:	9e 81       	ldd	r25, Y+6	; 0x06
    3622:	af 81       	ldd	r26, Y+7	; 0x07
    3624:	b8 85       	ldd	r27, Y+8	; 0x08
    3626:	f5 01       	movw	r30, r10
    3628:	80 83       	st	Z, r24
    362a:	91 83       	std	Z+1, r25	; 0x01
    362c:	a2 83       	std	Z+2, r26	; 0x02
    362e:	b3 83       	std	Z+3, r27	; 0x03
  memcpy(gateway, ipconfig.aucDefaultGateway, 4);
    3630:	89 85       	ldd	r24, Y+9	; 0x09
    3632:	9a 85       	ldd	r25, Y+10	; 0x0a
    3634:	ab 85       	ldd	r26, Y+11	; 0x0b
    3636:	bc 85       	ldd	r27, Y+12	; 0x0c
    3638:	f4 01       	movw	r30, r8
    363a:	80 83       	st	Z, r24
    363c:	91 83       	std	Z+1, r25	; 0x01
    363e:	a2 83       	std	Z+2, r26	; 0x02
    3640:	b3 83       	std	Z+3, r27	; 0x03
  memcpy(dhcpserv, ipconfig.aucDHCPServer, 4);
    3642:	8d 85       	ldd	r24, Y+13	; 0x0d
    3644:	9e 85       	ldd	r25, Y+14	; 0x0e
    3646:	af 85       	ldd	r26, Y+15	; 0x0f
    3648:	b8 89       	ldd	r27, Y+16	; 0x10
    364a:	f8 01       	movw	r30, r16
    364c:	80 83       	st	Z, r24
    364e:	91 83       	std	Z+1, r25	; 0x01
    3650:	a2 83       	std	Z+2, r26	; 0x02
    3652:	b3 83       	std	Z+3, r27	; 0x03
  memcpy(dnsserv, ipconfig.aucDNSServer, 4);
    3654:	89 89       	ldd	r24, Y+17	; 0x11
    3656:	9a 89       	ldd	r25, Y+18	; 0x12
    3658:	ab 89       	ldd	r26, Y+19	; 0x13
    365a:	bc 89       	ldd	r27, Y+20	; 0x14
    365c:	f7 01       	movw	r30, r14
    365e:	80 83       	st	Z, r24
    3660:	91 83       	std	Z+1, r25	; 0x01
    3662:	a2 83       	std	Z+2, r26	; 0x02
    3664:	b3 83       	std	Z+3, r27	; 0x03
    3666:	81 e0       	ldi	r24, 0x01	; 1
    3668:	01 c0       	rjmp	.+2      	; 0x366c <_ZN15Adafruit_CC300012getIPAddressEPmS0_S0_S0_S0_+0xb4>

  return true;
    366a:	80 e0       	ldi	r24, 0x00	; 0
}
    366c:	ea 96       	adiw	r28, 0x3a	; 58
    366e:	0f b6       	in	r0, 0x3f	; 63
    3670:	f8 94       	cli
    3672:	de bf       	out	0x3e, r29	; 62
    3674:	0f be       	out	0x3f, r0	; 63
    3676:	cd bf       	out	0x3d, r28	; 61
    3678:	cf 91       	pop	r28
    367a:	df 91       	pop	r29
    367c:	1f 91       	pop	r17
    367e:	0f 91       	pop	r16
    3680:	ff 90       	pop	r15
    3682:	ef 90       	pop	r14
    3684:	df 90       	pop	r13
    3686:	cf 90       	pop	r12
    3688:	bf 90       	pop	r11
    368a:	af 90       	pop	r10
    368c:	9f 90       	pop	r9
    368e:	8f 90       	pop	r8
    3690:	08 95       	ret

00003692 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l>:

    @returns  False if an error occured!
*/
/**************************************************************************/
#ifndef CC3000_TINY_DRIVER
bool Adafruit_CC3000::connectSecure(const char *ssid, const char *key, int32_t secMode)
    3692:	2f 92       	push	r2
    3694:	3f 92       	push	r3
    3696:	4f 92       	push	r4
    3698:	5f 92       	push	r5
    369a:	6f 92       	push	r6
    369c:	7f 92       	push	r7
    369e:	8f 92       	push	r8
    36a0:	9f 92       	push	r9
    36a2:	af 92       	push	r10
    36a4:	bf 92       	push	r11
    36a6:	cf 92       	push	r12
    36a8:	df 92       	push	r13
    36aa:	ef 92       	push	r14
    36ac:	ff 92       	push	r15
    36ae:	0f 93       	push	r16
    36b0:	1f 93       	push	r17
    36b2:	fc 01       	movw	r30, r24
    36b4:	d6 2e       	mov	r13, r22
    36b6:	c7 2e       	mov	r12, r23
    36b8:	34 2e       	mov	r3, r20
    36ba:	25 2e       	mov	r2, r21
{
  if (!_initialised) {
    36bc:	80 81       	ld	r24, Z
    36be:	88 23       	and	r24, r24
    36c0:	09 f4       	brne	.+2      	; 0x36c4 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0x32>
    36c2:	66 c0       	rjmp	.+204    	; 0x3790 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0xfe>
    return false;
  }
  
  if ( (secMode < 0) || (secMode > 3)) {
    36c4:	28 01       	movw	r4, r16
    36c6:	39 01       	movw	r6, r18
    36c8:	84 e0       	ldi	r24, 0x04	; 4
    36ca:	48 16       	cp	r4, r24
    36cc:	51 04       	cpc	r5, r1
    36ce:	61 04       	cpc	r6, r1
    36d0:	71 04       	cpc	r7, r1
    36d2:	08 f0       	brcs	.+2      	; 0x36d6 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0x44>
    36d4:	5d c0       	rjmp	.+186    	; 0x3790 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0xfe>
      CC3KPrinter->println(F("Security mode must be between 0 and 3"));
    }
    return false;
  }

  if (strlen(ssid) > MAXSSID) {
    36d6:	a6 2f       	mov	r26, r22
    36d8:	b7 2f       	mov	r27, r23
    36da:	fd 01       	movw	r30, r26
    36dc:	01 90       	ld	r0, Z+
    36de:	00 20       	and	r0, r0
    36e0:	e9 f7       	brne	.-6      	; 0x36dc <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0x4a>
    36e2:	31 97       	sbiw	r30, 0x01	; 1
    36e4:	ea 1b       	sub	r30, r26
    36e6:	fb 0b       	sbc	r31, r27
    36e8:	b1 97       	sbiw	r30, 0x21	; 33
    36ea:	08 f0       	brcs	.+2      	; 0x36ee <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0x5c>
    36ec:	51 c0       	rjmp	.+162    	; 0x3790 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0xfe>
      CC3KPrinter->println(MAXSSID);
    }
    return false;
  }

  if (strlen(key) > MAXLENGTHKEY) {
    36ee:	a4 2f       	mov	r26, r20
    36f0:	b5 2f       	mov	r27, r21
    36f2:	fd 01       	movw	r30, r26
    36f4:	01 90       	ld	r0, Z+
    36f6:	00 20       	and	r0, r0
    36f8:	e9 f7       	brne	.-6      	; 0x36f4 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0x62>
    36fa:	31 97       	sbiw	r30, 0x01	; 1
    36fc:	ea 1b       	sub	r30, r26
    36fe:	fb 0b       	sbc	r31, r27
    3700:	b1 97       	sbiw	r30, 0x21	; 33
    3702:	08 f0       	brcs	.+2      	; 0x3706 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0x74>
    3704:	45 c0       	rjmp	.+138    	; 0x3790 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0xfe>
      CC3KPrinter->println(MAXLENGTHKEY);
    }
    return false;
  }

  CHECK_SUCCESS(wlan_ioctl_set_connection_policy(0, 0, 0),
    3706:	60 e0       	ldi	r22, 0x00	; 0
    3708:	70 e0       	ldi	r23, 0x00	; 0
    370a:	80 e0       	ldi	r24, 0x00	; 0
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	20 e0       	ldi	r18, 0x00	; 0
    3710:	30 e0       	ldi	r19, 0x00	; 0
    3712:	40 e0       	ldi	r20, 0x00	; 0
    3714:	50 e0       	ldi	r21, 0x00	; 0
    3716:	ee 24       	eor	r14, r14
    3718:	ff 24       	eor	r15, r15
    371a:	87 01       	movw	r16, r14
    371c:	0e 94 a4 13 	call	0x2748	; 0x2748 <wlan_ioctl_set_connection_policy>
    3720:	61 15       	cp	r22, r1
    3722:	71 05       	cpc	r23, r1
    3724:	81 05       	cpc	r24, r1
    3726:	91 05       	cpc	r25, r1
    3728:	99 f5       	brne	.+102    	; 0x3790 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0xfe>
                "Failed setting the connection policy",
                false);
  delay(500);
    372a:	64 ef       	ldi	r22, 0xF4	; 244
    372c:	71 e0       	ldi	r23, 0x01	; 1
    372e:	80 e0       	ldi	r24, 0x00	; 0
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	0e 94 81 30 	call	0x6102	; 0x6102 <delay>
  CHECK_SUCCESS(wlan_connect(secMode, (char *)ssid, strlen(ssid),
    3736:	ed 2d       	mov	r30, r13
    3738:	fc 2d       	mov	r31, r12
    373a:	df 01       	movw	r26, r30
    373c:	0d 90       	ld	r0, X+
    373e:	00 20       	and	r0, r0
    3740:	e9 f7       	brne	.-6      	; 0x373c <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0xaa>
    3742:	8d 01       	movw	r16, r26
    3744:	01 50       	subi	r16, 0x01	; 1
    3746:	10 40       	sbci	r17, 0x00	; 0
    3748:	0e 1b       	sub	r16, r30
    374a:	1f 0b       	sbc	r17, r31
    374c:	e3 2d       	mov	r30, r3
    374e:	f2 2d       	mov	r31, r2
    3750:	df 01       	movw	r26, r30
    3752:	0d 90       	ld	r0, X+
    3754:	00 20       	and	r0, r0
    3756:	e9 f7       	brne	.-6      	; 0x3752 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0xc0>
    3758:	4d 01       	movw	r8, r26
    375a:	08 94       	sec
    375c:	81 08       	sbc	r8, r1
    375e:	91 08       	sbc	r9, r1
    3760:	8e 1a       	sub	r8, r30
    3762:	9f 0a       	sbc	r9, r31
    3764:	20 e0       	ldi	r18, 0x00	; 0
    3766:	30 e0       	ldi	r19, 0x00	; 0
    3768:	aa 24       	eor	r10, r10
    376a:	bb 24       	eor	r11, r11
    376c:	c3 01       	movw	r24, r6
    376e:	b2 01       	movw	r22, r4
    3770:	4d 2d       	mov	r20, r13
    3772:	5c 2d       	mov	r21, r12
    3774:	ee 24       	eor	r14, r14
    3776:	ff 24       	eor	r15, r15
    3778:	c3 2c       	mov	r12, r3
    377a:	d2 2c       	mov	r13, r2
    377c:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <wlan_connect>
    3780:	20 e0       	ldi	r18, 0x00	; 0
    3782:	61 15       	cp	r22, r1
    3784:	71 05       	cpc	r23, r1
    3786:	81 05       	cpc	r24, r1
    3788:	91 05       	cpc	r25, r1
    378a:	19 f4       	brne	.+6      	; 0x3792 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0x100>
    378c:	21 e0       	ldi	r18, 0x01	; 1
    378e:	01 c0       	rjmp	.+2      	; 0x3792 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0x100>
    3790:	20 e0       	ldi	r18, 0x00	; 0
                "SSID connection failed", false);

  /* Wait for 'HCI_EVNT_WLAN_UNSOL_CONNECT' in CC3000_UsynchCallback */

  return true;
}
    3792:	82 2f       	mov	r24, r18
    3794:	1f 91       	pop	r17
    3796:	0f 91       	pop	r16
    3798:	ff 90       	pop	r15
    379a:	ef 90       	pop	r14
    379c:	df 90       	pop	r13
    379e:	cf 90       	pop	r12
    37a0:	bf 90       	pop	r11
    37a2:	af 90       	pop	r10
    37a4:	9f 90       	pop	r9
    37a6:	8f 90       	pop	r8
    37a8:	7f 90       	pop	r7
    37aa:	6f 90       	pop	r6
    37ac:	5f 90       	pop	r5
    37ae:	4f 90       	pop	r4
    37b0:	3f 90       	pop	r3
    37b2:	2f 90       	pop	r2
    37b4:	08 95       	ret

000037b6 <_ZN15Adafruit_CC300011connectOpenEPKc>:
    @param  ssid      The named of the AP to connect to (max 32 chars)

    @returns  False if an error occured!
*/
/**************************************************************************/
bool Adafruit_CC3000::connectOpen(const char *ssid)
    37b6:	8f 92       	push	r8
    37b8:	9f 92       	push	r9
    37ba:	af 92       	push	r10
    37bc:	bf 92       	push	r11
    37be:	cf 92       	push	r12
    37c0:	df 92       	push	r13
    37c2:	ef 92       	push	r14
    37c4:	ff 92       	push	r15
    37c6:	0f 93       	push	r16
    37c8:	1f 93       	push	r17
    37ca:	fc 01       	movw	r30, r24
    37cc:	d6 2e       	mov	r13, r22
    37ce:	c7 2e       	mov	r12, r23
{
  if (!_initialised) {
    37d0:	80 81       	ld	r24, Z
    37d2:	88 23       	and	r24, r24
    37d4:	e1 f1       	breq	.+120    	; 0x384e <_ZN15Adafruit_CC300011connectOpenEPKc+0x98>
    return false;
  }

  #ifndef CC3000_TINY_DRIVER
    CHECK_SUCCESS(wlan_ioctl_set_connection_policy(0, 0, 0),
    37d6:	60 e0       	ldi	r22, 0x00	; 0
    37d8:	70 e0       	ldi	r23, 0x00	; 0
    37da:	80 e0       	ldi	r24, 0x00	; 0
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	20 e0       	ldi	r18, 0x00	; 0
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	40 e0       	ldi	r20, 0x00	; 0
    37e4:	50 e0       	ldi	r21, 0x00	; 0
    37e6:	ee 24       	eor	r14, r14
    37e8:	ff 24       	eor	r15, r15
    37ea:	87 01       	movw	r16, r14
    37ec:	0e 94 a4 13 	call	0x2748	; 0x2748 <wlan_ioctl_set_connection_policy>
    37f0:	61 15       	cp	r22, r1
    37f2:	71 05       	cpc	r23, r1
    37f4:	81 05       	cpc	r24, r1
    37f6:	91 05       	cpc	r25, r1
    37f8:	51 f5       	brne	.+84     	; 0x384e <_ZN15Adafruit_CC300011connectOpenEPKc+0x98>
                 "Failed to set connection policy", false);
    delay(500);
    37fa:	64 ef       	ldi	r22, 0xF4	; 244
    37fc:	71 e0       	ldi	r23, 0x01	; 1
    37fe:	80 e0       	ldi	r24, 0x00	; 0
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	0e 94 81 30 	call	0x6102	; 0x6102 <delay>
    CHECK_SUCCESS(wlan_connect(WLAN_SEC_UNSEC,
    3806:	ed 2d       	mov	r30, r13
    3808:	fc 2d       	mov	r31, r12
    380a:	df 01       	movw	r26, r30
    380c:	0d 90       	ld	r0, X+
    380e:	00 20       	and	r0, r0
    3810:	e9 f7       	brne	.-6      	; 0x380c <_ZN15Adafruit_CC300011connectOpenEPKc+0x56>
    3812:	8d 01       	movw	r16, r26
    3814:	01 50       	subi	r16, 0x01	; 1
    3816:	10 40       	sbci	r17, 0x00	; 0
    3818:	0e 1b       	sub	r16, r30
    381a:	1f 0b       	sbc	r17, r31
    381c:	20 e0       	ldi	r18, 0x00	; 0
    381e:	30 e0       	ldi	r19, 0x00	; 0
    3820:	60 e0       	ldi	r22, 0x00	; 0
    3822:	70 e0       	ldi	r23, 0x00	; 0
    3824:	80 e0       	ldi	r24, 0x00	; 0
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	4d 2d       	mov	r20, r13
    382a:	5c 2d       	mov	r21, r12
    382c:	ee 24       	eor	r14, r14
    382e:	ff 24       	eor	r15, r15
    3830:	cc 24       	eor	r12, r12
    3832:	dd 24       	eor	r13, r13
    3834:	88 24       	eor	r8, r8
    3836:	99 24       	eor	r9, r9
    3838:	54 01       	movw	r10, r8
    383a:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <wlan_connect>
    383e:	20 e0       	ldi	r18, 0x00	; 0
    3840:	61 15       	cp	r22, r1
    3842:	71 05       	cpc	r23, r1
    3844:	81 05       	cpc	r24, r1
    3846:	91 05       	cpc	r25, r1
    3848:	19 f4       	brne	.+6      	; 0x3850 <_ZN15Adafruit_CC300011connectOpenEPKc+0x9a>
    384a:	21 e0       	ldi	r18, 0x01	; 1
    384c:	01 c0       	rjmp	.+2      	; 0x3850 <_ZN15Adafruit_CC300011connectOpenEPKc+0x9a>
    384e:	20 e0       	ldi	r18, 0x00	; 0
  #else
    wlan_connect(ssid, strlen(ssid));
  #endif

  return true;
}
    3850:	82 2f       	mov	r24, r18
    3852:	1f 91       	pop	r17
    3854:	0f 91       	pop	r16
    3856:	ff 90       	pop	r15
    3858:	ef 90       	pop	r14
    385a:	df 90       	pop	r13
    385c:	cf 90       	pop	r12
    385e:	bf 90       	pop	r11
    3860:	af 90       	pop	r10
    3862:	9f 90       	pop	r9
    3864:	8f 90       	pop	r8
    3866:	08 95       	ret

00003868 <_ZN15Adafruit_CC300014printIPdotsRevEm>:
/*!
    @brief  Helper function to display an IP address with dots, printing
            the bytes in reverse order
*/
/**************************************************************************/
void Adafruit_CC3000::printIPdotsRev(uint32_t ip) {
    3868:	ef 92       	push	r14
    386a:	ff 92       	push	r15
    386c:	0f 93       	push	r16
    386e:	1f 93       	push	r17
    3870:	7a 01       	movw	r14, r20
    3872:	8b 01       	movw	r16, r22
  if (CC3KPrinter == 0) return;
    3874:	80 91 46 02 	lds	r24, 0x0246
    3878:	90 91 47 02 	lds	r25, 0x0247
    387c:	00 97       	sbiw	r24, 0x00	; 0
    387e:	09 f4       	brne	.+2      	; 0x3882 <_ZN15Adafruit_CC300014printIPdotsRevEm+0x1a>
    3880:	40 c0       	rjmp	.+128    	; 0x3902 <_ZN15Adafruit_CC300014printIPdotsRevEm+0x9a>
  CC3KPrinter->print((uint8_t)(ip >> 24));
    3882:	27 2f       	mov	r18, r23
    3884:	33 27       	eor	r19, r19
    3886:	44 27       	eor	r20, r20
    3888:	55 27       	eor	r21, r21
    388a:	62 2f       	mov	r22, r18
    388c:	4a e0       	ldi	r20, 0x0A	; 10
    388e:	50 e0       	ldi	r21, 0x00	; 0
    3890:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <_ZN5Print5printEhi>
  CC3KPrinter->print('.');
    3894:	80 91 46 02 	lds	r24, 0x0246
    3898:	90 91 47 02 	lds	r25, 0x0247
    389c:	6e e2       	ldi	r22, 0x2E	; 46
    389e:	0e 94 a7 2c 	call	0x594e	; 0x594e <_ZN5Print5printEc>
  CC3KPrinter->print((uint8_t)(ip >> 16));
    38a2:	98 01       	movw	r18, r16
    38a4:	44 27       	eor	r20, r20
    38a6:	55 27       	eor	r21, r21
    38a8:	80 91 46 02 	lds	r24, 0x0246
    38ac:	90 91 47 02 	lds	r25, 0x0247
    38b0:	62 2f       	mov	r22, r18
    38b2:	4a e0       	ldi	r20, 0x0A	; 10
    38b4:	50 e0       	ldi	r21, 0x00	; 0
    38b6:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <_ZN5Print5printEhi>
  CC3KPrinter->print('.');
    38ba:	80 91 46 02 	lds	r24, 0x0246
    38be:	90 91 47 02 	lds	r25, 0x0247
    38c2:	6e e2       	ldi	r22, 0x2E	; 46
    38c4:	0e 94 a7 2c 	call	0x594e	; 0x594e <_ZN5Print5printEc>
  CC3KPrinter->print((uint8_t)(ip >> 8));
    38c8:	55 27       	eor	r21, r21
    38ca:	41 2f       	mov	r20, r17
    38cc:	30 2f       	mov	r19, r16
    38ce:	2f 2d       	mov	r18, r15
    38d0:	80 91 46 02 	lds	r24, 0x0246
    38d4:	90 91 47 02 	lds	r25, 0x0247
    38d8:	62 2f       	mov	r22, r18
    38da:	4a e0       	ldi	r20, 0x0A	; 10
    38dc:	50 e0       	ldi	r21, 0x00	; 0
    38de:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <_ZN5Print5printEhi>
  CC3KPrinter->print('.');
    38e2:	80 91 46 02 	lds	r24, 0x0246
    38e6:	90 91 47 02 	lds	r25, 0x0247
    38ea:	6e e2       	ldi	r22, 0x2E	; 46
    38ec:	0e 94 a7 2c 	call	0x594e	; 0x594e <_ZN5Print5printEc>
  CC3KPrinter->print((uint8_t)(ip));  
    38f0:	80 91 46 02 	lds	r24, 0x0246
    38f4:	90 91 47 02 	lds	r25, 0x0247
    38f8:	6e 2d       	mov	r22, r14
    38fa:	4a e0       	ldi	r20, 0x0A	; 10
    38fc:	50 e0       	ldi	r21, 0x00	; 0
    38fe:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <_ZN5Print5printEhi>
}
    3902:	1f 91       	pop	r17
    3904:	0f 91       	pop	r16
    3906:	ff 90       	pop	r15
    3908:	ef 90       	pop	r14
    390a:	08 95       	ret

0000390c <_ZN15Adafruit_CC30005beginEhbPKc>:
              that were stored on the device from the SmartConfig process,
              otherwise false to erase existing profiles and start a
              clean connection
*/
/**************************************************************************/
bool Adafruit_CC3000::begin(uint8_t patchReq, bool useSmartConfigData, const char *_deviceName)
    390c:	6f 92       	push	r6
    390e:	7f 92       	push	r7
    3910:	8f 92       	push	r8
    3912:	9f 92       	push	r9
    3914:	af 92       	push	r10
    3916:	bf 92       	push	r11
    3918:	cf 92       	push	r12
    391a:	df 92       	push	r13
    391c:	ef 92       	push	r14
    391e:	ff 92       	push	r15
    3920:	0f 93       	push	r16
    3922:	1f 93       	push	r17
    3924:	cf 93       	push	r28
    3926:	df 93       	push	r29
    3928:	ec 01       	movw	r28, r24
    392a:	96 2e       	mov	r9, r22
    392c:	84 2e       	mov	r8, r20
    392e:	72 2e       	mov	r7, r18
    3930:	63 2e       	mov	r6, r19
{
  if (_initialised) return true;
    3932:	88 81       	ld	r24, Y
    3934:	88 23       	and	r24, r24
    3936:	09 f0       	breq	.+2      	; 0x393a <_ZN15Adafruit_CC30005beginEhbPKc+0x2e>
    3938:	8e c0       	rjmp	.+284    	; 0x3a56 <_ZN15Adafruit_CC30005beginEhbPKc+0x14a>
  // digitalPinToInterrupt macro is supported on Arduino 1.0.6+ and 1.5.6+
  // returns NOT_AN_INTERRUPT (-1 = 0xFF) if g_irqPin is not mapped to an INT
  #ifndef NOT_AN_INTERRUPT
    #define NOT_AN_INTERRUPT (-1)
  #endif
  g_IRQnum = digitalPinToInterrupt(g_irqPin);
    393a:	80 91 0c 02 	lds	r24, 0x020C
    393e:	82 30       	cpi	r24, 0x02	; 2
    3940:	11 f4       	brne	.+4      	; 0x3946 <_ZN15Adafruit_CC30005beginEhbPKc+0x3a>
    3942:	80 e0       	ldi	r24, 0x00	; 0
    3944:	05 c0       	rjmp	.+10     	; 0x3950 <_ZN15Adafruit_CC30005beginEhbPKc+0x44>
    3946:	83 30       	cpi	r24, 0x03	; 3
    3948:	11 f0       	breq	.+4      	; 0x394e <_ZN15Adafruit_CC30005beginEhbPKc+0x42>
    394a:	8f ef       	ldi	r24, 0xFF	; 255
    394c:	01 c0       	rjmp	.+2      	; 0x3950 <_ZN15Adafruit_CC30005beginEhbPKc+0x44>
    394e:	81 e0       	ldi	r24, 0x01	; 1
    3950:	80 93 0e 02 	sts	0x020E, r24
  #else
  g_IRQnum = g_irqPin;
  // (almost) every single pin on Xmega supports interrupt
  #endif

  init_spi();
    3954:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <_Z8init_spiv>
  wlan_init(CC3000_UsynchCallback,
            sendWLFWPatch, sendDriverPatch, sendBootLoaderPatch,
            ReadWlanInterruptPin,
            WlanInterruptEnable,
            WlanInterruptDisable,
            WriteWlanPin);
    3958:	81 e6       	ldi	r24, 0x61	; 97
    395a:	9a e1       	ldi	r25, 0x1A	; 26
    395c:	61 e1       	ldi	r22, 0x11	; 17
    395e:	72 e2       	ldi	r23, 0x22	; 34
    3960:	41 e0       	ldi	r20, 0x01	; 1
    3962:	52 e2       	ldi	r21, 0x22	; 34
    3964:	29 e0       	ldi	r18, 0x09	; 9
    3966:	32 e2       	ldi	r19, 0x22	; 34
    3968:	09 e1       	ldi	r16, 0x19	; 25
    396a:	12 e2       	ldi	r17, 0x22	; 34
    396c:	b7 e7       	ldi	r27, 0x77	; 119
    396e:	eb 2e       	mov	r14, r27
    3970:	b2 e2       	ldi	r27, 0x22	; 34
    3972:	fb 2e       	mov	r15, r27
    3974:	a1 e3       	ldi	r26, 0x31	; 49
    3976:	ca 2e       	mov	r12, r26
    3978:	a2 e2       	ldi	r26, 0x22	; 34
    397a:	da 2e       	mov	r13, r26
    397c:	f5 e2       	ldi	r31, 0x25	; 37
    397e:	af 2e       	mov	r10, r31
    3980:	f2 e2       	ldi	r31, 0x22	; 34
    3982:	bf 2e       	mov	r11, r31
    3984:	0e 94 54 12 	call	0x24a8	; 0x24a8 <wlan_init>
  DEBUGPRINT_F("start\n\r");

  wlan_start(patchReq);
    3988:	89 2d       	mov	r24, r9
    398a:	90 e0       	ldi	r25, 0x00	; 0
    398c:	0e 94 e5 14 	call	0x29ca	; 0x29ca <wlan_start>
  
  DEBUGPRINT_F("ioctl\n\r");
  // Check if we should erase previous stored connection details
  // (most likely written with data from the SmartConfig app)
  if (!useSmartConfigData)
    3990:	88 20       	and	r8, r8
    3992:	a1 f4       	brne	.+40     	; 0x39bc <_ZN15Adafruit_CC30005beginEhbPKc+0xb0>
  {
    // Manual connection only (no auto, profiles, etc.)
    wlan_ioctl_set_connection_policy(0, 0, 0);
    3994:	60 e0       	ldi	r22, 0x00	; 0
    3996:	70 e0       	ldi	r23, 0x00	; 0
    3998:	80 e0       	ldi	r24, 0x00	; 0
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	20 e0       	ldi	r18, 0x00	; 0
    399e:	30 e0       	ldi	r19, 0x00	; 0
    39a0:	40 e0       	ldi	r20, 0x00	; 0
    39a2:	50 e0       	ldi	r21, 0x00	; 0
    39a4:	ee 24       	eor	r14, r14
    39a6:	ff 24       	eor	r15, r15
    39a8:	87 01       	movw	r16, r14
    39aa:	0e 94 a4 13 	call	0x2748	; 0x2748 <wlan_ioctl_set_connection_policy>
    // Delete previous profiles from memory
    wlan_ioctl_del_profile(255);
    39ae:	6f ef       	ldi	r22, 0xFF	; 255
    39b0:	70 e0       	ldi	r23, 0x00	; 0
    39b2:	80 e0       	ldi	r24, 0x00	; 0
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	0e 94 70 13 	call	0x26e0	; 0x26e0 <wlan_ioctl_del_profile>
    39ba:	0f c0       	rjmp	.+30     	; 0x39da <_ZN15Adafruit_CC30005beginEhbPKc+0xce>
    
    // Fast Connect - the CC3000 device tries to reconnect to the last AP connected to:
    // wlan_ioctl_set_connection_policy(0, 1, 0)

    // Use Profiles - the CC3000 device tries to connect to an AP from profiles:
    wlan_ioctl_set_connection_policy(0, 0, 1);
    39bc:	60 e0       	ldi	r22, 0x00	; 0
    39be:	70 e0       	ldi	r23, 0x00	; 0
    39c0:	80 e0       	ldi	r24, 0x00	; 0
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	20 e0       	ldi	r18, 0x00	; 0
    39c6:	30 e0       	ldi	r19, 0x00	; 0
    39c8:	40 e0       	ldi	r20, 0x00	; 0
    39ca:	50 e0       	ldi	r21, 0x00	; 0
    39cc:	e1 e0       	ldi	r30, 0x01	; 1
    39ce:	ee 2e       	mov	r14, r30
    39d0:	f1 2c       	mov	r15, r1
    39d2:	01 2d       	mov	r16, r1
    39d4:	11 2d       	mov	r17, r1
    39d6:	0e 94 a4 13 	call	0x2748	; 0x2748 <wlan_ioctl_set_connection_policy>
  }

  CHECK_SUCCESS(
    39da:	64 e0       	ldi	r22, 0x04	; 4
    39dc:	72 e8       	ldi	r23, 0x82	; 130
    39de:	80 e0       	ldi	r24, 0x00	; 0
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	0e 94 88 12 	call	0x2510	; 0x2510 <wlan_set_event_mask>
    39e6:	61 15       	cp	r22, r1
    39e8:	71 05       	cpc	r23, r1
    39ea:	81 05       	cpc	r24, r1
    39ec:	91 05       	cpc	r25, r1
    39ee:	a9 f5       	brne	.+106    	; 0x3a5a <_ZN15Adafruit_CC30005beginEhbPKc+0x14e>
                        //HCI_EVNT_BSD_TCP_CLOSE_WAIT |
                        //HCI_EVNT_WLAN_TX_COMPLETE |
                        HCI_EVNT_WLAN_KEEPALIVE),
                        "WLAN Set Event Mask FAIL", false);

  _initialised = true;
    39f0:	81 e0       	ldi	r24, 0x01	; 1
    39f2:	88 83       	st	Y, r24

  // Wait for re-connection if we're using SmartConfig data
  if (useSmartConfigData)
    39f4:	88 20       	and	r8, r8
    39f6:	79 f1       	breq	.+94     	; 0x3a56 <_ZN15Adafruit_CC30005beginEhbPKc+0x14a>
    39f8:	00 e0       	ldi	r16, 0x00	; 0
    39fa:	10 e0       	ldi	r17, 0x00	; 0
    39fc:	0e c0       	rjmp	.+28     	; 0x3a1a <_ZN15Adafruit_CC30005beginEhbPKc+0x10e>
  {
    // Wait for a connection
    uint32_t timeout = 0;
    while(!cc3000Bitset.test(CC3000BitSet::IsConnected))
    {
      cc3k_int_poll();
    39fe:	0e 94 b9 23 	call	0x4772	; 0x4772 <cc3k_int_poll>
    3a02:	0f 5f       	subi	r16, 0xFF	; 255
    3a04:	1f 4f       	sbci	r17, 0xFF	; 255
      if(timeout > WLAN_CONNECT_TIMEOUT)
    3a06:	83 e0       	ldi	r24, 0x03	; 3
    3a08:	0a 3e       	cpi	r16, 0xEA	; 234
    3a0a:	18 07       	cpc	r17, r24
    3a0c:	31 f1       	breq	.+76     	; 0x3a5a <_ZN15Adafruit_CC30005beginEhbPKc+0x14e>
          CC3KPrinter->println(F("Timed out using SmartConfig data"));
        }
        return false;
      }
      timeout += 10;
      delay(10);
    3a0e:	6a e0       	ldi	r22, 0x0A	; 10
    3a10:	70 e0       	ldi	r23, 0x00	; 0
    3a12:	80 e0       	ldi	r24, 0x00	; 0
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	0e 94 81 30 	call	0x6102	; 0x6102 <delay>
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    3a1a:	80 91 45 02 	lds	r24, 0x0245
  // Wait for re-connection if we're using SmartConfig data
  if (useSmartConfigData)
  {
    // Wait for a connection
    uint32_t timeout = 0;
    while(!cc3000Bitset.test(CC3000BitSet::IsConnected))
    3a1e:	81 ff       	sbrs	r24, 1
    3a20:	ee cf       	rjmp	.-36     	; 0x39fe <_ZN15Adafruit_CC30005beginEhbPKc+0xf2>
      }
      timeout += 10;
      delay(10);
    }
    
    delay(1000);  
    3a22:	68 ee       	ldi	r22, 0xE8	; 232
    3a24:	73 e0       	ldi	r23, 0x03	; 3
    3a26:	80 e0       	ldi	r24, 0x00	; 0
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	0e 94 81 30 	call	0x6102	; 0x6102 <delay>
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    3a2e:	80 91 45 02 	lds	r24, 0x0245
      timeout += 10;
      delay(10);
    }
    
    delay(1000);  
    if (cc3000Bitset.test(CC3000BitSet::HasDHCP))
    3a32:	82 ff       	sbrs	r24, 2
    3a34:	10 c0       	rjmp	.+32     	; 0x3a56 <_ZN15Adafruit_CC30005beginEhbPKc+0x14a>
    {
      mdnsAdvertiser(1, (char *) _deviceName, strlen(_deviceName));
    3a36:	e7 2d       	mov	r30, r7
    3a38:	f6 2d       	mov	r31, r6
    3a3a:	df 01       	movw	r26, r30
    3a3c:	0d 90       	ld	r0, X+
    3a3e:	00 20       	and	r0, r0
    3a40:	e9 f7       	brne	.-6      	; 0x3a3c <_ZN15Adafruit_CC30005beginEhbPKc+0x130>
    3a42:	11 97       	sbiw	r26, 0x01	; 1
    3a44:	ae 1b       	sub	r26, r30
    3a46:	bf 0b       	sbc	r27, r31
    3a48:	81 e0       	ldi	r24, 0x01	; 1
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	67 2d       	mov	r22, r7
    3a4e:	76 2d       	mov	r23, r6
    3a50:	ad 01       	movw	r20, r26
    3a52:	0e 94 6d 0b 	call	0x16da	; 0x16da <mdnsAdvertiser>
    3a56:	81 e0       	ldi	r24, 0x01	; 1
    3a58:	01 c0       	rjmp	.+2      	; 0x3a5c <_ZN15Adafruit_CC30005beginEhbPKc+0x150>
    3a5a:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
    
  return true;
}
    3a5c:	df 91       	pop	r29
    3a5e:	cf 91       	pop	r28
    3a60:	1f 91       	pop	r17
    3a62:	0f 91       	pop	r16
    3a64:	ff 90       	pop	r15
    3a66:	ef 90       	pop	r14
    3a68:	df 90       	pop	r13
    3a6a:	cf 90       	pop	r12
    3a6c:	bf 90       	pop	r11
    3a6e:	af 90       	pop	r10
    3a70:	9f 90       	pop	r9
    3a72:	8f 90       	pop	r8
    3a74:	7f 90       	pop	r7
    3a76:	6f 90       	pop	r6
    3a78:	08 95       	ret

00003a7a <_ZN15Adafruit_CC30009scanSSIDsEm>:

    @returns  False if an error occured!
*/
/**************************************************************************/
#ifndef CC3000_TINY_DRIVER
bool Adafruit_CC3000::scanSSIDs(uint32_t time)
    3a7a:	af 92       	push	r10
    3a7c:	bf 92       	push	r11
    3a7e:	cf 92       	push	r12
    3a80:	df 92       	push	r13
    3a82:	ef 92       	push	r14
    3a84:	ff 92       	push	r15
    3a86:	0f 93       	push	r16
    3a88:	1f 93       	push	r17
    3a8a:	df 93       	push	r29
    3a8c:	cf 93       	push	r28
    3a8e:	cd b7       	in	r28, 0x3d	; 61
    3a90:	de b7       	in	r29, 0x3e	; 62
    3a92:	c0 54       	subi	r28, 0x40	; 64
    3a94:	d0 40       	sbci	r29, 0x00	; 0
    3a96:	0f b6       	in	r0, 0x3f	; 63
    3a98:	f8 94       	cli
    3a9a:	de bf       	out	0x3e, r29	; 62
    3a9c:	0f be       	out	0x3f, r0	; 63
    3a9e:	cd bf       	out	0x3d, r28	; 61
    3aa0:	9c 01       	movw	r18, r24
{
  const unsigned long intervalTime[16] = { 2000, 2000, 2000, 2000,  2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000 };
    3aa2:	de 01       	movw	r26, r28
    3aa4:	11 96       	adiw	r26, 0x01	; 1
    3aa6:	e0 e6       	ldi	r30, 0x60	; 96
    3aa8:	f1 e0       	ldi	r31, 0x01	; 1
    3aaa:	80 e4       	ldi	r24, 0x40	; 64
    3aac:	01 90       	ld	r0, Z+
    3aae:	0d 92       	st	X+, r0
    3ab0:	81 50       	subi	r24, 0x01	; 1
    3ab2:	e1 f7       	brne	.-8      	; 0x3aac <_ZN15Adafruit_CC30009scanSSIDsEm+0x32>

  if (!_initialised)
    3ab4:	d9 01       	movw	r26, r18
    3ab6:	8c 91       	ld	r24, X
    3ab8:	88 23       	and	r24, r24
    3aba:	11 f4       	brne	.+4      	; 0x3ac0 <_ZN15Adafruit_CC30009scanSSIDsEm+0x46>
    3abc:	20 e0       	ldi	r18, 0x00	; 0
    3abe:	4e c0       	rjmp	.+156    	; 0x3b5c <_ZN15Adafruit_CC30009scanSSIDsEm+0xe2>
      CC3KPrinter->println(F("Started AP/SSID scan\n\r"));
    }
  }

  // Set  SSID Scan params to includes channels above 11 
  CHECK_SUCCESS(
    3ac0:	ed b7       	in	r30, 0x3d	; 61
    3ac2:	fe b7       	in	r31, 0x3e	; 62
    3ac4:	72 97       	sbiw	r30, 0x12	; 18
    3ac6:	0f b6       	in	r0, 0x3f	; 63
    3ac8:	f8 94       	cli
    3aca:	fe bf       	out	0x3e, r31	; 62
    3acc:	0f be       	out	0x3f, r0	; 63
    3ace:	ed bf       	out	0x3d, r30	; 61
    3ad0:	31 96       	adiw	r30, 0x01	; 1
    3ad2:	0f ef       	ldi	r16, 0xFF	; 255
    3ad4:	1f e1       	ldi	r17, 0x1F	; 31
    3ad6:	20 e0       	ldi	r18, 0x00	; 0
    3ad8:	30 e0       	ldi	r19, 0x00	; 0
    3ada:	ad b7       	in	r26, 0x3d	; 61
    3adc:	be b7       	in	r27, 0x3e	; 62
    3ade:	11 96       	adiw	r26, 0x01	; 1
    3ae0:	0d 93       	st	X+, r16
    3ae2:	1d 93       	st	X+, r17
    3ae4:	2d 93       	st	X+, r18
    3ae6:	3c 93       	st	X, r19
    3ae8:	14 97       	sbiw	r26, 0x04	; 4
    3aea:	88 e8       	ldi	r24, 0x88	; 136
    3aec:	9f ef       	ldi	r25, 0xFF	; 255
    3aee:	af ef       	ldi	r26, 0xFF	; 255
    3af0:	bf ef       	ldi	r27, 0xFF	; 255
    3af2:	84 83       	std	Z+4, r24	; 0x04
    3af4:	95 83       	std	Z+5, r25	; 0x05
    3af6:	a6 83       	std	Z+6, r26	; 0x06
    3af8:	b7 83       	std	Z+7, r27	; 0x07
    3afa:	10 86       	std	Z+8, r1	; 0x08
    3afc:	11 86       	std	Z+9, r1	; 0x09
    3afe:	12 86       	std	Z+10, r1	; 0x0a
    3b00:	13 86       	std	Z+11, r1	; 0x0b
    3b02:	8c e2       	ldi	r24, 0x2C	; 44
    3b04:	91 e0       	ldi	r25, 0x01	; 1
    3b06:	a0 e0       	ldi	r26, 0x00	; 0
    3b08:	b0 e0       	ldi	r27, 0x00	; 0
    3b0a:	84 87       	std	Z+12, r24	; 0x0c
    3b0c:	95 87       	std	Z+13, r25	; 0x0d
    3b0e:	a6 87       	std	Z+14, r26	; 0x0e
    3b10:	b7 87       	std	Z+15, r27	; 0x0f
    3b12:	ce 01       	movw	r24, r28
    3b14:	01 96       	adiw	r24, 0x01	; 1
    3b16:	91 8b       	std	Z+17, r25	; 0x11
    3b18:	80 8b       	std	Z+16, r24	; 0x10
    3b1a:	cb 01       	movw	r24, r22
    3b1c:	ba 01       	movw	r22, r20
    3b1e:	24 e1       	ldi	r18, 0x14	; 20
    3b20:	30 e0       	ldi	r19, 0x00	; 0
    3b22:	40 e0       	ldi	r20, 0x00	; 0
    3b24:	50 e0       	ldi	r21, 0x00	; 0
    3b26:	f4 e6       	ldi	r31, 0x64	; 100
    3b28:	ef 2e       	mov	r14, r31
    3b2a:	f1 2c       	mov	r15, r1
    3b2c:	01 2d       	mov	r16, r1
    3b2e:	11 2d       	mov	r17, r1
    3b30:	e5 e0       	ldi	r30, 0x05	; 5
    3b32:	ae 2e       	mov	r10, r30
    3b34:	b1 2c       	mov	r11, r1
    3b36:	c1 2c       	mov	r12, r1
    3b38:	d1 2c       	mov	r13, r1
    3b3a:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <wlan_ioctl_set_scan_params>
    3b3e:	20 e0       	ldi	r18, 0x00	; 0
    3b40:	ed b7       	in	r30, 0x3d	; 61
    3b42:	fe b7       	in	r31, 0x3e	; 62
    3b44:	72 96       	adiw	r30, 0x12	; 18
    3b46:	0f b6       	in	r0, 0x3f	; 63
    3b48:	f8 94       	cli
    3b4a:	fe bf       	out	0x3e, r31	; 62
    3b4c:	0f be       	out	0x3f, r0	; 63
    3b4e:	ed bf       	out	0x3d, r30	; 61
    3b50:	61 15       	cp	r22, r1
    3b52:	71 05       	cpc	r23, r1
    3b54:	81 05       	cpc	r24, r1
    3b56:	91 05       	cpc	r25, r1
    3b58:	09 f4       	brne	.+2      	; 0x3b5c <_ZN15Adafruit_CC30009scanSSIDsEm+0xe2>
    3b5a:	21 e0       	ldi	r18, 0x01	; 1
      wlan_ioctl_set_scan_params(time, 20, 100, 5, 0x1FFF, -120, 0, 300,
          (unsigned long * ) &intervalTime),
          "Failed setting params for SSID scan", false);

  return true;
}
    3b5c:	82 2f       	mov	r24, r18
    3b5e:	c0 5c       	subi	r28, 0xC0	; 192
    3b60:	df 4f       	sbci	r29, 0xFF	; 255
    3b62:	0f b6       	in	r0, 0x3f	; 63
    3b64:	f8 94       	cli
    3b66:	de bf       	out	0x3e, r29	; 62
    3b68:	0f be       	out	0x3f, r0	; 63
    3b6a:	cd bf       	out	0x3d, r28	; 61
    3b6c:	cf 91       	pop	r28
    3b6e:	df 91       	pop	r29
    3b70:	1f 91       	pop	r17
    3b72:	0f 91       	pop	r16
    3b74:	ff 90       	pop	r15
    3b76:	ef 90       	pop	r14
    3b78:	df 90       	pop	r13
    3b7a:	cf 90       	pop	r12
    3b7c:	bf 90       	pop	r11
    3b7e:	af 90       	pop	r10
    3b80:	08 95       	ret

00003b82 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh>:
  return true;
}
#endif

// Connect with timeout
bool Adafruit_CC3000::connectToAP(const char *ssid, const char *key, uint8_t secmode, uint8_t attempts) {
    3b82:	5f 92       	push	r5
    3b84:	6f 92       	push	r6
    3b86:	7f 92       	push	r7
    3b88:	8f 92       	push	r8
    3b8a:	9f 92       	push	r9
    3b8c:	af 92       	push	r10
    3b8e:	bf 92       	push	r11
    3b90:	cf 92       	push	r12
    3b92:	df 92       	push	r13
    3b94:	ef 92       	push	r14
    3b96:	ff 92       	push	r15
    3b98:	0f 93       	push	r16
    3b9a:	1f 93       	push	r17
    3b9c:	cf 93       	push	r28
    3b9e:	df 93       	push	r29
    3ba0:	ec 01       	movw	r28, r24
    3ba2:	3b 01       	movw	r6, r22
    3ba4:	4a 01       	movw	r8, r20
    3ba6:	52 2e       	mov	r5, r18
    3ba8:	a0 2e       	mov	r10, r16
  if (!_initialised) {
    3baa:	88 81       	ld	r24, Y
    3bac:	88 23       	and	r24, r24
    3bae:	09 f4       	brne	.+2      	; 0x3bb2 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0x30>
    3bb0:	52 c0       	rjmp	.+164    	; 0x3c56 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0xd4>
    3bb2:	b0 2e       	mov	r11, r16
      }
    } else {
      /* NOTE: Secure connections are not available in 'Tiny' mode! */
#ifndef CC3000_TINY_DRIVER
      /* Connect to a secure network using WPA2, etc */
      if (! connectSecure(ssid, key, secmode)) {
    3bb4:	c2 2e       	mov	r12, r18
    3bb6:	dd 24       	eor	r13, r13
    3bb8:	ee 24       	eor	r14, r14
    3bba:	ff 24       	eor	r15, r15
  // If attempts is zero interpret that as no limit on number of retries.
  bool retryForever = attempts == 0;

  do {
    // Stop if the max number of attempts have been tried.
    if (!retryForever) {
    3bbc:	aa 20       	and	r10, r10
    3bbe:	51 f0       	breq	.+20     	; 0x3bd4 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0x52>
      if (attempts == 0) {
    3bc0:	bb 20       	and	r11, r11
    3bc2:	39 f4       	brne	.+14     	; 0x3bd2 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0x50>
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    3bc4:	80 91 45 02 	lds	r24, 0x0245
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	96 95       	lsr	r25
    3bcc:	87 95       	ror	r24
    3bce:	81 70       	andi	r24, 0x01	; 1
    3bd0:	42 c0       	rjmp	.+132    	; 0x3c56 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0xd4>
    // Stop if the max number of attempts have been tried.
    if (!retryForever) {
      if (attempts == 0) {
        return checkConnected();
      }
      attempts -= 1;
    3bd2:	ba 94       	dec	r11
    }

    cc3k_int_poll();
    3bd4:	0e 94 b9 23 	call	0x4772	; 0x4772 <cc3k_int_poll>
    /* MEME: not sure why this is absolutely required but the cc3k freaks
       if you dont. maybe bootup delay? */
    // Setup a 4 second SSID scan
    scanSSIDs(4000);
    3bd8:	ce 01       	movw	r24, r28
    3bda:	40 ea       	ldi	r20, 0xA0	; 160
    3bdc:	5f e0       	ldi	r21, 0x0F	; 15
    3bde:	60 e0       	ldi	r22, 0x00	; 0
    3be0:	70 e0       	ldi	r23, 0x00	; 0
    3be2:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <_ZN15Adafruit_CC30009scanSSIDsEm>
    // Wait for results
    delay(4500);
    3be6:	64 e9       	ldi	r22, 0x94	; 148
    3be8:	71 e1       	ldi	r23, 0x11	; 17
    3bea:	80 e0       	ldi	r24, 0x00	; 0
    3bec:	90 e0       	ldi	r25, 0x00	; 0
    3bee:	0e 94 81 30 	call	0x6102	; 0x6102 <delay>
    scanSSIDs(0);
    3bf2:	ce 01       	movw	r24, r28
    3bf4:	40 e0       	ldi	r20, 0x00	; 0
    3bf6:	50 e0       	ldi	r21, 0x00	; 0
    3bf8:	60 e0       	ldi	r22, 0x00	; 0
    3bfa:	70 e0       	ldi	r23, 0x00	; 0
    3bfc:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <_ZN15Adafruit_CC30009scanSSIDsEm>
    CHECK_PRINTER {
      CC3KPrinter->print(F("\n\rConnecting to ")); 
      CC3KPrinter->print(ssid);
      CC3KPrinter->print(F("..."));
    }
    if ((secmode == 0) || (strlen(key) == 0)) {
    3c00:	55 20       	and	r5, r5
    3c02:	21 f0       	breq	.+8      	; 0x3c0c <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0x8a>
    3c04:	f4 01       	movw	r30, r8
    3c06:	80 81       	ld	r24, Z
    3c08:	88 23       	and	r24, r24
    3c0a:	49 f4       	brne	.+18     	; 0x3c1e <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0x9c>
      /* Connect to an unsecured network */
      if (! connectOpen(ssid)) {
    3c0c:	ce 01       	movw	r24, r28
    3c0e:	b3 01       	movw	r22, r6
    3c10:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <_ZN15Adafruit_CC300011connectOpenEPKc>
    3c14:	88 23       	and	r24, r24
    3c16:	d1 f0       	breq	.+52     	; 0x3c4c <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0xca>
        CHECK_PRINTER {
          CC3KPrinter->println(F("Failed!"));
        }
        continue;
    3c18:	00 e1       	ldi	r16, 0x10	; 16
    3c1a:	17 e2       	ldi	r17, 0x27	; 39
    3c1c:	08 c0       	rjmp	.+16     	; 0x3c2e <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0xac>
      }
    } else {
      /* NOTE: Secure connections are not available in 'Tiny' mode! */
#ifndef CC3000_TINY_DRIVER
      /* Connect to a secure network using WPA2, etc */
      if (! connectSecure(ssid, key, secmode)) {
    3c1e:	ce 01       	movw	r24, r28
    3c20:	b3 01       	movw	r22, r6
    3c22:	a4 01       	movw	r20, r8
    3c24:	97 01       	movw	r18, r14
    3c26:	86 01       	movw	r16, r12
    3c28:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l>
    3c2c:	f3 cf       	rjmp	.-26     	; 0x3c14 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0x92>
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    3c2e:	80 91 45 02 	lds	r24, 0x0245

    /* Wait around a bit for the async connected signal to arrive or timeout */
    CHECK_PRINTER {
      CC3KPrinter->print(F("Waiting to connect..."));
    }
    while ((timer > 0) && !checkConnected())
    3c32:	81 fd       	sbrc	r24, 1
    3c34:	0b c0       	rjmp	.+22     	; 0x3c4c <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0xca>
    {
      cc3k_int_poll();
    3c36:	0e 94 b9 23 	call	0x4772	; 0x4772 <cc3k_int_poll>
      delay(10);
    3c3a:	6a e0       	ldi	r22, 0x0A	; 10
    3c3c:	70 e0       	ldi	r23, 0x00	; 0
    3c3e:	80 e0       	ldi	r24, 0x00	; 0
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	0e 94 81 30 	call	0x6102	; 0x6102 <delay>
      timer -= 10;
    3c46:	0a 50       	subi	r16, 0x0A	; 10
    3c48:	10 40       	sbci	r17, 0x00	; 0

    /* Wait around a bit for the async connected signal to arrive or timeout */
    CHECK_PRINTER {
      CC3KPrinter->print(F("Waiting to connect..."));
    }
    while ((timer > 0) && !checkConnected())
    3c4a:	89 f7       	brne	.-30     	; 0x3c2e <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0xac>
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    3c4c:	80 91 45 02 	lds	r24, 0x0245
  int16_t timer;

  // If attempts is zero interpret that as no limit on number of retries.
  bool retryForever = attempts == 0;

  do {
    3c50:	81 ff       	sbrs	r24, 1
    3c52:	b4 cf       	rjmp	.-152    	; 0x3bbc <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0x3a>
    3c54:	81 e0       	ldi	r24, 0x01	; 1
      }
    }
  } while (!checkConnected());

  return true;
}
    3c56:	df 91       	pop	r29
    3c58:	cf 91       	pop	r28
    3c5a:	1f 91       	pop	r17
    3c5c:	0f 91       	pop	r16
    3c5e:	ff 90       	pop	r15
    3c60:	ef 90       	pop	r14
    3c62:	df 90       	pop	r13
    3c64:	cf 90       	pop	r12
    3c66:	bf 90       	pop	r11
    3c68:	af 90       	pop	r10
    3c6a:	9f 90       	pop	r9
    3c6c:	8f 90       	pop	r8
    3c6e:	7f 90       	pop	r7
    3c70:	6f 90       	pop	r6
    3c72:	5f 90       	pop	r5
    3c74:	08 95       	ret

00003c76 <_ZN25Adafruit_CC3000_ClientRefcvbEv>:
  : _client(client) 
{ }

// Return true if the referenced client is connected.  This is provided for
// compatibility with Ethernet library code.
Adafruit_CC3000_ClientRef::operator bool() {
    3c76:	fc 01       	movw	r30, r24
  return connected();
    3c78:	a0 81       	ld	r26, Z
    3c7a:	b1 81       	ldd	r27, Z+1	; 0x01
    3c7c:	54 96       	adiw	r26, 0x14	; 20
    3c7e:	2d 91       	ld	r18, X+
    3c80:	3c 91       	ld	r19, X
    3c82:	55 97       	sbiw	r26, 0x15	; 21
    3c84:	f9 01       	movw	r30, r18
    3c86:	09 95       	icall
    3c88:	81 11       	cpse	r24, r1
    3c8a:	81 e0       	ldi	r24, 0x01	; 1
}
    3c8c:	08 95       	ret

00003c8e <_ZN25Adafruit_CC3000_ClientRef7connectE9IPAddressj>:
// Below are wrappers around the public client functions.  These hide the fact that users
// are dealing with a reference to a client instance and allow code to be written using
// value semantics like in the Ethernet library.
int Adafruit_CC3000_ClientRef::connect(IPAddress ip, uint16_t port) {
    3c8e:	0f 93       	push	r16
    3c90:	1f 93       	push	r17
    3c92:	df 93       	push	r29
    3c94:	cf 93       	push	r28
    3c96:	00 d0       	rcall	.+0      	; 0x3c98 <_ZN25Adafruit_CC3000_ClientRef7connectE9IPAddressj+0xa>
    3c98:	00 d0       	rcall	.+0      	; 0x3c9a <_ZN25Adafruit_CC3000_ClientRef7connectE9IPAddressj+0xc>
    3c9a:	00 d0       	rcall	.+0      	; 0x3c9c <_ZN25Adafruit_CC3000_ClientRef7connectE9IPAddressj+0xe>
    3c9c:	cd b7       	in	r28, 0x3d	; 61
    3c9e:	de b7       	in	r29, 0x3e	; 62
    3ca0:	db 01       	movw	r26, r22
  HANDLE_NULL(_client, false);
    3ca2:	fc 01       	movw	r30, r24
    3ca4:	24 85       	ldd	r18, Z+12	; 0x0c
    3ca6:	35 85       	ldd	r19, Z+13	; 0x0d
    3ca8:	21 15       	cp	r18, r1
    3caa:	31 05       	cpc	r19, r1
    3cac:	19 f4       	brne	.+6      	; 0x3cb4 <_ZN25Adafruit_CC3000_ClientRef7connectE9IPAddressj+0x26>
    3cae:	20 e0       	ldi	r18, 0x00	; 0
    3cb0:	30 e0       	ldi	r19, 0x00	; 0
    3cb2:	1b c0       	rjmp	.+54     	; 0x3cea <_ZN25Adafruit_CC3000_ClientRef7connectE9IPAddressj+0x5c>
  return _client->connect(ip, port);
    3cb4:	f9 01       	movw	r30, r18
    3cb6:	80 81       	ld	r24, Z
    3cb8:	91 81       	ldd	r25, Z+1	; 0x01
    3cba:	fc 01       	movw	r30, r24
    3cbc:	04 85       	ldd	r16, Z+12	; 0x0c
    3cbe:	15 85       	ldd	r17, Z+13	; 0x0d

#include <Printable.h>

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    3cc0:	8a ed       	ldi	r24, 0xDA	; 218
    3cc2:	91 e0       	ldi	r25, 0x01	; 1
    3cc4:	9a 83       	std	Y+2, r25	; 0x02
    3cc6:	89 83       	std	Y+1, r24	; 0x01
    3cc8:	12 96       	adiw	r26, 0x02	; 2
    3cca:	8d 91       	ld	r24, X+
    3ccc:	9d 91       	ld	r25, X+
    3cce:	0d 90       	ld	r0, X+
    3cd0:	bc 91       	ld	r27, X
    3cd2:	a0 2d       	mov	r26, r0
    3cd4:	8b 83       	std	Y+3, r24	; 0x03
    3cd6:	9c 83       	std	Y+4, r25	; 0x04
    3cd8:	ad 83       	std	Y+5, r26	; 0x05
    3cda:	be 83       	std	Y+6, r27	; 0x06
    3cdc:	c9 01       	movw	r24, r18
    3cde:	be 01       	movw	r22, r28
    3ce0:	6f 5f       	subi	r22, 0xFF	; 255
    3ce2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ce4:	f8 01       	movw	r30, r16
    3ce6:	09 95       	icall
    3ce8:	9c 01       	movw	r18, r24
}
    3cea:	c9 01       	movw	r24, r18
    3cec:	26 96       	adiw	r28, 0x06	; 6
    3cee:	0f b6       	in	r0, 0x3f	; 63
    3cf0:	f8 94       	cli
    3cf2:	de bf       	out	0x3e, r29	; 62
    3cf4:	0f be       	out	0x3f, r0	; 63
    3cf6:	cd bf       	out	0x3d, r28	; 61
    3cf8:	cf 91       	pop	r28
    3cfa:	df 91       	pop	r29
    3cfc:	1f 91       	pop	r17
    3cfe:	0f 91       	pop	r16
    3d00:	08 95       	ret

00003d02 <_ZN25Adafruit_CC3000_ClientRef7connectEPKcj>:

int Adafruit_CC3000_ClientRef::connect(const char *host, uint16_t port) {
  HANDLE_NULL(_client, false);
    3d02:	fc 01       	movw	r30, r24
    3d04:	a4 85       	ldd	r26, Z+12	; 0x0c
    3d06:	b5 85       	ldd	r27, Z+13	; 0x0d
    3d08:	10 97       	sbiw	r26, 0x00	; 0
    3d0a:	19 f4       	brne	.+6      	; 0x3d12 <_ZN25Adafruit_CC3000_ClientRef7connectEPKcj+0x10>
    3d0c:	20 e0       	ldi	r18, 0x00	; 0
    3d0e:	30 e0       	ldi	r19, 0x00	; 0
    3d10:	09 c0       	rjmp	.+18     	; 0x3d24 <_ZN25Adafruit_CC3000_ClientRef7connectEPKcj+0x22>
  return _client->connect(host, port);
    3d12:	ed 91       	ld	r30, X+
    3d14:	fc 91       	ld	r31, X
    3d16:	11 97       	sbiw	r26, 0x01	; 1
    3d18:	06 84       	ldd	r0, Z+14	; 0x0e
    3d1a:	f7 85       	ldd	r31, Z+15	; 0x0f
    3d1c:	e0 2d       	mov	r30, r0
    3d1e:	cd 01       	movw	r24, r26
    3d20:	09 95       	icall
    3d22:	9c 01       	movw	r18, r24
}
    3d24:	c9 01       	movw	r24, r18
    3d26:	08 95       	ret

00003d28 <_ZN25Adafruit_CC3000_ClientRef9connectedEv>:

uint8_t Adafruit_CC3000_ClientRef::connected(void) {
  HANDLE_NULL(_client, false);
    3d28:	fc 01       	movw	r30, r24
    3d2a:	a4 85       	ldd	r26, Z+12	; 0x0c
    3d2c:	b5 85       	ldd	r27, Z+13	; 0x0d
    3d2e:	10 97       	sbiw	r26, 0x00	; 0
    3d30:	11 f4       	brne	.+4      	; 0x3d36 <_ZN25Adafruit_CC3000_ClientRef9connectedEv+0xe>
    3d32:	80 e0       	ldi	r24, 0x00	; 0
    3d34:	08 95       	ret
  return _client->connected();
    3d36:	ed 91       	ld	r30, X+
    3d38:	fc 91       	ld	r31, X
    3d3a:	11 97       	sbiw	r26, 0x01	; 1
    3d3c:	04 88       	ldd	r0, Z+20	; 0x14
    3d3e:	f5 89       	ldd	r31, Z+21	; 0x15
    3d40:	e0 2d       	mov	r30, r0
    3d42:	cd 01       	movw	r24, r26
    3d44:	09 95       	icall
}
    3d46:	08 95       	ret

00003d48 <_ZN25Adafruit_CC3000_ClientRef5writeEh>:

size_t Adafruit_CC3000_ClientRef::write(uint8_t c) {
  HANDLE_NULL(_client, 0);
    3d48:	fc 01       	movw	r30, r24
    3d4a:	a4 85       	ldd	r26, Z+12	; 0x0c
    3d4c:	b5 85       	ldd	r27, Z+13	; 0x0d
    3d4e:	10 97       	sbiw	r26, 0x00	; 0
    3d50:	19 f4       	brne	.+6      	; 0x3d58 <_ZN25Adafruit_CC3000_ClientRef5writeEh+0x10>
    3d52:	20 e0       	ldi	r18, 0x00	; 0
    3d54:	30 e0       	ldi	r19, 0x00	; 0
    3d56:	09 c0       	rjmp	.+18     	; 0x3d6a <_ZN25Adafruit_CC3000_ClientRef5writeEh+0x22>
  return _client->write(c);
    3d58:	ed 91       	ld	r30, X+
    3d5a:	fc 91       	ld	r31, X
    3d5c:	11 97       	sbiw	r26, 0x01	; 1
    3d5e:	01 90       	ld	r0, Z+
    3d60:	f0 81       	ld	r31, Z
    3d62:	e0 2d       	mov	r30, r0
    3d64:	cd 01       	movw	r24, r26
    3d66:	09 95       	icall
    3d68:	9c 01       	movw	r18, r24
}
    3d6a:	c9 01       	movw	r24, r18
    3d6c:	08 95       	ret

00003d6e <_ZN25Adafruit_CC3000_ClientRef4readEv>:
  HANDLE_NULL(_client, 0);
  return _client->read(buf, len, flags);
}

int Adafruit_CC3000_ClientRef::read(void) {
  HANDLE_NULL(_client, 0);
    3d6e:	fc 01       	movw	r30, r24
    3d70:	a4 85       	ldd	r26, Z+12	; 0x0c
    3d72:	b5 85       	ldd	r27, Z+13	; 0x0d
    3d74:	10 97       	sbiw	r26, 0x00	; 0
    3d76:	19 f4       	brne	.+6      	; 0x3d7e <_ZN25Adafruit_CC3000_ClientRef4readEv+0x10>
    3d78:	20 e0       	ldi	r18, 0x00	; 0
    3d7a:	30 e0       	ldi	r19, 0x00	; 0
    3d7c:	09 c0       	rjmp	.+18     	; 0x3d90 <_ZN25Adafruit_CC3000_ClientRef4readEv+0x22>
  return _client->read();
    3d7e:	ed 91       	ld	r30, X+
    3d80:	fc 91       	ld	r31, X
    3d82:	11 97       	sbiw	r26, 0x01	; 1
    3d84:	06 80       	ldd	r0, Z+6	; 0x06
    3d86:	f7 81       	ldd	r31, Z+7	; 0x07
    3d88:	e0 2d       	mov	r30, r0
    3d8a:	cd 01       	movw	r24, r26
    3d8c:	09 95       	icall
    3d8e:	9c 01       	movw	r18, r24
}
    3d90:	c9 01       	movw	r24, r18
    3d92:	08 95       	ret

00003d94 <_ZN25Adafruit_CC3000_ClientRef9availableEv>:
  HANDLE_NULL(_client, 0);
  return _client->close();
}

int Adafruit_CC3000_ClientRef::available(void) {
  HANDLE_NULL(_client, 0);
    3d94:	fc 01       	movw	r30, r24
    3d96:	a4 85       	ldd	r26, Z+12	; 0x0c
    3d98:	b5 85       	ldd	r27, Z+13	; 0x0d
    3d9a:	10 97       	sbiw	r26, 0x00	; 0
    3d9c:	19 f4       	brne	.+6      	; 0x3da4 <_ZN25Adafruit_CC3000_ClientRef9availableEv+0x10>
    3d9e:	20 e0       	ldi	r18, 0x00	; 0
    3da0:	30 e0       	ldi	r19, 0x00	; 0
    3da2:	09 c0       	rjmp	.+18     	; 0x3db6 <_ZN25Adafruit_CC3000_ClientRef9availableEv+0x22>
  return _client->available();
    3da4:	ed 91       	ld	r30, X+
    3da6:	fc 91       	ld	r31, X
    3da8:	11 97       	sbiw	r26, 0x01	; 1
    3daa:	04 80       	ldd	r0, Z+4	; 0x04
    3dac:	f5 81       	ldd	r31, Z+5	; 0x05
    3dae:	e0 2d       	mov	r30, r0
    3db0:	cd 01       	movw	r24, r26
    3db2:	09 95       	icall
    3db4:	9c 01       	movw	r18, r24
}
    3db6:	c9 01       	movw	r24, r18
    3db8:	08 95       	ret

00003dba <_ZN25Adafruit_CC3000_ClientRef4readEPhj>:

int Adafruit_CC3000_ClientRef::read(uint8_t *buf, size_t size) {
  HANDLE_NULL(_client, 0);
    3dba:	fc 01       	movw	r30, r24
    3dbc:	a4 85       	ldd	r26, Z+12	; 0x0c
    3dbe:	b5 85       	ldd	r27, Z+13	; 0x0d
    3dc0:	10 97       	sbiw	r26, 0x00	; 0
    3dc2:	19 f4       	brne	.+6      	; 0x3dca <_ZN25Adafruit_CC3000_ClientRef4readEPhj+0x10>
    3dc4:	20 e0       	ldi	r18, 0x00	; 0
    3dc6:	30 e0       	ldi	r19, 0x00	; 0
    3dc8:	09 c0       	rjmp	.+18     	; 0x3ddc <_ZN25Adafruit_CC3000_ClientRef4readEPhj+0x22>
  return _client->read(buf, size);
    3dca:	ed 91       	ld	r30, X+
    3dcc:	fc 91       	ld	r31, X
    3dce:	11 97       	sbiw	r26, 0x01	; 1
    3dd0:	00 88       	ldd	r0, Z+16	; 0x10
    3dd2:	f1 89       	ldd	r31, Z+17	; 0x11
    3dd4:	e0 2d       	mov	r30, r0
    3dd6:	cd 01       	movw	r24, r26
    3dd8:	09 95       	icall
    3dda:	9c 01       	movw	r18, r24
}
    3ddc:	c9 01       	movw	r24, r18
    3dde:	08 95       	ret

00003de0 <_ZN25Adafruit_CC3000_ClientRef5writeEPKhj>:

size_t Adafruit_CC3000_ClientRef::write(const uint8_t *buf, size_t size) {
  HANDLE_NULL(_client, 0);
    3de0:	fc 01       	movw	r30, r24
    3de2:	a4 85       	ldd	r26, Z+12	; 0x0c
    3de4:	b5 85       	ldd	r27, Z+13	; 0x0d
    3de6:	10 97       	sbiw	r26, 0x00	; 0
    3de8:	19 f4       	brne	.+6      	; 0x3df0 <_ZN25Adafruit_CC3000_ClientRef5writeEPKhj+0x10>
    3dea:	20 e0       	ldi	r18, 0x00	; 0
    3dec:	30 e0       	ldi	r19, 0x00	; 0
    3dee:	09 c0       	rjmp	.+18     	; 0x3e02 <_ZN25Adafruit_CC3000_ClientRef5writeEPKhj+0x22>
  return _client->write(buf, size);
    3df0:	ed 91       	ld	r30, X+
    3df2:	fc 91       	ld	r31, X
    3df4:	11 97       	sbiw	r26, 0x01	; 1
    3df6:	02 80       	ldd	r0, Z+2	; 0x02
    3df8:	f3 81       	ldd	r31, Z+3	; 0x03
    3dfa:	e0 2d       	mov	r30, r0
    3dfc:	cd 01       	movw	r24, r26
    3dfe:	09 95       	icall
    3e00:	9c 01       	movw	r18, r24
}
    3e02:	c9 01       	movw	r24, r18
    3e04:	08 95       	ret

00003e06 <_ZN25Adafruit_CC3000_ClientRef4peekEv>:

int Adafruit_CC3000_ClientRef::peek() {
  HANDLE_NULL(_client, 0);
    3e06:	fc 01       	movw	r30, r24
    3e08:	a4 85       	ldd	r26, Z+12	; 0x0c
    3e0a:	b5 85       	ldd	r27, Z+13	; 0x0d
    3e0c:	10 97       	sbiw	r26, 0x00	; 0
    3e0e:	19 f4       	brne	.+6      	; 0x3e16 <_ZN25Adafruit_CC3000_ClientRef4peekEv+0x10>
    3e10:	20 e0       	ldi	r18, 0x00	; 0
    3e12:	30 e0       	ldi	r19, 0x00	; 0
    3e14:	09 c0       	rjmp	.+18     	; 0x3e28 <_ZN25Adafruit_CC3000_ClientRef4peekEv+0x22>
  return _client->peek();
    3e16:	ed 91       	ld	r30, X+
    3e18:	fc 91       	ld	r31, X
    3e1a:	11 97       	sbiw	r26, 0x01	; 1
    3e1c:	00 84       	ldd	r0, Z+8	; 0x08
    3e1e:	f1 85       	ldd	r31, Z+9	; 0x09
    3e20:	e0 2d       	mov	r30, r0
    3e22:	cd 01       	movw	r24, r26
    3e24:	09 95       	icall
    3e26:	9c 01       	movw	r18, r24
}
    3e28:	c9 01       	movw	r24, r18
    3e2a:	08 95       	ret

00003e2c <_ZN25Adafruit_CC3000_ClientRef5flushEv>:

void Adafruit_CC3000_ClientRef::flush() {
  if (_client != NULL) _client->flush();
    3e2c:	fc 01       	movw	r30, r24
    3e2e:	a4 85       	ldd	r26, Z+12	; 0x0c
    3e30:	b5 85       	ldd	r27, Z+13	; 0x0d
    3e32:	10 97       	sbiw	r26, 0x00	; 0
    3e34:	41 f0       	breq	.+16     	; 0x3e46 <_ZN25Adafruit_CC3000_ClientRef5flushEv+0x1a>
    3e36:	ed 91       	ld	r30, X+
    3e38:	fc 91       	ld	r31, X
    3e3a:	11 97       	sbiw	r26, 0x01	; 1
    3e3c:	02 84       	ldd	r0, Z+10	; 0x0a
    3e3e:	f3 85       	ldd	r31, Z+11	; 0x0b
    3e40:	e0 2d       	mov	r30, r0
    3e42:	cd 01       	movw	r24, r26
    3e44:	09 95       	icall
    3e46:	08 95       	ret

00003e48 <_ZN25Adafruit_CC3000_ClientRef4stopEv>:
}

void Adafruit_CC3000_ClientRef::stop() {
  if (_client != NULL) _client->stop();
    3e48:	fc 01       	movw	r30, r24
    3e4a:	a4 85       	ldd	r26, Z+12	; 0x0c
    3e4c:	b5 85       	ldd	r27, Z+13	; 0x0d
    3e4e:	10 97       	sbiw	r26, 0x00	; 0
    3e50:	41 f0       	breq	.+16     	; 0x3e62 <_ZN25Adafruit_CC3000_ClientRef4stopEv+0x1a>
    3e52:	ed 91       	ld	r30, X+
    3e54:	fc 91       	ld	r31, X
    3e56:	11 97       	sbiw	r26, 0x01	; 1
    3e58:	02 88       	ldd	r0, Z+18	; 0x12
    3e5a:	f3 89       	ldd	r31, Z+19	; 0x13
    3e5c:	e0 2d       	mov	r30, r0
    3e5e:	cd 01       	movw	r24, r26
    3e60:	09 95       	icall
    3e62:	08 95       	ret

00003e64 <_ZN22Adafruit_CC3000_Server12getClientRefEa>:

  return -1;
}

// Given the index of client, returns the instance of that client for reading/writing
Adafruit_CC3000_ClientRef Adafruit_CC3000_Server::getClientRef(int8_t clientIndex) {
    3e64:	cf 93       	push	r28
    3e66:	df 93       	push	r29
    3e68:	9c 01       	movw	r18, r24
    3e6a:	ce ea       	ldi	r28, 0xAE	; 174
    3e6c:	d1 e0       	ldi	r29, 0x01	; 1
  if (clientIndex != -1) {
    3e6e:	4f 3f       	cpi	r20, 0xFF	; 255
    3e70:	b9 f0       	breq	.+46     	; 0x3ea0 <_ZN22Adafruit_CC3000_Server12getClientRefEa+0x3c>
    return Adafruit_CC3000_ClientRef(&_clients[clientIndex]);
    3e72:	fc 01       	movw	r30, r24
    3e74:	13 82       	std	Z+3, r1	; 0x03
    3e76:	12 82       	std	Z+2, r1	; 0x02
    3e78:	88 ee       	ldi	r24, 0xE8	; 232
    3e7a:	93 e0       	ldi	r25, 0x03	; 3
    3e7c:	a0 e0       	ldi	r26, 0x00	; 0
    3e7e:	b0 e0       	ldi	r27, 0x00	; 0
    3e80:	84 83       	std	Z+4, r24	; 0x04
    3e82:	95 83       	std	Z+5, r25	; 0x05
    3e84:	a6 83       	std	Z+6, r26	; 0x06
    3e86:	b7 83       	std	Z+7, r27	; 0x07
  Adafruit_CC3000_ClientRef implementation
*/
/**************************************************************************/

Adafruit_CC3000_ClientRef::Adafruit_CC3000_ClientRef(Adafruit_CC3000_Client* client)
  : _client(client) 
    3e88:	d1 83       	std	Z+1, r29	; 0x01
    3e8a:	c0 83       	st	Z, r28
    3e8c:	83 e5       	ldi	r24, 0x53	; 83
    3e8e:	48 02       	muls	r20, r24
    3e90:	c0 01       	movw	r24, r0
    3e92:	11 24       	eor	r1, r1
    3e94:	04 96       	adiw	r24, 0x04	; 4
    3e96:	86 0f       	add	r24, r22
    3e98:	97 1f       	adc	r25, r23
    3e9a:	95 87       	std	Z+13, r25	; 0x0d
    3e9c:	84 87       	std	Z+12, r24	; 0x0c
    3e9e:	0f c0       	rjmp	.+30     	; 0x3ebe <_ZN22Adafruit_CC3000_Server12getClientRefEa+0x5a>
  }
  
  // Couldn't find a client ready to read, so return a client that is not 
  // connected to signal no clients are available for reading (convention
  // used by the Ethernet library).
  return Adafruit_CC3000_ClientRef(NULL);
    3ea0:	fc 01       	movw	r30, r24
    3ea2:	13 82       	std	Z+3, r1	; 0x03
    3ea4:	12 82       	std	Z+2, r1	; 0x02
    3ea6:	88 ee       	ldi	r24, 0xE8	; 232
    3ea8:	93 e0       	ldi	r25, 0x03	; 3
    3eaa:	a0 e0       	ldi	r26, 0x00	; 0
    3eac:	b0 e0       	ldi	r27, 0x00	; 0
    3eae:	84 83       	std	Z+4, r24	; 0x04
    3eb0:	95 83       	std	Z+5, r25	; 0x05
    3eb2:	a6 83       	std	Z+6, r26	; 0x06
    3eb4:	b7 83       	std	Z+7, r27	; 0x07
  Adafruit_CC3000_ClientRef implementation
*/
/**************************************************************************/

Adafruit_CC3000_ClientRef::Adafruit_CC3000_ClientRef(Adafruit_CC3000_Client* client)
  : _client(client) 
    3eb6:	d1 83       	std	Z+1, r29	; 0x01
    3eb8:	c0 83       	st	Z, r28
    3eba:	15 86       	std	Z+13, r1	; 0x0d
    3ebc:	14 86       	std	Z+12, r1	; 0x0c
  
  // Couldn't find a client ready to read, so return a client that is not 
  // connected to signal no clients are available for reading (convention
  // used by the Ethernet library).
  return Adafruit_CC3000_ClientRef(NULL);
}
    3ebe:	c9 01       	movw	r24, r18
    3ec0:	df 91       	pop	r29
    3ec2:	cf 91       	pop	r28
    3ec4:	08 95       	ret

00003ec6 <_ZN22Adafruit_CC3000_Server5writeEPKhj>:
}

// Write data to all connected clients.  Buffer is a pointer to an array
// of bytes, and size specifies how many bytes to write from the buffer.
// Return the sum of bytes written to all clients.
size_t Adafruit_CC3000_Server::write(const uint8_t *buffer, size_t size) {
    3ec6:	4f 92       	push	r4
    3ec8:	5f 92       	push	r5
    3eca:	6f 92       	push	r6
    3ecc:	7f 92       	push	r7
    3ece:	8f 92       	push	r8
    3ed0:	9f 92       	push	r9
    3ed2:	af 92       	push	r10
    3ed4:	bf 92       	push	r11
    3ed6:	cf 92       	push	r12
    3ed8:	df 92       	push	r13
    3eda:	ef 92       	push	r14
    3edc:	ff 92       	push	r15
    3ede:	0f 93       	push	r16
    3ee0:	1f 93       	push	r17
    3ee2:	cf 93       	push	r28
    3ee4:	df 93       	push	r29
    3ee6:	5c 01       	movw	r10, r24
    3ee8:	3b 01       	movw	r6, r22
    3eea:	4a 01       	movw	r8, r20
    3eec:	7c 01       	movw	r14, r24
    3eee:	cc 24       	eor	r12, r12
    3ef0:	dd 24       	eor	r13, r13
    3ef2:	00 e0       	ldi	r16, 0x00	; 0
    3ef4:	10 e0       	ldi	r17, 0x00	; 0
  size_t written = 0;
  for (int i = 0; i < MAX_SERVER_CLIENTS; ++i) {
    if (_clients[i].connected()) {
    3ef6:	83 e5       	ldi	r24, 0x53	; 83
    3ef8:	48 2e       	mov	r4, r24
    3efa:	51 2c       	mov	r5, r1
    3efc:	04 9d       	mul	r16, r4
    3efe:	e0 01       	movw	r28, r0
    3f00:	05 9d       	mul	r16, r5
    3f02:	d0 0d       	add	r29, r0
    3f04:	14 9d       	mul	r17, r4
    3f06:	d0 0d       	add	r29, r0
    3f08:	11 24       	eor	r1, r1
    3f0a:	24 96       	adiw	r28, 0x04	; 4
    3f0c:	ca 0d       	add	r28, r10
    3f0e:	db 1d       	adc	r29, r11
    3f10:	d7 01       	movw	r26, r14
    3f12:	14 96       	adiw	r26, 0x04	; 4
    3f14:	ed 91       	ld	r30, X+
    3f16:	fc 91       	ld	r31, X
    3f18:	15 97       	sbiw	r26, 0x05	; 5
    3f1a:	04 88       	ldd	r0, Z+20	; 0x14
    3f1c:	f5 89       	ldd	r31, Z+21	; 0x15
    3f1e:	e0 2d       	mov	r30, r0
    3f20:	ce 01       	movw	r24, r28
    3f22:	09 95       	icall
    3f24:	88 23       	and	r24, r24
    3f26:	71 f0       	breq	.+28     	; 0x3f44 <_ZN22Adafruit_CC3000_Server5writeEPKhj+0x7e>
      written += _clients[i].write(buffer, size);
    3f28:	d7 01       	movw	r26, r14
    3f2a:	14 96       	adiw	r26, 0x04	; 4
    3f2c:	ed 91       	ld	r30, X+
    3f2e:	fc 91       	ld	r31, X
    3f30:	15 97       	sbiw	r26, 0x05	; 5
    3f32:	02 80       	ldd	r0, Z+2	; 0x02
    3f34:	f3 81       	ldd	r31, Z+3	; 0x03
    3f36:	e0 2d       	mov	r30, r0
    3f38:	ce 01       	movw	r24, r28
    3f3a:	b3 01       	movw	r22, r6
    3f3c:	a4 01       	movw	r20, r8
    3f3e:	09 95       	icall
    3f40:	c8 0e       	add	r12, r24
    3f42:	d9 1e       	adc	r13, r25
// Write data to all connected clients.  Buffer is a pointer to an array
// of bytes, and size specifies how many bytes to write from the buffer.
// Return the sum of bytes written to all clients.
size_t Adafruit_CC3000_Server::write(const uint8_t *buffer, size_t size) {
  size_t written = 0;
  for (int i = 0; i < MAX_SERVER_CLIENTS; ++i) {
    3f44:	0f 5f       	subi	r16, 0xFF	; 255
    3f46:	1f 4f       	sbci	r17, 0xFF	; 255
    3f48:	83 e5       	ldi	r24, 0x53	; 83
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
    3f4c:	e8 0e       	add	r14, r24
    3f4e:	f9 1e       	adc	r15, r25
    3f50:	03 30       	cpi	r16, 0x03	; 3
    3f52:	11 05       	cpc	r17, r1
    3f54:	99 f6       	brne	.-90     	; 0x3efc <_ZN22Adafruit_CC3000_Server5writeEPKhj+0x36>
    if (_clients[i].connected()) {
      written += _clients[i].write(buffer, size);
    }
  }
  return written;
}
    3f56:	c6 01       	movw	r24, r12
    3f58:	df 91       	pop	r29
    3f5a:	cf 91       	pop	r28
    3f5c:	1f 91       	pop	r17
    3f5e:	0f 91       	pop	r16
    3f60:	ff 90       	pop	r15
    3f62:	ef 90       	pop	r14
    3f64:	df 90       	pop	r13
    3f66:	cf 90       	pop	r12
    3f68:	bf 90       	pop	r11
    3f6a:	af 90       	pop	r10
    3f6c:	9f 90       	pop	r9
    3f6e:	8f 90       	pop	r8
    3f70:	7f 90       	pop	r7
    3f72:	6f 90       	pop	r6
    3f74:	5f 90       	pop	r5
    3f76:	4f 90       	pop	r4
    3f78:	08 95       	ret

00003f7a <_ZN22Adafruit_CC3000_Server5writeEh>:

// Write a byte value to all connected clients.
// Return the sum of bytes written to all clients.
size_t Adafruit_CC3000_Server::write(uint8_t value) {
    3f7a:	df 93       	push	r29
    3f7c:	cf 93       	push	r28
    3f7e:	0f 92       	push	r0
    3f80:	cd b7       	in	r28, 0x3d	; 61
    3f82:	de b7       	in	r29, 0x3e	; 62
    3f84:	fc 01       	movw	r30, r24
    3f86:	69 83       	std	Y+1, r22	; 0x01
  return write(&value, 1);
    3f88:	a0 81       	ld	r26, Z
    3f8a:	b1 81       	ldd	r27, Z+1	; 0x01
    3f8c:	12 96       	adiw	r26, 0x02	; 2
    3f8e:	2d 91       	ld	r18, X+
    3f90:	3c 91       	ld	r19, X
    3f92:	13 97       	sbiw	r26, 0x03	; 3
    3f94:	be 01       	movw	r22, r28
    3f96:	6f 5f       	subi	r22, 0xFF	; 255
    3f98:	7f 4f       	sbci	r23, 0xFF	; 255
    3f9a:	41 e0       	ldi	r20, 0x01	; 1
    3f9c:	50 e0       	ldi	r21, 0x00	; 0
    3f9e:	f9 01       	movw	r30, r18
    3fa0:	09 95       	icall
}
    3fa2:	0f 90       	pop	r0
    3fa4:	cf 91       	pop	r28
    3fa6:	df 91       	pop	r29
    3fa8:	08 95       	ret

00003faa <_GLOBAL__I__ZN25Adafruit_CC3000_ClientRefC2EP22Adafruit_CC3000_Client>:
      }
      // else either there were no sockets to accept or an error occured.
    }
  }
  return newClientCreated;
}
    3faa:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    3fac:	8e e4       	ldi	r24, 0x4E	; 78
    3fae:	92 e0       	ldi	r25, 0x02	; 2
    3fb0:	60 e0       	ldi	r22, 0x00	; 0
    3fb2:	40 e0       	ldi	r20, 0x00	; 0
    3fb4:	20 e0       	ldi	r18, 0x00	; 0
    3fb6:	00 e0       	ldi	r16, 0x00	; 0
    3fb8:	0e 94 e7 2b 	call	0x57ce	; 0x57ce <_ZN9IPAddressC1Ehhhh>
    3fbc:	0f 91       	pop	r16
    3fbe:	08 95       	ret

00003fc0 <_ZN22Adafruit_CC3000_Server20acceptNewConnectionsEv>:
size_t Adafruit_CC3000_Server::write(uint8_t value) {
  return write(&value, 1);
}

// Accept new connections and update the connected clients.
bool Adafruit_CC3000_Server::acceptNewConnections() {
    3fc0:	2f 92       	push	r2
    3fc2:	3f 92       	push	r3
    3fc4:	4f 92       	push	r4
    3fc6:	5f 92       	push	r5
    3fc8:	7f 92       	push	r7
    3fca:	8f 92       	push	r8
    3fcc:	9f 92       	push	r9
    3fce:	af 92       	push	r10
    3fd0:	bf 92       	push	r11
    3fd2:	cf 92       	push	r12
    3fd4:	df 92       	push	r13
    3fd6:	ef 92       	push	r14
    3fd8:	ff 92       	push	r15
    3fda:	0f 93       	push	r16
    3fdc:	1f 93       	push	r17
    3fde:	df 93       	push	r29
    3fe0:	cf 93       	push	r28
    3fe2:	cd b7       	in	r28, 0x3d	; 61
    3fe4:	de b7       	in	r29, 0x3e	; 62
    3fe6:	c3 55       	subi	r28, 0x53	; 83
    3fe8:	d0 40       	sbci	r29, 0x00	; 0
    3fea:	0f b6       	in	r0, 0x3f	; 63
    3fec:	f8 94       	cli
    3fee:	de bf       	out	0x3e, r29	; 62
    3ff0:	0f be       	out	0x3f, r0	; 63
    3ff2:	cd bf       	out	0x3d, r28	; 61
    3ff4:	5c 01       	movw	r10, r24
    3ff6:	6c 01       	movw	r12, r24
    3ff8:	77 24       	eor	r7, r7
    3ffa:	ee 24       	eor	r14, r14
    3ffc:	ff 24       	eor	r15, r15
  bool newClientCreated = false;
  // For any unconnected client, see if new connections are pending and accept
  // them as a new client.
  for (int i = 0; i < MAX_SERVER_CLIENTS; ++i) {
    if (!_clients[i].connected()) {
    3ffe:	23 e5       	ldi	r18, 0x53	; 83
    4000:	22 2e       	mov	r2, r18
    4002:	31 2c       	mov	r3, r1
      // Note: Because the non-blocking option was set for the listening
      // socket this call will not block and instead return SOC_IN_PROGRESS (-2) 
      // if there are no pending client connections. Also, the address of the 
      // connected client is not needed, so those parameters are set to NULL.
      cc3k_int_poll();
      int soc = accept(_listenSocket, NULL, NULL);
    4004:	9f ef       	ldi	r25, 0xFF	; 255
    4006:	89 2e       	mov	r8, r25
    4008:	91 2c       	mov	r9, r1
    400a:	8a 0c       	add	r8, r10
    400c:	9b 1c       	adc	r9, r11
      if (soc > -1) {
        _clients[i] = Adafruit_CC3000_Client(soc);
    400e:	2e 01       	movw	r4, r28
    4010:	08 94       	sec
    4012:	41 1c       	adc	r4, r1
    4014:	51 1c       	adc	r5, r1
bool Adafruit_CC3000_Server::acceptNewConnections() {
  bool newClientCreated = false;
  // For any unconnected client, see if new connections are pending and accept
  // them as a new client.
  for (int i = 0; i < MAX_SERVER_CLIENTS; ++i) {
    if (!_clients[i].connected()) {
    4016:	e2 9c       	mul	r14, r2
    4018:	80 01       	movw	r16, r0
    401a:	e3 9c       	mul	r14, r3
    401c:	10 0d       	add	r17, r0
    401e:	f2 9c       	mul	r15, r2
    4020:	10 0d       	add	r17, r0
    4022:	11 24       	eor	r1, r1
    4024:	0c 5f       	subi	r16, 0xFC	; 252
    4026:	1f 4f       	sbci	r17, 0xFF	; 255
    4028:	0a 0d       	add	r16, r10
    402a:	1b 1d       	adc	r17, r11
    402c:	d6 01       	movw	r26, r12
    402e:	14 96       	adiw	r26, 0x04	; 4
    4030:	ed 91       	ld	r30, X+
    4032:	fc 91       	ld	r31, X
    4034:	15 97       	sbiw	r26, 0x05	; 5
    4036:	04 88       	ldd	r0, Z+20	; 0x14
    4038:	f5 89       	ldd	r31, Z+21	; 0x15
    403a:	e0 2d       	mov	r30, r0
    403c:	c8 01       	movw	r24, r16
    403e:	09 95       	icall
    4040:	88 23       	and	r24, r24
    4042:	f1 f4       	brne	.+60     	; 0x4080 <_ZN22Adafruit_CC3000_Server20acceptNewConnectionsEv+0xc0>
      // Note: Because the non-blocking option was set for the listening
      // socket this call will not block and instead return SOC_IN_PROGRESS (-2) 
      // if there are no pending client connections. Also, the address of the 
      // connected client is not needed, so those parameters are set to NULL.
      cc3k_int_poll();
    4044:	0e 94 b9 23 	call	0x4772	; 0x4772 <cc3k_int_poll>
      int soc = accept(_listenSocket, NULL, NULL);
    4048:	f4 01       	movw	r30, r8
    404a:	60 81       	ld	r22, Z
    404c:	71 81       	ldd	r23, Z+1	; 0x01
    404e:	82 81       	ldd	r24, Z+2	; 0x02
    4050:	93 81       	ldd	r25, Z+3	; 0x03
    4052:	40 e0       	ldi	r20, 0x00	; 0
    4054:	50 e0       	ldi	r21, 0x00	; 0
    4056:	20 e0       	ldi	r18, 0x00	; 0
    4058:	30 e0       	ldi	r19, 0x00	; 0
    405a:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <accept>
    405e:	cb 01       	movw	r24, r22
      if (soc > -1) {
    4060:	77 fd       	sbrc	r23, 7
    4062:	0e c0       	rjmp	.+28     	; 0x4080 <_ZN22Adafruit_CC3000_Server20acceptNewConnectionsEv+0xc0>
        _clients[i] = Adafruit_CC3000_Client(soc);
    4064:	ac 01       	movw	r20, r24
    4066:	66 27       	eor	r22, r22
    4068:	57 fd       	sbrc	r21, 7
    406a:	60 95       	com	r22
    406c:	76 2f       	mov	r23, r22
    406e:	c2 01       	movw	r24, r4
    4070:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <_ZN22Adafruit_CC3000_ClientC1El>
    4074:	c8 01       	movw	r24, r16
    4076:	b2 01       	movw	r22, r4
    4078:	0e 94 3b 1a 	call	0x3476	; 0x3476 <_ZN22Adafruit_CC3000_ClientaSERKS_>
    407c:	77 24       	eor	r7, r7
    407e:	73 94       	inc	r7
// Accept new connections and update the connected clients.
bool Adafruit_CC3000_Server::acceptNewConnections() {
  bool newClientCreated = false;
  // For any unconnected client, see if new connections are pending and accept
  // them as a new client.
  for (int i = 0; i < MAX_SERVER_CLIENTS; ++i) {
    4080:	08 94       	sec
    4082:	e1 1c       	adc	r14, r1
    4084:	f1 1c       	adc	r15, r1
    4086:	83 e5       	ldi	r24, 0x53	; 83
    4088:	90 e0       	ldi	r25, 0x00	; 0
    408a:	c8 0e       	add	r12, r24
    408c:	d9 1e       	adc	r13, r25
    408e:	93 e0       	ldi	r25, 0x03	; 3
    4090:	e9 16       	cp	r14, r25
    4092:	f1 04       	cpc	r15, r1
    4094:	09 f0       	breq	.+2      	; 0x4098 <_ZN22Adafruit_CC3000_Server20acceptNewConnectionsEv+0xd8>
    4096:	bf cf       	rjmp	.-130    	; 0x4016 <_ZN22Adafruit_CC3000_Server20acceptNewConnectionsEv+0x56>
      }
      // else either there were no sockets to accept or an error occured.
    }
  }
  return newClientCreated;
}
    4098:	87 2d       	mov	r24, r7
    409a:	cd 5a       	subi	r28, 0xAD	; 173
    409c:	df 4f       	sbci	r29, 0xFF	; 255
    409e:	0f b6       	in	r0, 0x3f	; 63
    40a0:	f8 94       	cli
    40a2:	de bf       	out	0x3e, r29	; 62
    40a4:	0f be       	out	0x3f, r0	; 63
    40a6:	cd bf       	out	0x3d, r28	; 61
    40a8:	cf 91       	pop	r28
    40aa:	df 91       	pop	r29
    40ac:	1f 91       	pop	r17
    40ae:	0f 91       	pop	r16
    40b0:	ff 90       	pop	r15
    40b2:	ef 90       	pop	r14
    40b4:	df 90       	pop	r13
    40b6:	cf 90       	pop	r12
    40b8:	bf 90       	pop	r11
    40ba:	af 90       	pop	r10
    40bc:	9f 90       	pop	r9
    40be:	8f 90       	pop	r8
    40c0:	7f 90       	pop	r7
    40c2:	5f 90       	pop	r5
    40c4:	4f 90       	pop	r4
    40c6:	3f 90       	pop	r3
    40c8:	2f 90       	pop	r2
    40ca:	08 95       	ret

000040cc <_ZN22Adafruit_CC3000_Server14availableIndexEPb>:

// Return index of a client with data available for reading. Can be turned
// into a client instance with getClientRef().  Accepts an optional parameter
// to return a boolean (by reference) indicating if available client is connecting
// for the first time.
int8_t Adafruit_CC3000_Server::availableIndex(bool *newClient) {
    40cc:	af 92       	push	r10
    40ce:	bf 92       	push	r11
    40d0:	cf 92       	push	r12
    40d2:	df 92       	push	r13
    40d4:	ef 92       	push	r14
    40d6:	ff 92       	push	r15
    40d8:	0f 93       	push	r16
    40da:	1f 93       	push	r17
    40dc:	cf 93       	push	r28
    40de:	df 93       	push	r29
    40e0:	6c 01       	movw	r12, r24
    40e2:	eb 01       	movw	r28, r22
  bool newClientCreated = acceptNewConnections();
    40e4:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <_ZN22Adafruit_CC3000_Server20acceptNewConnectionsEv>

  if (newClient)
    40e8:	20 97       	sbiw	r28, 0x00	; 0
    40ea:	09 f0       	breq	.+2      	; 0x40ee <_ZN22Adafruit_CC3000_Server14availableIndexEPb+0x22>
    *newClient = newClientCreated;
    40ec:	88 83       	st	Y, r24
    40ee:	76 01       	movw	r14, r12
    40f0:	00 e0       	ldi	r16, 0x00	; 0
    40f2:	10 e0       	ldi	r17, 0x00	; 0

  // Find the first client which is ready to read and return it.
  for (int i = 0; i < MAX_SERVER_CLIENTS; ++i) {
    if (_clients[i].connected() && _clients[i].available() > 0) {
    40f4:	33 e5       	ldi	r19, 0x53	; 83
    40f6:	a3 2e       	mov	r10, r19
    40f8:	b1 2c       	mov	r11, r1
    40fa:	0a 9d       	mul	r16, r10
    40fc:	e0 01       	movw	r28, r0
    40fe:	0b 9d       	mul	r16, r11
    4100:	d0 0d       	add	r29, r0
    4102:	1a 9d       	mul	r17, r10
    4104:	d0 0d       	add	r29, r0
    4106:	11 24       	eor	r1, r1
    4108:	24 96       	adiw	r28, 0x04	; 4
    410a:	cc 0d       	add	r28, r12
    410c:	dd 1d       	adc	r29, r13
    410e:	d7 01       	movw	r26, r14
    4110:	14 96       	adiw	r26, 0x04	; 4
    4112:	ed 91       	ld	r30, X+
    4114:	fc 91       	ld	r31, X
    4116:	15 97       	sbiw	r26, 0x05	; 5
    4118:	04 88       	ldd	r0, Z+20	; 0x14
    411a:	f5 89       	ldd	r31, Z+21	; 0x15
    411c:	e0 2d       	mov	r30, r0
    411e:	ce 01       	movw	r24, r28
    4120:	09 95       	icall
    4122:	88 23       	and	r24, r24
    4124:	c9 f0       	breq	.+50     	; 0x4158 <_ZN22Adafruit_CC3000_Server14availableIndexEPb+0x8c>
    4126:	d7 01       	movw	r26, r14
    4128:	14 96       	adiw	r26, 0x04	; 4
    412a:	ed 91       	ld	r30, X+
    412c:	fc 91       	ld	r31, X
    412e:	15 97       	sbiw	r26, 0x05	; 5
    4130:	04 80       	ldd	r0, Z+4	; 0x04
    4132:	f5 81       	ldd	r31, Z+5	; 0x05
    4134:	e0 2d       	mov	r30, r0
    4136:	ce 01       	movw	r24, r28
    4138:	09 95       	icall
    413a:	18 16       	cp	r1, r24
    413c:	19 06       	cpc	r1, r25
    413e:	64 f4       	brge	.+24     	; 0x4158 <_ZN22Adafruit_CC3000_Server14availableIndexEPb+0x8c>
      return i;
    4140:	80 2f       	mov	r24, r16
    }
  }

  return -1;
}
    4142:	df 91       	pop	r29
    4144:	cf 91       	pop	r28
    4146:	1f 91       	pop	r17
    4148:	0f 91       	pop	r16
    414a:	ff 90       	pop	r15
    414c:	ef 90       	pop	r14
    414e:	df 90       	pop	r13
    4150:	cf 90       	pop	r12
    4152:	bf 90       	pop	r11
    4154:	af 90       	pop	r10
    4156:	08 95       	ret

  if (newClient)
    *newClient = newClientCreated;

  // Find the first client which is ready to read and return it.
  for (int i = 0; i < MAX_SERVER_CLIENTS; ++i) {
    4158:	0f 5f       	subi	r16, 0xFF	; 255
    415a:	1f 4f       	sbci	r17, 0xFF	; 255
    415c:	83 e5       	ldi	r24, 0x53	; 83
    415e:	90 e0       	ldi	r25, 0x00	; 0
    4160:	e8 0e       	add	r14, r24
    4162:	f9 1e       	adc	r15, r25
    4164:	03 30       	cpi	r16, 0x03	; 3
    4166:	11 05       	cpc	r17, r1
    4168:	41 f6       	brne	.-112    	; 0x40fa <_ZN22Adafruit_CC3000_Server14availableIndexEPb+0x2e>
    416a:	8f ef       	ldi	r24, 0xFF	; 255
    416c:	ea cf       	rjmp	.-44     	; 0x4142 <_ZN22Adafruit_CC3000_Server14availableIndexEPb+0x76>

0000416e <_ZN22Adafruit_CC3000_Server9availableEv>:
  // used by the Ethernet library).
  return Adafruit_CC3000_ClientRef(NULL);
}

// Return a reference to a client instance which has data available to read.
Adafruit_CC3000_ClientRef Adafruit_CC3000_Server::available() {
    416e:	ef 92       	push	r14
    4170:	ff 92       	push	r15
    4172:	0f 93       	push	r16
    4174:	1f 93       	push	r17
    4176:	f8 2e       	mov	r15, r24
    4178:	e9 2e       	mov	r14, r25
    417a:	8b 01       	movw	r16, r22
  return getClientRef(availableIndex(NULL));
    417c:	cb 01       	movw	r24, r22
    417e:	60 e0       	ldi	r22, 0x00	; 0
    4180:	70 e0       	ldi	r23, 0x00	; 0
    4182:	0e 94 66 20 	call	0x40cc	; 0x40cc <_ZN22Adafruit_CC3000_Server14availableIndexEPb>
    4186:	48 2f       	mov	r20, r24
    4188:	8f 2d       	mov	r24, r15
    418a:	9e 2d       	mov	r25, r14
    418c:	b8 01       	movw	r22, r16
    418e:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <_ZN22Adafruit_CC3000_Server12getClientRefEa>
}
    4192:	8f 2d       	mov	r24, r15
    4194:	9e 2d       	mov	r25, r14
    4196:	1f 91       	pop	r17
    4198:	0f 91       	pop	r16
    419a:	ff 90       	pop	r15
    419c:	ef 90       	pop	r14
    419e:	08 95       	ret

000041a0 <_ZN22Adafruit_CC3000_Server5beginEv>:

// Initialize the server and start listening for connections.
void Adafruit_CC3000_Server::begin() {
    41a0:	2f 92       	push	r2
    41a2:	3f 92       	push	r3
    41a4:	4f 92       	push	r4
    41a6:	5f 92       	push	r5
    41a8:	6f 92       	push	r6
    41aa:	7f 92       	push	r7
    41ac:	8f 92       	push	r8
    41ae:	9f 92       	push	r9
    41b0:	af 92       	push	r10
    41b2:	bf 92       	push	r11
    41b4:	cf 92       	push	r12
    41b6:	df 92       	push	r13
    41b8:	ef 92       	push	r14
    41ba:	ff 92       	push	r15
    41bc:	0f 93       	push	r16
    41be:	1f 93       	push	r17
    41c0:	df 93       	push	r29
    41c2:	cf 93       	push	r28
    41c4:	cd b7       	in	r28, 0x3d	; 61
    41c6:	de b7       	in	r29, 0x3e	; 62
    41c8:	a1 97       	sbiw	r28, 0x21	; 33
    41ca:	0f b6       	in	r0, 0x3f	; 63
    41cc:	f8 94       	cli
    41ce:	de bf       	out	0x3e, r29	; 62
    41d0:	0f be       	out	0x3f, r0	; 63
    41d2:	cd bf       	out	0x3d, r28	; 61
    41d4:	1c 01       	movw	r2, r24
  // Set the CC3000 inactivity timeout to 0 (never timeout).  This will ensure 
  // the CC3000 does not close the listening socket when it's idle for more than 
  // 60 seconds (the default timeout).  See more information from:
  // http://e2e.ti.com/support/low_power_rf/f/851/t/292664.aspx
  unsigned long aucDHCP       = 14400;
    41d6:	80 e4       	ldi	r24, 0x40	; 64
    41d8:	98 e3       	ldi	r25, 0x38	; 56
    41da:	a0 e0       	ldi	r26, 0x00	; 0
    41dc:	b0 e0       	ldi	r27, 0x00	; 0
    41de:	8a 83       	std	Y+2, r24	; 0x02
    41e0:	9b 83       	std	Y+3, r25	; 0x03
    41e2:	ac 83       	std	Y+4, r26	; 0x04
    41e4:	bd 83       	std	Y+5, r27	; 0x05
  unsigned long aucARP        = 3600;
    41e6:	80 e1       	ldi	r24, 0x10	; 16
    41e8:	9e e0       	ldi	r25, 0x0E	; 14
    41ea:	a0 e0       	ldi	r26, 0x00	; 0
    41ec:	b0 e0       	ldi	r27, 0x00	; 0
    41ee:	8e 83       	std	Y+6, r24	; 0x06
    41f0:	9f 83       	std	Y+7, r25	; 0x07
    41f2:	a8 87       	std	Y+8, r26	; 0x08
    41f4:	b9 87       	std	Y+9, r27	; 0x09
  unsigned long aucKeepalive  = 30;
    41f6:	8e e1       	ldi	r24, 0x1E	; 30
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	a0 e0       	ldi	r26, 0x00	; 0
    41fc:	b0 e0       	ldi	r27, 0x00	; 0
    41fe:	8a 87       	std	Y+10, r24	; 0x0a
    4200:	9b 87       	std	Y+11, r25	; 0x0b
    4202:	ac 87       	std	Y+12, r26	; 0x0c
    4204:	bd 87       	std	Y+13, r27	; 0x0d
  unsigned long aucInactivity = 0;
    4206:	1e 86       	std	Y+14, r1	; 0x0e
    4208:	1f 86       	std	Y+15, r1	; 0x0f
    420a:	18 8a       	std	Y+16, r1	; 0x10
    420c:	19 8a       	std	Y+17, r1	; 0x11
  cc3k_int_poll();
    420e:	0e 94 b9 23 	call	0x4772	; 0x4772 <cc3k_int_poll>
  if (netapp_timeout_values(&aucDHCP, &aucARP, &aucKeepalive, &aucInactivity) != 0) {
    4212:	ce 01       	movw	r24, r28
    4214:	02 96       	adiw	r24, 0x02	; 2
    4216:	be 01       	movw	r22, r28
    4218:	6a 5f       	subi	r22, 0xFA	; 250
    421a:	7f 4f       	sbci	r23, 0xFF	; 255
    421c:	ae 01       	movw	r20, r28
    421e:	46 5f       	subi	r20, 0xF6	; 246
    4220:	5f 4f       	sbci	r21, 0xFF	; 255
    4222:	9e 01       	movw	r18, r28
    4224:	22 5f       	subi	r18, 0xF2	; 242
    4226:	3f 4f       	sbci	r19, 0xFF	; 255
    4228:	0e 94 c3 0a 	call	0x1586	; 0x1586 <netapp_timeout_values>
    422c:	61 15       	cp	r22, r1
    422e:	71 05       	cpc	r23, r1
    4230:	81 05       	cpc	r24, r1
    4232:	91 05       	cpc	r25, r1
    4234:	09 f0       	breq	.+2      	; 0x4238 <_ZN22Adafruit_CC3000_Server5beginEv+0x98>
    4236:	67 c0       	rjmp	.+206    	; 0x4306 <_ZN22Adafruit_CC3000_Server5beginEv+0x166>
    CC3K_PRINTLN_F("Error setting inactivity timeout!");
    return;
  }
  // Create a TCP socket
  cc3k_int_poll();
    4238:	0e 94 b9 23 	call	0x4772	; 0x4772 <cc3k_int_poll>
  int16_t soc = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    423c:	62 e0       	ldi	r22, 0x02	; 2
    423e:	70 e0       	ldi	r23, 0x00	; 0
    4240:	80 e0       	ldi	r24, 0x00	; 0
    4242:	90 e0       	ldi	r25, 0x00	; 0
    4244:	21 e0       	ldi	r18, 0x01	; 1
    4246:	30 e0       	ldi	r19, 0x00	; 0
    4248:	40 e0       	ldi	r20, 0x00	; 0
    424a:	50 e0       	ldi	r21, 0x00	; 0
    424c:	a6 e0       	ldi	r26, 0x06	; 6
    424e:	ea 2e       	mov	r14, r26
    4250:	f1 2c       	mov	r15, r1
    4252:	01 2d       	mov	r16, r1
    4254:	11 2d       	mov	r17, r1
    4256:	0e 94 33 10 	call	0x2066	; 0x2066 <socket>
    425a:	8b 01       	movw	r16, r22
  if (soc < 0) {
    425c:	77 fd       	sbrc	r23, 7
    425e:	53 c0       	rjmp	.+166    	; 0x4306 <_ZN22Adafruit_CC3000_Server5beginEv+0x166>
    CC3K_PRINTLN_F("Couldn't create listening socket!");
    return;
  }
  // Set the socket's accept call as non-blocking.
  cc3k_int_poll();
    4260:	0e 94 b9 23 	call	0x4772	; 0x4772 <cc3k_int_poll>
  char arg = SOCK_ON; // nsd: looked in TI example code and they pass this as a 'short' in one example, and 'char' in two others. 'char' seems as likely work, and has no endianess issue
    4264:	19 82       	std	Y+1, r1	; 0x01
  if (setsockopt(soc, SOL_SOCKET, SOCKOPT_ACCEPT_NONBLOCK, &arg, sizeof(arg)) < 0) {
    4266:	28 01       	movw	r4, r16
    4268:	66 24       	eor	r6, r6
    426a:	57 fc       	sbrc	r5, 7
    426c:	60 94       	com	r6
    426e:	76 2c       	mov	r7, r6
    4270:	c3 01       	movw	r24, r6
    4272:	b2 01       	movw	r22, r4
    4274:	2f ef       	ldi	r18, 0xFF	; 255
    4276:	3f ef       	ldi	r19, 0xFF	; 255
    4278:	40 e0       	ldi	r20, 0x00	; 0
    427a:	50 e0       	ldi	r21, 0x00	; 0
    427c:	f2 e0       	ldi	r31, 0x02	; 2
    427e:	ef 2e       	mov	r14, r31
    4280:	f1 2c       	mov	r15, r1
    4282:	01 2d       	mov	r16, r1
    4284:	11 2d       	mov	r17, r1
    4286:	6e 01       	movw	r12, r28
    4288:	08 94       	sec
    428a:	c1 1c       	adc	r12, r1
    428c:	d1 1c       	adc	r13, r1
    428e:	e1 e0       	ldi	r30, 0x01	; 1
    4290:	8e 2e       	mov	r8, r30
    4292:	91 2c       	mov	r9, r1
    4294:	a1 2c       	mov	r10, r1
    4296:	b1 2c       	mov	r11, r1
    4298:	0e 94 c2 0b 	call	0x1784	; 0x1784 <setsockopt>
    429c:	97 fd       	sbrc	r25, 7
    429e:	33 c0       	rjmp	.+102    	; 0x4306 <_ZN22Adafruit_CC3000_Server5beginEv+0x166>
    CC3K_PRINTLN_F("Couldn't set socket as non-blocking!");
    return;
  }
  // Bind the socket to a TCP address.
  sockaddr_in address;
  address.sin_family = AF_INET;
    42a0:	82 e0       	ldi	r24, 0x02	; 2
    42a2:	90 e0       	ldi	r25, 0x00	; 0
    42a4:	9b 8b       	std	Y+19, r25	; 0x13
    42a6:	8a 8b       	std	Y+18, r24	; 0x12
  address.sin_addr.s_addr = htonl(0);     // Listen on any network interface, equivalent to INADDR_ANY in sockets programming.
    42a8:	1e 8a       	std	Y+22, r1	; 0x16
    42aa:	1f 8a       	std	Y+23, r1	; 0x17
    42ac:	18 8e       	std	Y+24, r1	; 0x18
    42ae:	19 8e       	std	Y+25, r1	; 0x19
  address.sin_port = htons(_port);        // Listen on the specified port.
    42b0:	f1 01       	movw	r30, r2
    42b2:	e3 50       	subi	r30, 0x03	; 3
    42b4:	ff 4f       	sbci	r31, 0xFF	; 255
    42b6:	90 81       	ld	r25, Z
    42b8:	81 81       	ldd	r24, Z+1	; 0x01
    42ba:	8c 8b       	std	Y+20, r24	; 0x14
    42bc:	9d 8b       	std	Y+21, r25	; 0x15
  cc3k_int_poll();
    42be:	0e 94 b9 23 	call	0x4772	; 0x4772 <cc3k_int_poll>
  if (bind(soc, (sockaddr*) &address, sizeof(address)) < 0) {
    42c2:	c3 01       	movw	r24, r6
    42c4:	b2 01       	movw	r22, r4
    42c6:	ae 01       	movw	r20, r28
    42c8:	4e 5e       	subi	r20, 0xEE	; 238
    42ca:	5f 4f       	sbci	r21, 0xFF	; 255
    42cc:	00 e1       	ldi	r16, 0x10	; 16
    42ce:	10 e0       	ldi	r17, 0x00	; 0
    42d0:	20 e0       	ldi	r18, 0x00	; 0
    42d2:	30 e0       	ldi	r19, 0x00	; 0
    42d4:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <bind>
    42d8:	97 fd       	sbrc	r25, 7
    42da:	15 c0       	rjmp	.+42     	; 0x4306 <_ZN22Adafruit_CC3000_Server5beginEv+0x166>
    CC3K_PRINTLN_F("Error binding listen socket to address!");
    return;
  }
  // Start listening for connections.
  // The backlog parameter is 0 as it is not supported on TI's CC3000 firmware.
  cc3k_int_poll();
    42dc:	0e 94 b9 23 	call	0x4772	; 0x4772 <cc3k_int_poll>
  if (listen(soc, 0) < 0) {
    42e0:	c3 01       	movw	r24, r6
    42e2:	b2 01       	movw	r22, r4
    42e4:	20 e0       	ldi	r18, 0x00	; 0
    42e6:	30 e0       	ldi	r19, 0x00	; 0
    42e8:	40 e0       	ldi	r20, 0x00	; 0
    42ea:	50 e0       	ldi	r21, 0x00	; 0
    42ec:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <listen>
    42f0:	97 fd       	sbrc	r25, 7
    42f2:	09 c0       	rjmp	.+18     	; 0x4306 <_ZN22Adafruit_CC3000_Server5beginEv+0x166>
    CC3K_PRINTLN_F("Error opening socket for listening!");
    return;
  }
  _listenSocket = soc;
    42f4:	8f ef       	ldi	r24, 0xFF	; 255
    42f6:	90 e0       	ldi	r25, 0x00	; 0
    42f8:	28 0e       	add	r2, r24
    42fa:	39 1e       	adc	r3, r25
    42fc:	f1 01       	movw	r30, r2
    42fe:	40 82       	st	Z, r4
    4300:	51 82       	std	Z+1, r5	; 0x01
    4302:	62 82       	std	Z+2, r6	; 0x02
    4304:	73 82       	std	Z+3, r7	; 0x03
}
    4306:	a1 96       	adiw	r28, 0x21	; 33
    4308:	0f b6       	in	r0, 0x3f	; 63
    430a:	f8 94       	cli
    430c:	de bf       	out	0x3e, r29	; 62
    430e:	0f be       	out	0x3f, r0	; 63
    4310:	cd bf       	out	0x3d, r28	; 61
    4312:	cf 91       	pop	r28
    4314:	df 91       	pop	r29
    4316:	1f 91       	pop	r17
    4318:	0f 91       	pop	r16
    431a:	ff 90       	pop	r15
    431c:	ef 90       	pop	r14
    431e:	df 90       	pop	r13
    4320:	cf 90       	pop	r12
    4322:	bf 90       	pop	r11
    4324:	af 90       	pop	r10
    4326:	9f 90       	pop	r9
    4328:	8f 90       	pop	r8
    432a:	7f 90       	pop	r7
    432c:	6f 90       	pop	r6
    432e:	5f 90       	pop	r5
    4330:	4f 90       	pop	r4
    4332:	3f 90       	pop	r3
    4334:	2f 90       	pop	r2
    4336:	08 95       	ret

00004338 <_ZN22Adafruit_CC3000_ServerC1Ej>:
  Adafruit_CC3000_Server implementation
*/
/**************************************************************************/

// Construct a TCP server to listen on the specified port.
Adafruit_CC3000_Server::Adafruit_CC3000_Server(uint16_t port)
    4338:	ef 92       	push	r14
    433a:	ff 92       	push	r15
    433c:	0f 93       	push	r16
    433e:	1f 93       	push	r17
    4340:	8c 01       	movw	r16, r24
    4342:	7b 01       	movw	r14, r22
    4344:	fc 01       	movw	r30, r24
    4346:	13 82       	std	Z+3, r1	; 0x03
    4348:	12 82       	std	Z+2, r1	; 0x02
  : _port(port)
  , _listenSocket(-1)
    434a:	84 ea       	ldi	r24, 0xA4	; 164
    434c:	91 e0       	ldi	r25, 0x01	; 1
    434e:	91 83       	std	Z+1, r25	; 0x01
    4350:	80 83       	st	Z, r24
    4352:	c8 01       	movw	r24, r16
    4354:	04 96       	adiw	r24, 0x04	; 4
    4356:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <_ZN22Adafruit_CC3000_ClientC1Ev>
    435a:	c8 01       	movw	r24, r16
    435c:	89 5a       	subi	r24, 0xA9	; 169
    435e:	9f 4f       	sbci	r25, 0xFF	; 255
    4360:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <_ZN22Adafruit_CC3000_ClientC1Ev>
    4364:	c8 01       	movw	r24, r16
    4366:	86 55       	subi	r24, 0x56	; 86
    4368:	9f 4f       	sbci	r25, 0xFF	; 255
    436a:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <_ZN22Adafruit_CC3000_ClientC1Ev>
    436e:	03 50       	subi	r16, 0x03	; 3
    4370:	1f 4f       	sbci	r17, 0xFF	; 255
    4372:	f8 01       	movw	r30, r16
    4374:	e1 92       	st	Z+, r14
    4376:	f1 92       	st	Z+, r15
    4378:	8f ef       	ldi	r24, 0xFF	; 255
    437a:	9f ef       	ldi	r25, 0xFF	; 255
    437c:	af ef       	ldi	r26, 0xFF	; 255
    437e:	bf ef       	ldi	r27, 0xFF	; 255
    4380:	80 83       	st	Z, r24
    4382:	91 83       	std	Z+1, r25	; 0x01
    4384:	a2 83       	std	Z+2, r26	; 0x02
    4386:	b3 83       	std	Z+3, r27	; 0x03
{ }
    4388:	1f 91       	pop	r17
    438a:	0f 91       	pop	r16
    438c:	ff 90       	pop	r15
    438e:	ef 90       	pop	r14
    4390:	08 95       	ret

00004392 <_ZN25Adafruit_CC3000_ClientRef5closeEv>:
  HANDLE_NULL(_client, 0);
  return _client->read();
}

int32_t Adafruit_CC3000_ClientRef::close(void) {
  HANDLE_NULL(_client, 0);
    4392:	fc 01       	movw	r30, r24
    4394:	84 85       	ldd	r24, Z+12	; 0x0c
    4396:	95 85       	ldd	r25, Z+13	; 0x0d
    4398:	00 97       	sbiw	r24, 0x00	; 0
    439a:	29 f4       	brne	.+10     	; 0x43a6 <_ZN25Adafruit_CC3000_ClientRef5closeEv+0x14>
    439c:	20 e0       	ldi	r18, 0x00	; 0
    439e:	30 e0       	ldi	r19, 0x00	; 0
    43a0:	40 e0       	ldi	r20, 0x00	; 0
    43a2:	50 e0       	ldi	r21, 0x00	; 0
    43a4:	04 c0       	rjmp	.+8      	; 0x43ae <_ZN25Adafruit_CC3000_ClientRef5closeEv+0x1c>
  return _client->close();
    43a6:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <_ZN22Adafruit_CC3000_Client5closeEv>
    43aa:	9b 01       	movw	r18, r22
    43ac:	ac 01       	movw	r20, r24
}
    43ae:	b9 01       	movw	r22, r18
    43b0:	ca 01       	movw	r24, r20
    43b2:	08 95       	ret

000043b4 <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPK19__FlashStringHelper>:
  HANDLE_NULL(_client, 0);
  return _client->fastrprint(ifsh);
}

size_t Adafruit_CC3000_ClientRef::fastrprintln(const __FlashStringHelper *ifsh) {
  HANDLE_NULL(_client, 0);
    43b4:	fc 01       	movw	r30, r24
    43b6:	84 85       	ldd	r24, Z+12	; 0x0c
    43b8:	95 85       	ldd	r25, Z+13	; 0x0d
    43ba:	00 97       	sbiw	r24, 0x00	; 0
    43bc:	19 f4       	brne	.+6      	; 0x43c4 <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPK19__FlashStringHelper+0x10>
    43be:	20 e0       	ldi	r18, 0x00	; 0
    43c0:	30 e0       	ldi	r19, 0x00	; 0
    43c2:	03 c0       	rjmp	.+6      	; 0x43ca <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPK19__FlashStringHelper+0x16>
  return _client->fastrprintln(ifsh);
    43c4:	0e 94 78 18 	call	0x30f0	; 0x30f0 <_ZN22Adafruit_CC3000_Client12fastrprintlnEPK19__FlashStringHelper>
    43c8:	9c 01       	movw	r18, r24
}
    43ca:	c9 01       	movw	r24, r18
    43cc:	08 95       	ret

000043ce <_ZN25Adafruit_CC3000_ClientRef10fastrprintEPK19__FlashStringHelper>:
  HANDLE_NULL(_client, 0);
  return _client->fastrprintln(str);
}

size_t Adafruit_CC3000_ClientRef::fastrprint(const __FlashStringHelper *ifsh) {
  HANDLE_NULL(_client, 0);
    43ce:	fc 01       	movw	r30, r24
    43d0:	84 85       	ldd	r24, Z+12	; 0x0c
    43d2:	95 85       	ldd	r25, Z+13	; 0x0d
    43d4:	00 97       	sbiw	r24, 0x00	; 0
    43d6:	19 f4       	brne	.+6      	; 0x43de <_ZN25Adafruit_CC3000_ClientRef10fastrprintEPK19__FlashStringHelper+0x10>
    43d8:	20 e0       	ldi	r18, 0x00	; 0
    43da:	30 e0       	ldi	r19, 0x00	; 0
    43dc:	03 c0       	rjmp	.+6      	; 0x43e4 <_ZN25Adafruit_CC3000_ClientRef10fastrprintEPK19__FlashStringHelper+0x16>
  return _client->fastrprint(ifsh);
    43de:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <_ZN22Adafruit_CC3000_Client10fastrprintEPK19__FlashStringHelper>
    43e2:	9c 01       	movw	r18, r24
}
    43e4:	c9 01       	movw	r24, r18
    43e6:	08 95       	ret

000043e8 <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPc>:
  HANDLE_NULL(_client, 0);
  return _client->fastrprint(str);
}

size_t Adafruit_CC3000_ClientRef::fastrprintln(char *str) {
  HANDLE_NULL(_client, 0);
    43e8:	fc 01       	movw	r30, r24
    43ea:	84 85       	ldd	r24, Z+12	; 0x0c
    43ec:	95 85       	ldd	r25, Z+13	; 0x0d
    43ee:	00 97       	sbiw	r24, 0x00	; 0
    43f0:	19 f4       	brne	.+6      	; 0x43f8 <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPc+0x10>
    43f2:	20 e0       	ldi	r18, 0x00	; 0
    43f4:	30 e0       	ldi	r19, 0x00	; 0
    43f6:	03 c0       	rjmp	.+6      	; 0x43fe <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPc+0x16>
  return _client->fastrprintln(str);
    43f8:	0e 94 ef 18 	call	0x31de	; 0x31de <_ZN22Adafruit_CC3000_Client12fastrprintlnEPc>
    43fc:	9c 01       	movw	r18, r24
}
    43fe:	c9 01       	movw	r24, r18
    4400:	08 95       	ret

00004402 <_Z15sendDriverPatchPm>:
//!
//! @brief  The function returns a pointer to the driver patch:
//!         since there is no patch in the host - it returns 0
//
//*****************************************************************************
char *sendDriverPatch(unsigned long *Length) {
    4402:	fc 01       	movw	r30, r24
  *Length = 0;
    4404:	10 82       	st	Z, r1
    4406:	11 82       	std	Z+1, r1	; 0x01
    4408:	12 82       	std	Z+2, r1	; 0x02
    440a:	13 82       	std	Z+3, r1	; 0x03
  return NULL;
}
    440c:	80 e0       	ldi	r24, 0x00	; 0
    440e:	90 e0       	ldi	r25, 0x00	; 0
    4410:	08 95       	ret

00004412 <_Z19sendBootLoaderPatchPm>:
//!
//! @brief  The function returns a pointer to the boot loader patch:
//!         since there is no patch in the host - it returns 0
//
//*****************************************************************************
char *sendBootLoaderPatch(unsigned long *Length) {
    4412:	fc 01       	movw	r30, r24
  *Length = 0;
    4414:	10 82       	st	Z, r1
    4416:	11 82       	std	Z+1, r1	; 0x01
    4418:	12 82       	std	Z+2, r1	; 0x02
    441a:	13 82       	std	Z+3, r1	; 0x03
  return NULL;
}
    441c:	80 e0       	ldi	r24, 0x00	; 0
    441e:	90 e0       	ldi	r25, 0x00	; 0
    4420:	08 95       	ret

00004422 <_Z13sendWLFWPatchPm>:
//!
//! @brief  The function returns a pointer to the FW patch:
//!         since there is no patch in the host - it returns 0
//
//*****************************************************************************
char *sendWLFWPatch(unsigned long *Length) {
    4422:	fc 01       	movw	r30, r24
  *Length = 0;
    4424:	10 82       	st	Z, r1
    4426:	11 82       	std	Z+1, r1	; 0x01
    4428:	12 82       	std	Z+2, r1	; 0x02
    442a:	13 82       	std	Z+3, r1	; 0x03
  return NULL;
}
    442c:	80 e0       	ldi	r24, 0x00	; 0
    442e:	90 e0       	ldi	r25, 0x00	; 0
    4430:	08 95       	ret

00004432 <_Z20ReadWlanInterruptPinv>:
{
  DEBUGPRINT_F("\tCC3000: ReadWlanInterruptPin - ");
  DEBUGPRINT_DEC(digitalRead(g_irqPin));
  DEBUGPRINT_F("\n\r");

  return(digitalRead(g_irqPin));
    4432:	80 91 0c 02 	lds	r24, 0x020C
    4436:	0e 94 a8 31 	call	0x6350	; 0x6350 <digitalRead>
    443a:	9c 01       	movw	r18, r24
    443c:	44 27       	eor	r20, r20
    443e:	37 fd       	sbrc	r19, 7
    4440:	40 95       	com	r20
    4442:	54 2f       	mov	r21, r20
}
    4444:	b9 01       	movw	r22, r18
    4446:	ca 01       	movw	r24, r20
    4448:	08 95       	ret

0000444a <_Z12WriteWlanPinh>:
    DEBUGPRINT_F("\tCC3000: WriteWlanPin - ");
    DEBUGPRINT_DEC(val);
    DEBUGPRINT_F("\n\r");
    delay(1);
  }
  if (val)
    444a:	88 23       	and	r24, r24
    444c:	21 f0       	breq	.+8      	; 0x4456 <_Z12WriteWlanPinh+0xc>
  {
    digitalWrite(g_vbatPin, HIGH);
    444e:	80 91 0d 02 	lds	r24, 0x020D
    4452:	61 e0       	ldi	r22, 0x01	; 1
    4454:	03 c0       	rjmp	.+6      	; 0x445c <_Z12WriteWlanPinh+0x12>
  }
  else
  {
    digitalWrite(g_vbatPin, LOW);
    4456:	80 91 0d 02 	lds	r24, 0x020D
    445a:	60 e0       	ldi	r22, 0x00	; 0
    445c:	0e 94 54 31 	call	0x62a8	; 0x62a8 <digitalWrite>
    4460:	08 95       	ret

00004462 <_Z20WlanInterruptDisablev>:
 */
/**************************************************************************/
void WlanInterruptDisable()
{
  DEBUGPRINT_F("\tCC3000: WlanInterruptDisable\n\r");
  ccspi_int_enabled = 0;
    4462:	10 92 6d 03 	sts	0x036D, r1
  detachInterrupt(g_IRQnum);
    4466:	80 91 0e 02 	lds	r24, 0x020E
    446a:	0e 94 6e 2e 	call	0x5cdc	; 0x5cdc <detachInterrupt>
}
    446e:	08 95       	ret

00004470 <_Z11SpiPauseSpiv>:
/**************************************************************************/
void SpiPauseSpi(void)
{
  DEBUGPRINT_F("\tCC3000: SpiPauseSpi\n\r");

  ccspi_int_enabled = 0;
    4470:	10 92 6d 03 	sts	0x036D, r1
  detachInterrupt(g_IRQnum);
    4474:	80 91 0e 02 	lds	r24, 0x020E
    4478:	0e 94 6e 2e 	call	0x5cdc	; 0x5cdc <detachInterrupt>
}
    447c:	08 95       	ret

0000447e <_Z22SpiTriggerRxProcessingv>:
/**************************************************************************/
/*!

 */
/**************************************************************************/
void SpiTriggerRxProcessing(void)
    447e:	cf 93       	push	r28
    4480:	df 93       	push	r29
{
  DEBUGPRINT_F("\tCC3000: SpiTriggerRxProcessing\n\r");

  /* Trigger Rx processing */
  SpiPauseSpi();
    4482:	0e 94 38 22 	call	0x4470	; 0x4470 <_Z11SpiPauseSpiv>
  CC3000_DEASSERT_CS;
    4486:	80 91 0b 02 	lds	r24, 0x020B
    448a:	61 e0       	ldi	r22, 0x01	; 1
    448c:	0e 94 54 31 	call	0x62a8	; 0x62a8 <digitalWrite>
    4490:	80 91 57 02 	lds	r24, 0x0257
    4494:	8c bd       	out	0x2c, r24	; 44
    4496:	80 91 56 02 	lds	r24, 0x0256
    449a:	88 23       	and	r24, r24
    449c:	19 f0       	breq	.+6      	; 0x44a4 <_Z22SpiTriggerRxProcessingv+0x26>
    449e:	8d b5       	in	r24, 0x2d	; 45
    44a0:	81 60       	ori	r24, 0x01	; 1
    44a2:	02 c0       	rjmp	.+4      	; 0x44a8 <_Z22SpiTriggerRxProcessingv+0x2a>
    44a4:	8d b5       	in	r24, 0x2d	; 45
    44a6:	8e 7f       	andi	r24, 0xFE	; 254
    44a8:	8d bd       	out	0x2d, r24	; 45

  //DEBUGPRINT_F("Magic?\n\r");
  /* The magic number that resides at the end of the TX/RX buffer (1 byte after the allocated size)
   * for the purpose of detection of the overrun. If the magic number is overriten - buffer overrun
   * occurred - and we will stuck here forever! */
  if (sSpiInformation.pRxPacket[CC3000_RX_BUFFER_SIZE - 1] != CC3000_BUFFER_MAGIC_NUMBER)
    44aa:	c0 91 64 02 	lds	r28, 0x0264
    44ae:	d0 91 65 02 	lds	r29, 0x0265
    44b2:	ce 57       	subi	r28, 0x7E	; 126
    44b4:	df 4f       	sbci	r29, 0xFF	; 255
    44b6:	88 81       	ld	r24, Y
    44b8:	c2 58       	subi	r28, 0x82	; 130
    44ba:	d0 40       	sbci	r29, 0x00	; 0
    44bc:	8e 3d       	cpi	r24, 0xDE	; 222
    44be:	09 f0       	breq	.+2      	; 0x44c2 <_Z22SpiTriggerRxProcessingv+0x44>
    44c0:	ff cf       	rjmp	.-2      	; 0x44c0 <_Z22SpiTriggerRxProcessingv+0x42>
    DEBUGPRINT_F("\tCC3000: ERROR - magic number missing!\n\r");
    while (1);
  }

  //DEBUGPRINT_F("OK!\n\r");
  sSpiInformation.ulSpiState = eSPI_STATE_IDLE;
    44c2:	82 e0       	ldi	r24, 0x02	; 2
    44c4:	90 e0       	ldi	r25, 0x00	; 0
    44c6:	a0 e0       	ldi	r26, 0x00	; 0
    44c8:	b0 e0       	ldi	r27, 0x00	; 0
    44ca:	80 93 5e 02 	sts	0x025E, r24
    44ce:	90 93 5f 02 	sts	0x025F, r25
    44d2:	a0 93 60 02 	sts	0x0260, r26
    44d6:	b0 93 61 02 	sts	0x0261, r27
  sSpiInformation.SPIRxHandler(sSpiInformation.pRxPacket + SPI_HEADER_SIZE);
    44da:	e0 91 58 02 	lds	r30, 0x0258
    44de:	f0 91 59 02 	lds	r31, 0x0259
    44e2:	ce 01       	movw	r24, r28
    44e4:	05 96       	adiw	r24, 0x05	; 5
    44e6:	09 95       	icall
}
    44e8:	df 91       	pop	r29
    44ea:	cf 91       	pop	r28
    44ec:	08 95       	ret

000044ee <_Z19WlanInterruptEnablev>:
/**************************************************************************/
void WlanInterruptEnable()
{
  DEBUGPRINT_F("\tCC3000: WlanInterruptEnable.\n\r");
  // delay(100);
  ccspi_int_enabled = 1;
    44ee:	81 e0       	ldi	r24, 0x01	; 1
    44f0:	80 93 6d 03 	sts	0x036D, r24
  attachInterrupt(g_IRQnum, SPI_IRQ, FALLING);
    44f4:	80 91 0e 02 	lds	r24, 0x020E
    44f8:	64 e2       	ldi	r22, 0x24	; 36
    44fa:	73 e2       	ldi	r23, 0x23	; 35
    44fc:	42 e0       	ldi	r20, 0x02	; 2
    44fe:	50 e0       	ldi	r21, 0x00	; 0
    4500:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <attachInterrupt>
}
    4504:	08 95       	ret

00004506 <_Z12SpiResumeSpiv>:
/**************************************************************************/
void SpiResumeSpi(void)
{
  DEBUGPRINT_F("\tCC3000: SpiResumeSpi\n\r");

  ccspi_int_enabled = 1;
    4506:	81 e0       	ldi	r24, 0x01	; 1
    4508:	80 93 6d 03 	sts	0x036D, r24
  attachInterrupt(g_IRQnum, SPI_IRQ, FALLING);
    450c:	80 91 0e 02 	lds	r24, 0x020E
    4510:	64 e2       	ldi	r22, 0x24	; 36
    4512:	73 e2       	ldi	r23, 0x23	; 35
    4514:	42 e0       	ldi	r20, 0x02	; 2
    4516:	50 e0       	ldi	r21, 0x00	; 0
    4518:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <attachInterrupt>
}
    451c:	08 95       	ret

0000451e <_Z22SpiReadDataSynchronousPht>:
/**************************************************************************/
/*!

 */
/**************************************************************************/
void SpiReadDataSynchronous(unsigned char *data, unsigned short size)
    451e:	0f 93       	push	r16
    4520:	1f 93       	push	r17
    4522:	cf 93       	push	r28
    4524:	df 93       	push	r29
    4526:	8c 01       	movw	r16, r24
    4528:	eb 01       	movw	r28, r22
{
  unsigned short i = 0;
  
  DEBUGPRINT_F("\tCC3000: SpiReadDataSynchronous\n\r");
  SPI.setDataMode(SPI_MODE1);
    452a:	84 e0       	ldi	r24, 0x04	; 4
    452c:	0e 94 75 02 	call	0x4ea	; 0x4ea <_ZN8SPIClass11setDataModeEh>
    4530:	20 e0       	ldi	r18, 0x00	; 0
    4532:	30 e0       	ldi	r19, 0x00	; 0
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    4534:	93 e0       	ldi	r25, 0x03	; 3
    4536:	0b c0       	rjmp	.+22     	; 0x454e <_Z22SpiReadDataSynchronousPht+0x30>
    4538:	9e bd       	out	0x2e, r25	; 46
  while (!(SPSR & _BV(SPIF)))
    453a:	0d b4       	in	r0, 0x2d	; 45
    453c:	07 fe       	sbrs	r0, 7
    453e:	fd cf       	rjmp	.-6      	; 0x453a <_Z22SpiReadDataSynchronousPht+0x1c>
    ;
  return SPDR;
    4540:	8e b5       	in	r24, 0x2e	; 46
  for (i = 0; i < size; i ++)
  {
    data[i] = SPI.transfer(0x03);
    4542:	f8 01       	movw	r30, r16
    4544:	e2 0f       	add	r30, r18
    4546:	f3 1f       	adc	r31, r19
    4548:	80 83       	st	Z, r24
{
  unsigned short i = 0;
  
  DEBUGPRINT_F("\tCC3000: SpiReadDataSynchronous\n\r");
  SPI.setDataMode(SPI_MODE1);
  for (i = 0; i < size; i ++)
    454a:	2f 5f       	subi	r18, 0xFF	; 255
    454c:	3f 4f       	sbci	r19, 0xFF	; 255
    454e:	2c 17       	cp	r18, r28
    4550:	3d 07       	cpc	r19, r29
    4552:	90 f3       	brcs	.-28     	; 0x4538 <_Z22SpiReadDataSynchronousPht+0x1a>
    data[i] = SPI.transfer(0x03);
    DEBUGPRINT_F("  ");
    DEBUGPRINT_HEX(data[i]);
  }
  DEBUGPRINT_F("\n\r");
}
    4554:	df 91       	pop	r29
    4556:	cf 91       	pop	r28
    4558:	1f 91       	pop	r17
    455a:	0f 91       	pop	r16
    455c:	08 95       	ret

0000455e <_Z15SpiReadDataContv>:
/**************************************************************************/
/*!

 */
/**************************************************************************/
long SpiReadDataCont(void)
    455e:	ef 92       	push	r14
    4560:	ff 92       	push	r15
    4562:	0f 93       	push	r16
    4564:	1f 93       	push	r17
    4566:	cf 93       	push	r28
    4568:	df 93       	push	r29
  unsigned char *evnt_buff, type;

  DEBUGPRINT_F("\tCC3000: SpiReadDataCont\n\r");

  /* Determine what type of packet we have */
  evnt_buff =  sSpiInformation.pRxPacket;
    456a:	c0 91 64 02 	lds	r28, 0x0264
    456e:	d0 91 65 02 	lds	r29, 0x0265
  data_to_recv = 0;
  STREAM_TO_UINT8((uint8_t *)(evnt_buff + SPI_HEADER_SIZE), HCI_PACKET_TYPE_OFFSET, type);

  switch(type)
    4572:	8d 81       	ldd	r24, Y+5	; 0x05
    4574:	82 30       	cpi	r24, 0x02	; 2
    4576:	21 f0       	breq	.+8      	; 0x4580 <_Z15SpiReadDataContv+0x22>
    4578:	84 30       	cpi	r24, 0x04	; 4
    457a:	09 f0       	breq	.+2      	; 0x457e <_Z15SpiReadDataContv+0x20>
    457c:	47 c0       	rjmp	.+142    	; 0x460c <_Z15SpiReadDataContv+0xae>
    457e:	1b c0       	rjmp	.+54     	; 0x45b6 <_Z15SpiReadDataContv+0x58>
  {
    case HCI_TYPE_DATA:
      {
        /* We need to read the rest of data.. */
        STREAM_TO_UINT16((char *)(evnt_buff + SPI_HEADER_SIZE), HCI_DATA_LENGTH_OFFSET, data_to_recv);
    4580:	ce 01       	movw	r24, r28
    4582:	05 96       	adiw	r24, 0x05	; 5
    4584:	63 e0       	ldi	r22, 0x03	; 3
    4586:	70 e0       	ldi	r23, 0x00	; 0
    4588:	0e 94 c6 02 	call	0x58c	; 0x58c <STREAM_TO_UINT16_f>
    458c:	9c 01       	movw	r18, r24
    458e:	40 e0       	ldi	r20, 0x00	; 0
    4590:	50 e0       	ldi	r21, 0x00	; 0
        if (!((HEADERS_SIZE_EVNT + data_to_recv) & 1))
    4592:	80 fd       	sbrc	r24, 0
    4594:	05 c0       	rjmp	.+10     	; 0x45a0 <_Z15SpiReadDataContv+0x42>
        {
          data_to_recv++;
    4596:	2f 5f       	subi	r18, 0xFF	; 255
    4598:	3f 4f       	sbci	r19, 0xFF	; 255
    459a:	4f 4f       	sbci	r20, 0xFF	; 255
    459c:	5f 4f       	sbci	r21, 0xFF	; 255
    459e:	05 c0       	rjmp	.+10     	; 0x45aa <_Z15SpiReadDataContv+0x4c>
        }

        if (data_to_recv)
    45a0:	21 15       	cp	r18, r1
    45a2:	31 05       	cpc	r19, r1
    45a4:	41 05       	cpc	r20, r1
    45a6:	51 05       	cpc	r21, r1
    45a8:	89 f1       	breq	.+98     	; 0x460c <_Z15SpiReadDataContv+0xae>
        {
          SpiReadDataSynchronous(evnt_buff + HEADERS_SIZE_EVNT, data_to_recv);
    45aa:	ce 01       	movw	r24, r28
    45ac:	0a 96       	adiw	r24, 0x0a	; 10
    45ae:	b9 01       	movw	r22, r18
    45b0:	0e 94 8f 22 	call	0x451e	; 0x451e <_Z22SpiReadDataSynchronousPht>
    45b4:	2b c0       	rjmp	.+86     	; 0x460c <_Z15SpiReadDataContv+0xae>
        break;
      }
    case HCI_TYPE_EVNT:
      {
        /* Calculate the rest length of the data */
        STREAM_TO_UINT8((char *)(evnt_buff + SPI_HEADER_SIZE), HCI_EVENT_LENGTH_OFFSET, data_to_recv);
    45b6:	88 85       	ldd	r24, Y+8	; 0x08
    45b8:	28 2f       	mov	r18, r24
    45ba:	30 e0       	ldi	r19, 0x00	; 0
    45bc:	40 e0       	ldi	r20, 0x00	; 0
    45be:	50 e0       	ldi	r21, 0x00	; 0
        data_to_recv -= 1;
    45c0:	79 01       	movw	r14, r18
    45c2:	8a 01       	movw	r16, r20
    45c4:	08 94       	sec
    45c6:	e1 08       	sbc	r14, r1
    45c8:	f1 08       	sbc	r15, r1
    45ca:	01 09       	sbc	r16, r1
    45cc:	11 09       	sbc	r17, r1

        /* Add padding byte if needed */
        if ((HEADERS_SIZE_EVNT + data_to_recv) & 1)
    45ce:	da 01       	movw	r26, r20
    45d0:	c9 01       	movw	r24, r18
    45d2:	09 96       	adiw	r24, 0x09	; 9
    45d4:	a1 1d       	adc	r26, r1
    45d6:	b1 1d       	adc	r27, r1
    45d8:	80 ff       	sbrs	r24, 0
    45da:	02 c0       	rjmp	.+4      	; 0x45e0 <_Z15SpiReadDataContv+0x82>
    45dc:	79 01       	movw	r14, r18
    45de:	8a 01       	movw	r16, r20
        {
          data_to_recv++;
        }

        if (data_to_recv)
    45e0:	e1 14       	cp	r14, r1
    45e2:	f1 04       	cpc	r15, r1
    45e4:	01 05       	cpc	r16, r1
    45e6:	11 05       	cpc	r17, r1
    45e8:	29 f0       	breq	.+10     	; 0x45f4 <_Z15SpiReadDataContv+0x96>
        {
          SpiReadDataSynchronous(evnt_buff + HEADERS_SIZE_EVNT, data_to_recv);
    45ea:	ce 01       	movw	r24, r28
    45ec:	0a 96       	adiw	r24, 0x0a	; 10
    45ee:	b7 01       	movw	r22, r14
    45f0:	0e 94 8f 22 	call	0x451e	; 0x451e <_Z22SpiReadDataSynchronousPht>
        }

        sSpiInformation.ulSpiState = eSPI_STATE_READ_EOT;
    45f4:	88 e0       	ldi	r24, 0x08	; 8
    45f6:	90 e0       	ldi	r25, 0x00	; 0
    45f8:	a0 e0       	ldi	r26, 0x00	; 0
    45fa:	b0 e0       	ldi	r27, 0x00	; 0
    45fc:	80 93 5e 02 	sts	0x025E, r24
    4600:	90 93 5f 02 	sts	0x025F, r25
    4604:	a0 93 60 02 	sts	0x0260, r26
    4608:	b0 93 61 02 	sts	0x0261, r27
        break;
      }
  }

  return (0);
}
    460c:	60 e0       	ldi	r22, 0x00	; 0
    460e:	70 e0       	ldi	r23, 0x00	; 0
    4610:	80 e0       	ldi	r24, 0x00	; 0
    4612:	90 e0       	ldi	r25, 0x00	; 0
    4614:	df 91       	pop	r29
    4616:	cf 91       	pop	r28
    4618:	1f 91       	pop	r17
    461a:	0f 91       	pop	r16
    461c:	ff 90       	pop	r15
    461e:	ef 90       	pop	r14
    4620:	08 95       	ret

00004622 <_Z20SSIContReadOperationv>:
void SSIContReadOperation(void)
{
  DEBUGPRINT_F("\tCC3000: SpiContReadOperation\n\r");
  
  /* The header was read - continue with  the payload read */
  if (!SpiReadDataCont())
    4622:	0e 94 af 22 	call	0x455e	; 0x455e <_Z15SpiReadDataContv>
    4626:	61 15       	cp	r22, r1
    4628:	71 05       	cpc	r23, r1
    462a:	81 05       	cpc	r24, r1
    462c:	91 05       	cpc	r25, r1
    462e:	11 f4       	brne	.+4      	; 0x4634 <_Z20SSIContReadOperationv+0x12>
  {
    /* All the data was read - finalize handling by switching to teh task
     *  and calling from task Event Handler */
    //DEBUGPRINT_F("SPItrig\n\r");
    SpiTriggerRxProcessing();
    4630:	0e 94 3f 22 	call	0x447e	; 0x447e <_Z22SpiTriggerRxProcessingv>
    4634:	08 95       	ret

00004636 <_Z13SpiReadHeaderv>:
/**************************************************************************/
void SpiReadHeader(void)
{
  DEBUGPRINT_F("\tCC3000: SpiReadHeader\n\r");

  SpiReadDataSynchronous(sSpiInformation.pRxPacket, HEADERS_SIZE_EVNT);
    4636:	80 91 64 02 	lds	r24, 0x0264
    463a:	90 91 65 02 	lds	r25, 0x0265
    463e:	6a e0       	ldi	r22, 0x0A	; 10
    4640:	70 e0       	ldi	r23, 0x00	; 0
    4642:	0e 94 8f 22 	call	0x451e	; 0x451e <_Z22SpiReadDataSynchronousPht>
}
    4646:	08 95       	ret

00004648 <_Z7SPI_IRQv>:
 */
/**************************************************************************/

void SPI_IRQ(void)
{
  ccspi_is_in_irq = 1;
    4648:	81 e0       	ldi	r24, 0x01	; 1
    464a:	80 93 6c 03 	sts	0x036C, r24

  DEBUGPRINT_F("\tCC3000: Entering SPI_IRQ\n\r");
    
  if (sSpiInformation.ulSpiState == eSPI_STATE_POWERUP)
    464e:	80 91 5e 02 	lds	r24, 0x025E
    4652:	90 91 5f 02 	lds	r25, 0x025F
    4656:	a0 91 60 02 	lds	r26, 0x0260
    465a:	b0 91 61 02 	lds	r27, 0x0261
    465e:	00 97       	sbiw	r24, 0x00	; 0
    4660:	a1 05       	cpc	r26, r1
    4662:	b1 05       	cpc	r27, r1
    4664:	69 f4       	brne	.+26     	; 0x4680 <_Z7SPI_IRQv+0x38>
  {
    /* IRQ line was low ... perform a callback on the HCI Layer */
    sSpiInformation.ulSpiState = eSPI_STATE_INITIALIZED;
    4666:	81 e0       	ldi	r24, 0x01	; 1
    4668:	90 e0       	ldi	r25, 0x00	; 0
    466a:	a0 e0       	ldi	r26, 0x00	; 0
    466c:	b0 e0       	ldi	r27, 0x00	; 0
    466e:	80 93 5e 02 	sts	0x025E, r24
    4672:	90 93 5f 02 	sts	0x025F, r25
    4676:	a0 93 60 02 	sts	0x0260, r26
    467a:	b0 93 61 02 	sts	0x0261, r27
    467e:	76 c0       	rjmp	.+236    	; 0x476c <_Z7SPI_IRQv+0x124>
  }
  else if (sSpiInformation.ulSpiState == eSPI_STATE_IDLE)
    4680:	82 30       	cpi	r24, 0x02	; 2
    4682:	91 05       	cpc	r25, r1
    4684:	a1 05       	cpc	r26, r1
    4686:	b1 05       	cpc	r27, r1
    4688:	b1 f5       	brne	.+108    	; 0x46f6 <_Z7SPI_IRQv+0xae>
  {
    //DEBUGPRINT_F("IDLE\n\r");
    sSpiInformation.ulSpiState = eSPI_STATE_READ_IRQ;    
    468a:	86 e0       	ldi	r24, 0x06	; 6
    468c:	90 e0       	ldi	r25, 0x00	; 0
    468e:	a0 e0       	ldi	r26, 0x00	; 0
    4690:	b0 e0       	ldi	r27, 0x00	; 0
    4692:	80 93 5e 02 	sts	0x025E, r24
    4696:	90 93 5f 02 	sts	0x025F, r25
    469a:	a0 93 60 02 	sts	0x0260, r26
    469e:	b0 93 61 02 	sts	0x0261, r27
    /* IRQ line goes down - start reception */

    CC3000_ASSERT_CS;
    46a2:	80 91 0b 02 	lds	r24, 0x020B
    46a6:	60 e0       	ldi	r22, 0x00	; 0
    46a8:	0e 94 54 31 	call	0x62a8	; 0x62a8 <digitalWrite>
    46ac:	8c b5       	in	r24, 0x2c	; 44
    46ae:	80 93 57 02 	sts	0x0257, r24
    46b2:	8d b5       	in	r24, 0x2d	; 45
    46b4:	81 70       	andi	r24, 0x01	; 1
    46b6:	80 93 56 02 	sts	0x0256, r24
    46ba:	80 91 54 02 	lds	r24, 0x0254
    46be:	8c bd       	out	0x2c, r24	; 44
    46c0:	80 91 55 02 	lds	r24, 0x0255
    46c4:	88 23       	and	r24, r24
    46c6:	19 f0       	breq	.+6      	; 0x46ce <_Z7SPI_IRQv+0x86>
    46c8:	8d b5       	in	r24, 0x2d	; 45
    46ca:	81 60       	ori	r24, 0x01	; 1
    46cc:	02 c0       	rjmp	.+4      	; 0x46d2 <_Z7SPI_IRQv+0x8a>
    46ce:	8d b5       	in	r24, 0x2d	; 45
    46d0:	8e 7f       	andi	r24, 0xFE	; 254
    46d2:	8d bd       	out	0x2d, r24	; 45

    // Wait for TX/RX Compete which will come as DMA interrupt
    SpiReadHeader();
    46d4:	0e 94 1b 23 	call	0x4636	; 0x4636 <_Z13SpiReadHeaderv>
    sSpiInformation.ulSpiState = eSPI_STATE_READ_EOT;
    46d8:	88 e0       	ldi	r24, 0x08	; 8
    46da:	90 e0       	ldi	r25, 0x00	; 0
    46dc:	a0 e0       	ldi	r26, 0x00	; 0
    46de:	b0 e0       	ldi	r27, 0x00	; 0
    46e0:	80 93 5e 02 	sts	0x025E, r24
    46e4:	90 93 5f 02 	sts	0x025F, r25
    46e8:	a0 93 60 02 	sts	0x0260, r26
    46ec:	b0 93 61 02 	sts	0x0261, r27
    //DEBUGPRINT_F("SSICont\n\r");
    SSIContReadOperation();
    46f0:	0e 94 11 23 	call	0x4622	; 0x4622 <_Z20SSIContReadOperationv>
    46f4:	3b c0       	rjmp	.+118    	; 0x476c <_Z7SPI_IRQv+0x124>
  }
  else if (sSpiInformation.ulSpiState == eSPI_STATE_WRITE_IRQ)
    46f6:	03 97       	sbiw	r24, 0x03	; 3
    46f8:	a1 05       	cpc	r26, r1
    46fa:	b1 05       	cpc	r27, r1
    46fc:	b9 f5       	brne	.+110    	; 0x476c <_Z7SPI_IRQv+0x124>
  {
    SpiWriteDataSynchronous(sSpiInformation.pTxPacket, sSpiInformation.usTxPacketLength);
    46fe:	60 91 62 02 	lds	r22, 0x0262
    4702:	70 91 63 02 	lds	r23, 0x0263
    4706:	40 91 5a 02 	lds	r20, 0x025A
    470a:	50 91 5b 02 	lds	r21, 0x025B
    470e:	20 e0       	ldi	r18, 0x00	; 0
    4710:	30 e0       	ldi	r19, 0x00	; 0
    4712:	0b c0       	rjmp	.+22     	; 0x472a <_Z7SPI_IRQv+0xe2>
  DEBUGPRINT_F("\tCC3000: SpiWriteDataSynchronous Start\n\r");

  unsigned short loc;
  for (loc = 0; loc < size; loc ++) 
  {
      SPI.transfer(data[loc]);
    4714:	fb 01       	movw	r30, r22
    4716:	e2 0f       	add	r30, r18
    4718:	f3 1f       	adc	r31, r19
    471a:	80 81       	ld	r24, Z
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    471c:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    471e:	0d b4       	in	r0, 0x2d	; 45
    4720:	07 fe       	sbrs	r0, 7
    4722:	fd cf       	rjmp	.-6      	; 0x471e <_Z7SPI_IRQv+0xd6>
    ;
  return SPDR;
    4724:	8e b5       	in	r24, 0x2e	; 46
void SpiWriteDataSynchronous(unsigned char *data, unsigned short size)
{
  DEBUGPRINT_F("\tCC3000: SpiWriteDataSynchronous Start\n\r");

  unsigned short loc;
  for (loc = 0; loc < size; loc ++) 
    4726:	2f 5f       	subi	r18, 0xFF	; 255
    4728:	3f 4f       	sbci	r19, 0xFF	; 255
    472a:	24 17       	cp	r18, r20
    472c:	35 07       	cpc	r19, r21
    472e:	90 f3       	brcs	.-28     	; 0x4714 <_Z7SPI_IRQv+0xcc>
    SSIContReadOperation();
  }
  else if (sSpiInformation.ulSpiState == eSPI_STATE_WRITE_IRQ)
  {
    SpiWriteDataSynchronous(sSpiInformation.pTxPacket, sSpiInformation.usTxPacketLength);
    sSpiInformation.ulSpiState = eSPI_STATE_IDLE;
    4730:	82 e0       	ldi	r24, 0x02	; 2
    4732:	90 e0       	ldi	r25, 0x00	; 0
    4734:	a0 e0       	ldi	r26, 0x00	; 0
    4736:	b0 e0       	ldi	r27, 0x00	; 0
    4738:	80 93 5e 02 	sts	0x025E, r24
    473c:	90 93 5f 02 	sts	0x025F, r25
    4740:	a0 93 60 02 	sts	0x0260, r26
    4744:	b0 93 61 02 	sts	0x0261, r27
    CC3000_DEASSERT_CS;
    4748:	80 91 0b 02 	lds	r24, 0x020B
    474c:	61 e0       	ldi	r22, 0x01	; 1
    474e:	0e 94 54 31 	call	0x62a8	; 0x62a8 <digitalWrite>
    4752:	80 91 57 02 	lds	r24, 0x0257
    4756:	8c bd       	out	0x2c, r24	; 44
    4758:	80 91 56 02 	lds	r24, 0x0256
    475c:	88 23       	and	r24, r24
    475e:	19 f0       	breq	.+6      	; 0x4766 <_Z7SPI_IRQv+0x11e>
    4760:	8d b5       	in	r24, 0x2d	; 45
    4762:	81 60       	ori	r24, 0x01	; 1
    4764:	02 c0       	rjmp	.+4      	; 0x476a <_Z7SPI_IRQv+0x122>
    4766:	8d b5       	in	r24, 0x2d	; 45
    4768:	8e 7f       	andi	r24, 0xFE	; 254
    476a:	8d bd       	out	0x2d, r24	; 45
  }

  DEBUGPRINT_F("\tCC3000: Leaving SPI_IRQ\n\r");

  ccspi_is_in_irq = 0;
    476c:	10 92 6c 03 	sts	0x036C, r1
  return;
}
    4770:	08 95       	ret

00004772 <cc3k_int_poll>:
//
//*****************************************************************************

void cc3k_int_poll()
{
  if (digitalRead(g_irqPin) == LOW && ccspi_is_in_irq == 0 && ccspi_int_enabled != 0) {
    4772:	80 91 0c 02 	lds	r24, 0x020C
    4776:	0e 94 a8 31 	call	0x6350	; 0x6350 <digitalRead>
    477a:	89 2b       	or	r24, r25
    477c:	51 f4       	brne	.+20     	; 0x4792 <cc3k_int_poll+0x20>
    477e:	80 91 6c 03 	lds	r24, 0x036C
    4782:	88 23       	and	r24, r24
    4784:	31 f4       	brne	.+12     	; 0x4792 <cc3k_int_poll+0x20>
    4786:	80 91 6d 03 	lds	r24, 0x036D
    478a:	88 23       	and	r24, r24
    478c:	11 f0       	breq	.+4      	; 0x4792 <cc3k_int_poll+0x20>
    SPI_IRQ();
    478e:	0e 94 24 23 	call	0x4648	; 0x4648 <_Z7SPI_IRQv>
    4792:	08 95       	ret

00004794 <_Z13SpiFirstWritePht>:
/**************************************************************************/
/*!

 */
/**************************************************************************/
long SpiFirstWrite(unsigned char *ucBuf, unsigned short usLength)
    4794:	0f 93       	push	r16
    4796:	1f 93       	push	r17
    4798:	cf 93       	push	r28
    479a:	df 93       	push	r29
    479c:	ec 01       	movw	r28, r24
    479e:	8b 01       	movw	r16, r22
{
  DEBUGPRINT_F("\tCC3000: SpiWriteFirst\n\r");
  
  /* Workaround for the first transaction */
  CC3000_ASSERT_CS;
    47a0:	80 91 0b 02 	lds	r24, 0x020B
    47a4:	60 e0       	ldi	r22, 0x00	; 0
    47a6:	0e 94 54 31 	call	0x62a8	; 0x62a8 <digitalWrite>
    47aa:	8c b5       	in	r24, 0x2c	; 44
    47ac:	80 93 57 02 	sts	0x0257, r24
    47b0:	8d b5       	in	r24, 0x2d	; 45
    47b2:	81 70       	andi	r24, 0x01	; 1
    47b4:	80 93 56 02 	sts	0x0256, r24
    47b8:	80 91 54 02 	lds	r24, 0x0254
    47bc:	8c bd       	out	0x2c, r24	; 44
    47be:	80 91 55 02 	lds	r24, 0x0255
    47c2:	88 23       	and	r24, r24
    47c4:	19 f0       	breq	.+6      	; 0x47cc <_Z13SpiFirstWritePht+0x38>
    47c6:	8d b5       	in	r24, 0x2d	; 45
    47c8:	81 60       	ori	r24, 0x01	; 1
    47ca:	02 c0       	rjmp	.+4      	; 0x47d0 <_Z13SpiFirstWritePht+0x3c>
    47cc:	8d b5       	in	r24, 0x2d	; 45
    47ce:	8e 7f       	andi	r24, 0xFE	; 254
    47d0:	8d bd       	out	0x2d, r24	; 45

  /* delay (stay low) for ~50us */
  delay(1);
    47d2:	61 e0       	ldi	r22, 0x01	; 1
    47d4:	70 e0       	ldi	r23, 0x00	; 0
    47d6:	80 e0       	ldi	r24, 0x00	; 0
    47d8:	90 e0       	ldi	r25, 0x00	; 0
    47da:	0e 94 81 30 	call	0x6102	; 0x6102 <delay>
    47de:	20 e0       	ldi	r18, 0x00	; 0
    47e0:	30 e0       	ldi	r19, 0x00	; 0
  DEBUGPRINT_F("\tCC3000: SpiWriteDataSynchronous Start\n\r");

  unsigned short loc;
  for (loc = 0; loc < size; loc ++) 
  {
      SPI.transfer(data[loc]);
    47e2:	fe 01       	movw	r30, r28
    47e4:	e2 0f       	add	r30, r18
    47e6:	f3 1f       	adc	r31, r19
    47e8:	80 81       	ld	r24, Z
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    47ea:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    47ec:	0d b4       	in	r0, 0x2d	; 45
    47ee:	07 fe       	sbrs	r0, 7
    47f0:	fd cf       	rjmp	.-6      	; 0x47ec <_Z13SpiFirstWritePht+0x58>
    ;
  return SPDR;
    47f2:	8e b5       	in	r24, 0x2e	; 46
void SpiWriteDataSynchronous(unsigned char *data, unsigned short size)
{
  DEBUGPRINT_F("\tCC3000: SpiWriteDataSynchronous Start\n\r");

  unsigned short loc;
  for (loc = 0; loc < size; loc ++) 
    47f4:	2f 5f       	subi	r18, 0xFF	; 255
    47f6:	3f 4f       	sbci	r19, 0xFF	; 255
    47f8:	24 30       	cpi	r18, 0x04	; 4
    47fa:	31 05       	cpc	r19, r1
    47fc:	91 f7       	brne	.-28     	; 0x47e2 <_Z13SpiFirstWritePht+0x4e>
  delay(1);

  /* SPI writes first 4 bytes of data */
  SpiWriteDataSynchronous(ucBuf, 4);

  delay(1);
    47fe:	61 e0       	ldi	r22, 0x01	; 1
    4800:	70 e0       	ldi	r23, 0x00	; 0
    4802:	80 e0       	ldi	r24, 0x00	; 0
    4804:	90 e0       	ldi	r25, 0x00	; 0
    4806:	0e 94 81 30 	call	0x6102	; 0x6102 <delay>

  SpiWriteDataSynchronous(ucBuf + 4, usLength - 4);
    480a:	b8 01       	movw	r22, r16
    480c:	64 50       	subi	r22, 0x04	; 4
    480e:	70 40       	sbci	r23, 0x00	; 0
    4810:	fe 01       	movw	r30, r28
    4812:	20 e0       	ldi	r18, 0x00	; 0
    4814:	30 e0       	ldi	r19, 0x00	; 0
    4816:	09 c0       	rjmp	.+18     	; 0x482a <_Z13SpiFirstWritePht+0x96>
  DEBUGPRINT_F("\tCC3000: SpiWriteDataSynchronous Start\n\r");

  unsigned short loc;
  for (loc = 0; loc < size; loc ++) 
  {
      SPI.transfer(data[loc]);
    4818:	84 81       	ldd	r24, Z+4	; 0x04
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    481a:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    481c:	0d b4       	in	r0, 0x2d	; 45
    481e:	07 fe       	sbrs	r0, 7
    4820:	fd cf       	rjmp	.-6      	; 0x481c <_Z13SpiFirstWritePht+0x88>
    ;
  return SPDR;
    4822:	8e b5       	in	r24, 0x2e	; 46
void SpiWriteDataSynchronous(unsigned char *data, unsigned short size)
{
  DEBUGPRINT_F("\tCC3000: SpiWriteDataSynchronous Start\n\r");

  unsigned short loc;
  for (loc = 0; loc < size; loc ++) 
    4824:	2f 5f       	subi	r18, 0xFF	; 255
    4826:	3f 4f       	sbci	r19, 0xFF	; 255
    4828:	31 96       	adiw	r30, 0x01	; 1
    482a:	26 17       	cp	r18, r22
    482c:	37 07       	cpc	r19, r23
    482e:	a0 f3       	brcs	.-24     	; 0x4818 <_Z13SpiFirstWritePht+0x84>
  delay(1);

  SpiWriteDataSynchronous(ucBuf + 4, usLength - 4);

  /* From this point on - operate in a regular manner */
  sSpiInformation.ulSpiState = eSPI_STATE_IDLE;
    4830:	82 e0       	ldi	r24, 0x02	; 2
    4832:	90 e0       	ldi	r25, 0x00	; 0
    4834:	a0 e0       	ldi	r26, 0x00	; 0
    4836:	b0 e0       	ldi	r27, 0x00	; 0
    4838:	80 93 5e 02 	sts	0x025E, r24
    483c:	90 93 5f 02 	sts	0x025F, r25
    4840:	a0 93 60 02 	sts	0x0260, r26
    4844:	b0 93 61 02 	sts	0x0261, r27

  CC3000_DEASSERT_CS;
    4848:	80 91 0b 02 	lds	r24, 0x020B
    484c:	61 e0       	ldi	r22, 0x01	; 1
    484e:	0e 94 54 31 	call	0x62a8	; 0x62a8 <digitalWrite>
    4852:	80 91 57 02 	lds	r24, 0x0257
    4856:	8c bd       	out	0x2c, r24	; 44
    4858:	80 91 56 02 	lds	r24, 0x0256
    485c:	88 23       	and	r24, r24
    485e:	19 f0       	breq	.+6      	; 0x4866 <_Z13SpiFirstWritePht+0xd2>
    4860:	8d b5       	in	r24, 0x2d	; 45
    4862:	81 60       	ori	r24, 0x01	; 1
    4864:	02 c0       	rjmp	.+4      	; 0x486a <_Z13SpiFirstWritePht+0xd6>
    4866:	8d b5       	in	r24, 0x2d	; 45
    4868:	8e 7f       	andi	r24, 0xFE	; 254
    486a:	8d bd       	out	0x2d, r24	; 45

  return(0);
}
    486c:	60 e0       	ldi	r22, 0x00	; 0
    486e:	70 e0       	ldi	r23, 0x00	; 0
    4870:	80 e0       	ldi	r24, 0x00	; 0
    4872:	90 e0       	ldi	r25, 0x00	; 0
    4874:	df 91       	pop	r29
    4876:	cf 91       	pop	r28
    4878:	1f 91       	pop	r17
    487a:	0f 91       	pop	r16
    487c:	08 95       	ret

0000487e <_Z8SpiWritePht>:
/**************************************************************************/
/*!

 */
/**************************************************************************/
long SpiWrite(unsigned char *pUserBuffer, unsigned short usLength)
    487e:	0f 93       	push	r16
    4880:	1f 93       	push	r17
    4882:	cf 93       	push	r28
    4884:	df 93       	push	r29
    4886:	ec 01       	movw	r28, r24
    4888:	90 e0       	ldi	r25, 0x00	; 0
    488a:	60 ff       	sbrs	r22, 0
    488c:	91 e0       	ldi	r25, 0x01	; 1
  if(!(usLength & 0x0001))
  {
    ucPad++;
  }

  pUserBuffer[0] = WRITE;
    488e:	81 e0       	ldi	r24, 0x01	; 1
    4890:	88 83       	st	Y, r24
  pUserBuffer[1] = HI(usLength + ucPad);
    4892:	9b 01       	movw	r18, r22
    4894:	29 0f       	add	r18, r25
    4896:	31 1d       	adc	r19, r1
    4898:	39 83       	std	Y+1, r19	; 0x01
  pUserBuffer[2] = LO(usLength + ucPad);
    489a:	96 0f       	add	r25, r22
    489c:	9a 83       	std	Y+2, r25	; 0x02
  pUserBuffer[3] = 0;
    489e:	1b 82       	std	Y+3, r1	; 0x03
  pUserBuffer[4] = 0;
    48a0:	1c 82       	std	Y+4, r1	; 0x04
  usLength += (SPI_HEADER_SIZE + ucPad);

  /* The magic number that resides at the end of the TX/RX buffer (1 byte after the allocated size)
   * for the purpose of overrun detection. If the magic number is overwritten - buffer overrun
   * occurred - and we will be stuck here forever! */
  if (wlan_tx_buffer[CC3000_TX_BUFFER_SIZE - 1] != CC3000_BUFFER_MAGIC_NUMBER)
    48a2:	80 91 6b 03 	lds	r24, 0x036B
    48a6:	8e 3d       	cpi	r24, 0xDE	; 222
    48a8:	09 f0       	breq	.+2      	; 0x48ac <_Z8SpiWritePht+0x2e>
    48aa:	ff cf       	rjmp	.-2      	; 0x48aa <_Z8SpiWritePht+0x2c>
  {
    DEBUGPRINT_F("\tCC3000: Error - No magic number found in SpiWrite\n\r");
    while (1);
  }

  if (sSpiInformation.ulSpiState == eSPI_STATE_POWERUP)
    48ac:	80 91 5e 02 	lds	r24, 0x025E
    48b0:	90 91 5f 02 	lds	r25, 0x025F
    48b4:	a0 91 60 02 	lds	r26, 0x0260
    48b8:	b0 91 61 02 	lds	r27, 0x0261
    48bc:	00 97       	sbiw	r24, 0x00	; 0
    48be:	a1 05       	cpc	r26, r1
    48c0:	b1 05       	cpc	r27, r1
    48c2:	09 f4       	brne	.+2      	; 0x48c6 <_Z8SpiWritePht+0x48>
    48c4:	ff cf       	rjmp	.-2      	; 0x48c4 <_Z8SpiWritePht+0x46>
  pUserBuffer[1] = HI(usLength + ucPad);
  pUserBuffer[2] = LO(usLength + ucPad);
  pUserBuffer[3] = 0;
  pUserBuffer[4] = 0;

  usLength += (SPI_HEADER_SIZE + ucPad);
    48c6:	89 01       	movw	r16, r18
    48c8:	0b 5f       	subi	r16, 0xFB	; 251
    48ca:	1f 4f       	sbci	r17, 0xFF	; 255
  if (sSpiInformation.ulSpiState == eSPI_STATE_POWERUP)
  {
    while (sSpiInformation.ulSpiState != eSPI_STATE_INITIALIZED);
  }

  if (sSpiInformation.ulSpiState == eSPI_STATE_INITIALIZED)
    48cc:	01 97       	sbiw	r24, 0x01	; 1
    48ce:	a1 05       	cpc	r26, r1
    48d0:	b1 05       	cpc	r27, r1
    48d2:	29 f4       	brne	.+10     	; 0x48de <_Z8SpiWritePht+0x60>
  {
    /* This is time for first TX/RX transactions over SPI: the IRQ is down - so need to send read buffer size command */
    SpiFirstWrite(pUserBuffer, usLength);
    48d4:	ce 01       	movw	r24, r28
    48d6:	b8 01       	movw	r22, r16
    48d8:	0e 94 ca 23 	call	0x4794	; 0x4794 <_Z13SpiFirstWritePht>
    48dc:	85 c0       	rjmp	.+266    	; 0x49e8 <_Z8SpiWritePht+0x16a>
  }
  else
  {
    /* We need to prevent here race that can occur in case two back to back packets are sent to the
     * device, so the state will move to IDLE and once again to not IDLE due to IRQ */
    tSLInformation.WlanInterruptDisable();
    48de:	e0 91 f2 01 	lds	r30, 0x01F2
    48e2:	f0 91 f3 01 	lds	r31, 0x01F3
    48e6:	09 95       	icall

    while (sSpiInformation.ulSpiState != eSPI_STATE_IDLE);
    48e8:	80 91 5e 02 	lds	r24, 0x025E
    48ec:	90 91 5f 02 	lds	r25, 0x025F
    48f0:	a0 91 60 02 	lds	r26, 0x0260
    48f4:	b0 91 61 02 	lds	r27, 0x0261
    48f8:	02 97       	sbiw	r24, 0x02	; 2
    48fa:	a1 05       	cpc	r26, r1
    48fc:	b1 05       	cpc	r27, r1
    48fe:	09 f0       	breq	.+2      	; 0x4902 <_Z8SpiWritePht+0x84>
    4900:	89 c0       	rjmp	.+274    	; 0x4a14 <_Z8SpiWritePht+0x196>

    sSpiInformation.ulSpiState = eSPI_STATE_WRITE_IRQ;
    4902:	83 e0       	ldi	r24, 0x03	; 3
    4904:	90 e0       	ldi	r25, 0x00	; 0
    4906:	a0 e0       	ldi	r26, 0x00	; 0
    4908:	b0 e0       	ldi	r27, 0x00	; 0
    490a:	80 93 5e 02 	sts	0x025E, r24
    490e:	90 93 5f 02 	sts	0x025F, r25
    4912:	a0 93 60 02 	sts	0x0260, r26
    4916:	b0 93 61 02 	sts	0x0261, r27
    sSpiInformation.pTxPacket = pUserBuffer;
    491a:	d0 93 63 02 	sts	0x0263, r29
    491e:	c0 93 62 02 	sts	0x0262, r28
    sSpiInformation.usTxPacketLength = usLength;
    4922:	10 93 5b 02 	sts	0x025B, r17
    4926:	00 93 5a 02 	sts	0x025A, r16

    /* Assert the CS line and wait till SSI IRQ line is active and then initialize write operation */
    CC3000_ASSERT_CS;
    492a:	80 91 0b 02 	lds	r24, 0x020B
    492e:	60 e0       	ldi	r22, 0x00	; 0
    4930:	0e 94 54 31 	call	0x62a8	; 0x62a8 <digitalWrite>
    4934:	8c b5       	in	r24, 0x2c	; 44
    4936:	80 93 57 02 	sts	0x0257, r24
    493a:	8d b5       	in	r24, 0x2d	; 45
    493c:	81 70       	andi	r24, 0x01	; 1
    493e:	80 93 56 02 	sts	0x0256, r24
    4942:	80 91 54 02 	lds	r24, 0x0254
    4946:	8c bd       	out	0x2c, r24	; 44
    4948:	80 91 55 02 	lds	r24, 0x0255
    494c:	88 23       	and	r24, r24
    494e:	19 f0       	breq	.+6      	; 0x4956 <_Z8SpiWritePht+0xd8>
    4950:	8d b5       	in	r24, 0x2d	; 45
    4952:	81 60       	ori	r24, 0x01	; 1
    4954:	02 c0       	rjmp	.+4      	; 0x495a <_Z8SpiWritePht+0xdc>
    4956:	8d b5       	in	r24, 0x2d	; 45
    4958:	8e 7f       	andi	r24, 0xFE	; 254
    495a:	8d bd       	out	0x2d, r24	; 45

    /* Re-enable IRQ - if it was not disabled - this is not a problem... */
    tSLInformation.WlanInterruptEnable();
    495c:	e0 91 f0 01 	lds	r30, 0x01F0
    4960:	f0 91 f1 01 	lds	r31, 0x01F1
    4964:	09 95       	icall

    /* Check for a missing interrupt between the CS assertion and enabling back the interrupts */
    if (tSLInformation.ReadWlanInterruptPin() == 0)
    4966:	e0 91 ee 01 	lds	r30, 0x01EE
    496a:	f0 91 ef 01 	lds	r31, 0x01EF
    496e:	09 95       	icall
    4970:	61 15       	cp	r22, r1
    4972:	71 05       	cpc	r23, r1
    4974:	81 05       	cpc	r24, r1
    4976:	91 05       	cpc	r25, r1
    4978:	b9 f5       	brne	.+110    	; 0x49e8 <_Z8SpiWritePht+0x16a>
    {
      SpiWriteDataSynchronous(sSpiInformation.pTxPacket, sSpiInformation.usTxPacketLength);
    497a:	60 91 62 02 	lds	r22, 0x0262
    497e:	70 91 63 02 	lds	r23, 0x0263
    4982:	40 91 5a 02 	lds	r20, 0x025A
    4986:	50 91 5b 02 	lds	r21, 0x025B
    498a:	20 e0       	ldi	r18, 0x00	; 0
    498c:	30 e0       	ldi	r19, 0x00	; 0
    498e:	0b c0       	rjmp	.+22     	; 0x49a6 <_Z8SpiWritePht+0x128>
  DEBUGPRINT_F("\tCC3000: SpiWriteDataSynchronous Start\n\r");

  unsigned short loc;
  for (loc = 0; loc < size; loc ++) 
  {
      SPI.transfer(data[loc]);
    4990:	fb 01       	movw	r30, r22
    4992:	e2 0f       	add	r30, r18
    4994:	f3 1f       	adc	r31, r19
    4996:	80 81       	ld	r24, Z
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    4998:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    499a:	0d b4       	in	r0, 0x2d	; 45
    499c:	07 fe       	sbrs	r0, 7
    499e:	fd cf       	rjmp	.-6      	; 0x499a <_Z8SpiWritePht+0x11c>
    ;
  return SPDR;
    49a0:	8e b5       	in	r24, 0x2e	; 46
void SpiWriteDataSynchronous(unsigned char *data, unsigned short size)
{
  DEBUGPRINT_F("\tCC3000: SpiWriteDataSynchronous Start\n\r");

  unsigned short loc;
  for (loc = 0; loc < size; loc ++) 
    49a2:	2f 5f       	subi	r18, 0xFF	; 255
    49a4:	3f 4f       	sbci	r19, 0xFF	; 255
    49a6:	24 17       	cp	r18, r20
    49a8:	35 07       	cpc	r19, r21
    49aa:	90 f3       	brcs	.-28     	; 0x4990 <_Z8SpiWritePht+0x112>
    /* Check for a missing interrupt between the CS assertion and enabling back the interrupts */
    if (tSLInformation.ReadWlanInterruptPin() == 0)
    {
      SpiWriteDataSynchronous(sSpiInformation.pTxPacket, sSpiInformation.usTxPacketLength);

      sSpiInformation.ulSpiState = eSPI_STATE_IDLE;
    49ac:	82 e0       	ldi	r24, 0x02	; 2
    49ae:	90 e0       	ldi	r25, 0x00	; 0
    49b0:	a0 e0       	ldi	r26, 0x00	; 0
    49b2:	b0 e0       	ldi	r27, 0x00	; 0
    49b4:	80 93 5e 02 	sts	0x025E, r24
    49b8:	90 93 5f 02 	sts	0x025F, r25
    49bc:	a0 93 60 02 	sts	0x0260, r26
    49c0:	b0 93 61 02 	sts	0x0261, r27

      CC3000_DEASSERT_CS;
    49c4:	80 91 0b 02 	lds	r24, 0x020B
    49c8:	61 e0       	ldi	r22, 0x01	; 1
    49ca:	0e 94 54 31 	call	0x62a8	; 0x62a8 <digitalWrite>
    49ce:	80 91 57 02 	lds	r24, 0x0257
    49d2:	8c bd       	out	0x2c, r24	; 44
    49d4:	80 91 56 02 	lds	r24, 0x0256
    49d8:	88 23       	and	r24, r24
    49da:	19 f0       	breq	.+6      	; 0x49e2 <_Z8SpiWritePht+0x164>
    49dc:	8d b5       	in	r24, 0x2d	; 45
    49de:	81 60       	ori	r24, 0x01	; 1
    49e0:	02 c0       	rjmp	.+4      	; 0x49e6 <_Z8SpiWritePht+0x168>
    49e2:	8d b5       	in	r24, 0x2d	; 45
    49e4:	8e 7f       	andi	r24, 0xFE	; 254
    49e6:	8d bd       	out	0x2d, r24	; 45
    }
  }

  /* Due to the fact that we are currently implementing a blocking situation
   * here we will wait till end of transaction */
  while (eSPI_STATE_IDLE != sSpiInformation.ulSpiState);
    49e8:	80 91 5e 02 	lds	r24, 0x025E
    49ec:	90 91 5f 02 	lds	r25, 0x025F
    49f0:	a0 91 60 02 	lds	r26, 0x0260
    49f4:	b0 91 61 02 	lds	r27, 0x0261
    49f8:	02 97       	sbiw	r24, 0x02	; 2
    49fa:	a1 05       	cpc	r26, r1
    49fc:	b1 05       	cpc	r27, r1
    49fe:	49 f4       	brne	.+18     	; 0x4a12 <_Z8SpiWritePht+0x194>

  return(0);
}
    4a00:	60 e0       	ldi	r22, 0x00	; 0
    4a02:	70 e0       	ldi	r23, 0x00	; 0
    4a04:	80 e0       	ldi	r24, 0x00	; 0
    4a06:	90 e0       	ldi	r25, 0x00	; 0
    4a08:	df 91       	pop	r29
    4a0a:	cf 91       	pop	r28
    4a0c:	1f 91       	pop	r17
    4a0e:	0f 91       	pop	r16
    4a10:	08 95       	ret
    4a12:	ff cf       	rjmp	.-2      	; 0x4a12 <_Z8SpiWritePht+0x194>
    4a14:	ff cf       	rjmp	.-2      	; 0x4a14 <_Z8SpiWritePht+0x196>

00004a16 <_Z8init_spiv>:
{

  DEBUGPRINT_F("\tCC3000: init_spi\n\r");
  
  /* Set POWER_EN pin to output and disable the CC3000 by default */
  pinMode(g_vbatPin, OUTPUT);
    4a16:	80 91 0d 02 	lds	r24, 0x020D
    4a1a:	61 e0       	ldi	r22, 0x01	; 1
    4a1c:	0e 94 15 31 	call	0x622a	; 0x622a <pinMode>
  digitalWrite(g_vbatPin, 0);
    4a20:	80 91 0d 02 	lds	r24, 0x020D
    4a24:	60 e0       	ldi	r22, 0x00	; 0
    4a26:	0e 94 54 31 	call	0x62a8	; 0x62a8 <digitalWrite>
  delay(500);
    4a2a:	64 ef       	ldi	r22, 0xF4	; 244
    4a2c:	71 e0       	ldi	r23, 0x01	; 1
    4a2e:	80 e0       	ldi	r24, 0x00	; 0
    4a30:	90 e0       	ldi	r25, 0x00	; 0
    4a32:	0e 94 81 30 	call	0x6102	; 0x6102 <delay>

  /* Set CS pin to output (don't de-assert yet) */
  pinMode(g_csPin, OUTPUT);
    4a36:	80 91 0b 02 	lds	r24, 0x020B
    4a3a:	61 e0       	ldi	r22, 0x01	; 1
    4a3c:	0e 94 15 31 	call	0x622a	; 0x622a <pinMode>

  /* Set interrupt/gpio pin to input */
#if defined(INPUT_PULLUP)
  pinMode(g_irqPin, INPUT_PULLUP);
    4a40:	80 91 0c 02 	lds	r24, 0x020C
    4a44:	62 e0       	ldi	r22, 0x02	; 2
    4a46:	0e 94 15 31 	call	0x622a	; 0x622a <pinMode>
#else
  pinMode(g_irqPin, INPUT);
  digitalWrite(g_irqPin, HIGH); // w/weak pullup
#endif

  SpiConfigStoreOld(); // prime ccspi_old* values for DEASSERT
    4a4a:	8c b5       	in	r24, 0x2c	; 44
    4a4c:	80 93 57 02 	sts	0x0257, r24
    4a50:	8d b5       	in	r24, 0x2d	; 45
    4a52:	81 70       	andi	r24, 0x01	; 1
    4a54:	80 93 56 02 	sts	0x0256, r24

  /* Initialise SPI (Mode 1) */
  SPI.begin();
    4a58:	0e 94 8b 02 	call	0x516	; 0x516 <_ZN8SPIClass5beginEv>
  SPI.setDataMode(SPI_MODE1);
    4a5c:	84 e0       	ldi	r24, 0x04	; 4
    4a5e:	0e 94 75 02 	call	0x4ea	; 0x4ea <_ZN8SPIClass11setDataModeEh>
  SPI.setBitOrder(MSBFIRST);
    4a62:	81 e0       	ldi	r24, 0x01	; 1
    4a64:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN8SPIClass11setBitOrderEh>
  SPI.setClockDivider(g_SPIspeed);
    4a68:	80 91 0f 02 	lds	r24, 0x020F
    4a6c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <_ZN8SPIClass15setClockDividerEh>
  
  SpiConfigStoreMy(); // prime ccspi_my* values for ASSERT
    4a70:	8c b5       	in	r24, 0x2c	; 44
    4a72:	80 93 54 02 	sts	0x0254, r24
    4a76:	8d b5       	in	r24, 0x2d	; 45
    4a78:	81 70       	andi	r24, 0x01	; 1
    4a7a:	80 93 55 02 	sts	0x0255, r24
#ifdef SPI_HAS_TRANSACTION
  SPI.usingInterrupt(g_IRQnum);
  digitalWrite(g_csPin, HIGH);  // same as CC3000_DEASSERT_CS, but not
  SpiConfigPop();               // SPI.endTransaction, because none began
#else
  CC3000_DEASSERT_CS;
    4a7e:	80 91 0b 02 	lds	r24, 0x020B
    4a82:	61 e0       	ldi	r22, 0x01	; 1
    4a84:	0e 94 54 31 	call	0x62a8	; 0x62a8 <digitalWrite>
    4a88:	80 91 57 02 	lds	r24, 0x0257
    4a8c:	8c bd       	out	0x2c, r24	; 44
    4a8e:	80 91 56 02 	lds	r24, 0x0256
    4a92:	88 23       	and	r24, r24
    4a94:	19 f0       	breq	.+6      	; 0x4a9c <_Z8init_spiv+0x86>
    4a96:	8d b5       	in	r24, 0x2d	; 45
    4a98:	81 60       	ori	r24, 0x01	; 1
    4a9a:	02 c0       	rjmp	.+4      	; 0x4aa0 <_Z8init_spiv+0x8a>
    4a9c:	8d b5       	in	r24, 0x2d	; 45
    4a9e:	8e 7f       	andi	r24, 0xFE	; 254
    4aa0:	8d bd       	out	0x2d, r24	; 45
  /* ToDo: Configure IRQ interrupt! */

  DEBUGPRINT_F("\tCC3000: Finished init_spi\n\r");
  
  return(ESUCCESS);
}
    4aa2:	80 e0       	ldi	r24, 0x00	; 0
    4aa4:	90 e0       	ldi	r25, 0x00	; 0
    4aa6:	08 95       	ret

00004aa8 <_Z7SpiOpenPFvPvE>:
/**************************************************************************/
/*!

 */
/**************************************************************************/
void SpiOpen(gcSpiHandleRx pfRxHandler)
    4aa8:	cf 93       	push	r28
    4aaa:	df 93       	push	r29
{
  DEBUGPRINT_F("\tCC3000: SpiOpen");
  
  sSpiInformation.ulSpiState = eSPI_STATE_POWERUP;
    4aac:	10 92 5e 02 	sts	0x025E, r1
    4ab0:	10 92 5f 02 	sts	0x025F, r1
    4ab4:	10 92 60 02 	sts	0x0260, r1
    4ab8:	10 92 61 02 	sts	0x0261, r1

  memset(spi_buffer, 0, sizeof(spi_buffer));
    4abc:	a6 e6       	ldi	r26, 0x66	; 102
    4abe:	b2 e0       	ldi	r27, 0x02	; 2
    4ac0:	23 e8       	ldi	r18, 0x83	; 131
    4ac2:	ed 01       	movw	r28, r26
    4ac4:	e2 2f       	mov	r30, r18
    4ac6:	19 92       	st	Y+, r1
    4ac8:	ea 95       	dec	r30
    4aca:	e9 f7       	brne	.-6      	; 0x4ac6 <_Z7SpiOpenPFvPvE+0x1e>
  memset(wlan_tx_buffer, 0, sizeof(wlan_tx_buffer));
    4acc:	e9 ee       	ldi	r30, 0xE9	; 233
    4ace:	f2 e0       	ldi	r31, 0x02	; 2
    4ad0:	ef 01       	movw	r28, r30
    4ad2:	19 92       	st	Y+, r1
    4ad4:	2a 95       	dec	r18
    4ad6:	e9 f7       	brne	.-6      	; 0x4ad2 <_Z7SpiOpenPFvPvE+0x2a>

  sSpiInformation.SPIRxHandler      = pfRxHandler;
    4ad8:	90 93 59 02 	sts	0x0259, r25
    4adc:	80 93 58 02 	sts	0x0258, r24
  sSpiInformation.usTxPacketLength  = 0;
    4ae0:	10 92 5b 02 	sts	0x025B, r1
    4ae4:	10 92 5a 02 	sts	0x025A, r1
  sSpiInformation.pTxPacket         = NULL;
    4ae8:	10 92 63 02 	sts	0x0263, r1
    4aec:	10 92 62 02 	sts	0x0262, r1
  sSpiInformation.pRxPacket         = (unsigned char *)spi_buffer;
    4af0:	b0 93 65 02 	sts	0x0265, r27
    4af4:	a0 93 64 02 	sts	0x0264, r26
  sSpiInformation.usRxPacketLength  = 0;
    4af8:	10 92 5d 02 	sts	0x025D, r1
    4afc:	10 92 5c 02 	sts	0x025C, r1
  
  spi_buffer[CC3000_RX_BUFFER_SIZE - 1]     = CC3000_BUFFER_MAGIC_NUMBER;
    4b00:	8e ed       	ldi	r24, 0xDE	; 222
    4b02:	80 93 e8 02 	sts	0x02E8, r24
  wlan_tx_buffer[CC3000_TX_BUFFER_SIZE - 1] = CC3000_BUFFER_MAGIC_NUMBER;
    4b06:	80 93 6b 03 	sts	0x036B, r24

  /* Enable interrupt on the GPIO pin of WLAN IRQ */
  tSLInformation.WlanInterruptEnable();
    4b0a:	e0 91 f0 01 	lds	r30, 0x01F0
    4b0e:	f0 91 f1 01 	lds	r31, 0x01F1
    4b12:	09 95       	icall

  DEBUGPRINT_F("\tCC3000: Finished SpiOpen\n\r");
}
    4b14:	df 91       	pop	r29
    4b16:	cf 91       	pop	r28
    4b18:	08 95       	ret

00004b1a <_GLOBAL__I_cc3000>:
    Serial.print(F("\nDHCPsrv: ")); cc3000.printIPdotsRev(dhcpserv);
    Serial.print(F("\nDNSserv: ")); cc3000.printIPdotsRev(dnsserv);
    Serial.println();
    return true;
  }
}
    4b1a:	ef 92       	push	r14
    4b1c:	ff 92       	push	r15
    4b1e:	0f 93       	push	r16
    4b20:	8f e1       	ldi	r24, 0x1F	; 31
    4b22:	95 e0       	ldi	r25, 0x05	; 5
    4b24:	60 e0       	ldi	r22, 0x00	; 0
    4b26:	40 e0       	ldi	r20, 0x00	; 0
    4b28:	20 e0       	ldi	r18, 0x00	; 0
    4b2a:	00 e0       	ldi	r16, 0x00	; 0
    4b2c:	0e 94 e7 2b 	call	0x57ce	; 0x57ce <_ZN9IPAddressC1Ehhhh>
#define ADAFRUIT_CC3000_CS    10
// Use hardware SPI for the remaining pins
// On an UNO, SCK = 13, MISO = 12, and MOSI = 11

Adafruit_CC3000 cc3000 = Adafruit_CC3000(ADAFRUIT_CC3000_CS, ADAFRUIT_CC3000_IRQ, ADAFRUIT_CC3000_VBAT,
                                         SPI_CLOCK_DIVIDER); // you can change this clock speed
    4b30:	8e e6       	ldi	r24, 0x6E	; 110
    4b32:	93 e0       	ldi	r25, 0x03	; 3
    4b34:	6a e0       	ldi	r22, 0x0A	; 10
    4b36:	43 e0       	ldi	r20, 0x03	; 3
    4b38:	25 e0       	ldi	r18, 0x05	; 5
    4b3a:	04 e0       	ldi	r16, 0x04	; 4
    4b3c:	3d ea       	ldi	r19, 0xAD	; 173
    4b3e:	e3 2e       	mov	r14, r19
    4b40:	35 e0       	ldi	r19, 0x05	; 5
    4b42:	f3 2e       	mov	r15, r19
    4b44:	0e 94 94 15 	call	0x2b28	; 0x2b28 <_ZN15Adafruit_CC3000C1EhhhhP5Print>

#define TIMEOUT_MS            500    // Amount of time in milliseconds to wait for
                                     // an incoming request to finish.  Don't set this
                                     // too high or your server could be slow to respond.

Adafruit_CC3000_Server httpServer(LISTEN_PORT);
    4b48:	8f e6       	ldi	r24, 0x6F	; 111
    4b4a:	93 e0       	ldi	r25, 0x03	; 3
    4b4c:	60 e5       	ldi	r22, 0x50	; 80
    4b4e:	70 e0       	ldi	r23, 0x00	; 0
    4b50:	0e 94 9c 21 	call	0x4338	; 0x4338 <_ZN22Adafruit_CC3000_ServerC1Ej>
    Serial.print(F("\nDHCPsrv: ")); cc3000.printIPdotsRev(dhcpserv);
    Serial.print(F("\nDNSserv: ")); cc3000.printIPdotsRev(dnsserv);
    Serial.println();
    return true;
  }
}
    4b54:	0f 91       	pop	r16
    4b56:	ff 90       	pop	r15
    4b58:	ef 90       	pop	r14
    4b5a:	08 95       	ret

00004b5c <displayConnectionDetails>:
  if (linepath != NULL)
    strncpy(path, linepath, MAX_PATH);
}

// Tries to read the IP address and other connection details
bool displayConnectionDetails(void)
    4b5c:	ef 92       	push	r14
    4b5e:	ff 92       	push	r15
    4b60:	0f 93       	push	r16
    4b62:	1f 93       	push	r17
    4b64:	df 93       	push	r29
    4b66:	cf 93       	push	r28
    4b68:	cd b7       	in	r28, 0x3d	; 61
    4b6a:	de b7       	in	r29, 0x3e	; 62
    4b6c:	64 97       	sbiw	r28, 0x14	; 20
    4b6e:	0f b6       	in	r0, 0x3f	; 63
    4b70:	f8 94       	cli
    4b72:	de bf       	out	0x3e, r29	; 62
    4b74:	0f be       	out	0x3f, r0	; 63
    4b76:	cd bf       	out	0x3d, r28	; 61
{
  uint32_t ipAddress, netmask, gateway, dhcpserv, dnsserv;

  if(!cc3000.getIPAddress(&ipAddress, &netmask, &gateway, &dhcpserv, &dnsserv))
    4b78:	8e e6       	ldi	r24, 0x6E	; 110
    4b7a:	93 e0       	ldi	r25, 0x03	; 3
    4b7c:	be 01       	movw	r22, r28
    4b7e:	6f 5f       	subi	r22, 0xFF	; 255
    4b80:	7f 4f       	sbci	r23, 0xFF	; 255
    4b82:	ae 01       	movw	r20, r28
    4b84:	4b 5f       	subi	r20, 0xFB	; 251
    4b86:	5f 4f       	sbci	r21, 0xFF	; 255
    4b88:	9e 01       	movw	r18, r28
    4b8a:	27 5f       	subi	r18, 0xF7	; 247
    4b8c:	3f 4f       	sbci	r19, 0xFF	; 255
    4b8e:	8e 01       	movw	r16, r28
    4b90:	03 5f       	subi	r16, 0xF3	; 243
    4b92:	1f 4f       	sbci	r17, 0xFF	; 255
    4b94:	e1 e1       	ldi	r30, 0x11	; 17
    4b96:	ee 2e       	mov	r14, r30
    4b98:	f1 2c       	mov	r15, r1
    4b9a:	ec 0e       	add	r14, r28
    4b9c:	fd 1e       	adc	r15, r29
    4b9e:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <_ZN15Adafruit_CC300012getIPAddressEPmS0_S0_S0_S0_>
    4ba2:	88 23       	and	r24, r24
    4ba4:	41 f4       	brne	.+16     	; 0x4bb6 <displayConnectionDetails+0x5a>
  {
    Serial.println(F("Unable to retrieve the IP Address!\r\n"));
    4ba6:	8d ea       	ldi	r24, 0xAD	; 173
    4ba8:	95 e0       	ldi	r25, 0x05	; 5
    4baa:	6a ea       	ldi	r22, 0xAA	; 170
    4bac:	70 e0       	ldi	r23, 0x00	; 0
    4bae:	0e 94 cf 2c 	call	0x599e	; 0x599e <_ZN5Print7printlnEPK19__FlashStringHelper>
    4bb2:	80 e0       	ldi	r24, 0x00	; 0
    4bb4:	4b c0       	rjmp	.+150    	; 0x4c4c <displayConnectionDetails+0xf0>
    return false;
  }
  else
  {
    Serial.print(F("\nIP Addr: ")); cc3000.printIPdotsRev(ipAddress);
    4bb6:	8d ea       	ldi	r24, 0xAD	; 173
    4bb8:	95 e0       	ldi	r25, 0x05	; 5
    4bba:	6f e9       	ldi	r22, 0x9F	; 159
    4bbc:	70 e0       	ldi	r23, 0x00	; 0
    4bbe:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN5Print5printEPK19__FlashStringHelper>
    4bc2:	49 81       	ldd	r20, Y+1	; 0x01
    4bc4:	5a 81       	ldd	r21, Y+2	; 0x02
    4bc6:	6b 81       	ldd	r22, Y+3	; 0x03
    4bc8:	7c 81       	ldd	r23, Y+4	; 0x04
    4bca:	8e e6       	ldi	r24, 0x6E	; 110
    4bcc:	93 e0       	ldi	r25, 0x03	; 3
    4bce:	0e 94 34 1c 	call	0x3868	; 0x3868 <_ZN15Adafruit_CC300014printIPdotsRevEm>
    Serial.print(F("\nNetmask: ")); cc3000.printIPdotsRev(netmask);
    4bd2:	8d ea       	ldi	r24, 0xAD	; 173
    4bd4:	95 e0       	ldi	r25, 0x05	; 5
    4bd6:	64 e9       	ldi	r22, 0x94	; 148
    4bd8:	70 e0       	ldi	r23, 0x00	; 0
    4bda:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN5Print5printEPK19__FlashStringHelper>
    4bde:	4d 81       	ldd	r20, Y+5	; 0x05
    4be0:	5e 81       	ldd	r21, Y+6	; 0x06
    4be2:	6f 81       	ldd	r22, Y+7	; 0x07
    4be4:	78 85       	ldd	r23, Y+8	; 0x08
    4be6:	8e e6       	ldi	r24, 0x6E	; 110
    4be8:	93 e0       	ldi	r25, 0x03	; 3
    4bea:	0e 94 34 1c 	call	0x3868	; 0x3868 <_ZN15Adafruit_CC300014printIPdotsRevEm>
    Serial.print(F("\nGateway: ")); cc3000.printIPdotsRev(gateway);
    4bee:	8d ea       	ldi	r24, 0xAD	; 173
    4bf0:	95 e0       	ldi	r25, 0x05	; 5
    4bf2:	69 e8       	ldi	r22, 0x89	; 137
    4bf4:	70 e0       	ldi	r23, 0x00	; 0
    4bf6:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN5Print5printEPK19__FlashStringHelper>
    4bfa:	49 85       	ldd	r20, Y+9	; 0x09
    4bfc:	5a 85       	ldd	r21, Y+10	; 0x0a
    4bfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c00:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c02:	8e e6       	ldi	r24, 0x6E	; 110
    4c04:	93 e0       	ldi	r25, 0x03	; 3
    4c06:	0e 94 34 1c 	call	0x3868	; 0x3868 <_ZN15Adafruit_CC300014printIPdotsRevEm>
    Serial.print(F("\nDHCPsrv: ")); cc3000.printIPdotsRev(dhcpserv);
    4c0a:	8d ea       	ldi	r24, 0xAD	; 173
    4c0c:	95 e0       	ldi	r25, 0x05	; 5
    4c0e:	6e e7       	ldi	r22, 0x7E	; 126
    4c10:	70 e0       	ldi	r23, 0x00	; 0
    4c12:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN5Print5printEPK19__FlashStringHelper>
    4c16:	4d 85       	ldd	r20, Y+13	; 0x0d
    4c18:	5e 85       	ldd	r21, Y+14	; 0x0e
    4c1a:	6f 85       	ldd	r22, Y+15	; 0x0f
    4c1c:	78 89       	ldd	r23, Y+16	; 0x10
    4c1e:	8e e6       	ldi	r24, 0x6E	; 110
    4c20:	93 e0       	ldi	r25, 0x03	; 3
    4c22:	0e 94 34 1c 	call	0x3868	; 0x3868 <_ZN15Adafruit_CC300014printIPdotsRevEm>
    Serial.print(F("\nDNSserv: ")); cc3000.printIPdotsRev(dnsserv);
    4c26:	8d ea       	ldi	r24, 0xAD	; 173
    4c28:	95 e0       	ldi	r25, 0x05	; 5
    4c2a:	63 e7       	ldi	r22, 0x73	; 115
    4c2c:	70 e0       	ldi	r23, 0x00	; 0
    4c2e:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN5Print5printEPK19__FlashStringHelper>
    4c32:	49 89       	ldd	r20, Y+17	; 0x11
    4c34:	5a 89       	ldd	r21, Y+18	; 0x12
    4c36:	6b 89       	ldd	r22, Y+19	; 0x13
    4c38:	7c 89       	ldd	r23, Y+20	; 0x14
    4c3a:	8e e6       	ldi	r24, 0x6E	; 110
    4c3c:	93 e0       	ldi	r25, 0x03	; 3
    4c3e:	0e 94 34 1c 	call	0x3868	; 0x3868 <_ZN15Adafruit_CC300014printIPdotsRevEm>
    Serial.println();
    4c42:	8d ea       	ldi	r24, 0xAD	; 173
    4c44:	95 e0       	ldi	r25, 0x05	; 5
    4c46:	0e 94 af 2c 	call	0x595e	; 0x595e <_ZN5Print7printlnEv>
    4c4a:	81 e0       	ldi	r24, 0x01	; 1
    return true;
  }
}
    4c4c:	64 96       	adiw	r28, 0x14	; 20
    4c4e:	0f b6       	in	r0, 0x3f	; 63
    4c50:	f8 94       	cli
    4c52:	de bf       	out	0x3e, r29	; 62
    4c54:	0f be       	out	0x3f, r0	; 63
    4c56:	cd bf       	out	0x3d, r28	; 61
    4c58:	cf 91       	pop	r28
    4c5a:	df 91       	pop	r29
    4c5c:	1f 91       	pop	r17
    4c5e:	0f 91       	pop	r16
    4c60:	ff 90       	pop	r15
    4c62:	ef 90       	pop	r14
    4c64:	08 95       	ret

00004c66 <parseFirstLine>:
  }
  return false;
}

// Parse the action and path from the first line of an HTTP request.
void parseFirstLine(char* line, char* action, char* path) {
    4c66:	0f 93       	push	r16
    4c68:	1f 93       	push	r17
    4c6a:	cf 93       	push	r28
    4c6c:	df 93       	push	r29
    4c6e:	eb 01       	movw	r28, r22
    4c70:	8a 01       	movw	r16, r20
  // Parse first word up to whitespace as action.bool displayConnectionDetails(void)
  char* lineaction = strtok(line, " ");
    4c72:	60 e1       	ldi	r22, 0x10	; 16
    4c74:	71 e0       	ldi	r23, 0x01	; 1
    4c76:	0e 94 79 33 	call	0x66f2	; 0x66f2 <strtok>
    4c7a:	bc 01       	movw	r22, r24
  if (lineaction != NULL)
    4c7c:	00 97       	sbiw	r24, 0x00	; 0
    4c7e:	29 f0       	breq	.+10     	; 0x4c8a <parseFirstLine+0x24>
    strncpy(action, lineaction, MAX_ACTION);
    4c80:	ce 01       	movw	r24, r28
    4c82:	4a e0       	ldi	r20, 0x0A	; 10
    4c84:	50 e0       	ldi	r21, 0x00	; 0
    4c86:	0e 94 a5 33 	call	0x674a	; 0x674a <strncpy>
  // Parse second word up to whitespace as path.
  char* linepath = strtok(NULL, " ");
    4c8a:	80 e0       	ldi	r24, 0x00	; 0
    4c8c:	90 e0       	ldi	r25, 0x00	; 0
    4c8e:	60 e1       	ldi	r22, 0x10	; 16
    4c90:	71 e0       	ldi	r23, 0x01	; 1
    4c92:	0e 94 79 33 	call	0x66f2	; 0x66f2 <strtok>
    4c96:	bc 01       	movw	r22, r24
  if (linepath != NULL)
    4c98:	00 97       	sbiw	r24, 0x00	; 0
    4c9a:	29 f0       	breq	.+10     	; 0x4ca6 <parseFirstLine+0x40>
    strncpy(path, linepath, MAX_PATH);
    4c9c:	c8 01       	movw	r24, r16
    4c9e:	40 e4       	ldi	r20, 0x40	; 64
    4ca0:	50 e0       	ldi	r21, 0x00	; 0
    4ca2:	0e 94 a5 33 	call	0x674a	; 0x674a <strncpy>
}
    4ca6:	df 91       	pop	r29
    4ca8:	cf 91       	pop	r28
    4caa:	1f 91       	pop	r17
    4cac:	0f 91       	pop	r16
    4cae:	08 95       	ret

00004cb0 <parseRequest>:
//  [method] [path] [version] \r\n
//  Header_key_1: Header_value_1 \r\n
//  ...
//  Header_key_n: Header_value_n \r\n
//  \r\n
bool parseRequest(uint8_t* buf, int bufSize, char* action, char* path) {
    4cb0:	dc 01       	movw	r26, r24
  // Check if the request ends with \r\n to signal end of first line.
  if (bufSize < 2)
    4cb2:	62 30       	cpi	r22, 0x02	; 2
    4cb4:	71 05       	cpc	r23, r1
    4cb6:	9c f0       	brlt	.+38     	; 0x4cde <parseRequest+0x2e>
    return false;
  if (buf[bufSize-2] == '\r' && buf[bufSize-1] == '\n') {
    4cb8:	fc 01       	movw	r30, r24
    4cba:	e6 0f       	add	r30, r22
    4cbc:	f7 1f       	adc	r31, r23
    4cbe:	32 97       	sbiw	r30, 0x02	; 2
    4cc0:	80 81       	ld	r24, Z
    4cc2:	32 96       	adiw	r30, 0x02	; 2
    4cc4:	8d 30       	cpi	r24, 0x0D	; 13
    4cc6:	59 f4       	brne	.+22     	; 0x4cde <parseRequest+0x2e>
    4cc8:	31 97       	sbiw	r30, 0x01	; 1
    4cca:	80 81       	ld	r24, Z
    4ccc:	8a 30       	cpi	r24, 0x0A	; 10
    4cce:	39 f4       	brne	.+14     	; 0x4cde <parseRequest+0x2e>
    parseFirstLine((char*)buf, action, path);
    4cd0:	cd 01       	movw	r24, r26
    4cd2:	ba 01       	movw	r22, r20
    4cd4:	a9 01       	movw	r20, r18
    4cd6:	0e 94 33 26 	call	0x4c66	; 0x4c66 <parseFirstLine>
    4cda:	81 e0       	ldi	r24, 0x01	; 1
    4cdc:	08 95       	ret
    return true;
    4cde:	80 e0       	ldi	r24, 0x00	; 0
  }
  return false;
}
    4ce0:	08 95       	ret

00004ce2 <loop>:
  httpServer.begin();

  Serial.println(F("Listening for connections..."));
}

void loop(void)
    4ce2:	af 92       	push	r10
    4ce4:	bf 92       	push	r11
    4ce6:	cf 92       	push	r12
    4ce8:	df 92       	push	r13
    4cea:	ef 92       	push	r14
    4cec:	ff 92       	push	r15
    4cee:	0f 93       	push	r16
    4cf0:	1f 93       	push	r17
    4cf2:	df 93       	push	r29
    4cf4:	cf 93       	push	r28
    4cf6:	cd b7       	in	r28, 0x3d	; 61
    4cf8:	de b7       	in	r29, 0x3e	; 62
    4cfa:	ac 97       	sbiw	r28, 0x2c	; 44
    4cfc:	0f b6       	in	r0, 0x3f	; 63
    4cfe:	f8 94       	cli
    4d00:	de bf       	out	0x3e, r29	; 62
    4d02:	0f be       	out	0x3f, r0	; 63
    4d04:	cd bf       	out	0x3d, r28	; 61
{
  // Try to get a client which is connected.
  Adafruit_CC3000_ClientRef client = httpServer.available();
    4d06:	8e 01       	movw	r16, r28
    4d08:	01 5e       	subi	r16, 0xE1	; 225
    4d0a:	1f 4f       	sbci	r17, 0xFF	; 255
    4d0c:	c8 01       	movw	r24, r16
    4d0e:	6f e6       	ldi	r22, 0x6F	; 111
    4d10:	73 e0       	ldi	r23, 0x03	; 3
    4d12:	0e 94 b7 20 	call	0x416e	; 0x416e <_ZN22Adafruit_CC3000_Server9availableEv>
  if (client) {
    4d16:	c8 01       	movw	r24, r16
    4d18:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_ZN25Adafruit_CC3000_ClientRefcvbEv>
    4d1c:	88 23       	and	r24, r24
    4d1e:	09 f4       	brne	.+2      	; 0x4d22 <loop+0x40>
    4d20:	70 c1       	rjmp	.+736    	; 0x5002 <loop+0x320>
    Serial.println(F("Client connected."));
    4d22:	8d ea       	ldi	r24, 0xAD	; 173
    4d24:	95 e0       	ldi	r25, 0x05	; 5
    4d26:	6d e4       	ldi	r22, 0x4D	; 77
    4d28:	72 e0       	ldi	r23, 0x02	; 2
    4d2a:	0e 94 cf 2c 	call	0x599e	; 0x599e <_ZN5Print7printlnEPK19__FlashStringHelper>
    // Process this request until it completes or times out.
    // Note that this is explicitly limited to handling one request at a time!

    // Clear the incoming data buffer and point to the beginning of it.
    bufindex = 0;
    4d2e:	10 92 d2 04 	sts	0x04D2, r1
    4d32:	10 92 d1 04 	sts	0x04D1, r1
    memset(&buffer, 0, sizeof(buffer));
    4d36:	8f e5       	ldi	r24, 0x5F	; 95
    4d38:	e2 e7       	ldi	r30, 0x72	; 114
    4d3a:	f4 e0       	ldi	r31, 0x04	; 4
    4d3c:	df 01       	movw	r26, r30
    4d3e:	1d 92       	st	X+, r1
    4d40:	8a 95       	dec	r24
    4d42:	e9 f7       	brne	.-6      	; 0x4d3e <loop+0x5c>

    // Clear action and path strings.
    memset(&action, 0, sizeof(action));
    4d44:	8b e0       	ldi	r24, 0x0B	; 11
    4d46:	e3 ed       	ldi	r30, 0xD3	; 211
    4d48:	f4 e0       	ldi	r31, 0x04	; 4
    4d4a:	df 01       	movw	r26, r30
    4d4c:	1d 92       	st	X+, r1
    4d4e:	8a 95       	dec	r24
    4d50:	e9 f7       	brne	.-6      	; 0x4d4c <loop+0x6a>
    memset(&path,   0, sizeof(path));
    4d52:	81 e4       	ldi	r24, 0x41	; 65
    4d54:	ee ed       	ldi	r30, 0xDE	; 222
    4d56:	f4 e0       	ldi	r31, 0x04	; 4
    4d58:	df 01       	movw	r26, r30
    4d5a:	1d 92       	st	X+, r1
    4d5c:	8a 95       	dec	r24
    4d5e:	e9 f7       	brne	.-6      	; 0x4d5a <loop+0x78>

    // Set a timeout for reading all the incoming data.
    unsigned long endtime = millis() + TIMEOUT_MS;
    4d60:	0e 94 73 30 	call	0x60e6	; 0x60e6 <millis>
    4d64:	6b 01       	movw	r12, r22
    4d66:	7c 01       	movw	r14, r24
    4d68:	84 ef       	ldi	r24, 0xF4	; 244
    4d6a:	91 e0       	ldi	r25, 0x01	; 1
    4d6c:	a0 e0       	ldi	r26, 0x00	; 0
    4d6e:	b0 e0       	ldi	r27, 0x00	; 0
    4d70:	c8 0e       	add	r12, r24
    4d72:	d9 1e       	adc	r13, r25
    4d74:	ea 1e       	adc	r14, r26
    4d76:	fb 1e       	adc	r15, r27

    // Read all the incoming data until it can be parsed or the timeout expires.
    bool parsed = false;
    while (!parsed && (millis() < endtime) && (bufindex < BUFFER_SIZE)) {
      if (client.available()) {
    4d78:	c8 01       	movw	r24, r16
    4d7a:	b0 2e       	mov	r11, r16
    4d7c:	a9 2e       	mov	r10, r25
    4d7e:	21 c0       	rjmp	.+66     	; 0x4dc2 <loop+0xe0>
        buffer[bufindex++] = client.read();
    4d80:	00 91 d1 04 	lds	r16, 0x04D1
    4d84:	10 91 d2 04 	lds	r17, 0x04D2
    4d88:	8b 2d       	mov	r24, r11
    4d8a:	9a 2d       	mov	r25, r10
    4d8c:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <_ZN25Adafruit_CC3000_ClientRef4readEv>
    4d90:	f8 01       	movw	r30, r16
    4d92:	ee 58       	subi	r30, 0x8E	; 142
    4d94:	fb 4f       	sbci	r31, 0xFB	; 251
    4d96:	80 83       	st	Z, r24
    4d98:	0f 5f       	subi	r16, 0xFF	; 255
    4d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    4d9c:	10 93 d2 04 	sts	0x04D2, r17
    4da0:	00 93 d1 04 	sts	0x04D1, r16
      }
      parsed = parseRequest(buffer, bufindex, action, path);
    4da4:	60 91 d1 04 	lds	r22, 0x04D1
    4da8:	70 91 d2 04 	lds	r23, 0x04D2
    4dac:	82 e7       	ldi	r24, 0x72	; 114
    4dae:	94 e0       	ldi	r25, 0x04	; 4
    4db0:	43 ed       	ldi	r20, 0xD3	; 211
    4db2:	54 e0       	ldi	r21, 0x04	; 4
    4db4:	2e ed       	ldi	r18, 0xDE	; 222
    4db6:	34 e0       	ldi	r19, 0x04	; 4
    4db8:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <parseRequest>
    // Set a timeout for reading all the incoming data.
    unsigned long endtime = millis() + TIMEOUT_MS;

    // Read all the incoming data until it can be parsed or the timeout expires.
    bool parsed = false;
    while (!parsed && (millis() < endtime) && (bufindex < BUFFER_SIZE)) {
    4dbc:	88 23       	and	r24, r24
    4dbe:	09 f0       	breq	.+2      	; 0x4dc2 <loop+0xe0>
    4dc0:	f5 c0       	rjmp	.+490    	; 0x4fac <loop+0x2ca>
    4dc2:	0e 94 73 30 	call	0x60e6	; 0x60e6 <millis>
    4dc6:	6c 15       	cp	r22, r12
    4dc8:	7d 05       	cpc	r23, r13
    4dca:	8e 05       	cpc	r24, r14
    4dcc:	9f 05       	cpc	r25, r15
    4dce:	08 f0       	brcs	.+2      	; 0x4dd2 <loop+0xf0>
    4dd0:	cd c0       	rjmp	.+410    	; 0x4f6c <loop+0x28a>
    4dd2:	80 91 d1 04 	lds	r24, 0x04D1
    4dd6:	90 91 d2 04 	lds	r25, 0x04D2
    4dda:	8e 35       	cpi	r24, 0x5E	; 94
    4ddc:	91 05       	cpc	r25, r1
    4dde:	0c f0       	brlt	.+2      	; 0x4de2 <loop+0x100>
    4de0:	c5 c0       	rjmp	.+394    	; 0x4f6c <loop+0x28a>
      if (client.available()) {
    4de2:	8b 2d       	mov	r24, r11
    4de4:	9a 2d       	mov	r25, r10
    4de6:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <_ZN25Adafruit_CC3000_ClientRef9availableEv>
    4dea:	89 2b       	or	r24, r25
    4dec:	d9 f2       	breq	.-74     	; 0x4da4 <loop+0xc2>
    4dee:	c8 cf       	rjmp	.-112    	; 0x4d80 <loop+0x9e>
      Serial.print(F("Path: ")); Serial.println(path);
      // Check the action to see if it was a GET request.
      if (strcmp(action, "GET") == 0) {
        // Respond with the path that was accessed.
        // First send the success response code.
    	  client.fastrprintln(F("HTTP/1.1 200 OK"));
    4df0:	c8 01       	movw	r24, r16
    4df2:	6a e1       	ldi	r22, 0x1A	; 26
    4df4:	72 e0       	ldi	r23, 0x02	; 2
    4df6:	0e 94 da 21 	call	0x43b4	; 0x43b4 <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPK19__FlashStringHelper>
    	  client.fastrprintln(F("Content-Type: text/html"));
    4dfa:	c8 01       	movw	r24, r16
    4dfc:	62 e0       	ldi	r22, 0x02	; 2
    4dfe:	72 e0       	ldi	r23, 0x02	; 2
    4e00:	0e 94 da 21 	call	0x43b4	; 0x43b4 <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPK19__FlashStringHelper>
    	  client.fastrprintln(F("Connection: close")); // the connection will be closed after completion of the response
    4e04:	c8 01       	movw	r24, r16
    4e06:	60 ef       	ldi	r22, 0xF0	; 240
    4e08:	71 e0       	ldi	r23, 0x01	; 1
    4e0a:	0e 94 da 21 	call	0x43b4	; 0x43b4 <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPK19__FlashStringHelper>
    	  client.println();
    4e0e:	c8 01       	movw	r24, r16
    4e10:	0e 94 af 2c 	call	0x595e	; 0x595e <_ZN5Print7printlnEv>
    	  client.fastrprintln(F("<!DOCTYPE HTML>"));
    4e14:	c8 01       	movw	r24, r16
    4e16:	60 ee       	ldi	r22, 0xE0	; 224
    4e18:	71 e0       	ldi	r23, 0x01	; 1
    4e1a:	0e 94 da 21 	call	0x43b4	; 0x43b4 <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPK19__FlashStringHelper>
    	  client.fastrprintln(F("<html>"));
    4e1e:	c8 01       	movw	r24, r16
    4e20:	69 ed       	ldi	r22, 0xD9	; 217
    4e22:	71 e0       	ldi	r23, 0x01	; 1
    4e24:	0e 94 da 21 	call	0x43b4	; 0x43b4 <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPK19__FlashStringHelper>

    	  client.fastrprintln(F("<h1>TEST</h1>"));
    4e28:	c8 01       	movw	r24, r16
    4e2a:	6b ec       	ldi	r22, 0xCB	; 203
    4e2c:	71 e0       	ldi	r23, 0x01	; 1
    4e2e:	0e 94 da 21 	call	0x43b4	; 0x43b4 <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPK19__FlashStringHelper>
    	  client.fastrprintln(F("<form>"));
    4e32:	c8 01       	movw	r24, r16
    4e34:	64 ec       	ldi	r22, 0xC4	; 196
    4e36:	71 e0       	ldi	r23, 0x01	; 1
    4e38:	0e 94 da 21 	call	0x43b4	; 0x43b4 <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPK19__FlashStringHelper>
    	  client.fastrprintln(F("<input type=text name='cmd' value='moveleft'>"));
    4e3c:	c8 01       	movw	r24, r16
    4e3e:	66 e9       	ldi	r22, 0x96	; 150
    4e40:	71 e0       	ldi	r23, 0x01	; 1
    4e42:	0e 94 da 21 	call	0x43b4	; 0x43b4 <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPK19__FlashStringHelper>
    	  client.fastrprintln(F("<input type=text name='time' value='1000'>"));
    4e46:	c8 01       	movw	r24, r16
    4e48:	6b e6       	ldi	r22, 0x6B	; 107
    4e4a:	71 e0       	ldi	r23, 0x01	; 1
    4e4c:	0e 94 da 21 	call	0x43b4	; 0x43b4 <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPK19__FlashStringHelper>
    	  client.fastrprintln(F("<input type='submit' value='Send data...'>"));
    4e50:	c8 01       	movw	r24, r16
    4e52:	60 e4       	ldi	r22, 0x40	; 64
    4e54:	71 e0       	ldi	r23, 0x01	; 1
    4e56:	0e 94 da 21 	call	0x43b4	; 0x43b4 <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPK19__FlashStringHelper>
    	  client.fastrprintln(F("</form>"));
    4e5a:	c8 01       	movw	r24, r16
    4e5c:	68 e3       	ldi	r22, 0x38	; 56
    4e5e:	71 e0       	ldi	r23, 0x01	; 1
    4e60:	0e 94 da 21 	call	0x43b4	; 0x43b4 <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPK19__FlashStringHelper>
		client.fastrprint(F("You accessed path: "));
    4e64:	c8 01       	movw	r24, r16
    4e66:	64 e2       	ldi	r22, 0x24	; 36
    4e68:	71 e0       	ldi	r23, 0x01	; 1
    4e6a:	0e 94 e7 21 	call	0x43ce	; 0x43ce <_ZN25Adafruit_CC3000_ClientRef10fastrprintEPK19__FlashStringHelper>
			client.fastrprintln(path);
    4e6e:	c8 01       	movw	r24, r16
    4e70:	6e ed       	ldi	r22, 0xDE	; 222
    4e72:	74 e0       	ldi	r23, 0x04	; 4
    4e74:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPc>
			client.fastrprintln(F("</html>"));
    4e78:	c8 01       	movw	r24, r16
    4e7a:	6c e1       	ldi	r22, 0x1C	; 28
    4e7c:	71 e0       	ldi	r23, 0x01	; 1
    4e7e:	0e 94 da 21 	call	0x43b4	; 0x43b4 <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPK19__FlashStringHelper>

			Serial.print(F(">>>PATH:"));
    4e82:	8d ea       	ldi	r24, 0xAD	; 173
    4e84:	95 e0       	ldi	r25, 0x05	; 5
    4e86:	63 e1       	ldi	r22, 0x13	; 19
    4e88:	71 e0       	ldi	r23, 0x01	; 1
    4e8a:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN5Print5printEPK19__FlashStringHelper>
			if(String(path).startsWith("/?cmd=")) {
    4e8e:	8e 01       	movw	r16, r28
    4e90:	0f 5f       	subi	r16, 0xFF	; 255
    4e92:	1f 4f       	sbci	r17, 0xFF	; 255
    4e94:	c8 01       	movw	r24, r16
    4e96:	6e ed       	ldi	r22, 0xDE	; 222
    4e98:	74 e0       	ldi	r23, 0x04	; 4
    4e9a:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <_ZN6StringC1EPKc>
    4e9e:	b7 e0       	ldi	r27, 0x07	; 7
    4ea0:	eb 2e       	mov	r14, r27
    4ea2:	f1 2c       	mov	r15, r1
    4ea4:	ec 0e       	add	r14, r28
    4ea6:	fd 1e       	adc	r15, r29
    4ea8:	c7 01       	movw	r24, r14
    4eaa:	62 e1       	ldi	r22, 0x12	; 18
    4eac:	71 e0       	ldi	r23, 0x01	; 1
    4eae:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <_ZN6StringC1EPKc>
    4eb2:	c8 01       	movw	r24, r16
    4eb4:	b7 01       	movw	r22, r14
    4eb6:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <_ZNK6String10startsWithERKS_>
    4eba:	d8 2e       	mov	r13, r24
    4ebc:	c7 01       	movw	r24, r14
    4ebe:	0e 94 16 30 	call	0x602c	; 0x602c <_ZN6StringD1Ev>
    4ec2:	c8 01       	movw	r24, r16
    4ec4:	0e 94 16 30 	call	0x602c	; 0x602c <_ZN6StringD1Ev>
    4ec8:	dd 20       	and	r13, r13
    4eca:	a9 f1       	breq	.+106    	; 0x4f36 <loop+0x254>
				String p = String(path);
    4ecc:	ad e0       	ldi	r26, 0x0D	; 13
    4ece:	aa 2e       	mov	r10, r26
    4ed0:	b1 2c       	mov	r11, r1
    4ed2:	ac 0e       	add	r10, r28
    4ed4:	bd 1e       	adc	r11, r29
    4ed6:	c5 01       	movw	r24, r10
    4ed8:	6e ed       	ldi	r22, 0xDE	; 222
    4eda:	74 e0       	ldi	r23, 0x04	; 4
    4edc:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <_ZN6StringC1EPKc>
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
    4ee0:	f3 e1       	ldi	r31, 0x13	; 19
    4ee2:	cf 2e       	mov	r12, r31
    4ee4:	d1 2c       	mov	r13, r1
    4ee6:	cc 0e       	add	r12, r28
    4ee8:	dd 1e       	adc	r13, r29
    4eea:	29 89       	ldd	r18, Y+17	; 0x11
    4eec:	3a 89       	ldd	r19, Y+18	; 0x12
    4eee:	c6 01       	movw	r24, r12
    4ef0:	b5 01       	movw	r22, r10
    4ef2:	44 e1       	ldi	r20, 0x14	; 20
    4ef4:	50 e0       	ldi	r21, 0x00	; 0
    4ef6:	0e 94 cf 2f 	call	0x5f9e	; 0x5f9e <_ZNK6String9substringEjj>
				String val = p.substring(20);
				int val_int = val.toInt();
    4efa:	c6 01       	movw	r24, r12
    4efc:	0e 94 ec 2e 	call	0x5dd8	; 0x5dd8 <_ZNK6String5toIntEv>
    4f00:	7b 01       	movw	r14, r22
    4f02:	8c 01       	movw	r16, r24
				Serial.print(F(">>>CMD VAL=["));
    4f04:	8d ea       	ldi	r24, 0xAD	; 173
    4f06:	95 e0       	ldi	r25, 0x05	; 5
    4f08:	66 e0       	ldi	r22, 0x06	; 6
    4f0a:	71 e0       	ldi	r23, 0x01	; 1
    4f0c:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.print(val_int);
    4f10:	8d ea       	ldi	r24, 0xAD	; 173
    4f12:	95 e0       	ldi	r25, 0x05	; 5
    4f14:	b7 01       	movw	r22, r14
    4f16:	4a e0       	ldi	r20, 0x0A	; 10
    4f18:	50 e0       	ldi	r21, 0x00	; 0
    4f1a:	0e 94 bc 2d 	call	0x5b78	; 0x5b78 <_ZN5Print5printEii>
				Serial.println(F("]"));
    4f1e:	8d ea       	ldi	r24, 0xAD	; 173
    4f20:	95 e0       	ldi	r25, 0x05	; 5
    4f22:	64 e0       	ldi	r22, 0x04	; 4
    4f24:	71 e0       	ldi	r23, 0x01	; 1
    4f26:	0e 94 cf 2c 	call	0x599e	; 0x599e <_ZN5Print7printlnEPK19__FlashStringHelper>
    4f2a:	c6 01       	movw	r24, r12
    4f2c:	0e 94 16 30 	call	0x602c	; 0x602c <_ZN6StringD1Ev>
    4f30:	c5 01       	movw	r24, r10
    4f32:	0e 94 16 30 	call	0x602c	; 0x602c <_ZN6StringD1Ev>
			}
			Serial.println(String(path));
    4f36:	8e 01       	movw	r16, r28
    4f38:	07 5e       	subi	r16, 0xE7	; 231
    4f3a:	1f 4f       	sbci	r17, 0xFF	; 255
    4f3c:	c8 01       	movw	r24, r16
    4f3e:	6e ed       	ldi	r22, 0xDE	; 222
    4f40:	74 e0       	ldi	r23, 0x04	; 4
    4f42:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <_ZN6StringC1EPKc>
    4f46:	8d ea       	ldi	r24, 0xAD	; 173
    4f48:	95 e0       	ldi	r25, 0x05	; 5
    4f4a:	b8 01       	movw	r22, r16
    4f4c:	0e 94 37 2e 	call	0x5c6e	; 0x5c6e <_ZN5Print7printlnERK6String>
    4f50:	c8 01       	movw	r24, r16
    4f52:	0e 94 16 30 	call	0x602c	; 0x602c <_ZN6StringD1Ev>
    4f56:	0a c0       	rjmp	.+20     	; 0x4f6c <loop+0x28a>

      }
      else {
        // Unsupported action, respond with an HTTP 405 method not allowed error.
        client.fastrprintln(F("HTTP/1.1 405 Method Not Allowed"));
    4f58:	c8 01       	movw	r24, r16
    4f5a:	64 ee       	ldi	r22, 0xE4	; 228
    4f5c:	70 e0       	ldi	r23, 0x00	; 0
    4f5e:	0e 94 da 21 	call	0x43b4	; 0x43b4 <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPK19__FlashStringHelper>
        client.fastrprintln(F(""));
    4f62:	c8 01       	movw	r24, r16
    4f64:	63 ee       	ldi	r22, 0xE3	; 227
    4f66:	70 e0       	ldi	r23, 0x00	; 0
    4f68:	0e 94 da 21 	call	0x43b4	; 0x43b4 <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPK19__FlashStringHelper>
      }
    }

    // Wait a short period to make sure the response had time to send before
    // the connection is closed (the CC3000 sends data asyncronously).
    delay(100);
    4f6c:	64 e6       	ldi	r22, 0x64	; 100
    4f6e:	70 e0       	ldi	r23, 0x00	; 0
    4f70:	80 e0       	ldi	r24, 0x00	; 0
    4f72:	90 e0       	ldi	r25, 0x00	; 0
    4f74:	0e 94 81 30 	call	0x6102	; 0x6102 <delay>

    Serial.print("Free RAM: "); Serial.println(getFreeRam(), DEC);
    4f78:	8d ea       	ldi	r24, 0xAD	; 173
    4f7a:	95 e0       	ldi	r25, 0x05	; 5
    4f7c:	69 e1       	ldi	r22, 0x19	; 25
    4f7e:	71 e0       	ldi	r23, 0x01	; 1
    4f80:	0e 94 ee 2d 	call	0x5bdc	; 0x5bdc <_ZN5Print5printEPKc>
    4f84:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10getFreeRamv>
    4f88:	bc 01       	movw	r22, r24
    4f8a:	8d ea       	ldi	r24, 0xAD	; 173
    4f8c:	95 e0       	ldi	r25, 0x05	; 5
    4f8e:	4a e0       	ldi	r20, 0x0A	; 10
    4f90:	50 e0       	ldi	r21, 0x00	; 0
    4f92:	0e 94 cf 2d 	call	0x5b9e	; 0x5b9e <_ZN5Print7printlnEii>

    // Close the connection when done.
    Serial.println(F("Client disconnected"));
    4f96:	8d ea       	ldi	r24, 0xAD	; 173
    4f98:	95 e0       	ldi	r25, 0x05	; 5
    4f9a:	6f ec       	ldi	r22, 0xCF	; 207
    4f9c:	70 e0       	ldi	r23, 0x00	; 0
    4f9e:	0e 94 cf 2c 	call	0x599e	; 0x599e <_ZN5Print7printlnEPK19__FlashStringHelper>

    client.close();
    4fa2:	ce 01       	movw	r24, r28
    4fa4:	4f 96       	adiw	r24, 0x1f	; 31
    4fa6:	0e 94 c9 21 	call	0x4392	; 0x4392 <_ZN25Adafruit_CC3000_ClientRef5closeEv>
    4faa:	2b c0       	rjmp	.+86     	; 0x5002 <loop+0x320>
      parsed = parseRequest(buffer, bufindex, action, path);
    }

    // Handle the request if it was parsed.
    if (parsed) {
      Serial.println(F("Processing request"));
    4fac:	8d ea       	ldi	r24, 0xAD	; 173
    4fae:	95 e0       	ldi	r25, 0x05	; 5
    4fb0:	6a e3       	ldi	r22, 0x3A	; 58
    4fb2:	72 e0       	ldi	r23, 0x02	; 2
    4fb4:	0e 94 cf 2c 	call	0x599e	; 0x599e <_ZN5Print7printlnEPK19__FlashStringHelper>
      Serial.print(F("Action: ")); Serial.println(action);
    4fb8:	8d ea       	ldi	r24, 0xAD	; 173
    4fba:	95 e0       	ldi	r25, 0x05	; 5
    4fbc:	61 e3       	ldi	r22, 0x31	; 49
    4fbe:	72 e0       	ldi	r23, 0x02	; 2
    4fc0:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN5Print5printEPK19__FlashStringHelper>
    4fc4:	8d ea       	ldi	r24, 0xAD	; 173
    4fc6:	95 e0       	ldi	r25, 0x05	; 5
    4fc8:	63 ed       	ldi	r22, 0xD3	; 211
    4fca:	74 e0       	ldi	r23, 0x04	; 4
    4fcc:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <_ZN5Print7printlnEPKc>
      Serial.print(F("Path: ")); Serial.println(path);
    4fd0:	8d ea       	ldi	r24, 0xAD	; 173
    4fd2:	95 e0       	ldi	r25, 0x05	; 5
    4fd4:	6a e2       	ldi	r22, 0x2A	; 42
    4fd6:	72 e0       	ldi	r23, 0x02	; 2
    4fd8:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN5Print5printEPK19__FlashStringHelper>
    4fdc:	8d ea       	ldi	r24, 0xAD	; 173
    4fde:	95 e0       	ldi	r25, 0x05	; 5
    4fe0:	6e ed       	ldi	r22, 0xDE	; 222
    4fe2:	74 e0       	ldi	r23, 0x04	; 4
    4fe4:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <_ZN5Print7printlnEPKc>
      // Check the action to see if it was a GET request.
      if (strcmp(action, "GET") == 0) {
    4fe8:	83 ed       	ldi	r24, 0xD3	; 211
    4fea:	94 e0       	ldi	r25, 0x04	; 4
    4fec:	64 e2       	ldi	r22, 0x24	; 36
    4fee:	71 e0       	ldi	r23, 0x01	; 1
    4ff0:	0e 94 87 33 	call	0x670e	; 0x670e <strcmp>
    4ff4:	8e 01       	movw	r16, r28
    4ff6:	01 5e       	subi	r16, 0xE1	; 225
    4ff8:	1f 4f       	sbci	r17, 0xFF	; 255
    4ffa:	00 97       	sbiw	r24, 0x00	; 0
    4ffc:	09 f4       	brne	.+2      	; 0x5000 <loop+0x31e>
    4ffe:	f8 ce       	rjmp	.-528    	; 0x4df0 <loop+0x10e>
    5000:	ab cf       	rjmp	.-170    	; 0x4f58 <loop+0x276>
    // Close the connection when done.
    Serial.println(F("Client disconnected"));

    client.close();
  }
}
    5002:	ac 96       	adiw	r28, 0x2c	; 44
    5004:	0f b6       	in	r0, 0x3f	; 63
    5006:	f8 94       	cli
    5008:	de bf       	out	0x3e, r29	; 62
    500a:	0f be       	out	0x3f, r0	; 63
    500c:	cd bf       	out	0x3d, r28	; 61
    500e:	cf 91       	pop	r28
    5010:	df 91       	pop	r29
    5012:	1f 91       	pop	r17
    5014:	0f 91       	pop	r16
    5016:	ff 90       	pop	r15
    5018:	ef 90       	pop	r14
    501a:	df 90       	pop	r13
    501c:	cf 90       	pop	r12
    501e:	bf 90       	pop	r11
    5020:	af 90       	pop	r10
    5022:	08 95       	ret

00005024 <setup>:
char action[MAX_ACTION+1];
char path[MAX_PATH+1];



void setup(void)
    5024:	0f 93       	push	r16
{
  Serial.begin(115200);
    5026:	8d ea       	ldi	r24, 0xAD	; 173
    5028:	95 e0       	ldi	r25, 0x05	; 5
    502a:	40 e0       	ldi	r20, 0x00	; 0
    502c:	52 ec       	ldi	r21, 0xC2	; 194
    502e:	61 e0       	ldi	r22, 0x01	; 1
    5030:	70 e0       	ldi	r23, 0x00	; 0
    5032:	0e 94 6c 2a 	call	0x54d8	; 0x54d8 <_ZN14HardwareSerial5beginEm>
  Serial.println(F("Hello, CC3000!\n"));
    5036:	8d ea       	ldi	r24, 0xAD	; 173
    5038:	95 e0       	ldi	r25, 0x05	; 5
    503a:	6f e0       	ldi	r22, 0x0F	; 15
    503c:	74 e0       	ldi	r23, 0x04	; 4
    503e:	0e 94 cf 2c 	call	0x599e	; 0x599e <_ZN5Print7printlnEPK19__FlashStringHelper>

  Serial.print("Free RAM: "); Serial.println(getFreeRam(), DEC);
    5042:	8d ea       	ldi	r24, 0xAD	; 173
    5044:	95 e0       	ldi	r25, 0x05	; 5
    5046:	69 e1       	ldi	r22, 0x19	; 25
    5048:	71 e0       	ldi	r23, 0x01	; 1
    504a:	0e 94 ee 2d 	call	0x5bdc	; 0x5bdc <_ZN5Print5printEPKc>
    504e:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10getFreeRamv>
    5052:	bc 01       	movw	r22, r24
    5054:	8d ea       	ldi	r24, 0xAD	; 173
    5056:	95 e0       	ldi	r25, 0x05	; 5
    5058:	4a e0       	ldi	r20, 0x0A	; 10
    505a:	50 e0       	ldi	r21, 0x00	; 0
    505c:	0e 94 cf 2d 	call	0x5b9e	; 0x5b9e <_ZN5Print7printlnEii>

  // Initialise the module
  Serial.println(F("\nInitializing..."));
    5060:	8d ea       	ldi	r24, 0xAD	; 173
    5062:	95 e0       	ldi	r25, 0x05	; 5
    5064:	6e ef       	ldi	r22, 0xFE	; 254
    5066:	73 e0       	ldi	r23, 0x03	; 3
    5068:	0e 94 cf 2c 	call	0x599e	; 0x599e <_ZN5Print7printlnEPK19__FlashStringHelper>
  if (!cc3000.begin())
    506c:	8e e6       	ldi	r24, 0x6E	; 110
    506e:	93 e0       	ldi	r25, 0x03	; 3
    5070:	60 e0       	ldi	r22, 0x00	; 0
    5072:	40 e0       	ldi	r20, 0x00	; 0
    5074:	20 e0       	ldi	r18, 0x00	; 0
    5076:	30 e0       	ldi	r19, 0x00	; 0
    5078:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN15Adafruit_CC30005beginEhbPKc>
    507c:	88 23       	and	r24, r24
    507e:	39 f4       	brne	.+14     	; 0x508e <setup+0x6a>
  {
    Serial.println(F("Couldn't begin()! Check your wiring?"));
    5080:	8d ea       	ldi	r24, 0xAD	; 173
    5082:	95 e0       	ldi	r25, 0x05	; 5
    5084:	69 ed       	ldi	r22, 0xD9	; 217
    5086:	73 e0       	ldi	r23, 0x03	; 3
    5088:	0e 94 cf 2c 	call	0x599e	; 0x599e <_ZN5Print7printlnEPK19__FlashStringHelper>
    508c:	ff cf       	rjmp	.-2      	; 0x508c <setup+0x68>
    while(1);
  }

  Serial.print(F("\nAttempting to connect to ")); Serial.println(WLAN_SSID);
    508e:	8d ea       	ldi	r24, 0xAD	; 173
    5090:	95 e0       	ldi	r25, 0x05	; 5
    5092:	6e eb       	ldi	r22, 0xBE	; 190
    5094:	73 e0       	ldi	r23, 0x03	; 3
    5096:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN5Print5printEPK19__FlashStringHelper>
    509a:	8d ea       	ldi	r24, 0xAD	; 173
    509c:	95 e0       	ldi	r25, 0x05	; 5
    509e:	68 e2       	ldi	r22, 0x28	; 40
    50a0:	71 e0       	ldi	r23, 0x01	; 1
    50a2:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <_ZN5Print7printlnEPKc>
  if (!cc3000.connectToAP(WLAN_SSID, WLAN_PASS, WLAN_SECURITY)) {
    50a6:	8e e6       	ldi	r24, 0x6E	; 110
    50a8:	93 e0       	ldi	r25, 0x03	; 3
    50aa:	68 e2       	ldi	r22, 0x28	; 40
    50ac:	71 e0       	ldi	r23, 0x01	; 1
    50ae:	4e e2       	ldi	r20, 0x2E	; 46
    50b0:	51 e0       	ldi	r21, 0x01	; 1
    50b2:	23 e0       	ldi	r18, 0x03	; 3
    50b4:	00 e0       	ldi	r16, 0x00	; 0
    50b6:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh>
    50ba:	88 23       	and	r24, r24
    50bc:	39 f4       	brne	.+14     	; 0x50cc <setup+0xa8>
    Serial.println(F("Failed!"));
    50be:	8d ea       	ldi	r24, 0xAD	; 173
    50c0:	95 e0       	ldi	r25, 0x05	; 5
    50c2:	66 eb       	ldi	r22, 0xB6	; 182
    50c4:	73 e0       	ldi	r23, 0x03	; 3
    50c6:	0e 94 cf 2c 	call	0x599e	; 0x599e <_ZN5Print7printlnEPK19__FlashStringHelper>
    50ca:	ff cf       	rjmp	.-2      	; 0x50ca <setup+0xa6>
    while(1);
  }

  Serial.println(F("Connected!"));
    50cc:	8d ea       	ldi	r24, 0xAD	; 173
    50ce:	95 e0       	ldi	r25, 0x05	; 5
    50d0:	6b ea       	ldi	r22, 0xAB	; 171
    50d2:	73 e0       	ldi	r23, 0x03	; 3
    50d4:	0e 94 cf 2c 	call	0x599e	; 0x599e <_ZN5Print7printlnEPK19__FlashStringHelper>

  Serial.println(F("Request DHCP"));
    50d8:	8d ea       	ldi	r24, 0xAD	; 173
    50da:	95 e0       	ldi	r25, 0x05	; 5
    50dc:	6e e9       	ldi	r22, 0x9E	; 158
    50de:	73 e0       	ldi	r23, 0x03	; 3
    50e0:	0e 94 cf 2c 	call	0x599e	; 0x599e <_ZN5Print7printlnEPK19__FlashStringHelper>
    50e4:	06 c0       	rjmp	.+12     	; 0x50f2 <setup+0xce>
  while (!cc3000.checkDHCP())
  {
    delay(100); // ToDo: Insert a DHCP timeout!
    50e6:	64 e6       	ldi	r22, 0x64	; 100
    50e8:	70 e0       	ldi	r23, 0x00	; 0
    50ea:	80 e0       	ldi	r24, 0x00	; 0
    50ec:	90 e0       	ldi	r25, 0x00	; 0
    50ee:	0e 94 81 30 	call	0x6102	; 0x6102 <delay>
  }

  Serial.println(F("Connected!"));

  Serial.println(F("Request DHCP"));
  while (!cc3000.checkDHCP())
    50f2:	8e e6       	ldi	r24, 0x6E	; 110
    50f4:	93 e0       	ldi	r25, 0x03	; 3
    50f6:	0e 94 c2 19 	call	0x3384	; 0x3384 <_ZN15Adafruit_CC30009checkDHCPEv>
    50fa:	88 23       	and	r24, r24
    50fc:	a1 f3       	breq	.-24     	; 0x50e6 <setup+0xc2>
    50fe:	06 c0       	rjmp	.+12     	; 0x510c <setup+0xe8>
    delay(100); // ToDo: Insert a DHCP timeout!
  }

  // Display the IP address DNS, Gateway, etc.
  while (! displayConnectionDetails()) {
    delay(1000);
    5100:	68 ee       	ldi	r22, 0xE8	; 232
    5102:	73 e0       	ldi	r23, 0x03	; 3
    5104:	80 e0       	ldi	r24, 0x00	; 0
    5106:	90 e0       	ldi	r25, 0x00	; 0
    5108:	0e 94 81 30 	call	0x6102	; 0x6102 <delay>
  {
    delay(100); // ToDo: Insert a DHCP timeout!
  }

  // Display the IP address DNS, Gateway, etc.
  while (! displayConnectionDetails()) {
    510c:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <displayConnectionDetails>
    5110:	88 23       	and	r24, r24
    5112:	b1 f3       	breq	.-20     	; 0x5100 <setup+0xdc>
  }

  // ******************************************************
  // You can safely remove this to save some flash memory!
  // ******************************************************
  Serial.println(F("\r\nNOTE: This sketch may cause problems with other sketches"));
    5114:	8d ea       	ldi	r24, 0xAD	; 173
    5116:	95 e0       	ldi	r25, 0x05	; 5
    5118:	63 e6       	ldi	r22, 0x63	; 99
    511a:	73 e0       	ldi	r23, 0x03	; 3
    511c:	0e 94 cf 2c 	call	0x599e	; 0x599e <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println(F("since the .disconnect() function is never called, so the"));
    5120:	8d ea       	ldi	r24, 0xAD	; 173
    5122:	95 e0       	ldi	r25, 0x05	; 5
    5124:	6a e2       	ldi	r22, 0x2A	; 42
    5126:	73 e0       	ldi	r23, 0x03	; 3
    5128:	0e 94 cf 2c 	call	0x599e	; 0x599e <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println(F("AP may refuse connection requests from the CC3000 until a"));
    512c:	8d ea       	ldi	r24, 0xAD	; 173
    512e:	95 e0       	ldi	r25, 0x05	; 5
    5130:	60 ef       	ldi	r22, 0xF0	; 240
    5132:	72 e0       	ldi	r23, 0x02	; 2
    5134:	0e 94 cf 2c 	call	0x599e	; 0x599e <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println(F("timeout period passes.  This is normal behaviour since"));
    5138:	8d ea       	ldi	r24, 0xAD	; 173
    513a:	95 e0       	ldi	r25, 0x05	; 5
    513c:	69 eb       	ldi	r22, 0xB9	; 185
    513e:	72 e0       	ldi	r23, 0x02	; 2
    5140:	0e 94 cf 2c 	call	0x599e	; 0x599e <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println(F("there isn't an obvious moment to disconnect with a server.\r\n"));
    5144:	8d ea       	ldi	r24, 0xAD	; 173
    5146:	95 e0       	ldi	r25, 0x05	; 5
    5148:	6c e7       	ldi	r22, 0x7C	; 124
    514a:	72 e0       	ldi	r23, 0x02	; 2
    514c:	0e 94 cf 2c 	call	0x599e	; 0x599e <_ZN5Print7printlnEPK19__FlashStringHelper>

  // Start listening for connections
  httpServer.begin();
    5150:	8f e6       	ldi	r24, 0x6F	; 111
    5152:	93 e0       	ldi	r25, 0x03	; 3
    5154:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <_ZN22Adafruit_CC3000_Server5beginEv>

  Serial.println(F("Listening for connections..."));
    5158:	8d ea       	ldi	r24, 0xAD	; 173
    515a:	95 e0       	ldi	r25, 0x05	; 5
    515c:	6f e5       	ldi	r22, 0x5F	; 95
    515e:	72 e0       	ldi	r23, 0x02	; 2
    5160:	0e 94 cf 2c 	call	0x599e	; 0x599e <_ZN5Print7printlnEPK19__FlashStringHelper>
}
    5164:	0f 91       	pop	r16
    5166:	08 95       	ret

00005168 <malloc>:
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	if (len < sizeof(struct __freelist) - sizeof(size_t))
    5168:	0f 93       	push	r16
    516a:	1f 93       	push	r17
    516c:	cf 93       	push	r28
    516e:	df 93       	push	r29
    5170:	bc 01       	movw	r22, r24
    5172:	82 30       	cpi	r24, 0x02	; 2
    5174:	91 05       	cpc	r25, r1
    5176:	10 f4       	brcc	.+4      	; 0x517c <malloc+0x14>
    5178:	62 e0       	ldi	r22, 0x02	; 2
    517a:	70 e0       	ldi	r23, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    517c:	e0 91 e1 05 	lds	r30, 0x05E1
    5180:	f0 91 e2 05 	lds	r31, 0x05E2
    5184:	a0 e0       	ldi	r26, 0x00	; 0
    5186:	b0 e0       	ldi	r27, 0x00	; 0
    5188:	40 e0       	ldi	r20, 0x00	; 0
    518a:	50 e0       	ldi	r21, 0x00	; 0
    518c:	24 c0       	rjmp	.+72     	; 0x51d6 <malloc+0x6e>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
    518e:	80 81       	ld	r24, Z
    5190:	91 81       	ldd	r25, Z+1	; 0x01
    5192:	86 17       	cp	r24, r22
    5194:	97 07       	cpc	r25, r23
    5196:	d0 f0       	brcs	.+52     	; 0x51cc <malloc+0x64>
			continue;
		if (fp1->sz == len) {
    5198:	86 17       	cp	r24, r22
    519a:	97 07       	cpc	r25, r23
    519c:	71 f4       	brne	.+28     	; 0x51ba <malloc+0x52>
    519e:	82 81       	ldd	r24, Z+2	; 0x02
    51a0:	93 81       	ldd	r25, Z+3	; 0x03
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
    51a2:	10 97       	sbiw	r26, 0x00	; 0
    51a4:	29 f0       	breq	.+10     	; 0x51b0 <malloc+0x48>
				fp2->nx = fp1->nx;
    51a6:	13 96       	adiw	r26, 0x03	; 3
    51a8:	9c 93       	st	X, r25
    51aa:	8e 93       	st	-X, r24
    51ac:	12 97       	sbiw	r26, 0x02	; 2
    51ae:	2c c0       	rjmp	.+88     	; 0x5208 <malloc+0xa0>
			else
				__flp = fp1->nx;
    51b0:	90 93 e2 05 	sts	0x05E2, r25
    51b4:	80 93 e1 05 	sts	0x05E1, r24
    51b8:	27 c0       	rjmp	.+78     	; 0x5208 <malloc+0xa0>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    51ba:	41 15       	cp	r20, r1
    51bc:	51 05       	cpc	r21, r1
    51be:	19 f0       	breq	.+6      	; 0x51c6 <malloc+0x5e>
    51c0:	84 17       	cp	r24, r20
    51c2:	95 07       	cpc	r25, r21
    51c4:	18 f4       	brcc	.+6      	; 0x51cc <malloc+0x64>
    51c6:	ef 01       	movw	r28, r30
    51c8:	8d 01       	movw	r16, r26
    51ca:	ac 01       	movw	r20, r24
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    51cc:	df 01       	movw	r26, r30
    51ce:	82 81       	ldd	r24, Z+2	; 0x02
    51d0:	93 81       	ldd	r25, Z+3	; 0x03
    51d2:	9c 01       	movw	r18, r24
    51d4:	f9 01       	movw	r30, r18
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
    51d6:	30 97       	sbiw	r30, 0x00	; 0
    51d8:	d1 f6       	brne	.-76     	; 0x518e <malloc+0x26>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
    51da:	41 15       	cp	r20, r1
    51dc:	51 05       	cpc	r21, r1
    51de:	f9 f0       	breq	.+62     	; 0x521e <malloc+0xb6>
		if (s - len < sizeof(struct __freelist)) {
    51e0:	ca 01       	movw	r24, r20
    51e2:	86 1b       	sub	r24, r22
    51e4:	97 0b       	sbc	r25, r23
    51e6:	84 30       	cpi	r24, 0x04	; 4
    51e8:	91 05       	cpc	r25, r1
    51ea:	80 f4       	brcc	.+32     	; 0x520c <malloc+0xa4>
    51ec:	8a 81       	ldd	r24, Y+2	; 0x02
    51ee:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
    51f0:	01 15       	cp	r16, r1
    51f2:	11 05       	cpc	r17, r1
    51f4:	21 f0       	breq	.+8      	; 0x51fe <malloc+0x96>
				sfp2->nx = sfp1->nx;
    51f6:	f8 01       	movw	r30, r16
    51f8:	93 83       	std	Z+3, r25	; 0x03
    51fa:	82 83       	std	Z+2, r24	; 0x02
    51fc:	04 c0       	rjmp	.+8      	; 0x5206 <malloc+0x9e>
			else
				__flp = sfp1->nx;
    51fe:	90 93 e2 05 	sts	0x05E2, r25
    5202:	80 93 e1 05 	sts	0x05E1, r24
			return &(sfp1->nx);
    5206:	fe 01       	movw	r30, r28
    5208:	32 96       	adiw	r30, 0x02	; 2
    520a:	45 c0       	rjmp	.+138    	; 0x5296 <malloc+0x12e>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
    520c:	fe 01       	movw	r30, r28
    520e:	e8 0f       	add	r30, r24
    5210:	f9 1f       	adc	r31, r25
    5212:	61 93       	st	Z+, r22
    5214:	71 93       	st	Z+, r23
		sfp1->sz = s - sizeof(size_t);
    5216:	02 97       	sbiw	r24, 0x02	; 2
    5218:	99 83       	std	Y+1, r25	; 0x01
    521a:	88 83       	st	Y, r24
    521c:	3c c0       	rjmp	.+120    	; 0x5296 <malloc+0x12e>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
    521e:	80 91 df 05 	lds	r24, 0x05DF
    5222:	90 91 e0 05 	lds	r25, 0x05E0
    5226:	89 2b       	or	r24, r25
    5228:	41 f4       	brne	.+16     	; 0x523a <malloc+0xd2>
		__brkval = __malloc_heap_start;
    522a:	80 91 40 01 	lds	r24, 0x0140
    522e:	90 91 41 01 	lds	r25, 0x0141
    5232:	90 93 e0 05 	sts	0x05E0, r25
    5236:	80 93 df 05 	sts	0x05DF, r24
	cp = __malloc_heap_end;
    523a:	40 91 42 01 	lds	r20, 0x0142
    523e:	50 91 43 01 	lds	r21, 0x0143
	if (cp == 0)
    5242:	41 15       	cp	r20, r1
    5244:	51 05       	cpc	r21, r1
    5246:	41 f4       	brne	.+16     	; 0x5258 <malloc+0xf0>
		cp = STACK_POINTER() - __malloc_margin;
    5248:	4d b7       	in	r20, 0x3d	; 61
    524a:	5e b7       	in	r21, 0x3e	; 62
    524c:	80 91 3e 01 	lds	r24, 0x013E
    5250:	90 91 3f 01 	lds	r25, 0x013F
    5254:	48 1b       	sub	r20, r24
    5256:	59 0b       	sbc	r21, r25
	if (cp <= __brkval)
    5258:	20 91 df 05 	lds	r18, 0x05DF
    525c:	30 91 e0 05 	lds	r19, 0x05E0
    5260:	24 17       	cp	r18, r20
    5262:	35 07       	cpc	r19, r21
    5264:	b0 f4       	brcc	.+44     	; 0x5292 <malloc+0x12a>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
    5266:	ca 01       	movw	r24, r20
    5268:	82 1b       	sub	r24, r18
    526a:	93 0b       	sbc	r25, r19
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    526c:	86 17       	cp	r24, r22
    526e:	97 07       	cpc	r25, r23
    5270:	80 f0       	brcs	.+32     	; 0x5292 <malloc+0x12a>
    5272:	ab 01       	movw	r20, r22
    5274:	4e 5f       	subi	r20, 0xFE	; 254
    5276:	5f 4f       	sbci	r21, 0xFF	; 255
    5278:	84 17       	cp	r24, r20
    527a:	95 07       	cpc	r25, r21
    527c:	50 f0       	brcs	.+20     	; 0x5292 <malloc+0x12a>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    527e:	42 0f       	add	r20, r18
    5280:	53 1f       	adc	r21, r19
    5282:	50 93 e0 05 	sts	0x05E0, r21
    5286:	40 93 df 05 	sts	0x05DF, r20
		fp1->sz = len;
    528a:	f9 01       	movw	r30, r18
    528c:	61 93       	st	Z+, r22
    528e:	71 93       	st	Z+, r23
    5290:	02 c0       	rjmp	.+4      	; 0x5296 <malloc+0x12e>
		return &(fp1->nx);
    5292:	e0 e0       	ldi	r30, 0x00	; 0
    5294:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
    5296:	cf 01       	movw	r24, r30
    5298:	df 91       	pop	r29
    529a:	cf 91       	pop	r28
    529c:	1f 91       	pop	r17
    529e:	0f 91       	pop	r16
    52a0:	08 95       	ret

000052a2 <free>:
{
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    52a2:	cf 93       	push	r28
    52a4:	df 93       	push	r29
    52a6:	9c 01       	movw	r18, r24
    52a8:	00 97       	sbiw	r24, 0x00	; 0
    52aa:	09 f4       	brne	.+2      	; 0x52ae <free+0xc>
    52ac:	8f c0       	rjmp	.+286    	; 0x53cc <free+0x12a>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
    52ae:	ec 01       	movw	r28, r24
    52b0:	22 97       	sbiw	r28, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    52b2:	1b 82       	std	Y+3, r1	; 0x03
    52b4:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    52b6:	60 91 e1 05 	lds	r22, 0x05E1
    52ba:	70 91 e2 05 	lds	r23, 0x05E2
    52be:	61 15       	cp	r22, r1
    52c0:	71 05       	cpc	r23, r1
    52c2:	81 f4       	brne	.+32     	; 0x52e4 <free+0x42>
		if ((char *)p + fpnew->sz == __brkval)
    52c4:	88 81       	ld	r24, Y
    52c6:	99 81       	ldd	r25, Y+1	; 0x01
    52c8:	82 0f       	add	r24, r18
    52ca:	93 1f       	adc	r25, r19
    52cc:	20 91 df 05 	lds	r18, 0x05DF
    52d0:	30 91 e0 05 	lds	r19, 0x05E0
    52d4:	28 17       	cp	r18, r24
    52d6:	39 07       	cpc	r19, r25
    52d8:	39 f5       	brne	.+78     	; 0x5328 <free+0x86>
			__brkval = cpnew;
    52da:	d0 93 e0 05 	sts	0x05E0, r29
    52de:	c0 93 df 05 	sts	0x05DF, r28
    52e2:	74 c0       	rjmp	.+232    	; 0x53cc <free+0x12a>
		else
			__flp = fpnew;
    52e4:	db 01       	movw	r26, r22
    52e6:	40 e0       	ldi	r20, 0x00	; 0
    52e8:	50 e0       	ldi	r21, 0x00	; 0
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    52ea:	ac 17       	cp	r26, r28
    52ec:	bd 07       	cpc	r27, r29
    52ee:	08 f1       	brcs	.+66     	; 0x5332 <free+0x90>
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    52f0:	bb 83       	std	Y+3, r27	; 0x03
    52f2:	aa 83       	std	Y+2, r26	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    52f4:	fe 01       	movw	r30, r28
    52f6:	21 91       	ld	r18, Z+
    52f8:	31 91       	ld	r19, Z+
    52fa:	e2 0f       	add	r30, r18
    52fc:	f3 1f       	adc	r31, r19
    52fe:	ae 17       	cp	r26, r30
    5300:	bf 07       	cpc	r27, r31
    5302:	79 f4       	brne	.+30     	; 0x5322 <free+0x80>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    5304:	8d 91       	ld	r24, X+
    5306:	9c 91       	ld	r25, X
    5308:	11 97       	sbiw	r26, 0x01	; 1
    530a:	28 0f       	add	r18, r24
    530c:	39 1f       	adc	r19, r25
    530e:	2e 5f       	subi	r18, 0xFE	; 254
    5310:	3f 4f       	sbci	r19, 0xFF	; 255
    5312:	39 83       	std	Y+1, r19	; 0x01
    5314:	28 83       	st	Y, r18
			fpnew->nx = fp1->nx;
    5316:	12 96       	adiw	r26, 0x02	; 2
    5318:	8d 91       	ld	r24, X+
    531a:	9c 91       	ld	r25, X
    531c:	13 97       	sbiw	r26, 0x03	; 3
    531e:	9b 83       	std	Y+3, r25	; 0x03
    5320:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (fp2 == 0) {
    5322:	41 15       	cp	r20, r1
    5324:	51 05       	cpc	r21, r1
    5326:	71 f4       	brne	.+28     	; 0x5344 <free+0xa2>
			/* new head of freelist */
			__flp = fpnew;
    5328:	d0 93 e2 05 	sts	0x05E2, r29
    532c:	c0 93 e1 05 	sts	0x05E1, r28
    5330:	4d c0       	rjmp	.+154    	; 0x53cc <free+0x12a>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    5332:	12 96       	adiw	r26, 0x02	; 2
    5334:	8d 91       	ld	r24, X+
    5336:	9c 91       	ld	r25, X
    5338:	13 97       	sbiw	r26, 0x03	; 3
    533a:	ad 01       	movw	r20, r26
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
    533c:	00 97       	sbiw	r24, 0x00	; 0
    533e:	11 f0       	breq	.+4      	; 0x5344 <free+0xa2>
    5340:	dc 01       	movw	r26, r24
    5342:	d3 cf       	rjmp	.-90     	; 0x52ea <free+0x48>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    5344:	da 01       	movw	r26, r20
    5346:	13 96       	adiw	r26, 0x03	; 3
    5348:	dc 93       	st	X, r29
    534a:	ce 93       	st	-X, r28
    534c:	12 97       	sbiw	r26, 0x02	; 2
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    534e:	fa 01       	movw	r30, r20
    5350:	21 91       	ld	r18, Z+
    5352:	31 91       	ld	r19, Z+
    5354:	e2 0f       	add	r30, r18
    5356:	f3 1f       	adc	r31, r19
    5358:	ce 17       	cp	r28, r30
    535a:	df 07       	cpc	r29, r31
    535c:	69 f4       	brne	.+26     	; 0x5378 <free+0xd6>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    535e:	88 81       	ld	r24, Y
    5360:	99 81       	ldd	r25, Y+1	; 0x01
    5362:	28 0f       	add	r18, r24
    5364:	39 1f       	adc	r19, r25
    5366:	2e 5f       	subi	r18, 0xFE	; 254
    5368:	3f 4f       	sbci	r19, 0xFF	; 255
    536a:	fa 01       	movw	r30, r20
    536c:	31 83       	std	Z+1, r19	; 0x01
    536e:	20 83       	st	Z, r18
		fp2->nx = fpnew->nx;
    5370:	8a 81       	ldd	r24, Y+2	; 0x02
    5372:	9b 81       	ldd	r25, Y+3	; 0x03
    5374:	93 83       	std	Z+3, r25	; 0x03
    5376:	82 83       	std	Z+2, r24	; 0x02
    5378:	e0 e0       	ldi	r30, 0x00	; 0
    537a:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1->nx != 0;
    537c:	db 01       	movw	r26, r22
    537e:	12 96       	adiw	r26, 0x02	; 2
    5380:	8d 91       	ld	r24, X+
    5382:	9c 91       	ld	r25, X
    5384:	13 97       	sbiw	r26, 0x03	; 3
    5386:	00 97       	sbiw	r24, 0x00	; 0
    5388:	19 f0       	breq	.+6      	; 0x5390 <free+0xee>
    538a:	bc 01       	movw	r22, r24
    538c:	fd 01       	movw	r30, r26
    538e:	f6 cf       	rjmp	.-20     	; 0x537c <free+0xda>
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
    5390:	ab 01       	movw	r20, r22
    5392:	4e 5f       	subi	r20, 0xFE	; 254
    5394:	5f 4f       	sbci	r21, 0xFF	; 255
	if (cp2 + fp1->sz == __brkval) {
    5396:	db 01       	movw	r26, r22
    5398:	8d 91       	ld	r24, X+
    539a:	9c 91       	ld	r25, X
    539c:	84 0f       	add	r24, r20
    539e:	95 1f       	adc	r25, r21
    53a0:	20 91 df 05 	lds	r18, 0x05DF
    53a4:	30 91 e0 05 	lds	r19, 0x05E0
    53a8:	28 17       	cp	r18, r24
    53aa:	39 07       	cpc	r19, r25
    53ac:	79 f4       	brne	.+30     	; 0x53cc <free+0x12a>
		if (fp2 == NULL)
    53ae:	30 97       	sbiw	r30, 0x00	; 0
    53b0:	29 f4       	brne	.+10     	; 0x53bc <free+0x11a>
			/* Freelist is empty now. */
			__flp = NULL;
    53b2:	10 92 e2 05 	sts	0x05E2, r1
    53b6:	10 92 e1 05 	sts	0x05E1, r1
    53ba:	02 c0       	rjmp	.+4      	; 0x53c0 <free+0x11e>
		else
			fp2->nx = NULL;
    53bc:	13 82       	std	Z+3, r1	; 0x03
    53be:	12 82       	std	Z+2, r1	; 0x02
		__brkval = cp2 - sizeof(size_t);
    53c0:	42 50       	subi	r20, 0x02	; 2
    53c2:	50 40       	sbci	r21, 0x00	; 0
    53c4:	50 93 e0 05 	sts	0x05E0, r21
    53c8:	40 93 df 05 	sts	0x05DF, r20
	}
}
    53cc:	df 91       	pop	r29
    53ce:	cf 91       	pop	r28
    53d0:	08 95       	ret

000053d2 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    53d2:	08 95       	ret

000053d4 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
    53d4:	1f 92       	push	r1
    53d6:	0f 92       	push	r0
    53d8:	0f b6       	in	r0, 0x3f	; 63
    53da:	0f 92       	push	r0
    53dc:	11 24       	eor	r1, r1
    53de:	2f 93       	push	r18
    53e0:	3f 93       	push	r19
    53e2:	4f 93       	push	r20
    53e4:	8f 93       	push	r24
    53e6:	9f 93       	push	r25
    53e8:	ef 93       	push	r30
    53ea:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    53ec:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    53f0:	20 91 65 05 	lds	r18, 0x0565
    53f4:	30 91 66 05 	lds	r19, 0x0566

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    53f8:	2f 5f       	subi	r18, 0xFF	; 255
    53fa:	3f 4f       	sbci	r19, 0xFF	; 255
    53fc:	2f 73       	andi	r18, 0x3F	; 63
    53fe:	30 70       	andi	r19, 0x00	; 0
    5400:	80 91 67 05 	lds	r24, 0x0567
    5404:	90 91 68 05 	lds	r25, 0x0568
    5408:	28 17       	cp	r18, r24
    540a:	39 07       	cpc	r19, r25
    540c:	59 f0       	breq	.+22     	; 0x5424 <__vector_18+0x50>
    buffer->buffer[buffer->head] = c;
    540e:	e0 91 65 05 	lds	r30, 0x0565
    5412:	f0 91 66 05 	lds	r31, 0x0566
    5416:	eb 5d       	subi	r30, 0xDB	; 219
    5418:	fa 4f       	sbci	r31, 0xFA	; 250
    541a:	40 83       	st	Z, r20
    buffer->head = i;
    541c:	30 93 66 05 	sts	0x0566, r19
    5420:	20 93 65 05 	sts	0x0565, r18
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
    5424:	ff 91       	pop	r31
    5426:	ef 91       	pop	r30
    5428:	9f 91       	pop	r25
    542a:	8f 91       	pop	r24
    542c:	4f 91       	pop	r20
    542e:	3f 91       	pop	r19
    5430:	2f 91       	pop	r18
    5432:	0f 90       	pop	r0
    5434:	0f be       	out	0x3f, r0	; 63
    5436:	0f 90       	pop	r0
    5438:	1f 90       	pop	r1
    543a:	18 95       	reti

0000543c <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    543c:	e0 91 b9 05 	lds	r30, 0x05B9
    5440:	f0 91 ba 05 	lds	r31, 0x05BA
    5444:	e0 5c       	subi	r30, 0xC0	; 192
    5446:	ff 4f       	sbci	r31, 0xFF	; 255
    5448:	81 91       	ld	r24, Z+
    544a:	91 91       	ld	r25, Z+
    544c:	20 81       	ld	r18, Z
    544e:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    5450:	82 1b       	sub	r24, r18
    5452:	93 0b       	sbc	r25, r19
    5454:	8f 73       	andi	r24, 0x3F	; 63
    5456:	90 70       	andi	r25, 0x00	; 0
    5458:	89 2b       	or	r24, r25
    545a:	11 f0       	breq	.+4      	; 0x5460 <_Z14serialEventRunv+0x24>
    545c:	0e 94 e9 29 	call	0x53d2	; 0x53d2 <_Z11serialEventv>
    5460:	08 95       	ret

00005462 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    5462:	1f 92       	push	r1
    5464:	0f 92       	push	r0
    5466:	0f b6       	in	r0, 0x3f	; 63
    5468:	0f 92       	push	r0
    546a:	11 24       	eor	r1, r1
    546c:	2f 93       	push	r18
    546e:	3f 93       	push	r19
    5470:	8f 93       	push	r24
    5472:	9f 93       	push	r25
    5474:	ef 93       	push	r30
    5476:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    5478:	20 91 a9 05 	lds	r18, 0x05A9
    547c:	30 91 aa 05 	lds	r19, 0x05AA
    5480:	80 91 ab 05 	lds	r24, 0x05AB
    5484:	90 91 ac 05 	lds	r25, 0x05AC
    5488:	28 17       	cp	r18, r24
    548a:	39 07       	cpc	r19, r25
    548c:	31 f4       	brne	.+12     	; 0x549a <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    548e:	80 91 c1 00 	lds	r24, 0x00C1
    5492:	8f 7d       	andi	r24, 0xDF	; 223
    5494:	80 93 c1 00 	sts	0x00C1, r24
    5498:	14 c0       	rjmp	.+40     	; 0x54c2 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    549a:	e0 91 ab 05 	lds	r30, 0x05AB
    549e:	f0 91 ac 05 	lds	r31, 0x05AC
    54a2:	e7 59       	subi	r30, 0x97	; 151
    54a4:	fa 4f       	sbci	r31, 0xFA	; 250
    54a6:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    54a8:	80 91 ab 05 	lds	r24, 0x05AB
    54ac:	90 91 ac 05 	lds	r25, 0x05AC
    54b0:	01 96       	adiw	r24, 0x01	; 1
    54b2:	8f 73       	andi	r24, 0x3F	; 63
    54b4:	90 70       	andi	r25, 0x00	; 0
    54b6:	90 93 ac 05 	sts	0x05AC, r25
    54ba:	80 93 ab 05 	sts	0x05AB, r24
	
  #if defined(UDR0)
    UDR0 = c;
    54be:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    54c2:	ff 91       	pop	r31
    54c4:	ef 91       	pop	r30
    54c6:	9f 91       	pop	r25
    54c8:	8f 91       	pop	r24
    54ca:	3f 91       	pop	r19
    54cc:	2f 91       	pop	r18
    54ce:	0f 90       	pop	r0
    54d0:	0f be       	out	0x3f, r0	; 63
    54d2:	0f 90       	pop	r0
    54d4:	1f 90       	pop	r1
    54d6:	18 95       	reti

000054d8 <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    54d8:	af 92       	push	r10
    54da:	bf 92       	push	r11
    54dc:	df 92       	push	r13
    54de:	ef 92       	push	r14
    54e0:	ff 92       	push	r15
    54e2:	0f 93       	push	r16
    54e4:	1f 93       	push	r17
    54e6:	cf 93       	push	r28
    54e8:	df 93       	push	r29
    54ea:	ec 01       	movw	r28, r24
    54ec:	7a 01       	movw	r14, r20
    54ee:	8b 01       	movw	r16, r22
    54f0:	dd 24       	eor	r13, r13
    54f2:	40 30       	cpi	r20, 0x00	; 0
    54f4:	81 ee       	ldi	r24, 0xE1	; 225
    54f6:	58 07       	cpc	r21, r24
    54f8:	80 e0       	ldi	r24, 0x00	; 0
    54fa:	68 07       	cpc	r22, r24
    54fc:	80 e0       	ldi	r24, 0x00	; 0
    54fe:	78 07       	cpc	r23, r24
    5500:	11 f0       	breq	.+4      	; 0x5506 <_ZN14HardwareSerial5beginEm+0x2e>
    5502:	dd 24       	eor	r13, r13
    5504:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    5506:	91 e0       	ldi	r25, 0x01	; 1
    5508:	a9 2e       	mov	r10, r25
    550a:	b1 2c       	mov	r11, r1
    550c:	ec 89       	ldd	r30, Y+20	; 0x14
    550e:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    5510:	dd 20       	and	r13, r13
    5512:	69 f0       	breq	.+26     	; 0x552e <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    5514:	c5 01       	movw	r24, r10
    5516:	0e 8c       	ldd	r0, Y+30	; 0x1e
    5518:	02 c0       	rjmp	.+4      	; 0x551e <_ZN14HardwareSerial5beginEm+0x46>
    551a:	88 0f       	add	r24, r24
    551c:	99 1f       	adc	r25, r25
    551e:	0a 94       	dec	r0
    5520:	e2 f7       	brpl	.-8      	; 0x551a <_ZN14HardwareSerial5beginEm+0x42>
    5522:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    5524:	60 e0       	ldi	r22, 0x00	; 0
    5526:	79 e0       	ldi	r23, 0x09	; 9
    5528:	8d e3       	ldi	r24, 0x3D	; 61
    552a:	90 e0       	ldi	r25, 0x00	; 0
    552c:	05 c0       	rjmp	.+10     	; 0x5538 <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    552e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    5530:	60 e8       	ldi	r22, 0x80	; 128
    5532:	74 e8       	ldi	r23, 0x84	; 132
    5534:	8e e1       	ldi	r24, 0x1E	; 30
    5536:	90 e0       	ldi	r25, 0x00	; 0
    5538:	a8 01       	movw	r20, r16
    553a:	97 01       	movw	r18, r14
    553c:	0e 94 0f 33 	call	0x661e	; 0x661e <__udivmodsi4>
    5540:	21 50       	subi	r18, 0x01	; 1
    5542:	30 40       	sbci	r19, 0x00	; 0
    5544:	40 40       	sbci	r20, 0x00	; 0
    5546:	50 40       	sbci	r21, 0x00	; 0
    5548:	56 95       	lsr	r21
    554a:	47 95       	ror	r20
    554c:	37 95       	ror	r19
    554e:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    5550:	80 e1       	ldi	r24, 0x10	; 16
    5552:	20 30       	cpi	r18, 0x00	; 0
    5554:	38 07       	cpc	r19, r24
    5556:	20 f0       	brcs	.+8      	; 0x5560 <_ZN14HardwareSerial5beginEm+0x88>
    5558:	dd 20       	and	r13, r13
    555a:	11 f0       	breq	.+4      	; 0x5560 <_ZN14HardwareSerial5beginEm+0x88>
    555c:	dd 24       	eor	r13, r13
    555e:	d6 cf       	rjmp	.-84     	; 0x550c <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    5560:	e8 89       	ldd	r30, Y+16	; 0x10
    5562:	f9 89       	ldd	r31, Y+17	; 0x11
    5564:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    5566:	ea 89       	ldd	r30, Y+18	; 0x12
    5568:	fb 89       	ldd	r31, Y+19	; 0x13
    556a:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    556c:	ee 89       	ldd	r30, Y+22	; 0x16
    556e:	ff 89       	ldd	r31, Y+23	; 0x17
    5570:	40 81       	ld	r20, Z
    5572:	21 e0       	ldi	r18, 0x01	; 1
    5574:	30 e0       	ldi	r19, 0x00	; 0
    5576:	c9 01       	movw	r24, r18
    5578:	0a 8c       	ldd	r0, Y+26	; 0x1a
    557a:	02 c0       	rjmp	.+4      	; 0x5580 <_ZN14HardwareSerial5beginEm+0xa8>
    557c:	88 0f       	add	r24, r24
    557e:	99 1f       	adc	r25, r25
    5580:	0a 94       	dec	r0
    5582:	e2 f7       	brpl	.-8      	; 0x557c <_ZN14HardwareSerial5beginEm+0xa4>
    5584:	48 2b       	or	r20, r24
    5586:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    5588:	ee 89       	ldd	r30, Y+22	; 0x16
    558a:	ff 89       	ldd	r31, Y+23	; 0x17
    558c:	40 81       	ld	r20, Z
    558e:	c9 01       	movw	r24, r18
    5590:	0b 8c       	ldd	r0, Y+27	; 0x1b
    5592:	02 c0       	rjmp	.+4      	; 0x5598 <_ZN14HardwareSerial5beginEm+0xc0>
    5594:	88 0f       	add	r24, r24
    5596:	99 1f       	adc	r25, r25
    5598:	0a 94       	dec	r0
    559a:	e2 f7       	brpl	.-8      	; 0x5594 <_ZN14HardwareSerial5beginEm+0xbc>
    559c:	48 2b       	or	r20, r24
    559e:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    55a0:	ee 89       	ldd	r30, Y+22	; 0x16
    55a2:	ff 89       	ldd	r31, Y+23	; 0x17
    55a4:	40 81       	ld	r20, Z
    55a6:	c9 01       	movw	r24, r18
    55a8:	0c 8c       	ldd	r0, Y+28	; 0x1c
    55aa:	02 c0       	rjmp	.+4      	; 0x55b0 <_ZN14HardwareSerial5beginEm+0xd8>
    55ac:	88 0f       	add	r24, r24
    55ae:	99 1f       	adc	r25, r25
    55b0:	0a 94       	dec	r0
    55b2:	e2 f7       	brpl	.-8      	; 0x55ac <_ZN14HardwareSerial5beginEm+0xd4>
    55b4:	48 2b       	or	r20, r24
    55b6:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    55b8:	ee 89       	ldd	r30, Y+22	; 0x16
    55ba:	ff 89       	ldd	r31, Y+23	; 0x17
    55bc:	80 81       	ld	r24, Z
    55be:	0d 8c       	ldd	r0, Y+29	; 0x1d
    55c0:	02 c0       	rjmp	.+4      	; 0x55c6 <_ZN14HardwareSerial5beginEm+0xee>
    55c2:	22 0f       	add	r18, r18
    55c4:	33 1f       	adc	r19, r19
    55c6:	0a 94       	dec	r0
    55c8:	e2 f7       	brpl	.-8      	; 0x55c2 <_ZN14HardwareSerial5beginEm+0xea>
    55ca:	20 95       	com	r18
    55cc:	28 23       	and	r18, r24
    55ce:	20 83       	st	Z, r18
}
    55d0:	df 91       	pop	r29
    55d2:	cf 91       	pop	r28
    55d4:	1f 91       	pop	r17
    55d6:	0f 91       	pop	r16
    55d8:	ff 90       	pop	r15
    55da:	ef 90       	pop	r14
    55dc:	df 90       	pop	r13
    55de:	bf 90       	pop	r11
    55e0:	af 90       	pop	r10
    55e2:	08 95       	ret

000055e4 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    55e4:	dc 01       	movw	r26, r24
    55e6:	1c 96       	adiw	r26, 0x0c	; 12
    55e8:	ed 91       	ld	r30, X+
    55ea:	fc 91       	ld	r31, X
    55ec:	1d 97       	sbiw	r26, 0x0d	; 13
    55ee:	e0 5c       	subi	r30, 0xC0	; 192
    55f0:	ff 4f       	sbci	r31, 0xFF	; 255
    55f2:	21 91       	ld	r18, Z+
    55f4:	31 91       	ld	r19, Z+
    55f6:	80 81       	ld	r24, Z
    55f8:	91 81       	ldd	r25, Z+1	; 0x01
    55fa:	28 1b       	sub	r18, r24
    55fc:	39 0b       	sbc	r19, r25
    55fe:	2f 73       	andi	r18, 0x3F	; 63
    5600:	30 70       	andi	r19, 0x00	; 0
}
    5602:	c9 01       	movw	r24, r18
    5604:	08 95       	ret

00005606 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    5606:	dc 01       	movw	r26, r24
    5608:	1c 96       	adiw	r26, 0x0c	; 12
    560a:	ed 91       	ld	r30, X+
    560c:	fc 91       	ld	r31, X
    560e:	1d 97       	sbiw	r26, 0x0d	; 13
    5610:	e0 5c       	subi	r30, 0xC0	; 192
    5612:	ff 4f       	sbci	r31, 0xFF	; 255
    5614:	20 81       	ld	r18, Z
    5616:	31 81       	ldd	r19, Z+1	; 0x01
    5618:	e0 54       	subi	r30, 0x40	; 64
    561a:	f0 40       	sbci	r31, 0x00	; 0
    561c:	df 01       	movw	r26, r30
    561e:	ae 5b       	subi	r26, 0xBE	; 190
    5620:	bf 4f       	sbci	r27, 0xFF	; 255
    5622:	8d 91       	ld	r24, X+
    5624:	9c 91       	ld	r25, X
    5626:	11 97       	sbiw	r26, 0x01	; 1
    5628:	28 17       	cp	r18, r24
    562a:	39 07       	cpc	r19, r25
    562c:	19 f4       	brne	.+6      	; 0x5634 <_ZN14HardwareSerial4peekEv+0x2e>
    562e:	2f ef       	ldi	r18, 0xFF	; 255
    5630:	3f ef       	ldi	r19, 0xFF	; 255
    5632:	07 c0       	rjmp	.+14     	; 0x5642 <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    5634:	8d 91       	ld	r24, X+
    5636:	9c 91       	ld	r25, X
    5638:	e8 0f       	add	r30, r24
    563a:	f9 1f       	adc	r31, r25
    563c:	80 81       	ld	r24, Z
    563e:	28 2f       	mov	r18, r24
    5640:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    5642:	c9 01       	movw	r24, r18
    5644:	08 95       	ret

00005646 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    5646:	dc 01       	movw	r26, r24
    5648:	1c 96       	adiw	r26, 0x0c	; 12
    564a:	ed 91       	ld	r30, X+
    564c:	fc 91       	ld	r31, X
    564e:	1d 97       	sbiw	r26, 0x0d	; 13
    5650:	e0 5c       	subi	r30, 0xC0	; 192
    5652:	ff 4f       	sbci	r31, 0xFF	; 255
    5654:	20 81       	ld	r18, Z
    5656:	31 81       	ldd	r19, Z+1	; 0x01
    5658:	e0 54       	subi	r30, 0x40	; 64
    565a:	f0 40       	sbci	r31, 0x00	; 0
    565c:	df 01       	movw	r26, r30
    565e:	ae 5b       	subi	r26, 0xBE	; 190
    5660:	bf 4f       	sbci	r27, 0xFF	; 255
    5662:	8d 91       	ld	r24, X+
    5664:	9c 91       	ld	r25, X
    5666:	11 97       	sbiw	r26, 0x01	; 1
    5668:	28 17       	cp	r18, r24
    566a:	39 07       	cpc	r19, r25
    566c:	19 f4       	brne	.+6      	; 0x5674 <_ZN14HardwareSerial4readEv+0x2e>
    566e:	2f ef       	ldi	r18, 0xFF	; 255
    5670:	3f ef       	ldi	r19, 0xFF	; 255
    5672:	10 c0       	rjmp	.+32     	; 0x5694 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    5674:	8d 91       	ld	r24, X+
    5676:	9c 91       	ld	r25, X
    5678:	11 97       	sbiw	r26, 0x01	; 1
    567a:	e8 0f       	add	r30, r24
    567c:	f9 1f       	adc	r31, r25
    567e:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    5680:	8d 91       	ld	r24, X+
    5682:	9c 91       	ld	r25, X
    5684:	11 97       	sbiw	r26, 0x01	; 1
    5686:	01 96       	adiw	r24, 0x01	; 1
    5688:	8f 73       	andi	r24, 0x3F	; 63
    568a:	90 70       	andi	r25, 0x00	; 0
    568c:	11 96       	adiw	r26, 0x01	; 1
    568e:	9c 93       	st	X, r25
    5690:	8e 93       	st	-X, r24
    return c;
    5692:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    5694:	c9 01       	movw	r24, r18
    5696:	08 95       	ret

00005698 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    5698:	fc 01       	movw	r30, r24
    569a:	86 85       	ldd	r24, Z+14	; 0x0e
    569c:	97 85       	ldd	r25, Z+15	; 0x0f
    569e:	dc 01       	movw	r26, r24
    56a0:	a0 5c       	subi	r26, 0xC0	; 192
    56a2:	bf 4f       	sbci	r27, 0xFF	; 255
    56a4:	fc 01       	movw	r30, r24
    56a6:	ee 5b       	subi	r30, 0xBE	; 190
    56a8:	ff 4f       	sbci	r31, 0xFF	; 255
    56aa:	2d 91       	ld	r18, X+
    56ac:	3c 91       	ld	r19, X
    56ae:	11 97       	sbiw	r26, 0x01	; 1
    56b0:	80 81       	ld	r24, Z
    56b2:	91 81       	ldd	r25, Z+1	; 0x01
    56b4:	28 17       	cp	r18, r24
    56b6:	39 07       	cpc	r19, r25
    56b8:	c1 f7       	brne	.-16     	; 0x56aa <_ZN14HardwareSerial5flushEv+0x12>
    ;
}
    56ba:	08 95       	ret

000056bc <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    56bc:	cf 93       	push	r28
    56be:	df 93       	push	r29
    56c0:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    56c2:	ee 85       	ldd	r30, Y+14	; 0x0e
    56c4:	ff 85       	ldd	r31, Y+15	; 0x0f
    56c6:	e0 5c       	subi	r30, 0xC0	; 192
    56c8:	ff 4f       	sbci	r31, 0xFF	; 255
    56ca:	20 81       	ld	r18, Z
    56cc:	31 81       	ldd	r19, Z+1	; 0x01
    56ce:	e0 54       	subi	r30, 0x40	; 64
    56d0:	f0 40       	sbci	r31, 0x00	; 0
    56d2:	2f 5f       	subi	r18, 0xFF	; 255
    56d4:	3f 4f       	sbci	r19, 0xFF	; 255
    56d6:	2f 73       	andi	r18, 0x3F	; 63
    56d8:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    56da:	df 01       	movw	r26, r30
    56dc:	ae 5b       	subi	r26, 0xBE	; 190
    56de:	bf 4f       	sbci	r27, 0xFF	; 255
    56e0:	8d 91       	ld	r24, X+
    56e2:	9c 91       	ld	r25, X
    56e4:	11 97       	sbiw	r26, 0x01	; 1
    56e6:	28 17       	cp	r18, r24
    56e8:	39 07       	cpc	r19, r25
    56ea:	d1 f3       	breq	.-12     	; 0x56e0 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    56ec:	e0 5c       	subi	r30, 0xC0	; 192
    56ee:	ff 4f       	sbci	r31, 0xFF	; 255
    56f0:	80 81       	ld	r24, Z
    56f2:	91 81       	ldd	r25, Z+1	; 0x01
    56f4:	e0 54       	subi	r30, 0x40	; 64
    56f6:	f0 40       	sbci	r31, 0x00	; 0
    56f8:	e8 0f       	add	r30, r24
    56fa:	f9 1f       	adc	r31, r25
    56fc:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    56fe:	ee 85       	ldd	r30, Y+14	; 0x0e
    5700:	ff 85       	ldd	r31, Y+15	; 0x0f
    5702:	e0 5c       	subi	r30, 0xC0	; 192
    5704:	ff 4f       	sbci	r31, 0xFF	; 255
    5706:	31 83       	std	Z+1, r19	; 0x01
    5708:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    570a:	ee 89       	ldd	r30, Y+22	; 0x16
    570c:	ff 89       	ldd	r31, Y+23	; 0x17
    570e:	20 81       	ld	r18, Z
    5710:	81 e0       	ldi	r24, 0x01	; 1
    5712:	90 e0       	ldi	r25, 0x00	; 0
    5714:	0d 8c       	ldd	r0, Y+29	; 0x1d
    5716:	02 c0       	rjmp	.+4      	; 0x571c <_ZN14HardwareSerial5writeEh+0x60>
    5718:	88 0f       	add	r24, r24
    571a:	99 1f       	adc	r25, r25
    571c:	0a 94       	dec	r0
    571e:	e2 f7       	brpl	.-8      	; 0x5718 <_ZN14HardwareSerial5writeEh+0x5c>
    5720:	28 2b       	or	r18, r24
    5722:	20 83       	st	Z, r18
  
  return 1;
}
    5724:	81 e0       	ldi	r24, 0x01	; 1
    5726:	90 e0       	ldi	r25, 0x00	; 0
    5728:	df 91       	pop	r29
    572a:	cf 91       	pop	r28
    572c:	08 95       	ret

0000572e <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    572e:	10 92 b0 05 	sts	0x05B0, r1
    5732:	10 92 af 05 	sts	0x05AF, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    5736:	88 ee       	ldi	r24, 0xE8	; 232
    5738:	93 e0       	ldi	r25, 0x03	; 3
    573a:	a0 e0       	ldi	r26, 0x00	; 0
    573c:	b0 e0       	ldi	r27, 0x00	; 0
    573e:	80 93 b1 05 	sts	0x05B1, r24
    5742:	90 93 b2 05 	sts	0x05B2, r25
    5746:	a0 93 b3 05 	sts	0x05B3, r26
    574a:	b0 93 b4 05 	sts	0x05B4, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    574e:	8a ec       	ldi	r24, 0xCA	; 202
    5750:	91 e0       	ldi	r25, 0x01	; 1
    5752:	90 93 ae 05 	sts	0x05AE, r25
    5756:	80 93 ad 05 	sts	0x05AD, r24
{
  _rx_buffer = rx_buffer;
    575a:	85 e2       	ldi	r24, 0x25	; 37
    575c:	95 e0       	ldi	r25, 0x05	; 5
    575e:	90 93 ba 05 	sts	0x05BA, r25
    5762:	80 93 b9 05 	sts	0x05B9, r24
  _tx_buffer = tx_buffer;
    5766:	89 e6       	ldi	r24, 0x69	; 105
    5768:	95 e0       	ldi	r25, 0x05	; 5
    576a:	90 93 bc 05 	sts	0x05BC, r25
    576e:	80 93 bb 05 	sts	0x05BB, r24
  _ubrrh = ubrrh;
    5772:	85 ec       	ldi	r24, 0xC5	; 197
    5774:	90 e0       	ldi	r25, 0x00	; 0
    5776:	90 93 be 05 	sts	0x05BE, r25
    577a:	80 93 bd 05 	sts	0x05BD, r24
  _ubrrl = ubrrl;
    577e:	84 ec       	ldi	r24, 0xC4	; 196
    5780:	90 e0       	ldi	r25, 0x00	; 0
    5782:	90 93 c0 05 	sts	0x05C0, r25
    5786:	80 93 bf 05 	sts	0x05BF, r24
  _ucsra = ucsra;
    578a:	80 ec       	ldi	r24, 0xC0	; 192
    578c:	90 e0       	ldi	r25, 0x00	; 0
    578e:	90 93 c2 05 	sts	0x05C2, r25
    5792:	80 93 c1 05 	sts	0x05C1, r24
  _ucsrb = ucsrb;
    5796:	81 ec       	ldi	r24, 0xC1	; 193
    5798:	90 e0       	ldi	r25, 0x00	; 0
    579a:	90 93 c4 05 	sts	0x05C4, r25
    579e:	80 93 c3 05 	sts	0x05C3, r24
  _udr = udr;
    57a2:	86 ec       	ldi	r24, 0xC6	; 198
    57a4:	90 e0       	ldi	r25, 0x00	; 0
    57a6:	90 93 c6 05 	sts	0x05C6, r25
    57aa:	80 93 c5 05 	sts	0x05C5, r24
  _rxen = rxen;
    57ae:	84 e0       	ldi	r24, 0x04	; 4
    57b0:	80 93 c7 05 	sts	0x05C7, r24
  _txen = txen;
    57b4:	83 e0       	ldi	r24, 0x03	; 3
    57b6:	80 93 c8 05 	sts	0x05C8, r24
  _rxcie = rxcie;
    57ba:	87 e0       	ldi	r24, 0x07	; 7
    57bc:	80 93 c9 05 	sts	0x05C9, r24
  _udrie = udrie;
    57c0:	85 e0       	ldi	r24, 0x05	; 5
    57c2:	80 93 ca 05 	sts	0x05CA, r24
  _u2x = u2x;
    57c6:	81 e0       	ldi	r24, 0x01	; 1
    57c8:	80 93 cb 05 	sts	0x05CB, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    57cc:	08 95       	ret

000057ce <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    57ce:	0f 93       	push	r16
    57d0:	fc 01       	movw	r30, r24
    57d2:	8a ed       	ldi	r24, 0xDA	; 218
    57d4:	91 e0       	ldi	r25, 0x01	; 1
    57d6:	91 83       	std	Z+1, r25	; 0x01
    57d8:	80 83       	st	Z, r24
{
    _address[0] = first_octet;
    57da:	62 83       	std	Z+2, r22	; 0x02
    _address[1] = second_octet;
    57dc:	43 83       	std	Z+3, r20	; 0x03
    _address[2] = third_octet;
    57de:	24 83       	std	Z+4, r18	; 0x04
    _address[3] = fourth_octet;
    57e0:	05 83       	std	Z+5, r16	; 0x05
}
    57e2:	0f 91       	pop	r16
    57e4:	08 95       	ret

000057e6 <_GLOBAL__I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    57e6:	8a ed       	ldi	r24, 0xDA	; 218
    57e8:	91 e0       	ldi	r25, 0x01	; 1
    57ea:	90 93 cd 05 	sts	0x05CD, r25
    57ee:	80 93 cc 05 	sts	0x05CC, r24
{
    _address[0] = first_octet;
    57f2:	10 92 ce 05 	sts	0x05CE, r1
    _address[1] = second_octet;
    57f6:	10 92 cf 05 	sts	0x05CF, r1
    _address[2] = third_octet;
    57fa:	10 92 d0 05 	sts	0x05D0, r1
    _address[3] = fourth_octet;
    57fe:	10 92 d1 05 	sts	0x05D1, r1
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
    5802:	08 95       	ret

00005804 <_ZNK9IPAddress7printToER5Print>:
bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
    5804:	8f 92       	push	r8
    5806:	9f 92       	push	r9
    5808:	af 92       	push	r10
    580a:	bf 92       	push	r11
    580c:	cf 92       	push	r12
    580e:	df 92       	push	r13
    5810:	ef 92       	push	r14
    5812:	ff 92       	push	r15
    5814:	0f 93       	push	r16
    5816:	1f 93       	push	r17
    5818:	cf 93       	push	r28
    581a:	df 93       	push	r29
    581c:	4c 01       	movw	r8, r24
    581e:	6b 01       	movw	r12, r22
    5820:	7c 01       	movw	r14, r24
    5822:	aa 24       	eor	r10, r10
    5824:	bb 24       	eor	r11, r11
    5826:	c0 e0       	ldi	r28, 0x00	; 0
    5828:	d0 e0       	ldi	r29, 0x00	; 0
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
    582a:	c6 01       	movw	r24, r12
    582c:	f7 01       	movw	r30, r14
    582e:	62 81       	ldd	r22, Z+2	; 0x02
    5830:	4a e0       	ldi	r20, 0x0A	; 10
    5832:	50 e0       	ldi	r21, 0x00	; 0
    5834:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <_ZN5Print5printEhi>
    5838:	8c 01       	movw	r16, r24
        n += p.print('.');
    583a:	c6 01       	movw	r24, r12
    583c:	6e e2       	ldi	r22, 0x2E	; 46
    583e:	0e 94 a7 2c 	call	0x594e	; 0x594e <_ZN5Print5printEc>
size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
    5842:	08 0f       	add	r16, r24
    5844:	19 1f       	adc	r17, r25
        n += p.print('.');
    5846:	a0 0e       	add	r10, r16
    5848:	b1 1e       	adc	r11, r17
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    584a:	21 96       	adiw	r28, 0x01	; 1
    584c:	08 94       	sec
    584e:	e1 1c       	adc	r14, r1
    5850:	f1 1c       	adc	r15, r1
    5852:	c3 30       	cpi	r28, 0x03	; 3
    5854:	d1 05       	cpc	r29, r1
    5856:	49 f7       	brne	.-46     	; 0x582a <_ZNK9IPAddress7printToER5Print+0x26>
    {
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    5858:	c6 01       	movw	r24, r12
    585a:	f4 01       	movw	r30, r8
    585c:	65 81       	ldd	r22, Z+5	; 0x05
    585e:	4a e0       	ldi	r20, 0x0A	; 10
    5860:	50 e0       	ldi	r21, 0x00	; 0
    5862:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <_ZN5Print5printEhi>
    5866:	95 01       	movw	r18, r10
    5868:	28 0f       	add	r18, r24
    586a:	39 1f       	adc	r19, r25
    return n;
}
    586c:	c9 01       	movw	r24, r18
    586e:	df 91       	pop	r29
    5870:	cf 91       	pop	r28
    5872:	1f 91       	pop	r17
    5874:	0f 91       	pop	r16
    5876:	ff 90       	pop	r15
    5878:	ef 90       	pop	r14
    587a:	df 90       	pop	r13
    587c:	cf 90       	pop	r12
    587e:	bf 90       	pop	r11
    5880:	af 90       	pop	r10
    5882:	9f 90       	pop	r9
    5884:	8f 90       	pop	r8
    5886:	08 95       	ret

00005888 <_ZN9IPAddressC1Em>:
    _address[1] = second_octet;
    _address[2] = third_octet;
    _address[3] = fourth_octet;
}

IPAddress::IPAddress(uint32_t address)
    5888:	df 93       	push	r29
    588a:	cf 93       	push	r28
    588c:	00 d0       	rcall	.+0      	; 0x588e <_ZN9IPAddressC1Em+0x6>
    588e:	00 d0       	rcall	.+0      	; 0x5890 <_ZN9IPAddressC1Em+0x8>
    5890:	cd b7       	in	r28, 0x3d	; 61
    5892:	de b7       	in	r29, 0x3e	; 62
    5894:	fc 01       	movw	r30, r24
    5896:	8a ed       	ldi	r24, 0xDA	; 218
    5898:	91 e0       	ldi	r25, 0x01	; 1
    589a:	91 83       	std	Z+1, r25	; 0x01
    589c:	80 83       	st	Z, r24
{
    memcpy(_address, &address, sizeof(_address));
    589e:	42 83       	std	Z+2, r20	; 0x02
    58a0:	53 83       	std	Z+3, r21	; 0x03
    58a2:	64 83       	std	Z+4, r22	; 0x04
    58a4:	75 83       	std	Z+5, r23	; 0x05
}
    58a6:	0f 90       	pop	r0
    58a8:	0f 90       	pop	r0
    58aa:	0f 90       	pop	r0
    58ac:	0f 90       	pop	r0
    58ae:	cf 91       	pop	r28
    58b0:	df 91       	pop	r29
    58b2:	08 95       	ret

000058b4 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    58b4:	cf 92       	push	r12
    58b6:	df 92       	push	r13
    58b8:	ef 92       	push	r14
    58ba:	ff 92       	push	r15
    58bc:	0f 93       	push	r16
    58be:	1f 93       	push	r17
    58c0:	cf 93       	push	r28
    58c2:	df 93       	push	r29
    58c4:	7c 01       	movw	r14, r24
    58c6:	6b 01       	movw	r12, r22
    58c8:	8a 01       	movw	r16, r20
    58ca:	c0 e0       	ldi	r28, 0x00	; 0
    58cc:	d0 e0       	ldi	r29, 0x00	; 0
    58ce:	0f c0       	rjmp	.+30     	; 0x58ee <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    58d0:	d6 01       	movw	r26, r12
    58d2:	6d 91       	ld	r22, X+
    58d4:	6d 01       	movw	r12, r26
    58d6:	d7 01       	movw	r26, r14
    58d8:	ed 91       	ld	r30, X+
    58da:	fc 91       	ld	r31, X
    58dc:	01 90       	ld	r0, Z+
    58de:	f0 81       	ld	r31, Z
    58e0:	e0 2d       	mov	r30, r0
    58e2:	c7 01       	movw	r24, r14
    58e4:	09 95       	icall
    58e6:	c8 0f       	add	r28, r24
    58e8:	d9 1f       	adc	r29, r25
    58ea:	01 50       	subi	r16, 0x01	; 1
    58ec:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    58ee:	01 15       	cp	r16, r1
    58f0:	11 05       	cpc	r17, r1
    58f2:	71 f7       	brne	.-36     	; 0x58d0 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    58f4:	ce 01       	movw	r24, r28
    58f6:	df 91       	pop	r29
    58f8:	cf 91       	pop	r28
    58fa:	1f 91       	pop	r17
    58fc:	0f 91       	pop	r16
    58fe:	ff 90       	pop	r15
    5900:	ef 90       	pop	r14
    5902:	df 90       	pop	r13
    5904:	cf 90       	pop	r12
    5906:	08 95       	ret

00005908 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
    5908:	ef 92       	push	r14
    590a:	ff 92       	push	r15
    590c:	0f 93       	push	r16
    590e:	1f 93       	push	r17
    5910:	cf 93       	push	r28
    5912:	df 93       	push	r29
    5914:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    5916:	8b 01       	movw	r16, r22
    5918:	c0 e0       	ldi	r28, 0x00	; 0
    591a:	d0 e0       	ldi	r29, 0x00	; 0
    591c:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    591e:	0f 5f       	subi	r16, 0xFF	; 255
    5920:	1f 4f       	sbci	r17, 0xFF	; 255
    5922:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    5924:	66 23       	and	r22, r22
    5926:	59 f0       	breq	.+22     	; 0x593e <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    n += write(c);
    5928:	d7 01       	movw	r26, r14
    592a:	ed 91       	ld	r30, X+
    592c:	fc 91       	ld	r31, X
    592e:	01 90       	ld	r0, Z+
    5930:	f0 81       	ld	r31, Z
    5932:	e0 2d       	mov	r30, r0
    5934:	c7 01       	movw	r24, r14
    5936:	09 95       	icall
    5938:	c8 0f       	add	r28, r24
    593a:	d9 1f       	adc	r29, r25
    593c:	ef cf       	rjmp	.-34     	; 0x591c <_ZN5Print5printEPK19__FlashStringHelper+0x14>
  }
  return n;
}
    593e:	ce 01       	movw	r24, r28
    5940:	df 91       	pop	r29
    5942:	cf 91       	pop	r28
    5944:	1f 91       	pop	r17
    5946:	0f 91       	pop	r16
    5948:	ff 90       	pop	r15
    594a:	ef 90       	pop	r14
    594c:	08 95       	ret

0000594e <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    594e:	dc 01       	movw	r26, r24
{
  return write(c);
    5950:	ed 91       	ld	r30, X+
    5952:	fc 91       	ld	r31, X
    5954:	01 90       	ld	r0, Z+
    5956:	f0 81       	ld	r31, Z
    5958:	e0 2d       	mov	r30, r0
    595a:	09 95       	icall
}
    595c:	08 95       	ret

0000595e <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    595e:	ef 92       	push	r14
    5960:	ff 92       	push	r15
    5962:	0f 93       	push	r16
    5964:	1f 93       	push	r17
    5966:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    5968:	dc 01       	movw	r26, r24
    596a:	ed 91       	ld	r30, X+
    596c:	fc 91       	ld	r31, X
    596e:	01 90       	ld	r0, Z+
    5970:	f0 81       	ld	r31, Z
    5972:	e0 2d       	mov	r30, r0
    5974:	6d e0       	ldi	r22, 0x0D	; 13
    5976:	09 95       	icall
    5978:	7c 01       	movw	r14, r24
    597a:	d8 01       	movw	r26, r16
    597c:	ed 91       	ld	r30, X+
    597e:	fc 91       	ld	r31, X
    5980:	01 90       	ld	r0, Z+
    5982:	f0 81       	ld	r31, Z
    5984:	e0 2d       	mov	r30, r0
    5986:	c8 01       	movw	r24, r16
    5988:	6a e0       	ldi	r22, 0x0A	; 10
    598a:	09 95       	icall
    598c:	9c 01       	movw	r18, r24
    598e:	2e 0d       	add	r18, r14
    5990:	3f 1d       	adc	r19, r15
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    5992:	c9 01       	movw	r24, r18
    5994:	1f 91       	pop	r17
    5996:	0f 91       	pop	r16
    5998:	ff 90       	pop	r15
    599a:	ef 90       	pop	r14
    599c:	08 95       	ret

0000599e <_ZN5Print7printlnEPK19__FlashStringHelper>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    599e:	ef 92       	push	r14
    59a0:	ff 92       	push	r15
    59a2:	0f 93       	push	r16
    59a4:	1f 93       	push	r17
    59a6:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
    59a8:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN5Print5printEPK19__FlashStringHelper>
    59ac:	8c 01       	movw	r16, r24
  n += println();
    59ae:	c7 01       	movw	r24, r14
    59b0:	0e 94 af 2c 	call	0x595e	; 0x595e <_ZN5Print7printlnEv>
    59b4:	9c 01       	movw	r18, r24
    59b6:	20 0f       	add	r18, r16
    59b8:	31 1f       	adc	r19, r17
  return n;
}
    59ba:	c9 01       	movw	r24, r18
    59bc:	1f 91       	pop	r17
    59be:	0f 91       	pop	r16
    59c0:	ff 90       	pop	r15
    59c2:	ef 90       	pop	r14
    59c4:	08 95       	ret

000059c6 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    59c6:	cf 93       	push	r28
    59c8:	df 93       	push	r29
    59ca:	db 01       	movw	r26, r22
    59cc:	0d 90       	ld	r0, X+
    59ce:	00 20       	and	r0, r0
    59d0:	e9 f7       	brne	.-6      	; 0x59cc <_ZN5Print5writeEPKc+0x6>
    59d2:	11 97       	sbiw	r26, 0x01	; 1
    59d4:	a6 1b       	sub	r26, r22
    59d6:	b7 0b       	sbc	r27, r23
    59d8:	ec 01       	movw	r28, r24
    59da:	e8 81       	ld	r30, Y
    59dc:	f9 81       	ldd	r31, Y+1	; 0x01
    59de:	02 80       	ldd	r0, Z+2	; 0x02
    59e0:	f3 81       	ldd	r31, Z+3	; 0x03
    59e2:	e0 2d       	mov	r30, r0
    59e4:	ad 01       	movw	r20, r26
    59e6:	09 95       	icall
    59e8:	df 91       	pop	r29
    59ea:	cf 91       	pop	r28
    59ec:	08 95       	ret

000059ee <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    59ee:	4f 92       	push	r4
    59f0:	5f 92       	push	r5
    59f2:	7f 92       	push	r7
    59f4:	8f 92       	push	r8
    59f6:	9f 92       	push	r9
    59f8:	af 92       	push	r10
    59fa:	bf 92       	push	r11
    59fc:	cf 92       	push	r12
    59fe:	df 92       	push	r13
    5a00:	ef 92       	push	r14
    5a02:	ff 92       	push	r15
    5a04:	0f 93       	push	r16
    5a06:	1f 93       	push	r17
    5a08:	df 93       	push	r29
    5a0a:	cf 93       	push	r28
    5a0c:	cd b7       	in	r28, 0x3d	; 61
    5a0e:	de b7       	in	r29, 0x3e	; 62
    5a10:	a1 97       	sbiw	r28, 0x21	; 33
    5a12:	0f b6       	in	r0, 0x3f	; 63
    5a14:	f8 94       	cli
    5a16:	de bf       	out	0x3e, r29	; 62
    5a18:	0f be       	out	0x3f, r0	; 63
    5a1a:	cd bf       	out	0x3d, r28	; 61
    5a1c:	2c 01       	movw	r4, r24
    5a1e:	74 2e       	mov	r7, r20
    5a20:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    5a22:	22 30       	cpi	r18, 0x02	; 2
    5a24:	08 f4       	brcc	.+2      	; 0x5a28 <_ZN5Print11printNumberEmh+0x3a>
    5a26:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    5a28:	19 a2       	std	Y+33, r1	; 0x21
    5a2a:	31 e2       	ldi	r19, 0x21	; 33
    5a2c:	c3 2e       	mov	r12, r19
    5a2e:	d1 2c       	mov	r13, r1
    5a30:	cc 0e       	add	r12, r28
    5a32:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    5a34:	82 2e       	mov	r8, r18
    5a36:	99 24       	eor	r9, r9
    5a38:	aa 24       	eor	r10, r10
    5a3a:	bb 24       	eor	r11, r11
    5a3c:	67 2d       	mov	r22, r7
    5a3e:	75 2f       	mov	r23, r21
    5a40:	a5 01       	movw	r20, r10
    5a42:	94 01       	movw	r18, r8
    5a44:	0e 94 0f 33 	call	0x661e	; 0x661e <__udivmodsi4>
    5a48:	79 01       	movw	r14, r18
    5a4a:	8a 01       	movw	r16, r20
    char c = m - base * n;
    5a4c:	c8 01       	movw	r24, r16
    5a4e:	b7 01       	movw	r22, r14
    5a50:	a5 01       	movw	r20, r10
    5a52:	94 01       	movw	r18, r8
    5a54:	0e 94 dc 32 	call	0x65b8	; 0x65b8 <__mulsi3>
    5a58:	47 2d       	mov	r20, r7
    5a5a:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    5a5c:	08 94       	sec
    5a5e:	c1 08       	sbc	r12, r1
    5a60:	d1 08       	sbc	r13, r1
    5a62:	4a 30       	cpi	r20, 0x0A	; 10
    5a64:	14 f4       	brge	.+4      	; 0x5a6a <_ZN5Print11printNumberEmh+0x7c>
    5a66:	40 5d       	subi	r20, 0xD0	; 208
    5a68:	01 c0       	rjmp	.+2      	; 0x5a6c <_ZN5Print11printNumberEmh+0x7e>
    5a6a:	49 5c       	subi	r20, 0xC9	; 201
    5a6c:	f6 01       	movw	r30, r12
    5a6e:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    5a70:	e1 14       	cp	r14, r1
    5a72:	f1 04       	cpc	r15, r1
    5a74:	01 05       	cpc	r16, r1
    5a76:	11 05       	cpc	r17, r1
    5a78:	21 f0       	breq	.+8      	; 0x5a82 <_ZN5Print11printNumberEmh+0x94>
    5a7a:	7e 2c       	mov	r7, r14
    5a7c:	5f 2d       	mov	r21, r15
    5a7e:	c8 01       	movw	r24, r16
    5a80:	dd cf       	rjmp	.-70     	; 0x5a3c <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    5a82:	c2 01       	movw	r24, r4
    5a84:	b6 01       	movw	r22, r12
    5a86:	0e 94 e3 2c 	call	0x59c6	; 0x59c6 <_ZN5Print5writeEPKc>
}
    5a8a:	a1 96       	adiw	r28, 0x21	; 33
    5a8c:	0f b6       	in	r0, 0x3f	; 63
    5a8e:	f8 94       	cli
    5a90:	de bf       	out	0x3e, r29	; 62
    5a92:	0f be       	out	0x3f, r0	; 63
    5a94:	cd bf       	out	0x3d, r28	; 61
    5a96:	cf 91       	pop	r28
    5a98:	df 91       	pop	r29
    5a9a:	1f 91       	pop	r17
    5a9c:	0f 91       	pop	r16
    5a9e:	ff 90       	pop	r15
    5aa0:	ef 90       	pop	r14
    5aa2:	df 90       	pop	r13
    5aa4:	cf 90       	pop	r12
    5aa6:	bf 90       	pop	r11
    5aa8:	af 90       	pop	r10
    5aaa:	9f 90       	pop	r9
    5aac:	8f 90       	pop	r8
    5aae:	7f 90       	pop	r7
    5ab0:	5f 90       	pop	r5
    5ab2:	4f 90       	pop	r4
    5ab4:	08 95       	ret

00005ab6 <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    5ab6:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    5ab8:	21 15       	cp	r18, r1
    5aba:	31 05       	cpc	r19, r1
    5abc:	41 f4       	brne	.+16     	; 0x5ace <_ZN5Print5printEmi+0x18>
    5abe:	ed 91       	ld	r30, X+
    5ac0:	fc 91       	ld	r31, X
    5ac2:	01 90       	ld	r0, Z+
    5ac4:	f0 81       	ld	r31, Z
    5ac6:	e0 2d       	mov	r30, r0
    5ac8:	64 2f       	mov	r22, r20
    5aca:	09 95       	icall
    5acc:	08 95       	ret
  else return printNumber(n, base);
    5ace:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <_ZN5Print11printNumberEmh>
}
    5ad2:	08 95       	ret

00005ad4 <_ZN5Print5printEhi>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    5ad4:	ef 92       	push	r14
    5ad6:	ff 92       	push	r15
    5ad8:	0f 93       	push	r16
    5ada:	1f 93       	push	r17
    5adc:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    5ade:	e6 2e       	mov	r14, r22
    5ae0:	ff 24       	eor	r15, r15
    5ae2:	00 e0       	ldi	r16, 0x00	; 0
    5ae4:	10 e0       	ldi	r17, 0x00	; 0
    5ae6:	b8 01       	movw	r22, r16
    5ae8:	a7 01       	movw	r20, r14
    5aea:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <_ZN5Print5printEmi>
}
    5aee:	1f 91       	pop	r17
    5af0:	0f 91       	pop	r16
    5af2:	ff 90       	pop	r15
    5af4:	ef 90       	pop	r14
    5af6:	08 95       	ret

00005af8 <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    5af8:	cf 92       	push	r12
    5afa:	df 92       	push	r13
    5afc:	ef 92       	push	r14
    5afe:	ff 92       	push	r15
    5b00:	0f 93       	push	r16
    5b02:	1f 93       	push	r17
    5b04:	cf 93       	push	r28
    5b06:	df 93       	push	r29
    5b08:	ec 01       	movw	r28, r24
    5b0a:	6a 01       	movw	r12, r20
    5b0c:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    5b0e:	21 15       	cp	r18, r1
    5b10:	31 05       	cpc	r19, r1
    5b12:	41 f4       	brne	.+16     	; 0x5b24 <_ZN5Print5printEli+0x2c>
    return write(n);
    5b14:	e8 81       	ld	r30, Y
    5b16:	f9 81       	ldd	r31, Y+1	; 0x01
    5b18:	01 90       	ld	r0, Z+
    5b1a:	f0 81       	ld	r31, Z
    5b1c:	e0 2d       	mov	r30, r0
    5b1e:	64 2f       	mov	r22, r20
    5b20:	09 95       	icall
    5b22:	1f c0       	rjmp	.+62     	; 0x5b62 <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
    5b24:	2a 30       	cpi	r18, 0x0A	; 10
    5b26:	31 05       	cpc	r19, r1
    5b28:	d1 f4       	brne	.+52     	; 0x5b5e <_ZN5Print5printEli+0x66>
    if (n < 0) {
    5b2a:	77 ff       	sbrs	r23, 7
    5b2c:	17 c0       	rjmp	.+46     	; 0x5b5c <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    5b2e:	e8 81       	ld	r30, Y
    5b30:	f9 81       	ldd	r31, Y+1	; 0x01
    5b32:	01 90       	ld	r0, Z+
    5b34:	f0 81       	ld	r31, Z
    5b36:	e0 2d       	mov	r30, r0
    5b38:	6d e2       	ldi	r22, 0x2D	; 45
    5b3a:	09 95       	icall
    5b3c:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    5b3e:	44 27       	eor	r20, r20
    5b40:	55 27       	eor	r21, r21
    5b42:	ba 01       	movw	r22, r20
    5b44:	4c 19       	sub	r20, r12
    5b46:	5d 09       	sbc	r21, r13
    5b48:	6e 09       	sbc	r22, r14
    5b4a:	7f 09       	sbc	r23, r15
    5b4c:	ce 01       	movw	r24, r28
    5b4e:	2a e0       	ldi	r18, 0x0A	; 10
    5b50:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <_ZN5Print11printNumberEmh>
    5b54:	98 01       	movw	r18, r16
    5b56:	28 0f       	add	r18, r24
    5b58:	39 1f       	adc	r19, r25
    5b5a:	04 c0       	rjmp	.+8      	; 0x5b64 <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
    5b5c:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    5b5e:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <_ZN5Print11printNumberEmh>
    5b62:	9c 01       	movw	r18, r24
  }
}
    5b64:	c9 01       	movw	r24, r18
    5b66:	df 91       	pop	r29
    5b68:	cf 91       	pop	r28
    5b6a:	1f 91       	pop	r17
    5b6c:	0f 91       	pop	r16
    5b6e:	ff 90       	pop	r15
    5b70:	ef 90       	pop	r14
    5b72:	df 90       	pop	r13
    5b74:	cf 90       	pop	r12
    5b76:	08 95       	ret

00005b78 <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    5b78:	ef 92       	push	r14
    5b7a:	ff 92       	push	r15
    5b7c:	0f 93       	push	r16
    5b7e:	1f 93       	push	r17
    5b80:	7b 01       	movw	r14, r22
    5b82:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    5b84:	00 27       	eor	r16, r16
    5b86:	f7 fc       	sbrc	r15, 7
    5b88:	00 95       	com	r16
    5b8a:	10 2f       	mov	r17, r16
    5b8c:	b8 01       	movw	r22, r16
    5b8e:	a7 01       	movw	r20, r14
    5b90:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <_ZN5Print5printEli>
}
    5b94:	1f 91       	pop	r17
    5b96:	0f 91       	pop	r16
    5b98:	ff 90       	pop	r15
    5b9a:	ef 90       	pop	r14
    5b9c:	08 95       	ret

00005b9e <_ZN5Print7printlnEii>:
  size_t n = print(b, base);
  n += println();
  return n;
}

size_t Print::println(int num, int base)
    5b9e:	cf 92       	push	r12
    5ba0:	df 92       	push	r13
    5ba2:	ef 92       	push	r14
    5ba4:	ff 92       	push	r15
    5ba6:	0f 93       	push	r16
    5ba8:	1f 93       	push	r17
    5baa:	6c 01       	movw	r12, r24
    5bac:	7b 01       	movw	r14, r22
    5bae:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    5bb0:	00 27       	eor	r16, r16
    5bb2:	f7 fc       	sbrc	r15, 7
    5bb4:	00 95       	com	r16
    5bb6:	10 2f       	mov	r17, r16
    5bb8:	b8 01       	movw	r22, r16
    5bba:	a7 01       	movw	r20, r14
    5bbc:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <_ZN5Print5printEli>
    5bc0:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
    5bc2:	c6 01       	movw	r24, r12
    5bc4:	0e 94 af 2c 	call	0x595e	; 0x595e <_ZN5Print7printlnEv>
    5bc8:	08 0f       	add	r16, r24
    5bca:	19 1f       	adc	r17, r25
  return n;
}
    5bcc:	c8 01       	movw	r24, r16
    5bce:	1f 91       	pop	r17
    5bd0:	0f 91       	pop	r16
    5bd2:	ff 90       	pop	r15
    5bd4:	ef 90       	pop	r14
    5bd6:	df 90       	pop	r13
    5bd8:	cf 90       	pop	r12
    5bda:	08 95       	ret

00005bdc <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    5bdc:	0e 94 e3 2c 	call	0x59c6	; 0x59c6 <_ZN5Print5writeEPKc>
}
    5be0:	08 95       	ret

00005be2 <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    5be2:	ef 92       	push	r14
    5be4:	ff 92       	push	r15
    5be6:	0f 93       	push	r16
    5be8:	1f 93       	push	r17
    5bea:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    5bec:	0e 94 e3 2c 	call	0x59c6	; 0x59c6 <_ZN5Print5writeEPKc>
    5bf0:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    5bf2:	c7 01       	movw	r24, r14
    5bf4:	0e 94 af 2c 	call	0x595e	; 0x595e <_ZN5Print7printlnEv>
    5bf8:	08 0f       	add	r16, r24
    5bfa:	19 1f       	adc	r17, r25
  return n;
}
    5bfc:	c8 01       	movw	r24, r16
    5bfe:	1f 91       	pop	r17
    5c00:	0f 91       	pop	r16
    5c02:	ff 90       	pop	r15
    5c04:	ef 90       	pop	r14
    5c06:	08 95       	ret

00005c08 <_ZN5Print5printERK6String>:
    n += write(c);
  }
  return n;
}

size_t Print::print(const String &s)
    5c08:	af 92       	push	r10
    5c0a:	bf 92       	push	r11
    5c0c:	cf 92       	push	r12
    5c0e:	df 92       	push	r13
    5c10:	ef 92       	push	r14
    5c12:	ff 92       	push	r15
    5c14:	0f 93       	push	r16
    5c16:	1f 93       	push	r17
    5c18:	cf 93       	push	r28
    5c1a:	df 93       	push	r29
    5c1c:	5c 01       	movw	r10, r24
    5c1e:	6b 01       	movw	r12, r22
    5c20:	ee 24       	eor	r14, r14
    5c22:	ff 24       	eor	r15, r15
    5c24:	c0 e0       	ldi	r28, 0x00	; 0
    5c26:	d0 e0       	ldi	r29, 0x00	; 0
    5c28:	10 c0       	rjmp	.+32     	; 0x5c4a <_ZN5Print5printERK6String+0x42>
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    n += write(s[i]);
    5c2a:	d5 01       	movw	r26, r10
    5c2c:	ed 91       	ld	r30, X+
    5c2e:	fc 91       	ld	r31, X
    5c30:	00 81       	ld	r16, Z
    5c32:	11 81       	ldd	r17, Z+1	; 0x01
    5c34:	c6 01       	movw	r24, r12
    5c36:	be 01       	movw	r22, r28
    5c38:	0e 94 db 2e 	call	0x5db6	; 0x5db6 <_ZNK6StringixEj>
    5c3c:	68 2f       	mov	r22, r24
    5c3e:	c5 01       	movw	r24, r10
    5c40:	f8 01       	movw	r30, r16
    5c42:	09 95       	icall
    5c44:	e8 0e       	add	r14, r24
    5c46:	f9 1e       	adc	r15, r25
}

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    5c48:	21 96       	adiw	r28, 0x01	; 1
    5c4a:	f6 01       	movw	r30, r12
    5c4c:	84 81       	ldd	r24, Z+4	; 0x04
    5c4e:	95 81       	ldd	r25, Z+5	; 0x05
    5c50:	c8 17       	cp	r28, r24
    5c52:	d9 07       	cpc	r29, r25
    5c54:	50 f3       	brcs	.-44     	; 0x5c2a <_ZN5Print5printERK6String+0x22>
    n += write(s[i]);
  }
  return n;
}
    5c56:	c7 01       	movw	r24, r14
    5c58:	df 91       	pop	r29
    5c5a:	cf 91       	pop	r28
    5c5c:	1f 91       	pop	r17
    5c5e:	0f 91       	pop	r16
    5c60:	ff 90       	pop	r15
    5c62:	ef 90       	pop	r14
    5c64:	df 90       	pop	r13
    5c66:	cf 90       	pop	r12
    5c68:	bf 90       	pop	r11
    5c6a:	af 90       	pop	r10
    5c6c:	08 95       	ret

00005c6e <_ZN5Print7printlnERK6String>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
    5c6e:	ef 92       	push	r14
    5c70:	ff 92       	push	r15
    5c72:	0f 93       	push	r16
    5c74:	1f 93       	push	r17
    5c76:	7c 01       	movw	r14, r24
{
  size_t n = print(s);
    5c78:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <_ZN5Print5printERK6String>
    5c7c:	8c 01       	movw	r16, r24
  n += println();
    5c7e:	c7 01       	movw	r24, r14
    5c80:	0e 94 af 2c 	call	0x595e	; 0x595e <_ZN5Print7printlnEv>
    5c84:	9c 01       	movw	r18, r24
    5c86:	20 0f       	add	r18, r16
    5c88:	31 1f       	adc	r19, r17
  return n;
}
    5c8a:	c9 01       	movw	r24, r18
    5c8c:	1f 91       	pop	r17
    5c8e:	0f 91       	pop	r16
    5c90:	ff 90       	pop	r15
    5c92:	ef 90       	pop	r14
    5c94:	08 95       	ret

00005c96 <attachInterrupt>:

static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    5c96:	82 30       	cpi	r24, 0x02	; 2
    5c98:	00 f5       	brcc	.+64     	; 0x5cda <attachInterrupt+0x44>
    intFunc[interruptNum] = userFunc;
    5c9a:	e8 2f       	mov	r30, r24
    5c9c:	f0 e0       	ldi	r31, 0x00	; 0
    5c9e:	ee 0f       	add	r30, r30
    5ca0:	ff 1f       	adc	r31, r31
    5ca2:	ee 52       	subi	r30, 0x2E	; 46
    5ca4:	fa 4f       	sbci	r31, 0xFA	; 250
    5ca6:	71 83       	std	Z+1, r23	; 0x01
    5ca8:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    5caa:	88 23       	and	r24, r24
    5cac:	19 f0       	breq	.+6      	; 0x5cb4 <attachInterrupt+0x1e>
    5cae:	81 30       	cpi	r24, 0x01	; 1
    5cb0:	a1 f4       	brne	.+40     	; 0x5cda <attachInterrupt+0x44>
    5cb2:	08 c0       	rjmp	.+16     	; 0x5cc4 <attachInterrupt+0x2e>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    5cb4:	80 91 69 00 	lds	r24, 0x0069
    5cb8:	8c 7f       	andi	r24, 0xFC	; 252
    5cba:	84 2b       	or	r24, r20
    5cbc:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT0);
    5cc0:	e8 9a       	sbi	0x1d, 0	; 29
    5cc2:	08 95       	ret
    #endif
      break;

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    5cc4:	80 91 69 00 	lds	r24, 0x0069
    5cc8:	44 0f       	add	r20, r20
    5cca:	55 1f       	adc	r21, r21
    5ccc:	44 0f       	add	r20, r20
    5cce:	55 1f       	adc	r21, r21
    5cd0:	83 7f       	andi	r24, 0xF3	; 243
    5cd2:	84 2b       	or	r24, r20
    5cd4:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT1);
    5cd8:	e9 9a       	sbi	0x1d, 1	; 29
    5cda:	08 95       	ret

00005cdc <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    5cdc:	82 30       	cpi	r24, 0x02	; 2
    5cde:	80 f4       	brcc	.+32     	; 0x5d00 <detachInterrupt+0x24>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    5ce0:	88 23       	and	r24, r24
    5ce2:	19 f0       	breq	.+6      	; 0x5cea <detachInterrupt+0xe>
    5ce4:	81 30       	cpi	r24, 0x01	; 1
    5ce6:	21 f4       	brne	.+8      	; 0x5cf0 <detachInterrupt+0x14>
    5ce8:	02 c0       	rjmp	.+4      	; 0x5cee <detachInterrupt+0x12>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
    5cea:	e8 98       	cbi	0x1d, 0	; 29
    5cec:	01 c0       	rjmp	.+2      	; 0x5cf0 <detachInterrupt+0x14>
    #endif
      break;

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
    5cee:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;
#endif
    }
      
    intFunc[interruptNum] = 0;
    5cf0:	e8 2f       	mov	r30, r24
    5cf2:	f0 e0       	ldi	r31, 0x00	; 0
    5cf4:	ee 0f       	add	r30, r30
    5cf6:	ff 1f       	adc	r31, r31
    5cf8:	ee 52       	subi	r30, 0x2E	; 46
    5cfa:	fa 4f       	sbci	r31, 0xFA	; 250
    5cfc:	11 82       	std	Z+1, r1	; 0x01
    5cfe:	10 82       	st	Z, r1
    5d00:	08 95       	ret

00005d02 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

SIGNAL(INT0_vect) {
    5d02:	1f 92       	push	r1
    5d04:	0f 92       	push	r0
    5d06:	0f b6       	in	r0, 0x3f	; 63
    5d08:	0f 92       	push	r0
    5d0a:	11 24       	eor	r1, r1
    5d0c:	2f 93       	push	r18
    5d0e:	3f 93       	push	r19
    5d10:	4f 93       	push	r20
    5d12:	5f 93       	push	r21
    5d14:	6f 93       	push	r22
    5d16:	7f 93       	push	r23
    5d18:	8f 93       	push	r24
    5d1a:	9f 93       	push	r25
    5d1c:	af 93       	push	r26
    5d1e:	bf 93       	push	r27
    5d20:	ef 93       	push	r30
    5d22:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    5d24:	80 91 d2 05 	lds	r24, 0x05D2
    5d28:	90 91 d3 05 	lds	r25, 0x05D3
    5d2c:	89 2b       	or	r24, r25
    5d2e:	29 f0       	breq	.+10     	; 0x5d3a <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
    5d30:	e0 91 d2 05 	lds	r30, 0x05D2
    5d34:	f0 91 d3 05 	lds	r31, 0x05D3
    5d38:	09 95       	icall
}
    5d3a:	ff 91       	pop	r31
    5d3c:	ef 91       	pop	r30
    5d3e:	bf 91       	pop	r27
    5d40:	af 91       	pop	r26
    5d42:	9f 91       	pop	r25
    5d44:	8f 91       	pop	r24
    5d46:	7f 91       	pop	r23
    5d48:	6f 91       	pop	r22
    5d4a:	5f 91       	pop	r21
    5d4c:	4f 91       	pop	r20
    5d4e:	3f 91       	pop	r19
    5d50:	2f 91       	pop	r18
    5d52:	0f 90       	pop	r0
    5d54:	0f be       	out	0x3f, r0	; 63
    5d56:	0f 90       	pop	r0
    5d58:	1f 90       	pop	r1
    5d5a:	18 95       	reti

00005d5c <__vector_2>:

SIGNAL(INT1_vect) {
    5d5c:	1f 92       	push	r1
    5d5e:	0f 92       	push	r0
    5d60:	0f b6       	in	r0, 0x3f	; 63
    5d62:	0f 92       	push	r0
    5d64:	11 24       	eor	r1, r1
    5d66:	2f 93       	push	r18
    5d68:	3f 93       	push	r19
    5d6a:	4f 93       	push	r20
    5d6c:	5f 93       	push	r21
    5d6e:	6f 93       	push	r22
    5d70:	7f 93       	push	r23
    5d72:	8f 93       	push	r24
    5d74:	9f 93       	push	r25
    5d76:	af 93       	push	r26
    5d78:	bf 93       	push	r27
    5d7a:	ef 93       	push	r30
    5d7c:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    5d7e:	80 91 d4 05 	lds	r24, 0x05D4
    5d82:	90 91 d5 05 	lds	r25, 0x05D5
    5d86:	89 2b       	or	r24, r25
    5d88:	29 f0       	breq	.+10     	; 0x5d94 <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
    5d8a:	e0 91 d4 05 	lds	r30, 0x05D4
    5d8e:	f0 91 d5 05 	lds	r31, 0x05D5
    5d92:	09 95       	icall
}
    5d94:	ff 91       	pop	r31
    5d96:	ef 91       	pop	r30
    5d98:	bf 91       	pop	r27
    5d9a:	af 91       	pop	r26
    5d9c:	9f 91       	pop	r25
    5d9e:	8f 91       	pop	r24
    5da0:	7f 91       	pop	r23
    5da2:	6f 91       	pop	r22
    5da4:	5f 91       	pop	r21
    5da6:	4f 91       	pop	r20
    5da8:	3f 91       	pop	r19
    5daa:	2f 91       	pop	r18
    5dac:	0f 90       	pop	r0
    5dae:	0f be       	out	0x3f, r0	; 63
    5db0:	0f 90       	pop	r0
    5db2:	1f 90       	pop	r1
    5db4:	18 95       	reti

00005db6 <_ZNK6StringixEj>:
		return dummy_writable_char;
	}
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
    5db6:	fc 01       	movw	r30, r24
{
	if (index >= len || !buffer) return 0;
    5db8:	84 81       	ldd	r24, Z+4	; 0x04
    5dba:	95 81       	ldd	r25, Z+5	; 0x05
    5dbc:	68 17       	cp	r22, r24
    5dbe:	79 07       	cpc	r23, r25
    5dc0:	48 f4       	brcc	.+18     	; 0x5dd4 <_ZNK6StringixEj+0x1e>
    5dc2:	01 90       	ld	r0, Z+
    5dc4:	f0 81       	ld	r31, Z
    5dc6:	e0 2d       	mov	r30, r0
    5dc8:	30 97       	sbiw	r30, 0x00	; 0
    5dca:	21 f0       	breq	.+8      	; 0x5dd4 <_ZNK6StringixEj+0x1e>
	return buffer[index];
    5dcc:	e6 0f       	add	r30, r22
    5dce:	f7 1f       	adc	r31, r23
    5dd0:	80 81       	ld	r24, Z
    5dd2:	08 95       	ret
    5dd4:	80 e0       	ldi	r24, 0x00	; 0
}
    5dd6:	08 95       	ret

00005dd8 <_ZNK6String5toIntEv>:

/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
    5dd8:	fc 01       	movw	r30, r24
{
	if (buffer) return atol(buffer);
    5dda:	80 81       	ld	r24, Z
    5ddc:	91 81       	ldd	r25, Z+1	; 0x01
    5dde:	00 97       	sbiw	r24, 0x00	; 0
    5de0:	29 f4       	brne	.+10     	; 0x5dec <_ZNK6String5toIntEv+0x14>
    5de2:	20 e0       	ldi	r18, 0x00	; 0
    5de4:	30 e0       	ldi	r19, 0x00	; 0
    5de6:	40 e0       	ldi	r20, 0x00	; 0
    5de8:	50 e0       	ldi	r21, 0x00	; 0
    5dea:	04 c0       	rjmp	.+8      	; 0x5df4 <_ZNK6String5toIntEv+0x1c>
    5dec:	0e 94 52 33 	call	0x66a4	; 0x66a4 <atol>
    5df0:	9b 01       	movw	r18, r22
    5df2:	ac 01       	movw	r20, r24
	return 0;
}
    5df4:	b9 01       	movw	r22, r18
    5df6:	ca 01       	movw	r24, r20
    5df8:	08 95       	ret

00005dfa <_ZNK6String10startsWithERKS_j>:
{
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
    5dfa:	fc 01       	movw	r30, r24
    5dfc:	db 01       	movw	r26, r22
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    5dfe:	14 96       	adiw	r26, 0x04	; 4
    5e00:	2d 91       	ld	r18, X+
    5e02:	3c 91       	ld	r19, X
    5e04:	15 97       	sbiw	r26, 0x05	; 5
    5e06:	84 81       	ldd	r24, Z+4	; 0x04
    5e08:	95 81       	ldd	r25, Z+5	; 0x05
    5e0a:	82 1b       	sub	r24, r18
    5e0c:	93 0b       	sbc	r25, r19
    5e0e:	84 17       	cp	r24, r20
    5e10:	95 07       	cpc	r25, r21
    5e12:	a0 f0       	brcs	.+40     	; 0x5e3c <_ZNK6String10startsWithERKS_j+0x42>
    5e14:	80 81       	ld	r24, Z
    5e16:	91 81       	ldd	r25, Z+1	; 0x01
    5e18:	00 97       	sbiw	r24, 0x00	; 0
    5e1a:	81 f0       	breq	.+32     	; 0x5e3c <_ZNK6String10startsWithERKS_j+0x42>
    5e1c:	6d 91       	ld	r22, X+
    5e1e:	7c 91       	ld	r23, X
    5e20:	61 15       	cp	r22, r1
    5e22:	71 05       	cpc	r23, r1
    5e24:	59 f0       	breq	.+22     	; 0x5e3c <_ZNK6String10startsWithERKS_j+0x42>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
    5e26:	84 0f       	add	r24, r20
    5e28:	95 1f       	adc	r25, r21
    5e2a:	a9 01       	movw	r20, r18
    5e2c:	0e 94 97 33 	call	0x672e	; 0x672e <strncmp>
    5e30:	9c 01       	movw	r18, r24
    5e32:	80 e0       	ldi	r24, 0x00	; 0
    5e34:	23 2b       	or	r18, r19
    5e36:	19 f4       	brne	.+6      	; 0x5e3e <_ZNK6String10startsWithERKS_j+0x44>
    5e38:	81 e0       	ldi	r24, 0x01	; 1
    5e3a:	08 95       	ret
    5e3c:	80 e0       	ldi	r24, 0x00	; 0
}
    5e3e:	08 95       	ret

00005e40 <_ZNK6String10startsWithERKS_>:
		if (tolower(*p1++) != tolower(*p2++)) return 0;
	} 
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
    5e40:	fc 01       	movw	r30, r24
    5e42:	db 01       	movw	r26, r22
{
	if (len < s2.len) return 0;
    5e44:	24 81       	ldd	r18, Z+4	; 0x04
    5e46:	35 81       	ldd	r19, Z+5	; 0x05
    5e48:	14 96       	adiw	r26, 0x04	; 4
    5e4a:	8d 91       	ld	r24, X+
    5e4c:	9c 91       	ld	r25, X
    5e4e:	15 97       	sbiw	r26, 0x05	; 5
    5e50:	28 17       	cp	r18, r24
    5e52:	39 07       	cpc	r19, r25
    5e54:	10 f4       	brcc	.+4      	; 0x5e5a <_ZNK6String10startsWithERKS_+0x1a>
    5e56:	80 e0       	ldi	r24, 0x00	; 0
    5e58:	08 95       	ret
	return startsWith(s2, 0);
    5e5a:	cf 01       	movw	r24, r30
    5e5c:	40 e0       	ldi	r20, 0x00	; 0
    5e5e:	50 e0       	ldi	r21, 0x00	; 0
    5e60:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <_ZNK6String10startsWithERKS_j>
}
    5e64:	08 95       	ret

00005e66 <_ZN6String12changeBufferEj>:
		return 1;
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
    5e66:	0f 93       	push	r16
    5e68:	1f 93       	push	r17
    5e6a:	cf 93       	push	r28
    5e6c:	df 93       	push	r29
    5e6e:	ec 01       	movw	r28, r24
    5e70:	8b 01       	movw	r16, r22
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    5e72:	6f 5f       	subi	r22, 0xFF	; 255
    5e74:	7f 4f       	sbci	r23, 0xFF	; 255
    5e76:	88 81       	ld	r24, Y
    5e78:	99 81       	ldd	r25, Y+1	; 0x01
    5e7a:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <realloc>
	if (newbuffer) {
    5e7e:	00 97       	sbiw	r24, 0x00	; 0
    5e80:	11 f4       	brne	.+4      	; 0x5e86 <_ZN6String12changeBufferEj+0x20>
    5e82:	80 e0       	ldi	r24, 0x00	; 0
    5e84:	05 c0       	rjmp	.+10     	; 0x5e90 <_ZN6String12changeBufferEj+0x2a>
		buffer = newbuffer;
    5e86:	99 83       	std	Y+1, r25	; 0x01
    5e88:	88 83       	st	Y, r24
		capacity = maxStrLen;
    5e8a:	1b 83       	std	Y+3, r17	; 0x03
    5e8c:	0a 83       	std	Y+2, r16	; 0x02
    5e8e:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    5e90:	df 91       	pop	r29
    5e92:	cf 91       	pop	r28
    5e94:	1f 91       	pop	r17
    5e96:	0f 91       	pop	r16
    5e98:	08 95       	ret

00005e9a <_ZN6String7reserveEj>:
	if (buffer) free(buffer);
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
    5e9a:	cf 93       	push	r28
    5e9c:	df 93       	push	r29
    5e9e:	ec 01       	movw	r28, r24
{
	if (buffer && capacity >= size) return 1;
    5ea0:	88 81       	ld	r24, Y
    5ea2:	99 81       	ldd	r25, Y+1	; 0x01
    5ea4:	89 2b       	or	r24, r25
    5ea6:	29 f0       	breq	.+10     	; 0x5eb2 <_ZN6String7reserveEj+0x18>
    5ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    5eaa:	9b 81       	ldd	r25, Y+3	; 0x03
    5eac:	86 17       	cp	r24, r22
    5eae:	97 07       	cpc	r25, r23
    5eb0:	60 f4       	brcc	.+24     	; 0x5eca <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    5eb2:	ce 01       	movw	r24, r28
    5eb4:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <_ZN6String12changeBufferEj>
    5eb8:	88 23       	and	r24, r24
    5eba:	41 f0       	breq	.+16     	; 0x5ecc <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    5ebc:	8c 81       	ldd	r24, Y+4	; 0x04
    5ebe:	9d 81       	ldd	r25, Y+5	; 0x05
    5ec0:	89 2b       	or	r24, r25
    5ec2:	19 f4       	brne	.+6      	; 0x5eca <_ZN6String7reserveEj+0x30>
    5ec4:	e8 81       	ld	r30, Y
    5ec6:	f9 81       	ldd	r31, Y+1	; 0x01
    5ec8:	10 82       	st	Z, r1
    5eca:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    5ecc:	df 91       	pop	r29
    5ece:	cf 91       	pop	r28
    5ed0:	08 95       	ret

00005ed2 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
	flags = 0;
}

void String::invalidate(void)
    5ed2:	cf 93       	push	r28
    5ed4:	df 93       	push	r29
    5ed6:	ec 01       	movw	r28, r24
{
	if (buffer) free(buffer);
    5ed8:	88 81       	ld	r24, Y
    5eda:	99 81       	ldd	r25, Y+1	; 0x01
    5edc:	00 97       	sbiw	r24, 0x00	; 0
    5ede:	11 f0       	breq	.+4      	; 0x5ee4 <_ZN6String10invalidateEv+0x12>
    5ee0:	0e 94 51 29 	call	0x52a2	; 0x52a2 <free>
	buffer = NULL;
    5ee4:	19 82       	std	Y+1, r1	; 0x01
    5ee6:	18 82       	st	Y, r1
	capacity = len = 0;
    5ee8:	1d 82       	std	Y+5, r1	; 0x05
    5eea:	1c 82       	std	Y+4, r1	; 0x04
    5eec:	1b 82       	std	Y+3, r1	; 0x03
    5eee:	1a 82       	std	Y+2, r1	; 0x02
}
    5ef0:	df 91       	pop	r29
    5ef2:	cf 91       	pop	r28
    5ef4:	08 95       	ret

00005ef6 <_ZN6String4copyEPKcj>:

/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
    5ef6:	ef 92       	push	r14
    5ef8:	ff 92       	push	r15
    5efa:	0f 93       	push	r16
    5efc:	1f 93       	push	r17
    5efe:	cf 93       	push	r28
    5f00:	df 93       	push	r29
    5f02:	ec 01       	movw	r28, r24
    5f04:	7b 01       	movw	r14, r22
    5f06:	8a 01       	movw	r16, r20
{
	if (!reserve(length)) {
    5f08:	ba 01       	movw	r22, r20
    5f0a:	0e 94 4d 2f 	call	0x5e9a	; 0x5e9a <_ZN6String7reserveEj>
    5f0e:	88 23       	and	r24, r24
    5f10:	21 f4       	brne	.+8      	; 0x5f1a <_ZN6String4copyEPKcj+0x24>
		invalidate();
    5f12:	ce 01       	movw	r24, r28
    5f14:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <_ZN6String10invalidateEv>
    5f18:	07 c0       	rjmp	.+14     	; 0x5f28 <_ZN6String4copyEPKcj+0x32>
		return *this;
	}
	len = length;
    5f1a:	1d 83       	std	Y+5, r17	; 0x05
    5f1c:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    5f1e:	88 81       	ld	r24, Y
    5f20:	99 81       	ldd	r25, Y+1	; 0x01
    5f22:	b7 01       	movw	r22, r14
    5f24:	0e 94 90 33 	call	0x6720	; 0x6720 <strcpy>
	return *this;
}
    5f28:	ce 01       	movw	r24, r28
    5f2a:	df 91       	pop	r29
    5f2c:	cf 91       	pop	r28
    5f2e:	1f 91       	pop	r17
    5f30:	0f 91       	pop	r16
    5f32:	ff 90       	pop	r15
    5f34:	ef 90       	pop	r14
    5f36:	08 95       	ret

00005f38 <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    5f38:	cf 93       	push	r28
    5f3a:	df 93       	push	r29
    5f3c:	ec 01       	movw	r28, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    5f3e:	19 82       	std	Y+1, r1	; 0x01
    5f40:	18 82       	st	Y, r1
	capacity = 0;
    5f42:	1b 82       	std	Y+3, r1	; 0x03
    5f44:	1a 82       	std	Y+2, r1	; 0x02
	len = 0;
    5f46:	1d 82       	std	Y+5, r1	; 0x05
    5f48:	1c 82       	std	Y+4, r1	; 0x04
	flags = 0;
    5f4a:	1e 82       	std	Y+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    5f4c:	61 15       	cp	r22, r1
    5f4e:	71 05       	cpc	r23, r1
    5f50:	51 f0       	breq	.+20     	; 0x5f66 <_ZN6StringC1EPKc+0x2e>
    5f52:	db 01       	movw	r26, r22
    5f54:	0d 90       	ld	r0, X+
    5f56:	00 20       	and	r0, r0
    5f58:	e9 f7       	brne	.-6      	; 0x5f54 <_ZN6StringC1EPKc+0x1c>
    5f5a:	11 97       	sbiw	r26, 0x01	; 1
    5f5c:	a6 1b       	sub	r26, r22
    5f5e:	b7 0b       	sbc	r27, r23
    5f60:	ad 01       	movw	r20, r26
    5f62:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <_ZN6String4copyEPKcj>
}
    5f66:	df 91       	pop	r29
    5f68:	cf 91       	pop	r28
    5f6a:	08 95       	ret

00005f6c <_ZN6StringaSEPKc>:
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
    5f6c:	0f 93       	push	r16
    5f6e:	1f 93       	push	r17
    5f70:	18 2f       	mov	r17, r24
    5f72:	09 2f       	mov	r16, r25
{
	if (cstr) copy(cstr, strlen(cstr));
    5f74:	61 15       	cp	r22, r1
    5f76:	71 05       	cpc	r23, r1
    5f78:	59 f0       	breq	.+22     	; 0x5f90 <_ZN6StringaSEPKc+0x24>
    5f7a:	db 01       	movw	r26, r22
    5f7c:	0d 90       	ld	r0, X+
    5f7e:	00 20       	and	r0, r0
    5f80:	e9 f7       	brne	.-6      	; 0x5f7c <_ZN6StringaSEPKc+0x10>
    5f82:	11 97       	sbiw	r26, 0x01	; 1
    5f84:	a6 1b       	sub	r26, r22
    5f86:	b7 0b       	sbc	r27, r23
    5f88:	ad 01       	movw	r20, r26
    5f8a:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <_ZN6String4copyEPKcj>
    5f8e:	02 c0       	rjmp	.+4      	; 0x5f94 <_ZN6StringaSEPKc+0x28>
	else invalidate();
    5f90:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <_ZN6String10invalidateEv>
	
	return *this;
}
    5f94:	81 2f       	mov	r24, r17
    5f96:	90 2f       	mov	r25, r16
    5f98:	1f 91       	pop	r17
    5f9a:	0f 91       	pop	r16
    5f9c:	08 95       	ret

00005f9e <_ZNK6String9substringEjj>:
String String::substring( unsigned int left ) const
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
    5f9e:	bf 92       	push	r11
    5fa0:	cf 92       	push	r12
    5fa2:	df 92       	push	r13
    5fa4:	ef 92       	push	r14
    5fa6:	ff 92       	push	r15
    5fa8:	0f 93       	push	r16
    5faa:	1f 93       	push	r17
    5fac:	cf 93       	push	r28
    5fae:	df 93       	push	r29
    5fb0:	08 2f       	mov	r16, r24
    5fb2:	b9 2e       	mov	r11, r25
    5fb4:	6b 01       	movw	r12, r22
    5fb6:	7a 01       	movw	r14, r20
    5fb8:	e9 01       	movw	r28, r18
{
	if (left > right) {
    5fba:	24 17       	cp	r18, r20
    5fbc:	35 07       	cpc	r19, r21
    5fbe:	10 f4       	brcc	.+4      	; 0x5fc4 <_ZNK6String9substringEjj+0x26>
    5fc0:	ea 01       	movw	r28, r20
    5fc2:	79 01       	movw	r14, r18
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    5fc4:	80 2f       	mov	r24, r16
    5fc6:	9b 2d       	mov	r25, r11
    5fc8:	69 e3       	ldi	r22, 0x39	; 57
    5fca:	71 e0       	ldi	r23, 0x01	; 1
    5fcc:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <_ZN6StringC1EPKc>
	if (left > len) return out;
    5fd0:	d6 01       	movw	r26, r12
    5fd2:	14 96       	adiw	r26, 0x04	; 4
    5fd4:	8d 91       	ld	r24, X+
    5fd6:	9c 91       	ld	r25, X
    5fd8:	15 97       	sbiw	r26, 0x05	; 5
    5fda:	8e 15       	cp	r24, r14
    5fdc:	9f 05       	cpc	r25, r15
    5fde:	d0 f0       	brcs	.+52     	; 0x6014 <_ZNK6String9substringEjj+0x76>
    5fe0:	8c 17       	cp	r24, r28
    5fe2:	9d 07       	cpc	r25, r29
    5fe4:	08 f4       	brcc	.+2      	; 0x5fe8 <_ZNK6String9substringEjj+0x4a>
    5fe6:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    5fe8:	d6 01       	movw	r26, r12
    5fea:	ed 91       	ld	r30, X+
    5fec:	fc 91       	ld	r31, X
    5fee:	11 97       	sbiw	r26, 0x01	; 1
    5ff0:	ec 0f       	add	r30, r28
    5ff2:	fd 1f       	adc	r31, r29
    5ff4:	10 81       	ld	r17, Z
	buffer[right] = '\0';	
    5ff6:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    5ff8:	6d 91       	ld	r22, X+
    5ffa:	7c 91       	ld	r23, X
    5ffc:	6e 0d       	add	r22, r14
    5ffe:	7f 1d       	adc	r23, r15
    6000:	80 2f       	mov	r24, r16
    6002:	9b 2d       	mov	r25, r11
    6004:	0e 94 b6 2f 	call	0x5f6c	; 0x5f6c <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    6008:	d6 01       	movw	r26, r12
    600a:	ed 91       	ld	r30, X+
    600c:	fc 91       	ld	r31, X
    600e:	ec 0f       	add	r30, r28
    6010:	fd 1f       	adc	r31, r29
    6012:	10 83       	st	Z, r17
	return out;
}
    6014:	80 2f       	mov	r24, r16
    6016:	9b 2d       	mov	r25, r11
    6018:	df 91       	pop	r29
    601a:	cf 91       	pop	r28
    601c:	1f 91       	pop	r17
    601e:	0f 91       	pop	r16
    6020:	ff 90       	pop	r15
    6022:	ef 90       	pop	r14
    6024:	df 90       	pop	r13
    6026:	cf 90       	pop	r12
    6028:	bf 90       	pop	r11
    602a:	08 95       	ret

0000602c <_ZN6StringD1Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    602c:	fc 01       	movw	r30, r24
{
	free(buffer);
    602e:	80 81       	ld	r24, Z
    6030:	91 81       	ldd	r25, Z+1	; 0x01
    6032:	0e 94 51 29 	call	0x52a2	; 0x52a2 <free>
}
    6036:	08 95       	ret

00006038 <main>:
#include <Arduino.h>

int main(void)
    6038:	cf 93       	push	r28
    603a:	df 93       	push	r29
{
	init();
    603c:	0e 94 da 30 	call	0x61b4	; 0x61b4 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    6040:	0e 94 12 28 	call	0x5024	; 0x5024 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    6044:	ce e1       	ldi	r28, 0x1E	; 30
    6046:	da e2       	ldi	r29, 0x2A	; 42
#endif
	
	setup();
    
	for (;;) {
		loop();
    6048:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <loop>
		if (serialEventRun) serialEventRun();
    604c:	20 97       	sbiw	r28, 0x00	; 0
    604e:	e1 f3       	breq	.-8      	; 0x6048 <main+0x10>
    6050:	0e 94 1e 2a 	call	0x543c	; 0x543c <_Z14serialEventRunv>
    6054:	f9 cf       	rjmp	.-14     	; 0x6048 <main+0x10>

00006056 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    6056:	1f 92       	push	r1
    6058:	0f 92       	push	r0
    605a:	0f b6       	in	r0, 0x3f	; 63
    605c:	0f 92       	push	r0
    605e:	11 24       	eor	r1, r1
    6060:	2f 93       	push	r18
    6062:	3f 93       	push	r19
    6064:	8f 93       	push	r24
    6066:	9f 93       	push	r25
    6068:	af 93       	push	r26
    606a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    606c:	80 91 da 05 	lds	r24, 0x05DA
    6070:	90 91 db 05 	lds	r25, 0x05DB
    6074:	a0 91 dc 05 	lds	r26, 0x05DC
    6078:	b0 91 dd 05 	lds	r27, 0x05DD
	unsigned char f = timer0_fract;
    607c:	30 91 de 05 	lds	r19, 0x05DE

	m += MILLIS_INC;
    6080:	01 96       	adiw	r24, 0x01	; 1
    6082:	a1 1d       	adc	r26, r1
    6084:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    6086:	23 2f       	mov	r18, r19
    6088:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    608a:	2d 37       	cpi	r18, 0x7D	; 125
    608c:	20 f0       	brcs	.+8      	; 0x6096 <__vector_16+0x40>
		f -= FRACT_MAX;
    608e:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    6090:	01 96       	adiw	r24, 0x01	; 1
    6092:	a1 1d       	adc	r26, r1
    6094:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    6096:	20 93 de 05 	sts	0x05DE, r18
	timer0_millis = m;
    609a:	80 93 da 05 	sts	0x05DA, r24
    609e:	90 93 db 05 	sts	0x05DB, r25
    60a2:	a0 93 dc 05 	sts	0x05DC, r26
    60a6:	b0 93 dd 05 	sts	0x05DD, r27
	timer0_overflow_count++;
    60aa:	80 91 d6 05 	lds	r24, 0x05D6
    60ae:	90 91 d7 05 	lds	r25, 0x05D7
    60b2:	a0 91 d8 05 	lds	r26, 0x05D8
    60b6:	b0 91 d9 05 	lds	r27, 0x05D9
    60ba:	01 96       	adiw	r24, 0x01	; 1
    60bc:	a1 1d       	adc	r26, r1
    60be:	b1 1d       	adc	r27, r1
    60c0:	80 93 d6 05 	sts	0x05D6, r24
    60c4:	90 93 d7 05 	sts	0x05D7, r25
    60c8:	a0 93 d8 05 	sts	0x05D8, r26
    60cc:	b0 93 d9 05 	sts	0x05D9, r27
}
    60d0:	bf 91       	pop	r27
    60d2:	af 91       	pop	r26
    60d4:	9f 91       	pop	r25
    60d6:	8f 91       	pop	r24
    60d8:	3f 91       	pop	r19
    60da:	2f 91       	pop	r18
    60dc:	0f 90       	pop	r0
    60de:	0f be       	out	0x3f, r0	; 63
    60e0:	0f 90       	pop	r0
    60e2:	1f 90       	pop	r1
    60e4:	18 95       	reti

000060e6 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    60e6:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    60e8:	f8 94       	cli
	m = timer0_millis;
    60ea:	20 91 da 05 	lds	r18, 0x05DA
    60ee:	30 91 db 05 	lds	r19, 0x05DB
    60f2:	40 91 dc 05 	lds	r20, 0x05DC
    60f6:	50 91 dd 05 	lds	r21, 0x05DD
	SREG = oldSREG;
    60fa:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    60fc:	b9 01       	movw	r22, r18
    60fe:	ca 01       	movw	r24, r20
    6100:	08 95       	ret

00006102 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    6102:	9b 01       	movw	r18, r22
    6104:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    6106:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    6108:	f8 94       	cli
	m = timer0_overflow_count;
    610a:	80 91 d6 05 	lds	r24, 0x05D6
    610e:	90 91 d7 05 	lds	r25, 0x05D7
    6112:	a0 91 d8 05 	lds	r26, 0x05D8
    6116:	b0 91 d9 05 	lds	r27, 0x05D9
#if defined(TCNT0)
	t = TCNT0;
    611a:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    611c:	a8 9b       	sbis	0x15, 0	; 21
    611e:	05 c0       	rjmp	.+10     	; 0x612a <delay+0x28>
    6120:	6f 3f       	cpi	r22, 0xFF	; 255
    6122:	19 f0       	breq	.+6      	; 0x612a <delay+0x28>
		m++;
    6124:	01 96       	adiw	r24, 0x01	; 1
    6126:	a1 1d       	adc	r26, r1
    6128:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    612a:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    612c:	ba 2f       	mov	r27, r26
    612e:	a9 2f       	mov	r26, r25
    6130:	98 2f       	mov	r25, r24
    6132:	88 27       	eor	r24, r24
    6134:	86 0f       	add	r24, r22
    6136:	91 1d       	adc	r25, r1
    6138:	a1 1d       	adc	r26, r1
    613a:	b1 1d       	adc	r27, r1
    613c:	62 e0       	ldi	r22, 0x02	; 2
    613e:	88 0f       	add	r24, r24
    6140:	99 1f       	adc	r25, r25
    6142:	aa 1f       	adc	r26, r26
    6144:	bb 1f       	adc	r27, r27
    6146:	6a 95       	dec	r22
    6148:	d1 f7       	brne	.-12     	; 0x613e <delay+0x3c>
    614a:	bc 01       	movw	r22, r24
    614c:	2d c0       	rjmp	.+90     	; 0x61a8 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    614e:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    6150:	f8 94       	cli
	m = timer0_overflow_count;
    6152:	80 91 d6 05 	lds	r24, 0x05D6
    6156:	90 91 d7 05 	lds	r25, 0x05D7
    615a:	a0 91 d8 05 	lds	r26, 0x05D8
    615e:	b0 91 d9 05 	lds	r27, 0x05D9
#if defined(TCNT0)
	t = TCNT0;
    6162:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    6164:	a8 9b       	sbis	0x15, 0	; 21
    6166:	05 c0       	rjmp	.+10     	; 0x6172 <delay+0x70>
    6168:	ef 3f       	cpi	r30, 0xFF	; 255
    616a:	19 f0       	breq	.+6      	; 0x6172 <delay+0x70>
		m++;
    616c:	01 96       	adiw	r24, 0x01	; 1
    616e:	a1 1d       	adc	r26, r1
    6170:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    6172:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    6174:	ba 2f       	mov	r27, r26
    6176:	a9 2f       	mov	r26, r25
    6178:	98 2f       	mov	r25, r24
    617a:	88 27       	eor	r24, r24
    617c:	8e 0f       	add	r24, r30
    617e:	91 1d       	adc	r25, r1
    6180:	a1 1d       	adc	r26, r1
    6182:	b1 1d       	adc	r27, r1
    6184:	e2 e0       	ldi	r30, 0x02	; 2
    6186:	88 0f       	add	r24, r24
    6188:	99 1f       	adc	r25, r25
    618a:	aa 1f       	adc	r26, r26
    618c:	bb 1f       	adc	r27, r27
    618e:	ea 95       	dec	r30
    6190:	d1 f7       	brne	.-12     	; 0x6186 <delay+0x84>
    6192:	86 1b       	sub	r24, r22
    6194:	97 0b       	sbc	r25, r23
    6196:	88 5e       	subi	r24, 0xE8	; 232
    6198:	93 40       	sbci	r25, 0x03	; 3
    619a:	c8 f2       	brcs	.-78     	; 0x614e <delay+0x4c>
			ms--;
    619c:	21 50       	subi	r18, 0x01	; 1
    619e:	30 40       	sbci	r19, 0x00	; 0
    61a0:	40 40       	sbci	r20, 0x00	; 0
    61a2:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    61a4:	68 51       	subi	r22, 0x18	; 24
    61a6:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    61a8:	21 15       	cp	r18, r1
    61aa:	31 05       	cpc	r19, r1
    61ac:	41 05       	cpc	r20, r1
    61ae:	51 05       	cpc	r21, r1
    61b0:	71 f6       	brne	.-100    	; 0x614e <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    61b2:	08 95       	ret

000061b4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    61b4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    61b6:	84 b5       	in	r24, 0x24	; 36
    61b8:	82 60       	ori	r24, 0x02	; 2
    61ba:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    61bc:	84 b5       	in	r24, 0x24	; 36
    61be:	81 60       	ori	r24, 0x01	; 1
    61c0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    61c2:	85 b5       	in	r24, 0x25	; 37
    61c4:	82 60       	ori	r24, 0x02	; 2
    61c6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    61c8:	85 b5       	in	r24, 0x25	; 37
    61ca:	81 60       	ori	r24, 0x01	; 1
    61cc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    61ce:	ee e6       	ldi	r30, 0x6E	; 110
    61d0:	f0 e0       	ldi	r31, 0x00	; 0
    61d2:	80 81       	ld	r24, Z
    61d4:	81 60       	ori	r24, 0x01	; 1
    61d6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    61d8:	e1 e8       	ldi	r30, 0x81	; 129
    61da:	f0 e0       	ldi	r31, 0x00	; 0
    61dc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    61de:	80 81       	ld	r24, Z
    61e0:	82 60       	ori	r24, 0x02	; 2
    61e2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    61e4:	80 81       	ld	r24, Z
    61e6:	81 60       	ori	r24, 0x01	; 1
    61e8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    61ea:	e0 e8       	ldi	r30, 0x80	; 128
    61ec:	f0 e0       	ldi	r31, 0x00	; 0
    61ee:	80 81       	ld	r24, Z
    61f0:	81 60       	ori	r24, 0x01	; 1
    61f2:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    61f4:	e1 eb       	ldi	r30, 0xB1	; 177
    61f6:	f0 e0       	ldi	r31, 0x00	; 0
    61f8:	80 81       	ld	r24, Z
    61fa:	84 60       	ori	r24, 0x04	; 4
    61fc:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    61fe:	e0 eb       	ldi	r30, 0xB0	; 176
    6200:	f0 e0       	ldi	r31, 0x00	; 0
    6202:	80 81       	ld	r24, Z
    6204:	81 60       	ori	r24, 0x01	; 1
    6206:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    6208:	ea e7       	ldi	r30, 0x7A	; 122
    620a:	f0 e0       	ldi	r31, 0x00	; 0
    620c:	80 81       	ld	r24, Z
    620e:	84 60       	ori	r24, 0x04	; 4
    6210:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    6212:	80 81       	ld	r24, Z
    6214:	82 60       	ori	r24, 0x02	; 2
    6216:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    6218:	80 81       	ld	r24, Z
    621a:	81 60       	ori	r24, 0x01	; 1
    621c:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    621e:	80 81       	ld	r24, Z
    6220:	80 68       	ori	r24, 0x80	; 128
    6222:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    6224:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    6228:	08 95       	ret

0000622a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    622a:	cf 93       	push	r28
    622c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    622e:	48 2f       	mov	r20, r24
    6230:	50 e0       	ldi	r21, 0x00	; 0
    6232:	ca 01       	movw	r24, r20
    6234:	8f 5a       	subi	r24, 0xAF	; 175
    6236:	9b 4f       	sbci	r25, 0xFB	; 251
    6238:	fc 01       	movw	r30, r24
    623a:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    623c:	43 5c       	subi	r20, 0xC3	; 195
    623e:	5b 4f       	sbci	r21, 0xFB	; 251
    6240:	fa 01       	movw	r30, r20
    6242:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    6244:	88 23       	and	r24, r24
    6246:	69 f1       	breq	.+90     	; 0x62a2 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    6248:	90 e0       	ldi	r25, 0x00	; 0
    624a:	88 0f       	add	r24, r24
    624c:	99 1f       	adc	r25, r25
    624e:	fc 01       	movw	r30, r24
    6250:	e1 5e       	subi	r30, 0xE1	; 225
    6252:	fb 4f       	sbci	r31, 0xFB	; 251
    6254:	a5 91       	lpm	r26, Z+
    6256:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    6258:	fc 01       	movw	r30, r24
    625a:	e7 5d       	subi	r30, 0xD7	; 215
    625c:	fb 4f       	sbci	r31, 0xFB	; 251
    625e:	c5 91       	lpm	r28, Z+
    6260:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    6262:	66 23       	and	r22, r22
    6264:	51 f4       	brne	.+20     	; 0x627a <pinMode+0x50>
		uint8_t oldSREG = SREG;
    6266:	2f b7       	in	r18, 0x3f	; 63
                cli();
    6268:	f8 94       	cli
		*reg &= ~bit;
    626a:	8c 91       	ld	r24, X
    626c:	93 2f       	mov	r25, r19
    626e:	90 95       	com	r25
    6270:	89 23       	and	r24, r25
    6272:	8c 93       	st	X, r24
		*out &= ~bit;
    6274:	88 81       	ld	r24, Y
    6276:	89 23       	and	r24, r25
    6278:	0b c0       	rjmp	.+22     	; 0x6290 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    627a:	62 30       	cpi	r22, 0x02	; 2
    627c:	61 f4       	brne	.+24     	; 0x6296 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    627e:	2f b7       	in	r18, 0x3f	; 63
                cli();
    6280:	f8 94       	cli
		*reg &= ~bit;
    6282:	8c 91       	ld	r24, X
    6284:	93 2f       	mov	r25, r19
    6286:	90 95       	com	r25
    6288:	89 23       	and	r24, r25
    628a:	8c 93       	st	X, r24
		*out |= bit;
    628c:	88 81       	ld	r24, Y
    628e:	83 2b       	or	r24, r19
    6290:	88 83       	st	Y, r24
		SREG = oldSREG;
    6292:	2f bf       	out	0x3f, r18	; 63
    6294:	06 c0       	rjmp	.+12     	; 0x62a2 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    6296:	9f b7       	in	r25, 0x3f	; 63
                cli();
    6298:	f8 94       	cli
		*reg |= bit;
    629a:	8c 91       	ld	r24, X
    629c:	83 2b       	or	r24, r19
    629e:	8c 93       	st	X, r24
		SREG = oldSREG;
    62a0:	9f bf       	out	0x3f, r25	; 63
	}
}
    62a2:	df 91       	pop	r29
    62a4:	cf 91       	pop	r28
    62a6:	08 95       	ret

000062a8 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    62a8:	48 2f       	mov	r20, r24
    62aa:	50 e0       	ldi	r21, 0x00	; 0
    62ac:	ca 01       	movw	r24, r20
    62ae:	8b 59       	subi	r24, 0x9B	; 155
    62b0:	9b 4f       	sbci	r25, 0xFB	; 251
    62b2:	fc 01       	movw	r30, r24
    62b4:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    62b6:	ca 01       	movw	r24, r20
    62b8:	8f 5a       	subi	r24, 0xAF	; 175
    62ba:	9b 4f       	sbci	r25, 0xFB	; 251
    62bc:	fc 01       	movw	r30, r24
    62be:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    62c0:	43 5c       	subi	r20, 0xC3	; 195
    62c2:	5b 4f       	sbci	r21, 0xFB	; 251
    62c4:	fa 01       	movw	r30, r20
    62c6:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    62c8:	33 23       	and	r19, r19
    62ca:	09 f4       	brne	.+2      	; 0x62ce <digitalWrite+0x26>
    62cc:	40 c0       	rjmp	.+128    	; 0x634e <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    62ce:	22 23       	and	r18, r18
    62d0:	51 f1       	breq	.+84     	; 0x6326 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    62d2:	23 30       	cpi	r18, 0x03	; 3
    62d4:	71 f0       	breq	.+28     	; 0x62f2 <digitalWrite+0x4a>
    62d6:	24 30       	cpi	r18, 0x04	; 4
    62d8:	28 f4       	brcc	.+10     	; 0x62e4 <digitalWrite+0x3c>
    62da:	21 30       	cpi	r18, 0x01	; 1
    62dc:	a1 f0       	breq	.+40     	; 0x6306 <digitalWrite+0x5e>
    62de:	22 30       	cpi	r18, 0x02	; 2
    62e0:	11 f5       	brne	.+68     	; 0x6326 <digitalWrite+0x7e>
    62e2:	14 c0       	rjmp	.+40     	; 0x630c <digitalWrite+0x64>
    62e4:	26 30       	cpi	r18, 0x06	; 6
    62e6:	b1 f0       	breq	.+44     	; 0x6314 <digitalWrite+0x6c>
    62e8:	27 30       	cpi	r18, 0x07	; 7
    62ea:	c1 f0       	breq	.+48     	; 0x631c <digitalWrite+0x74>
    62ec:	24 30       	cpi	r18, 0x04	; 4
    62ee:	d9 f4       	brne	.+54     	; 0x6326 <digitalWrite+0x7e>
    62f0:	04 c0       	rjmp	.+8      	; 0x62fa <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    62f2:	80 91 80 00 	lds	r24, 0x0080
    62f6:	8f 77       	andi	r24, 0x7F	; 127
    62f8:	03 c0       	rjmp	.+6      	; 0x6300 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    62fa:	80 91 80 00 	lds	r24, 0x0080
    62fe:	8f 7d       	andi	r24, 0xDF	; 223
    6300:	80 93 80 00 	sts	0x0080, r24
    6304:	10 c0       	rjmp	.+32     	; 0x6326 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    6306:	84 b5       	in	r24, 0x24	; 36
    6308:	8f 77       	andi	r24, 0x7F	; 127
    630a:	02 c0       	rjmp	.+4      	; 0x6310 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    630c:	84 b5       	in	r24, 0x24	; 36
    630e:	8f 7d       	andi	r24, 0xDF	; 223
    6310:	84 bd       	out	0x24, r24	; 36
    6312:	09 c0       	rjmp	.+18     	; 0x6326 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    6314:	80 91 b0 00 	lds	r24, 0x00B0
    6318:	8f 77       	andi	r24, 0x7F	; 127
    631a:	03 c0       	rjmp	.+6      	; 0x6322 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    631c:	80 91 b0 00 	lds	r24, 0x00B0
    6320:	8f 7d       	andi	r24, 0xDF	; 223
    6322:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    6326:	e3 2f       	mov	r30, r19
    6328:	f0 e0       	ldi	r31, 0x00	; 0
    632a:	ee 0f       	add	r30, r30
    632c:	ff 1f       	adc	r31, r31
    632e:	e7 5d       	subi	r30, 0xD7	; 215
    6330:	fb 4f       	sbci	r31, 0xFB	; 251
    6332:	a5 91       	lpm	r26, Z+
    6334:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    6336:	2f b7       	in	r18, 0x3f	; 63
	cli();
    6338:	f8 94       	cli

	if (val == LOW) {
    633a:	66 23       	and	r22, r22
    633c:	21 f4       	brne	.+8      	; 0x6346 <digitalWrite+0x9e>
		*out &= ~bit;
    633e:	8c 91       	ld	r24, X
    6340:	90 95       	com	r25
    6342:	89 23       	and	r24, r25
    6344:	02 c0       	rjmp	.+4      	; 0x634a <digitalWrite+0xa2>
	} else {
		*out |= bit;
    6346:	8c 91       	ld	r24, X
    6348:	89 2b       	or	r24, r25
    634a:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    634c:	2f bf       	out	0x3f, r18	; 63
    634e:	08 95       	ret

00006350 <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    6350:	68 2f       	mov	r22, r24
    6352:	70 e0       	ldi	r23, 0x00	; 0
    6354:	cb 01       	movw	r24, r22
    6356:	8b 59       	subi	r24, 0x9B	; 155
    6358:	9b 4f       	sbci	r25, 0xFB	; 251
    635a:	fc 01       	movw	r30, r24
    635c:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    635e:	cb 01       	movw	r24, r22
    6360:	8f 5a       	subi	r24, 0xAF	; 175
    6362:	9b 4f       	sbci	r25, 0xFB	; 251
    6364:	fc 01       	movw	r30, r24
    6366:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    6368:	63 5c       	subi	r22, 0xC3	; 195
    636a:	7b 4f       	sbci	r23, 0xFB	; 251
    636c:	fb 01       	movw	r30, r22
    636e:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
    6370:	99 23       	and	r25, r25
    6372:	19 f4       	brne	.+6      	; 0x637a <digitalRead+0x2a>
    6374:	20 e0       	ldi	r18, 0x00	; 0
    6376:	30 e0       	ldi	r19, 0x00	; 0
    6378:	3c c0       	rjmp	.+120    	; 0x63f2 <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    637a:	22 23       	and	r18, r18
    637c:	51 f1       	breq	.+84     	; 0x63d2 <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    637e:	23 30       	cpi	r18, 0x03	; 3
    6380:	71 f0       	breq	.+28     	; 0x639e <digitalRead+0x4e>
    6382:	24 30       	cpi	r18, 0x04	; 4
    6384:	28 f4       	brcc	.+10     	; 0x6390 <digitalRead+0x40>
    6386:	21 30       	cpi	r18, 0x01	; 1
    6388:	a1 f0       	breq	.+40     	; 0x63b2 <digitalRead+0x62>
    638a:	22 30       	cpi	r18, 0x02	; 2
    638c:	11 f5       	brne	.+68     	; 0x63d2 <digitalRead+0x82>
    638e:	14 c0       	rjmp	.+40     	; 0x63b8 <digitalRead+0x68>
    6390:	26 30       	cpi	r18, 0x06	; 6
    6392:	b1 f0       	breq	.+44     	; 0x63c0 <digitalRead+0x70>
    6394:	27 30       	cpi	r18, 0x07	; 7
    6396:	c1 f0       	breq	.+48     	; 0x63c8 <digitalRead+0x78>
    6398:	24 30       	cpi	r18, 0x04	; 4
    639a:	d9 f4       	brne	.+54     	; 0x63d2 <digitalRead+0x82>
    639c:	04 c0       	rjmp	.+8      	; 0x63a6 <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    639e:	80 91 80 00 	lds	r24, 0x0080
    63a2:	8f 77       	andi	r24, 0x7F	; 127
    63a4:	03 c0       	rjmp	.+6      	; 0x63ac <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    63a6:	80 91 80 00 	lds	r24, 0x0080
    63aa:	8f 7d       	andi	r24, 0xDF	; 223
    63ac:	80 93 80 00 	sts	0x0080, r24
    63b0:	10 c0       	rjmp	.+32     	; 0x63d2 <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    63b2:	84 b5       	in	r24, 0x24	; 36
    63b4:	8f 77       	andi	r24, 0x7F	; 127
    63b6:	02 c0       	rjmp	.+4      	; 0x63bc <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    63b8:	84 b5       	in	r24, 0x24	; 36
    63ba:	8f 7d       	andi	r24, 0xDF	; 223
    63bc:	84 bd       	out	0x24, r24	; 36
    63be:	09 c0       	rjmp	.+18     	; 0x63d2 <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    63c0:	80 91 b0 00 	lds	r24, 0x00B0
    63c4:	8f 77       	andi	r24, 0x7F	; 127
    63c6:	03 c0       	rjmp	.+6      	; 0x63ce <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    63c8:	80 91 b0 00 	lds	r24, 0x00B0
    63cc:	8f 7d       	andi	r24, 0xDF	; 223
    63ce:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    63d2:	89 2f       	mov	r24, r25
    63d4:	90 e0       	ldi	r25, 0x00	; 0
    63d6:	88 0f       	add	r24, r24
    63d8:	99 1f       	adc	r25, r25
    63da:	8d 5c       	subi	r24, 0xCD	; 205
    63dc:	9b 4f       	sbci	r25, 0xFB	; 251
    63de:	fc 01       	movw	r30, r24
    63e0:	a5 91       	lpm	r26, Z+
    63e2:	b4 91       	lpm	r27, Z+
    63e4:	8c 91       	ld	r24, X
    63e6:	20 e0       	ldi	r18, 0x00	; 0
    63e8:	30 e0       	ldi	r19, 0x00	; 0
    63ea:	84 23       	and	r24, r20
    63ec:	11 f0       	breq	.+4      	; 0x63f2 <digitalRead+0xa2>
    63ee:	21 e0       	ldi	r18, 0x01	; 1
    63f0:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    63f2:	c9 01       	movw	r24, r18
    63f4:	08 95       	ret

000063f6 <realloc>:
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
    63f6:	6f 92       	push	r6
    63f8:	7f 92       	push	r7
    63fa:	8f 92       	push	r8
    63fc:	9f 92       	push	r9
    63fe:	af 92       	push	r10
    6400:	bf 92       	push	r11
    6402:	cf 92       	push	r12
    6404:	df 92       	push	r13
    6406:	ef 92       	push	r14
    6408:	ff 92       	push	r15
    640a:	0f 93       	push	r16
    640c:	1f 93       	push	r17
    640e:	cf 93       	push	r28
    6410:	df 93       	push	r29
    6412:	8c 01       	movw	r16, r24
    6414:	00 97       	sbiw	r24, 0x00	; 0
    6416:	29 f4       	brne	.+10     	; 0x6422 <realloc+0x2c>
		return malloc(len);
    6418:	cb 01       	movw	r24, r22
    641a:	0e 94 b4 28 	call	0x5168	; 0x5168 <malloc>
    641e:	8c 01       	movw	r16, r24
    6420:	bb c0       	rjmp	.+374    	; 0x6598 <realloc+0x1a2>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
    6422:	8e ef       	ldi	r24, 0xFE	; 254
    6424:	e8 2e       	mov	r14, r24
    6426:	8f ef       	ldi	r24, 0xFF	; 255
    6428:	f8 2e       	mov	r15, r24
    642a:	e0 0e       	add	r14, r16
    642c:	f1 1e       	adc	r15, r17
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
    642e:	48 01       	movw	r8, r16
    6430:	86 0e       	add	r8, r22
    6432:	97 1e       	adc	r9, r23
	if (cp < cp1)
    6434:	8e 14       	cp	r8, r14
    6436:	9f 04       	cpc	r9, r15
    6438:	08 f4       	brcc	.+2      	; 0x643c <realloc+0x46>
    643a:	ac c0       	rjmp	.+344    	; 0x6594 <realloc+0x19e>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
    643c:	d7 01       	movw	r26, r14
    643e:	4d 91       	ld	r20, X+
    6440:	5c 91       	ld	r21, X
    6442:	11 97       	sbiw	r26, 0x01	; 1
    6444:	46 17       	cp	r20, r22
    6446:	57 07       	cpc	r21, r23
    6448:	b8 f0       	brcs	.+46     	; 0x6478 <realloc+0x82>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    644a:	45 30       	cpi	r20, 0x05	; 5
    644c:	51 05       	cpc	r21, r1
    644e:	08 f4       	brcc	.+2      	; 0x6452 <realloc+0x5c>
    6450:	a3 c0       	rjmp	.+326    	; 0x6598 <realloc+0x1a2>
    6452:	ca 01       	movw	r24, r20
    6454:	04 97       	sbiw	r24, 0x04	; 4
    6456:	86 17       	cp	r24, r22
    6458:	97 07       	cpc	r25, r23
    645a:	08 f4       	brcc	.+2      	; 0x645e <realloc+0x68>
    645c:	9d c0       	rjmp	.+314    	; 0x6598 <realloc+0x1a2>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
    645e:	42 50       	subi	r20, 0x02	; 2
    6460:	50 40       	sbci	r21, 0x00	; 0
    6462:	46 1b       	sub	r20, r22
    6464:	57 0b       	sbc	r21, r23
    6466:	f4 01       	movw	r30, r8
    6468:	41 93       	st	Z+, r20
    646a:	51 93       	st	Z+, r21
		fp1->sz = len;
    646c:	6d 93       	st	X+, r22
    646e:	7c 93       	st	X, r23
		free(&(fp2->nx));
    6470:	cf 01       	movw	r24, r30
    6472:	0e 94 51 29 	call	0x52a2	; 0x52a2 <free>
    6476:	90 c0       	rjmp	.+288    	; 0x6598 <realloc+0x1a2>

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
    6478:	5b 01       	movw	r10, r22
    647a:	a4 1a       	sub	r10, r20
    647c:	b5 0a       	sbc	r11, r21
	cp = (char *)ptr + fp1->sz;
    647e:	38 01       	movw	r6, r16
    6480:	64 0e       	add	r6, r20
    6482:	75 1e       	adc	r7, r21
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
    6484:	a0 91 e1 05 	lds	r26, 0x05E1
    6488:	b0 91 e2 05 	lds	r27, 0x05E2
    648c:	cc 24       	eor	r12, r12
    648e:	dd 24       	eor	r13, r13
    6490:	e0 e0       	ldi	r30, 0x00	; 0
    6492:	f0 e0       	ldi	r31, 0x00	; 0
    6494:	47 c0       	rjmp	.+142    	; 0x6524 <realloc+0x12e>
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
    6496:	a6 15       	cp	r26, r6
    6498:	b7 05       	cpc	r27, r7
    649a:	a9 f5       	brne	.+106    	; 0x6506 <realloc+0x110>
    649c:	cd 91       	ld	r28, X+
    649e:	dc 91       	ld	r29, X
    64a0:	11 97       	sbiw	r26, 0x01	; 1
    64a2:	ce 01       	movw	r24, r28
    64a4:	02 96       	adiw	r24, 0x02	; 2
    64a6:	8a 15       	cp	r24, r10
    64a8:	9b 05       	cpc	r25, r11
    64aa:	68 f1       	brcs	.+90     	; 0x6506 <realloc+0x110>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
    64ac:	ce 01       	movw	r24, r28
    64ae:	8a 19       	sub	r24, r10
    64b0:	9b 09       	sbc	r25, r11
    64b2:	02 96       	adiw	r24, 0x02	; 2
    64b4:	12 96       	adiw	r26, 0x02	; 2
    64b6:	2c 91       	ld	r18, X
    64b8:	12 97       	sbiw	r26, 0x02	; 2
    64ba:	13 96       	adiw	r26, 0x03	; 3
    64bc:	3c 91       	ld	r19, X
    64be:	05 97       	sbiw	r24, 0x05	; 5
    64c0:	58 f0       	brcs	.+22     	; 0x64d8 <realloc+0xe2>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
    64c2:	f4 01       	movw	r30, r8
				fp2->nx = fp3->nx;
    64c4:	22 83       	std	Z+2, r18	; 0x02
    64c6:	33 83       	std	Z+3, r19	; 0x03
				fp2->sz = fp3->sz - incr;
    64c8:	ca 19       	sub	r28, r10
    64ca:	db 09       	sbc	r29, r11
    64cc:	d1 83       	std	Z+1, r29	; 0x01
    64ce:	c0 83       	st	Z, r28
				fp1->sz = len;
    64d0:	d7 01       	movw	r26, r14
    64d2:	6d 93       	st	X+, r22
    64d4:	7c 93       	st	X, r23
    64d6:	09 c0       	rjmp	.+18     	; 0x64ea <realloc+0xf4>
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
    64d8:	4e 5f       	subi	r20, 0xFE	; 254
    64da:	5f 4f       	sbci	r21, 0xFF	; 255
    64dc:	4c 0f       	add	r20, r28
    64de:	5d 1f       	adc	r21, r29
    64e0:	f7 01       	movw	r30, r14
    64e2:	51 83       	std	Z+1, r21	; 0x01
    64e4:	40 83       	st	Z, r20
				fp2 = fp3->nx;
    64e6:	c9 01       	movw	r24, r18
    64e8:	fc 01       	movw	r30, r24
			}
			if (ofp3)
    64ea:	c1 14       	cp	r12, r1
    64ec:	d1 04       	cpc	r13, r1
    64ee:	31 f0       	breq	.+12     	; 0x64fc <realloc+0x106>
				ofp3->nx = fp2;
    64f0:	d6 01       	movw	r26, r12
    64f2:	13 96       	adiw	r26, 0x03	; 3
    64f4:	fc 93       	st	X, r31
    64f6:	ee 93       	st	-X, r30
    64f8:	12 97       	sbiw	r26, 0x02	; 2
    64fa:	4e c0       	rjmp	.+156    	; 0x6598 <realloc+0x1a2>
			else
				__flp = fp2;
    64fc:	f0 93 e2 05 	sts	0x05E2, r31
    6500:	e0 93 e1 05 	sts	0x05E1, r30
    6504:	49 c0       	rjmp	.+146    	; 0x6598 <realloc+0x1a2>
    6506:	8d 91       	ld	r24, X+
    6508:	9c 91       	ld	r25, X
    650a:	11 97       	sbiw	r26, 0x01	; 1
    650c:	e8 17       	cp	r30, r24
    650e:	f9 07       	cpc	r31, r25
    6510:	08 f4       	brcc	.+2      	; 0x6514 <realloc+0x11e>
    6512:	fc 01       	movw	r30, r24
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
    6514:	6d 01       	movw	r12, r26
    6516:	12 96       	adiw	r26, 0x02	; 2
    6518:	8c 91       	ld	r24, X
    651a:	12 97       	sbiw	r26, 0x02	; 2
    651c:	13 96       	adiw	r26, 0x03	; 3
    651e:	9c 91       	ld	r25, X
    6520:	9c 01       	movw	r18, r24
    6522:	d9 01       	movw	r26, r18
	 */
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
    6524:	10 97       	sbiw	r26, 0x00	; 0
    6526:	09 f0       	breq	.+2      	; 0x652a <realloc+0x134>
    6528:	b6 cf       	rjmp	.-148    	; 0x6496 <realloc+0xa0>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
    652a:	80 91 df 05 	lds	r24, 0x05DF
    652e:	90 91 e0 05 	lds	r25, 0x05E0
    6532:	86 15       	cp	r24, r6
    6534:	97 05       	cpc	r25, r7
    6536:	e9 f4       	brne	.+58     	; 0x6572 <realloc+0x17c>
    6538:	e6 17       	cp	r30, r22
    653a:	f7 07       	cpc	r31, r23
    653c:	d0 f4       	brcc	.+52     	; 0x6572 <realloc+0x17c>
		cp1 = __malloc_heap_end;
    653e:	20 91 42 01 	lds	r18, 0x0142
    6542:	30 91 43 01 	lds	r19, 0x0143
		cp = (char *)ptr + len;
		if (cp1 == 0)
    6546:	21 15       	cp	r18, r1
    6548:	31 05       	cpc	r19, r1
    654a:	41 f4       	brne	.+16     	; 0x655c <realloc+0x166>
			cp1 = STACK_POINTER() - __malloc_margin;
    654c:	2d b7       	in	r18, 0x3d	; 61
    654e:	3e b7       	in	r19, 0x3e	; 62
    6550:	80 91 3e 01 	lds	r24, 0x013E
    6554:	90 91 3f 01 	lds	r25, 0x013F
    6558:	28 1b       	sub	r18, r24
    655a:	39 0b       	sbc	r19, r25
		if (cp < cp1) {
    655c:	82 16       	cp	r8, r18
    655e:	93 06       	cpc	r9, r19
    6560:	c8 f4       	brcc	.+50     	; 0x6594 <realloc+0x19e>
			__brkval = cp;
    6562:	90 92 e0 05 	sts	0x05E0, r9
    6566:	80 92 df 05 	sts	0x05DF, r8
			fp1->sz = len;
    656a:	f7 01       	movw	r30, r14
    656c:	71 83       	std	Z+1, r23	; 0x01
    656e:	60 83       	st	Z, r22
    6570:	13 c0       	rjmp	.+38     	; 0x6598 <realloc+0x1a2>

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
    6572:	cb 01       	movw	r24, r22
    6574:	0e 94 b4 28 	call	0x5168	; 0x5168 <malloc>
    6578:	ec 01       	movw	r28, r24
    657a:	00 97       	sbiw	r24, 0x00	; 0
    657c:	59 f0       	breq	.+22     	; 0x6594 <realloc+0x19e>
		return 0;
	memcpy(memp, ptr, fp1->sz);
    657e:	d7 01       	movw	r26, r14
    6580:	4d 91       	ld	r20, X+
    6582:	5c 91       	ld	r21, X
    6584:	b8 01       	movw	r22, r16
    6586:	0e 94 7e 33 	call	0x66fc	; 0x66fc <memcpy>
	free(ptr);
    658a:	c8 01       	movw	r24, r16
    658c:	0e 94 51 29 	call	0x52a2	; 0x52a2 <free>
    6590:	8e 01       	movw	r16, r28
    6592:	02 c0       	rjmp	.+4      	; 0x6598 <realloc+0x1a2>
	return memp;
    6594:	00 e0       	ldi	r16, 0x00	; 0
    6596:	10 e0       	ldi	r17, 0x00	; 0
}
    6598:	c8 01       	movw	r24, r16
    659a:	df 91       	pop	r29
    659c:	cf 91       	pop	r28
    659e:	1f 91       	pop	r17
    65a0:	0f 91       	pop	r16
    65a2:	ff 90       	pop	r15
    65a4:	ef 90       	pop	r14
    65a6:	df 90       	pop	r13
    65a8:	cf 90       	pop	r12
    65aa:	bf 90       	pop	r11
    65ac:	af 90       	pop	r10
    65ae:	9f 90       	pop	r9
    65b0:	8f 90       	pop	r8
    65b2:	7f 90       	pop	r7
    65b4:	6f 90       	pop	r6
    65b6:	08 95       	ret

000065b8 <__mulsi3>:
    65b8:	62 9f       	mul	r22, r18
    65ba:	d0 01       	movw	r26, r0
    65bc:	73 9f       	mul	r23, r19
    65be:	f0 01       	movw	r30, r0
    65c0:	82 9f       	mul	r24, r18
    65c2:	e0 0d       	add	r30, r0
    65c4:	f1 1d       	adc	r31, r1
    65c6:	64 9f       	mul	r22, r20
    65c8:	e0 0d       	add	r30, r0
    65ca:	f1 1d       	adc	r31, r1
    65cc:	92 9f       	mul	r25, r18
    65ce:	f0 0d       	add	r31, r0
    65d0:	83 9f       	mul	r24, r19
    65d2:	f0 0d       	add	r31, r0
    65d4:	74 9f       	mul	r23, r20
    65d6:	f0 0d       	add	r31, r0
    65d8:	65 9f       	mul	r22, r21
    65da:	f0 0d       	add	r31, r0
    65dc:	99 27       	eor	r25, r25
    65de:	72 9f       	mul	r23, r18
    65e0:	b0 0d       	add	r27, r0
    65e2:	e1 1d       	adc	r30, r1
    65e4:	f9 1f       	adc	r31, r25
    65e6:	63 9f       	mul	r22, r19
    65e8:	b0 0d       	add	r27, r0
    65ea:	e1 1d       	adc	r30, r1
    65ec:	f9 1f       	adc	r31, r25
    65ee:	bd 01       	movw	r22, r26
    65f0:	cf 01       	movw	r24, r30
    65f2:	11 24       	eor	r1, r1
    65f4:	08 95       	ret

000065f6 <__udivmodhi4>:
    65f6:	aa 1b       	sub	r26, r26
    65f8:	bb 1b       	sub	r27, r27
    65fa:	51 e1       	ldi	r21, 0x11	; 17
    65fc:	07 c0       	rjmp	.+14     	; 0x660c <__udivmodhi4_ep>

000065fe <__udivmodhi4_loop>:
    65fe:	aa 1f       	adc	r26, r26
    6600:	bb 1f       	adc	r27, r27
    6602:	a6 17       	cp	r26, r22
    6604:	b7 07       	cpc	r27, r23
    6606:	10 f0       	brcs	.+4      	; 0x660c <__udivmodhi4_ep>
    6608:	a6 1b       	sub	r26, r22
    660a:	b7 0b       	sbc	r27, r23

0000660c <__udivmodhi4_ep>:
    660c:	88 1f       	adc	r24, r24
    660e:	99 1f       	adc	r25, r25
    6610:	5a 95       	dec	r21
    6612:	a9 f7       	brne	.-22     	; 0x65fe <__udivmodhi4_loop>
    6614:	80 95       	com	r24
    6616:	90 95       	com	r25
    6618:	bc 01       	movw	r22, r24
    661a:	cd 01       	movw	r24, r26
    661c:	08 95       	ret

0000661e <__udivmodsi4>:
    661e:	a1 e2       	ldi	r26, 0x21	; 33
    6620:	1a 2e       	mov	r1, r26
    6622:	aa 1b       	sub	r26, r26
    6624:	bb 1b       	sub	r27, r27
    6626:	fd 01       	movw	r30, r26
    6628:	0d c0       	rjmp	.+26     	; 0x6644 <__udivmodsi4_ep>

0000662a <__udivmodsi4_loop>:
    662a:	aa 1f       	adc	r26, r26
    662c:	bb 1f       	adc	r27, r27
    662e:	ee 1f       	adc	r30, r30
    6630:	ff 1f       	adc	r31, r31
    6632:	a2 17       	cp	r26, r18
    6634:	b3 07       	cpc	r27, r19
    6636:	e4 07       	cpc	r30, r20
    6638:	f5 07       	cpc	r31, r21
    663a:	20 f0       	brcs	.+8      	; 0x6644 <__udivmodsi4_ep>
    663c:	a2 1b       	sub	r26, r18
    663e:	b3 0b       	sbc	r27, r19
    6640:	e4 0b       	sbc	r30, r20
    6642:	f5 0b       	sbc	r31, r21

00006644 <__udivmodsi4_ep>:
    6644:	66 1f       	adc	r22, r22
    6646:	77 1f       	adc	r23, r23
    6648:	88 1f       	adc	r24, r24
    664a:	99 1f       	adc	r25, r25
    664c:	1a 94       	dec	r1
    664e:	69 f7       	brne	.-38     	; 0x662a <__udivmodsi4_loop>
    6650:	60 95       	com	r22
    6652:	70 95       	com	r23
    6654:	80 95       	com	r24
    6656:	90 95       	com	r25
    6658:	9b 01       	movw	r18, r22
    665a:	ac 01       	movw	r20, r24
    665c:	bd 01       	movw	r22, r26
    665e:	cf 01       	movw	r24, r30
    6660:	08 95       	ret

00006662 <__divmodsi4>:
    6662:	97 fb       	bst	r25, 7
    6664:	09 2e       	mov	r0, r25
    6666:	05 26       	eor	r0, r21
    6668:	0e d0       	rcall	.+28     	; 0x6686 <__divmodsi4_neg1>
    666a:	57 fd       	sbrc	r21, 7
    666c:	04 d0       	rcall	.+8      	; 0x6676 <__divmodsi4_neg2>
    666e:	d7 df       	rcall	.-82     	; 0x661e <__udivmodsi4>
    6670:	0a d0       	rcall	.+20     	; 0x6686 <__divmodsi4_neg1>
    6672:	00 1c       	adc	r0, r0
    6674:	38 f4       	brcc	.+14     	; 0x6684 <__divmodsi4_exit>

00006676 <__divmodsi4_neg2>:
    6676:	50 95       	com	r21
    6678:	40 95       	com	r20
    667a:	30 95       	com	r19
    667c:	21 95       	neg	r18
    667e:	3f 4f       	sbci	r19, 0xFF	; 255
    6680:	4f 4f       	sbci	r20, 0xFF	; 255
    6682:	5f 4f       	sbci	r21, 0xFF	; 255

00006684 <__divmodsi4_exit>:
    6684:	08 95       	ret

00006686 <__divmodsi4_neg1>:
    6686:	f6 f7       	brtc	.-4      	; 0x6684 <__divmodsi4_exit>
    6688:	90 95       	com	r25
    668a:	80 95       	com	r24
    668c:	70 95       	com	r23
    668e:	61 95       	neg	r22
    6690:	7f 4f       	sbci	r23, 0xFF	; 255
    6692:	8f 4f       	sbci	r24, 0xFF	; 255
    6694:	9f 4f       	sbci	r25, 0xFF	; 255
    6696:	08 95       	ret

00006698 <__tablejump2__>:
    6698:	ee 0f       	add	r30, r30
    669a:	ff 1f       	adc	r31, r31

0000669c <__tablejump__>:
    669c:	05 90       	lpm	r0, Z+
    669e:	f4 91       	lpm	r31, Z+
    66a0:	e0 2d       	mov	r30, r0
    66a2:	09 94       	ijmp

000066a4 <atol>:
    66a4:	1f 93       	push	r17
    66a6:	fc 01       	movw	r30, r24
    66a8:	99 27       	eor	r25, r25
    66aa:	88 27       	eor	r24, r24
    66ac:	bc 01       	movw	r22, r24
    66ae:	e8 94       	clt
    66b0:	11 91       	ld	r17, Z+
    66b2:	10 32       	cpi	r17, 0x20	; 32
    66b4:	e9 f3       	breq	.-6      	; 0x66b0 <atol+0xc>
    66b6:	19 30       	cpi	r17, 0x09	; 9
    66b8:	10 f0       	brcs	.+4      	; 0x66be <atol+0x1a>
    66ba:	1e 30       	cpi	r17, 0x0E	; 14
    66bc:	c8 f3       	brcs	.-14     	; 0x66b0 <atol+0xc>
    66be:	1b 32       	cpi	r17, 0x2B	; 43
    66c0:	51 f0       	breq	.+20     	; 0x66d6 <atol+0x32>
    66c2:	1d 32       	cpi	r17, 0x2D	; 45
    66c4:	49 f4       	brne	.+18     	; 0x66d8 <atol+0x34>
    66c6:	68 94       	set
    66c8:	06 c0       	rjmp	.+12     	; 0x66d6 <atol+0x32>
    66ca:	0e 94 e6 33 	call	0x67cc	; 0x67cc <__mulsi_const_10>
    66ce:	61 0f       	add	r22, r17
    66d0:	71 1d       	adc	r23, r1
    66d2:	81 1d       	adc	r24, r1
    66d4:	91 1d       	adc	r25, r1
    66d6:	11 91       	ld	r17, Z+
    66d8:	10 53       	subi	r17, 0x30	; 48
    66da:	1a 30       	cpi	r17, 0x0A	; 10
    66dc:	b0 f3       	brcs	.-20     	; 0x66ca <atol+0x26>
    66de:	3e f4       	brtc	.+14     	; 0x66ee <atol+0x4a>
    66e0:	90 95       	com	r25
    66e2:	80 95       	com	r24
    66e4:	70 95       	com	r23
    66e6:	61 95       	neg	r22
    66e8:	7f 4f       	sbci	r23, 0xFF	; 255
    66ea:	8f 4f       	sbci	r24, 0xFF	; 255
    66ec:	9f 4f       	sbci	r25, 0xFF	; 255
    66ee:	1f 91       	pop	r17
    66f0:	08 95       	ret

000066f2 <strtok>:
    66f2:	4c ed       	ldi	r20, 0xDC	; 220
    66f4:	51 e0       	ldi	r21, 0x01	; 1
    66f6:	0e 94 b4 33 	call	0x6768	; 0x6768 <strtok_r>
    66fa:	08 95       	ret

000066fc <memcpy>:
    66fc:	fb 01       	movw	r30, r22
    66fe:	dc 01       	movw	r26, r24
    6700:	02 c0       	rjmp	.+4      	; 0x6706 <memcpy+0xa>
    6702:	01 90       	ld	r0, Z+
    6704:	0d 92       	st	X+, r0
    6706:	41 50       	subi	r20, 0x01	; 1
    6708:	50 40       	sbci	r21, 0x00	; 0
    670a:	d8 f7       	brcc	.-10     	; 0x6702 <memcpy+0x6>
    670c:	08 95       	ret

0000670e <strcmp>:
    670e:	fb 01       	movw	r30, r22
    6710:	dc 01       	movw	r26, r24
    6712:	8d 91       	ld	r24, X+
    6714:	01 90       	ld	r0, Z+
    6716:	80 19       	sub	r24, r0
    6718:	01 10       	cpse	r0, r1
    671a:	d9 f3       	breq	.-10     	; 0x6712 <strcmp+0x4>
    671c:	99 0b       	sbc	r25, r25
    671e:	08 95       	ret

00006720 <strcpy>:
    6720:	fb 01       	movw	r30, r22
    6722:	dc 01       	movw	r26, r24
    6724:	01 90       	ld	r0, Z+
    6726:	0d 92       	st	X+, r0
    6728:	00 20       	and	r0, r0
    672a:	e1 f7       	brne	.-8      	; 0x6724 <strcpy+0x4>
    672c:	08 95       	ret

0000672e <strncmp>:
    672e:	fb 01       	movw	r30, r22
    6730:	dc 01       	movw	r26, r24
    6732:	41 50       	subi	r20, 0x01	; 1
    6734:	50 40       	sbci	r21, 0x00	; 0
    6736:	30 f0       	brcs	.+12     	; 0x6744 <strncmp+0x16>
    6738:	8d 91       	ld	r24, X+
    673a:	01 90       	ld	r0, Z+
    673c:	80 19       	sub	r24, r0
    673e:	19 f4       	brne	.+6      	; 0x6746 <strncmp+0x18>
    6740:	00 20       	and	r0, r0
    6742:	b9 f7       	brne	.-18     	; 0x6732 <strncmp+0x4>
    6744:	88 1b       	sub	r24, r24
    6746:	99 0b       	sbc	r25, r25
    6748:	08 95       	ret

0000674a <strncpy>:
    674a:	fb 01       	movw	r30, r22
    674c:	dc 01       	movw	r26, r24
    674e:	41 50       	subi	r20, 0x01	; 1
    6750:	50 40       	sbci	r21, 0x00	; 0
    6752:	48 f0       	brcs	.+18     	; 0x6766 <strncpy+0x1c>
    6754:	01 90       	ld	r0, Z+
    6756:	0d 92       	st	X+, r0
    6758:	00 20       	and	r0, r0
    675a:	c9 f7       	brne	.-14     	; 0x674e <strncpy+0x4>
    675c:	01 c0       	rjmp	.+2      	; 0x6760 <strncpy+0x16>
    675e:	1d 92       	st	X+, r1
    6760:	41 50       	subi	r20, 0x01	; 1
    6762:	50 40       	sbci	r21, 0x00	; 0
    6764:	e0 f7       	brcc	.-8      	; 0x675e <strncpy+0x14>
    6766:	08 95       	ret

00006768 <strtok_r>:
    6768:	00 97       	sbiw	r24, 0x00	; 0
    676a:	31 f4       	brne	.+12     	; 0x6778 <strtok_r+0x10>
    676c:	da 01       	movw	r26, r20
    676e:	8d 91       	ld	r24, X+
    6770:	9c 91       	ld	r25, X
    6772:	00 97       	sbiw	r24, 0x00	; 0
    6774:	09 f4       	brne	.+2      	; 0x6778 <strtok_r+0x10>
    6776:	0e c0       	rjmp	.+28     	; 0x6794 <strtok_r+0x2c>
    6778:	dc 01       	movw	r26, r24
    677a:	fb 01       	movw	r30, r22
    677c:	3d 91       	ld	r19, X+
    677e:	21 91       	ld	r18, Z+
    6780:	22 23       	and	r18, r18
    6782:	19 f0       	breq	.+6      	; 0x678a <strtok_r+0x22>
    6784:	32 17       	cp	r19, r18
    6786:	c9 f3       	breq	.-14     	; 0x677a <strtok_r+0x12>
    6788:	fa cf       	rjmp	.-12     	; 0x677e <strtok_r+0x16>
    678a:	33 23       	and	r19, r19
    678c:	31 f4       	brne	.+12     	; 0x679a <strtok_r+0x32>
    678e:	da 01       	movw	r26, r20
    6790:	1d 92       	st	X+, r1
    6792:	1c 92       	st	X, r1
    6794:	88 27       	eor	r24, r24
    6796:	99 27       	eor	r25, r25
    6798:	08 95       	ret
    679a:	11 97       	sbiw	r26, 0x01	; 1
    679c:	af 93       	push	r26
    679e:	bf 93       	push	r27
    67a0:	fb 01       	movw	r30, r22
    67a2:	3d 91       	ld	r19, X+
    67a4:	21 91       	ld	r18, Z+
    67a6:	32 17       	cp	r19, r18
    67a8:	71 f4       	brne	.+28     	; 0x67c6 <strtok_r+0x5e>
    67aa:	33 23       	and	r19, r19
    67ac:	21 f4       	brne	.+8      	; 0x67b6 <strtok_r+0x4e>
    67ae:	88 27       	eor	r24, r24
    67b0:	99 27       	eor	r25, r25
    67b2:	11 97       	sbiw	r26, 0x01	; 1
    67b4:	02 c0       	rjmp	.+4      	; 0x67ba <strtok_r+0x52>
    67b6:	1e 92       	st	-X, r1
    67b8:	11 96       	adiw	r26, 0x01	; 1
    67ba:	fa 01       	movw	r30, r20
    67bc:	a1 93       	st	Z+, r26
    67be:	b0 83       	st	Z, r27
    67c0:	9f 91       	pop	r25
    67c2:	8f 91       	pop	r24
    67c4:	08 95       	ret
    67c6:	22 23       	and	r18, r18
    67c8:	69 f7       	brne	.-38     	; 0x67a4 <strtok_r+0x3c>
    67ca:	ea cf       	rjmp	.-44     	; 0x67a0 <strtok_r+0x38>

000067cc <__mulsi_const_10>:
    67cc:	59 2f       	mov	r21, r25
    67ce:	48 2f       	mov	r20, r24
    67d0:	37 2f       	mov	r19, r23
    67d2:	26 2f       	mov	r18, r22
    67d4:	66 0f       	add	r22, r22
    67d6:	77 1f       	adc	r23, r23
    67d8:	88 1f       	adc	r24, r24
    67da:	99 1f       	adc	r25, r25
    67dc:	66 0f       	add	r22, r22
    67de:	77 1f       	adc	r23, r23
    67e0:	88 1f       	adc	r24, r24
    67e2:	99 1f       	adc	r25, r25
    67e4:	62 0f       	add	r22, r18
    67e6:	73 1f       	adc	r23, r19
    67e8:	84 1f       	adc	r24, r20
    67ea:	95 1f       	adc	r25, r21
    67ec:	66 0f       	add	r22, r22
    67ee:	77 1f       	adc	r23, r23
    67f0:	88 1f       	adc	r24, r24
    67f2:	99 1f       	adc	r25, r25
    67f4:	08 95       	ret

000067f6 <_exit>:
    67f6:	f8 94       	cli

000067f8 <__stop_program>:
    67f8:	ff cf       	rjmp	.-2      	; 0x67f8 <__stop_program>
