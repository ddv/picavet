
PicavetFirmWare.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000238  00800100  00006814  000068a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006814  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000409  00800338  00800338  00006ae0  2**0
                  ALLOC
  3 .stab         00015fd8  00000000  00000000  00006ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0002f4e7  00000000  00000000  0001cab8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__ctors_end>
       4:	0c 94 8e 2e 	jmp	0x5d1c	; 0x5d1c <__vector_1>
       8:	0c 94 bb 2e 	jmp	0x5d76	; 0x5d76 <__vector_2>
       c:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      10:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      14:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      18:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      1c:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      20:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      24:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      28:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      2c:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      30:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      34:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      38:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      3c:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      40:	0c 94 38 30 	jmp	0x6070	; 0x6070 <__vector_16>
      44:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      48:	0c 94 da 29 	jmp	0x53b4	; 0x53b4 <__vector_18>
      4c:	0c 94 21 2a 	jmp	0x5442	; 0x5442 <__vector_19>
      50:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      54:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      58:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      5c:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      60:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      64:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>

00000068 <_ZZN22Adafruit_CC3000_Client12fastrprintlnEPcE3__c>:
      68:	0d 0a 00                                            ...

0000006b <_ZZN22Adafruit_CC3000_Client12fastrprintlnEPK19__FlashStringHelperE3__c>:
      6b:	0d 0a 00                                            ...

0000006e <_ZZN15Adafruit_CC30008printHexEPKhmE3__c_0>:
      6e:	30 00                                               0.

00000070 <_ZZN15Adafruit_CC30008printHexEPKhmE3__c>:
      70:	30 78 00                                            0x.

00000073 <_ZZ24displayConnectionDetailsE3__c_4>:
      73:	0a 44 4e 53 73 65 72 76 3a 20 00                    .DNSserv: .

0000007e <_ZZ24displayConnectionDetailsE3__c_3>:
      7e:	0a 44 48 43 50 73 72 76 3a 20 00                    .DHCPsrv: .

00000089 <_ZZ24displayConnectionDetailsE3__c_2>:
      89:	0a 47 61 74 65 77 61 79 3a 20 00                    .Gateway: .

00000094 <_ZZ24displayConnectionDetailsE3__c_1>:
      94:	0a 4e 65 74 6d 61 73 6b 3a 20 00                    .Netmask: .

0000009f <_ZZ24displayConnectionDetailsE3__c_0>:
      9f:	0a 49 50 20 41 64 64 72 3a 20 00                    .IP Addr: .

000000aa <_ZZ24displayConnectionDetailsE3__c>:
      aa:	55 6e 61 62 6c 65 20 74 6f 20 72 65 74 72 69 65     Unable to retrie
      ba:	76 65 20 74 68 65 20 49 50 20 41 64 64 72 65 73     ve the IP Addres
      ca:	73 21 0d 0a 00                                      s!...

000000cf <_ZZ4loopE3__c_10>:
      cf:	43 6c 69 65 6e 74 20 64 69 73 63 6f 6e 6e 65 63     Client disconnec
      df:	74 65 64 00                                         ted.

000000e3 <_ZZ4loopE3__c_9>:
	...

000000e4 <_ZZ4loopE3__c_8>:
      e4:	48 54 54 50 2f 31 2e 31 20 34 30 35 20 4d 65 74     HTTP/1.1 405 Met
      f4:	68 6f 64 20 4e 6f 74 20 41 6c 6c 6f 77 65 64 00     hod Not Allowed.

00000104 <_ZZ4loopE3__c_7>:
     104:	5d 00                                               ].

00000106 <_ZZ4loopE3__c_6>:
     106:	3e 3e 3e 43 4d 44 20 56 41 4c 3d 5b 00              >>>CMD VAL=[.

00000113 <_ZZ4loopE3__c_5>:
     113:	3e 3e 3e 50 41 54 48 3a 00                          >>>PATH:.

0000011c <_ZZ4loopE3__c_4>:
     11c:	3c 2f 68 74 6d 6c 3e 00                             </html>.

00000124 <_ZZ4loopE3__c_3>:
     124:	59 6f 75 20 61 63 63 65 73 73 65 64 20 70 61 74     You accessed pat
     134:	68 3a 20 00                                         h: .

00000138 <_ZZ4loopE3__c_2>:
     138:	50 61 74 68 3a 20 00                                Path: .

0000013f <_ZZ4loopE3__c_1>:
     13f:	41 63 74 69 6f 6e 3a 20 00                          Action: .

00000148 <_ZZ4loopE3__c_0>:
     148:	50 72 6f 63 65 73 73 69 6e 67 20 72 65 71 75 65     Processing reque
     158:	73 74 00                                            st.

0000015b <_ZZ4loopE3__c>:
     15b:	43 6c 69 65 6e 74 20 63 6f 6e 6e 65 63 74 65 64     Client connected
     16b:	2e 00                                               ..

0000016d <_ZZ5setupE3__c_11>:
     16d:	4c 69 73 74 65 6e 69 6e 67 20 66 6f 72 20 63 6f     Listening for co
     17d:	6e 6e 65 63 74 69 6f 6e 73 2e 2e 2e 00              nnections....

0000018a <_ZZ5setupE3__c_10>:
     18a:	74 68 65 72 65 20 69 73 6e 27 74 20 61 6e 20 6f     there isn't an o
     19a:	62 76 69 6f 75 73 20 6d 6f 6d 65 6e 74 20 74 6f     bvious moment to
     1aa:	20 64 69 73 63 6f 6e 6e 65 63 74 20 77 69 74 68      disconnect with
     1ba:	20 61 20 73 65 72 76 65 72 2e 0d 0a 00               a server....

000001c7 <_ZZ5setupE3__c_9>:
     1c7:	74 69 6d 65 6f 75 74 20 70 65 72 69 6f 64 20 70     timeout period p
     1d7:	61 73 73 65 73 2e 20 20 54 68 69 73 20 69 73 20     asses.  This is 
     1e7:	6e 6f 72 6d 61 6c 20 62 65 68 61 76 69 6f 75 72     normal behaviour
     1f7:	20 73 69 6e 63 65 00                                 since.

000001fe <_ZZ5setupE3__c_8>:
     1fe:	41 50 20 6d 61 79 20 72 65 66 75 73 65 20 63 6f     AP may refuse co
     20e:	6e 6e 65 63 74 69 6f 6e 20 72 65 71 75 65 73 74     nnection request
     21e:	73 20 66 72 6f 6d 20 74 68 65 20 43 43 33 30 30     s from the CC300
     22e:	30 20 75 6e 74 69 6c 20 61 00                       0 until a.

00000238 <_ZZ5setupE3__c_7>:
     238:	73 69 6e 63 65 20 74 68 65 20 2e 64 69 73 63 6f     since the .disco
     248:	6e 6e 65 63 74 28 29 20 66 75 6e 63 74 69 6f 6e     nnect() function
     258:	20 69 73 20 6e 65 76 65 72 20 63 61 6c 6c 65 64      is never called
     268:	2c 20 73 6f 20 74 68 65 00                          , so the.

00000271 <_ZZ5setupE3__c_6>:
     271:	0d 0a 4e 4f 54 45 3a 20 54 68 69 73 20 73 6b 65     ..NOTE: This ske
     281:	74 63 68 20 6d 61 79 20 63 61 75 73 65 20 70 72     tch may cause pr
     291:	6f 62 6c 65 6d 73 20 77 69 74 68 20 6f 74 68 65     oblems with othe
     2a1:	72 20 73 6b 65 74 63 68 65 73 00                    r sketches.

000002ac <_ZZ5setupE3__c_5>:
     2ac:	52 65 71 75 65 73 74 20 44 48 43 50 00              Request DHCP.

000002b9 <_ZZ5setupE3__c_4>:
     2b9:	43 6f 6e 6e 65 63 74 65 64 21 00                    Connected!.

000002c4 <_ZZ5setupE3__c_3>:
     2c4:	46 61 69 6c 65 64 21 00                             Failed!.

000002cc <_ZZ5setupE3__c_2>:
     2cc:	0a 41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 63     .Attempting to c
     2dc:	6f 6e 6e 65 63 74 20 74 6f 20 00                    onnect to .

000002e7 <_ZZ5setupE3__c_1>:
     2e7:	43 6f 75 6c 64 6e 27 74 20 62 65 67 69 6e 28 29     Couldn't begin()
     2f7:	21 20 43 68 65 63 6b 20 79 6f 75 72 20 77 69 72     ! Check your wir
     307:	69 6e 67 3f 00                                      ing?.

0000030c <_ZZ5setupE3__c_0>:
     30c:	0a 49 6e 69 74 69 61 6c 69 7a 69 6e 67 2e 2e 2e     .Initializing...
	...

0000031d <_ZZ5setupE3__c>:
     31d:	48 65 6c 6c 6f 2c 20 43 43 33 30 30 30 21 0a 00     Hello, CC3000!..

0000032d <port_to_mode_PGM>:
     32d:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000337 <port_to_output_PGM>:
     337:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000341 <port_to_input_PGM>:
     341:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000034b <digital_pin_to_port_PGM>:
     34b:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     35b:	03 03 03 03                                         ....

0000035f <digital_pin_to_bit_mask_PGM>:
     35f:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     36f:	04 08 10 20                                         ... 

00000373 <digital_pin_to_timer_PGM>:
     373:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     383:	00 00 00 00 00                                      .....

00000388 <__ctors_start>:
     388:	75 15       	cp	r23, r5
     38a:	8a 1f       	adc	r24, r26
     38c:	4f 25       	eor	r20, r15
     38e:	87 2b       	or	r24, r23
     390:	e3 2b       	or	r30, r19

00000392 <__ctors_end>:
     392:	11 24       	eor	r1, r1
     394:	1f be       	out	0x3f, r1	; 63
     396:	cf ef       	ldi	r28, 0xFF	; 255
     398:	d8 e0       	ldi	r29, 0x08	; 8
     39a:	de bf       	out	0x3e, r29	; 62
     39c:	cd bf       	out	0x3d, r28	; 61

0000039e <__do_copy_data>:
     39e:	13 e0       	ldi	r17, 0x03	; 3
     3a0:	a0 e0       	ldi	r26, 0x00	; 0
     3a2:	b1 e0       	ldi	r27, 0x01	; 1
     3a4:	e4 e1       	ldi	r30, 0x14	; 20
     3a6:	f8 e6       	ldi	r31, 0x68	; 104
     3a8:	02 c0       	rjmp	.+4      	; 0x3ae <.do_copy_data_start>

000003aa <.do_copy_data_loop>:
     3aa:	05 90       	lpm	r0, Z+
     3ac:	0d 92       	st	X+, r0

000003ae <.do_copy_data_start>:
     3ae:	a8 33       	cpi	r26, 0x38	; 56
     3b0:	b1 07       	cpc	r27, r17
     3b2:	d9 f7       	brne	.-10     	; 0x3aa <.do_copy_data_loop>

000003b4 <__do_clear_bss>:
     3b4:	17 e0       	ldi	r17, 0x07	; 7
     3b6:	a8 e3       	ldi	r26, 0x38	; 56
     3b8:	b3 e0       	ldi	r27, 0x03	; 3
     3ba:	01 c0       	rjmp	.+2      	; 0x3be <.do_clear_bss_start>

000003bc <.do_clear_bss_loop>:
     3bc:	1d 92       	st	X+, r1

000003be <.do_clear_bss_start>:
     3be:	a1 34       	cpi	r26, 0x41	; 65
     3c0:	b1 07       	cpc	r27, r17
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <.do_clear_bss_loop>

000003c4 <__do_global_ctors>:
     3c4:	13 e0       	ldi	r17, 0x03	; 3
     3c6:	c2 e9       	ldi	r28, 0x92	; 146
     3c8:	d3 e0       	ldi	r29, 0x03	; 3
     3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <.do_global_ctors_start>

000003cc <.do_global_ctors_loop>:
     3cc:	22 97       	sbiw	r28, 0x02	; 2
     3ce:	fe 01       	movw	r30, r28
     3d0:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__tablejump__>

000003d4 <.do_global_ctors_start>:
     3d4:	c8 38       	cpi	r28, 0x88	; 136
     3d6:	d1 07       	cpc	r29, r17
     3d8:	c9 f7       	brne	.-14     	; 0x3cc <.do_global_ctors_loop>
     3da:	0e 94 29 30 	call	0x6052	; 0x6052 <main>
     3de:	0c 94 08 34 	jmp	0x6810	; 0x6810 <_exit>

000003e2 <__bad_interrupt>:
     3e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003e6 <_ZN8SPIClass11setBitOrderEh>:
  SPCR &= ~_BV(SPE);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  if(bitOrder == LSBFIRST) {
     3e6:	88 23       	and	r24, r24
     3e8:	19 f4       	brne	.+6      	; 0x3f0 <_ZN8SPIClass11setBitOrderEh+0xa>
    SPCR |= _BV(DORD);
     3ea:	8c b5       	in	r24, 0x2c	; 44
     3ec:	80 62       	ori	r24, 0x20	; 32
     3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <_ZN8SPIClass11setBitOrderEh+0xe>
  } else {
    SPCR &= ~(_BV(DORD));
     3f0:	8c b5       	in	r24, 0x2c	; 44
     3f2:	8f 7d       	andi	r24, 0xDF	; 223
     3f4:	8c bd       	out	0x2c, r24	; 44
     3f6:	08 95       	ret

000003f8 <_ZN8SPIClass11setDataModeEh>:
  }
}

void SPIClass::setDataMode(uint8_t mode)
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
     3f8:	9c b5       	in	r25, 0x2c	; 44
     3fa:	93 7f       	andi	r25, 0xF3	; 243
     3fc:	98 2b       	or	r25, r24
     3fe:	9c bd       	out	0x2c, r25	; 44
}
     400:	08 95       	ret

00000402 <_ZN8SPIClass15setClockDividerEh>:

void SPIClass::setClockDivider(uint8_t rate)
{
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
     402:	2c b5       	in	r18, 0x2c	; 44
     404:	38 2f       	mov	r19, r24
     406:	33 70       	andi	r19, 0x03	; 3
     408:	2c 7f       	andi	r18, 0xFC	; 252
     40a:	32 2b       	or	r19, r18
     40c:	3c bd       	out	0x2c, r19	; 44
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
     40e:	2d b5       	in	r18, 0x2d	; 45
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	95 95       	asr	r25
     414:	87 95       	ror	r24
     416:	95 95       	asr	r25
     418:	87 95       	ror	r24
     41a:	81 70       	andi	r24, 0x01	; 1
     41c:	2e 7f       	andi	r18, 0xFE	; 254
     41e:	82 2b       	or	r24, r18
     420:	8d bd       	out	0x2d, r24	; 45
}
     422:	08 95       	ret

00000424 <_ZN8SPIClass5beginEv>:
SPIClass SPI;

void SPIClass::begin() {

  // Set SS to high so a connected chip will be "deselected" by default
  digitalWrite(SS, HIGH);
     424:	8a e0       	ldi	r24, 0x0A	; 10
     426:	61 e0       	ldi	r22, 0x01	; 1
     428:	0e 94 61 31 	call	0x62c2	; 0x62c2 <digitalWrite>

  // When the SS pin is set as OUTPUT, it can be used as
  // a general purpose output port (it doesn't influence
  // SPI operations).
  pinMode(SS, OUTPUT);
     42c:	8a e0       	ldi	r24, 0x0A	; 10
     42e:	61 e0       	ldi	r22, 0x01	; 1
     430:	0e 94 22 31 	call	0x6244	; 0x6244 <pinMode>

  // Warning: if the SS pin ever becomes a LOW INPUT then SPI
  // automatically switches to Slave, so the data direction of
  // the SS pin MUST be kept as OUTPUT.
  SPCR |= _BV(MSTR);
     434:	8c b5       	in	r24, 0x2c	; 44
     436:	80 61       	ori	r24, 0x10	; 16
     438:	8c bd       	out	0x2c, r24	; 44
  SPCR |= _BV(SPE);
     43a:	8c b5       	in	r24, 0x2c	; 44
     43c:	80 64       	ori	r24, 0x40	; 64
     43e:	8c bd       	out	0x2c, r24	; 44
  // MISO pin automatically overrides to INPUT.
  // By doing this AFTER enabling SPI, we avoid accidentally
  // clocking in a single bit since the lines go directly
  // from "input" to SPI control.  
  // http://code.google.com/p/arduino/issues/detail?id=888
  pinMode(SCK, OUTPUT);
     440:	8d e0       	ldi	r24, 0x0D	; 13
     442:	61 e0       	ldi	r22, 0x01	; 1
     444:	0e 94 22 31 	call	0x6244	; 0x6244 <pinMode>
  pinMode(MOSI, OUTPUT);
     448:	8b e0       	ldi	r24, 0x0B	; 11
     44a:	61 e0       	ldi	r22, 0x01	; 1
     44c:	0e 94 22 31 	call	0x6244	; 0x6244 <pinMode>
}
     450:	08 95       	ret

00000452 <UINT32_TO_STREAM_f>:
//!  @brief                This function is used for copying 32 bit to stream
//!						   while converting to little endian format.
//
//*****************************************************************************

UINT8* UINT32_TO_STREAM_f (UINT8 *p, UINT32 u32)
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
     456:	fc 01       	movw	r30, r24
{
	*(p)++ = (UINT8)(u32);
     458:	dc 01       	movw	r26, r24
     45a:	4d 93       	st	X+, r20
     45c:	9d 01       	movw	r18, r26
	*(p)++ = (UINT8)((u32) >> 8);
     45e:	bb 27       	eor	r27, r27
     460:	a7 2f       	mov	r26, r23
     462:	96 2f       	mov	r25, r22
     464:	85 2f       	mov	r24, r21
     466:	81 83       	std	Z+1, r24	; 0x01
     468:	f9 01       	movw	r30, r18
     46a:	31 96       	adiw	r30, 0x01	; 1
	*(p)++ = (UINT8)((u32) >> 16);
     46c:	cb 01       	movw	r24, r22
     46e:	aa 27       	eor	r26, r26
     470:	bb 27       	eor	r27, r27
     472:	e9 01       	movw	r28, r18
     474:	89 83       	std	Y+1, r24	; 0x01
	*(p)++ = (UINT8)((u32) >> 24);
     476:	47 2f       	mov	r20, r23
     478:	55 27       	eor	r21, r21
     47a:	66 27       	eor	r22, r22
     47c:	77 27       	eor	r23, r23
     47e:	41 83       	std	Z+1, r20	; 0x01
     480:	32 96       	adiw	r30, 0x02	; 2
	return p;
}
     482:	cf 01       	movw	r24, r30
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	08 95       	ret

0000048a <UINT16_TO_STREAM_f>:
//!  @brief               This function is used for copying 16 bit to stream
//!                       while converting to little endian format.
//
//*****************************************************************************

UINT8* UINT16_TO_STREAM_f (UINT8 *p, UINT16 u16)
     48a:	dc 01       	movw	r26, r24
{
	*(p)++ = (UINT8)(u16);
     48c:	fc 01       	movw	r30, r24
     48e:	61 93       	st	Z+, r22
	*(p)++ = (UINT8)((u16) >> 8);
     490:	11 96       	adiw	r26, 0x01	; 1
     492:	7c 93       	st	X, r23
     494:	31 96       	adiw	r30, 0x01	; 1
	return p;
}
     496:	cf 01       	movw	r24, r30
     498:	08 95       	ret

0000049a <STREAM_TO_UINT16_f>:
//!  @brief               This function is used for copying received stream to
//!                       16 bit in little endian format.
//
//*****************************************************************************

UINT16 STREAM_TO_UINT16_f(CHAR* cp, UINT16 offset)
     49a:	fb 01       	movw	r30, r22
{
  // Adafruit CC3k Host Driver Difference
  // Explicit cast to UINT8 pointer is required or decoding parameters breaks on Arduino.
  // Noted 12-12-2014 by tdicola
  UINT8 *p = (UINT8 *)cp;
     49c:	e8 0f       	add	r30, r24
     49e:	f9 1f       	adc	r31, r25
     4a0:	31 81       	ldd	r19, Z+1	; 0x01
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	80 81       	ld	r24, Z
     4a6:	28 0f       	add	r18, r24
     4a8:	31 1d       	adc	r19, r1
  DEBUGPRINT_F("\n\r");
  */

  return (UINT16)((UINT16)((UINT16)
          (*(p + offset + 1)) << 8) + (UINT16)(*(p + offset)));
}
     4aa:	c9 01       	movw	r24, r18
     4ac:	08 95       	ret

000004ae <STREAM_TO_UINT32_f>:
//!  @brief               This function is used for copying received stream to
//!                       32 bit in little endian format.
//
//*****************************************************************************

UINT32 STREAM_TO_UINT32_f(CHAR* cp, UINT16 offset)
     4ae:	fb 01       	movw	r30, r22
{
  // Adafruit CC3k Host Driver Difference
  // Explicit cast to UINT8 pointer is required or decoding parameters breaks on Arduino.
  // Noted 12-12-2014 by tdicola
  UINT8 *p = (UINT8 *)cp;
     4b0:	e8 0f       	add	r30, r24
     4b2:	f9 1f       	adc	r31, r25
     4b4:	23 81       	ldd	r18, Z+3	; 0x03
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	40 e0       	ldi	r20, 0x00	; 0
     4ba:	50 e0       	ldi	r21, 0x00	; 0
     4bc:	52 2f       	mov	r21, r18
     4be:	44 27       	eor	r20, r20
     4c0:	33 27       	eor	r19, r19
     4c2:	22 27       	eor	r18, r18
     4c4:	82 81       	ldd	r24, Z+2	; 0x02
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	a0 e0       	ldi	r26, 0x00	; 0
     4ca:	b0 e0       	ldi	r27, 0x00	; 0
     4cc:	dc 01       	movw	r26, r24
     4ce:	99 27       	eor	r25, r25
     4d0:	88 27       	eor	r24, r24
     4d2:	28 0f       	add	r18, r24
     4d4:	39 1f       	adc	r19, r25
     4d6:	4a 1f       	adc	r20, r26
     4d8:	5b 1f       	adc	r21, r27
     4da:	80 81       	ld	r24, Z
     4dc:	28 0f       	add	r18, r24
     4de:	31 1d       	adc	r19, r1
     4e0:	41 1d       	adc	r20, r1
     4e2:	51 1d       	adc	r21, r1
     4e4:	81 81       	ldd	r24, Z+1	; 0x01
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	a0 e0       	ldi	r26, 0x00	; 0
     4ea:	b0 e0       	ldi	r27, 0x00	; 0
     4ec:	ba 2f       	mov	r27, r26
     4ee:	a9 2f       	mov	r26, r25
     4f0:	98 2f       	mov	r25, r24
     4f2:	88 27       	eor	r24, r24
     4f4:	28 0f       	add	r18, r24
     4f6:	39 1f       	adc	r19, r25
     4f8:	4a 1f       	adc	r20, r26
     4fa:	5b 1f       	adc	r21, r27

  return (UINT32)((UINT32)((UINT32)
	(*(p + offset + 3)) << 24) + (UINT32)((UINT32)
	(*(p + offset + 2)) << 16) + (UINT32)((UINT32)
	(*(p + offset + 1)) << 8) + (UINT32)(*(p + offset)));
}
     4fc:	b9 01       	movw	r22, r18
     4fe:	ca 01       	movw	r24, r20
     500:	08 95       	ret

00000502 <_Z10getFreeRamv>:
int getFreeRam(void) {
  char top;
  return &top - reinterpret_cast<char*>(sbrk(0));
}
#else // AVR 
int getFreeRam(void)
     502:	df 93       	push	r29
     504:	cf 93       	push	r28
     506:	00 d0       	rcall	.+0      	; 0x508 <_Z10getFreeRamv+0x6>
     508:	cd b7       	in	r28, 0x3d	; 61
     50a:	de b7       	in	r29, 0x3e	; 62
{
  extern int  __bss_end;
  extern int  *__brkval;
  int free_memory;
  if((int)__brkval == 0) {
     50c:	20 91 3b 07 	lds	r18, 0x073B
     510:	30 91 3c 07 	lds	r19, 0x073C
     514:	ce 01       	movw	r24, r28
     516:	01 96       	adiw	r24, 0x01	; 1
     518:	21 15       	cp	r18, r1
     51a:	31 05       	cpc	r19, r1
     51c:	19 f4       	brne	.+6      	; 0x524 <_Z10getFreeRamv+0x22>
    free_memory = ((int)&free_memory) - ((int)&__bss_end);
     51e:	81 54       	subi	r24, 0x41	; 65
     520:	97 40       	sbci	r25, 0x07	; 7
     522:	02 c0       	rjmp	.+4      	; 0x528 <_Z10getFreeRamv+0x26>
  }
  else {
    free_memory = ((int)&free_memory) - ((int)__brkval);
     524:	82 1b       	sub	r24, r18
     526:	93 0b       	sbc	r25, r19
     528:	9a 83       	std	Y+2, r25	; 0x02
     52a:	89 83       	std	Y+1, r24	; 0x01
  }

  return free_memory;
} 
     52c:	89 81       	ldd	r24, Y+1	; 0x01
     52e:	9a 81       	ldd	r25, Y+2	; 0x02
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	cf 91       	pop	r28
     536:	df 91       	pop	r29
     538:	08 95       	ret

0000053a <set_socket_active_status>:
//!
//!  @brief          Check if the socket ID and status are valid and set 
//!                  accordingly  the global socket status
//
//*****************************************************************************
void set_socket_active_status(INT32 Sd, INT32 Status)
     53a:	af 92       	push	r10
     53c:	bf 92       	push	r11
     53e:	cf 92       	push	r12
     540:	df 92       	push	r13
     542:	ef 92       	push	r14
     544:	ff 92       	push	r15
     546:	0f 93       	push	r16
     548:	1f 93       	push	r17
     54a:	59 01       	movw	r10, r18
     54c:	6a 01       	movw	r12, r20
{
	if(M_IS_VALID_SD(Sd) && M_IS_VALID_STATUS(Status))
     54e:	68 30       	cpi	r22, 0x08	; 8
     550:	71 05       	cpc	r23, r1
     552:	81 05       	cpc	r24, r1
     554:	91 05       	cpc	r25, r1
     556:	a0 f5       	brcc	.+104    	; 0x5c0 <set_socket_active_status+0x86>
     558:	22 e0       	ldi	r18, 0x02	; 2
     55a:	a2 16       	cp	r10, r18
     55c:	b1 04       	cpc	r11, r1
     55e:	c1 04       	cpc	r12, r1
     560:	d1 04       	cpc	r13, r1
     562:	70 f5       	brcc	.+92     	; 0x5c0 <set_socket_active_status+0x86>
	{
		socket_active_status &= ~(1 << Sd);      /* clean socket's mask */
		socket_active_status |= (Status << Sd); /* set new socket's mask */
     564:	21 e0       	ldi	r18, 0x01	; 1
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	06 2e       	mov	r0, r22
     56a:	02 c0       	rjmp	.+4      	; 0x570 <set_socket_active_status+0x36>
     56c:	22 0f       	add	r18, r18
     56e:	33 1f       	adc	r19, r19
     570:	0a 94       	dec	r0
     572:	e2 f7       	brpl	.-8      	; 0x56c <set_socket_active_status+0x32>
     574:	20 95       	com	r18
     576:	30 95       	com	r19
     578:	44 27       	eor	r20, r20
     57a:	37 fd       	sbrc	r19, 7
     57c:	40 95       	com	r20
     57e:	54 2f       	mov	r21, r20
     580:	e0 90 7e 02 	lds	r14, 0x027E
     584:	f0 90 7f 02 	lds	r15, 0x027F
     588:	00 91 80 02 	lds	r16, 0x0280
     58c:	10 91 81 02 	lds	r17, 0x0281
     590:	2e 21       	and	r18, r14
     592:	3f 21       	and	r19, r15
     594:	40 23       	and	r20, r16
     596:	51 23       	and	r21, r17
     598:	06 2e       	mov	r0, r22
     59a:	04 c0       	rjmp	.+8      	; 0x5a4 <set_socket_active_status+0x6a>
     59c:	aa 0c       	add	r10, r10
     59e:	bb 1c       	adc	r11, r11
     5a0:	cc 1c       	adc	r12, r12
     5a2:	dd 1c       	adc	r13, r13
     5a4:	0a 94       	dec	r0
     5a6:	d2 f7       	brpl	.-12     	; 0x59c <set_socket_active_status+0x62>
     5a8:	2a 29       	or	r18, r10
     5aa:	3b 29       	or	r19, r11
     5ac:	4c 29       	or	r20, r12
     5ae:	5d 29       	or	r21, r13
     5b0:	20 93 7e 02 	sts	0x027E, r18
     5b4:	30 93 7f 02 	sts	0x027F, r19
     5b8:	40 93 80 02 	sts	0x0280, r20
     5bc:	50 93 81 02 	sts	0x0281, r21
	}
}
     5c0:	1f 91       	pop	r17
     5c2:	0f 91       	pop	r16
     5c4:	ff 90       	pop	r15
     5c6:	ef 90       	pop	r14
     5c8:	df 90       	pop	r13
     5ca:	cf 90       	pop	r12
     5cc:	bf 90       	pop	r11
     5ce:	af 90       	pop	r10
     5d0:	08 95       	ret

000005d2 <get_socket_active_status>:
//!
//!  @brief  Retrieve socket status
//
//*****************************************************************************

INT32 get_socket_active_status(INT32 Sd)
     5d2:	9b 01       	movw	r18, r22
     5d4:	ac 01       	movw	r20, r24
{
	if(M_IS_VALID_SD(Sd))
     5d6:	68 30       	cpi	r22, 0x08	; 8
     5d8:	71 05       	cpc	r23, r1
     5da:	81 05       	cpc	r24, r1
     5dc:	91 05       	cpc	r25, r1
     5de:	e8 f4       	brcc	.+58     	; 0x61a <get_socket_active_status+0x48>
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	02 c0       	rjmp	.+4      	; 0x5ea <get_socket_active_status+0x18>
     5e6:	88 0f       	add	r24, r24
     5e8:	99 1f       	adc	r25, r25
     5ea:	2a 95       	dec	r18
     5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <get_socket_active_status+0x14>
     5ee:	9c 01       	movw	r18, r24
     5f0:	44 27       	eor	r20, r20
     5f2:	37 fd       	sbrc	r19, 7
     5f4:	40 95       	com	r20
     5f6:	54 2f       	mov	r21, r20
     5f8:	80 91 7e 02 	lds	r24, 0x027E
     5fc:	90 91 7f 02 	lds	r25, 0x027F
     600:	a0 91 80 02 	lds	r26, 0x0280
     604:	b0 91 81 02 	lds	r27, 0x0281
     608:	28 23       	and	r18, r24
     60a:	39 23       	and	r19, r25
     60c:	4a 23       	and	r20, r26
     60e:	5b 23       	and	r21, r27
     610:	21 15       	cp	r18, r1
     612:	31 05       	cpc	r19, r1
     614:	41 05       	cpc	r20, r1
     616:	51 05       	cpc	r21, r1
     618:	21 f0       	breq	.+8      	; 0x622 <get_socket_active_status+0x50>
     61a:	21 e0       	ldi	r18, 0x01	; 1
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	40 e0       	ldi	r20, 0x00	; 0
     620:	50 e0       	ldi	r21, 0x00	; 0
	{
		return (socket_active_status & (1 << Sd)) ? SOCKET_STATUS_INACTIVE : SOCKET_STATUS_ACTIVE;
	}
	return SOCKET_STATUS_INACTIVE;
}
     622:	b9 01       	movw	r22, r18
     624:	ca 01       	movw	r24, r20
     626:	08 95       	ret

00000628 <hci_unsol_event_handler>:
//!                      0 if event is not supported
//!
//!  @brief              Handle unsolicited events
//
//*****************************************************************************
INT32 hci_unsol_event_handler(CHAR *event_hdr)
     628:	8f 92       	push	r8
     62a:	9f 92       	push	r9
     62c:	af 92       	push	r10
     62e:	bf 92       	push	r11
     630:	cf 92       	push	r12
     632:	df 92       	push	r13
     634:	ef 92       	push	r14
     636:	ff 92       	push	r15
     638:	0f 93       	push	r16
     63a:	1f 93       	push	r17
     63c:	df 93       	push	r29
     63e:	cf 93       	push	r28
     640:	cd b7       	in	r28, 0x3d	; 61
     642:	de b7       	in	r29, 0x3e	; 62
     644:	a9 97       	sbiw	r28, 0x29	; 41
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	f8 94       	cli
     64a:	de bf       	out	0x3e, r29	; 62
     64c:	0f be       	out	0x3f, r0	; 63
     64e:	cd bf       	out	0x3d, r28	; 61
     650:	8c 01       	movw	r16, r24
	CHAR * data = NULL;
	INT32 event_type;
	UINT32 NumberOfReleasedPackets;
	UINT32 NumberOfSentPackets;

	STREAM_TO_UINT16(event_hdr, HCI_EVENT_OPCODE_OFFSET,event_type);
     652:	61 e0       	ldi	r22, 0x01	; 1
     654:	70 e0       	ldi	r23, 0x00	; 0
     656:	0e 94 4d 02 	call	0x49a	; 0x49a <STREAM_TO_UINT16_f>
     65a:	9c 01       	movw	r18, r24
     65c:	6c 01       	movw	r12, r24
     65e:	ee 24       	eor	r14, r14
     660:	ff 24       	eor	r15, r15
	// Extra debug output.
	// Noted 12-12-2014 by tdicola
	DEBUGPRINT_F("\tHCI_UNSOL_EVT: ");
	DEBUGPRINT_HEX16(event_type);

	if (event_type & HCI_EVNT_UNSOL_BASE)
     662:	d6 fe       	sbrs	r13, 6
     664:	6d c0       	rjmp	.+218    	; 0x740 <hci_unsol_event_handler+0x118>
	{
		switch(event_type)
     666:	81 e4       	ldi	r24, 0x41	; 65
     668:	20 30       	cpi	r18, 0x00	; 0
     66a:	38 07       	cpc	r19, r24
     66c:	09 f0       	breq	.+2      	; 0x670 <hci_unsol_event_handler+0x48>
     66e:	68 c0       	rjmp	.+208    	; 0x740 <hci_unsol_event_handler+0x118>
	INT32 temp, value;
	UINT16 i;
	UINT16  pusNumberOfHandles=0;
	CHAR *pReadPayload;

	STREAM_TO_UINT16((CHAR *)pEvent,HCI_EVENT_HEADER_SIZE,pusNumberOfHandles);
     670:	c8 01       	movw	r24, r16
     672:	65 e0       	ldi	r22, 0x05	; 5
     674:	70 e0       	ldi	r23, 0x00	; 0
     676:	0e 94 4d 02 	call	0x49a	; 0x49a <STREAM_TO_UINT16_f>
     67a:	4c 01       	movw	r8, r24
	pReadPayload = ((CHAR *)pEvent +
		HCI_EVENT_HEADER_SIZE + sizeof(pusNumberOfHandles));	
     67c:	97 e0       	ldi	r25, 0x07	; 7
     67e:	a9 2e       	mov	r10, r25
     680:	b1 2c       	mov	r11, r1
     682:	a0 0e       	add	r10, r16
     684:	b1 1e       	adc	r11, r17
     686:	cc 24       	eor	r12, r12
     688:	dd 24       	eor	r13, r13
     68a:	ee 24       	eor	r14, r14
     68c:	ff 24       	eor	r15, r15
     68e:	87 01       	movw	r16, r14
     690:	12 c0       	rjmp	.+36     	; 0x6b6 <hci_unsol_event_handler+0x8e>
	temp = 0;

	for(i = 0; i < pusNumberOfHandles ; i++)
	{
		STREAM_TO_UINT16(pReadPayload, FLOW_CONTROL_EVENT_FREE_BUFFS_OFFSET, value);
     692:	c5 01       	movw	r24, r10
     694:	62 e0       	ldi	r22, 0x02	; 2
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	0e 94 4d 02 	call	0x49a	; 0x49a <STREAM_TO_UINT16_f>
		temp += value;
     69c:	a0 e0       	ldi	r26, 0x00	; 0
     69e:	b0 e0       	ldi	r27, 0x00	; 0
     6a0:	e8 0e       	add	r14, r24
     6a2:	f9 1e       	adc	r15, r25
     6a4:	0a 1f       	adc	r16, r26
     6a6:	1b 1f       	adc	r17, r27
		pReadPayload += FLOW_CONTROL_EVENT_SIZE;  
     6a8:	a4 e0       	ldi	r26, 0x04	; 4
     6aa:	b0 e0       	ldi	r27, 0x00	; 0
     6ac:	aa 0e       	add	r10, r26
     6ae:	bb 1e       	adc	r11, r27
	STREAM_TO_UINT16((CHAR *)pEvent,HCI_EVENT_HEADER_SIZE,pusNumberOfHandles);
	pReadPayload = ((CHAR *)pEvent +
		HCI_EVENT_HEADER_SIZE + sizeof(pusNumberOfHandles));	
	temp = 0;

	for(i = 0; i < pusNumberOfHandles ; i++)
     6b0:	08 94       	sec
     6b2:	c1 1c       	adc	r12, r1
     6b4:	d1 1c       	adc	r13, r1
     6b6:	c8 14       	cp	r12, r8
     6b8:	d9 04       	cpc	r13, r9
     6ba:	58 f3       	brcs	.-42     	; 0x692 <hci_unsol_event_handler+0x6a>
		STREAM_TO_UINT16(pReadPayload, FLOW_CONTROL_EVENT_FREE_BUFFS_OFFSET, value);
		temp += value;
		pReadPayload += FLOW_CONTROL_EVENT_SIZE;  
	}

	tSLInformation.usNumberOfFreeBuffers += temp;
     6bc:	80 91 56 03 	lds	r24, 0x0356
     6c0:	90 91 57 03 	lds	r25, 0x0357
     6c4:	8e 0d       	add	r24, r14
     6c6:	9f 1d       	adc	r25, r15
     6c8:	90 93 57 03 	sts	0x0357, r25
     6cc:	80 93 56 03 	sts	0x0356, r24
	tSLInformation.NumberOfReleasedPackets += temp;
     6d0:	80 91 62 03 	lds	r24, 0x0362
     6d4:	90 91 63 03 	lds	r25, 0x0363
     6d8:	a0 91 64 03 	lds	r26, 0x0364
     6dc:	b0 91 65 03 	lds	r27, 0x0365
     6e0:	e8 0e       	add	r14, r24
     6e2:	f9 1e       	adc	r15, r25
     6e4:	0a 1f       	adc	r16, r26
     6e6:	1b 1f       	adc	r17, r27
     6e8:	e0 92 62 03 	sts	0x0362, r14
     6ec:	f0 92 63 03 	sts	0x0363, r15
     6f0:	00 93 64 03 	sts	0x0364, r16
     6f4:	10 93 65 03 	sts	0x0365, r17

		case HCI_EVNT_DATA_UNSOL_FREE_BUFF:
			{
				hci_event_unsol_flowcontrol_handler(event_hdr);

				NumberOfReleasedPackets = tSLInformation.NumberOfReleasedPackets;
     6f8:	20 91 62 03 	lds	r18, 0x0362
     6fc:	30 91 63 03 	lds	r19, 0x0363
     700:	40 91 64 03 	lds	r20, 0x0364
     704:	50 91 65 03 	lds	r21, 0x0365
				NumberOfSentPackets = tSLInformation.NumberOfSentPackets;
     708:	80 91 5e 03 	lds	r24, 0x035E
     70c:	90 91 5f 03 	lds	r25, 0x035F
     710:	a0 91 60 03 	lds	r26, 0x0360
     714:	b0 91 61 03 	lds	r27, 0x0361

				if (NumberOfReleasedPackets == NumberOfSentPackets)
     718:	28 17       	cp	r18, r24
     71a:	39 07       	cpc	r19, r25
     71c:	4a 07       	cpc	r20, r26
     71e:	5b 07       	cpc	r21, r27
     720:	09 f0       	breq	.+2      	; 0x724 <hci_unsol_event_handler+0xfc>
     722:	ad c0       	rjmp	.+346    	; 0x87e <hci_unsol_event_handler+0x256>
				{
					if (tSLInformation.InformHostOnTxComplete)
     724:	80 91 66 03 	lds	r24, 0x0366
     728:	88 23       	and	r24, r24
     72a:	09 f4       	brne	.+2      	; 0x72e <hci_unsol_event_handler+0x106>
     72c:	a8 c0       	rjmp	.+336    	; 0x87e <hci_unsol_event_handler+0x256>
					{
						tSLInformation.sWlanCB(HCI_EVENT_CC3000_CAN_SHUT_DOWN, NULL, 0);
     72e:	e0 91 48 03 	lds	r30, 0x0348
     732:	f0 91 49 03 	lds	r31, 0x0349
     736:	69 e9       	ldi	r22, 0x99	; 153
     738:	70 e0       	ldi	r23, 0x00	; 0
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	4a c0       	rjmp	.+148    	; 0x7d4 <hci_unsol_event_handler+0x1ac>

			}
		}
	}

	if(event_type & HCI_EVNT_WLAN_UNSOL_BASE)
     740:	c6 01       	movw	r24, r12
     742:	80 70       	andi	r24, 0x00	; 0
     744:	90 78       	andi	r25, 0x80	; 128
     746:	89 2b       	or	r24, r25
     748:	09 f4       	brne	.+2      	; 0x74c <hci_unsol_event_handler+0x124>
     74a:	f2 c0       	rjmp	.+484    	; 0x930 <__stack+0x31>
	{           
		switch(event_type)
     74c:	b0 e8       	ldi	r27, 0x80	; 128
     74e:	20 34       	cpi	r18, 0x40	; 64
     750:	3b 07       	cpc	r19, r27
     752:	09 f4       	brne	.+2      	; 0x756 <hci_unsol_event_handler+0x12e>
     754:	99 c0       	rjmp	.+306    	; 0x888 <hci_unsol_event_handler+0x260>
     756:	e0 e8       	ldi	r30, 0x80	; 128
     758:	21 34       	cpi	r18, 0x41	; 65
     75a:	3e 07       	cpc	r19, r30
     75c:	a0 f4       	brcc	.+40     	; 0x786 <hci_unsol_event_handler+0x15e>
     75e:	f0 e8       	ldi	r31, 0x80	; 128
     760:	24 30       	cpi	r18, 0x04	; 4
     762:	3f 07       	cpc	r19, r31
     764:	51 f1       	breq	.+84     	; 0x7ba <hci_unsol_event_handler+0x192>
     766:	80 e8       	ldi	r24, 0x80	; 128
     768:	25 30       	cpi	r18, 0x05	; 5
     76a:	38 07       	cpc	r19, r24
     76c:	38 f4       	brcc	.+14     	; 0x77c <hci_unsol_event_handler+0x154>
     76e:	21 50       	subi	r18, 0x01	; 1
     770:	30 48       	sbci	r19, 0x80	; 128
     772:	22 30       	cpi	r18, 0x02	; 2
     774:	31 05       	cpc	r19, r1
     776:	08 f0       	brcs	.+2      	; 0x77a <hci_unsol_event_handler+0x152>
     778:	7e c1       	rjmp	.+764    	; 0xa76 <__stack+0x177>
     77a:	1f c0       	rjmp	.+62     	; 0x7ba <hci_unsol_event_handler+0x192>
     77c:	20 51       	subi	r18, 0x10	; 16
     77e:	30 48       	sbci	r19, 0x80	; 128
     780:	09 f0       	breq	.+2      	; 0x784 <hci_unsol_event_handler+0x15c>
     782:	79 c1       	rjmp	.+754    	; 0xa76 <__stack+0x177>
     784:	2b c0       	rjmp	.+86     	; 0x7dc <hci_unsol_event_handler+0x1b4>
     786:	a4 e8       	ldi	r26, 0x84	; 132
     788:	20 30       	cpi	r18, 0x00	; 0
     78a:	3a 07       	cpc	r19, r26
     78c:	b1 f0       	breq	.+44     	; 0x7ba <hci_unsol_event_handler+0x192>
     78e:	b4 e8       	ldi	r27, 0x84	; 132
     790:	21 30       	cpi	r18, 0x01	; 1
     792:	3b 07       	cpc	r19, r27
     794:	48 f4       	brcc	.+18     	; 0x7a8 <hci_unsol_event_handler+0x180>
     796:	e0 e8       	ldi	r30, 0x80	; 128
     798:	20 38       	cpi	r18, 0x80	; 128
     79a:	3e 07       	cpc	r19, r30
     79c:	71 f0       	breq	.+28     	; 0x7ba <hci_unsol_event_handler+0x192>
     79e:	20 50       	subi	r18, 0x00	; 0
     7a0:	32 48       	sbci	r19, 0x82	; 130
     7a2:	09 f0       	breq	.+2      	; 0x7a6 <hci_unsol_event_handler+0x17e>
     7a4:	68 c1       	rjmp	.+720    	; 0xa76 <__stack+0x177>
     7a6:	09 c0       	rjmp	.+18     	; 0x7ba <hci_unsol_event_handler+0x192>
     7a8:	88 e8       	ldi	r24, 0x88	; 136
     7aa:	20 30       	cpi	r18, 0x00	; 0
     7ac:	38 07       	cpc	r19, r24
     7ae:	09 f4       	brne	.+2      	; 0x7b2 <hci_unsol_event_handler+0x18a>
     7b0:	ad c0       	rjmp	.+346    	; 0x90c <__stack+0xd>
     7b2:	20 50       	subi	r18, 0x00	; 0
     7b4:	39 48       	sbci	r19, 0x89	; 137
     7b6:	09 f0       	breq	.+2      	; 0x7ba <hci_unsol_event_handler+0x192>
     7b8:	5e c1       	rjmp	.+700    	; 0xa76 <__stack+0x177>
		case HCI_EVNT_WLAN_UNSOL_CONNECT:
		case HCI_EVNT_WLAN_UNSOL_DISCONNECT:
		case HCI_EVNT_WLAN_UNSOL_INIT:
		case HCI_EVNT_WLAN_ASYNC_SIMPLE_CONFIG_DONE:

			if( tSLInformation.sWlanCB )
     7ba:	80 91 48 03 	lds	r24, 0x0348
     7be:	90 91 49 03 	lds	r25, 0x0349
     7c2:	89 2b       	or	r24, r25
     7c4:	09 f4       	brne	.+2      	; 0x7c8 <hci_unsol_event_handler+0x1a0>
     7c6:	5b c0       	rjmp	.+182    	; 0x87e <hci_unsol_event_handler+0x256>
			{
				tSLInformation.sWlanCB(event_type, 0, 0);
     7c8:	e0 91 48 03 	lds	r30, 0x0348
     7cc:	f0 91 49 03 	lds	r31, 0x0349
     7d0:	c7 01       	movw	r24, r14
     7d2:	b6 01       	movw	r22, r12
     7d4:	40 e0       	ldi	r20, 0x00	; 0
     7d6:	50 e0       	ldi	r21, 0x00	; 0
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	50 c0       	rjmp	.+160    	; 0x87c <hci_unsol_event_handler+0x254>
		case HCI_EVNT_WLAN_UNSOL_DHCP:
			{
				UINT8	params[NETAPP_IPCONFIG_MAC_OFFSET + 1];	// extra byte is for the status
				UINT8 *recParams = params;

				data = (CHAR*)(event_hdr) + HCI_EVENT_HEADER_SIZE;
     7dc:	f8 01       	movw	r30, r16
     7de:	35 96       	adiw	r30, 0x05	; 5

				//Read IP address
				STREAM_TO_STREAM(data,recParams,NETAPP_IPCONFIG_IP_LENGTH);
     7e0:	d8 01       	movw	r26, r16
     7e2:	15 96       	adiw	r26, 0x05	; 5
     7e4:	8c 91       	ld	r24, X
     7e6:	15 97       	sbiw	r26, 0x05	; 5
     7e8:	8d 8b       	std	Y+21, r24	; 0x15
     7ea:	81 81       	ldd	r24, Z+1	; 0x01
     7ec:	8e 8b       	std	Y+22, r24	; 0x16
     7ee:	82 81       	ldd	r24, Z+2	; 0x02
     7f0:	8f 8b       	std	Y+23, r24	; 0x17
     7f2:	83 81       	ldd	r24, Z+3	; 0x03
     7f4:	88 8f       	std	Y+24, r24	; 0x18
				data += 4;
     7f6:	f8 01       	movw	r30, r16
     7f8:	39 96       	adiw	r30, 0x09	; 9
				localIP[1] = *(recParams-NETAPP_IPCONFIG_IP_LENGTH + 1);
				localIP[2] = *(recParams-NETAPP_IPCONFIG_IP_LENGTH + 2);
				localIP[3] = *(recParams-NETAPP_IPCONFIG_IP_LENGTH + 3);
#endif
				//Read subnet
				STREAM_TO_STREAM(data,recParams,NETAPP_IPCONFIG_IP_LENGTH);
     7fa:	19 96       	adiw	r26, 0x09	; 9
     7fc:	8c 91       	ld	r24, X
     7fe:	19 97       	sbiw	r26, 0x09	; 9
     800:	89 8f       	std	Y+25, r24	; 0x19
     802:	81 81       	ldd	r24, Z+1	; 0x01
     804:	8a 8f       	std	Y+26, r24	; 0x1a
     806:	82 81       	ldd	r24, Z+2	; 0x02
     808:	8b 8f       	std	Y+27, r24	; 0x1b
     80a:	83 81       	ldd	r24, Z+3	; 0x03
     80c:	8c 8f       	std	Y+28, r24	; 0x1c
				data += 4;
     80e:	f8 01       	movw	r30, r16
     810:	3d 96       	adiw	r30, 0x0d	; 13
				//Read default GW
				STREAM_TO_STREAM(data,recParams,NETAPP_IPCONFIG_IP_LENGTH); 
     812:	1d 96       	adiw	r26, 0x0d	; 13
     814:	8c 91       	ld	r24, X
     816:	1d 97       	sbiw	r26, 0x0d	; 13
     818:	8d 8f       	std	Y+29, r24	; 0x1d
     81a:	81 81       	ldd	r24, Z+1	; 0x01
     81c:	8e 8f       	std	Y+30, r24	; 0x1e
     81e:	82 81       	ldd	r24, Z+2	; 0x02
     820:	8f 8f       	std	Y+31, r24	; 0x1f
     822:	83 81       	ldd	r24, Z+3	; 0x03
     824:	88 a3       	std	Y+32, r24	; 0x20
				data += 4;
     826:	f8 01       	movw	r30, r16
     828:	71 96       	adiw	r30, 0x11	; 17
				//Read DHCP server  
				STREAM_TO_STREAM(data,recParams,NETAPP_IPCONFIG_IP_LENGTH);     
     82a:	51 96       	adiw	r26, 0x11	; 17
     82c:	8c 91       	ld	r24, X
     82e:	51 97       	sbiw	r26, 0x11	; 17
     830:	89 a3       	std	Y+33, r24	; 0x21
     832:	81 81       	ldd	r24, Z+1	; 0x01
     834:	8a a3       	std	Y+34, r24	; 0x22
     836:	82 81       	ldd	r24, Z+2	; 0x02
     838:	8b a3       	std	Y+35, r24	; 0x23
     83a:	83 81       	ldd	r24, Z+3	; 0x03
     83c:	8c a3       	std	Y+36, r24	; 0x24
				data += 4;
				//Read DNS server  
				STREAM_TO_STREAM(data,recParams,NETAPP_IPCONFIG_IP_LENGTH); 
     83e:	f8 01       	movw	r30, r16
     840:	75 96       	adiw	r30, 0x15	; 21
     842:	55 96       	adiw	r26, 0x15	; 21
     844:	8c 91       	ld	r24, X
     846:	55 97       	sbiw	r26, 0x15	; 21
     848:	8d a3       	std	Y+37, r24	; 0x25
     84a:	81 81       	ldd	r24, Z+1	; 0x01
     84c:	8e a3       	std	Y+38, r24	; 0x26
     84e:	82 81       	ldd	r24, Z+2	; 0x02
     850:	8f a3       	std	Y+39, r24	; 0x27
     852:	83 81       	ldd	r24, Z+3	; 0x03
     854:	88 a7       	std	Y+40, r24	; 0x28
				// read the status
				STREAM_TO_UINT8(event_hdr, HCI_EVENT_STATUS_OFFSET, *recParams);
     856:	14 96       	adiw	r26, 0x04	; 4
     858:	8c 91       	ld	r24, X
     85a:	89 a7       	std	Y+41, r24	; 0x29


				if( tSLInformation.sWlanCB )
     85c:	80 91 48 03 	lds	r24, 0x0348
     860:	90 91 49 03 	lds	r25, 0x0349
     864:	89 2b       	or	r24, r25
     866:	59 f0       	breq	.+22     	; 0x87e <hci_unsol_event_handler+0x256>
				{
					tSLInformation.sWlanCB(event_type, (CHAR *)params, sizeof(params));
     868:	e0 91 48 03 	lds	r30, 0x0348
     86c:	f0 91 49 03 	lds	r31, 0x0349
     870:	c7 01       	movw	r24, r14
     872:	b6 01       	movw	r22, r12
     874:	ae 01       	movw	r20, r28
     876:	4b 5e       	subi	r20, 0xEB	; 235
     878:	5f 4f       	sbci	r21, 0xFF	; 255
     87a:	25 e1       	ldi	r18, 0x15	; 21
     87c:	09 95       	icall
     87e:	21 e0       	ldi	r18, 0x01	; 1
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	fb c0       	rjmp	.+502    	; 0xa7e <__stack+0x17f>
			break;

		case HCI_EVNT_WLAN_ASYNC_PING_REPORT:
			{
				netapp_pingreport_args_t params;			
				data = (CHAR*)(event_hdr) + HCI_EVENT_HEADER_SIZE;			
     888:	0b 5f       	subi	r16, 0xFB	; 251
     88a:	1f 4f       	sbci	r17, 0xFF	; 255
				STREAM_TO_UINT32(data, NETAPP_PING_PACKETS_SENT_OFFSET, params.packets_sent);			
     88c:	c8 01       	movw	r24, r16
     88e:	60 e0       	ldi	r22, 0x00	; 0
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	0e 94 57 02 	call	0x4ae	; 0x4ae <STREAM_TO_UINT32_f>
     896:	69 83       	std	Y+1, r22	; 0x01
     898:	7a 83       	std	Y+2, r23	; 0x02
     89a:	8b 83       	std	Y+3, r24	; 0x03
     89c:	9c 83       	std	Y+4, r25	; 0x04
				STREAM_TO_UINT32(data, NETAPP_PING_PACKETS_RCVD_OFFSET, params.packets_received);			
     89e:	c8 01       	movw	r24, r16
     8a0:	64 e0       	ldi	r22, 0x04	; 4
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	0e 94 57 02 	call	0x4ae	; 0x4ae <STREAM_TO_UINT32_f>
     8a8:	6d 83       	std	Y+5, r22	; 0x05
     8aa:	7e 83       	std	Y+6, r23	; 0x06
     8ac:	8f 83       	std	Y+7, r24	; 0x07
     8ae:	98 87       	std	Y+8, r25	; 0x08
				STREAM_TO_UINT32(data, NETAPP_PING_MIN_RTT_OFFSET, params.min_round_time);		
     8b0:	c8 01       	movw	r24, r16
     8b2:	68 e0       	ldi	r22, 0x08	; 8
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	0e 94 57 02 	call	0x4ae	; 0x4ae <STREAM_TO_UINT32_f>
     8ba:	69 87       	std	Y+9, r22	; 0x09
     8bc:	7a 87       	std	Y+10, r23	; 0x0a
     8be:	8b 87       	std	Y+11, r24	; 0x0b
     8c0:	9c 87       	std	Y+12, r25	; 0x0c
				STREAM_TO_UINT32(data, NETAPP_PING_MAX_RTT_OFFSET, params.max_round_time);	
     8c2:	c8 01       	movw	r24, r16
     8c4:	6c e0       	ldi	r22, 0x0C	; 12
     8c6:	70 e0       	ldi	r23, 0x00	; 0
     8c8:	0e 94 57 02 	call	0x4ae	; 0x4ae <STREAM_TO_UINT32_f>
     8cc:	6d 87       	std	Y+13, r22	; 0x0d
     8ce:	7e 87       	std	Y+14, r23	; 0x0e
     8d0:	8f 87       	std	Y+15, r24	; 0x0f
     8d2:	98 8b       	std	Y+16, r25	; 0x10
				STREAM_TO_UINT32(data, NETAPP_PING_AVG_RTT_OFFSET, params.avg_round_time);
     8d4:	c8 01       	movw	r24, r16
     8d6:	60 e1       	ldi	r22, 0x10	; 16
     8d8:	70 e0       	ldi	r23, 0x00	; 0
     8da:	0e 94 57 02 	call	0x4ae	; 0x4ae <STREAM_TO_UINT32_f>
     8de:	9b 01       	movw	r18, r22
     8e0:	ac 01       	movw	r20, r24

				if( tSLInformation.sWlanCB )
     8e2:	80 91 48 03 	lds	r24, 0x0348
     8e6:	90 91 49 03 	lds	r25, 0x0349
     8ea:	89 2b       	or	r24, r25
     8ec:	41 f2       	breq	.-112    	; 0x87e <hci_unsol_event_handler+0x256>
				{
					tSLInformation.sWlanCB(event_type, (CHAR *)&params, sizeof(params));
     8ee:	e0 91 48 03 	lds	r30, 0x0348
     8f2:	f0 91 49 03 	lds	r31, 0x0349
				data = (CHAR*)(event_hdr) + HCI_EVENT_HEADER_SIZE;			
				STREAM_TO_UINT32(data, NETAPP_PING_PACKETS_SENT_OFFSET, params.packets_sent);			
				STREAM_TO_UINT32(data, NETAPP_PING_PACKETS_RCVD_OFFSET, params.packets_received);			
				STREAM_TO_UINT32(data, NETAPP_PING_MIN_RTT_OFFSET, params.min_round_time);		
				STREAM_TO_UINT32(data, NETAPP_PING_MAX_RTT_OFFSET, params.max_round_time);	
				STREAM_TO_UINT32(data, NETAPP_PING_AVG_RTT_OFFSET, params.avg_round_time);
     8f6:	29 8b       	std	Y+17, r18	; 0x11
     8f8:	3a 8b       	std	Y+18, r19	; 0x12
     8fa:	4b 8b       	std	Y+19, r20	; 0x13
     8fc:	5c 8b       	std	Y+20, r21	; 0x14

				if( tSLInformation.sWlanCB )
				{
					tSLInformation.sWlanCB(event_type, (CHAR *)&params, sizeof(params));
     8fe:	c7 01       	movw	r24, r14
     900:	b6 01       	movw	r22, r12
     902:	ae 01       	movw	r20, r28
     904:	4f 5f       	subi	r20, 0xFF	; 255
     906:	5f 4f       	sbci	r21, 0xFF	; 255
     908:	24 e1       	ldi	r18, 0x14	; 20
     90a:	b8 cf       	rjmp	.-144    	; 0x87c <hci_unsol_event_handler+0x254>
			  // Adafruit CC3k Host Driver Difference
			  // Extra debug output.
			  // Noted 12-12-2014 by tdicola
			  DEBUGPRINT_F("\tTCP Close Wait\n\r");
			  data = (CHAR*)(event_hdr) + HCI_EVENT_HEADER_SIZE;
			  if( tSLInformation.sWlanCB )
     90c:	80 91 48 03 	lds	r24, 0x0348
     910:	90 91 49 03 	lds	r25, 0x0349
     914:	89 2b       	or	r24, r25
     916:	09 f4       	brne	.+2      	; 0x91a <__stack+0x1b>
     918:	b2 cf       	rjmp	.-156    	; 0x87e <hci_unsol_event_handler+0x256>
			    {
				  //data[0] represents the socket id, for which FIN was received by remote.
				  //Upon receiving this event, the user can close the socket, or else the 
				  //socket will be closded after inacvitity timeout (by default 60 seconds)
			      tSLInformation.sWlanCB(event_type, data, 1);
     91a:	e0 91 48 03 	lds	r30, 0x0348
     91e:	f0 91 49 03 	lds	r31, 0x0349
     922:	0b 5f       	subi	r16, 0xFB	; 251
     924:	1f 4f       	sbci	r17, 0xFF	; 255
     926:	c7 01       	movw	r24, r14
     928:	b6 01       	movw	r22, r12
     92a:	a8 01       	movw	r20, r16
     92c:	21 e0       	ldi	r18, 0x01	; 1
     92e:	a6 cf       	rjmp	.-180    	; 0x87c <hci_unsol_event_handler+0x254>
			return (0);
		}
		return(1);
	}

	if ((event_type == HCI_EVNT_SEND) || (event_type == HCI_EVNT_SENDTO)
     930:	b3 e0       	ldi	r27, 0x03	; 3
     932:	cb 16       	cp	r12, r27
     934:	b0 e1       	ldi	r27, 0x10	; 16
     936:	db 06       	cpc	r13, r27
     938:	b0 e0       	ldi	r27, 0x00	; 0
     93a:	eb 06       	cpc	r14, r27
     93c:	b0 e0       	ldi	r27, 0x00	; 0
     93e:	fb 06       	cpc	r15, r27
     940:	99 f0       	breq	.+38     	; 0x968 <__stack+0x69>
     942:	ef e0       	ldi	r30, 0x0F	; 15
     944:	ce 16       	cp	r12, r30
     946:	e0 e1       	ldi	r30, 0x10	; 16
     948:	de 06       	cpc	r13, r30
     94a:	e0 e0       	ldi	r30, 0x00	; 0
     94c:	ee 06       	cpc	r14, r30
     94e:	e0 e0       	ldi	r30, 0x00	; 0
     950:	fe 06       	cpc	r15, r30
     952:	51 f0       	breq	.+20     	; 0x968 <__stack+0x69>
     954:	fe e0       	ldi	r31, 0x0E	; 14
     956:	cf 16       	cp	r12, r31
     958:	f0 e1       	ldi	r31, 0x10	; 16
     95a:	df 06       	cpc	r13, r31
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	ef 06       	cpc	r14, r31
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	ff 06       	cpc	r15, r31
     964:	09 f0       	breq	.+2      	; 0x968 <__stack+0x69>
     966:	6a c0       	rjmp	.+212    	; 0xa3c <__stack+0x13d>
		// Adafruit CC3k Host Driver Difference
		// Extra debug output.
		// Noted 12-12-2014 by tdicola
		DEBUGPRINT_F("\tSEND event response\n\r");

                pArg = M_BSD_RESP_PARAMS_OFFSET(event_hdr);
     968:	85 e0       	ldi	r24, 0x05	; 5
     96a:	c8 2e       	mov	r12, r24
     96c:	d1 2c       	mov	r13, r1
     96e:	c0 0e       	add	r12, r16
     970:	d1 1e       	adc	r13, r17
                STREAM_TO_UINT32(pArg, BSD_RSP_PARAMS_STATUS_OFFSET,status);
     972:	c6 01       	movw	r24, r12
     974:	64 e0       	ldi	r22, 0x04	; 4
     976:	70 e0       	ldi	r23, 0x00	; 0
     978:	0e 94 57 02 	call	0x4ae	; 0x4ae <STREAM_TO_UINT32_f>

                if (ERROR_SOCKET_INACTIVE == status)
     97c:	67 5c       	subi	r22, 0xC7	; 199
     97e:	7f 4f       	sbci	r23, 0xFF	; 255
     980:	8f 4f       	sbci	r24, 0xFF	; 255
     982:	9f 4f       	sbci	r25, 0xFF	; 255
     984:	09 f0       	breq	.+2      	; 0x988 <__stack+0x89>
     986:	77 c0       	rjmp	.+238    	; 0xa76 <__stack+0x177>
                {
                    // The only synchronous event that can come from SL device in form of
                    // command complete is "Command Complete" on data sent, in case SL device
                    // was unable to transmit
                    STREAM_TO_UINT8(event_hdr, HCI_EVENT_STATUS_OFFSET, tSLInformation.slTransmitDataError);
     988:	d8 01       	movw	r26, r16
     98a:	14 96       	adiw	r26, 0x04	; 4
     98c:	8c 91       	ld	r24, X
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	a0 e0       	ldi	r26, 0x00	; 0
     992:	b0 e0       	ldi	r27, 0x00	; 0
     994:	80 93 52 03 	sts	0x0352, r24
     998:	90 93 53 03 	sts	0x0353, r25
     99c:	a0 93 54 03 	sts	0x0354, r26
     9a0:	b0 93 55 03 	sts	0x0355, r27
//*****************************************************************************
void update_socket_active_status(CHAR *resp_params)
{
	INT32 status, sd;

	STREAM_TO_UINT32(resp_params, BSD_RSP_PARAMS_SOCKET_OFFSET,sd);
     9a4:	c6 01       	movw	r24, r12
     9a6:	60 e0       	ldi	r22, 0x00	; 0
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	0e 94 57 02 	call	0x4ae	; 0x4ae <STREAM_TO_UINT32_f>
     9ae:	7b 01       	movw	r14, r22
     9b0:	8c 01       	movw	r16, r24
	STREAM_TO_UINT32(resp_params, BSD_RSP_PARAMS_STATUS_OFFSET,status);
     9b2:	c6 01       	movw	r24, r12
     9b4:	64 e0       	ldi	r22, 0x04	; 4
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	0e 94 57 02 	call	0x4ae	; 0x4ae <STREAM_TO_UINT32_f>

	if(ERROR_SOCKET_INACTIVE == status)
     9bc:	67 5c       	subi	r22, 0xC7	; 199
     9be:	7f 4f       	sbci	r23, 0xFF	; 255
     9c0:	8f 4f       	sbci	r24, 0xFF	; 255
     9c2:	9f 4f       	sbci	r25, 0xFF	; 255
     9c4:	09 f0       	breq	.+2      	; 0x9c8 <__stack+0xc9>
     9c6:	5b cf       	rjmp	.-330    	; 0x87e <hci_unsol_event_handler+0x256>
//!                  accordingly  the global socket status
//
//*****************************************************************************
void set_socket_active_status(INT32 Sd, INT32 Status)
{
	if(M_IS_VALID_SD(Sd) && M_IS_VALID_STATUS(Status))
     9c8:	e8 e0       	ldi	r30, 0x08	; 8
     9ca:	ee 16       	cp	r14, r30
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	08 f0       	brcs	.+2      	; 0x9d6 <__stack+0xd7>
     9d4:	54 cf       	rjmp	.-344    	; 0x87e <hci_unsol_event_handler+0x256>
	{
		socket_active_status &= ~(1 << Sd);      /* clean socket's mask */
		socket_active_status |= (Status << Sd); /* set new socket's mask */
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	0e 2c       	mov	r0, r14
     9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <__stack+0xe3>
     9de:	88 0f       	add	r24, r24
     9e0:	99 1f       	adc	r25, r25
     9e2:	0a 94       	dec	r0
     9e4:	e2 f7       	brpl	.-8      	; 0x9de <__stack+0xdf>
     9e6:	80 95       	com	r24
     9e8:	90 95       	com	r25
     9ea:	aa 27       	eor	r26, r26
     9ec:	97 fd       	sbrc	r25, 7
     9ee:	a0 95       	com	r26
     9f0:	ba 2f       	mov	r27, r26
     9f2:	20 91 7e 02 	lds	r18, 0x027E
     9f6:	30 91 7f 02 	lds	r19, 0x027F
     9fa:	40 91 80 02 	lds	r20, 0x0280
     9fe:	50 91 81 02 	lds	r21, 0x0281
     a02:	82 23       	and	r24, r18
     a04:	93 23       	and	r25, r19
     a06:	a4 23       	and	r26, r20
     a08:	b5 23       	and	r27, r21
     a0a:	21 e0       	ldi	r18, 0x01	; 1
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	50 e0       	ldi	r21, 0x00	; 0
     a12:	0e 2c       	mov	r0, r14
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__stack+0x11f>
     a16:	22 0f       	add	r18, r18
     a18:	33 1f       	adc	r19, r19
     a1a:	44 1f       	adc	r20, r20
     a1c:	55 1f       	adc	r21, r21
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__stack+0x117>
     a22:	82 2b       	or	r24, r18
     a24:	93 2b       	or	r25, r19
     a26:	a4 2b       	or	r26, r20
     a28:	b5 2b       	or	r27, r21
     a2a:	80 93 7e 02 	sts	0x027E, r24
     a2e:	90 93 7f 02 	sts	0x027F, r25
     a32:	a0 93 80 02 	sts	0x0280, r26
     a36:	b0 93 81 02 	sts	0x0281, r27
     a3a:	21 cf       	rjmp	.-446    	; 0x87e <hci_unsol_event_handler+0x256>
                else
                    return (0);
	}

	//handle a case where unsolicited event arrived, but was not handled by any of the cases above
	if ((event_type != tSLInformation.usRxEventOpcode) && (event_type != HCI_EVNT_PATCHES_REQ))
     a3c:	80 91 3a 03 	lds	r24, 0x033A
     a40:	90 91 3b 03 	lds	r25, 0x033B
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	c8 16       	cp	r12, r24
     a4a:	d9 06       	cpc	r13, r25
     a4c:	ea 06       	cpc	r14, r26
     a4e:	fb 06       	cpc	r15, r27
     a50:	91 f0       	breq	.+36     	; 0xa76 <__stack+0x177>
     a52:	60 e0       	ldi	r22, 0x00	; 0
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	cf 16       	cp	r12, r31
     a58:	f0 e1       	ldi	r31, 0x10	; 16
     a5a:	df 06       	cpc	r13, r31
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	ef 06       	cpc	r14, r31
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	ff 06       	cpc	r15, r31
     a64:	09 f4       	brne	.+2      	; 0xa68 <__stack+0x169>
     a66:	61 e0       	ldi	r22, 0x01	; 1
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	68 27       	eor	r22, r24
     a6c:	26 2f       	mov	r18, r22
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__stack+0x17f>
     a76:	20 e0       	ldi	r18, 0x00	; 0
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	40 e0       	ldi	r20, 0x00	; 0
     a7c:	50 e0       	ldi	r21, 0x00	; 0
	{
		return(1);
	}

	return(0);
}
     a7e:	b9 01       	movw	r22, r18
     a80:	ca 01       	movw	r24, r20
     a82:	a9 96       	adiw	r28, 0x29	; 41
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	f8 94       	cli
     a88:	de bf       	out	0x3e, r29	; 62
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	cd bf       	out	0x3d, r28	; 61
     a8e:	cf 91       	pop	r28
     a90:	df 91       	pop	r29
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	df 90       	pop	r13
     a9c:	cf 90       	pop	r12
     a9e:	bf 90       	pop	r11
     aa0:	af 90       	pop	r10
     aa2:	9f 90       	pop	r9
     aa4:	8f 90       	pop	r8
     aa6:	08 95       	ret

00000aa8 <hci_unsolicited_event_handler>:
INT32 hci_unsolicited_event_handler(void)
{
	UINT32   res = 0;
	UINT8 *pucReceivedData;

	if (tSLInformation.usEventOrDataReceived != 0)
     aa8:	80 91 3c 03 	lds	r24, 0x033C
     aac:	90 91 3d 03 	lds	r25, 0x033D
     ab0:	89 2b       	or	r24, r25
     ab2:	d1 f0       	breq	.+52     	; 0xae8 <hci_unsolicited_event_handler+0x40>
	{
		pucReceivedData = (tSLInformation.pucReceivedData);
     ab4:	e0 91 3e 03 	lds	r30, 0x033E
     ab8:	f0 91 3f 03 	lds	r31, 0x033F

		if (*pucReceivedData == HCI_TYPE_EVNT)
     abc:	80 81       	ld	r24, Z
     abe:	84 30       	cpi	r24, 0x04	; 4
     ac0:	99 f4       	brne	.+38     	; 0xae8 <hci_unsolicited_event_handler+0x40>
		{			

			// In case unsolicited event received - here the handling finished
			if (hci_unsol_event_handler((CHAR *)pucReceivedData) == 1)
     ac2:	cf 01       	movw	r24, r30
     ac4:	0e 94 14 03 	call	0x628	; 0x628 <hci_unsol_event_handler>
     ac8:	61 30       	cpi	r22, 0x01	; 1
     aca:	71 05       	cpc	r23, r1
     acc:	81 05       	cpc	r24, r1
     ace:	91 05       	cpc	r25, r1
     ad0:	59 f4       	brne	.+22     	; 0xae8 <hci_unsolicited_event_handler+0x40>
			{

				// There was an unsolicited event received - we can release the buffer
				// and clean the event received 
				tSLInformation.usEventOrDataReceived = 0;
     ad2:	10 92 3d 03 	sts	0x033D, r1
     ad6:	10 92 3c 03 	sts	0x033C, r1

				res = 1;
				SpiResumeSpi();
     ada:	0e 94 45 22 	call	0x448a	; 0x448a <_Z12SpiResumeSpiv>
     ade:	21 e0       	ldi	r18, 0x01	; 1
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	40 e0       	ldi	r20, 0x00	; 0
     ae4:	50 e0       	ldi	r21, 0x00	; 0
     ae6:	04 c0       	rjmp	.+8      	; 0xaf0 <hci_unsolicited_event_handler+0x48>
     ae8:	20 e0       	ldi	r18, 0x00	; 0
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	40 e0       	ldi	r20, 0x00	; 0
     aee:	50 e0       	ldi	r21, 0x00	; 0
			}
		}
	}

	return res;
}
     af0:	b9 01       	movw	r22, r18
     af2:	ca 01       	movw	r24, r20
     af4:	08 95       	ret

00000af6 <_Z30hci_unsol_handle_patch_requestPc>:
//!  @return none
//!
//!  @brief   Handle unsolicited event from type patch request
//
//*****************************************************************************
void hci_unsol_handle_patch_request(CHAR *event_hdr)
     af6:	df 93       	push	r29
     af8:	cf 93       	push	r28
     afa:	00 d0       	rcall	.+0      	; 0xafc <_Z30hci_unsol_handle_patch_requestPc+0x6>
     afc:	00 d0       	rcall	.+0      	; 0xafe <_Z30hci_unsol_handle_patch_requestPc+0x8>
     afe:	cd b7       	in	r28, 0x3d	; 61
     b00:	de b7       	in	r29, 0x3e	; 62
{
	CHAR *params = (CHAR *)(event_hdr) + HCI_EVENT_HEADER_SIZE;
	UINT32 ucLength = 0;
     b02:	19 82       	std	Y+1, r1	; 0x01
     b04:	1a 82       	std	Y+2, r1	; 0x02
     b06:	1b 82       	std	Y+3, r1	; 0x03
     b08:	1c 82       	std	Y+4, r1	; 0x04
	CHAR *patch;

	switch (*params)
     b0a:	fc 01       	movw	r30, r24
     b0c:	85 81       	ldd	r24, Z+5	; 0x05
     b0e:	82 30       	cpi	r24, 0x02	; 2
     b10:	21 f1       	breq	.+72     	; 0xb5a <_Z30hci_unsol_handle_patch_requestPc+0x64>
     b12:	83 30       	cpi	r24, 0x03	; 3
     b14:	09 f4       	brne	.+2      	; 0xb18 <_Z30hci_unsol_handle_patch_requestPc+0x22>
     b16:	3f c0       	rjmp	.+126    	; 0xb96 <_Z30hci_unsol_handle_patch_requestPc+0xa0>
     b18:	81 30       	cpi	r24, 0x01	; 1
     b1a:	09 f0       	breq	.+2      	; 0xb1e <_Z30hci_unsol_handle_patch_requestPc+0x28>
     b1c:	5f c0       	rjmp	.+190    	; 0xbdc <_Z30hci_unsol_handle_patch_requestPc+0xe6>
	{
	case HCI_EVENT_PATCHES_DRV_REQ:

		if (tSLInformation.sDriverPatches)
     b1e:	80 91 44 03 	lds	r24, 0x0344
     b22:	90 91 45 03 	lds	r25, 0x0345
     b26:	89 2b       	or	r24, r25
     b28:	91 f0       	breq	.+36     	; 0xb4e <_Z30hci_unsol_handle_patch_requestPc+0x58>
		{
			patch = tSLInformation.sDriverPatches(&ucLength);
     b2a:	e0 91 44 03 	lds	r30, 0x0344
     b2e:	f0 91 45 03 	lds	r31, 0x0345
     b32:	ce 01       	movw	r24, r28
     b34:	01 96       	adiw	r24, 0x01	; 1
     b36:	09 95       	icall
     b38:	ac 01       	movw	r20, r24

			if (patch)
     b3a:	00 97       	sbiw	r24, 0x00	; 0
     b3c:	41 f0       	breq	.+16     	; 0xb4e <_Z30hci_unsol_handle_patch_requestPc+0x58>
			{
				hci_patch_send(HCI_EVENT_PATCHES_DRV_REQ, 
					tSLInformation.pucTxCommandBuffer, patch, ucLength);
     b3e:	60 91 40 03 	lds	r22, 0x0340
     b42:	70 91 41 03 	lds	r23, 0x0341
     b46:	29 81       	ldd	r18, Y+1	; 0x01
     b48:	3a 81       	ldd	r19, Y+2	; 0x02
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	45 c0       	rjmp	.+138    	; 0xbd8 <_Z30hci_unsol_handle_patch_requestPc+0xe2>
			}
		}

		// Send 0 length Patches response event
		hci_patch_send(HCI_EVENT_PATCHES_DRV_REQ, 
			tSLInformation.pucTxCommandBuffer, 0, 0);
     b4e:	60 91 40 03 	lds	r22, 0x0340
     b52:	70 91 41 03 	lds	r23, 0x0341
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	3b c0       	rjmp	.+118    	; 0xbd0 <_Z30hci_unsol_handle_patch_requestPc+0xda>
		break;

	case HCI_EVENT_PATCHES_FW_REQ:

		if (tSLInformation.sFWPatches)
     b5a:	80 91 42 03 	lds	r24, 0x0342
     b5e:	90 91 43 03 	lds	r25, 0x0343
     b62:	89 2b       	or	r24, r25
     b64:	91 f0       	breq	.+36     	; 0xb8a <_Z30hci_unsol_handle_patch_requestPc+0x94>
		{
			patch = tSLInformation.sFWPatches(&ucLength);
     b66:	e0 91 42 03 	lds	r30, 0x0342
     b6a:	f0 91 43 03 	lds	r31, 0x0343
     b6e:	ce 01       	movw	r24, r28
     b70:	01 96       	adiw	r24, 0x01	; 1
     b72:	09 95       	icall
     b74:	ac 01       	movw	r20, r24

			// Build and send a patch
			if (patch)
     b76:	00 97       	sbiw	r24, 0x00	; 0
     b78:	41 f0       	breq	.+16     	; 0xb8a <_Z30hci_unsol_handle_patch_requestPc+0x94>
			{
				hci_patch_send(HCI_EVENT_PATCHES_FW_REQ, 
					tSLInformation.pucTxCommandBuffer, patch, ucLength);
     b7a:	60 91 40 03 	lds	r22, 0x0340
     b7e:	70 91 41 03 	lds	r23, 0x0341
     b82:	29 81       	ldd	r18, Y+1	; 0x01
     b84:	3a 81       	ldd	r19, Y+2	; 0x02
     b86:	82 e0       	ldi	r24, 0x02	; 2
     b88:	27 c0       	rjmp	.+78     	; 0xbd8 <_Z30hci_unsol_handle_patch_requestPc+0xe2>
			}
		}

		// Send 0 length Patches response event
		hci_patch_send(HCI_EVENT_PATCHES_FW_REQ, 
			tSLInformation.pucTxCommandBuffer, 0, 0);
     b8a:	60 91 40 03 	lds	r22, 0x0340
     b8e:	70 91 41 03 	lds	r23, 0x0341
     b92:	82 e0       	ldi	r24, 0x02	; 2
     b94:	1d c0       	rjmp	.+58     	; 0xbd0 <_Z30hci_unsol_handle_patch_requestPc+0xda>
		break;

	case HCI_EVENT_PATCHES_BOOTLOAD_REQ:

		if (tSLInformation.sBootLoaderPatches)
     b96:	80 91 46 03 	lds	r24, 0x0346
     b9a:	90 91 47 03 	lds	r25, 0x0347
     b9e:	89 2b       	or	r24, r25
     ba0:	91 f0       	breq	.+36     	; 0xbc6 <_Z30hci_unsol_handle_patch_requestPc+0xd0>
		{
			patch = tSLInformation.sBootLoaderPatches(&ucLength);
     ba2:	e0 91 46 03 	lds	r30, 0x0346
     ba6:	f0 91 47 03 	lds	r31, 0x0347
     baa:	ce 01       	movw	r24, r28
     bac:	01 96       	adiw	r24, 0x01	; 1
     bae:	09 95       	icall
     bb0:	ac 01       	movw	r20, r24

			if (patch)
     bb2:	00 97       	sbiw	r24, 0x00	; 0
     bb4:	41 f0       	breq	.+16     	; 0xbc6 <_Z30hci_unsol_handle_patch_requestPc+0xd0>
			{
				hci_patch_send(HCI_EVENT_PATCHES_BOOTLOAD_REQ,  
					tSLInformation.pucTxCommandBuffer, patch, ucLength);
     bb6:	60 91 40 03 	lds	r22, 0x0340
     bba:	70 91 41 03 	lds	r23, 0x0341
     bbe:	29 81       	ldd	r18, Y+1	; 0x01
     bc0:	3a 81       	ldd	r19, Y+2	; 0x02
     bc2:	83 e0       	ldi	r24, 0x03	; 3
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <_Z30hci_unsol_handle_patch_requestPc+0xe2>
			}
		}

		// Send 0 length Patches response event
		hci_patch_send(HCI_EVENT_PATCHES_BOOTLOAD_REQ, 
			tSLInformation.pucTxCommandBuffer, 0, 0);
     bc6:	60 91 40 03 	lds	r22, 0x0340
     bca:	70 91 41 03 	lds	r23, 0x0341
     bce:	83 e0       	ldi	r24, 0x03	; 3
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	0e 94 9a 09 	call	0x1334	; 0x1334 <hci_patch_send>
		break;
	}
}
     bdc:	0f 90       	pop	r0
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	cf 91       	pop	r28
     be6:	df 91       	pop	r29
     be8:	08 95       	ret

00000bea <hci_event_handler>:
//!                  event handler from global array of handlers pointers
//
//*****************************************************************************


UINT8 * hci_event_handler(void *pRetParams, UINT8 *from, UINT8 *fromlen)
     bea:	4f 92       	push	r4
     bec:	5f 92       	push	r5
     bee:	6f 92       	push	r6
     bf0:	7f 92       	push	r7
     bf2:	8f 92       	push	r8
     bf4:	9f 92       	push	r9
     bf6:	af 92       	push	r10
     bf8:	bf 92       	push	r11
     bfa:	cf 92       	push	r12
     bfc:	df 92       	push	r13
     bfe:	ef 92       	push	r14
     c00:	ff 92       	push	r15
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	6c 01       	movw	r12, r24
     c0c:	2b 01       	movw	r4, r22
     c0e:	3a 01       	movw	r6, r20
     c10:	aa 24       	eor	r10, r10
     c12:	bb 24       	eor	r11, r11
	while (1)
	{
		// Adafruit CC3k Host Driver Difference
		// Call cc3k_int_poll to try to keep from missing interrupts.
		// Noted 12-12-2014 by tdicola
		cc3k_int_poll();
     c14:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <cc3k_int_poll>

		if (tSLInformation.usEventOrDataReceived != 0)
     c18:	80 91 3c 03 	lds	r24, 0x033C
     c1c:	90 91 3d 03 	lds	r25, 0x033D
     c20:	89 2b       	or	r24, r25
     c22:	c1 f3       	breq	.-16     	; 0xc14 <hci_event_handler+0x2a>
		{				
			pucReceivedData = (tSLInformation.pucReceivedData);
     c24:	80 90 3e 03 	lds	r8, 0x033E
     c28:	90 90 3f 03 	lds	r9, 0x033F

			if (*pucReceivedData == HCI_TYPE_EVNT)
     c2c:	d4 01       	movw	r26, r8
     c2e:	8c 91       	ld	r24, X
     c30:	84 30       	cpi	r24, 0x04	; 4
     c32:	09 f0       	breq	.+2      	; 0xc36 <hci_event_handler+0x4c>
     c34:	bf c2       	rjmp	.+1406   	; 0x11b4 <hci_event_handler+0x5ca>
			{
				// Event Received
				STREAM_TO_UINT16((CHAR *)pucReceivedData, HCI_EVENT_OPCODE_OFFSET,
     c36:	c4 01       	movw	r24, r8
     c38:	61 e0       	ldi	r22, 0x01	; 1
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	0e 94 4d 02 	call	0x49a	; 0x49a <STREAM_TO_UINT16_f>
     c40:	5c 01       	movw	r10, r24
				// Explicit cast of pRetParams to UINT8* to fix compiler warning.
				// Noted 12-12-2014 by tdicola
				RetParams = (UINT8 *)pRetParams;

				// In case unsolicited event received - here the handling finished
				if (hci_unsol_event_handler((CHAR *)pucReceivedData) == 0)
     c42:	c4 01       	movw	r24, r8
     c44:	0e 94 14 03 	call	0x628	; 0x628 <hci_unsol_event_handler>
     c48:	61 15       	cp	r22, r1
     c4a:	71 05       	cpc	r23, r1
     c4c:	81 05       	cpc	r24, r1
     c4e:	91 05       	cpc	r25, r1
     c50:	09 f0       	breq	.+2      	; 0xc54 <hci_event_handler+0x6a>
     c52:	a4 c2       	rjmp	.+1352   	; 0x119c <hci_event_handler+0x5b2>
			if (*pucReceivedData == HCI_TYPE_EVNT)
			{
				// Event Received
				STREAM_TO_UINT16((CHAR *)pucReceivedData, HCI_EVENT_OPCODE_OFFSET,
					usReceivedEventOpcode);
				pucReceivedParams = pucReceivedData + HCI_EVENT_HEADER_SIZE;		
     c54:	e4 01       	movw	r28, r8
     c56:	25 96       	adiw	r28, 0x05	; 5
				// In case unsolicited event received - here the handling finished
				if (hci_unsol_event_handler((CHAR *)pucReceivedData) == 0)
				{
					STREAM_TO_UINT8(pucReceivedData, HCI_DATA_LENGTH_OFFSET, usLength);

					switch(usReceivedEventOpcode)
     c58:	b8 e0       	ldi	r27, 0x08	; 8
     c5a:	ab 16       	cp	r10, r27
     c5c:	b0 e1       	ldi	r27, 0x10	; 16
     c5e:	bb 06       	cpc	r11, r27
     c60:	08 f0       	brcs	.+2      	; 0xc64 <hci_event_handler+0x7a>
     c62:	56 c0       	rjmp	.+172    	; 0xd10 <hci_event_handler+0x126>
     c64:	e6 e0       	ldi	r30, 0x06	; 6
     c66:	ae 16       	cp	r10, r30
     c68:	e0 e1       	ldi	r30, 0x10	; 16
     c6a:	be 06       	cpc	r11, r30
     c6c:	08 f0       	brcs	.+2      	; 0xc70 <hci_event_handler+0x86>
     c6e:	cc c0       	rjmp	.+408    	; 0xe08 <hci_event_handler+0x21e>
     c70:	f2 e0       	ldi	r31, 0x02	; 2
     c72:	af 16       	cp	r10, r31
     c74:	f2 e0       	ldi	r31, 0x02	; 2
     c76:	bf 06       	cpc	r11, r31
     c78:	09 f4       	brne	.+2      	; 0xc7c <hci_event_handler+0x92>
     c7a:	c6 c0       	rjmp	.+396    	; 0xe08 <hci_event_handler+0x21e>
     c7c:	03 e0       	ldi	r16, 0x03	; 3
     c7e:	a0 16       	cp	r10, r16
     c80:	02 e0       	ldi	r16, 0x02	; 2
     c82:	b0 06       	cpc	r11, r16
     c84:	00 f5       	brcc	.+64     	; 0xcc6 <hci_event_handler+0xdc>
     c86:	1d e0       	ldi	r17, 0x0D	; 13
     c88:	a1 16       	cp	r10, r17
     c8a:	b1 04       	cpc	r11, r1
     c8c:	80 f4       	brcc	.+32     	; 0xcae <hci_event_handler+0xc4>
     c8e:	68 e0       	ldi	r22, 0x08	; 8
     c90:	a6 16       	cp	r10, r22
     c92:	b1 04       	cpc	r11, r1
     c94:	08 f0       	brcs	.+2      	; 0xc98 <hci_event_handler+0xae>
     c96:	b8 c0       	rjmp	.+368    	; 0xe08 <hci_event_handler+0x21e>
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	a8 16       	cp	r10, r24
     c9c:	b1 04       	cpc	r11, r1
     c9e:	08 f4       	brcc	.+2      	; 0xca2 <hci_event_handler+0xb8>
     ca0:	7d c2       	rjmp	.+1274   	; 0x119c <hci_event_handler+0x5b2>
     ca2:	97 e0       	ldi	r25, 0x07	; 7
     ca4:	a9 16       	cp	r10, r25
     ca6:	b1 04       	cpc	r11, r1
     ca8:	08 f4       	brcc	.+2      	; 0xcac <hci_event_handler+0xc2>
     caa:	ae c0       	rjmp	.+348    	; 0xe08 <hci_event_handler+0x21e>
     cac:	d4 c1       	rjmp	.+936    	; 0x1056 <hci_event_handler+0x46c>
     cae:	ad e0       	ldi	r26, 0x0D	; 13
     cb0:	aa 16       	cp	r10, r26
     cb2:	b1 04       	cpc	r11, r1
     cb4:	09 f4       	brne	.+2      	; 0xcb8 <hci_event_handler+0xce>
     cb6:	a3 c0       	rjmp	.+326    	; 0xdfe <hci_event_handler+0x214>
     cb8:	b1 e0       	ldi	r27, 0x01	; 1
     cba:	ab 16       	cp	r10, r27
     cbc:	b2 e0       	ldi	r27, 0x02	; 2
     cbe:	bb 06       	cpc	r11, r27
     cc0:	09 f0       	breq	.+2      	; 0xcc4 <hci_event_handler+0xda>
     cc2:	6c c2       	rjmp	.+1240   	; 0x119c <hci_event_handler+0x5b2>
     cc4:	9c c0       	rjmp	.+312    	; 0xdfe <hci_event_handler+0x214>
     cc6:	e3 e0       	ldi	r30, 0x03	; 3
     cc8:	ae 16       	cp	r10, r30
     cca:	e0 e1       	ldi	r30, 0x10	; 16
     ccc:	be 06       	cpc	r11, r30
     cce:	98 f4       	brcc	.+38     	; 0xcf6 <hci_event_handler+0x10c>
     cd0:	f1 e0       	ldi	r31, 0x01	; 1
     cd2:	af 16       	cp	r10, r31
     cd4:	f0 e1       	ldi	r31, 0x10	; 16
     cd6:	bf 06       	cpc	r11, r31
     cd8:	08 f0       	brcs	.+2      	; 0xcdc <hci_event_handler+0xf2>
     cda:	96 c0       	rjmp	.+300    	; 0xe08 <hci_event_handler+0x21e>
     cdc:	05 e0       	ldi	r16, 0x05	; 5
     cde:	a0 16       	cp	r10, r16
     ce0:	02 e0       	ldi	r16, 0x02	; 2
     ce2:	b0 06       	cpc	r11, r16
     ce4:	08 f4       	brcc	.+2      	; 0xce8 <hci_event_handler+0xfe>
     ce6:	8b c0       	rjmp	.+278    	; 0xdfe <hci_event_handler+0x214>
     ce8:	17 e0       	ldi	r17, 0x07	; 7
     cea:	a1 16       	cp	r10, r17
     cec:	12 e0       	ldi	r17, 0x02	; 2
     cee:	b1 06       	cpc	r11, r17
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <hci_event_handler+0x10a>
     cf2:	54 c2       	rjmp	.+1192   	; 0x119c <hci_event_handler+0x5b2>
     cf4:	8d c0       	rjmp	.+282    	; 0xe10 <hci_event_handler+0x226>
     cf6:	64 e0       	ldi	r22, 0x04	; 4
     cf8:	a6 16       	cp	r10, r22
     cfa:	60 e1       	ldi	r22, 0x10	; 16
     cfc:	b6 06       	cpc	r11, r22
     cfe:	09 f4       	brne	.+2      	; 0xd02 <hci_event_handler+0x118>
     d00:	dc c0       	rjmp	.+440    	; 0xeba <hci_event_handler+0x2d0>
     d02:	85 e0       	ldi	r24, 0x05	; 5
     d04:	a8 16       	cp	r10, r24
     d06:	80 e1       	ldi	r24, 0x10	; 16
     d08:	b8 06       	cpc	r11, r24
     d0a:	08 f0       	brcs	.+2      	; 0xd0e <hci_event_handler+0x124>
     d0c:	b1 c0       	rjmp	.+354    	; 0xe70 <hci_event_handler+0x286>
     d0e:	42 c1       	rjmp	.+644    	; 0xf94 <hci_event_handler+0x3aa>
     d10:	91 e1       	ldi	r25, 0x11	; 17
     d12:	a9 16       	cp	r10, r25
     d14:	90 e1       	ldi	r25, 0x10	; 16
     d16:	b9 06       	cpc	r11, r25
     d18:	09 f4       	brne	.+2      	; 0xd1c <hci_event_handler+0x132>
     d1a:	71 c0       	rjmp	.+226    	; 0xdfe <hci_event_handler+0x214>
     d1c:	a2 e1       	ldi	r26, 0x12	; 18
     d1e:	aa 16       	cp	r10, r26
     d20:	a0 e1       	ldi	r26, 0x10	; 16
     d22:	ba 06       	cpc	r11, r26
     d24:	58 f5       	brcc	.+86     	; 0xd7c <hci_event_handler+0x192>
     d26:	bb e0       	ldi	r27, 0x0B	; 11
     d28:	ab 16       	cp	r10, r27
     d2a:	b0 e1       	ldi	r27, 0x10	; 16
     d2c:	bb 06       	cpc	r11, r27
     d2e:	09 f4       	brne	.+2      	; 0xd32 <hci_event_handler+0x148>
     d30:	6b c0       	rjmp	.+214    	; 0xe08 <hci_event_handler+0x21e>
     d32:	ec e0       	ldi	r30, 0x0C	; 12
     d34:	ae 16       	cp	r10, r30
     d36:	e0 e1       	ldi	r30, 0x10	; 16
     d38:	be 06       	cpc	r11, r30
     d3a:	68 f4       	brcc	.+26     	; 0xd56 <hci_event_handler+0x16c>
     d3c:	f9 e0       	ldi	r31, 0x09	; 9
     d3e:	af 16       	cp	r10, r31
     d40:	f0 e1       	ldi	r31, 0x10	; 16
     d42:	bf 06       	cpc	r11, r31
     d44:	09 f4       	brne	.+2      	; 0xd48 <hci_event_handler+0x15e>
     d46:	60 c0       	rjmp	.+192    	; 0xe08 <hci_event_handler+0x21e>
     d48:	0a e0       	ldi	r16, 0x0A	; 10
     d4a:	a0 16       	cp	r10, r16
     d4c:	00 e1       	ldi	r16, 0x10	; 16
     d4e:	b0 06       	cpc	r11, r16
     d50:	08 f0       	brcs	.+2      	; 0xd54 <hci_event_handler+0x16a>
     d52:	73 c1       	rjmp	.+742    	; 0x103a <hci_event_handler+0x450>
     d54:	3a c1       	rjmp	.+628    	; 0xfca <hci_event_handler+0x3e0>
     d56:	1f e0       	ldi	r17, 0x0F	; 15
     d58:	a1 16       	cp	r10, r17
     d5a:	10 e1       	ldi	r17, 0x10	; 16
     d5c:	b1 06       	cpc	r11, r17
     d5e:	09 f4       	brne	.+2      	; 0xd62 <hci_event_handler+0x178>
     d60:	19 c1       	rjmp	.+562    	; 0xf94 <hci_event_handler+0x3aa>
     d62:	60 e1       	ldi	r22, 0x10	; 16
     d64:	a6 16       	cp	r10, r22
     d66:	60 e1       	ldi	r22, 0x10	; 16
     d68:	b6 06       	cpc	r11, r22
     d6a:	08 f0       	brcs	.+2      	; 0xd6e <hci_event_handler+0x184>
     d6c:	61 c0       	rjmp	.+194    	; 0xe30 <hci_event_handler+0x246>
     d6e:	8d e0       	ldi	r24, 0x0D	; 13
     d70:	a8 16       	cp	r10, r24
     d72:	80 e1       	ldi	r24, 0x10	; 16
     d74:	b8 06       	cpc	r11, r24
     d76:	09 f0       	breq	.+2      	; 0xd7a <hci_event_handler+0x190>
     d78:	11 c2       	rjmp	.+1058   	; 0x119c <hci_event_handler+0x5b2>
     d7a:	9f c0       	rjmp	.+318    	; 0xeba <hci_event_handler+0x2d0>
     d7c:	95 e0       	ldi	r25, 0x05	; 5
     d7e:	a9 16       	cp	r10, r25
     d80:	90 e2       	ldi	r25, 0x20	; 32
     d82:	b9 06       	cpc	r11, r25
     d84:	09 f4       	brne	.+2      	; 0xd88 <hci_event_handler+0x19e>
     d86:	a4 c1       	rjmp	.+840    	; 0x10d0 <hci_event_handler+0x4e6>
     d88:	a6 e0       	ldi	r26, 0x06	; 6
     d8a:	aa 16       	cp	r10, r26
     d8c:	a0 e2       	ldi	r26, 0x20	; 32
     d8e:	ba 06       	cpc	r11, r26
     d90:	68 f4       	brcc	.+26     	; 0xdac <hci_event_handler+0x1c2>
     d92:	b2 e1       	ldi	r27, 0x12	; 18
     d94:	ab 16       	cp	r10, r27
     d96:	b0 e1       	ldi	r27, 0x10	; 16
     d98:	bb 06       	cpc	r11, r27
     d9a:	09 f4       	brne	.+2      	; 0xd9e <hci_event_handler+0x1b4>
     d9c:	60 c0       	rjmp	.+192    	; 0xe5e <hci_event_handler+0x274>
     d9e:	e1 e0       	ldi	r30, 0x01	; 1
     da0:	ae 16       	cp	r10, r30
     da2:	e0 e2       	ldi	r30, 0x20	; 32
     da4:	be 06       	cpc	r11, r30
     da6:	08 f4       	brcc	.+2      	; 0xdaa <hci_event_handler+0x1c0>
     da8:	f9 c1       	rjmp	.+1010   	; 0x119c <hci_event_handler+0x5b2>
     daa:	29 c0       	rjmp	.+82     	; 0xdfe <hci_event_handler+0x214>
     dac:	fa e0       	ldi	r31, 0x0A	; 10
     dae:	af 16       	cp	r10, r31
     db0:	f0 e2       	ldi	r31, 0x20	; 32
     db2:	bf 06       	cpc	r11, r31
     db4:	60 f4       	brcc	.+24     	; 0xdce <hci_event_handler+0x1e4>
     db6:	08 e0       	ldi	r16, 0x08	; 8
     db8:	a0 16       	cp	r10, r16
     dba:	00 e2       	ldi	r16, 0x20	; 32
     dbc:	b0 06       	cpc	r11, r16
     dbe:	f8 f4       	brcc	.+62     	; 0xdfe <hci_event_handler+0x214>
     dc0:	16 e0       	ldi	r17, 0x06	; 6
     dc2:	a1 16       	cp	r10, r17
     dc4:	10 e2       	ldi	r17, 0x20	; 32
     dc6:	b1 06       	cpc	r11, r17
     dc8:	09 f0       	breq	.+2      	; 0xdcc <hci_event_handler+0x1e2>
     dca:	e8 c1       	rjmp	.+976    	; 0x119c <hci_event_handler+0x5b2>
     dcc:	18 c0       	rjmp	.+48     	; 0xdfe <hci_event_handler+0x214>
     dce:	6b e0       	ldi	r22, 0x0B	; 11
     dd0:	a6 16       	cp	r10, r22
     dd2:	60 e4       	ldi	r22, 0x40	; 64
     dd4:	b6 06       	cpc	r11, r22
     dd6:	09 f0       	breq	.+2      	; 0xdda <hci_event_handler+0x1f0>
     dd8:	e1 c1       	rjmp	.+962    	; 0x119c <hci_event_handler+0x5b2>
					{		
					case HCI_CMND_READ_BUFFER_SIZE:
						{
							STREAM_TO_UINT8((CHAR *)pucReceivedParams, 0, 
     dda:	d4 01       	movw	r26, r8
     ddc:	15 96       	adiw	r26, 0x05	; 5
     dde:	8c 91       	ld	r24, X
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	90 93 57 03 	sts	0x0357, r25
     de6:	80 93 56 03 	sts	0x0356, r24
								tSLInformation.usNumberOfFreeBuffers);
							STREAM_TO_UINT16((CHAR *)pucReceivedParams, 1, 
     dea:	ce 01       	movw	r24, r28
     dec:	61 e0       	ldi	r22, 0x01	; 1
     dee:	70 e0       	ldi	r23, 0x00	; 0
     df0:	0e 94 4d 02 	call	0x49a	; 0x49a <STREAM_TO_UINT16_f>
     df4:	90 93 59 03 	sts	0x0359, r25
     df8:	80 93 58 03 	sts	0x0358, r24
     dfc:	cf c1       	rjmp	.+926    	; 0x119c <hci_event_handler+0x5b2>
					case HCI_EVNT_NVMEM_CREATE_ENTRY:
					case HCI_CMND_NVMEM_WRITE_PATCH:
					case HCI_NETAPP_PING_REPORT:
					case HCI_EVNT_MDNS_ADVERTISE:

						STREAM_TO_UINT8(pucReceivedData, HCI_EVENT_STATUS_OFFSET
     dfe:	e4 01       	movw	r28, r8
     e00:	8c 81       	ldd	r24, Y+4	; 0x04
     e02:	f6 01       	movw	r30, r12
     e04:	80 83       	st	Z, r24
     e06:	ca c1       	rjmp	.+916    	; 0x119c <hci_event_handler+0x5b2>
					case HCI_CMND_LISTEN:
					case HCI_EVNT_CLOSE_SOCKET:
					case HCI_EVNT_CONNECT:
					case HCI_EVNT_NVMEM_WRITE:

						STREAM_TO_UINT32((CHAR *)pucReceivedParams,0
     e08:	ce 01       	movw	r24, r28
     e0a:	60 e0       	ldi	r22, 0x00	; 0
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	1e c0       	rjmp	.+60     	; 0xe4c <hci_event_handler+0x262>
							,*(UINT32 *)pRetParams);
						break;

					case HCI_EVNT_READ_SP_VERSION:

						STREAM_TO_UINT8(pucReceivedData, HCI_EVENT_STATUS_OFFSET
     e10:	f4 01       	movw	r30, r8
     e12:	84 81       	ldd	r24, Z+4	; 0x04
     e14:	d6 01       	movw	r26, r12
     e16:	8d 93       	st	X+, r24
     e18:	6d 01       	movw	r12, r26
							,*(UINT8 *)pRetParams);
						pRetParams = ((CHAR *)pRetParams) + 1;
						STREAM_TO_UINT32((CHAR *)pucReceivedParams, 0, retValue32);
     e1a:	ce 01       	movw	r24, r28
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	0e 94 57 02 	call	0x4ae	; 0x4ae <STREAM_TO_UINT32_f>
     e24:	ab 01       	movw	r20, r22
     e26:	bc 01       	movw	r22, r24
						UINT32_TO_STREAM((UINT8 *)pRetParams, retValue32);				
     e28:	c6 01       	movw	r24, r12
     e2a:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
     e2e:	b6 c1       	rjmp	.+876    	; 0x119c <hci_event_handler+0x5b2>
						break;

					case HCI_EVNT_BSD_GETHOSTBYNAME:

						STREAM_TO_UINT32((CHAR *)pucReceivedParams
     e30:	ce 01       	movw	r24, r28
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	0e 94 57 02 	call	0x4ae	; 0x4ae <STREAM_TO_UINT32_f>
     e3a:	f6 01       	movw	r30, r12
     e3c:	61 93       	st	Z+, r22
     e3e:	71 93       	st	Z+, r23
     e40:	81 93       	st	Z+, r24
     e42:	91 93       	st	Z+, r25
     e44:	6f 01       	movw	r12, r30
							,GET_HOST_BY_NAME_RETVAL_OFFSET,*(UINT32 *)pRetParams);
						pRetParams = ((CHAR *)pRetParams) + 4;
						STREAM_TO_UINT32((CHAR *)pucReceivedParams
     e46:	ce 01       	movw	r24, r28
     e48:	64 e0       	ldi	r22, 0x04	; 4
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	0e 94 57 02 	call	0x4ae	; 0x4ae <STREAM_TO_UINT32_f>
     e50:	d6 01       	movw	r26, r12
     e52:	6d 93       	st	X+, r22
     e54:	7d 93       	st	X+, r23
     e56:	8d 93       	st	X+, r24
     e58:	9c 93       	st	X, r25
     e5a:	13 97       	sbiw	r26, 0x03	; 3
     e5c:	9f c1       	rjmp	.+830    	; 0x119c <hci_event_handler+0x5b2>
							,GET_HOST_BY_NAME_ADDR_OFFSET,*(UINT32 *)pRetParams);					
						break;

					case HCI_EVNT_GETMSSVALUE:

						STREAM_TO_UINT16((CHAR *)pucReceivedParams
     e5e:	ce 01       	movw	r24, r28
     e60:	60 e0       	ldi	r22, 0x00	; 0
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	0e 94 4d 02 	call	0x49a	; 0x49a <STREAM_TO_UINT16_f>
     e68:	e6 01       	movw	r28, r12
     e6a:	99 83       	std	Y+1, r25	; 0x01
     e6c:	88 83       	st	Y, r24
     e6e:	96 c1       	rjmp	.+812    	; 0x119c <hci_event_handler+0x5b2>

						break;

					case HCI_EVNT_ACCEPT:
						{
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,ACCEPT_SD_OFFSET
     e70:	ce 01       	movw	r24, r28
     e72:	60 e0       	ldi	r22, 0x00	; 0
     e74:	70 e0       	ldi	r23, 0x00	; 0
     e76:	0e 94 57 02 	call	0x4ae	; 0x4ae <STREAM_TO_UINT32_f>
     e7a:	f6 01       	movw	r30, r12
     e7c:	61 93       	st	Z+, r22
     e7e:	71 93       	st	Z+, r23
     e80:	81 93       	st	Z+, r24
     e82:	91 93       	st	Z+, r25
     e84:	8f 01       	movw	r16, r30
								,*(UINT32 *)pRetParams);
							pRetParams = ((CHAR *)pRetParams) + 4;
							STREAM_TO_UINT32((CHAR *)pucReceivedParams
     e86:	ce 01       	movw	r24, r28
     e88:	64 e0       	ldi	r22, 0x04	; 4
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	0e 94 57 02 	call	0x4ae	; 0x4ae <STREAM_TO_UINT32_f>
     e90:	d6 01       	movw	r26, r12
     e92:	14 96       	adiw	r26, 0x04	; 4
     e94:	6d 93       	st	X+, r22
     e96:	7d 93       	st	X+, r23
     e98:	8d 93       	st	X+, r24
     e9a:	9c 93       	st	X, r25
     e9c:	17 97       	sbiw	r26, 0x07	; 7
								,ACCEPT_RETURN_STATUS_OFFSET,*(UINT32 *)pRetParams);
							pRetParams = ((CHAR *)pRetParams) + 4; 
     e9e:	e4 e0       	ldi	r30, 0x04	; 4
     ea0:	ce 2e       	mov	r12, r30
     ea2:	d1 2c       	mov	r13, r1
     ea4:	c0 0e       	add	r12, r16
     ea6:	d1 1e       	adc	r13, r17

							//This argument returns in network order
							memcpy((UINT8 *)pRetParams, 
								pucReceivedParams + ACCEPT_ADDRESS__OFFSET, sizeof(sockaddr));	
     ea8:	d6 01       	movw	r26, r12
     eaa:	fe 01       	movw	r30, r28
     eac:	38 96       	adiw	r30, 0x08	; 8
     eae:	80 e1       	ldi	r24, 0x10	; 16
     eb0:	01 90       	ld	r0, Z+
     eb2:	0d 92       	st	X+, r0
     eb4:	81 50       	subi	r24, 0x01	; 1
     eb6:	e1 f7       	brne	.-8      	; 0xeb0 <hci_event_handler+0x2c6>
     eb8:	71 c1       	rjmp	.+738    	; 0x119c <hci_event_handler+0x5b2>
						}

					case HCI_EVNT_RECV:
					case HCI_EVNT_RECVFROM:
						{
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SL_RECEIVE_SD_OFFSET ,*(UINT32 *)pRetParams);
     eba:	ce 01       	movw	r24, r28
     ebc:	60 e0       	ldi	r22, 0x00	; 0
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	0e 94 57 02 	call	0x4ae	; 0x4ae <STREAM_TO_UINT32_f>
     ec4:	f6 01       	movw	r30, r12
     ec6:	61 93       	st	Z+, r22
     ec8:	71 93       	st	Z+, r23
     eca:	81 93       	st	Z+, r24
     ecc:	91 93       	st	Z+, r25
     ece:	8f 01       	movw	r16, r30
							pRetParams = ((CHAR *)pRetParams) + 4;
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SL_RECEIVE_NUM_BYTES_OFFSET,*(UINT32 *)pRetParams);
     ed0:	ce 01       	movw	r24, r28
     ed2:	64 e0       	ldi	r22, 0x04	; 4
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	0e 94 57 02 	call	0x4ae	; 0x4ae <STREAM_TO_UINT32_f>
     eda:	d6 01       	movw	r26, r12
     edc:	14 96       	adiw	r26, 0x04	; 4
     ede:	6d 93       	st	X+, r22
     ee0:	7d 93       	st	X+, r23
     ee2:	8d 93       	st	X+, r24
     ee4:	9c 93       	st	X, r25
     ee6:	17 97       	sbiw	r26, 0x07	; 7
							pRetParams = ((CHAR *)pRetParams) + 4;
     ee8:	74 e0       	ldi	r23, 0x04	; 4
     eea:	c7 2e       	mov	r12, r23
     eec:	d1 2c       	mov	r13, r1
     eee:	c0 0e       	add	r12, r16
     ef0:	d1 1e       	adc	r13, r17
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SL_RECEIVE__FLAGS__OFFSET,*(UINT32 *)pRetParams);
     ef2:	ce 01       	movw	r24, r28
     ef4:	68 e0       	ldi	r22, 0x08	; 8
     ef6:	70 e0       	ldi	r23, 0x00	; 0
     ef8:	0e 94 57 02 	call	0x4ae	; 0x4ae <STREAM_TO_UINT32_f>
     efc:	9b 01       	movw	r18, r22
     efe:	ac 01       	movw	r20, r24
     f00:	e8 01       	movw	r28, r16
     f02:	6c 83       	std	Y+4, r22	; 0x04
     f04:	7d 83       	std	Y+5, r23	; 0x05
     f06:	8e 83       	std	Y+6, r24	; 0x06
     f08:	9f 83       	std	Y+7, r25	; 0x07

							if(((tBsdReadReturnParams *)pRetParams)->iNumberOfBytes == ERROR_SOCKET_INACTIVE)
     f0a:	f6 01       	movw	r30, r12
     f0c:	84 81       	ldd	r24, Z+4	; 0x04
     f0e:	95 81       	ldd	r25, Z+5	; 0x05
     f10:	a6 81       	ldd	r26, Z+6	; 0x06
     f12:	b7 81       	ldd	r27, Z+7	; 0x07
     f14:	87 5c       	subi	r24, 0xC7	; 199
     f16:	9f 4f       	sbci	r25, 0xFF	; 255
     f18:	af 4f       	sbci	r26, 0xFF	; 255
     f1a:	bf 4f       	sbci	r27, 0xFF	; 255
     f1c:	09 f0       	breq	.+2      	; 0xf20 <hci_event_handler+0x336>
     f1e:	3e c1       	rjmp	.+636    	; 0x119c <hci_event_handler+0x5b2>
//!                  accordingly  the global socket status
//
//*****************************************************************************
void set_socket_active_status(INT32 Sd, INT32 Status)
{
	if(M_IS_VALID_SD(Sd) && M_IS_VALID_STATUS(Status))
     f20:	28 30       	cpi	r18, 0x08	; 8
     f22:	31 05       	cpc	r19, r1
     f24:	41 05       	cpc	r20, r1
     f26:	51 05       	cpc	r21, r1
     f28:	08 f0       	brcs	.+2      	; 0xf2c <hci_event_handler+0x342>
     f2a:	38 c1       	rjmp	.+624    	; 0x119c <hci_event_handler+0x5b2>
	{
		socket_active_status &= ~(1 << Sd);      /* clean socket's mask */
     f2c:	82 2f       	mov	r24, r18
     f2e:	21 e0       	ldi	r18, 0x01	; 1
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	08 2e       	mov	r0, r24
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <hci_event_handler+0x350>
     f36:	22 0f       	add	r18, r18
     f38:	33 1f       	adc	r19, r19
     f3a:	0a 94       	dec	r0
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <hci_event_handler+0x34c>
     f3e:	20 95       	com	r18
     f40:	30 95       	com	r19
     f42:	44 27       	eor	r20, r20
     f44:	37 fd       	sbrc	r19, 7
     f46:	40 95       	com	r20
     f48:	54 2f       	mov	r21, r20
     f4a:	e0 90 7e 02 	lds	r14, 0x027E
     f4e:	f0 90 7f 02 	lds	r15, 0x027F
     f52:	00 91 80 02 	lds	r16, 0x0280
     f56:	10 91 81 02 	lds	r17, 0x0281
     f5a:	2e 21       	and	r18, r14
     f5c:	3f 21       	and	r19, r15
     f5e:	40 23       	and	r20, r16
     f60:	51 23       	and	r21, r17
		socket_active_status |= (Status << Sd); /* set new socket's mask */
     f62:	61 e0       	ldi	r22, 0x01	; 1
     f64:	e6 2e       	mov	r14, r22
     f66:	f1 2c       	mov	r15, r1
     f68:	01 2d       	mov	r16, r1
     f6a:	11 2d       	mov	r17, r1
     f6c:	04 c0       	rjmp	.+8      	; 0xf76 <hci_event_handler+0x38c>
     f6e:	ee 0c       	add	r14, r14
     f70:	ff 1c       	adc	r15, r15
     f72:	00 1f       	adc	r16, r16
     f74:	11 1f       	adc	r17, r17
     f76:	8a 95       	dec	r24
     f78:	d2 f7       	brpl	.-12     	; 0xf6e <hci_event_handler+0x384>
     f7a:	2e 29       	or	r18, r14
     f7c:	3f 29       	or	r19, r15
     f7e:	40 2b       	or	r20, r16
     f80:	51 2b       	or	r21, r17
     f82:	20 93 7e 02 	sts	0x027E, r18
     f86:	30 93 7f 02 	sts	0x027F, r19
     f8a:	40 93 80 02 	sts	0x0280, r20
     f8e:	50 93 81 02 	sts	0x0281, r21
     f92:	04 c1       	rjmp	.+520    	; 0x119c <hci_event_handler+0x5b2>
						}

					case HCI_EVNT_SEND:
					case HCI_EVNT_SENDTO:
						{
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SL_RECEIVE_SD_OFFSET ,*(UINT32 *)pRetParams);
     f94:	ce 01       	movw	r24, r28
     f96:	60 e0       	ldi	r22, 0x00	; 0
     f98:	70 e0       	ldi	r23, 0x00	; 0
     f9a:	0e 94 57 02 	call	0x4ae	; 0x4ae <STREAM_TO_UINT32_f>
     f9e:	d6 01       	movw	r26, r12
     fa0:	6d 93       	st	X+, r22
     fa2:	7d 93       	st	X+, r23
     fa4:	8d 93       	st	X+, r24
     fa6:	9d 93       	st	X+, r25
     fa8:	8d 01       	movw	r16, r26
							pRetParams = ((CHAR *)pRetParams) + 4;
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SL_RECEIVE_NUM_BYTES_OFFSET,*(UINT32 *)pRetParams);
     faa:	ce 01       	movw	r24, r28
     fac:	64 e0       	ldi	r22, 0x04	; 4
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	0e 94 57 02 	call	0x4ae	; 0x4ae <STREAM_TO_UINT32_f>
     fb4:	e6 01       	movw	r28, r12
     fb6:	6c 83       	std	Y+4, r22	; 0x04
     fb8:	7d 83       	std	Y+5, r23	; 0x05
     fba:	8e 83       	std	Y+6, r24	; 0x06
     fbc:	9f 83       	std	Y+7, r25	; 0x07
							pRetParams = ((CHAR *)pRetParams) + 4;
     fbe:	54 e0       	ldi	r21, 0x04	; 4
     fc0:	c5 2e       	mov	r12, r21
     fc2:	d1 2c       	mov	r13, r1
     fc4:	c0 0e       	add	r12, r16
     fc6:	d1 1e       	adc	r13, r17
     fc8:	e9 c0       	rjmp	.+466    	; 0x119c <hci_event_handler+0x5b2>
							break;
						}

					case HCI_EVNT_SELECT:
						{ 
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SELECT_STATUS_OFFSET,*(UINT32 *)pRetParams);
     fca:	ce 01       	movw	r24, r28
     fcc:	60 e0       	ldi	r22, 0x00	; 0
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	0e 94 57 02 	call	0x4ae	; 0x4ae <STREAM_TO_UINT32_f>
     fd4:	f6 01       	movw	r30, r12
     fd6:	61 93       	st	Z+, r22
     fd8:	71 93       	st	Z+, r23
     fda:	81 93       	st	Z+, r24
     fdc:	91 93       	st	Z+, r25
     fde:	8f 01       	movw	r16, r30
							pRetParams = ((CHAR *)pRetParams) + 4;
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SELECT_READFD_OFFSET,*(UINT32 *)pRetParams);
     fe0:	ce 01       	movw	r24, r28
     fe2:	64 e0       	ldi	r22, 0x04	; 4
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	0e 94 57 02 	call	0x4ae	; 0x4ae <STREAM_TO_UINT32_f>
     fea:	d6 01       	movw	r26, r12
     fec:	14 96       	adiw	r26, 0x04	; 4
     fee:	6d 93       	st	X+, r22
     ff0:	7d 93       	st	X+, r23
     ff2:	8d 93       	st	X+, r24
     ff4:	9c 93       	st	X, r25
     ff6:	17 97       	sbiw	r26, 0x07	; 7
							pRetParams = ((CHAR *)pRetParams) + 4;
     ff8:	44 e0       	ldi	r20, 0x04	; 4
     ffa:	e4 2e       	mov	r14, r20
     ffc:	f1 2c       	mov	r15, r1
     ffe:	e0 0e       	add	r14, r16
    1000:	f1 1e       	adc	r15, r17
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SELECT_WRITEFD_OFFSET,*(UINT32 *)pRetParams);
    1002:	ce 01       	movw	r24, r28
    1004:	68 e0       	ldi	r22, 0x08	; 8
    1006:	70 e0       	ldi	r23, 0x00	; 0
    1008:	0e 94 57 02 	call	0x4ae	; 0x4ae <STREAM_TO_UINT32_f>
    100c:	f8 01       	movw	r30, r16
    100e:	64 83       	std	Z+4, r22	; 0x04
    1010:	75 83       	std	Z+5, r23	; 0x05
    1012:	86 83       	std	Z+6, r24	; 0x06
    1014:	97 83       	std	Z+7, r25	; 0x07
							pRetParams = ((CHAR *)pRetParams) + 4;
    1016:	34 e0       	ldi	r19, 0x04	; 4
    1018:	c3 2e       	mov	r12, r19
    101a:	d1 2c       	mov	r13, r1
    101c:	ce 0c       	add	r12, r14
    101e:	df 1c       	adc	r13, r15
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SELECT_EXFD_OFFSET,*(UINT32 *)pRetParams);			
    1020:	ce 01       	movw	r24, r28
    1022:	6c e0       	ldi	r22, 0x0C	; 12
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	0e 94 57 02 	call	0x4ae	; 0x4ae <STREAM_TO_UINT32_f>
    102a:	d7 01       	movw	r26, r14
    102c:	14 96       	adiw	r26, 0x04	; 4
    102e:	6d 93       	st	X+, r22
    1030:	7d 93       	st	X+, r23
    1032:	8d 93       	st	X+, r24
    1034:	9c 93       	st	X, r25
    1036:	17 97       	sbiw	r26, 0x07	; 7
    1038:	b1 c0       	rjmp	.+354    	; 0x119c <hci_event_handler+0x5b2>
							break;
						}

					case HCI_CMND_GETSOCKOPT:

						STREAM_TO_UINT8(pucReceivedData, HCI_EVENT_STATUS_OFFSET,((tBsdGetSockOptReturnParams *)pRetParams)->iStatus);
    103a:	e4 01       	movw	r28, r8
    103c:	8c 81       	ldd	r24, Y+4	; 0x04
    103e:	f6 01       	movw	r30, r12
    1040:	84 83       	std	Z+4, r24	; 0x04
						//This argument returns in network order
						memcpy((UINT8 *)pRetParams, pucReceivedParams, 4);
    1042:	8d 81       	ldd	r24, Y+5	; 0x05
    1044:	9e 81       	ldd	r25, Y+6	; 0x06
    1046:	af 81       	ldd	r26, Y+7	; 0x07
    1048:	b8 85       	ldd	r27, Y+8	; 0x08
    104a:	e6 01       	movw	r28, r12
    104c:	88 83       	st	Y, r24
    104e:	99 83       	std	Y+1, r25	; 0x01
    1050:	aa 83       	std	Y+2, r26	; 0x02
    1052:	bb 83       	std	Y+3, r27	; 0x03
    1054:	a3 c0       	rjmp	.+326    	; 0x119c <hci_event_handler+0x5b2>
						break;

					case HCI_CMND_WLAN_IOCTL_GET_SCAN_RESULTS:

						STREAM_TO_UINT32((CHAR *)pucReceivedParams,GET_SCAN_RESULTS_TABlE_COUNT_OFFSET,*(UINT32 *)pRetParams);
    1056:	ce 01       	movw	r24, r28
    1058:	60 e0       	ldi	r22, 0x00	; 0
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	0e 94 57 02 	call	0x4ae	; 0x4ae <STREAM_TO_UINT32_f>
    1060:	f6 01       	movw	r30, r12
    1062:	61 93       	st	Z+, r22
    1064:	71 93       	st	Z+, r23
    1066:	81 93       	st	Z+, r24
    1068:	91 93       	st	Z+, r25
    106a:	8f 01       	movw	r16, r30
						pRetParams = ((CHAR *)pRetParams) + 4;   					
						STREAM_TO_UINT32((CHAR *)pucReceivedParams,GET_SCAN_RESULTS_SCANRESULT_STATUS_OFFSET,*(UINT32 *)pRetParams);
    106c:	ce 01       	movw	r24, r28
    106e:	64 e0       	ldi	r22, 0x04	; 4
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	0e 94 57 02 	call	0x4ae	; 0x4ae <STREAM_TO_UINT32_f>
    1076:	d6 01       	movw	r26, r12
    1078:	14 96       	adiw	r26, 0x04	; 4
    107a:	6d 93       	st	X+, r22
    107c:	7d 93       	st	X+, r23
    107e:	8d 93       	st	X+, r24
    1080:	9c 93       	st	X, r25
    1082:	17 97       	sbiw	r26, 0x07	; 7
						pRetParams = ((CHAR *)pRetParams) + 4;                                                        					
						STREAM_TO_UINT16((CHAR *)pucReceivedParams,GET_SCAN_RESULTS_ISVALID_TO_SSIDLEN_OFFSET,*(UINT32 *)pRetParams);
    1084:	ce 01       	movw	r24, r28
    1086:	68 e0       	ldi	r22, 0x08	; 8
    1088:	70 e0       	ldi	r23, 0x00	; 0
    108a:	0e 94 4d 02 	call	0x49a	; 0x49a <STREAM_TO_UINT16_f>
    108e:	a0 e0       	ldi	r26, 0x00	; 0
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	f8 01       	movw	r30, r16
    1094:	84 83       	std	Z+4, r24	; 0x04
    1096:	95 83       	std	Z+5, r25	; 0x05
    1098:	a6 83       	std	Z+6, r26	; 0x06
    109a:	b7 83       	std	Z+7, r27	; 0x07
						pRetParams = ((CHAR *)pRetParams) + 2;   					
						STREAM_TO_UINT16((CHAR *)pucReceivedParams,GET_SCAN_RESULTS_FRAME_TIME_OFFSET,*(UINT32 *)pRetParams);
    109c:	ce 01       	movw	r24, r28
    109e:	6a e0       	ldi	r22, 0x0A	; 10
    10a0:	70 e0       	ldi	r23, 0x00	; 0
    10a2:	0e 94 4d 02 	call	0x49a	; 0x49a <STREAM_TO_UINT16_f>
    10a6:	a0 e0       	ldi	r26, 0x00	; 0
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	f6 01       	movw	r30, r12
    10ac:	82 87       	std	Z+10, r24	; 0x0a
    10ae:	93 87       	std	Z+11, r25	; 0x0b
    10b0:	a4 87       	std	Z+12, r26	; 0x0c
    10b2:	b5 87       	std	Z+13, r27	; 0x0d
						pRetParams = ((CHAR *)pRetParams) + 2;  
    10b4:	2c e0       	ldi	r18, 0x0C	; 12
    10b6:	e2 2e       	mov	r14, r18
    10b8:	f1 2c       	mov	r15, r1
    10ba:	ce 0c       	add	r12, r14
    10bc:	df 1c       	adc	r13, r15
						memcpy((UINT8 *)pRetParams, (CHAR *)(pucReceivedParams + GET_SCAN_RESULTS_FRAME_TIME_OFFSET + 2), GET_SCAN_RESULTS_SSID_MAC_LENGTH);	
    10be:	d6 01       	movw	r26, r12
    10c0:	fe 01       	movw	r30, r28
    10c2:	3c 96       	adiw	r30, 0x0c	; 12
    10c4:	86 e2       	ldi	r24, 0x26	; 38
    10c6:	01 90       	ld	r0, Z+
    10c8:	0d 92       	st	X+, r0
    10ca:	81 50       	subi	r24, 0x01	; 1
    10cc:	e1 f7       	brne	.-8      	; 0x10c6 <hci_event_handler+0x4dc>
    10ce:	66 c0       	rjmp	.+204    	; 0x119c <hci_event_handler+0x5b2>
						break;

					case HCI_NETAPP_IPCONFIG:

						//Read IP address
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_IP_LENGTH);
    10d0:	d4 01       	movw	r26, r8
    10d2:	15 96       	adiw	r26, 0x05	; 5
    10d4:	8c 91       	ld	r24, X
    10d6:	f6 01       	movw	r30, r12
    10d8:	81 93       	st	Z+, r24
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	d6 01       	movw	r26, r12
    10de:	11 96       	adiw	r26, 0x01	; 1
    10e0:	8c 93       	st	X, r24
    10e2:	11 97       	sbiw	r26, 0x01	; 1
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	81 83       	std	Z+1, r24	; 0x01
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	82 83       	std	Z+2, r24	; 0x02
    10ec:	14 96       	adiw	r26, 0x04	; 4
						RecvParams += 4;
    10ee:	f4 01       	movw	r30, r8
    10f0:	39 96       	adiw	r30, 0x09	; 9

						//Read subnet
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_IP_LENGTH);
    10f2:	e4 01       	movw	r28, r8
    10f4:	89 85       	ldd	r24, Y+9	; 0x09
    10f6:	e6 01       	movw	r28, r12
    10f8:	8c 83       	std	Y+4, r24	; 0x04
    10fa:	81 81       	ldd	r24, Z+1	; 0x01
    10fc:	8d 83       	std	Y+5, r24	; 0x05
    10fe:	82 81       	ldd	r24, Z+2	; 0x02
    1100:	8e 83       	std	Y+6, r24	; 0x06
    1102:	83 81       	ldd	r24, Z+3	; 0x03
    1104:	8f 83       	std	Y+7, r24	; 0x07
    1106:	9d 01       	movw	r18, r26
    1108:	2c 5f       	subi	r18, 0xFC	; 252
    110a:	3f 4f       	sbci	r19, 0xFF	; 255
						RecvParams += 4;
    110c:	f4 01       	movw	r30, r8
    110e:	3d 96       	adiw	r30, 0x0d	; 13

						//Read default GW
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_IP_LENGTH);
    1110:	e4 01       	movw	r28, r8
    1112:	8d 85       	ldd	r24, Y+13	; 0x0d
    1114:	14 96       	adiw	r26, 0x04	; 4
    1116:	8c 93       	st	X, r24
    1118:	14 97       	sbiw	r26, 0x04	; 4
    111a:	81 81       	ldd	r24, Z+1	; 0x01
    111c:	e6 01       	movw	r28, r12
    111e:	89 87       	std	Y+9, r24	; 0x09
    1120:	82 81       	ldd	r24, Z+2	; 0x02
    1122:	8a 87       	std	Y+10, r24	; 0x0a
    1124:	83 81       	ldd	r24, Z+3	; 0x03
    1126:	8b 87       	std	Y+11, r24	; 0x0b
						RecvParams += 4;
    1128:	f4 01       	movw	r30, r8
    112a:	71 96       	adiw	r30, 0x11	; 17

						//Read DHCP server                                          	
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_IP_LENGTH);
    112c:	e4 01       	movw	r28, r8
    112e:	89 89       	ldd	r24, Y+17	; 0x11
    1130:	e9 01       	movw	r28, r18
    1132:	8c 83       	std	Y+4, r24	; 0x04
    1134:	81 81       	ldd	r24, Z+1	; 0x01
    1136:	e6 01       	movw	r28, r12
    1138:	8d 87       	std	Y+13, r24	; 0x0d
    113a:	82 81       	ldd	r24, Z+2	; 0x02
    113c:	8e 87       	std	Y+14, r24	; 0x0e
    113e:	83 81       	ldd	r24, Z+3	; 0x03
    1140:	8f 87       	std	Y+15, r24	; 0x0f
						RecvParams += 4;
    1142:	f4 01       	movw	r30, r8
    1144:	75 96       	adiw	r30, 0x15	; 21

						//Read DNS server                                           
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_IP_LENGTH);
    1146:	e4 01       	movw	r28, r8
    1148:	8d 89       	ldd	r24, Y+21	; 0x15
    114a:	e9 01       	movw	r28, r18
    114c:	88 87       	std	Y+8, r24	; 0x08
    114e:	81 81       	ldd	r24, Z+1	; 0x01
    1150:	1d 96       	adiw	r26, 0x0d	; 13
    1152:	8c 93       	st	X, r24
    1154:	1d 97       	sbiw	r26, 0x0d	; 13
    1156:	82 81       	ldd	r24, Z+2	; 0x02
    1158:	1e 96       	adiw	r26, 0x0e	; 14
    115a:	8c 93       	st	X, r24
    115c:	1e 97       	sbiw	r26, 0x0e	; 14
    115e:	83 81       	ldd	r24, Z+3	; 0x03
    1160:	1f 96       	adiw	r26, 0x0f	; 15
    1162:	8c 93       	st	X, r24
    1164:	e4 01       	movw	r28, r8
    1166:	96 01       	movw	r18, r12
    1168:	f4 01       	movw	r30, r8
    116a:	d6 01       	movw	r26, r12
						RecvParams += 4;

						//Read Mac address                            	
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_MAC_LENGTH);
    116c:	a4 01       	movw	r20, r8
    116e:	4a 5f       	subi	r20, 0xFA	; 250
    1170:	5f 4f       	sbci	r21, 0xFF	; 255
    1172:	81 8d       	ldd	r24, Z+25	; 0x19
    1174:	54 96       	adiw	r26, 0x14	; 20
    1176:	8c 93       	st	X, r24
    1178:	54 97       	sbiw	r26, 0x14	; 20
    117a:	31 96       	adiw	r30, 0x01	; 1
    117c:	11 96       	adiw	r26, 0x01	; 1
    117e:	e4 17       	cp	r30, r20
    1180:	f5 07       	cpc	r31, r21
    1182:	b9 f7       	brne	.-18     	; 0x1172 <hci_event_handler+0x588>
						RecvParams += 6;

						//Read SSID
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_SSID_LENGTH);
    1184:	a4 01       	movw	r20, r8
    1186:	40 5e       	subi	r20, 0xE0	; 224
    1188:	5f 4f       	sbci	r21, 0xFF	; 255
    118a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    118c:	f9 01       	movw	r30, r18
    118e:	82 8f       	std	Z+26, r24	; 0x1a
    1190:	21 96       	adiw	r28, 0x01	; 1
    1192:	2f 5f       	subi	r18, 0xFF	; 255
    1194:	3f 4f       	sbci	r19, 0xFF	; 255
    1196:	c4 17       	cp	r28, r20
    1198:	d5 07       	cpc	r29, r21
    119a:	b9 f7       	brne	.-18     	; 0x118a <hci_event_handler+0x5a0>

					}
				}

				if (usReceivedEventOpcode == tSLInformation.usRxEventOpcode)
    119c:	80 91 3a 03 	lds	r24, 0x033A
    11a0:	90 91 3b 03 	lds	r25, 0x033B
    11a4:	a8 16       	cp	r10, r24
    11a6:	b9 06       	cpc	r11, r25
    11a8:	b9 f5       	brne	.+110    	; 0x1218 <hci_event_handler+0x62e>
				{
					tSLInformation.usRxEventOpcode = 0;
    11aa:	10 92 3b 03 	sts	0x033B, r1
    11ae:	10 92 3a 03 	sts	0x033A, r1
    11b2:	32 c0       	rjmp	.+100    	; 0x1218 <hci_event_handler+0x62e>
				}
			}
			else
			{				
				pucReceivedParams = pucReceivedData;
				STREAM_TO_UINT8((CHAR *)pucReceivedData, HCI_PACKET_ARGSIZE_OFFSET, ucArgsize);
    11b4:	d4 01       	movw	r26, r8
    11b6:	12 96       	adiw	r26, 0x02	; 2
    11b8:	0c 91       	ld	r16, X

				STREAM_TO_UINT16((CHAR *)pucReceivedData, HCI_PACKET_LENGTH_OFFSET, usLength);
    11ba:	c4 01       	movw	r24, r8
    11bc:	63 e0       	ldi	r22, 0x03	; 3
    11be:	70 e0       	ldi	r23, 0x00	; 0
    11c0:	0e 94 4d 02 	call	0x49a	; 0x49a <STREAM_TO_UINT16_f>
    11c4:	ec 01       	movw	r28, r24

				// Data received: note that the only case where from and from length 
				// are not null is in recv from, so fill the args accordingly
				if (from)
    11c6:	41 14       	cp	r4, r1
    11c8:	51 04       	cpc	r5, r1
    11ca:	a1 f0       	breq	.+40     	; 0x11f4 <hci_event_handler+0x60a>
				{
					STREAM_TO_UINT32((CHAR *)(pucReceivedData + HCI_DATA_HEADER_SIZE), BSD_RECV_FROM_FROMLEN_OFFSET, *(UINT32 *)fromlen);
    11cc:	c4 01       	movw	r24, r8
    11ce:	05 96       	adiw	r24, 0x05	; 5
    11d0:	64 e0       	ldi	r22, 0x04	; 4
    11d2:	70 e0       	ldi	r23, 0x00	; 0
    11d4:	0e 94 57 02 	call	0x4ae	; 0x4ae <STREAM_TO_UINT32_f>
    11d8:	46 2f       	mov	r20, r22
    11da:	f3 01       	movw	r30, r6
    11dc:	60 83       	st	Z, r22
    11de:	71 83       	std	Z+1, r23	; 0x01
    11e0:	82 83       	std	Z+2, r24	; 0x02
    11e2:	93 83       	std	Z+3, r25	; 0x03
					memcpy(from, (pucReceivedData + HCI_DATA_HEADER_SIZE + BSD_RECV_FROM_FROM_OFFSET) ,*fromlen);
    11e4:	94 01       	movw	r18, r8
    11e6:	2b 5e       	subi	r18, 0xEB	; 235
    11e8:	3f 4f       	sbci	r19, 0xFF	; 255
    11ea:	c2 01       	movw	r24, r4
    11ec:	b9 01       	movw	r22, r18
    11ee:	50 e0       	ldi	r21, 0x00	; 0
    11f0:	0e 94 8b 33 	call	0x6716	; 0x6716 <memcpy>
				}

				memcpy(pRetParams, pucReceivedParams + HCI_DATA_HEADER_SIZE + ucArgsize,
					usLength - ucArgsize);
    11f4:	20 2f       	mov	r18, r16
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	fe 01       	movw	r30, r28
    11fa:	e2 1b       	sub	r30, r18
    11fc:	f3 0b       	sbc	r31, r19
    11fe:	2b 5f       	subi	r18, 0xFB	; 251
    1200:	3f 4f       	sbci	r19, 0xFF	; 255
    1202:	28 0d       	add	r18, r8
    1204:	39 1d       	adc	r19, r9
    1206:	c6 01       	movw	r24, r12
    1208:	b9 01       	movw	r22, r18
    120a:	af 01       	movw	r20, r30
    120c:	0e 94 8b 33 	call	0x6716	; 0x6716 <memcpy>

				tSLInformation.usRxDataPending = 0;
    1210:	10 92 5d 03 	sts	0x035D, r1
    1214:	10 92 5c 03 	sts	0x035C, r1
			}

			tSLInformation.usEventOrDataReceived = 0;
    1218:	10 92 3d 03 	sts	0x033D, r1
    121c:	10 92 3c 03 	sts	0x033C, r1

			SpiResumeSpi();
    1220:	0e 94 45 22 	call	0x448a	; 0x448a <_Z12SpiResumeSpiv>

			// Since we are going to TX - we need to handle this event after the 
			// ResumeSPi since we need interrupts
			if ((*pucReceivedData == HCI_TYPE_EVNT) &&
    1224:	d4 01       	movw	r26, r8
    1226:	8c 91       	ld	r24, X
    1228:	84 30       	cpi	r24, 0x04	; 4
    122a:	41 f4       	brne	.+16     	; 0x123c <hci_event_handler+0x652>
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	ab 16       	cp	r10, r27
    1230:	b0 e1       	ldi	r27, 0x10	; 16
    1232:	bb 06       	cpc	r11, r27
    1234:	19 f4       	brne	.+6      	; 0x123c <hci_event_handler+0x652>
				(usReceivedEventOpcode == HCI_EVNT_PATCHES_REQ))
			{
				hci_unsol_handle_patch_request((CHAR *)pucReceivedData);
    1236:	c4 01       	movw	r24, r8
    1238:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_Z30hci_unsol_handle_patch_requestPc>
			}

			if ((tSLInformation.usRxEventOpcode == 0) && (tSLInformation.usRxDataPending == 0))
    123c:	80 91 3a 03 	lds	r24, 0x033A
    1240:	90 91 3b 03 	lds	r25, 0x033B
    1244:	89 2b       	or	r24, r25
    1246:	09 f0       	breq	.+2      	; 0x124a <hci_event_handler+0x660>
    1248:	e5 cc       	rjmp	.-1590   	; 0xc14 <hci_event_handler+0x2a>
    124a:	80 91 5c 03 	lds	r24, 0x035C
    124e:	90 91 5d 03 	lds	r25, 0x035D
    1252:	89 2b       	or	r24, r25
    1254:	09 f0       	breq	.+2      	; 0x1258 <hci_event_handler+0x66e>
    1256:	de cc       	rjmp	.-1604   	; 0xc14 <hci_event_handler+0x2a>
				return NULL;
			}	
		}
	}

}
    1258:	80 e0       	ldi	r24, 0x00	; 0
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	1f 91       	pop	r17
    1262:	0f 91       	pop	r16
    1264:	ff 90       	pop	r15
    1266:	ef 90       	pop	r14
    1268:	df 90       	pop	r13
    126a:	cf 90       	pop	r12
    126c:	bf 90       	pop	r11
    126e:	af 90       	pop	r10
    1270:	9f 90       	pop	r9
    1272:	8f 90       	pop	r8
    1274:	7f 90       	pop	r7
    1276:	6f 90       	pop	r6
    1278:	5f 90       	pop	r5
    127a:	4f 90       	pop	r4
    127c:	08 95       	ret

0000127e <SimpleLinkWaitData>:

void SimpleLinkWaitData(UINT8 *pBuf, UINT8 *from, UINT8 *fromlen)
{
	// In the blocking implementation the control to caller will be returned only 
	// after the end of current transaction, i.e. only after data will be received
	tSLInformation.usRxDataPending = 1;
    127e:	21 e0       	ldi	r18, 0x01	; 1
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	30 93 5d 03 	sts	0x035D, r19
    1286:	20 93 5c 03 	sts	0x035C, r18
	hci_event_handler(pBuf, from, fromlen);
    128a:	0e 94 f5 05 	call	0xbea	; 0xbea <hci_event_handler>
}
    128e:	08 95       	ret

00001290 <SimpleLinkWaitEvent>:

void SimpleLinkWaitEvent(UINT16 usOpcode, void *pRetParams)
{
	// In the blocking implementation the control to caller will be returned only 
	// after the end of current transaction
	tSLInformation.usRxEventOpcode = usOpcode;
    1290:	90 93 3b 03 	sts	0x033B, r25
    1294:	80 93 3a 03 	sts	0x033A, r24
	hci_event_handler(pRetParams, 0, 0);
    1298:	cb 01       	movw	r24, r22
    129a:	60 e0       	ldi	r22, 0x00	; 0
    129c:	70 e0       	ldi	r23, 0x00	; 0
    129e:	40 e0       	ldi	r20, 0x00	; 0
    12a0:	50 e0       	ldi	r21, 0x00	; 0
    12a2:	0e 94 f5 05 	call	0xbea	; 0xbea <hci_event_handler>
}
    12a6:	08 95       	ret

000012a8 <hci_data_send>:
INT32 hci_data_send(UINT8 ucOpcode, 
	UINT8 *ucArgs,
	UINT16 usArgsLength, 
	UINT16 usDataLength,
	const UINT8 *ucTail,
	UINT16 usTailLength)
    12a8:	cf 92       	push	r12
    12aa:	df 92       	push	r13
    12ac:	ef 92       	push	r14
    12ae:	ff 92       	push	r15
    12b0:	0f 93       	push	r16
    12b2:	1f 93       	push	r17
    12b4:	6b 01       	movw	r12, r22
    12b6:	89 01       	movw	r16, r18
{
	UINT8 *stream;

	stream = ((ucArgs) + SPI_HEADER_SIZE);

	UINT8_TO_STREAM(stream, HCI_TYPE_DATA);
    12b8:	92 e0       	ldi	r25, 0x02	; 2
    12ba:	fb 01       	movw	r30, r22
    12bc:	95 83       	std	Z+5, r25	; 0x05
	UINT8_TO_STREAM(stream, ucOpcode);
    12be:	86 83       	std	Z+6, r24	; 0x06
	UINT8_TO_STREAM(stream, usArgsLength);
    12c0:	47 83       	std	Z+7, r20	; 0x07
	stream = UINT16_TO_STREAM(stream, usArgsLength + usDataLength + usTailLength);
    12c2:	04 0f       	add	r16, r20
    12c4:	15 1f       	adc	r17, r21
    12c6:	0e 0d       	add	r16, r14
    12c8:	1f 1d       	adc	r17, r15
    12ca:	cb 01       	movw	r24, r22
    12cc:	08 96       	adiw	r24, 0x08	; 8
    12ce:	b8 01       	movw	r22, r16
    12d0:	0e 94 45 02 	call	0x48a	; 0x48a <UINT16_TO_STREAM_f>

	// Send the packet over the SPI
	SpiWrite(ucArgs, SIMPLE_LINK_HCI_DATA_HEADER_SIZE + usArgsLength + usDataLength + usTailLength);
    12d4:	0b 5f       	subi	r16, 0xFB	; 251
    12d6:	1f 4f       	sbci	r17, 0xFF	; 255
    12d8:	c6 01       	movw	r24, r12
    12da:	b8 01       	movw	r22, r16
    12dc:	0e 94 01 24 	call	0x4802	; 0x4802 <_Z8SpiWritePht>

	return(ESUCCESS);
}
    12e0:	60 e0       	ldi	r22, 0x00	; 0
    12e2:	70 e0       	ldi	r23, 0x00	; 0
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	1f 91       	pop	r17
    12ea:	0f 91       	pop	r16
    12ec:	ff 90       	pop	r15
    12ee:	ef 90       	pop	r14
    12f0:	df 90       	pop	r13
    12f2:	cf 90       	pop	r12
    12f4:	08 95       	ret

000012f6 <hci_command_send>:
//!  @return              none
//!
//!  @brief               Initiate an HCI command.
//
//*****************************************************************************
UINT16 hci_command_send(UINT16 usOpcode, UINT8 *pucBuff, UINT8 ucArgsLength)
    12f6:	ef 92       	push	r14
    12f8:	ff 92       	push	r15
    12fa:	0f 93       	push	r16
    12fc:	1f 93       	push	r17
    12fe:	9c 01       	movw	r18, r24
    1300:	7b 01       	movw	r14, r22
    1302:	04 2f       	mov	r16, r20
{ 
	UINT8 *stream;

	stream = (pucBuff + SPI_HEADER_SIZE);

	UINT8_TO_STREAM(stream, HCI_TYPE_CMND);
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	fb 01       	movw	r30, r22
    1308:	85 83       	std	Z+5, r24	; 0x05
	stream = UINT16_TO_STREAM(stream, usOpcode);
    130a:	cb 01       	movw	r24, r22
    130c:	06 96       	adiw	r24, 0x06	; 6
    130e:	b9 01       	movw	r22, r18
    1310:	0e 94 45 02 	call	0x48a	; 0x48a <UINT16_TO_STREAM_f>
    1314:	fc 01       	movw	r30, r24
	UINT8_TO_STREAM(stream, ucArgsLength);
    1316:	00 83       	st	Z, r16

	//Update the opcode of the event we will be waiting for
	SpiWrite(pucBuff, ucArgsLength + SIMPLE_LINK_HCI_CMND_HEADER_SIZE);
    1318:	10 e0       	ldi	r17, 0x00	; 0
    131a:	0c 5f       	subi	r16, 0xFC	; 252
    131c:	1f 4f       	sbci	r17, 0xFF	; 255
    131e:	c7 01       	movw	r24, r14
    1320:	b8 01       	movw	r22, r16
    1322:	0e 94 01 24 	call	0x4802	; 0x4802 <_Z8SpiWritePht>

	return(0);
}
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	1f 91       	pop	r17
    132c:	0f 91       	pop	r16
    132e:	ff 90       	pop	r15
    1330:	ef 90       	pop	r14
    1332:	08 95       	ret

00001334 <hci_patch_send>:
//!  @return              none
//!
//!  @brief               Prepeare HCI header and initiate an HCI patch write operation
//
//*****************************************************************************
void hci_patch_send(UINT8 ucOpcode, UINT8 *pucBuff, CHAR *patch, UINT16 usDataLength)
    1334:	4f 92       	push	r4
    1336:	5f 92       	push	r5
    1338:	6f 92       	push	r6
    133a:	7f 92       	push	r7
    133c:	8f 92       	push	r8
    133e:	9f 92       	push	r9
    1340:	af 92       	push	r10
    1342:	bf 92       	push	r11
    1344:	cf 92       	push	r12
    1346:	df 92       	push	r13
    1348:	ef 92       	push	r14
    134a:	ff 92       	push	r15
    134c:	0f 93       	push	r16
    134e:	1f 93       	push	r17
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	6b 01       	movw	r12, r22
    1356:	4a 01       	movw	r8, r20
    1358:	e9 01       	movw	r28, r18
{ 
	UINT8 *data_ptr = (pucBuff + SPI_HEADER_SIZE);
    135a:	45 e0       	ldi	r20, 0x05	; 5
    135c:	44 2e       	mov	r4, r20
    135e:	51 2c       	mov	r5, r1
    1360:	46 0e       	add	r4, r22
    1362:	57 1e       	adc	r5, r23
	UINT16 usTransLength;
	UINT8 *stream = (pucBuff + SPI_HEADER_SIZE);

	UINT8_TO_STREAM(stream, HCI_TYPE_PATCH);
    1364:	93 e0       	ldi	r25, 0x03	; 3
    1366:	fb 01       	movw	r30, r22
    1368:	95 83       	std	Z+5, r25	; 0x05
	UINT8_TO_STREAM(stream, ucOpcode);
    136a:	86 83       	std	Z+6, r24	; 0x06
    136c:	37 e0       	ldi	r19, 0x07	; 7
    136e:	63 2e       	mov	r6, r19
    1370:	71 2c       	mov	r7, r1
    1372:	66 0e       	add	r6, r22
    1374:	77 1e       	adc	r7, r23
	stream = UINT16_TO_STREAM(stream, usDataLength + SIMPLE_LINK_HCI_PATCH_HEADER_SIZE);
    1376:	8e 01       	movw	r16, r28
    1378:	0e 5f       	subi	r16, 0xFE	; 254
    137a:	1f 4f       	sbci	r17, 0xFF	; 255
    137c:	c3 01       	movw	r24, r6
    137e:	b8 01       	movw	r22, r16
    1380:	0e 94 45 02 	call	0x48a	; 0x48a <UINT16_TO_STREAM_f>
    1384:	7c 01       	movw	r14, r24
    1386:	2b e0       	ldi	r18, 0x0B	; 11
    1388:	a2 2e       	mov	r10, r18
    138a:	b1 2c       	mov	r11, r1
    138c:	ac 0c       	add	r10, r12
    138e:	bd 1c       	adc	r11, r13

	if (usDataLength <= SL_PATCH_PORTION_SIZE)
    1390:	f3 e0       	ldi	r31, 0x03	; 3
    1392:	c9 3e       	cpi	r28, 0xE9	; 233
    1394:	df 07       	cpc	r29, r31
    1396:	90 f4       	brcc	.+36     	; 0x13bc <hci_patch_send+0x88>
	{
		UINT16_TO_STREAM(stream, usDataLength);
    1398:	be 01       	movw	r22, r28
    139a:	0e 94 45 02 	call	0x48a	; 0x48a <UINT16_TO_STREAM_f>
		stream = UINT16_TO_STREAM(stream, usDataLength);
    139e:	c7 01       	movw	r24, r14
    13a0:	be 01       	movw	r22, r28
    13a2:	0e 94 45 02 	call	0x48a	; 0x48a <UINT16_TO_STREAM_f>
		memcpy((pucBuff + SPI_HEADER_SIZE) + HCI_PATCH_HEADER_SIZE, patch, usDataLength);
    13a6:	c5 01       	movw	r24, r10
    13a8:	b4 01       	movw	r22, r8
    13aa:	ae 01       	movw	r20, r28
    13ac:	0e 94 8b 33 	call	0x6716	; 0x6716 <memcpy>

		// Update the opcode of the event we will be waiting for
		SpiWrite(pucBuff, usDataLength + HCI_PATCH_HEADER_SIZE);
    13b0:	26 96       	adiw	r28, 0x06	; 6
    13b2:	c6 01       	movw	r24, r12
    13b4:	be 01       	movw	r22, r28
    13b6:	0e 94 01 24 	call	0x4802	; 0x4802 <_Z8SpiWritePht>
    13ba:	47 c0       	rjmp	.+142    	; 0x144a <hci_patch_send+0x116>
	}
	else
	{

		usTransLength = (usDataLength/SL_PATCH_PORTION_SIZE);
		UINT16_TO_STREAM(stream, usDataLength + SIMPLE_LINK_HCI_PATCH_HEADER_SIZE + usTransLength*SIMPLE_LINK_HCI_PATCH_HEADER_SIZE);
    13bc:	ce 01       	movw	r24, r28
    13be:	68 ee       	ldi	r22, 0xE8	; 232
    13c0:	73 e0       	ldi	r23, 0x03	; 3
    13c2:	0e 94 08 33 	call	0x6610	; 0x6610 <__udivmodhi4>
    13c6:	66 0f       	add	r22, r22
    13c8:	77 1f       	adc	r23, r23
    13ca:	06 0f       	add	r16, r22
    13cc:	17 1f       	adc	r17, r23
    13ce:	c7 01       	movw	r24, r14
    13d0:	b8 01       	movw	r22, r16
    13d2:	0e 94 45 02 	call	0x48a	; 0x48a <UINT16_TO_STREAM_f>
		stream = UINT16_TO_STREAM(stream, SL_PATCH_PORTION_SIZE);
    13d6:	c7 01       	movw	r24, r14
    13d8:	68 ee       	ldi	r22, 0xE8	; 232
    13da:	73 e0       	ldi	r23, 0x03	; 3
    13dc:	0e 94 45 02 	call	0x48a	; 0x48a <UINT16_TO_STREAM_f>
		memcpy(pucBuff + SPI_HEADER_SIZE + HCI_PATCH_HEADER_SIZE, patch, SL_PATCH_PORTION_SIZE);
    13e0:	d5 01       	movw	r26, r10
    13e2:	f4 01       	movw	r30, r8
    13e4:	88 ee       	ldi	r24, 0xE8	; 232
    13e6:	93 e0       	ldi	r25, 0x03	; 3
    13e8:	01 90       	ld	r0, Z+
    13ea:	0d 92       	st	X+, r0
    13ec:	01 97       	sbiw	r24, 0x01	; 1
    13ee:	e1 f7       	brne	.-8      	; 0x13e8 <hci_patch_send+0xb4>
		usDataLength -= SL_PATCH_PORTION_SIZE;
    13f0:	8e 01       	movw	r16, r28
    13f2:	08 5e       	subi	r16, 0xE8	; 232
    13f4:	13 40       	sbci	r17, 0x03	; 3
		patch += SL_PATCH_PORTION_SIZE;
    13f6:	88 ee       	ldi	r24, 0xE8	; 232
    13f8:	e8 2e       	mov	r14, r24
    13fa:	83 e0       	ldi	r24, 0x03	; 3
    13fc:	f8 2e       	mov	r15, r24
    13fe:	e8 0c       	add	r14, r8
    1400:	f9 1c       	adc	r15, r9

		// Update the opcode of the event we will be waiting for
		SpiWrite(pucBuff, SL_PATCH_PORTION_SIZE + HCI_PATCH_HEADER_SIZE);
    1402:	c6 01       	movw	r24, r12
    1404:	6e ee       	ldi	r22, 0xEE	; 238
    1406:	73 e0       	ldi	r23, 0x03	; 3
    1408:	1b c0       	rjmp	.+54     	; 0x1440 <hci_patch_send+0x10c>
		while (usDataLength)
		{
			// Adafruit CC3k Host Driver Difference
			// Check for missed interrupt to try to make code more reliable.
			// Noted 12-12-2014 by tdicola
			cc3k_int_poll();
    140a:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <cc3k_int_poll>

			if (usDataLength <= SL_PATCH_PORTION_SIZE)
    140e:	83 e0       	ldi	r24, 0x03	; 3
    1410:	09 3e       	cpi	r16, 0xE9	; 233
    1412:	18 07       	cpc	r17, r24
    1414:	20 f4       	brcc	.+8      	; 0x141e <hci_patch_send+0xea>
    1416:	e8 01       	movw	r28, r16
    1418:	00 e0       	ldi	r16, 0x00	; 0
    141a:	10 e0       	ldi	r17, 0x00	; 0
    141c:	04 c0       	rjmp	.+8      	; 0x1426 <hci_patch_send+0xf2>

			}
			else
			{
				usTransLength = SL_PATCH_PORTION_SIZE;
				usDataLength -= usTransLength;
    141e:	08 5e       	subi	r16, 0xE8	; 232
    1420:	13 40       	sbci	r17, 0x03	; 3
    1422:	c8 ee       	ldi	r28, 0xE8	; 232
    1424:	d3 e0       	ldi	r29, 0x03	; 3
			}

			*(UINT16 *)data_ptr = usTransLength;
    1426:	f2 01       	movw	r30, r4
    1428:	d1 83       	std	Z+1, r29	; 0x01
    142a:	c0 83       	st	Z, r28
			memcpy(data_ptr + SIMPLE_LINK_HCI_PATCH_HEADER_SIZE, patch, usTransLength);
    142c:	c3 01       	movw	r24, r6
    142e:	b7 01       	movw	r22, r14
    1430:	ae 01       	movw	r20, r28
    1432:	0e 94 8b 33 	call	0x6716	; 0x6716 <memcpy>
			patch += usTransLength;
    1436:	ec 0e       	add	r14, r28
    1438:	fd 1e       	adc	r15, r29

			// Update the opcode of the event we will be waiting for
			SpiWrite((UINT8 *)data_ptr, usTransLength + sizeof(usTransLength));
    143a:	22 96       	adiw	r28, 0x02	; 2
    143c:	c2 01       	movw	r24, r4
    143e:	be 01       	movw	r22, r28
    1440:	0e 94 01 24 	call	0x4802	; 0x4802 <_Z8SpiWritePht>
		patch += SL_PATCH_PORTION_SIZE;

		// Update the opcode of the event we will be waiting for
		SpiWrite(pucBuff, SL_PATCH_PORTION_SIZE + HCI_PATCH_HEADER_SIZE);

		while (usDataLength)
    1444:	01 15       	cp	r16, r1
    1446:	11 05       	cpc	r17, r1
    1448:	01 f7       	brne	.-64     	; 0x140a <hci_patch_send+0xd6>

			// Update the opcode of the event we will be waiting for
			SpiWrite((UINT8 *)data_ptr, usTransLength + sizeof(usTransLength));
		}
	}
}
    144a:	df 91       	pop	r29
    144c:	cf 91       	pop	r28
    144e:	1f 91       	pop	r17
    1450:	0f 91       	pop	r16
    1452:	ff 90       	pop	r15
    1454:	ef 90       	pop	r14
    1456:	df 90       	pop	r13
    1458:	cf 90       	pop	r12
    145a:	bf 90       	pop	r11
    145c:	af 90       	pop	r10
    145e:	9f 90       	pop	r9
    1460:	8f 90       	pop	r8
    1462:	7f 90       	pop	r7
    1464:	6f 90       	pop	r6
    1466:	5f 90       	pop	r5
    1468:	4f 90       	pop	r4
    146a:	08 95       	ret

0000146c <netapp_ipconfig>:
//!       		the Wireless network the device is associated with.
//!
//*****************************************************************************

#ifndef CC3000_TINY_DRIVER
void netapp_ipconfig( tNetappIpconfigRetArgs * ipconfig )
    146c:	0f 93       	push	r16
    146e:	1f 93       	push	r17
    1470:	8c 01       	movw	r16, r24
{
	UINT8 *ptr;

	ptr = tSLInformation.pucTxCommandBuffer;
    1472:	60 91 40 03 	lds	r22, 0x0340
    1476:	70 91 41 03 	lds	r23, 0x0341

	// Initiate a HCI command
	hci_command_send(HCI_NETAPP_IPCONFIG, ptr, 0);
    147a:	85 e0       	ldi	r24, 0x05	; 5
    147c:	90 e2       	ldi	r25, 0x20	; 32
    147e:	40 e0       	ldi	r20, 0x00	; 0
    1480:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <hci_command_send>

	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_NETAPP_IPCONFIG, ipconfig );
    1484:	85 e0       	ldi	r24, 0x05	; 5
    1486:	90 e2       	ldi	r25, 0x20	; 32
    1488:	b8 01       	movw	r22, r16
    148a:	0e 94 48 09 	call	0x1290	; 0x1290 <SimpleLinkWaitEvent>

}
    148e:	1f 91       	pop	r17
    1490:	0f 91       	pop	r16
    1492:	08 95       	ret

00001494 <netapp_timeout_values>:
//!               it will be set automatically to 10s.
//!
//*****************************************************************************

#ifndef CC3000_TINY_DRIVER
INT32 netapp_timeout_values(UINT32 *aucDHCP, UINT32 *aucARP,UINT32 *aucKeepalive,	UINT32 *aucInactivity)
    1494:	8f 92       	push	r8
    1496:	9f 92       	push	r9
    1498:	af 92       	push	r10
    149a:	bf 92       	push	r11
    149c:	cf 92       	push	r12
    149e:	df 92       	push	r13
    14a0:	ef 92       	push	r14
    14a2:	ff 92       	push	r15
    14a4:	0f 93       	push	r16
    14a6:	1f 93       	push	r17
    14a8:	df 93       	push	r29
    14aa:	cf 93       	push	r28
    14ac:	0f 92       	push	r0
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	4c 01       	movw	r8, r24
    14b4:	8b 01       	movw	r16, r22
    14b6:	7a 01       	movw	r14, r20
    14b8:	69 01       	movw	r12, r18
{
	INT8 scRet;
	UINT8 *ptr;
	UINT8 *args;

	scRet = EFAIL;
    14ba:	8f ef       	ldi	r24, 0xFF	; 255
    14bc:	89 83       	std	Y+1, r24	; 0x01
	ptr = tSLInformation.pucTxCommandBuffer;
    14be:	a0 90 40 03 	lds	r10, 0x0340
    14c2:	b0 90 41 03 	lds	r11, 0x0341
	args = (ptr + HEADERS_SIZE_CMD);

	// Set minimal values of timers 
	MIN_TIMER_SET(*aucDHCP)
    14c6:	f4 01       	movw	r30, r8
    14c8:	80 81       	ld	r24, Z
    14ca:	91 81       	ldd	r25, Z+1	; 0x01
    14cc:	a2 81       	ldd	r26, Z+2	; 0x02
    14ce:	b3 81       	ldd	r27, Z+3	; 0x03
    14d0:	01 97       	sbiw	r24, 0x01	; 1
    14d2:	a1 09       	sbc	r26, r1
    14d4:	b1 09       	sbc	r27, r1
    14d6:	09 97       	sbiw	r24, 0x09	; 9
    14d8:	a1 05       	cpc	r26, r1
    14da:	b1 05       	cpc	r27, r1
    14dc:	40 f4       	brcc	.+16     	; 0x14ee <netapp_timeout_values+0x5a>
    14de:	8a e0       	ldi	r24, 0x0A	; 10
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	a0 e0       	ldi	r26, 0x00	; 0
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	80 83       	st	Z, r24
    14e8:	91 83       	std	Z+1, r25	; 0x01
    14ea:	a2 83       	std	Z+2, r26	; 0x02
    14ec:	b3 83       	std	Z+3, r27	; 0x03
		MIN_TIMER_SET(*aucARP)
    14ee:	f8 01       	movw	r30, r16
    14f0:	80 81       	ld	r24, Z
    14f2:	91 81       	ldd	r25, Z+1	; 0x01
    14f4:	a2 81       	ldd	r26, Z+2	; 0x02
    14f6:	b3 81       	ldd	r27, Z+3	; 0x03
    14f8:	01 97       	sbiw	r24, 0x01	; 1
    14fa:	a1 09       	sbc	r26, r1
    14fc:	b1 09       	sbc	r27, r1
    14fe:	09 97       	sbiw	r24, 0x09	; 9
    1500:	a1 05       	cpc	r26, r1
    1502:	b1 05       	cpc	r27, r1
    1504:	40 f4       	brcc	.+16     	; 0x1516 <netapp_timeout_values+0x82>
    1506:	8a e0       	ldi	r24, 0x0A	; 10
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	a0 e0       	ldi	r26, 0x00	; 0
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	80 83       	st	Z, r24
    1510:	91 83       	std	Z+1, r25	; 0x01
    1512:	a2 83       	std	Z+2, r26	; 0x02
    1514:	b3 83       	std	Z+3, r27	; 0x03
		MIN_TIMER_SET(*aucKeepalive)
    1516:	f7 01       	movw	r30, r14
    1518:	80 81       	ld	r24, Z
    151a:	91 81       	ldd	r25, Z+1	; 0x01
    151c:	a2 81       	ldd	r26, Z+2	; 0x02
    151e:	b3 81       	ldd	r27, Z+3	; 0x03
    1520:	01 97       	sbiw	r24, 0x01	; 1
    1522:	a1 09       	sbc	r26, r1
    1524:	b1 09       	sbc	r27, r1
    1526:	09 97       	sbiw	r24, 0x09	; 9
    1528:	a1 05       	cpc	r26, r1
    152a:	b1 05       	cpc	r27, r1
    152c:	40 f4       	brcc	.+16     	; 0x153e <netapp_timeout_values+0xaa>
    152e:	8a e0       	ldi	r24, 0x0A	; 10
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	a0 e0       	ldi	r26, 0x00	; 0
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	80 83       	st	Z, r24
    1538:	91 83       	std	Z+1, r25	; 0x01
    153a:	a2 83       	std	Z+2, r26	; 0x02
    153c:	b3 83       	std	Z+3, r27	; 0x03
		MIN_TIMER_SET(*aucInactivity)
    153e:	f6 01       	movw	r30, r12
    1540:	80 81       	ld	r24, Z
    1542:	91 81       	ldd	r25, Z+1	; 0x01
    1544:	a2 81       	ldd	r26, Z+2	; 0x02
    1546:	b3 81       	ldd	r27, Z+3	; 0x03
    1548:	01 97       	sbiw	r24, 0x01	; 1
    154a:	a1 09       	sbc	r26, r1
    154c:	b1 09       	sbc	r27, r1
    154e:	09 97       	sbiw	r24, 0x09	; 9
    1550:	a1 05       	cpc	r26, r1
    1552:	b1 05       	cpc	r27, r1
    1554:	40 f4       	brcc	.+16     	; 0x1566 <netapp_timeout_values+0xd2>
    1556:	8a e0       	ldi	r24, 0x0A	; 10
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	a0 e0       	ldi	r26, 0x00	; 0
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	80 83       	st	Z, r24
    1560:	91 83       	std	Z+1, r25	; 0x01
    1562:	a2 83       	std	Z+2, r26	; 0x02
    1564:	b3 83       	std	Z+3, r27	; 0x03

		// Fill in temporary command buffer
		args = UINT32_TO_STREAM(args, *aucDHCP);
    1566:	f4 01       	movw	r30, r8
    1568:	40 81       	ld	r20, Z
    156a:	51 81       	ldd	r21, Z+1	; 0x01
    156c:	62 81       	ldd	r22, Z+2	; 0x02
    156e:	73 81       	ldd	r23, Z+3	; 0x03
    1570:	c5 01       	movw	r24, r10
    1572:	09 96       	adiw	r24, 0x09	; 9
    1574:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, *aucARP);
    1578:	f8 01       	movw	r30, r16
    157a:	40 81       	ld	r20, Z
    157c:	51 81       	ldd	r21, Z+1	; 0x01
    157e:	62 81       	ldd	r22, Z+2	; 0x02
    1580:	73 81       	ldd	r23, Z+3	; 0x03
    1582:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, *aucKeepalive);
    1586:	f7 01       	movw	r30, r14
    1588:	40 81       	ld	r20, Z
    158a:	51 81       	ldd	r21, Z+1	; 0x01
    158c:	62 81       	ldd	r22, Z+2	; 0x02
    158e:	73 81       	ldd	r23, Z+3	; 0x03
    1590:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, *aucInactivity);
    1594:	f6 01       	movw	r30, r12
    1596:	40 81       	ld	r20, Z
    1598:	51 81       	ldd	r21, Z+1	; 0x01
    159a:	62 81       	ldd	r22, Z+2	; 0x02
    159c:	73 81       	ldd	r23, Z+3	; 0x03
    159e:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>

	// Initiate a HCI command
	hci_command_send(HCI_NETAPP_SET_TIMERS, ptr, NETAPP_SET_TIMER_PARAMS_LEN);
    15a2:	89 e0       	ldi	r24, 0x09	; 9
    15a4:	90 e2       	ldi	r25, 0x20	; 32
    15a6:	b5 01       	movw	r22, r10
    15a8:	44 e1       	ldi	r20, 0x14	; 20
    15aa:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <hci_command_send>

	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_NETAPP_SET_TIMERS, &scRet);
    15ae:	89 e0       	ldi	r24, 0x09	; 9
    15b0:	90 e2       	ldi	r25, 0x20	; 32
    15b2:	be 01       	movw	r22, r28
    15b4:	6f 5f       	subi	r22, 0xFF	; 255
    15b6:	7f 4f       	sbci	r23, 0xFF	; 255
    15b8:	0e 94 48 09 	call	0x1290	; 0x1290 <SimpleLinkWaitEvent>
    15bc:	29 81       	ldd	r18, Y+1	; 0x01
    15be:	33 27       	eor	r19, r19
    15c0:	27 fd       	sbrc	r18, 7
    15c2:	30 95       	com	r19
    15c4:	43 2f       	mov	r20, r19
    15c6:	53 2f       	mov	r21, r19

	return(scRet);
}
    15c8:	b9 01       	movw	r22, r18
    15ca:	ca 01       	movw	r24, r20
    15cc:	0f 90       	pop	r0
    15ce:	cf 91       	pop	r28
    15d0:	df 91       	pop	r29
    15d2:	1f 91       	pop	r17
    15d4:	0f 91       	pop	r16
    15d6:	ff 90       	pop	r15
    15d8:	ef 90       	pop	r14
    15da:	df 90       	pop	r13
    15dc:	cf 90       	pop	r12
    15de:	bf 90       	pop	r11
    15e0:	af 90       	pop	r10
    15e2:	9f 90       	pop	r9
    15e4:	8f 90       	pop	r8
    15e6:	08 95       	ret

000015e8 <mdnsAdvertiser>:
//!
//!  @brief    Set CC3000 in mDNS advertiser mode in order to advertise itself.
//
//*****************************************************************************

INT16 mdnsAdvertiser(UINT16 mdnsEnabled, CHAR * deviceServiceName, UINT16 deviceServiceNameLength)
    15e8:	cf 92       	push	r12
    15ea:	df 92       	push	r13
    15ec:	ef 92       	push	r14
    15ee:	ff 92       	push	r15
    15f0:	0f 93       	push	r16
    15f2:	1f 93       	push	r17
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	0f 92       	push	r0
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	d6 2e       	mov	r13, r22
    1600:	c7 2e       	mov	r12, r23
    1602:	8a 01       	movw	r16, r20
{
	INT8 ret;
	UINT8 *pTxBuffer, *pArgs;

	if (deviceServiceNameLength > MDNS_DEVICE_SERVICE_MAX_LENGTH)
    1604:	41 32       	cpi	r20, 0x21	; 33
    1606:	51 05       	cpc	r21, r1
    1608:	18 f0       	brcs	.+6      	; 0x1610 <mdnsAdvertiser+0x28>
    160a:	2f ef       	ldi	r18, 0xFF	; 255
    160c:	3f ef       	ldi	r19, 0xFF	; 255
    160e:	36 c0       	rjmp	.+108    	; 0x167c <mdnsAdvertiser+0x94>
	{
		return EFAIL;
	}

	pTxBuffer = tSLInformation.pucTxCommandBuffer;
    1610:	e0 90 40 03 	lds	r14, 0x0340
    1614:	f0 90 41 03 	lds	r15, 0x0341
	pArgs = (pTxBuffer + SIMPLE_LINK_HCI_CMND_TRANSPORT_HEADER_SIZE);

	// Fill in HCI packet structure
	pArgs = UINT32_TO_STREAM(pArgs, mdnsEnabled);
    1618:	ac 01       	movw	r20, r24
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	c7 01       	movw	r24, r14
    1620:	09 96       	adiw	r24, 0x09	; 9
    1622:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	pArgs = UINT32_TO_STREAM(pArgs, 8);
    1626:	48 e0       	ldi	r20, 0x08	; 8
    1628:	50 e0       	ldi	r21, 0x00	; 0
    162a:	60 e0       	ldi	r22, 0x00	; 0
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	pArgs = UINT32_TO_STREAM(pArgs, deviceServiceNameLength);
    1632:	a8 01       	movw	r20, r16
    1634:	60 e0       	ldi	r22, 0x00	; 0
    1636:	70 e0       	ldi	r23, 0x00	; 0
    1638:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
    163c:	dc 01       	movw	r26, r24
    163e:	8d 2d       	mov	r24, r13
    1640:	9c 2d       	mov	r25, r12
    1642:	fc 01       	movw	r30, r24
	ARRAY_TO_STREAM(pArgs, deviceServiceName, deviceServiceNameLength);
    1644:	9f 01       	movw	r18, r30
    1646:	20 0f       	add	r18, r16
    1648:	31 1f       	adc	r19, r17
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <mdnsAdvertiser+0x68>
    164c:	81 91       	ld	r24, Z+
    164e:	8d 93       	st	X+, r24
    1650:	e2 17       	cp	r30, r18
    1652:	f3 07       	cpc	r31, r19
    1654:	d9 f7       	brne	.-10     	; 0x164c <mdnsAdvertiser+0x64>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_MDNS_ADVERTISE, pTxBuffer, SOCKET_MDNS_ADVERTISE_PARAMS_LEN + deviceServiceNameLength);
    1656:	40 2f       	mov	r20, r16
    1658:	44 5f       	subi	r20, 0xF4	; 244
    165a:	81 e1       	ldi	r24, 0x11	; 17
    165c:	90 e1       	ldi	r25, 0x10	; 16
    165e:	b7 01       	movw	r22, r14
    1660:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_EVNT_MDNS_ADVERTISE, &ret);
    1664:	81 e1       	ldi	r24, 0x11	; 17
    1666:	90 e1       	ldi	r25, 0x10	; 16
    1668:	be 01       	movw	r22, r28
    166a:	6f 5f       	subi	r22, 0xFF	; 255
    166c:	7f 4f       	sbci	r23, 0xFF	; 255
    166e:	0e 94 48 09 	call	0x1290	; 0x1290 <SimpleLinkWaitEvent>

	return ret;
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	28 2f       	mov	r18, r24
    1676:	33 27       	eor	r19, r19
    1678:	27 fd       	sbrc	r18, 7
    167a:	30 95       	com	r19

}
    167c:	c9 01       	movw	r24, r18
    167e:	0f 90       	pop	r0
    1680:	cf 91       	pop	r28
    1682:	df 91       	pop	r29
    1684:	1f 91       	pop	r17
    1686:	0f 91       	pop	r16
    1688:	ff 90       	pop	r15
    168a:	ef 90       	pop	r14
    168c:	df 90       	pop	r13
    168e:	cf 90       	pop	r12
    1690:	08 95       	ret

00001692 <setsockopt>:
//
//*****************************************************************************

#ifndef CC3000_TINY_DRIVER
INT16 setsockopt(INT32 sd, INT32 level, INT32 optname, const void *optval,
	socklen_t optlen)
    1692:	2f 92       	push	r2
    1694:	3f 92       	push	r3
    1696:	4f 92       	push	r4
    1698:	5f 92       	push	r5
    169a:	6f 92       	push	r6
    169c:	7f 92       	push	r7
    169e:	8f 92       	push	r8
    16a0:	9f 92       	push	r9
    16a2:	af 92       	push	r10
    16a4:	bf 92       	push	r11
    16a6:	cf 92       	push	r12
    16a8:	df 92       	push	r13
    16aa:	ef 92       	push	r14
    16ac:	ff 92       	push	r15
    16ae:	0f 93       	push	r16
    16b0:	1f 93       	push	r17
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	28 97       	sbiw	r28, 0x08	; 8
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	f8 94       	cli
    16c0:	de bf       	out	0x3e, r29	; 62
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	cd bf       	out	0x3d, r28	; 61
    16c6:	2b 01       	movw	r4, r22
    16c8:	3c 01       	movw	r6, r24
    16ca:	2d 83       	std	Y+5, r18	; 0x05
    16cc:	3e 83       	std	Y+6, r19	; 0x06
    16ce:	4f 83       	std	Y+7, r20	; 0x07
    16d0:	58 87       	std	Y+8, r21	; 0x08
    16d2:	16 01       	movw	r2, r12
{
	INT32 ret;
	UINT8 *ptr, *args;

	ptr = tSLInformation.pucTxCommandBuffer;
    16d4:	c0 90 40 03 	lds	r12, 0x0340
    16d8:	d0 90 41 03 	lds	r13, 0x0341
	args = (ptr + HEADERS_SIZE_CMD);

	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, sd);
    16dc:	c6 01       	movw	r24, r12
    16de:	09 96       	adiw	r24, 0x09	; 9
    16e0:	b3 01       	movw	r22, r6
    16e2:	a2 01       	movw	r20, r4
    16e4:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, level);
    16e8:	4d 81       	ldd	r20, Y+5	; 0x05
    16ea:	5e 81       	ldd	r21, Y+6	; 0x06
    16ec:	6f 81       	ldd	r22, Y+7	; 0x07
    16ee:	78 85       	ldd	r23, Y+8	; 0x08
    16f0:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, optname);
    16f4:	b8 01       	movw	r22, r16
    16f6:	a7 01       	movw	r20, r14
    16f8:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, 0x00000008);
    16fc:	48 e0       	ldi	r20, 0x08	; 8
    16fe:	50 e0       	ldi	r21, 0x00	; 0
    1700:	60 e0       	ldi	r22, 0x00	; 0
    1702:	70 e0       	ldi	r23, 0x00	; 0
    1704:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, optlen);
    1708:	b5 01       	movw	r22, r10
    170a:	a4 01       	movw	r20, r8
    170c:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
    1710:	bc 01       	movw	r22, r24
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	40 e0       	ldi	r20, 0x00	; 0
    1718:	50 e0       	ldi	r21, 0x00	; 0
    171a:	0c c0       	rjmp	.+24     	; 0x1734 <setsockopt+0xa2>
//
//*****************************************************************************

#ifndef CC3000_TINY_DRIVER
INT16 setsockopt(INT32 sd, INT32 level, INT32 optname, const void *optval,
	socklen_t optlen)
    171c:	f9 01       	movw	r30, r18
	args = UINT32_TO_STREAM(args, sd);
	args = UINT32_TO_STREAM(args, level);
	args = UINT32_TO_STREAM(args, optname);
	args = UINT32_TO_STREAM(args, 0x00000008);
	args = UINT32_TO_STREAM(args, optlen);
	ARRAY_TO_STREAM(args, ((UINT8 *)optval), optlen);
    171e:	db 01       	movw	r26, r22
    1720:	a2 0f       	add	r26, r18
    1722:	b3 1f       	adc	r27, r19
    1724:	e2 0d       	add	r30, r2
    1726:	f3 1d       	adc	r31, r3
    1728:	80 81       	ld	r24, Z
    172a:	8c 93       	st	X, r24
    172c:	2f 5f       	subi	r18, 0xFF	; 255
    172e:	3f 4f       	sbci	r19, 0xFF	; 255
    1730:	4f 4f       	sbci	r20, 0xFF	; 255
    1732:	5f 4f       	sbci	r21, 0xFF	; 255
    1734:	28 15       	cp	r18, r8
    1736:	39 05       	cpc	r19, r9
    1738:	4a 05       	cpc	r20, r10
    173a:	5b 05       	cpc	r21, r11
    173c:	78 f3       	brcs	.-34     	; 0x171c <setsockopt+0x8a>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_SETSOCKOPT,
		ptr, SOCKET_SET_SOCK_OPT_PARAMS_LEN  + optlen);
    173e:	48 2d       	mov	r20, r8
    1740:	4c 5e       	subi	r20, 0xEC	; 236
    1742:	89 e0       	ldi	r24, 0x09	; 9
    1744:	90 e1       	ldi	r25, 0x10	; 16
    1746:	b6 01       	movw	r22, r12
    1748:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_SETSOCKOPT, &ret);
    174c:	89 e0       	ldi	r24, 0x09	; 9
    174e:	90 e1       	ldi	r25, 0x10	; 16
    1750:	be 01       	movw	r22, r28
    1752:	6f 5f       	subi	r22, 0xFF	; 255
    1754:	7f 4f       	sbci	r23, 0xFF	; 255
    1756:	0e 94 48 09 	call	0x1290	; 0x1290 <SimpleLinkWaitEvent>

	if (ret >= 0)
    175a:	29 81       	ldd	r18, Y+1	; 0x01
    175c:	3a 81       	ldd	r19, Y+2	; 0x02
    175e:	4b 81       	ldd	r20, Y+3	; 0x03
    1760:	5c 81       	ldd	r21, Y+4	; 0x04
    1762:	57 fd       	sbrc	r21, 7
    1764:	03 c0       	rjmp	.+6      	; 0x176c <setsockopt+0xda>
    1766:	60 e0       	ldi	r22, 0x00	; 0
    1768:	70 e0       	ldi	r23, 0x00	; 0
    176a:	05 c0       	rjmp	.+10     	; 0x1776 <setsockopt+0xe4>
	{
		return (0);
	}
	else
	{
		errno = ret;
    176c:	b9 01       	movw	r22, r18
    176e:	30 93 40 07 	sts	0x0740, r19
    1772:	20 93 3f 07 	sts	0x073F, r18
		return ret;
	}
}
    1776:	cb 01       	movw	r24, r22
    1778:	28 96       	adiw	r28, 0x08	; 8
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	de bf       	out	0x3e, r29	; 62
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	cd bf       	out	0x3d, r28	; 61
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	1f 91       	pop	r17
    178a:	0f 91       	pop	r16
    178c:	ff 90       	pop	r15
    178e:	ef 90       	pop	r14
    1790:	df 90       	pop	r13
    1792:	cf 90       	pop	r12
    1794:	bf 90       	pop	r11
    1796:	af 90       	pop	r10
    1798:	9f 90       	pop	r9
    179a:	8f 90       	pop	r8
    179c:	7f 90       	pop	r7
    179e:	6f 90       	pop	r6
    17a0:	5f 90       	pop	r5
    17a2:	4f 90       	pop	r4
    17a4:	3f 90       	pop	r3
    17a6:	2f 90       	pop	r2
    17a8:	08 95       	ret

000017aa <connect>:
//!
//!  @sa socket
//
//*****************************************************************************

INT32 connect(INT32 sd, const sockaddr *addr, INT32 addrlen)
    17aa:	cf 92       	push	r12
    17ac:	df 92       	push	r13
    17ae:	ef 92       	push	r14
    17b0:	ff 92       	push	r15
    17b2:	0f 93       	push	r16
    17b4:	1f 93       	push	r17
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <connect+0x12>
    17bc:	00 d0       	rcall	.+0      	; 0x17be <connect+0x14>
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	8b 01       	movw	r16, r22
    17c4:	9c 01       	movw	r18, r24
    17c6:	f4 2e       	mov	r15, r20
    17c8:	e5 2e       	mov	r14, r21
{
	INT32 ret;
	UINT8 *ptr, *args;

	ret = EFAIL;
    17ca:	8f ef       	ldi	r24, 0xFF	; 255
    17cc:	9f ef       	ldi	r25, 0xFF	; 255
    17ce:	af ef       	ldi	r26, 0xFF	; 255
    17d0:	bf ef       	ldi	r27, 0xFF	; 255
    17d2:	89 83       	std	Y+1, r24	; 0x01
    17d4:	9a 83       	std	Y+2, r25	; 0x02
    17d6:	ab 83       	std	Y+3, r26	; 0x03
    17d8:	bc 83       	std	Y+4, r27	; 0x04
	ptr = tSLInformation.pucTxCommandBuffer;
    17da:	c0 90 40 03 	lds	r12, 0x0340
    17de:	d0 90 41 03 	lds	r13, 0x0341
	args = (ptr + SIMPLE_LINK_HCI_CMND_TRANSPORT_HEADER_SIZE);
	addrlen = 8;

	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, sd);
    17e2:	c6 01       	movw	r24, r12
    17e4:	09 96       	adiw	r24, 0x09	; 9
    17e6:	b9 01       	movw	r22, r18
    17e8:	a8 01       	movw	r20, r16
    17ea:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, 0x00000008);
    17ee:	48 e0       	ldi	r20, 0x08	; 8
    17f0:	50 e0       	ldi	r21, 0x00	; 0
    17f2:	60 e0       	ldi	r22, 0x00	; 0
    17f4:	70 e0       	ldi	r23, 0x00	; 0
    17f6:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, addrlen);
    17fa:	48 e0       	ldi	r20, 0x08	; 8
    17fc:	50 e0       	ldi	r21, 0x00	; 0
    17fe:	60 e0       	ldi	r22, 0x00	; 0
    1800:	70 e0       	ldi	r23, 0x00	; 0
    1802:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
    1806:	dc 01       	movw	r26, r24
    1808:	8f 2d       	mov	r24, r15
    180a:	9e 2d       	mov	r25, r14
    180c:	fc 01       	movw	r30, r24
	ARRAY_TO_STREAM(args, ((UINT8 *)addr), addrlen);
    180e:	9f 01       	movw	r18, r30
    1810:	28 5f       	subi	r18, 0xF8	; 248
    1812:	3f 4f       	sbci	r19, 0xFF	; 255
    1814:	81 91       	ld	r24, Z+
    1816:	8d 93       	st	X+, r24
    1818:	e2 17       	cp	r30, r18
    181a:	f3 07       	cpc	r31, r19
    181c:	d9 f7       	brne	.-10     	; 0x1814 <connect+0x6a>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_CONNECT,
		ptr, SOCKET_CONNECT_PARAMS_LEN);
    181e:	87 e0       	ldi	r24, 0x07	; 7
    1820:	90 e1       	ldi	r25, 0x10	; 16
    1822:	b6 01       	movw	r22, r12
    1824:	44 e1       	ldi	r20, 0x14	; 20
    1826:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_CONNECT, &ret);
    182a:	87 e0       	ldi	r24, 0x07	; 7
    182c:	90 e1       	ldi	r25, 0x10	; 16
    182e:	be 01       	movw	r22, r28
    1830:	6f 5f       	subi	r22, 0xFF	; 255
    1832:	7f 4f       	sbci	r23, 0xFF	; 255
    1834:	0e 94 48 09 	call	0x1290	; 0x1290 <SimpleLinkWaitEvent>

	errno = ret;
    1838:	69 81       	ldd	r22, Y+1	; 0x01
    183a:	7a 81       	ldd	r23, Y+2	; 0x02
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	9c 81       	ldd	r25, Y+4	; 0x04
    1840:	9b 01       	movw	r18, r22
    1842:	20 93 3f 07 	sts	0x073F, r18
    1846:	30 93 40 07 	sts	0x0740, r19

	return((INT32)ret);
}
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	cf 91       	pop	r28
    1854:	df 91       	pop	r29
    1856:	1f 91       	pop	r17
    1858:	0f 91       	pop	r16
    185a:	ff 90       	pop	r15
    185c:	ef 90       	pop	r14
    185e:	df 90       	pop	r13
    1860:	cf 90       	pop	r12
    1862:	08 95       	ret

00001864 <gethostbyname>:
// Adafruit CC3k Host Driver Difference
// Make hostname a const char pointer because it isn't modified and the Adafruit
// driver code needs it to be const to interface with Arduino's client library.
// Noted 12-12-2014 by tdicola
INT16 gethostbyname(const CHAR * hostname, UINT16 usNameLen, 
	UINT32* out_ip_addr)
    1864:	af 92       	push	r10
    1866:	bf 92       	push	r11
    1868:	cf 92       	push	r12
    186a:	df 92       	push	r13
    186c:	ef 92       	push	r14
    186e:	ff 92       	push	r15
    1870:	0f 93       	push	r16
    1872:	1f 93       	push	r17
    1874:	df 93       	push	r29
    1876:	cf 93       	push	r28
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	28 97       	sbiw	r28, 0x08	; 8
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	cd bf       	out	0x3d, r28	; 61
    1888:	b8 2e       	mov	r11, r24
    188a:	a9 2e       	mov	r10, r25
    188c:	8b 01       	movw	r16, r22
    188e:	6a 01       	movw	r12, r20
{
	tBsdGethostbynameParams ret;
	UINT8 *ptr, *args;

	errno = EFAIL;
    1890:	8f ef       	ldi	r24, 0xFF	; 255
    1892:	9f ef       	ldi	r25, 0xFF	; 255
    1894:	90 93 40 07 	sts	0x0740, r25
    1898:	80 93 3f 07 	sts	0x073F, r24

	if (usNameLen > HOSTNAME_MAX_LENGTH)
    189c:	67 3e       	cpi	r22, 0xE7	; 231
    189e:	71 05       	cpc	r23, r1
    18a0:	18 f0       	brcs	.+6      	; 0x18a8 <gethostbyname+0x44>
    18a2:	2f ef       	ldi	r18, 0xFF	; 255
    18a4:	3f ef       	ldi	r19, 0xFF	; 255
    18a6:	3b c0       	rjmp	.+118    	; 0x191e <gethostbyname+0xba>
	{
		return errno;
	}

	ptr = tSLInformation.pucTxCommandBuffer;
    18a8:	e0 90 40 03 	lds	r14, 0x0340
    18ac:	f0 90 41 03 	lds	r15, 0x0341
	args = (ptr + SIMPLE_LINK_HCI_CMND_TRANSPORT_HEADER_SIZE);

	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, 8);
    18b0:	c7 01       	movw	r24, r14
    18b2:	09 96       	adiw	r24, 0x09	; 9
    18b4:	48 e0       	ldi	r20, 0x08	; 8
    18b6:	50 e0       	ldi	r21, 0x00	; 0
    18b8:	60 e0       	ldi	r22, 0x00	; 0
    18ba:	70 e0       	ldi	r23, 0x00	; 0
    18bc:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, usNameLen);
    18c0:	a8 01       	movw	r20, r16
    18c2:	60 e0       	ldi	r22, 0x00	; 0
    18c4:	70 e0       	ldi	r23, 0x00	; 0
    18c6:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
    18ca:	dc 01       	movw	r26, r24
    18cc:	8b 2d       	mov	r24, r11
    18ce:	9a 2d       	mov	r25, r10
    18d0:	fc 01       	movw	r30, r24
	ARRAY_TO_STREAM(args, hostname, usNameLen);
    18d2:	9f 01       	movw	r18, r30
    18d4:	20 0f       	add	r18, r16
    18d6:	31 1f       	adc	r19, r17
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <gethostbyname+0x7a>
    18da:	81 91       	ld	r24, Z+
    18dc:	8d 93       	st	X+, r24
    18de:	e2 17       	cp	r30, r18
    18e0:	f3 07       	cpc	r31, r19
    18e2:	d9 f7       	brne	.-10     	; 0x18da <gethostbyname+0x76>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_GETHOSTNAME, ptr, SOCKET_GET_HOST_BY_NAME_PARAMS_LEN
		+ usNameLen - 1);
    18e4:	40 2f       	mov	r20, r16
    18e6:	48 5f       	subi	r20, 0xF8	; 248
    18e8:	80 e1       	ldi	r24, 0x10	; 16
    18ea:	90 e1       	ldi	r25, 0x10	; 16
    18ec:	b7 01       	movw	r22, r14
    18ee:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_EVNT_BSD_GETHOSTBYNAME, &ret);
    18f2:	80 e1       	ldi	r24, 0x10	; 16
    18f4:	90 e1       	ldi	r25, 0x10	; 16
    18f6:	be 01       	movw	r22, r28
    18f8:	6f 5f       	subi	r22, 0xFF	; 255
    18fa:	7f 4f       	sbci	r23, 0xFF	; 255
    18fc:	0e 94 48 09 	call	0x1290	; 0x1290 <SimpleLinkWaitEvent>

	errno = ret.retVal;
    1900:	29 81       	ldd	r18, Y+1	; 0x01
    1902:	3a 81       	ldd	r19, Y+2	; 0x02
    1904:	30 93 40 07 	sts	0x0740, r19
    1908:	20 93 3f 07 	sts	0x073F, r18

	(*((INT32*)out_ip_addr)) = ret.outputAddress;
    190c:	8d 81       	ldd	r24, Y+5	; 0x05
    190e:	9e 81       	ldd	r25, Y+6	; 0x06
    1910:	af 81       	ldd	r26, Y+7	; 0x07
    1912:	b8 85       	ldd	r27, Y+8	; 0x08
    1914:	f6 01       	movw	r30, r12
    1916:	80 83       	st	Z, r24
    1918:	91 83       	std	Z+1, r25	; 0x01
    191a:	a2 83       	std	Z+2, r26	; 0x02
    191c:	b3 83       	std	Z+3, r27	; 0x03

	return (errno);

}
    191e:	c9 01       	movw	r24, r18
    1920:	28 96       	adiw	r28, 0x08	; 8
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	f8 94       	cli
    1926:	de bf       	out	0x3e, r29	; 62
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	cd bf       	out	0x3d, r28	; 61
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	1f 91       	pop	r17
    1932:	0f 91       	pop	r16
    1934:	ff 90       	pop	r15
    1936:	ef 90       	pop	r14
    1938:	df 90       	pop	r13
    193a:	cf 90       	pop	r12
    193c:	bf 90       	pop	r11
    193e:	af 90       	pop	r10
    1940:	08 95       	ret

00001942 <listen>:
//!
//! @note   On this version, backlog is not supported
//
//*****************************************************************************

INT32 listen(INT32 sd, INT32 backlog)
    1942:	8f 92       	push	r8
    1944:	9f 92       	push	r9
    1946:	af 92       	push	r10
    1948:	bf 92       	push	r11
    194a:	cf 92       	push	r12
    194c:	df 92       	push	r13
    194e:	ef 92       	push	r14
    1950:	ff 92       	push	r15
    1952:	0f 93       	push	r16
    1954:	1f 93       	push	r17
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	00 d0       	rcall	.+0      	; 0x195c <listen+0x1a>
    195c:	00 d0       	rcall	.+0      	; 0x195e <listen+0x1c>
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
    1962:	7b 01       	movw	r14, r22
    1964:	8c 01       	movw	r16, r24
    1966:	59 01       	movw	r10, r18
    1968:	6a 01       	movw	r12, r20
{
	INT32 ret;
	UINT8 *ptr, *args;

	ret = EFAIL;
    196a:	8f ef       	ldi	r24, 0xFF	; 255
    196c:	9f ef       	ldi	r25, 0xFF	; 255
    196e:	af ef       	ldi	r26, 0xFF	; 255
    1970:	bf ef       	ldi	r27, 0xFF	; 255
    1972:	89 83       	std	Y+1, r24	; 0x01
    1974:	9a 83       	std	Y+2, r25	; 0x02
    1976:	ab 83       	std	Y+3, r26	; 0x03
    1978:	bc 83       	std	Y+4, r27	; 0x04
	ptr = tSLInformation.pucTxCommandBuffer;
    197a:	80 90 40 03 	lds	r8, 0x0340
    197e:	90 90 41 03 	lds	r9, 0x0341
	args = (ptr + HEADERS_SIZE_CMD);

	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, sd);
    1982:	c4 01       	movw	r24, r8
    1984:	09 96       	adiw	r24, 0x09	; 9
    1986:	b8 01       	movw	r22, r16
    1988:	a7 01       	movw	r20, r14
    198a:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, backlog);
    198e:	b6 01       	movw	r22, r12
    1990:	a5 01       	movw	r20, r10
    1992:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_LISTEN,
		ptr, SOCKET_LISTEN_PARAMS_LEN);
    1996:	86 e0       	ldi	r24, 0x06	; 6
    1998:	90 e1       	ldi	r25, 0x10	; 16
    199a:	b4 01       	movw	r22, r8
    199c:	48 e0       	ldi	r20, 0x08	; 8
    199e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_LISTEN, &ret);
    19a2:	86 e0       	ldi	r24, 0x06	; 6
    19a4:	90 e1       	ldi	r25, 0x10	; 16
    19a6:	be 01       	movw	r22, r28
    19a8:	6f 5f       	subi	r22, 0xFF	; 255
    19aa:	7f 4f       	sbci	r23, 0xFF	; 255
    19ac:	0e 94 48 09 	call	0x1290	; 0x1290 <SimpleLinkWaitEvent>
	errno = ret;
    19b0:	69 81       	ldd	r22, Y+1	; 0x01
    19b2:	7a 81       	ldd	r23, Y+2	; 0x02
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	9c 81       	ldd	r25, Y+4	; 0x04
    19b8:	9b 01       	movw	r18, r22
    19ba:	20 93 3f 07 	sts	0x073F, r18
    19be:	30 93 40 07 	sts	0x0740, r19

	return(ret);
}
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	1f 91       	pop	r17
    19d0:	0f 91       	pop	r16
    19d2:	ff 90       	pop	r15
    19d4:	ef 90       	pop	r14
    19d6:	df 90       	pop	r13
    19d8:	cf 90       	pop	r12
    19da:	bf 90       	pop	r11
    19dc:	af 90       	pop	r10
    19de:	9f 90       	pop	r9
    19e0:	8f 90       	pop	r8
    19e2:	08 95       	ret

000019e4 <bind>:
//!
//! @sa     socket ; accept ; listen
//
//*****************************************************************************

INT32 bind(INT32 sd, const sockaddr *addr, INT32 addrlen)
    19e4:	cf 92       	push	r12
    19e6:	df 92       	push	r13
    19e8:	ef 92       	push	r14
    19ea:	ff 92       	push	r15
    19ec:	0f 93       	push	r16
    19ee:	1f 93       	push	r17
    19f0:	df 93       	push	r29
    19f2:	cf 93       	push	r28
    19f4:	00 d0       	rcall	.+0      	; 0x19f6 <bind+0x12>
    19f6:	00 d0       	rcall	.+0      	; 0x19f8 <bind+0x14>
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
    19fc:	8b 01       	movw	r16, r22
    19fe:	9c 01       	movw	r18, r24
    1a00:	f4 2e       	mov	r15, r20
    1a02:	e5 2e       	mov	r14, r21
{
	INT32 ret;
	UINT8 *ptr, *args;

	ret = EFAIL;
    1a04:	8f ef       	ldi	r24, 0xFF	; 255
    1a06:	9f ef       	ldi	r25, 0xFF	; 255
    1a08:	af ef       	ldi	r26, 0xFF	; 255
    1a0a:	bf ef       	ldi	r27, 0xFF	; 255
    1a0c:	89 83       	std	Y+1, r24	; 0x01
    1a0e:	9a 83       	std	Y+2, r25	; 0x02
    1a10:	ab 83       	std	Y+3, r26	; 0x03
    1a12:	bc 83       	std	Y+4, r27	; 0x04
	ptr = tSLInformation.pucTxCommandBuffer;
    1a14:	c0 90 40 03 	lds	r12, 0x0340
    1a18:	d0 90 41 03 	lds	r13, 0x0341
	args = (ptr + HEADERS_SIZE_CMD);

	addrlen = ASIC_ADDR_LEN;

	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, sd);
    1a1c:	c6 01       	movw	r24, r12
    1a1e:	09 96       	adiw	r24, 0x09	; 9
    1a20:	b9 01       	movw	r22, r18
    1a22:	a8 01       	movw	r20, r16
    1a24:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, 0x00000008);
    1a28:	48 e0       	ldi	r20, 0x08	; 8
    1a2a:	50 e0       	ldi	r21, 0x00	; 0
    1a2c:	60 e0       	ldi	r22, 0x00	; 0
    1a2e:	70 e0       	ldi	r23, 0x00	; 0
    1a30:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, addrlen);
    1a34:	48 e0       	ldi	r20, 0x08	; 8
    1a36:	50 e0       	ldi	r21, 0x00	; 0
    1a38:	60 e0       	ldi	r22, 0x00	; 0
    1a3a:	70 e0       	ldi	r23, 0x00	; 0
    1a3c:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
    1a40:	dc 01       	movw	r26, r24
    1a42:	8f 2d       	mov	r24, r15
    1a44:	9e 2d       	mov	r25, r14
    1a46:	fc 01       	movw	r30, r24
	ARRAY_TO_STREAM(args, ((UINT8 *)addr), addrlen);
    1a48:	9f 01       	movw	r18, r30
    1a4a:	28 5f       	subi	r18, 0xF8	; 248
    1a4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4e:	81 91       	ld	r24, Z+
    1a50:	8d 93       	st	X+, r24
    1a52:	e2 17       	cp	r30, r18
    1a54:	f3 07       	cpc	r31, r19
    1a56:	d9 f7       	brne	.-10     	; 0x1a4e <bind+0x6a>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_BIND,
		ptr, SOCKET_BIND_PARAMS_LEN);
    1a58:	82 e0       	ldi	r24, 0x02	; 2
    1a5a:	90 e1       	ldi	r25, 0x10	; 16
    1a5c:	b6 01       	movw	r22, r12
    1a5e:	44 e1       	ldi	r20, 0x14	; 20
    1a60:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_BIND, &ret);
    1a64:	82 e0       	ldi	r24, 0x02	; 2
    1a66:	90 e1       	ldi	r25, 0x10	; 16
    1a68:	be 01       	movw	r22, r28
    1a6a:	6f 5f       	subi	r22, 0xFF	; 255
    1a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6e:	0e 94 48 09 	call	0x1290	; 0x1290 <SimpleLinkWaitEvent>

	errno = ret;
    1a72:	69 81       	ldd	r22, Y+1	; 0x01
    1a74:	7a 81       	ldd	r23, Y+2	; 0x02
    1a76:	8b 81       	ldd	r24, Y+3	; 0x03
    1a78:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7a:	9b 01       	movw	r18, r22
    1a7c:	20 93 3f 07 	sts	0x073F, r18
    1a80:	30 93 40 07 	sts	0x0740, r19

	return(ret);
}
    1a84:	0f 90       	pop	r0
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	cf 91       	pop	r28
    1a8e:	df 91       	pop	r29
    1a90:	1f 91       	pop	r17
    1a92:	0f 91       	pop	r16
    1a94:	ff 90       	pop	r15
    1a96:	ef 90       	pop	r14
    1a98:	df 90       	pop	r13
    1a9a:	cf 90       	pop	r12
    1a9c:	08 95       	ret

00001a9e <_Z16simple_link_recvlPvllP11_sockaddr_tPml>:
//!                  excess bytes may be discarded depending on the type of
//!                  socket the message is received from
//
//*****************************************************************************
INT16 simple_link_recv(INT32 sd, void *buf, INT32 len, INT32 flags, sockaddr *from,
	socklen_t *fromlen, INT32 opcode)
    1a9e:	2f 92       	push	r2
    1aa0:	3f 92       	push	r3
    1aa2:	4f 92       	push	r4
    1aa4:	5f 92       	push	r5
    1aa6:	6f 92       	push	r6
    1aa8:	7f 92       	push	r7
    1aaa:	8f 92       	push	r8
    1aac:	9f 92       	push	r9
    1aae:	af 92       	push	r10
    1ab0:	bf 92       	push	r11
    1ab2:	cf 92       	push	r12
    1ab4:	df 92       	push	r13
    1ab6:	ef 92       	push	r14
    1ab8:	ff 92       	push	r15
    1aba:	0f 93       	push	r16
    1abc:	1f 93       	push	r17
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	64 97       	sbiw	r28, 0x14	; 20
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	f8 94       	cli
    1acc:	de bf       	out	0x3e, r29	; 62
    1ace:	0f be       	out	0x3f, r0	; 63
    1ad0:	cd bf       	out	0x3d, r28	; 61
    1ad2:	2b 01       	movw	r4, r22
    1ad4:	3c 01       	movw	r6, r24
    1ad6:	5e 87       	std	Y+14, r21	; 0x0e
    1ad8:	4d 87       	std	Y+13, r20	; 0x0d
    1ada:	0f 87       	std	Y+15, r16	; 0x0f
    1adc:	18 8b       	std	Y+16, r17	; 0x10
    1ade:	29 8b       	std	Y+17, r18	; 0x11
    1ae0:	3a 8b       	std	Y+18, r19	; 0x12
    1ae2:	15 01       	movw	r2, r10
    1ae4:	9c 8a       	std	Y+20, r9	; 0x14
    1ae6:	8b 8a       	std	Y+19, r8	; 0x13
    1ae8:	89 a4       	ldd	r8, Y+41	; 0x29
    1aea:	9a a4       	ldd	r9, Y+42	; 0x2a
    1aec:	ab a4       	ldd	r10, Y+43	; 0x2b
    1aee:	bc a4       	ldd	r11, Y+44	; 0x2c
{
	UINT8 *ptr, *args;
	tBsdReadReturnParams tSocketReadEvent;

	ptr = tSLInformation.pucTxCommandBuffer;
    1af0:	00 91 40 03 	lds	r16, 0x0340
    1af4:	10 91 41 03 	lds	r17, 0x0341
	args = (ptr + HEADERS_SIZE_CMD);

	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, sd);
    1af8:	c8 01       	movw	r24, r16
    1afa:	09 96       	adiw	r24, 0x09	; 9
    1afc:	b3 01       	movw	r22, r6
    1afe:	a2 01       	movw	r20, r4
    1b00:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, len);
    1b04:	4f 85       	ldd	r20, Y+15	; 0x0f
    1b06:	58 89       	ldd	r21, Y+16	; 0x10
    1b08:	69 89       	ldd	r22, Y+17	; 0x11
    1b0a:	7a 89       	ldd	r23, Y+18	; 0x12
    1b0c:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, flags);
    1b10:	b7 01       	movw	r22, r14
    1b12:	a6 01       	movw	r20, r12
    1b14:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>

	// Generate the read command, and wait for the 
	hci_command_send(opcode,  ptr, SOCKET_RECV_FROM_PARAMS_LEN);
    1b18:	c4 01       	movw	r24, r8
    1b1a:	b8 01       	movw	r22, r16
    1b1c:	4c e0       	ldi	r20, 0x0C	; 12
    1b1e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(opcode, &tSocketReadEvent);
    1b22:	c4 01       	movw	r24, r8
    1b24:	be 01       	movw	r22, r28
    1b26:	6f 5f       	subi	r22, 0xFF	; 255
    1b28:	7f 4f       	sbci	r23, 0xFF	; 255
    1b2a:	0e 94 48 09 	call	0x1290	; 0x1290 <SimpleLinkWaitEvent>
	DEBUGPRINT_F(" Flags: 0x");
	DEBUGPRINT_HEX(tSocketReadEvent.uiFlags);
	DEBUGPRINT_F("\n\r");

	// In case the number of bytes is more then zero - read data
	if (tSocketReadEvent.iNumberOfBytes > 0)
    1b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b30:	9e 81       	ldd	r25, Y+6	; 0x06
    1b32:	af 81       	ldd	r26, Y+7	; 0x07
    1b34:	b8 85       	ldd	r27, Y+8	; 0x08
    1b36:	18 16       	cp	r1, r24
    1b38:	19 06       	cpc	r1, r25
    1b3a:	1a 06       	cpc	r1, r26
    1b3c:	1b 06       	cpc	r1, r27
    1b3e:	3c f4       	brge	.+14     	; 0x1b4e <_Z16simple_link_recvlPvllP11_sockaddr_tPml+0xb0>
		// Wait for the data in a synchronous way. Here we assume that the bug is 
		// big enough to store also parameters of receive from too....
		// Adafruit CC3k Host Driver Difference
		// Fix compiler error with explicit cast from void to UINT8 pointer.
		// Noted 12-12-2014 by tdicola
		SimpleLinkWaitData((UINT8*)buf, (UINT8 *)from, (UINT8 *)fromlen);
    1b40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b44:	b1 01       	movw	r22, r2
    1b46:	4b 89       	ldd	r20, Y+19	; 0x13
    1b48:	5c 89       	ldd	r21, Y+20	; 0x14
    1b4a:	0e 94 3f 09 	call	0x127e	; 0x127e <SimpleLinkWaitData>
	}

	errno = tSocketReadEvent.iNumberOfBytes;
    1b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b50:	9e 81       	ldd	r25, Y+6	; 0x06
    1b52:	80 93 3f 07 	sts	0x073F, r24
    1b56:	90 93 40 07 	sts	0x0740, r25
	  uart_putchar(((UINT8 *)buf)[i]);
	}
#endif
	
	return(tSocketReadEvent.iNumberOfBytes);
}
    1b5a:	64 96       	adiw	r28, 0x14	; 20
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	f8 94       	cli
    1b60:	de bf       	out	0x3e, r29	; 62
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	cd bf       	out	0x3d, r28	; 61
    1b66:	cf 91       	pop	r28
    1b68:	df 91       	pop	r29
    1b6a:	1f 91       	pop	r17
    1b6c:	0f 91       	pop	r16
    1b6e:	ff 90       	pop	r15
    1b70:	ef 90       	pop	r14
    1b72:	df 90       	pop	r13
    1b74:	cf 90       	pop	r12
    1b76:	bf 90       	pop	r11
    1b78:	af 90       	pop	r10
    1b7a:	9f 90       	pop	r9
    1b7c:	8f 90       	pop	r8
    1b7e:	7f 90       	pop	r7
    1b80:	6f 90       	pop	r6
    1b82:	5f 90       	pop	r5
    1b84:	4f 90       	pop	r4
    1b86:	3f 90       	pop	r3
    1b88:	2f 90       	pop	r2
    1b8a:	08 95       	ret

00001b8c <recv>:
//!
//!  @Note On this version, only blocking mode is supported.
//
//*****************************************************************************

INT16 recv(INT32 sd, void *buf, INT32 len, INT32 flags)
    1b8c:	8f 92       	push	r8
    1b8e:	9f 92       	push	r9
    1b90:	af 92       	push	r10
    1b92:	bf 92       	push	r11
    1b94:	cf 92       	push	r12
    1b96:	df 92       	push	r13
    1b98:	ef 92       	push	r14
    1b9a:	ff 92       	push	r15
    1b9c:	0f 93       	push	r16
    1b9e:	1f 93       	push	r17
{
	return(simple_link_recv(sd, buf, len, flags, NULL, NULL, HCI_CMND_RECV));
    1ba0:	00 d0       	rcall	.+0      	; 0x1ba2 <recv+0x16>
    1ba2:	00 d0       	rcall	.+0      	; 0x1ba4 <recv+0x18>
    1ba4:	f4 e0       	ldi	r31, 0x04	; 4
    1ba6:	8f 2e       	mov	r8, r31
    1ba8:	f0 e1       	ldi	r31, 0x10	; 16
    1baa:	9f 2e       	mov	r9, r31
    1bac:	a1 2c       	mov	r10, r1
    1bae:	b1 2c       	mov	r11, r1
    1bb0:	ed b7       	in	r30, 0x3d	; 61
    1bb2:	fe b7       	in	r31, 0x3e	; 62
    1bb4:	81 82       	std	Z+1, r8	; 0x01
    1bb6:	92 82       	std	Z+2, r9	; 0x02
    1bb8:	a3 82       	std	Z+3, r10	; 0x03
    1bba:	b4 82       	std	Z+4, r11	; 0x04
    1bbc:	aa 24       	eor	r10, r10
    1bbe:	bb 24       	eor	r11, r11
    1bc0:	88 24       	eor	r8, r8
    1bc2:	99 24       	eor	r9, r9
    1bc4:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z16simple_link_recvlPvllP11_sockaddr_tPml>
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
}
    1bd0:	1f 91       	pop	r17
    1bd2:	0f 91       	pop	r16
    1bd4:	ff 90       	pop	r15
    1bd6:	ef 90       	pop	r14
    1bd8:	df 90       	pop	r13
    1bda:	cf 90       	pop	r12
    1bdc:	bf 90       	pop	r11
    1bde:	af 90       	pop	r10
    1be0:	9f 90       	pop	r9
    1be2:	8f 90       	pop	r8
    1be4:	08 95       	ret

00001be6 <select>:
//!  @sa socket
//
//*****************************************************************************

INT16 select(INT32 nfds, fd_set *readsds, fd_set *writesds, fd_set *exceptsds, 
struct timeval *timeout)
    1be6:	4f 92       	push	r4
    1be8:	5f 92       	push	r5
    1bea:	6f 92       	push	r6
    1bec:	7f 92       	push	r7
    1bee:	8f 92       	push	r8
    1bf0:	9f 92       	push	r9
    1bf2:	af 92       	push	r10
    1bf4:	bf 92       	push	r11
    1bf6:	cf 92       	push	r12
    1bf8:	df 92       	push	r13
    1bfa:	ef 92       	push	r14
    1bfc:	ff 92       	push	r15
    1bfe:	0f 93       	push	r16
    1c00:	1f 93       	push	r17
    1c02:	df 93       	push	r29
    1c04:	cf 93       	push	r28
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	60 97       	sbiw	r28, 0x10	; 16
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	f8 94       	cli
    1c10:	de bf       	out	0x3e, r29	; 62
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	cd bf       	out	0x3d, r28	; 61
    1c16:	5b 01       	movw	r10, r22
    1c18:	6c 01       	movw	r12, r24
    1c1a:	4a 01       	movw	r8, r20
    1c1c:	39 01       	movw	r6, r18
    1c1e:	28 01       	movw	r4, r16
    1c20:	87 01       	movw	r16, r14
	{
		is_blocking = 0; /* no blocking, timeout */
	}

	// Fill in HCI packet structure
	ptr = tSLInformation.pucTxCommandBuffer;
    1c22:	e0 90 40 03 	lds	r14, 0x0340
    1c26:	f0 90 41 03 	lds	r15, 0x0341
	args = (ptr + HEADERS_SIZE_CMD);

	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, nfds);
    1c2a:	c7 01       	movw	r24, r14
    1c2c:	09 96       	adiw	r24, 0x09	; 9
    1c2e:	b6 01       	movw	r22, r12
    1c30:	a5 01       	movw	r20, r10
    1c32:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, 0x00000014);
    1c36:	44 e1       	ldi	r20, 0x14	; 20
    1c38:	50 e0       	ldi	r21, 0x00	; 0
    1c3a:	60 e0       	ldi	r22, 0x00	; 0
    1c3c:	70 e0       	ldi	r23, 0x00	; 0
    1c3e:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, 0x00000014);
    1c42:	44 e1       	ldi	r20, 0x14	; 20
    1c44:	50 e0       	ldi	r21, 0x00	; 0
    1c46:	60 e0       	ldi	r22, 0x00	; 0
    1c48:	70 e0       	ldi	r23, 0x00	; 0
    1c4a:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, 0x00000014);
    1c4e:	44 e1       	ldi	r20, 0x14	; 20
    1c50:	50 e0       	ldi	r21, 0x00	; 0
    1c52:	60 e0       	ldi	r22, 0x00	; 0
    1c54:	70 e0       	ldi	r23, 0x00	; 0
    1c56:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, 0x00000014);
    1c5a:	44 e1       	ldi	r20, 0x14	; 20
    1c5c:	50 e0       	ldi	r21, 0x00	; 0
    1c5e:	60 e0       	ldi	r22, 0x00	; 0
    1c60:	70 e0       	ldi	r23, 0x00	; 0
    1c62:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, is_blocking);
    1c66:	40 e0       	ldi	r20, 0x00	; 0
    1c68:	50 e0       	ldi	r21, 0x00	; 0
    1c6a:	60 e0       	ldi	r22, 0x00	; 0
    1c6c:	70 e0       	ldi	r23, 0x00	; 0
    1c6e:	01 15       	cp	r16, r1
    1c70:	11 05       	cpc	r17, r1
    1c72:	21 f4       	brne	.+8      	; 0x1c7c <select+0x96>
    1c74:	41 e0       	ldi	r20, 0x01	; 1
    1c76:	50 e0       	ldi	r21, 0x00	; 0
    1c78:	60 e0       	ldi	r22, 0x00	; 0
    1c7a:	70 e0       	ldi	r23, 0x00	; 0
    1c7c:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, ((readsds) ? *(UINT32*)readsds : 0));
    1c80:	81 14       	cp	r8, r1
    1c82:	91 04       	cpc	r9, r1
    1c84:	29 f4       	brne	.+10     	; 0x1c90 <select+0xaa>
    1c86:	40 e0       	ldi	r20, 0x00	; 0
    1c88:	50 e0       	ldi	r21, 0x00	; 0
    1c8a:	60 e0       	ldi	r22, 0x00	; 0
    1c8c:	70 e0       	ldi	r23, 0x00	; 0
    1c8e:	05 c0       	rjmp	.+10     	; 0x1c9a <select+0xb4>
    1c90:	f4 01       	movw	r30, r8
    1c92:	40 81       	ld	r20, Z
    1c94:	51 81       	ldd	r21, Z+1	; 0x01
    1c96:	62 81       	ldd	r22, Z+2	; 0x02
    1c98:	73 81       	ldd	r23, Z+3	; 0x03
    1c9a:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, ((writesds) ? *(UINT32*)writesds : 0));
    1c9e:	61 14       	cp	r6, r1
    1ca0:	71 04       	cpc	r7, r1
    1ca2:	29 f4       	brne	.+10     	; 0x1cae <select+0xc8>
    1ca4:	40 e0       	ldi	r20, 0x00	; 0
    1ca6:	50 e0       	ldi	r21, 0x00	; 0
    1ca8:	60 e0       	ldi	r22, 0x00	; 0
    1caa:	70 e0       	ldi	r23, 0x00	; 0
    1cac:	05 c0       	rjmp	.+10     	; 0x1cb8 <select+0xd2>
    1cae:	f3 01       	movw	r30, r6
    1cb0:	40 81       	ld	r20, Z
    1cb2:	51 81       	ldd	r21, Z+1	; 0x01
    1cb4:	62 81       	ldd	r22, Z+2	; 0x02
    1cb6:	73 81       	ldd	r23, Z+3	; 0x03
    1cb8:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, ((exceptsds) ? *(UINT32*)exceptsds : 0));
    1cbc:	41 14       	cp	r4, r1
    1cbe:	51 04       	cpc	r5, r1
    1cc0:	29 f4       	brne	.+10     	; 0x1ccc <select+0xe6>
    1cc2:	40 e0       	ldi	r20, 0x00	; 0
    1cc4:	50 e0       	ldi	r21, 0x00	; 0
    1cc6:	60 e0       	ldi	r22, 0x00	; 0
    1cc8:	70 e0       	ldi	r23, 0x00	; 0
    1cca:	05 c0       	rjmp	.+10     	; 0x1cd6 <select+0xf0>
    1ccc:	f2 01       	movw	r30, r4
    1cce:	40 81       	ld	r20, Z
    1cd0:	51 81       	ldd	r21, Z+1	; 0x01
    1cd2:	62 81       	ldd	r22, Z+2	; 0x02
    1cd4:	73 81       	ldd	r23, Z+3	; 0x03
    1cd6:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
    1cda:	9c 01       	movw	r18, r24

	if (timeout)
    1cdc:	01 15       	cp	r16, r1
    1cde:	11 05       	cpc	r17, r1
    1ce0:	51 f1       	breq	.+84     	; 0x1d36 <select+0x150>
	{
		if ( 0 == timeout->tv_sec && timeout->tv_usec < 
    1ce2:	f8 01       	movw	r30, r16
    1ce4:	80 81       	ld	r24, Z
    1ce6:	91 81       	ldd	r25, Z+1	; 0x01
    1ce8:	a2 81       	ldd	r26, Z+2	; 0x02
    1cea:	b3 81       	ldd	r27, Z+3	; 0x03
    1cec:	00 97       	sbiw	r24, 0x00	; 0
    1cee:	a1 05       	cpc	r26, r1
    1cf0:	b1 05       	cpc	r27, r1
    1cf2:	91 f4       	brne	.+36     	; 0x1d18 <select+0x132>
    1cf4:	84 81       	ldd	r24, Z+4	; 0x04
    1cf6:	95 81       	ldd	r25, Z+5	; 0x05
    1cf8:	a6 81       	ldd	r26, Z+6	; 0x06
    1cfa:	b7 81       	ldd	r27, Z+7	; 0x07
    1cfc:	88 58       	subi	r24, 0x88	; 136
    1cfe:	93 41       	sbci	r25, 0x13	; 19
    1d00:	a0 40       	sbci	r26, 0x00	; 0
    1d02:	b0 40       	sbci	r27, 0x00	; 0
    1d04:	4c f4       	brge	.+18     	; 0x1d18 <select+0x132>
			SELECT_TIMEOUT_MIN_MICRO_SECONDS)
		{
			timeout->tv_usec = SELECT_TIMEOUT_MIN_MICRO_SECONDS;
    1d06:	88 e8       	ldi	r24, 0x88	; 136
    1d08:	93 e1       	ldi	r25, 0x13	; 19
    1d0a:	a0 e0       	ldi	r26, 0x00	; 0
    1d0c:	b0 e0       	ldi	r27, 0x00	; 0
    1d0e:	f8 01       	movw	r30, r16
    1d10:	84 83       	std	Z+4, r24	; 0x04
    1d12:	95 83       	std	Z+5, r25	; 0x05
    1d14:	a6 83       	std	Z+6, r26	; 0x06
    1d16:	b7 83       	std	Z+7, r27	; 0x07
		}
		args = UINT32_TO_STREAM(args, timeout->tv_sec);
    1d18:	f8 01       	movw	r30, r16
    1d1a:	40 81       	ld	r20, Z
    1d1c:	51 81       	ldd	r21, Z+1	; 0x01
    1d1e:	62 81       	ldd	r22, Z+2	; 0x02
    1d20:	73 81       	ldd	r23, Z+3	; 0x03
    1d22:	c9 01       	movw	r24, r18
    1d24:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
		args = UINT32_TO_STREAM(args, timeout->tv_usec);
    1d28:	f8 01       	movw	r30, r16
    1d2a:	44 81       	ldd	r20, Z+4	; 0x04
    1d2c:	55 81       	ldd	r21, Z+5	; 0x05
    1d2e:	66 81       	ldd	r22, Z+6	; 0x06
    1d30:	77 81       	ldd	r23, Z+7	; 0x07
    1d32:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	}

	// Initiate a HCI command
	hci_command_send(HCI_CMND_BSD_SELECT, ptr, SOCKET_SELECT_PARAMS_LEN);
    1d36:	88 e0       	ldi	r24, 0x08	; 8
    1d38:	90 e1       	ldi	r25, 0x10	; 16
    1d3a:	b7 01       	movw	r22, r14
    1d3c:	4c e2       	ldi	r20, 0x2C	; 44
    1d3e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_EVNT_SELECT, &tParams);
    1d42:	88 e0       	ldi	r24, 0x08	; 8
    1d44:	90 e1       	ldi	r25, 0x10	; 16
    1d46:	be 01       	movw	r22, r28
    1d48:	6f 5f       	subi	r22, 0xFF	; 255
    1d4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d4c:	0e 94 48 09 	call	0x1290	; 0x1290 <SimpleLinkWaitEvent>

	// Update actually read FD
	if (tParams.iStatus >= 0)
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	9a 81       	ldd	r25, Y+2	; 0x02
    1d54:	ab 81       	ldd	r26, Y+3	; 0x03
    1d56:	bc 81       	ldd	r27, Y+4	; 0x04
    1d58:	b7 fd       	sbrc	r27, 7
    1d5a:	27 c0       	rjmp	.+78     	; 0x1daa <select+0x1c4>
	{
		if (readsds)
    1d5c:	81 14       	cp	r8, r1
    1d5e:	91 04       	cpc	r9, r1
    1d60:	49 f0       	breq	.+18     	; 0x1d74 <select+0x18e>
		{
			memcpy(readsds, &tParams.uiRdfd, sizeof(tParams.uiRdfd));
    1d62:	8d 81       	ldd	r24, Y+5	; 0x05
    1d64:	9e 81       	ldd	r25, Y+6	; 0x06
    1d66:	af 81       	ldd	r26, Y+7	; 0x07
    1d68:	b8 85       	ldd	r27, Y+8	; 0x08
    1d6a:	f4 01       	movw	r30, r8
    1d6c:	80 83       	st	Z, r24
    1d6e:	91 83       	std	Z+1, r25	; 0x01
    1d70:	a2 83       	std	Z+2, r26	; 0x02
    1d72:	b3 83       	std	Z+3, r27	; 0x03
		}

		if (writesds)
    1d74:	61 14       	cp	r6, r1
    1d76:	71 04       	cpc	r7, r1
    1d78:	49 f0       	breq	.+18     	; 0x1d8c <select+0x1a6>
		{
			memcpy(writesds, &tParams.uiWrfd, sizeof(tParams.uiWrfd)); 
    1d7a:	89 85       	ldd	r24, Y+9	; 0x09
    1d7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1d80:	bc 85       	ldd	r27, Y+12	; 0x0c
    1d82:	f3 01       	movw	r30, r6
    1d84:	80 83       	st	Z, r24
    1d86:	91 83       	std	Z+1, r25	; 0x01
    1d88:	a2 83       	std	Z+2, r26	; 0x02
    1d8a:	b3 83       	std	Z+3, r27	; 0x03
		}

		if (exceptsds)
    1d8c:	41 14       	cp	r4, r1
    1d8e:	51 04       	cpc	r5, r1
    1d90:	49 f0       	breq	.+18     	; 0x1da4 <select+0x1be>
		{
			memcpy(exceptsds, &tParams.uiExfd, sizeof(tParams.uiExfd)); 
    1d92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d96:	af 85       	ldd	r26, Y+15	; 0x0f
    1d98:	b8 89       	ldd	r27, Y+16	; 0x10
    1d9a:	f2 01       	movw	r30, r4
    1d9c:	80 83       	st	Z, r24
    1d9e:	91 83       	std	Z+1, r25	; 0x01
    1da0:	a2 83       	std	Z+2, r26	; 0x02
    1da2:	b3 83       	std	Z+3, r27	; 0x03
		}

		return(tParams.iStatus);
    1da4:	29 81       	ldd	r18, Y+1	; 0x01
    1da6:	3a 81       	ldd	r19, Y+2	; 0x02
    1da8:	06 c0       	rjmp	.+12     	; 0x1db6 <select+0x1d0>

	}
	else
	{
		errno = tParams.iStatus;
    1daa:	90 93 40 07 	sts	0x0740, r25
    1dae:	80 93 3f 07 	sts	0x073F, r24
    1db2:	2f ef       	ldi	r18, 0xFF	; 255
    1db4:	3f ef       	ldi	r19, 0xFF	; 255
		return(-1);
	}
}
    1db6:	c9 01       	movw	r24, r18
    1db8:	60 96       	adiw	r28, 0x10	; 16
    1dba:	0f b6       	in	r0, 0x3f	; 63
    1dbc:	f8 94       	cli
    1dbe:	de bf       	out	0x3e, r29	; 62
    1dc0:	0f be       	out	0x3f, r0	; 63
    1dc2:	cd bf       	out	0x3d, r28	; 61
    1dc4:	cf 91       	pop	r28
    1dc6:	df 91       	pop	r29
    1dc8:	1f 91       	pop	r17
    1dca:	0f 91       	pop	r16
    1dcc:	ff 90       	pop	r15
    1dce:	ef 90       	pop	r14
    1dd0:	df 90       	pop	r13
    1dd2:	cf 90       	pop	r12
    1dd4:	bf 90       	pop	r11
    1dd6:	af 90       	pop	r10
    1dd8:	9f 90       	pop	r9
    1dda:	8f 90       	pop	r8
    1ddc:	7f 90       	pop	r7
    1dde:	6f 90       	pop	r6
    1de0:	5f 90       	pop	r5
    1de2:	4f 90       	pop	r4
    1de4:	08 95       	ret

00001de6 <accept>:
//!
//! @sa     socket ; bind ; listen
//
//*****************************************************************************

INT32 accept(INT32 sd, sockaddr *addr, socklen_t *addrlen)
    1de6:	8f 92       	push	r8
    1de8:	9f 92       	push	r9
    1dea:	af 92       	push	r10
    1dec:	bf 92       	push	r11
    1dee:	cf 92       	push	r12
    1df0:	df 92       	push	r13
    1df2:	ef 92       	push	r14
    1df4:	ff 92       	push	r15
    1df6:	0f 93       	push	r16
    1df8:	1f 93       	push	r17
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	68 97       	sbiw	r28, 0x18	; 24
    1e04:	0f b6       	in	r0, 0x3f	; 63
    1e06:	f8 94       	cli
    1e08:	de bf       	out	0x3e, r29	; 62
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	cd bf       	out	0x3d, r28	; 61
    1e0e:	5b 01       	movw	r10, r22
    1e10:	6c 01       	movw	r12, r24
    1e12:	7a 01       	movw	r14, r20
    1e14:	49 01       	movw	r8, r18
	INT32 ret;
	UINT8 *ptr, *args;
	tBsdReturnParams tAcceptReturnArguments;

	ret = EFAIL;
	ptr = tSLInformation.pucTxCommandBuffer;
    1e16:	00 91 40 03 	lds	r16, 0x0340
    1e1a:	10 91 41 03 	lds	r17, 0x0341
	args = (ptr + HEADERS_SIZE_CMD);

	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, sd);
    1e1e:	c8 01       	movw	r24, r16
    1e20:	09 96       	adiw	r24, 0x09	; 9
    1e22:	b6 01       	movw	r22, r12
    1e24:	a5 01       	movw	r20, r10
    1e26:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_ACCEPT,
		ptr, SOCKET_ACCEPT_PARAMS_LEN);
    1e2a:	85 e0       	ldi	r24, 0x05	; 5
    1e2c:	90 e1       	ldi	r25, 0x10	; 16
    1e2e:	b8 01       	movw	r22, r16
    1e30:	44 e0       	ldi	r20, 0x04	; 4
    1e32:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_ACCEPT, &tAcceptReturnArguments);
    1e36:	85 e0       	ldi	r24, 0x05	; 5
    1e38:	90 e1       	ldi	r25, 0x10	; 16
    1e3a:	be 01       	movw	r22, r28
    1e3c:	6f 5f       	subi	r22, 0xFF	; 255
    1e3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e40:	0e 94 48 09 	call	0x1290	; 0x1290 <SimpleLinkWaitEvent>

	// need specify return parameters!!!
	// Adafruit CC3k Host Driver Difference
	// Bug fix to prevent writing to null memory pointer.
	// Noted 12-12-2014 by tdicola
	if (addr) memcpy(addr, &tAcceptReturnArguments.tSocketAddress, ASIC_ADDR_LEN);
    1e44:	e1 14       	cp	r14, r1
    1e46:	f1 04       	cpc	r15, r1
    1e48:	41 f0       	breq	.+16     	; 0x1e5a <accept+0x74>
    1e4a:	d7 01       	movw	r26, r14
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	39 96       	adiw	r30, 0x09	; 9
    1e50:	88 e0       	ldi	r24, 0x08	; 8
    1e52:	01 90       	ld	r0, Z+
    1e54:	0d 92       	st	X+, r0
    1e56:	81 50       	subi	r24, 0x01	; 1
    1e58:	e1 f7       	brne	.-8      	; 0x1e52 <accept+0x6c>
	if (addrlen) *addrlen = ASIC_ADDR_LEN;
    1e5a:	81 14       	cp	r8, r1
    1e5c:	91 04       	cpc	r9, r1
    1e5e:	49 f0       	breq	.+18     	; 0x1e72 <accept+0x8c>
    1e60:	88 e0       	ldi	r24, 0x08	; 8
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	a0 e0       	ldi	r26, 0x00	; 0
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	f4 01       	movw	r30, r8
    1e6a:	80 83       	st	Z, r24
    1e6c:	91 83       	std	Z+1, r25	; 0x01
    1e6e:	a2 83       	std	Z+2, r26	; 0x02
    1e70:	b3 83       	std	Z+3, r27	; 0x03
	errno = tAcceptReturnArguments.iStatus; 
    1e72:	8d 81       	ldd	r24, Y+5	; 0x05
    1e74:	9e 81       	ldd	r25, Y+6	; 0x06
    1e76:	90 93 40 07 	sts	0x0740, r25
    1e7a:	80 93 3f 07 	sts	0x073F, r24
	ret = errno;
    1e7e:	7c 01       	movw	r14, r24
    1e80:	00 27       	eor	r16, r16
    1e82:	f7 fc       	sbrc	r15, 7
    1e84:	00 95       	com	r16
    1e86:	10 2f       	mov	r17, r16

	// if succeeded, iStatus = new socket descriptor. otherwise - error number 
	if(M_IS_VALID_SD(ret))
    1e88:	f8 e0       	ldi	r31, 0x08	; 8
    1e8a:	ef 16       	cp	r14, r31
    1e8c:	f1 04       	cpc	r15, r1
    1e8e:	01 05       	cpc	r16, r1
    1e90:	11 05       	cpc	r17, r1
    1e92:	38 f4       	brcc	.+14     	; 0x1ea2 <accept+0xbc>
	{
		set_socket_active_status(ret, SOCKET_STATUS_ACTIVE);
    1e94:	c8 01       	movw	r24, r16
    1e96:	b7 01       	movw	r22, r14
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 e0       	ldi	r20, 0x00	; 0
    1e9e:	50 e0       	ldi	r21, 0x00	; 0
    1ea0:	06 c0       	rjmp	.+12     	; 0x1eae <accept+0xc8>
	}
	else
	{
		set_socket_active_status(sd, SOCKET_STATUS_INACTIVE);
    1ea2:	c6 01       	movw	r24, r12
    1ea4:	b5 01       	movw	r22, r10
    1ea6:	21 e0       	ldi	r18, 0x01	; 1
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	40 e0       	ldi	r20, 0x00	; 0
    1eac:	50 e0       	ldi	r21, 0x00	; 0
    1eae:	0e 94 9d 02 	call	0x53a	; 0x53a <set_socket_active_status>
	}

	return(ret);
}
    1eb2:	b7 01       	movw	r22, r14
    1eb4:	c8 01       	movw	r24, r16
    1eb6:	68 96       	adiw	r28, 0x18	; 24
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	f8 94       	cli
    1ebc:	de bf       	out	0x3e, r29	; 62
    1ebe:	0f be       	out	0x3f, r0	; 63
    1ec0:	cd bf       	out	0x3d, r28	; 61
    1ec2:	cf 91       	pop	r28
    1ec4:	df 91       	pop	r29
    1ec6:	1f 91       	pop	r17
    1ec8:	0f 91       	pop	r16
    1eca:	ff 90       	pop	r15
    1ecc:	ef 90       	pop	r14
    1ece:	df 90       	pop	r13
    1ed0:	cf 90       	pop	r12
    1ed2:	bf 90       	pop	r11
    1ed4:	af 90       	pop	r10
    1ed6:	9f 90       	pop	r9
    1ed8:	8f 90       	pop	r8
    1eda:	08 95       	ret

00001edc <closesocket>:
//!
//!  @brief  The socket function closes a created socket.
//
//*****************************************************************************

INT32 closesocket(INT32 sd)
    1edc:	cf 92       	push	r12
    1ede:	df 92       	push	r13
    1ee0:	ef 92       	push	r14
    1ee2:	ff 92       	push	r15
    1ee4:	0f 93       	push	r16
    1ee6:	1f 93       	push	r17
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	00 d0       	rcall	.+0      	; 0x1eee <closesocket+0x12>
    1eee:	00 d0       	rcall	.+0      	; 0x1ef0 <closesocket+0x14>
    1ef0:	cd b7       	in	r28, 0x3d	; 61
    1ef2:	de b7       	in	r29, 0x3e	; 62
    1ef4:	6b 01       	movw	r12, r22
    1ef6:	7c 01       	movw	r14, r24
{
	INT32 ret;
	UINT8 *ptr, *args;

	ret = EFAIL;
    1ef8:	8f ef       	ldi	r24, 0xFF	; 255
    1efa:	9f ef       	ldi	r25, 0xFF	; 255
    1efc:	af ef       	ldi	r26, 0xFF	; 255
    1efe:	bf ef       	ldi	r27, 0xFF	; 255
    1f00:	89 83       	std	Y+1, r24	; 0x01
    1f02:	9a 83       	std	Y+2, r25	; 0x02
    1f04:	ab 83       	std	Y+3, r26	; 0x03
    1f06:	bc 83       	std	Y+4, r27	; 0x04
	ptr = tSLInformation.pucTxCommandBuffer;
    1f08:	00 91 40 03 	lds	r16, 0x0340
    1f0c:	10 91 41 03 	lds	r17, 0x0341
	args = (ptr + HEADERS_SIZE_CMD);

	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, sd);
    1f10:	c8 01       	movw	r24, r16
    1f12:	09 96       	adiw	r24, 0x09	; 9
    1f14:	b7 01       	movw	r22, r14
    1f16:	a6 01       	movw	r20, r12
    1f18:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_CLOSE_SOCKET,
		ptr, SOCKET_CLOSE_PARAMS_LEN);
    1f1c:	8b e0       	ldi	r24, 0x0B	; 11
    1f1e:	90 e1       	ldi	r25, 0x10	; 16
    1f20:	b8 01       	movw	r22, r16
    1f22:	44 e0       	ldi	r20, 0x04	; 4
    1f24:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_CLOSE_SOCKET, &ret);
    1f28:	8b e0       	ldi	r24, 0x0B	; 11
    1f2a:	90 e1       	ldi	r25, 0x10	; 16
    1f2c:	be 01       	movw	r22, r28
    1f2e:	6f 5f       	subi	r22, 0xFF	; 255
    1f30:	7f 4f       	sbci	r23, 0xFF	; 255
    1f32:	0e 94 48 09 	call	0x1290	; 0x1290 <SimpleLinkWaitEvent>
	errno = ret;
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3a:	90 93 40 07 	sts	0x0740, r25
    1f3e:	80 93 3f 07 	sts	0x073F, r24

	// since 'close' call may result in either OK (and then it closed) or error 
	// mark this socket as invalid 
	set_socket_active_status(sd, SOCKET_STATUS_INACTIVE);
    1f42:	c7 01       	movw	r24, r14
    1f44:	b6 01       	movw	r22, r12
    1f46:	21 e0       	ldi	r18, 0x01	; 1
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	40 e0       	ldi	r20, 0x00	; 0
    1f4c:	50 e0       	ldi	r21, 0x00	; 0
    1f4e:	0e 94 9d 02 	call	0x53a	; 0x53a <set_socket_active_status>
    1f52:	69 81       	ldd	r22, Y+1	; 0x01
    1f54:	7a 81       	ldd	r23, Y+2	; 0x02

	return(ret);
}
    1f56:	8b 81       	ldd	r24, Y+3	; 0x03
    1f58:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5a:	0f 90       	pop	r0
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	cf 91       	pop	r28
    1f64:	df 91       	pop	r29
    1f66:	1f 91       	pop	r17
    1f68:	0f 91       	pop	r16
    1f6a:	ff 90       	pop	r15
    1f6c:	ef 90       	pop	r14
    1f6e:	df 90       	pop	r13
    1f70:	cf 90       	pop	r12
    1f72:	08 95       	ret

00001f74 <socket>:
//!          transport service provider. This function is called by the 
//!          application layer to obtain a socket handle.
//
//*****************************************************************************

INT32 socket(INT32 domain, INT32 type, INT32 protocol)
    1f74:	4f 92       	push	r4
    1f76:	5f 92       	push	r5
    1f78:	6f 92       	push	r6
    1f7a:	7f 92       	push	r7
    1f7c:	8f 92       	push	r8
    1f7e:	9f 92       	push	r9
    1f80:	af 92       	push	r10
    1f82:	bf 92       	push	r11
    1f84:	cf 92       	push	r12
    1f86:	df 92       	push	r13
    1f88:	ef 92       	push	r14
    1f8a:	ff 92       	push	r15
    1f8c:	0f 93       	push	r16
    1f8e:	1f 93       	push	r17
    1f90:	df 93       	push	r29
    1f92:	cf 93       	push	r28
    1f94:	00 d0       	rcall	.+0      	; 0x1f96 <socket+0x22>
    1f96:	00 d0       	rcall	.+0      	; 0x1f98 <socket+0x24>
    1f98:	cd b7       	in	r28, 0x3d	; 61
    1f9a:	de b7       	in	r29, 0x3e	; 62
    1f9c:	5b 01       	movw	r10, r22
    1f9e:	6c 01       	movw	r12, r24
    1fa0:	39 01       	movw	r6, r18
    1fa2:	4a 01       	movw	r8, r20
{
	INT32 ret;
	UINT8 *ptr, *args;

	ret = EFAIL;
    1fa4:	8f ef       	ldi	r24, 0xFF	; 255
    1fa6:	9f ef       	ldi	r25, 0xFF	; 255
    1fa8:	af ef       	ldi	r26, 0xFF	; 255
    1faa:	bf ef       	ldi	r27, 0xFF	; 255
    1fac:	89 83       	std	Y+1, r24	; 0x01
    1fae:	9a 83       	std	Y+2, r25	; 0x02
    1fb0:	ab 83       	std	Y+3, r26	; 0x03
    1fb2:	bc 83       	std	Y+4, r27	; 0x04
	ptr = tSLInformation.pucTxCommandBuffer;
    1fb4:	40 90 40 03 	lds	r4, 0x0340
    1fb8:	50 90 41 03 	lds	r5, 0x0341
	args = (ptr + HEADERS_SIZE_CMD);

	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, domain);
    1fbc:	c2 01       	movw	r24, r4
    1fbe:	09 96       	adiw	r24, 0x09	; 9
    1fc0:	b6 01       	movw	r22, r12
    1fc2:	a5 01       	movw	r20, r10
    1fc4:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, type);
    1fc8:	b4 01       	movw	r22, r8
    1fca:	a3 01       	movw	r20, r6
    1fcc:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, protocol);
    1fd0:	b8 01       	movw	r22, r16
    1fd2:	a7 01       	movw	r20, r14
    1fd4:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_SOCKET, ptr, SOCKET_OPEN_PARAMS_LEN);
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	90 e1       	ldi	r25, 0x10	; 16
    1fdc:	b2 01       	movw	r22, r4
    1fde:	4c e0       	ldi	r20, 0x0C	; 12
    1fe0:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_SOCKET, &ret);
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	90 e1       	ldi	r25, 0x10	; 16
    1fe8:	be 01       	movw	r22, r28
    1fea:	6f 5f       	subi	r22, 0xFF	; 255
    1fec:	7f 4f       	sbci	r23, 0xFF	; 255
    1fee:	0e 94 48 09 	call	0x1290	; 0x1290 <SimpleLinkWaitEvent>

	// Process the event 
	errno = ret;
    1ff2:	69 81       	ldd	r22, Y+1	; 0x01
    1ff4:	7a 81       	ldd	r23, Y+2	; 0x02
    1ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffa:	70 93 40 07 	sts	0x0740, r23
    1ffe:	60 93 3f 07 	sts	0x073F, r22

	set_socket_active_status(ret, SOCKET_STATUS_ACTIVE);
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	40 e0       	ldi	r20, 0x00	; 0
    2008:	50 e0       	ldi	r21, 0x00	; 0
    200a:	0e 94 9d 02 	call	0x53a	; 0x53a <set_socket_active_status>
    200e:	69 81       	ldd	r22, Y+1	; 0x01
    2010:	7a 81       	ldd	r23, Y+2	; 0x02

	return(ret);
}
    2012:	8b 81       	ldd	r24, Y+3	; 0x03
    2014:	9c 81       	ldd	r25, Y+4	; 0x04
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	cf 91       	pop	r28
    2020:	df 91       	pop	r29
    2022:	1f 91       	pop	r17
    2024:	0f 91       	pop	r16
    2026:	ff 90       	pop	r15
    2028:	ef 90       	pop	r14
    202a:	df 90       	pop	r13
    202c:	cf 90       	pop	r12
    202e:	bf 90       	pop	r11
    2030:	af 90       	pop	r10
    2032:	9f 90       	pop	r9
    2034:	8f 90       	pop	r8
    2036:	7f 90       	pop	r7
    2038:	6f 90       	pop	r6
    203a:	5f 90       	pop	r5
    203c:	4f 90       	pop	r4
    203e:	08 95       	ret

00002040 <_Z26HostFlowControlConsumeBuffs>:
//!  @brief  if SEND_NON_BLOCKING not define - block until have free buffer 
//!          becomes available, else return immediately  with correct status 
//!          regarding the buffers available.
//
//*****************************************************************************
INT16 HostFlowControlConsumeBuff(INT16 sd)
    2040:	8f 92       	push	r8
    2042:	9f 92       	push	r9
    2044:	af 92       	push	r10
    2046:	bf 92       	push	r11
    2048:	cf 92       	push	r12
    204a:	df 92       	push	r13
    204c:	ef 92       	push	r14
    204e:	ff 92       	push	r15
    2050:	0f 93       	push	r16
    2052:	1f 93       	push	r17
    2054:	8c 01       	movw	r16, r24

// Adafruit CC3k Host Driver Difference
// Allow defining a send timeout period.
// Noted 12-12-2014 by tdicola
#ifdef SEND_TIMEOUT_MS
	unsigned long startTime = millis();
    2056:	0e 94 80 30 	call	0x6100	; 0x6100 <millis>
    205a:	4b 01       	movw	r8, r22
    205c:	5c 01       	movw	r10, r24
			errno = tSLInformation.slTransmitDataError;
			tSLInformation.slTransmitDataError = 0;
			return errno;
		}

		if(SOCKET_STATUS_ACTIVE != get_socket_active_status(sd))
    205e:	68 01       	movw	r12, r16
    2060:	ee 24       	eor	r14, r14
    2062:	d7 fc       	sbrc	r13, 7
    2064:	e0 94       	com	r14
    2066:	fe 2c       	mov	r15, r14
	do
	{
		// In case last transmission failed then we will return the last failure 
		// reason here.
		// Note that the buffer will not be allocated in this case
		if (tSLInformation.slTransmitDataError != 0)
    2068:	80 91 52 03 	lds	r24, 0x0352
    206c:	90 91 53 03 	lds	r25, 0x0353
    2070:	a0 91 54 03 	lds	r26, 0x0354
    2074:	b0 91 55 03 	lds	r27, 0x0355
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	a1 05       	cpc	r26, r1
    207c:	b1 05       	cpc	r27, r1
    207e:	b1 f0       	breq	.+44     	; 0x20ac <_Z26HostFlowControlConsumeBuffs+0x6c>
		{
			errno = tSLInformation.slTransmitDataError;
    2080:	80 91 52 03 	lds	r24, 0x0352
    2084:	90 91 53 03 	lds	r25, 0x0353
    2088:	a0 91 54 03 	lds	r26, 0x0354
    208c:	b0 91 55 03 	lds	r27, 0x0355
    2090:	9c 01       	movw	r18, r24
    2092:	90 93 40 07 	sts	0x0740, r25
    2096:	80 93 3f 07 	sts	0x073F, r24
			tSLInformation.slTransmitDataError = 0;
    209a:	10 92 52 03 	sts	0x0352, r1
    209e:	10 92 53 03 	sts	0x0353, r1
    20a2:	10 92 54 03 	sts	0x0354, r1
    20a6:	10 92 55 03 	sts	0x0355, r1
    20aa:	2c c0       	rjmp	.+88     	; 0x2104 <_Z26HostFlowControlConsumeBuffs+0xc4>
			return errno;
		}

		if(SOCKET_STATUS_ACTIVE != get_socket_active_status(sd))
    20ac:	c7 01       	movw	r24, r14
    20ae:	b6 01       	movw	r22, r12
    20b0:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <get_socket_active_status>
    20b4:	61 15       	cp	r22, r1
    20b6:	71 05       	cpc	r23, r1
    20b8:	81 05       	cpc	r24, r1
    20ba:	91 05       	cpc	r25, r1
    20bc:	19 f0       	breq	.+6      	; 0x20c4 <_Z26HostFlowControlConsumeBuffs+0x84>
    20be:	2f ef       	ldi	r18, 0xFF	; 255
    20c0:	3f ef       	ldi	r19, 0xFF	; 255
    20c2:	20 c0       	rjmp	.+64     	; 0x2104 <_Z26HostFlowControlConsumeBuffs+0xc4>

// Adafruit CC3k Host Driver Difference
// Implementation of send timeout.
// Noted 12-12-2014 by tdicola
#ifdef SEND_TIMEOUT_MS
		if ((millis() - startTime) > SEND_TIMEOUT_MS)
    20c4:	0e 94 80 30 	call	0x6100	; 0x6100 <millis>
    20c8:	68 19       	sub	r22, r8
    20ca:	79 09       	sbc	r23, r9
    20cc:	8a 09       	sbc	r24, r10
    20ce:	9b 09       	sbc	r25, r11
    20d0:	61 53       	subi	r22, 0x31	; 49
    20d2:	75 47       	sbci	r23, 0x75	; 117
    20d4:	80 40       	sbci	r24, 0x00	; 0
    20d6:	90 40       	sbci	r25, 0x00	; 0
    20d8:	18 f0       	brcs	.+6      	; 0x20e0 <_Z26HostFlowControlConsumeBuffs+0xa0>
    20da:	2d ef       	ldi	r18, 0xFD	; 253
    20dc:	3f ef       	ldi	r19, 0xFF	; 255
    20de:	12 c0       	rjmp	.+36     	; 0x2104 <_Z26HostFlowControlConsumeBuffs+0xc4>
// Noted 12-12-2014 by tdicola
#ifdef SEND_TIMEOUT_MS
	unsigned long startTime = millis();
#endif

	do
    20e0:	80 91 56 03 	lds	r24, 0x0356
    20e4:	90 91 57 03 	lds	r25, 0x0357
    20e8:	89 2b       	or	r24, r25
    20ea:	09 f4       	brne	.+2      	; 0x20ee <_Z26HostFlowControlConsumeBuffs+0xae>
    20ec:	bd cf       	rjmp	.-134    	; 0x2068 <_Z26HostFlowControlConsumeBuffs+0x28>
		}
#endif

	} while(0 == tSLInformation.usNumberOfFreeBuffers);

	tSLInformation.usNumberOfFreeBuffers--;
    20ee:	80 91 56 03 	lds	r24, 0x0356
    20f2:	90 91 57 03 	lds	r25, 0x0357
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	90 93 57 03 	sts	0x0357, r25
    20fc:	80 93 56 03 	sts	0x0356, r24
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	30 e0       	ldi	r19, 0x00	; 0
	{
		tSLInformation.usNumberOfFreeBuffers--;
		return 0;
	}
#endif
}
    2104:	c9 01       	movw	r24, r18
    2106:	1f 91       	pop	r17
    2108:	0f 91       	pop	r16
    210a:	ff 90       	pop	r15
    210c:	ef 90       	pop	r14
    210e:	df 90       	pop	r13
    2110:	cf 90       	pop	r12
    2112:	bf 90       	pop	r11
    2114:	af 90       	pop	r10
    2116:	9f 90       	pop	r9
    2118:	8f 90       	pop	r8
    211a:	08 95       	ret

0000211c <_Z16simple_link_sendlPKvllPK11_sockaddr_tll>:
//!  @brief          This function is used to transmit a message to another
//!                  socket
//
//*****************************************************************************
INT16 simple_link_send(INT32 sd, const void *buf, INT32 len, INT32 flags,
	const sockaddr *to, INT32 tolen, INT32 opcode)
    211c:	2f 92       	push	r2
    211e:	3f 92       	push	r3
    2120:	4f 92       	push	r4
    2122:	5f 92       	push	r5
    2124:	6f 92       	push	r6
    2126:	7f 92       	push	r7
    2128:	8f 92       	push	r8
    212a:	9f 92       	push	r9
    212c:	af 92       	push	r10
    212e:	bf 92       	push	r11
    2130:	cf 92       	push	r12
    2132:	df 92       	push	r13
    2134:	ef 92       	push	r14
    2136:	ff 92       	push	r15
    2138:	0f 93       	push	r16
    213a:	1f 93       	push	r17
    213c:	df 93       	push	r29
    213e:	cf 93       	push	r28
    2140:	cd b7       	in	r28, 0x3d	; 61
    2142:	de b7       	in	r29, 0x3e	; 62
    2144:	6a 97       	sbiw	r28, 0x1a	; 26
    2146:	0f b6       	in	r0, 0x3f	; 63
    2148:	f8 94       	cli
    214a:	de bf       	out	0x3e, r29	; 62
    214c:	0f be       	out	0x3f, r0	; 63
    214e:	cd bf       	out	0x3d, r28	; 61
    2150:	1b 01       	movw	r2, r22
    2152:	2c 01       	movw	r4, r24
    2154:	5c 8b       	std	Y+20, r21	; 0x14
    2156:	4b 8b       	std	Y+19, r20	; 0x13
    2158:	38 01       	movw	r6, r16
    215a:	49 01       	movw	r8, r18
    215c:	cd 8a       	std	Y+21, r12	; 0x15
    215e:	de 8a       	std	Y+22, r13	; 0x16
    2160:	ef 8a       	std	Y+23, r14	; 0x17
    2162:	f8 8e       	std	Y+24, r15	; 0x18
    2164:	ba 8e       	std	Y+26, r11	; 0x1a
    2166:	a9 8e       	std	Y+25, r10	; 0x19
    2168:	cf a4       	ldd	r12, Y+47	; 0x2f
    216a:	d8 a8       	ldd	r13, Y+48	; 0x30
    216c:	e9 a8       	ldd	r14, Y+49	; 0x31
    216e:	fa a8       	ldd	r15, Y+50	; 0x32
	UINT32 addr_offset;
	INT16 res;
	tBsdReadReturnParams tSocketSendEvent;

	// Check the bsd_arguments
	if (0 != (res = HostFlowControlConsumeBuff(sd)))
    2170:	cb 01       	movw	r24, r22
    2172:	0e 94 20 10 	call	0x2040	; 0x2040 <_Z26HostFlowControlConsumeBuffs>
    2176:	9c 01       	movw	r18, r24
    2178:	00 97       	sbiw	r24, 0x00	; 0
    217a:	09 f0       	breq	.+2      	; 0x217e <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x62>
    217c:	cb c0       	rjmp	.+406    	; 0x2314 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x1f8>
	{
		return res;
	}

	//Update the number of sent packets
	tSLInformation.NumberOfSentPackets++;
    217e:	80 91 5e 03 	lds	r24, 0x035E
    2182:	90 91 5f 03 	lds	r25, 0x035F
    2186:	a0 91 60 03 	lds	r26, 0x0360
    218a:	b0 91 61 03 	lds	r27, 0x0361
    218e:	01 96       	adiw	r24, 0x01	; 1
    2190:	a1 1d       	adc	r26, r1
    2192:	b1 1d       	adc	r27, r1
    2194:	80 93 5e 03 	sts	0x035E, r24
    2198:	90 93 5f 03 	sts	0x035F, r25
    219c:	a0 93 60 03 	sts	0x0360, r26
    21a0:	b0 93 61 03 	sts	0x0361, r27

	// Allocate a buffer and construct a packet and send it over spi
	ptr = tSLInformation.pucTxCommandBuffer;
    21a4:	20 91 40 03 	lds	r18, 0x0340
    21a8:	30 91 41 03 	lds	r19, 0x0341
    21ac:	3a 8b       	std	Y+18, r19	; 0x12
    21ae:	29 8b       	std	Y+17, r18	; 0x11
	args = (ptr + HEADERS_SIZE_DATA);

	// Update the offset of data and parameters according to the command
	switch(opcode)
    21b0:	8b a9       	ldd	r24, Y+51	; 0x33
    21b2:	9c a9       	ldd	r25, Y+52	; 0x34
    21b4:	ad a9       	ldd	r26, Y+53	; 0x35
    21b6:	be a9       	ldd	r27, Y+54	; 0x36
    21b8:	81 38       	cpi	r24, 0x81	; 129
    21ba:	91 05       	cpc	r25, r1
    21bc:	a1 05       	cpc	r26, r1
    21be:	b1 05       	cpc	r27, r1
    21c0:	b9 f0       	breq	.+46     	; 0x21f0 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0xd4>
    21c2:	83 38       	cpi	r24, 0x83	; 131
    21c4:	91 05       	cpc	r25, r1
    21c6:	a1 05       	cpc	r26, r1
    21c8:	b1 05       	cpc	r27, r1
    21ca:	f1 f4       	brne	.+60     	; 0x2208 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0xec>
	{ 
	case HCI_CMND_SENDTO:
		{
			addr_offset = len + sizeof(len) + sizeof(len);
    21cc:	a4 01       	movw	r20, r8
    21ce:	93 01       	movw	r18, r6
    21d0:	28 5f       	subi	r18, 0xF8	; 248
    21d2:	3f 4f       	sbci	r19, 0xFF	; 255
    21d4:	4f 4f       	sbci	r20, 0xFF	; 255
    21d6:	5f 4f       	sbci	r21, 0xFF	; 255
    21d8:	2d 87       	std	Y+13, r18	; 0x0d
    21da:	3e 87       	std	Y+14, r19	; 0x0e
    21dc:	4f 87       	std	Y+15, r20	; 0x0f
    21de:	58 8b       	std	Y+16, r21	; 0x10
			addrlen = 8;
			uArgSize = SOCKET_SENDTO_PARAMS_LEN;
			pDataPtr = ptr + HEADERS_SIZE_DATA + SOCKET_SENDTO_PARAMS_LEN;
    21e0:	a9 88       	ldd	r10, Y+17	; 0x11
    21e2:	ba 88       	ldd	r11, Y+18	; 0x12
    21e4:	42 e2       	ldi	r20, 0x22	; 34
    21e6:	50 e0       	ldi	r21, 0x00	; 0
    21e8:	a4 0e       	add	r10, r20
    21ea:	b5 1e       	adc	r11, r21
    21ec:	18 e1       	ldi	r17, 0x18	; 24
    21ee:	0c c0       	rjmp	.+24     	; 0x2208 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0xec>
	case HCI_CMND_SEND:
		{
			tolen = 0;
			to = NULL;
			uArgSize = HCI_CMND_SEND_ARG_LENGTH;
			pDataPtr = ptr + HEADERS_SIZE_DATA + HCI_CMND_SEND_ARG_LENGTH;
    21f0:	a9 88       	ldd	r10, Y+17	; 0x11
    21f2:	ba 88       	ldd	r11, Y+18	; 0x12
    21f4:	8a e1       	ldi	r24, 0x1A	; 26
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	a8 0e       	add	r10, r24
    21fa:	b9 1e       	adc	r11, r25
    21fc:	1a 8e       	std	Y+26, r1	; 0x1a
    21fe:	19 8e       	std	Y+25, r1	; 0x19
    2200:	cc 24       	eor	r12, r12
    2202:	dd 24       	eor	r13, r13
    2204:	76 01       	movw	r14, r12
    2206:	10 e1       	ldi	r17, 0x10	; 16
			break;
		}
	}

	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, sd);
    2208:	89 89       	ldd	r24, Y+17	; 0x11
    220a:	9a 89       	ldd	r25, Y+18	; 0x12
    220c:	0a 96       	adiw	r24, 0x0a	; 10
    220e:	b2 01       	movw	r22, r4
    2210:	a1 01       	movw	r20, r2
    2212:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, uArgSize - sizeof(sd));
    2216:	01 2f       	mov	r16, r17
    2218:	10 e0       	ldi	r17, 0x00	; 0
    221a:	04 50       	subi	r16, 0x04	; 4
    221c:	10 40       	sbci	r17, 0x00	; 0
    221e:	a8 01       	movw	r20, r16
    2220:	60 e0       	ldi	r22, 0x00	; 0
    2222:	70 e0       	ldi	r23, 0x00	; 0
    2224:	0c 5f       	subi	r16, 0xFC	; 252
    2226:	1f 4f       	sbci	r17, 0xFF	; 255
    2228:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, len);
    222c:	b4 01       	movw	r22, r8
    222e:	a3 01       	movw	r20, r6
    2230:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, flags);
    2234:	4d 89       	ldd	r20, Y+21	; 0x15
    2236:	5e 89       	ldd	r21, Y+22	; 0x16
    2238:	6f 89       	ldd	r22, Y+23	; 0x17
    223a:	78 8d       	ldd	r23, Y+24	; 0x18
    223c:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>

	if (opcode == HCI_CMND_SENDTO)
    2240:	2b a9       	ldd	r18, Y+51	; 0x33
    2242:	3c a9       	ldd	r19, Y+52	; 0x34
    2244:	4d a9       	ldd	r20, Y+53	; 0x35
    2246:	5e a9       	ldd	r21, Y+54	; 0x36
    2248:	23 38       	cpi	r18, 0x83	; 131
    224a:	31 05       	cpc	r19, r1
    224c:	41 05       	cpc	r20, r1
    224e:	51 05       	cpc	r21, r1
    2250:	61 f4       	brne	.+24     	; 0x226a <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x14e>
	{
		args = UINT32_TO_STREAM(args, addr_offset);
    2252:	4d 85       	ldd	r20, Y+13	; 0x0d
    2254:	5e 85       	ldd	r21, Y+14	; 0x0e
    2256:	6f 85       	ldd	r22, Y+15	; 0x0f
    2258:	78 89       	ldd	r23, Y+16	; 0x10
    225a:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
		args = UINT32_TO_STREAM(args, addrlen);
    225e:	48 e0       	ldi	r20, 0x08	; 8
    2260:	50 e0       	ldi	r21, 0x00	; 0
    2262:	60 e0       	ldi	r22, 0x00	; 0
    2264:	70 e0       	ldi	r23, 0x00	; 0
    2266:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	40 e0       	ldi	r20, 0x00	; 0
    2270:	50 e0       	ldi	r21, 0x00	; 0
    2272:	0c c0       	rjmp	.+24     	; 0x228c <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x170>
	}

	// Copy the data received from user into the TX Buffer
	ARRAY_TO_STREAM(pDataPtr, ((UINT8 *)buf), len);
    2274:	eb 89       	ldd	r30, Y+19	; 0x13
    2276:	fc 89       	ldd	r31, Y+20	; 0x14
    2278:	e2 0f       	add	r30, r18
    227a:	f3 1f       	adc	r31, r19
    227c:	80 81       	ld	r24, Z
    227e:	d5 01       	movw	r26, r10
    2280:	8d 93       	st	X+, r24
    2282:	5d 01       	movw	r10, r26
    2284:	2f 5f       	subi	r18, 0xFF	; 255
    2286:	3f 4f       	sbci	r19, 0xFF	; 255
    2288:	4f 4f       	sbci	r20, 0xFF	; 255
    228a:	5f 4f       	sbci	r21, 0xFF	; 255
    228c:	26 15       	cp	r18, r6
    228e:	37 05       	cpc	r19, r7
    2290:	48 05       	cpc	r20, r8
    2292:	59 05       	cpc	r21, r9
    2294:	7c f3       	brlt	.-34     	; 0x2274 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x158>

	// In case we are using SendTo, copy the to parameters
	if (opcode == HCI_CMND_SENDTO)
    2296:	2b a9       	ldd	r18, Y+51	; 0x33
    2298:	3c a9       	ldd	r19, Y+52	; 0x34
    229a:	4d a9       	ldd	r20, Y+53	; 0x35
    229c:	5e a9       	ldd	r21, Y+54	; 0x36
    229e:	23 38       	cpi	r18, 0x83	; 131
    22a0:	31 05       	cpc	r19, r1
    22a2:	41 05       	cpc	r20, r1
    22a4:	51 05       	cpc	r21, r1
    22a6:	c1 f4       	brne	.+48     	; 0x22d8 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x1bc>
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	40 e0       	ldi	r20, 0x00	; 0
    22ae:	50 e0       	ldi	r21, 0x00	; 0
    22b0:	0e c0       	rjmp	.+28     	; 0x22ce <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x1b2>
//!  @brief          This function is used to transmit a message to another
//!                  socket
//
//*****************************************************************************
INT16 simple_link_send(INT32 sd, const void *buf, INT32 len, INT32 flags,
	const sockaddr *to, INT32 tolen, INT32 opcode)
    22b2:	f9 01       	movw	r30, r18
	ARRAY_TO_STREAM(pDataPtr, ((UINT8 *)buf), len);

	// In case we are using SendTo, copy the to parameters
	if (opcode == HCI_CMND_SENDTO)
	{	
		ARRAY_TO_STREAM(pDataPtr, ((UINT8 *)to), tolen);
    22b4:	d5 01       	movw	r26, r10
    22b6:	a2 0f       	add	r26, r18
    22b8:	b3 1f       	adc	r27, r19
    22ba:	89 8d       	ldd	r24, Y+25	; 0x19
    22bc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    22be:	e8 0f       	add	r30, r24
    22c0:	f9 1f       	adc	r31, r25
    22c2:	80 81       	ld	r24, Z
    22c4:	8c 93       	st	X, r24
    22c6:	2f 5f       	subi	r18, 0xFF	; 255
    22c8:	3f 4f       	sbci	r19, 0xFF	; 255
    22ca:	4f 4f       	sbci	r20, 0xFF	; 255
    22cc:	5f 4f       	sbci	r21, 0xFF	; 255
    22ce:	2c 15       	cp	r18, r12
    22d0:	3d 05       	cpc	r19, r13
    22d2:	4e 05       	cpc	r20, r14
    22d4:	5f 05       	cpc	r21, r15
    22d6:	6c f3       	brlt	.-38     	; 0x22b2 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x196>
	}

	// Initiate a HCI command
	hci_data_send(opcode, ptr, uArgSize, len,(UINT8*)to, tolen);
    22d8:	8b a9       	ldd	r24, Y+51	; 0x33
    22da:	69 89       	ldd	r22, Y+17	; 0x11
    22dc:	7a 89       	ldd	r23, Y+18	; 0x12
    22de:	a8 01       	movw	r20, r16
    22e0:	93 01       	movw	r18, r6
    22e2:	09 8d       	ldd	r16, Y+25	; 0x19
    22e4:	1a 8d       	ldd	r17, Y+26	; 0x1a
    22e6:	76 01       	movw	r14, r12
    22e8:	0e 94 54 09 	call	0x12a8	; 0x12a8 <hci_data_send>
    22ec:	be 01       	movw	r22, r28
    22ee:	6f 5f       	subi	r22, 0xFF	; 255
    22f0:	7f 4f       	sbci	r23, 0xFF	; 255

	if (opcode == HCI_CMND_SENDTO)
    22f2:	2b a9       	ldd	r18, Y+51	; 0x33
    22f4:	3c a9       	ldd	r19, Y+52	; 0x34
    22f6:	4d a9       	ldd	r20, Y+53	; 0x35
    22f8:	5e a9       	ldd	r21, Y+54	; 0x36
    22fa:	23 38       	cpi	r18, 0x83	; 131
    22fc:	31 05       	cpc	r19, r1
    22fe:	41 05       	cpc	r20, r1
    2300:	51 05       	cpc	r21, r1
    2302:	19 f4       	brne	.+6      	; 0x230a <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x1ee>
		SimpleLinkWaitEvent(HCI_EVNT_SENDTO, &tSocketSendEvent);
    2304:	8f e0       	ldi	r24, 0x0F	; 15
    2306:	90 e1       	ldi	r25, 0x10	; 16
    2308:	02 c0       	rjmp	.+4      	; 0x230e <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x1f2>
	else
		SimpleLinkWaitEvent(HCI_EVNT_SEND, &tSocketSendEvent);
    230a:	83 e0       	ldi	r24, 0x03	; 3
    230c:	90 e1       	ldi	r25, 0x10	; 16
    230e:	0e 94 48 09 	call	0x1290	; 0x1290 <SimpleLinkWaitEvent>

	return	(len);
    2312:	93 01       	movw	r18, r6
}
    2314:	c9 01       	movw	r24, r18
    2316:	6a 96       	adiw	r28, 0x1a	; 26
    2318:	0f b6       	in	r0, 0x3f	; 63
    231a:	f8 94       	cli
    231c:	de bf       	out	0x3e, r29	; 62
    231e:	0f be       	out	0x3f, r0	; 63
    2320:	cd bf       	out	0x3d, r28	; 61
    2322:	cf 91       	pop	r28
    2324:	df 91       	pop	r29
    2326:	1f 91       	pop	r17
    2328:	0f 91       	pop	r16
    232a:	ff 90       	pop	r15
    232c:	ef 90       	pop	r14
    232e:	df 90       	pop	r13
    2330:	cf 90       	pop	r12
    2332:	bf 90       	pop	r11
    2334:	af 90       	pop	r10
    2336:	9f 90       	pop	r9
    2338:	8f 90       	pop	r8
    233a:	7f 90       	pop	r7
    233c:	6f 90       	pop	r6
    233e:	5f 90       	pop	r5
    2340:	4f 90       	pop	r4
    2342:	3f 90       	pop	r3
    2344:	2f 90       	pop	r2
    2346:	08 95       	ret

00002348 <send>:
//!
//!  @sa             sendto
//
//*****************************************************************************

INT16 send(INT32 sd, const void *buf, INT32 len, INT32 flags)
    2348:	8f 92       	push	r8
    234a:	9f 92       	push	r9
    234c:	af 92       	push	r10
    234e:	bf 92       	push	r11
    2350:	cf 92       	push	r12
    2352:	df 92       	push	r13
    2354:	ef 92       	push	r14
    2356:	ff 92       	push	r15
    2358:	0f 93       	push	r16
    235a:	1f 93       	push	r17
{
	return(simple_link_send(sd, buf, len, flags, NULL, 0, HCI_CMND_SEND));
    235c:	ed b7       	in	r30, 0x3d	; 61
    235e:	fe b7       	in	r31, 0x3e	; 62
    2360:	38 97       	sbiw	r30, 0x08	; 8
    2362:	0f b6       	in	r0, 0x3f	; 63
    2364:	f8 94       	cli
    2366:	fe bf       	out	0x3e, r31	; 62
    2368:	0f be       	out	0x3f, r0	; 63
    236a:	ed bf       	out	0x3d, r30	; 61
    236c:	11 82       	std	Z+1, r1	; 0x01
    236e:	12 82       	std	Z+2, r1	; 0x02
    2370:	13 82       	std	Z+3, r1	; 0x03
    2372:	14 82       	std	Z+4, r1	; 0x04
    2374:	b1 e8       	ldi	r27, 0x81	; 129
    2376:	8b 2e       	mov	r8, r27
    2378:	91 2c       	mov	r9, r1
    237a:	a1 2c       	mov	r10, r1
    237c:	b1 2c       	mov	r11, r1
    237e:	85 82       	std	Z+5, r8	; 0x05
    2380:	96 82       	std	Z+6, r9	; 0x06
    2382:	a7 82       	std	Z+7, r10	; 0x07
    2384:	b0 86       	std	Z+8, r11	; 0x08
    2386:	aa 24       	eor	r10, r10
    2388:	bb 24       	eor	r11, r11
    238a:	0e 94 8e 10 	call	0x211c	; 0x211c <_Z16simple_link_sendlPKvllPK11_sockaddr_tll>
    238e:	2d b7       	in	r18, 0x3d	; 61
    2390:	3e b7       	in	r19, 0x3e	; 62
    2392:	28 5f       	subi	r18, 0xF8	; 248
    2394:	3f 4f       	sbci	r19, 0xFF	; 255
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	f8 94       	cli
    239a:	3e bf       	out	0x3e, r19	; 62
    239c:	0f be       	out	0x3f, r0	; 63
    239e:	2d bf       	out	0x3d, r18	; 61
}
    23a0:	1f 91       	pop	r17
    23a2:	0f 91       	pop	r16
    23a4:	ff 90       	pop	r15
    23a6:	ef 90       	pop	r14
    23a8:	df 90       	pop	r13
    23aa:	cf 90       	pop	r12
    23ac:	bf 90       	pop	r11
    23ae:	af 90       	pop	r10
    23b0:	9f 90       	pop	r9
    23b2:	8f 90       	pop	r8
    23b4:	08 95       	ret

000023b6 <wlan_init>:
	tDriverPatches sDriverPatches,
	tBootLoaderPatches sBootLoaderPatches,
	tWlanReadInteruptPin  sReadWlanInterruptPin,
	tWlanInterruptEnable  sWlanInterruptEnable,
	tWlanInterruptDisable sWlanInterruptDisable,
	tWriteWlanPin         sWriteWlanPin)
    23b6:	af 92       	push	r10
    23b8:	bf 92       	push	r11
    23ba:	cf 92       	push	r12
    23bc:	df 92       	push	r13
    23be:	ef 92       	push	r14
    23c0:	ff 92       	push	r15
    23c2:	0f 93       	push	r16
    23c4:	1f 93       	push	r17
{

	tSLInformation.sFWPatches = sFWPatches;
    23c6:	70 93 43 03 	sts	0x0343, r23
    23ca:	60 93 42 03 	sts	0x0342, r22
	tSLInformation.sDriverPatches = sDriverPatches;
    23ce:	50 93 45 03 	sts	0x0345, r21
    23d2:	40 93 44 03 	sts	0x0344, r20
	tSLInformation.sBootLoaderPatches = sBootLoaderPatches;
    23d6:	30 93 47 03 	sts	0x0347, r19
    23da:	20 93 46 03 	sts	0x0346, r18

	// init io callback
	tSLInformation.ReadWlanInterruptPin = sReadWlanInterruptPin;
    23de:	10 93 4b 03 	sts	0x034B, r17
    23e2:	00 93 4a 03 	sts	0x034A, r16
	tSLInformation.WlanInterruptEnable  = sWlanInterruptEnable;
    23e6:	f0 92 4d 03 	sts	0x034D, r15
    23ea:	e0 92 4c 03 	sts	0x034C, r14
	tSLInformation.WlanInterruptDisable = sWlanInterruptDisable;
    23ee:	d0 92 4f 03 	sts	0x034F, r13
    23f2:	c0 92 4e 03 	sts	0x034E, r12
	tSLInformation.WriteWlanPin = sWriteWlanPin;
    23f6:	b0 92 51 03 	sts	0x0351, r11
    23fa:	a0 92 50 03 	sts	0x0350, r10

	//init asynchronous events callback
	tSLInformation.sWlanCB= sWlanCB;
    23fe:	90 93 49 03 	sts	0x0349, r25
    2402:	80 93 48 03 	sts	0x0348, r24

	// By default TX Complete events are routed to host too
	tSLInformation.InformHostOnTxComplete = 1;
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	80 93 66 03 	sts	0x0366, r24
}
    240c:	1f 91       	pop	r17
    240e:	0f 91       	pop	r16
    2410:	ff 90       	pop	r15
    2412:	ef 90       	pop	r14
    2414:	df 90       	pop	r13
    2416:	cf 90       	pop	r12
    2418:	bf 90       	pop	r11
    241a:	af 90       	pop	r10
    241c:	08 95       	ret

0000241e <wlan_set_event_mask>:
//!  @brief    Mask event according to bit mask. In case that event is 
//!            masked (1), the device will not send the masked event to host. 
//
//*****************************************************************************

INT32 wlan_set_event_mask(UINT32 ulMask)
    241e:	0f 93       	push	r16
    2420:	1f 93       	push	r17
    2422:	df 93       	push	r29
    2424:	cf 93       	push	r28
    2426:	00 d0       	rcall	.+0      	; 0x2428 <wlan_set_event_mask+0xa>
    2428:	00 d0       	rcall	.+0      	; 0x242a <wlan_set_event_mask+0xc>
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
    242e:	ab 01       	movw	r20, r22
    2430:	bc 01       	movw	r22, r24
	INT32 ret;
	UINT8 *ptr;
	UINT8 *args;


	if ((ulMask & HCI_EVNT_WLAN_TX_COMPLETE) == HCI_EVNT_WLAN_TX_COMPLETE)
    2432:	db 01       	movw	r26, r22
    2434:	ca 01       	movw	r24, r20
    2436:	88 70       	andi	r24, 0x08	; 8
    2438:	90 78       	andi	r25, 0x80	; 128
    243a:	a0 70       	andi	r26, 0x00	; 0
    243c:	b0 70       	andi	r27, 0x00	; 0
    243e:	88 50       	subi	r24, 0x08	; 8
    2440:	90 48       	sbci	r25, 0x80	; 128
    2442:	a0 40       	sbci	r26, 0x00	; 0
    2444:	b0 40       	sbci	r27, 0x00	; 0
    2446:	a9 f4       	brne	.+42     	; 0x2472 <wlan_set_event_mask+0x54>
	{
		tSLInformation.InformHostOnTxComplete = 0;
    2448:	10 92 66 03 	sts	0x0366, r1

		// Since an event is a virtual event - i.e. it is not coming from CC3000
		// there is no need to send anything to the device if it was an only event
		if (ulMask == HCI_EVNT_WLAN_TX_COMPLETE)
    244c:	48 30       	cpi	r20, 0x08	; 8
    244e:	80 e8       	ldi	r24, 0x80	; 128
    2450:	58 07       	cpc	r21, r24
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	68 07       	cpc	r22, r24
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	78 07       	cpc	r23, r24
    245a:	29 f4       	brne	.+10     	; 0x2466 <wlan_set_event_mask+0x48>
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	40 e0       	ldi	r20, 0x00	; 0
    2462:	50 e0       	ldi	r21, 0x00	; 0
    2464:	2a c0       	rjmp	.+84     	; 0x24ba <wlan_set_event_mask+0x9c>
		{
			return 0;
		}

		ulMask &= ~HCI_EVNT_WLAN_TX_COMPLETE;
    2466:	47 7f       	andi	r20, 0xF7	; 247
    2468:	5f 77       	andi	r21, 0x7F	; 127
    246a:	60 70       	andi	r22, 0x00	; 0
    246c:	70 70       	andi	r23, 0x00	; 0
		ulMask |= HCI_EVNT_WLAN_UNSOL_BASE;
    246e:	50 68       	ori	r21, 0x80	; 128
    2470:	03 c0       	rjmp	.+6      	; 0x2478 <wlan_set_event_mask+0x5a>
	}
	else
	{
		tSLInformation.InformHostOnTxComplete = 1;
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	80 93 66 03 	sts	0x0366, r24
	}

	ret = EFAIL;
    2478:	8f ef       	ldi	r24, 0xFF	; 255
    247a:	9f ef       	ldi	r25, 0xFF	; 255
    247c:	af ef       	ldi	r26, 0xFF	; 255
    247e:	bf ef       	ldi	r27, 0xFF	; 255
    2480:	89 83       	std	Y+1, r24	; 0x01
    2482:	9a 83       	std	Y+2, r25	; 0x02
    2484:	ab 83       	std	Y+3, r26	; 0x03
    2486:	bc 83       	std	Y+4, r27	; 0x04
	ptr = tSLInformation.pucTxCommandBuffer;
    2488:	00 91 40 03 	lds	r16, 0x0340
    248c:	10 91 41 03 	lds	r17, 0x0341
	args = (UINT8 *)(ptr + HEADERS_SIZE_CMD);

	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, ulMask);
    2490:	c8 01       	movw	r24, r16
    2492:	09 96       	adiw	r24, 0x09	; 9
    2494:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_EVENT_MASK,
		ptr, WLAN_SET_MASK_PARAMS_LEN);
    2498:	88 e0       	ldi	r24, 0x08	; 8
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	b8 01       	movw	r22, r16
    249e:	44 e0       	ldi	r20, 0x04	; 4
    24a0:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <hci_command_send>

	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_CMND_EVENT_MASK, &ret);
    24a4:	88 e0       	ldi	r24, 0x08	; 8
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	be 01       	movw	r22, r28
    24aa:	6f 5f       	subi	r22, 0xFF	; 255
    24ac:	7f 4f       	sbci	r23, 0xFF	; 255
    24ae:	0e 94 48 09 	call	0x1290	; 0x1290 <SimpleLinkWaitEvent>

	return(ret);
    24b2:	29 81       	ldd	r18, Y+1	; 0x01
    24b4:	3a 81       	ldd	r19, Y+2	; 0x02
    24b6:	4b 81       	ldd	r20, Y+3	; 0x03
    24b8:	5c 81       	ldd	r21, Y+4	; 0x04
}
    24ba:	b9 01       	movw	r22, r18
    24bc:	ca 01       	movw	r24, r20
    24be:	0f 90       	pop	r0
    24c0:	0f 90       	pop	r0
    24c2:	0f 90       	pop	r0
    24c4:	0f 90       	pop	r0
    24c6:	cf 91       	pop	r28
    24c8:	df 91       	pop	r29
    24ca:	1f 91       	pop	r17
    24cc:	0f 91       	pop	r16
    24ce:	08 95       	ret

000024d0 <wlan_ioctl_set_scan_params>:
	UINT32 uiMaxDwellTime,
	UINT32 uiNumOfProbeRequests,
	UINT32 uiChannelMask,INT32 iRSSIThreshold,
	UINT32 uiSNRThreshold,
	UINT32 uiDefaultTxPower,
	UINT32 *aiIntervalList)
    24d0:	2f 92       	push	r2
    24d2:	3f 92       	push	r3
    24d4:	4f 92       	push	r4
    24d6:	5f 92       	push	r5
    24d8:	6f 92       	push	r6
    24da:	7f 92       	push	r7
    24dc:	8f 92       	push	r8
    24de:	9f 92       	push	r9
    24e0:	af 92       	push	r10
    24e2:	bf 92       	push	r11
    24e4:	cf 92       	push	r12
    24e6:	df 92       	push	r13
    24e8:	ef 92       	push	r14
    24ea:	ff 92       	push	r15
    24ec:	0f 93       	push	r16
    24ee:	1f 93       	push	r17
    24f0:	df 93       	push	r29
    24f2:	cf 93       	push	r28
    24f4:	cd b7       	in	r28, 0x3d	; 61
    24f6:	de b7       	in	r29, 0x3e	; 62
    24f8:	28 97       	sbiw	r28, 0x08	; 8
    24fa:	0f b6       	in	r0, 0x3f	; 63
    24fc:	f8 94       	cli
    24fe:	de bf       	out	0x3e, r29	; 62
    2500:	0f be       	out	0x3f, r0	; 63
    2502:	cd bf       	out	0x3d, r28	; 61
    2504:	3b 01       	movw	r6, r22
    2506:	4c 01       	movw	r8, r24
    2508:	19 01       	movw	r2, r18
    250a:	2a 01       	movw	r4, r20
    250c:	8d a5       	ldd	r24, Y+45	; 0x2d
    250e:	8f 83       	std	Y+7, r24	; 0x07
    2510:	9e a5       	ldd	r25, Y+46	; 0x2e
    2512:	98 87       	std	Y+8, r25	; 0x08
{
	UINT32  uiRes;
	UINT8 *ptr;
	UINT8 *args;

	ptr = tSLInformation.pucTxCommandBuffer;
    2514:	80 91 40 03 	lds	r24, 0x0340
    2518:	90 91 41 03 	lds	r25, 0x0341
    251c:	9e 83       	std	Y+6, r25	; 0x06
    251e:	8d 83       	std	Y+5, r24	; 0x05
	args = (ptr + HEADERS_SIZE_CMD);

	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, 36);
    2520:	09 96       	adiw	r24, 0x09	; 9
    2522:	44 e2       	ldi	r20, 0x24	; 36
    2524:	50 e0       	ldi	r21, 0x00	; 0
    2526:	60 e0       	ldi	r22, 0x00	; 0
    2528:	70 e0       	ldi	r23, 0x00	; 0
    252a:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, uiEnable);
    252e:	b4 01       	movw	r22, r8
    2530:	a3 01       	movw	r20, r6
    2532:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, uiMinDwellTime);
    2536:	b2 01       	movw	r22, r4
    2538:	a1 01       	movw	r20, r2
    253a:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, uiMaxDwellTime);
    253e:	b8 01       	movw	r22, r16
    2540:	a7 01       	movw	r20, r14
    2542:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, uiNumOfProbeRequests);
    2546:	b6 01       	movw	r22, r12
    2548:	a5 01       	movw	r20, r10
    254a:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, uiChannelMask);
    254e:	4d 8d       	ldd	r20, Y+29	; 0x1d
    2550:	5e 8d       	ldd	r21, Y+30	; 0x1e
    2552:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2554:	78 a1       	ldd	r23, Y+32	; 0x20
    2556:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, iRSSIThreshold);
    255a:	49 a1       	ldd	r20, Y+33	; 0x21
    255c:	5a a1       	ldd	r21, Y+34	; 0x22
    255e:	6b a1       	ldd	r22, Y+35	; 0x23
    2560:	7c a1       	ldd	r23, Y+36	; 0x24
    2562:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, uiSNRThreshold);
    2566:	4d a1       	ldd	r20, Y+37	; 0x25
    2568:	5e a1       	ldd	r21, Y+38	; 0x26
    256a:	6f a1       	ldd	r22, Y+39	; 0x27
    256c:	78 a5       	ldd	r23, Y+40	; 0x28
    256e:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, uiDefaultTxPower);
    2572:	49 a5       	ldd	r20, Y+41	; 0x29
    2574:	5a a5       	ldd	r21, Y+42	; 0x2a
    2576:	6b a5       	ldd	r22, Y+43	; 0x2b
    2578:	7c a5       	ldd	r23, Y+44	; 0x2c
    257a:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
    257e:	dc 01       	movw	r26, r24
    2580:	8f 81       	ldd	r24, Y+7	; 0x07
    2582:	98 85       	ldd	r25, Y+8	; 0x08
    2584:	fc 01       	movw	r30, r24
	ARRAY_TO_STREAM(args, aiIntervalList, sizeof(UINT32) * 
    2586:	9f 01       	movw	r18, r30
    2588:	20 5c       	subi	r18, 0xC0	; 192
    258a:	3f 4f       	sbci	r19, 0xFF	; 255
    258c:	02 c0       	rjmp	.+4      	; 0x2592 <wlan_ioctl_set_scan_params+0xc2>
    258e:	81 91       	ld	r24, Z+
    2590:	8d 93       	st	X+, r24
    2592:	e2 17       	cp	r30, r18
    2594:	f3 07       	cpc	r31, r19
    2596:	d9 f7       	brne	.-10     	; 0x258e <wlan_ioctl_set_scan_params+0xbe>
		SL_SET_SCAN_PARAMS_INTERVAL_LIST_SIZE);

	// Initiate a HCI command
	hci_command_send(HCI_CMND_WLAN_IOCTL_SET_SCANPARAM,
		ptr, WLAN_SET_SCAN_PARAMS_LEN);
    2598:	83 e0       	ldi	r24, 0x03	; 3
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	6d 81       	ldd	r22, Y+5	; 0x05
    259e:	7e 81       	ldd	r23, Y+6	; 0x06
    25a0:	44 e6       	ldi	r20, 0x64	; 100
    25a2:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <hci_command_send>

	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_CMND_WLAN_IOCTL_SET_SCANPARAM, &uiRes);
    25a6:	83 e0       	ldi	r24, 0x03	; 3
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	be 01       	movw	r22, r28
    25ac:	6f 5f       	subi	r22, 0xFF	; 255
    25ae:	7f 4f       	sbci	r23, 0xFF	; 255
    25b0:	0e 94 48 09 	call	0x1290	; 0x1290 <SimpleLinkWaitEvent>
    25b4:	69 81       	ldd	r22, Y+1	; 0x01
    25b6:	7a 81       	ldd	r23, Y+2	; 0x02

	return(uiRes);
}
    25b8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ba:	9c 81       	ldd	r25, Y+4	; 0x04
    25bc:	28 96       	adiw	r28, 0x08	; 8
    25be:	0f b6       	in	r0, 0x3f	; 63
    25c0:	f8 94       	cli
    25c2:	de bf       	out	0x3e, r29	; 62
    25c4:	0f be       	out	0x3f, r0	; 63
    25c6:	cd bf       	out	0x3d, r28	; 61
    25c8:	cf 91       	pop	r28
    25ca:	df 91       	pop	r29
    25cc:	1f 91       	pop	r17
    25ce:	0f 91       	pop	r16
    25d0:	ff 90       	pop	r15
    25d2:	ef 90       	pop	r14
    25d4:	df 90       	pop	r13
    25d6:	cf 90       	pop	r12
    25d8:	bf 90       	pop	r11
    25da:	af 90       	pop	r10
    25dc:	9f 90       	pop	r9
    25de:	8f 90       	pop	r8
    25e0:	7f 90       	pop	r7
    25e2:	6f 90       	pop	r6
    25e4:	5f 90       	pop	r5
    25e6:	4f 90       	pop	r4
    25e8:	3f 90       	pop	r3
    25ea:	2f 90       	pop	r2
    25ec:	08 95       	ret

000025ee <wlan_ioctl_del_profile>:
//!
//!  @sa        wlan_add_profile 
//
//*****************************************************************************

INT32 wlan_ioctl_del_profile(UINT32 ulIndex)
    25ee:	0f 93       	push	r16
    25f0:	1f 93       	push	r17
    25f2:	df 93       	push	r29
    25f4:	cf 93       	push	r28
    25f6:	00 d0       	rcall	.+0      	; 0x25f8 <wlan_ioctl_del_profile+0xa>
    25f8:	00 d0       	rcall	.+0      	; 0x25fa <wlan_ioctl_del_profile+0xc>
    25fa:	cd b7       	in	r28, 0x3d	; 61
    25fc:	de b7       	in	r29, 0x3e	; 62
    25fe:	ab 01       	movw	r20, r22
    2600:	bc 01       	movw	r22, r24
{
	INT32 ret;
	UINT8 *ptr;
	UINT8 *args;

	ptr = tSLInformation.pucTxCommandBuffer;
    2602:	00 91 40 03 	lds	r16, 0x0340
    2606:	10 91 41 03 	lds	r17, 0x0341
	args = (UINT8 *)(ptr + HEADERS_SIZE_CMD);

	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, ulIndex);
    260a:	c8 01       	movw	r24, r16
    260c:	09 96       	adiw	r24, 0x09	; 9
    260e:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	ret = EFAIL;
    2612:	8f ef       	ldi	r24, 0xFF	; 255
    2614:	9f ef       	ldi	r25, 0xFF	; 255
    2616:	af ef       	ldi	r26, 0xFF	; 255
    2618:	bf ef       	ldi	r27, 0xFF	; 255
    261a:	89 83       	std	Y+1, r24	; 0x01
    261c:	9a 83       	std	Y+2, r25	; 0x02
    261e:	ab 83       	std	Y+3, r26	; 0x03
    2620:	bc 83       	std	Y+4, r27	; 0x04

	// Initiate a HCI command
	hci_command_send(HCI_CMND_WLAN_IOCTL_DEL_PROFILE,
		ptr, WLAN_DEL_PROFILE_PARAMS_LEN);
    2622:	86 e0       	ldi	r24, 0x06	; 6
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	b8 01       	movw	r22, r16
    2628:	44 e0       	ldi	r20, 0x04	; 4
    262a:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <hci_command_send>

	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_CMND_WLAN_IOCTL_DEL_PROFILE, &ret);
    262e:	86 e0       	ldi	r24, 0x06	; 6
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	be 01       	movw	r22, r28
    2634:	6f 5f       	subi	r22, 0xFF	; 255
    2636:	7f 4f       	sbci	r23, 0xFF	; 255
    2638:	0e 94 48 09 	call	0x1290	; 0x1290 <SimpleLinkWaitEvent>
    263c:	69 81       	ldd	r22, Y+1	; 0x01
    263e:	7a 81       	ldd	r23, Y+2	; 0x02

	return(ret);
}
    2640:	8b 81       	ldd	r24, Y+3	; 0x03
    2642:	9c 81       	ldd	r25, Y+4	; 0x04
    2644:	0f 90       	pop	r0
    2646:	0f 90       	pop	r0
    2648:	0f 90       	pop	r0
    264a:	0f 90       	pop	r0
    264c:	cf 91       	pop	r28
    264e:	df 91       	pop	r29
    2650:	1f 91       	pop	r17
    2652:	0f 91       	pop	r16
    2654:	08 95       	ret

00002656 <wlan_ioctl_set_connection_policy>:
//
//*****************************************************************************

INT32 wlan_ioctl_set_connection_policy(UINT32 should_connect_to_open_ap, 
	UINT32 ulShouldUseFastConnect,
	UINT32 ulUseProfiles)
    2656:	4f 92       	push	r4
    2658:	5f 92       	push	r5
    265a:	6f 92       	push	r6
    265c:	7f 92       	push	r7
    265e:	8f 92       	push	r8
    2660:	9f 92       	push	r9
    2662:	af 92       	push	r10
    2664:	bf 92       	push	r11
    2666:	cf 92       	push	r12
    2668:	df 92       	push	r13
    266a:	ef 92       	push	r14
    266c:	ff 92       	push	r15
    266e:	0f 93       	push	r16
    2670:	1f 93       	push	r17
    2672:	df 93       	push	r29
    2674:	cf 93       	push	r28
    2676:	00 d0       	rcall	.+0      	; 0x2678 <wlan_ioctl_set_connection_policy+0x22>
    2678:	00 d0       	rcall	.+0      	; 0x267a <wlan_ioctl_set_connection_policy+0x24>
    267a:	cd b7       	in	r28, 0x3d	; 61
    267c:	de b7       	in	r29, 0x3e	; 62
    267e:	5b 01       	movw	r10, r22
    2680:	6c 01       	movw	r12, r24
    2682:	39 01       	movw	r6, r18
    2684:	4a 01       	movw	r8, r20
{
	INT32 ret;
	UINT8 *ptr;
	UINT8 *args;

	ret = EFAIL;
    2686:	8f ef       	ldi	r24, 0xFF	; 255
    2688:	9f ef       	ldi	r25, 0xFF	; 255
    268a:	af ef       	ldi	r26, 0xFF	; 255
    268c:	bf ef       	ldi	r27, 0xFF	; 255
    268e:	89 83       	std	Y+1, r24	; 0x01
    2690:	9a 83       	std	Y+2, r25	; 0x02
    2692:	ab 83       	std	Y+3, r26	; 0x03
    2694:	bc 83       	std	Y+4, r27	; 0x04
	ptr = tSLInformation.pucTxCommandBuffer;
    2696:	40 90 40 03 	lds	r4, 0x0340
    269a:	50 90 41 03 	lds	r5, 0x0341
	args = (UINT8 *)(ptr + HEADERS_SIZE_CMD);

	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, should_connect_to_open_ap);
    269e:	c2 01       	movw	r24, r4
    26a0:	09 96       	adiw	r24, 0x09	; 9
    26a2:	b6 01       	movw	r22, r12
    26a4:	a5 01       	movw	r20, r10
    26a6:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, ulShouldUseFastConnect);
    26aa:	b4 01       	movw	r22, r8
    26ac:	a3 01       	movw	r20, r6
    26ae:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, ulUseProfiles);
    26b2:	b8 01       	movw	r22, r16
    26b4:	a7 01       	movw	r20, r14
    26b6:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_WLAN_IOCTL_SET_CONNECTION_POLICY,
		ptr, WLAN_SET_CONNECTION_POLICY_PARAMS_LEN);
    26ba:	84 e0       	ldi	r24, 0x04	; 4
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	b2 01       	movw	r22, r4
    26c0:	4c e0       	ldi	r20, 0x0C	; 12
    26c2:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <hci_command_send>

	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_CMND_WLAN_IOCTL_SET_CONNECTION_POLICY, &ret);
    26c6:	84 e0       	ldi	r24, 0x04	; 4
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	be 01       	movw	r22, r28
    26cc:	6f 5f       	subi	r22, 0xFF	; 255
    26ce:	7f 4f       	sbci	r23, 0xFF	; 255
    26d0:	0e 94 48 09 	call	0x1290	; 0x1290 <SimpleLinkWaitEvent>
    26d4:	69 81       	ldd	r22, Y+1	; 0x01
    26d6:	7a 81       	ldd	r23, Y+2	; 0x02

	return(ret);
}
    26d8:	8b 81       	ldd	r24, Y+3	; 0x03
    26da:	9c 81       	ldd	r25, Y+4	; 0x04
    26dc:	0f 90       	pop	r0
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	cf 91       	pop	r28
    26e6:	df 91       	pop	r29
    26e8:	1f 91       	pop	r17
    26ea:	0f 91       	pop	r16
    26ec:	ff 90       	pop	r15
    26ee:	ef 90       	pop	r14
    26f0:	df 90       	pop	r13
    26f2:	cf 90       	pop	r12
    26f4:	bf 90       	pop	r11
    26f6:	af 90       	pop	r10
    26f8:	9f 90       	pop	r9
    26fa:	8f 90       	pop	r8
    26fc:	7f 90       	pop	r7
    26fe:	6f 90       	pop	r6
    2700:	5f 90       	pop	r5
    2702:	4f 90       	pop	r4
    2704:	08 95       	ret

00002706 <wlan_connect>:
// Adafruit CC3k Host Driver Difference
// Make ssid a const char pointer because it isn't modified and the Adafruit
// driver code needs it to be const to interface with Arduino's client library.
// Noted 12-12-2014 by tdicola
INT32 wlan_connect(UINT32 ulSecType, const CHAR *ssid, INT32 ssid_len,
	UINT8 *bssid, UINT8 *key, INT32 key_len)
    2706:	2f 92       	push	r2
    2708:	3f 92       	push	r3
    270a:	4f 92       	push	r4
    270c:	5f 92       	push	r5
    270e:	6f 92       	push	r6
    2710:	7f 92       	push	r7
    2712:	8f 92       	push	r8
    2714:	9f 92       	push	r9
    2716:	af 92       	push	r10
    2718:	bf 92       	push	r11
    271a:	cf 92       	push	r12
    271c:	df 92       	push	r13
    271e:	ef 92       	push	r14
    2720:	ff 92       	push	r15
    2722:	0f 93       	push	r16
    2724:	1f 93       	push	r17
    2726:	df 93       	push	r29
    2728:	cf 93       	push	r28
    272a:	cd b7       	in	r28, 0x3d	; 61
    272c:	de b7       	in	r29, 0x3e	; 62
    272e:	60 97       	sbiw	r28, 0x10	; 16
    2730:	0f b6       	in	r0, 0x3f	; 63
    2732:	f8 94       	cli
    2734:	de bf       	out	0x3e, r29	; 62
    2736:	0f be       	out	0x3f, r0	; 63
    2738:	cd bf       	out	0x3d, r28	; 61
    273a:	2b 01       	movw	r4, r22
    273c:	3c 01       	movw	r6, r24
    273e:	5c 87       	std	Y+12, r21	; 0x0c
    2740:	4b 87       	std	Y+11, r20	; 0x0b
    2742:	0d 87       	std	Y+13, r16	; 0x0d
    2744:	1e 87       	std	Y+14, r17	; 0x0e
    2746:	2f 87       	std	Y+15, r18	; 0x0f
    2748:	38 8b       	std	Y+16, r19	; 0x10
    274a:	16 01       	movw	r2, r12
{
	INT32 ret;
	UINT8 *ptr;
	UINT8 *args;
	UINT8 bssid_zero[] = {0, 0, 0, 0, 0, 0};
    274c:	8e 01       	movw	r16, r28
    274e:	0b 5f       	subi	r16, 0xFB	; 251
    2750:	1f 4f       	sbci	r17, 0xFF	; 255
    2752:	86 e0       	ldi	r24, 0x06	; 6
    2754:	d8 01       	movw	r26, r16
    2756:	1d 92       	st	X+, r1
    2758:	8a 95       	dec	r24
    275a:	e9 f7       	brne	.-6      	; 0x2756 <wlan_connect+0x50>

	ret  	= EFAIL;
    275c:	8f ef       	ldi	r24, 0xFF	; 255
    275e:	9f ef       	ldi	r25, 0xFF	; 255
    2760:	af ef       	ldi	r26, 0xFF	; 255
    2762:	bf ef       	ldi	r27, 0xFF	; 255
    2764:	89 83       	std	Y+1, r24	; 0x01
    2766:	9a 83       	std	Y+2, r25	; 0x02
    2768:	ab 83       	std	Y+3, r26	; 0x03
    276a:	bc 83       	std	Y+4, r27	; 0x04
	ptr  	= tSLInformation.pucTxCommandBuffer;
    276c:	c0 90 40 03 	lds	r12, 0x0340
    2770:	d0 90 41 03 	lds	r13, 0x0341
	args 	= (ptr + HEADERS_SIZE_CMD);

	// Fill in command buffer
	args = UINT32_TO_STREAM(args, 0x0000001c);
    2774:	c6 01       	movw	r24, r12
    2776:	09 96       	adiw	r24, 0x09	; 9
    2778:	4c e1       	ldi	r20, 0x1C	; 28
    277a:	50 e0       	ldi	r21, 0x00	; 0
    277c:	60 e0       	ldi	r22, 0x00	; 0
    277e:	70 e0       	ldi	r23, 0x00	; 0
    2780:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, ssid_len);
    2784:	4d 85       	ldd	r20, Y+13	; 0x0d
    2786:	5e 85       	ldd	r21, Y+14	; 0x0e
    2788:	6f 85       	ldd	r22, Y+15	; 0x0f
    278a:	78 89       	ldd	r23, Y+16	; 0x10
    278c:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, ulSecType);
    2790:	b3 01       	movw	r22, r6
    2792:	a2 01       	movw	r20, r4
    2794:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, 0x00000010 + ssid_len);
    2798:	4d 85       	ldd	r20, Y+13	; 0x0d
    279a:	5e 85       	ldd	r21, Y+14	; 0x0e
    279c:	6f 85       	ldd	r22, Y+15	; 0x0f
    279e:	78 89       	ldd	r23, Y+16	; 0x10
    27a0:	40 5f       	subi	r20, 0xF0	; 240
    27a2:	5f 4f       	sbci	r21, 0xFF	; 255
    27a4:	6f 4f       	sbci	r22, 0xFF	; 255
    27a6:	7f 4f       	sbci	r23, 0xFF	; 255
    27a8:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, key_len);
    27ac:	b5 01       	movw	r22, r10
    27ae:	a4 01       	movw	r20, r8
    27b0:	0e 94 29 02 	call	0x452	; 0x452 <UINT32_TO_STREAM_f>
	args = UINT16_TO_STREAM(args, 0);
    27b4:	60 e0       	ldi	r22, 0x00	; 0
    27b6:	70 e0       	ldi	r23, 0x00	; 0
    27b8:	0e 94 45 02 	call	0x48a	; 0x48a <UINT16_TO_STREAM_f>
    27bc:	dc 01       	movw	r26, r24

	// padding shall be zeroed
	if(bssid)
    27be:	e1 14       	cp	r14, r1
    27c0:	f1 04       	cpc	r15, r1
    27c2:	81 f0       	breq	.+32     	; 0x27e4 <wlan_connect+0xde>
    27c4:	ac 01       	movw	r20, r24
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	30 e0       	ldi	r19, 0x00	; 0
	{
		ARRAY_TO_STREAM(args, bssid, ETH_ALEN);
    27ca:	f7 01       	movw	r30, r14
    27cc:	e2 0f       	add	r30, r18
    27ce:	f3 1f       	adc	r31, r19
    27d0:	80 81       	ld	r24, Z
    27d2:	fa 01       	movw	r30, r20
    27d4:	81 93       	st	Z+, r24
    27d6:	af 01       	movw	r20, r30
    27d8:	2f 5f       	subi	r18, 0xFF	; 255
    27da:	3f 4f       	sbci	r19, 0xFF	; 255
    27dc:	26 30       	cpi	r18, 0x06	; 6
    27de:	31 05       	cpc	r19, r1
    27e0:	a1 f7       	brne	.-24     	; 0x27ca <wlan_connect+0xc4>
    27e2:	0e c0       	rjmp	.+28     	; 0x2800 <wlan_connect+0xfa>
    27e4:	b8 01       	movw	r22, r16
    27e6:	9c 01       	movw	r18, r24
	}
	else
	{
		ARRAY_TO_STREAM(args, bssid_zero, ETH_ALEN);
    27e8:	ae 01       	movw	r20, r28
    27ea:	45 5f       	subi	r20, 0xF5	; 245
    27ec:	5f 4f       	sbci	r21, 0xFF	; 255
    27ee:	fb 01       	movw	r30, r22
    27f0:	81 91       	ld	r24, Z+
    27f2:	bf 01       	movw	r22, r30
    27f4:	f9 01       	movw	r30, r18
    27f6:	81 93       	st	Z+, r24
    27f8:	9f 01       	movw	r18, r30
    27fa:	64 17       	cp	r22, r20
    27fc:	75 07       	cpc	r23, r21
    27fe:	b9 f7       	brne	.-18     	; 0x27ee <wlan_connect+0xe8>
    2800:	bd 01       	movw	r22, r26
    2802:	6a 5f       	subi	r22, 0xFA	; 250
    2804:	7f 4f       	sbci	r23, 0xFF	; 255
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	40 e0       	ldi	r20, 0x00	; 0
    280c:	50 e0       	ldi	r21, 0x00	; 0
    280e:	0c c0       	rjmp	.+24     	; 0x2828 <wlan_connect+0x122>
	}

	ARRAY_TO_STREAM(args, ssid, ssid_len);
    2810:	eb 85       	ldd	r30, Y+11	; 0x0b
    2812:	fc 85       	ldd	r31, Y+12	; 0x0c
    2814:	e2 0f       	add	r30, r18
    2816:	f3 1f       	adc	r31, r19
    2818:	80 81       	ld	r24, Z
    281a:	db 01       	movw	r26, r22
    281c:	8d 93       	st	X+, r24
    281e:	bd 01       	movw	r22, r26
    2820:	2f 5f       	subi	r18, 0xFF	; 255
    2822:	3f 4f       	sbci	r19, 0xFF	; 255
    2824:	4f 4f       	sbci	r20, 0xFF	; 255
    2826:	5f 4f       	sbci	r21, 0xFF	; 255
    2828:	8d 85       	ldd	r24, Y+13	; 0x0d
    282a:	9e 85       	ldd	r25, Y+14	; 0x0e
    282c:	af 85       	ldd	r26, Y+15	; 0x0f
    282e:	b8 89       	ldd	r27, Y+16	; 0x10
    2830:	28 17       	cp	r18, r24
    2832:	39 07       	cpc	r19, r25
    2834:	4a 07       	cpc	r20, r26
    2836:	5b 07       	cpc	r21, r27
    2838:	5c f3       	brlt	.-42     	; 0x2810 <wlan_connect+0x10a>

	if(key_len && key)
    283a:	81 14       	cp	r8, r1
    283c:	91 04       	cpc	r9, r1
    283e:	a1 04       	cpc	r10, r1
    2840:	b1 04       	cpc	r11, r1
    2842:	c9 f0       	breq	.+50     	; 0x2876 <wlan_connect+0x170>
    2844:	21 14       	cp	r2, r1
    2846:	31 04       	cpc	r3, r1
    2848:	b1 f0       	breq	.+44     	; 0x2876 <wlan_connect+0x170>
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	40 e0       	ldi	r20, 0x00	; 0
    2850:	50 e0       	ldi	r21, 0x00	; 0
    2852:	0c c0       	rjmp	.+24     	; 0x286c <wlan_connect+0x166>
// Adafruit CC3k Host Driver Difference
// Make ssid a const char pointer because it isn't modified and the Adafruit
// driver code needs it to be const to interface with Arduino's client library.
// Noted 12-12-2014 by tdicola
INT32 wlan_connect(UINT32 ulSecType, const CHAR *ssid, INT32 ssid_len,
	UINT8 *bssid, UINT8 *key, INT32 key_len)
    2854:	f9 01       	movw	r30, r18

	ARRAY_TO_STREAM(args, ssid, ssid_len);

	if(key_len && key)
	{
		ARRAY_TO_STREAM(args, key, key_len);
    2856:	db 01       	movw	r26, r22
    2858:	a2 0f       	add	r26, r18
    285a:	b3 1f       	adc	r27, r19
    285c:	e2 0d       	add	r30, r2
    285e:	f3 1d       	adc	r31, r3
    2860:	80 81       	ld	r24, Z
    2862:	8c 93       	st	X, r24
    2864:	2f 5f       	subi	r18, 0xFF	; 255
    2866:	3f 4f       	sbci	r19, 0xFF	; 255
    2868:	4f 4f       	sbci	r20, 0xFF	; 255
    286a:	5f 4f       	sbci	r21, 0xFF	; 255
    286c:	28 15       	cp	r18, r8
    286e:	39 05       	cpc	r19, r9
    2870:	4a 05       	cpc	r20, r10
    2872:	5b 05       	cpc	r21, r11
    2874:	7c f3       	brlt	.-34     	; 0x2854 <wlan_connect+0x14e>
	}

	// Initiate a HCI command
	hci_command_send(HCI_CMND_WLAN_CONNECT, ptr, WLAN_CONNECT_PARAM_LEN + 
		ssid_len + key_len - 1);
    2876:	4d 85       	ldd	r20, Y+13	; 0x0d
    2878:	44 5e       	subi	r20, 0xE4	; 228
    287a:	48 0d       	add	r20, r8
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	b6 01       	movw	r22, r12
    2882:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <hci_command_send>

	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_CMND_WLAN_CONNECT, &ret);
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	be 01       	movw	r22, r28
    288c:	6f 5f       	subi	r22, 0xFF	; 255
    288e:	7f 4f       	sbci	r23, 0xFF	; 255
    2890:	0e 94 48 09 	call	0x1290	; 0x1290 <SimpleLinkWaitEvent>
	errno = ret;
    2894:	69 81       	ldd	r22, Y+1	; 0x01
    2896:	7a 81       	ldd	r23, Y+2	; 0x02
    2898:	8b 81       	ldd	r24, Y+3	; 0x03
    289a:	9c 81       	ldd	r25, Y+4	; 0x04
    289c:	9b 01       	movw	r18, r22
    289e:	20 93 3f 07 	sts	0x073F, r18
    28a2:	30 93 40 07 	sts	0x0740, r19

	return(ret);
}
    28a6:	60 96       	adiw	r28, 0x10	; 16
    28a8:	0f b6       	in	r0, 0x3f	; 63
    28aa:	f8 94       	cli
    28ac:	de bf       	out	0x3e, r29	; 62
    28ae:	0f be       	out	0x3f, r0	; 63
    28b0:	cd bf       	out	0x3d, r28	; 61
    28b2:	cf 91       	pop	r28
    28b4:	df 91       	pop	r29
    28b6:	1f 91       	pop	r17
    28b8:	0f 91       	pop	r16
    28ba:	ff 90       	pop	r15
    28bc:	ef 90       	pop	r14
    28be:	df 90       	pop	r13
    28c0:	cf 90       	pop	r12
    28c2:	bf 90       	pop	r11
    28c4:	af 90       	pop	r10
    28c6:	9f 90       	pop	r9
    28c8:	8f 90       	pop	r8
    28ca:	7f 90       	pop	r7
    28cc:	6f 90       	pop	r6
    28ce:	5f 90       	pop	r5
    28d0:	4f 90       	pop	r4
    28d2:	3f 90       	pop	r3
    28d4:	2f 90       	pop	r2
    28d6:	08 95       	ret

000028d8 <wlan_start>:
//!  @sa            wlan_init , wlan_stop
//!
//
//*****************************************************************************

void wlan_start(UINT16 usPatchesAvailableAtHost)
    28d8:	ef 92       	push	r14
    28da:	ff 92       	push	r15
    28dc:	0f 93       	push	r16
    28de:	1f 93       	push	r17
    28e0:	cf 93       	push	r28
    28e2:	df 93       	push	r29
    28e4:	ec 01       	movw	r28, r24
{

	UINT32 ulSpiIRQState;

	tSLInformation.NumberOfSentPackets = 0;
    28e6:	10 92 5e 03 	sts	0x035E, r1
    28ea:	10 92 5f 03 	sts	0x035F, r1
    28ee:	10 92 60 03 	sts	0x0360, r1
    28f2:	10 92 61 03 	sts	0x0361, r1
	tSLInformation.NumberOfReleasedPackets = 0;
    28f6:	10 92 62 03 	sts	0x0362, r1
    28fa:	10 92 63 03 	sts	0x0363, r1
    28fe:	10 92 64 03 	sts	0x0364, r1
    2902:	10 92 65 03 	sts	0x0365, r1
	tSLInformation.usRxEventOpcode = 0;
    2906:	10 92 3b 03 	sts	0x033B, r1
    290a:	10 92 3a 03 	sts	0x033A, r1
	tSLInformation.usNumberOfFreeBuffers = 0;
    290e:	10 92 57 03 	sts	0x0357, r1
    2912:	10 92 56 03 	sts	0x0356, r1
	tSLInformation.usSlBufferLength = 0;
    2916:	10 92 59 03 	sts	0x0359, r1
    291a:	10 92 58 03 	sts	0x0358, r1
	tSLInformation.usBufferSize = 0;
    291e:	10 92 5b 03 	sts	0x035B, r1
    2922:	10 92 5a 03 	sts	0x035A, r1
	tSLInformation.usRxDataPending = 0;
    2926:	10 92 5d 03 	sts	0x035D, r1
    292a:	10 92 5c 03 	sts	0x035C, r1
	tSLInformation.slTransmitDataError = 0;
    292e:	10 92 52 03 	sts	0x0352, r1
    2932:	10 92 53 03 	sts	0x0353, r1
    2936:	10 92 54 03 	sts	0x0354, r1
    293a:	10 92 55 03 	sts	0x0355, r1
	tSLInformation.usEventOrDataReceived = 0;
    293e:	10 92 3d 03 	sts	0x033D, r1
    2942:	10 92 3c 03 	sts	0x033C, r1
	tSLInformation.pucReceivedData = 0;
    2946:	10 92 3f 03 	sts	0x033F, r1
    294a:	10 92 3e 03 	sts	0x033E, r1

	// Allocate the memory for the RX/TX data transactions
	tSLInformation.pucTxCommandBuffer = (UINT8 *)wlan_tx_buffer;
    294e:	85 e4       	ldi	r24, 0x45	; 69
    2950:	94 e0       	ldi	r25, 0x04	; 4
    2952:	90 93 41 03 	sts	0x0341, r25
    2956:	80 93 40 03 	sts	0x0340, r24

	// init spi
	SpiOpen(SpiReceiveHandler);
    295a:	8e e0       	ldi	r24, 0x0E	; 14
    295c:	95 e1       	ldi	r25, 0x15	; 21
    295e:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <_Z7SpiOpenPFvPvE>

	// Check the IRQ line
	ulSpiIRQState = tSLInformation.ReadWlanInterruptPin();
    2962:	e0 91 4a 03 	lds	r30, 0x034A
    2966:	f0 91 4b 03 	lds	r31, 0x034B
    296a:	09 95       	icall
    296c:	7b 01       	movw	r14, r22
    296e:	8c 01       	movw	r16, r24

	// Chip enable: toggle WLAN EN line
	tSLInformation.WriteWlanPin( WLAN_ENABLE );
    2970:	e0 91 50 03 	lds	r30, 0x0350
    2974:	f0 91 51 03 	lds	r31, 0x0351
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	09 95       	icall

	if (ulSpiIRQState)
    297c:	e1 14       	cp	r14, r1
    297e:	f1 04       	cpc	r15, r1
    2980:	01 05       	cpc	r16, r1
    2982:	11 05       	cpc	r17, r1
    2984:	59 f0       	breq	.+22     	; 0x299c <wlan_start+0xc4>
	{
		// wait till the IRQ line goes low
		while(tSLInformation.ReadWlanInterruptPin() != 0)
    2986:	e0 91 4a 03 	lds	r30, 0x034A
    298a:	f0 91 4b 03 	lds	r31, 0x034B
    298e:	09 95       	icall
    2990:	61 15       	cp	r22, r1
    2992:	71 05       	cpc	r23, r1
    2994:	81 05       	cpc	r24, r1
    2996:	91 05       	cpc	r25, r1
    2998:	b1 f7       	brne	.-20     	; 0x2986 <wlan_start+0xae>
    299a:	14 c0       	rjmp	.+40     	; 0x29c4 <wlan_start+0xec>
		}
	}
	else
	{
		// wait till the IRQ line goes high and than low
		while(tSLInformation.ReadWlanInterruptPin() == 0)
    299c:	e0 91 4a 03 	lds	r30, 0x034A
    29a0:	f0 91 4b 03 	lds	r31, 0x034B
    29a4:	09 95       	icall
    29a6:	61 15       	cp	r22, r1
    29a8:	71 05       	cpc	r23, r1
    29aa:	81 05       	cpc	r24, r1
    29ac:	91 05       	cpc	r25, r1
    29ae:	b1 f3       	breq	.-20     	; 0x299c <wlan_start+0xc4>
		{
		}

		while(tSLInformation.ReadWlanInterruptPin() != 0)
    29b0:	e0 91 4a 03 	lds	r30, 0x034A
    29b4:	f0 91 4b 03 	lds	r31, 0x034B
    29b8:	09 95       	icall
    29ba:	61 15       	cp	r22, r1
    29bc:	71 05       	cpc	r23, r1
    29be:	81 05       	cpc	r24, r1
    29c0:	91 05       	cpc	r25, r1
    29c2:	b1 f7       	brne	.-20     	; 0x29b0 <wlan_start+0xd8>
static void SimpleLink_Init_Start(UINT16 usPatchesAvailableAtHost)
{
	UINT8 *ptr;
	UINT8 *args;

	ptr = tSLInformation.pucTxCommandBuffer;
    29c4:	e0 91 40 03 	lds	r30, 0x0340
    29c8:	f0 91 41 03 	lds	r31, 0x0341
	args = (UINT8 *)(ptr + HEADERS_SIZE_CMD);

	UINT8_TO_STREAM(args, ((usPatchesAvailableAtHost) ? SL_PATCHES_REQUEST_FORCE_NONE : SL_PATCHES_REQUEST_DEFAULT));
    29cc:	cd 2b       	or	r28, r29
    29ce:	11 f4       	brne	.+4      	; 0x29d4 <wlan_start+0xfc>
    29d0:	80 e0       	ldi	r24, 0x00	; 0
    29d2:	01 c0       	rjmp	.+2      	; 0x29d6 <wlan_start+0xfe>
    29d4:	82 e0       	ldi	r24, 0x02	; 2
    29d6:	81 87       	std	Z+9, r24	; 0x09

	// IRQ Line asserted - send HCI_CMND_SIMPLE_LINK_START to CC3000
	hci_command_send(HCI_CMND_SIMPLE_LINK_START, ptr, WLAN_SL_INIT_START_PARAMS_LEN);
    29d8:	80 e0       	ldi	r24, 0x00	; 0
    29da:	90 e4       	ldi	r25, 0x40	; 64
    29dc:	bf 01       	movw	r22, r30
    29de:	41 e0       	ldi	r20, 0x01	; 1
    29e0:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <hci_command_send>

	SimpleLinkWaitEvent(HCI_CMND_SIMPLE_LINK_START, 0);
    29e4:	80 e0       	ldi	r24, 0x00	; 0
    29e6:	90 e4       	ldi	r25, 0x40	; 64
    29e8:	60 e0       	ldi	r22, 0x00	; 0
    29ea:	70 e0       	ldi	r23, 0x00	; 0
    29ec:	0e 94 48 09 	call	0x1290	; 0x1290 <SimpleLinkWaitEvent>
	DEBUGPRINT_F("SimpleLink start\n\r");
	SimpleLink_Init_Start(usPatchesAvailableAtHost);

	// Read Buffer's size and finish
	DEBUGPRINT_F("Read buffer\n\r");
	hci_command_send(HCI_CMND_READ_BUFFER_SIZE, tSLInformation.pucTxCommandBuffer, 0);
    29f0:	60 91 40 03 	lds	r22, 0x0340
    29f4:	70 91 41 03 	lds	r23, 0x0341
    29f8:	8b e0       	ldi	r24, 0x0B	; 11
    29fa:	90 e4       	ldi	r25, 0x40	; 64
    29fc:	40 e0       	ldi	r20, 0x00	; 0
    29fe:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <hci_command_send>
	SimpleLinkWaitEvent(HCI_CMND_READ_BUFFER_SIZE, 0);
    2a02:	8b e0       	ldi	r24, 0x0B	; 11
    2a04:	90 e4       	ldi	r25, 0x40	; 64
    2a06:	60 e0       	ldi	r22, 0x00	; 0
    2a08:	70 e0       	ldi	r23, 0x00	; 0
    2a0a:	0e 94 48 09 	call	0x1290	; 0x1290 <SimpleLinkWaitEvent>
}
    2a0e:	df 91       	pop	r29
    2a10:	cf 91       	pop	r28
    2a12:	1f 91       	pop	r17
    2a14:	0f 91       	pop	r16
    2a16:	ff 90       	pop	r15
    2a18:	ef 90       	pop	r14
    2a1a:	08 95       	ret

00002a1c <_Z17SpiReceiveHandlerPv>:
//! 			          called from the SPI library to receive the data
//
//*****************************************************************************
void SpiReceiveHandler(void *pvBuffer)
{	
	tSLInformation.usEventOrDataReceived = 1;
    2a1c:	21 e0       	ldi	r18, 0x01	; 1
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	30 93 3d 03 	sts	0x033D, r19
    2a24:	20 93 3c 03 	sts	0x033C, r18
	tSLInformation.pucReceivedData = (UINT8 *)pvBuffer;
    2a28:	90 93 3f 03 	sts	0x033F, r25
    2a2c:	80 93 3e 03 	sts	0x033E, r24

	hci_unsolicited_event_handler();
    2a30:	0e 94 54 05 	call	0xaa8	; 0xaa8 <hci_unsolicited_event_handler>
}
    2a34:	08 95       	ret

00002a36 <_ZN15Adafruit_CC3000C1EhhhhP5Print>:
            Note that by default this class will assume the first hardware 
            serial should be used for debug output.  This behavior can be
            changed by explicitly specifying a cc3kPrinter parameter.
*/
/**************************************************************************/
Adafruit_CC3000::Adafruit_CC3000(uint8_t csPin, uint8_t irqPin, uint8_t vbatPin, uint8_t SPIspeed, Print* cc3kPrinter)
    2a36:	ef 92       	push	r14
    2a38:	ff 92       	push	r15
    2a3a:	0f 93       	push	r16
    2a3c:	fc 01       	movw	r30, r24
{
  _initialised = false;
    2a3e:	10 82       	st	Z, r1
  g_csPin = csPin;
    2a40:	60 93 67 03 	sts	0x0367, r22
  g_irqPin = irqPin;
    2a44:	40 93 68 03 	sts	0x0368, r20
  g_vbatPin = vbatPin;
    2a48:	20 93 69 03 	sts	0x0369, r18
  g_IRQnum = 0xFF;
    2a4c:	8f ef       	ldi	r24, 0xFF	; 255
    2a4e:	80 93 6a 03 	sts	0x036A, r24
  g_SPIspeed = SPIspeed;
    2a52:	00 93 6b 03 	sts	0x036B, r16
  static const byte IsConnected = 0x02;
  static const byte HasDHCP = 0x04;
  static const byte OkToShutDown = 0x08;

  void clear() {
    flags = 0;
    2a56:	10 92 a1 03 	sts	0x03A1, r1
  g_IRQnum = 0xFF;
  g_SPIspeed = SPIspeed;

  cc3000Bitset.clear();

  CC3KPrinter = cc3kPrinter;
    2a5a:	f0 92 a3 03 	sts	0x03A3, r15
    2a5e:	e0 92 a2 03 	sts	0x03A2, r14
}
    2a62:	0f 91       	pop	r16
    2a64:	ff 90       	pop	r15
    2a66:	ef 90       	pop	r14
    2a68:	08 95       	ret

00002a6a <_ZN22Adafruit_CC3000_ClientC1Ev>:
  return Adafruit_CC3000_Client(udp_socket);
}


/**********************************************************************/
Adafruit_CC3000_Client::Adafruit_CC3000_Client(void) {
    2a6a:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2a6c:	13 82       	std	Z+3, r1	; 0x03
    2a6e:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2a70:	88 ee       	ldi	r24, 0xE8	; 232
    2a72:	93 e0       	ldi	r25, 0x03	; 3
    2a74:	a0 e0       	ldi	r26, 0x00	; 0
    2a76:	b0 e0       	ldi	r27, 0x00	; 0
    2a78:	84 83       	std	Z+4, r24	; 0x04
    2a7a:	95 83       	std	Z+5, r25	; 0x05
    2a7c:	a6 83       	std	Z+6, r26	; 0x06
    2a7e:	b7 83       	std	Z+7, r27	; 0x07
    2a80:	84 ea       	ldi	r24, 0xA4	; 164
    2a82:	92 e0       	ldi	r25, 0x02	; 2
    2a84:	91 83       	std	Z+1, r25	; 0x01
    2a86:	80 83       	st	Z, r24
  _socket = -1;
    2a88:	e1 5b       	subi	r30, 0xB1	; 177
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8c:	8f ef       	ldi	r24, 0xFF	; 255
    2a8e:	9f ef       	ldi	r25, 0xFF	; 255
    2a90:	af ef       	ldi	r26, 0xFF	; 255
    2a92:	bf ef       	ldi	r27, 0xFF	; 255
    2a94:	80 83       	st	Z, r24
    2a96:	91 83       	std	Z+1, r25	; 0x01
    2a98:	a2 83       	std	Z+2, r26	; 0x02
    2a9a:	b3 83       	std	Z+3, r27	; 0x03
}
    2a9c:	08 95       	ret

00002a9e <_ZN22Adafruit_CC3000_ClientC1El>:

Adafruit_CC3000_Client::Adafruit_CC3000_Client(int32_t s) {
    2a9e:	fc 01       	movw	r30, r24
    2aa0:	13 82       	std	Z+3, r1	; 0x03
    2aa2:	12 82       	std	Z+2, r1	; 0x02
    2aa4:	88 ee       	ldi	r24, 0xE8	; 232
    2aa6:	93 e0       	ldi	r25, 0x03	; 3
    2aa8:	a0 e0       	ldi	r26, 0x00	; 0
    2aaa:	b0 e0       	ldi	r27, 0x00	; 0
    2aac:	84 83       	std	Z+4, r24	; 0x04
    2aae:	95 83       	std	Z+5, r25	; 0x05
    2ab0:	a6 83       	std	Z+6, r26	; 0x06
    2ab2:	b7 83       	std	Z+7, r27	; 0x07
    2ab4:	84 ea       	ldi	r24, 0xA4	; 164
    2ab6:	92 e0       	ldi	r25, 0x02	; 2
    2ab8:	91 83       	std	Z+1, r25	; 0x01
    2aba:	80 83       	st	Z, r24
  _socket = s; 
    2abc:	e1 5b       	subi	r30, 0xB1	; 177
    2abe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac0:	40 83       	st	Z, r20
    2ac2:	51 83       	std	Z+1, r21	; 0x01
    2ac4:	62 83       	std	Z+2, r22	; 0x02
    2ac6:	73 83       	std	Z+3, r23	; 0x03
  bufsiz = 0;
    2ac8:	12 92       	st	-Z, r1
    2aca:	12 92       	st	-Z, r1
  _rx_buf_idx = 0;
    2acc:	12 92       	st	-Z, r1
}
    2ace:	08 95       	ret

00002ad0 <_ZN22Adafruit_CC3000_ClientcvbEv>:
  bufsiz = other.bufsiz;
  _rx_buf_idx = other._rx_buf_idx;
  memcpy(_rx_buf, other._rx_buf, RXBUFFERSIZE);
}

Adafruit_CC3000_Client::operator bool()
    2ad0:	fc 01       	movw	r30, r24
{
  return connected();
    2ad2:	a0 81       	ld	r26, Z
    2ad4:	b1 81       	ldd	r27, Z+1	; 0x01
    2ad6:	54 96       	adiw	r26, 0x14	; 20
    2ad8:	2d 91       	ld	r18, X+
    2ada:	3c 91       	ld	r19, X
    2adc:	55 97       	sbiw	r26, 0x15	; 21
    2ade:	f9 01       	movw	r30, r18
    2ae0:	09 95       	icall
    2ae2:	81 11       	cpse	r24, r1
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
}
    2ae6:	08 95       	ret

00002ae8 <_ZN22Adafruit_CC3000_Client5flushEv>:
  else return 0;  // no data is available
}

void Adafruit_CC3000_Client::flush(){
  // No flush implementation, unclear if necessary.
}
    2ae8:	08 95       	ret

00002aea <_GLOBAL__I_g_csPin>:
  return ret;
}

void Adafruit_CC3000::setPrinter(Print* p) {
  CC3KPrinter = p;
}
    2aea:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    2aec:	84 ea       	ldi	r24, 0xA4	; 164
    2aee:	93 e0       	ldi	r25, 0x03	; 3
    2af0:	60 e0       	ldi	r22, 0x00	; 0
    2af2:	40 e0       	ldi	r20, 0x00	; 0
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	00 e0       	ldi	r16, 0x00	; 0
    2af8:	0e 94 d7 2b 	call	0x57ae	; 0x57ae <_ZN9IPAddressC1Ehhhh>
    2afc:	0f 91       	pop	r16
    2afe:	08 95       	ret

00002b00 <_ZN22Adafruit_CC3000_Client4readEPhj>:
{
  return recv(_socket, buf, len, flags);

}

int Adafruit_CC3000_Client::read(uint8_t *buf, size_t len) 
    2b00:	cf 92       	push	r12
    2b02:	df 92       	push	r13
    2b04:	ef 92       	push	r14
    2b06:	ff 92       	push	r15
    2b08:	0f 93       	push	r16
    2b0a:	1f 93       	push	r17
    2b0c:	db 01       	movw	r26, r22
  return r;
}

int Adafruit_CC3000_Client::read(void *buf, uint16_t len, uint32_t flags) 
{
  return recv(_socket, buf, len, flags);
    2b0e:	fc 01       	movw	r30, r24
    2b10:	e1 5b       	subi	r30, 0xB1	; 177
    2b12:	ff 4f       	sbci	r31, 0xFF	; 255
    2b14:	60 81       	ld	r22, Z
    2b16:	71 81       	ldd	r23, Z+1	; 0x01
    2b18:	82 81       	ldd	r24, Z+2	; 0x02
    2b1a:	93 81       	ldd	r25, Z+3	; 0x03
    2b1c:	8a 01       	movw	r16, r20
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	ad 01       	movw	r20, r26
    2b24:	cc 24       	eor	r12, r12
    2b26:	dd 24       	eor	r13, r13
    2b28:	76 01       	movw	r14, r12
    2b2a:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <recv>
}

int Adafruit_CC3000_Client::read(uint8_t *buf, size_t len) 
{
  return read(buf, len, 0);
}
    2b2e:	1f 91       	pop	r17
    2b30:	0f 91       	pop	r16
    2b32:	ff 90       	pop	r15
    2b34:	ef 90       	pop	r14
    2b36:	df 90       	pop	r13
    2b38:	cf 90       	pop	r12
    2b3a:	08 95       	ret

00002b3c <_ZN22Adafruit_CC3000_Client9availableEv>:
  _rx_buf_idx++;
  //if (CC3KPrinter != 0) { CC3KPrinter->print("("); CC3KPrinter->write(ret); CC3KPrinter->print(")"); }
  return ret;
}

int Adafruit_CC3000_Client::available(void) {
    2b3c:	8f 92       	push	r8
    2b3e:	9f 92       	push	r9
    2b40:	af 92       	push	r10
    2b42:	bf 92       	push	r11
    2b44:	cf 92       	push	r12
    2b46:	df 92       	push	r13
    2b48:	ef 92       	push	r14
    2b4a:	ff 92       	push	r15
    2b4c:	0f 93       	push	r16
    2b4e:	1f 93       	push	r17
    2b50:	df 93       	push	r29
    2b52:	cf 93       	push	r28
    2b54:	cd b7       	in	r28, 0x3d	; 61
    2b56:	de b7       	in	r29, 0x3e	; 62
    2b58:	2c 97       	sbiw	r28, 0x0c	; 12
    2b5a:	0f b6       	in	r0, 0x3f	; 63
    2b5c:	f8 94       	cli
    2b5e:	de bf       	out	0x3e, r29	; 62
    2b60:	0f be       	out	0x3f, r0	; 63
    2b62:	cd bf       	out	0x3d, r28	; 61
    2b64:	fc 01       	movw	r30, r24
  // not open!
  if (_socket < 0) return 0;
    2b66:	e1 5b       	subi	r30, 0xB1	; 177
    2b68:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6a:	80 81       	ld	r24, Z
    2b6c:	91 81       	ldd	r25, Z+1	; 0x01
    2b6e:	a2 81       	ldd	r26, Z+2	; 0x02
    2b70:	b3 81       	ldd	r27, Z+3	; 0x03
    2b72:	ef 54       	subi	r30, 0x4F	; 79
    2b74:	f0 40       	sbci	r31, 0x00	; 0
    2b76:	b7 ff       	sbrs	r27, 7
    2b78:	03 c0       	rjmp	.+6      	; 0x2b80 <_ZN22Adafruit_CC3000_Client9availableEv+0x44>
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	82 c0       	rjmp	.+260    	; 0x2c84 <_ZN22Adafruit_CC3000_Client9availableEv+0x148>

  if ((bufsiz > 0) // we have some data in the internal buffer
    2b80:	e3 5b       	subi	r30, 0xB3	; 179
    2b82:	ff 4f       	sbci	r31, 0xFF	; 255
    2b84:	20 81       	ld	r18, Z
    2b86:	31 81       	ldd	r19, Z+1	; 0x01
    2b88:	ed 54       	subi	r30, 0x4D	; 77
    2b8a:	f0 40       	sbci	r31, 0x00	; 0
    2b8c:	12 16       	cp	r1, r18
    2b8e:	13 06       	cpc	r1, r19
    2b90:	64 f4       	brge	.+24     	; 0x2baa <_ZN22Adafruit_CC3000_Client9availableEv+0x6e>
    2b92:	e4 5b       	subi	r30, 0xB4	; 180
    2b94:	ff 4f       	sbci	r31, 0xFF	; 255
    2b96:	80 81       	ld	r24, Z
    2b98:	ec 54       	subi	r30, 0x4C	; 76
    2b9a:	f0 40       	sbci	r31, 0x00	; 0
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	82 17       	cp	r24, r18
    2ba0:	93 07       	cpc	r25, r19
    2ba2:	1c f4       	brge	.+6      	; 0x2baa <_ZN22Adafruit_CC3000_Client9availableEv+0x6e>
      && (_rx_buf_idx < bufsiz)) {  // we havent already spit it all out
    return (bufsiz - _rx_buf_idx);
    2ba4:	28 1b       	sub	r18, r24
    2ba6:	39 0b       	sbc	r19, r25
    2ba8:	6d c0       	rjmp	.+218    	; 0x2c84 <_ZN22Adafruit_CC3000_Client9availableEv+0x148>

  // do a select() call on this socket
  timeval timeout;
  fd_set fd_read;

  memset(&fd_read, 0, sizeof(fd_read));
    2baa:	19 82       	std	Y+1, r1	; 0x01
    2bac:	1a 82       	std	Y+2, r1	; 0x02
    2bae:	1b 82       	std	Y+3, r1	; 0x03
    2bb0:	1c 82       	std	Y+4, r1	; 0x04
  FD_SET(_socket, &fd_read);
    2bb2:	e1 5b       	subi	r30, 0xB1	; 177
    2bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb6:	c0 80       	ld	r12, Z
    2bb8:	d1 80       	ldd	r13, Z+1	; 0x01
    2bba:	e2 80       	ldd	r14, Z+2	; 0x02
    2bbc:	f3 80       	ldd	r15, Z+3	; 0x03
    2bbe:	c7 01       	movw	r24, r14
    2bc0:	b6 01       	movw	r22, r12
    2bc2:	20 e2       	ldi	r18, 0x20	; 32
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	40 e0       	ldi	r20, 0x00	; 0
    2bc8:	50 e0       	ldi	r21, 0x00	; 0
    2bca:	0e 94 3e 33 	call	0x667c	; 0x667c <__divmodsi4>
    2bce:	92 2e       	mov	r9, r18
    2bd0:	83 2e       	mov	r8, r19
    2bd2:	02 2f       	mov	r16, r18
    2bd4:	13 2f       	mov	r17, r19
    2bd6:	00 0f       	add	r16, r16
    2bd8:	11 1f       	adc	r17, r17
    2bda:	00 0f       	add	r16, r16
    2bdc:	11 1f       	adc	r17, r17
    2bde:	5e 01       	movw	r10, r28
    2be0:	08 94       	sec
    2be2:	a1 1c       	adc	r10, r1
    2be4:	b1 1c       	adc	r11, r1
    2be6:	0a 0d       	add	r16, r10
    2be8:	1b 1d       	adc	r17, r11
    2bea:	c7 01       	movw	r24, r14
    2bec:	b6 01       	movw	r22, r12
    2bee:	20 e2       	ldi	r18, 0x20	; 32
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	40 e0       	ldi	r20, 0x00	; 0
    2bf4:	50 e0       	ldi	r21, 0x00	; 0
    2bf6:	0e 94 3e 33 	call	0x667c	; 0x667c <__divmodsi4>
    2bfa:	21 e0       	ldi	r18, 0x01	; 1
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	40 e0       	ldi	r20, 0x00	; 0
    2c00:	50 e0       	ldi	r21, 0x00	; 0
    2c02:	04 c0       	rjmp	.+8      	; 0x2c0c <_ZN22Adafruit_CC3000_Client9availableEv+0xd0>
    2c04:	22 0f       	add	r18, r18
    2c06:	33 1f       	adc	r19, r19
    2c08:	44 1f       	adc	r20, r20
    2c0a:	55 1f       	adc	r21, r21
    2c0c:	6a 95       	dec	r22
    2c0e:	d2 f7       	brpl	.-12     	; 0x2c04 <_ZN22Adafruit_CC3000_Client9availableEv+0xc8>
    2c10:	e9 2d       	mov	r30, r9
    2c12:	f8 2d       	mov	r31, r8
    2c14:	ee 0f       	add	r30, r30
    2c16:	ff 1f       	adc	r31, r31
    2c18:	ee 0f       	add	r30, r30
    2c1a:	ff 1f       	adc	r31, r31
    2c1c:	ea 0d       	add	r30, r10
    2c1e:	fb 1d       	adc	r31, r11
    2c20:	80 81       	ld	r24, Z
    2c22:	91 81       	ldd	r25, Z+1	; 0x01
    2c24:	a2 81       	ldd	r26, Z+2	; 0x02
    2c26:	b3 81       	ldd	r27, Z+3	; 0x03
    2c28:	28 2b       	or	r18, r24
    2c2a:	39 2b       	or	r19, r25
    2c2c:	4a 2b       	or	r20, r26
    2c2e:	5b 2b       	or	r21, r27
    2c30:	f8 01       	movw	r30, r16
    2c32:	20 83       	st	Z, r18
    2c34:	31 83       	std	Z+1, r19	; 0x01
    2c36:	42 83       	std	Z+2, r20	; 0x02
    2c38:	53 83       	std	Z+3, r21	; 0x03

  timeout.tv_sec = 0;
    2c3a:	1d 82       	std	Y+5, r1	; 0x05
    2c3c:	1e 82       	std	Y+6, r1	; 0x06
    2c3e:	1f 82       	std	Y+7, r1	; 0x07
    2c40:	18 86       	std	Y+8, r1	; 0x08
  timeout.tv_usec = 5000; // 5 millisec
    2c42:	88 e8       	ldi	r24, 0x88	; 136
    2c44:	93 e1       	ldi	r25, 0x13	; 19
    2c46:	a0 e0       	ldi	r26, 0x00	; 0
    2c48:	b0 e0       	ldi	r27, 0x00	; 0
    2c4a:	89 87       	std	Y+9, r24	; 0x09
    2c4c:	9a 87       	std	Y+10, r25	; 0x0a
    2c4e:	ab 87       	std	Y+11, r26	; 0x0b
    2c50:	bc 87       	std	Y+12, r27	; 0x0c

  int16_t s = select(_socket+1, &fd_read, NULL, NULL, &timeout);
    2c52:	08 94       	sec
    2c54:	c1 1c       	adc	r12, r1
    2c56:	d1 1c       	adc	r13, r1
    2c58:	e1 1c       	adc	r14, r1
    2c5a:	f1 1c       	adc	r15, r1
    2c5c:	c7 01       	movw	r24, r14
    2c5e:	b6 01       	movw	r22, r12
    2c60:	a5 01       	movw	r20, r10
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	00 e0       	ldi	r16, 0x00	; 0
    2c68:	10 e0       	ldi	r17, 0x00	; 0
    2c6a:	e5 e0       	ldi	r30, 0x05	; 5
    2c6c:	ee 2e       	mov	r14, r30
    2c6e:	f1 2c       	mov	r15, r1
    2c70:	ec 0e       	add	r14, r28
    2c72:	fd 1e       	adc	r15, r29
    2c74:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <select>
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	01 97       	sbiw	r24, 0x01	; 1
    2c7e:	11 f4       	brne	.+4      	; 0x2c84 <_ZN22Adafruit_CC3000_Client9availableEv+0x148>
    2c80:	21 e0       	ldi	r18, 0x01	; 1
    2c82:	30 e0       	ldi	r19, 0x00	; 0
  //if (CC3KPrinter != 0) } CC3KPrinter->print(F("Select: ")); CC3KPrinter->println(s); }
  if (s == 1) return 1;  // some data is available to read
  else return 0;  // no data is available
}
    2c84:	c9 01       	movw	r24, r18
    2c86:	2c 96       	adiw	r28, 0x0c	; 12
    2c88:	0f b6       	in	r0, 0x3f	; 63
    2c8a:	f8 94       	cli
    2c8c:	de bf       	out	0x3e, r29	; 62
    2c8e:	0f be       	out	0x3f, r0	; 63
    2c90:	cd bf       	out	0x3d, r28	; 61
    2c92:	cf 91       	pop	r28
    2c94:	df 91       	pop	r29
    2c96:	1f 91       	pop	r17
    2c98:	0f 91       	pop	r16
    2c9a:	ff 90       	pop	r15
    2c9c:	ef 90       	pop	r14
    2c9e:	df 90       	pop	r13
    2ca0:	cf 90       	pop	r12
    2ca2:	bf 90       	pop	r11
    2ca4:	af 90       	pop	r10
    2ca6:	9f 90       	pop	r9
    2ca8:	8f 90       	pop	r8
    2caa:	08 95       	ret

00002cac <_ZN22Adafruit_CC3000_Client5closeEv>:
int Adafruit_CC3000_Client::read(uint8_t *buf, size_t len) 
{
  return read(buf, len, 0);
}

int32_t Adafruit_CC3000_Client::close(void) {
    2cac:	0f 93       	push	r16
    2cae:	1f 93       	push	r17
  int32_t x = closesocket(_socket);
    2cb0:	8c 01       	movw	r16, r24
    2cb2:	01 5b       	subi	r16, 0xB1	; 177
    2cb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb6:	f8 01       	movw	r30, r16
    2cb8:	60 81       	ld	r22, Z
    2cba:	71 81       	ldd	r23, Z+1	; 0x01
    2cbc:	82 81       	ldd	r24, Z+2	; 0x02
    2cbe:	93 81       	ldd	r25, Z+3	; 0x03
    2cc0:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <closesocket>
  _socket = -1;
    2cc4:	2f ef       	ldi	r18, 0xFF	; 255
    2cc6:	3f ef       	ldi	r19, 0xFF	; 255
    2cc8:	4f ef       	ldi	r20, 0xFF	; 255
    2cca:	5f ef       	ldi	r21, 0xFF	; 255
    2ccc:	f8 01       	movw	r30, r16
    2cce:	20 83       	st	Z, r18
    2cd0:	31 83       	std	Z+1, r19	; 0x01
    2cd2:	42 83       	std	Z+2, r20	; 0x02
    2cd4:	53 83       	std	Z+3, r21	; 0x03
  return x;
}
    2cd6:	1f 91       	pop	r17
    2cd8:	0f 91       	pop	r16
    2cda:	08 95       	ret

00002cdc <_ZN22Adafruit_CC3000_Client4peekEv>:

void Adafruit_CC3000_Client::flush(){
  // No flush implementation, unclear if necessary.
}

int Adafruit_CC3000_Client::peek(){
    2cdc:	4f 92       	push	r4
    2cde:	5f 92       	push	r5
    2ce0:	6f 92       	push	r6
    2ce2:	7f 92       	push	r7
    2ce4:	8f 92       	push	r8
    2ce6:	9f 92       	push	r9
    2ce8:	af 92       	push	r10
    2cea:	bf 92       	push	r11
    2cec:	cf 92       	push	r12
    2cee:	df 92       	push	r13
    2cf0:	ef 92       	push	r14
    2cf2:	ff 92       	push	r15
    2cf4:	0f 93       	push	r16
    2cf6:	1f 93       	push	r17
    2cf8:	cf 93       	push	r28
    2cfa:	df 93       	push	r29
    2cfc:	ec 01       	movw	r28, r24
  while ((bufsiz <= 0) || (bufsiz == _rx_buf_idx)) {
    cc3k_int_poll();
    // buffer in some more data
    bufsiz = recv(_socket, _rx_buf, sizeof(_rx_buf), 0);
    2cfe:	9c e0       	ldi	r25, 0x0C	; 12
    2d00:	49 2e       	mov	r4, r25
    2d02:	51 2c       	mov	r5, r1
    2d04:	4c 0e       	add	r4, r28
    2d06:	5d 1e       	adc	r5, r29
void Adafruit_CC3000_Client::flush(){
  // No flush implementation, unclear if necessary.
}

int Adafruit_CC3000_Client::peek(){
  while ((bufsiz <= 0) || (bufsiz == _rx_buf_idx)) {
    2d08:	8d e4       	ldi	r24, 0x4D	; 77
    2d0a:	88 2e       	mov	r8, r24
    2d0c:	91 2c       	mov	r9, r1
    2d0e:	8c 0e       	add	r8, r28
    2d10:	9d 1e       	adc	r9, r29
    2d12:	0c e4       	ldi	r16, 0x4C	; 76
    2d14:	a0 2e       	mov	r10, r16
    2d16:	b1 2c       	mov	r11, r1
    2d18:	ac 0e       	add	r10, r28
    2d1a:	bd 1e       	adc	r11, r29
    cc3k_int_poll();
    // buffer in some more data
    bufsiz = recv(_socket, _rx_buf, sizeof(_rx_buf), 0);
    2d1c:	1f e4       	ldi	r17, 0x4F	; 79
    2d1e:	61 2e       	mov	r6, r17
    2d20:	71 2c       	mov	r7, r1
    2d22:	6c 0e       	add	r6, r28
    2d24:	7d 1e       	adc	r7, r29
    2d26:	1f c0       	rjmp	.+62     	; 0x2d66 <_ZN22Adafruit_CC3000_Client4peekEv+0x8a>
  // No flush implementation, unclear if necessary.
}

int Adafruit_CC3000_Client::peek(){
  while ((bufsiz <= 0) || (bufsiz == _rx_buf_idx)) {
    cc3k_int_poll();
    2d28:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <cc3k_int_poll>
    // buffer in some more data
    bufsiz = recv(_socket, _rx_buf, sizeof(_rx_buf), 0);
    2d2c:	f3 01       	movw	r30, r6
    2d2e:	60 81       	ld	r22, Z
    2d30:	71 81       	ldd	r23, Z+1	; 0x01
    2d32:	82 81       	ldd	r24, Z+2	; 0x02
    2d34:	93 81       	ldd	r25, Z+3	; 0x03
    2d36:	a2 01       	movw	r20, r4
    2d38:	00 e4       	ldi	r16, 0x40	; 64
    2d3a:	10 e0       	ldi	r17, 0x00	; 0
    2d3c:	20 e0       	ldi	r18, 0x00	; 0
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	cc 24       	eor	r12, r12
    2d42:	dd 24       	eor	r13, r13
    2d44:	76 01       	movw	r14, r12
    2d46:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <recv>
    2d4a:	f4 01       	movw	r30, r8
    2d4c:	91 83       	std	Z+1, r25	; 0x01
    2d4e:	80 83       	st	Z, r24
    if (bufsiz == -57) {
    2d50:	87 5c       	subi	r24, 0xC7	; 199
    2d52:	9f 4f       	sbci	r25, 0xFF	; 255
    2d54:	31 f4       	brne	.+12     	; 0x2d62 <_ZN22Adafruit_CC3000_Client4peekEv+0x86>
      close();
    2d56:	ce 01       	movw	r24, r28
    2d58:	0e 94 56 16 	call	0x2cac	; 0x2cac <_ZN22Adafruit_CC3000_Client5closeEv>
    2d5c:	20 e0       	ldi	r18, 0x00	; 0
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	14 c0       	rjmp	.+40     	; 0x2d8a <_ZN22Adafruit_CC3000_Client4peekEv+0xae>
      return 0;
    }
    //if (CC3KPrinter != 0) { CC3KPrinter->println("Read "); CC3KPrinter->print(bufsiz); CC3KPrinter->println(" bytes"); }
    _rx_buf_idx = 0;
    2d62:	f5 01       	movw	r30, r10
    2d64:	10 82       	st	Z, r1
void Adafruit_CC3000_Client::flush(){
  // No flush implementation, unclear if necessary.
}

int Adafruit_CC3000_Client::peek(){
  while ((bufsiz <= 0) || (bufsiz == _rx_buf_idx)) {
    2d66:	f4 01       	movw	r30, r8
    2d68:	20 81       	ld	r18, Z
    2d6a:	31 81       	ldd	r19, Z+1	; 0x01
    2d6c:	12 16       	cp	r1, r18
    2d6e:	13 06       	cpc	r1, r19
    2d70:	dc f6       	brge	.-74     	; 0x2d28 <_ZN22Adafruit_CC3000_Client4peekEv+0x4c>
    2d72:	f5 01       	movw	r30, r10
    2d74:	80 81       	ld	r24, Z
    2d76:	e8 2f       	mov	r30, r24
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	2e 17       	cp	r18, r30
    2d7c:	3f 07       	cpc	r19, r31
    2d7e:	a1 f2       	breq	.-88     	; 0x2d28 <_ZN22Adafruit_CC3000_Client4peekEv+0x4c>
    _rx_buf_idx = 0;
  }
  uint8_t ret = _rx_buf[_rx_buf_idx];

  //if (CC3KPrinter != 0) { CC3KPrinter->print("("); CC3KPrinter->write(ret); CC3KPrinter->print(")"); }
  return ret;
    2d80:	ec 0f       	add	r30, r28
    2d82:	fd 1f       	adc	r31, r29
    2d84:	84 85       	ldd	r24, Z+12	; 0x0c
    2d86:	28 2f       	mov	r18, r24
    2d88:	30 e0       	ldi	r19, 0x00	; 0
}
    2d8a:	c9 01       	movw	r24, r18
    2d8c:	df 91       	pop	r29
    2d8e:	cf 91       	pop	r28
    2d90:	1f 91       	pop	r17
    2d92:	0f 91       	pop	r16
    2d94:	ff 90       	pop	r15
    2d96:	ef 90       	pop	r14
    2d98:	df 90       	pop	r13
    2d9a:	cf 90       	pop	r12
    2d9c:	bf 90       	pop	r11
    2d9e:	af 90       	pop	r10
    2da0:	9f 90       	pop	r9
    2da2:	8f 90       	pop	r8
    2da4:	7f 90       	pop	r7
    2da6:	6f 90       	pop	r6
    2da8:	5f 90       	pop	r5
    2daa:	4f 90       	pop	r4
    2dac:	08 95       	ret

00002dae <_ZN22Adafruit_CC3000_Client4readEv>:

void Adafruit_CC3000_Client::stop(){
  close();
}

int Adafruit_CC3000_Client::read(void) 
    2dae:	4f 92       	push	r4
    2db0:	5f 92       	push	r5
    2db2:	6f 92       	push	r6
    2db4:	7f 92       	push	r7
    2db6:	8f 92       	push	r8
    2db8:	9f 92       	push	r9
    2dba:	af 92       	push	r10
    2dbc:	bf 92       	push	r11
    2dbe:	cf 92       	push	r12
    2dc0:	df 92       	push	r13
    2dc2:	ef 92       	push	r14
    2dc4:	ff 92       	push	r15
    2dc6:	0f 93       	push	r16
    2dc8:	1f 93       	push	r17
    2dca:	cf 93       	push	r28
    2dcc:	df 93       	push	r29
    2dce:	ec 01       	movw	r28, r24
{
  while ((bufsiz <= 0) || (bufsiz == _rx_buf_idx)) {
    cc3k_int_poll();
    // buffer in some more data
    bufsiz = recv(_socket, _rx_buf, sizeof(_rx_buf), 0);
    2dd0:	5c e0       	ldi	r21, 0x0C	; 12
    2dd2:	45 2e       	mov	r4, r21
    2dd4:	51 2c       	mov	r5, r1
    2dd6:	48 0e       	add	r4, r24
    2dd8:	59 1e       	adc	r5, r25
  close();
}

int Adafruit_CC3000_Client::read(void) 
{
  while ((bufsiz <= 0) || (bufsiz == _rx_buf_idx)) {
    2dda:	4d e4       	ldi	r20, 0x4D	; 77
    2ddc:	84 2e       	mov	r8, r20
    2dde:	91 2c       	mov	r9, r1
    2de0:	88 0e       	add	r8, r24
    2de2:	99 1e       	adc	r9, r25
    2de4:	3c e4       	ldi	r19, 0x4C	; 76
    2de6:	a3 2e       	mov	r10, r19
    2de8:	b1 2c       	mov	r11, r1
    2dea:	a8 0e       	add	r10, r24
    2dec:	b9 1e       	adc	r11, r25
    cc3k_int_poll();
    // buffer in some more data
    bufsiz = recv(_socket, _rx_buf, sizeof(_rx_buf), 0);
    2dee:	2f e4       	ldi	r18, 0x4F	; 79
    2df0:	62 2e       	mov	r6, r18
    2df2:	71 2c       	mov	r7, r1
    2df4:	68 0e       	add	r6, r24
    2df6:	79 1e       	adc	r7, r25
    2df8:	1f c0       	rjmp	.+62     	; 0x2e38 <_ZN22Adafruit_CC3000_Client4readEv+0x8a>
}

int Adafruit_CC3000_Client::read(void) 
{
  while ((bufsiz <= 0) || (bufsiz == _rx_buf_idx)) {
    cc3k_int_poll();
    2dfa:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <cc3k_int_poll>
    // buffer in some more data
    bufsiz = recv(_socket, _rx_buf, sizeof(_rx_buf), 0);
    2dfe:	f3 01       	movw	r30, r6
    2e00:	60 81       	ld	r22, Z
    2e02:	71 81       	ldd	r23, Z+1	; 0x01
    2e04:	82 81       	ldd	r24, Z+2	; 0x02
    2e06:	93 81       	ldd	r25, Z+3	; 0x03
    2e08:	a2 01       	movw	r20, r4
    2e0a:	00 e4       	ldi	r16, 0x40	; 64
    2e0c:	10 e0       	ldi	r17, 0x00	; 0
    2e0e:	20 e0       	ldi	r18, 0x00	; 0
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	cc 24       	eor	r12, r12
    2e14:	dd 24       	eor	r13, r13
    2e16:	76 01       	movw	r14, r12
    2e18:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <recv>
    2e1c:	f4 01       	movw	r30, r8
    2e1e:	91 83       	std	Z+1, r25	; 0x01
    2e20:	80 83       	st	Z, r24
    if (bufsiz == -57) {
    2e22:	87 5c       	subi	r24, 0xC7	; 199
    2e24:	9f 4f       	sbci	r25, 0xFF	; 255
    2e26:	31 f4       	brne	.+12     	; 0x2e34 <_ZN22Adafruit_CC3000_Client4readEv+0x86>
      close();
    2e28:	ce 01       	movw	r24, r28
    2e2a:	0e 94 56 16 	call	0x2cac	; 0x2cac <_ZN22Adafruit_CC3000_Client5closeEv>
    2e2e:	20 e0       	ldi	r18, 0x00	; 0
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	17 c0       	rjmp	.+46     	; 0x2e62 <_ZN22Adafruit_CC3000_Client4readEv+0xb4>
      return 0;
    }
    //if (CC3KPrinter != 0) { CC3KPrinter->println("Read "); CC3KPrinter->print(bufsiz); CC3KPrinter->println(" bytes"); }
    _rx_buf_idx = 0;
    2e34:	f5 01       	movw	r30, r10
    2e36:	10 82       	st	Z, r1
  close();
}

int Adafruit_CC3000_Client::read(void) 
{
  while ((bufsiz <= 0) || (bufsiz == _rx_buf_idx)) {
    2e38:	f4 01       	movw	r30, r8
    2e3a:	80 81       	ld	r24, Z
    2e3c:	91 81       	ldd	r25, Z+1	; 0x01
    2e3e:	18 16       	cp	r1, r24
    2e40:	19 06       	cpc	r1, r25
    2e42:	dc f6       	brge	.-74     	; 0x2dfa <_ZN22Adafruit_CC3000_Client4readEv+0x4c>
    2e44:	f5 01       	movw	r30, r10
    2e46:	20 81       	ld	r18, Z
    2e48:	e2 2f       	mov	r30, r18
    2e4a:	f0 e0       	ldi	r31, 0x00	; 0
    2e4c:	8e 17       	cp	r24, r30
    2e4e:	9f 07       	cpc	r25, r31
    2e50:	a1 f2       	breq	.-88     	; 0x2dfa <_ZN22Adafruit_CC3000_Client4readEv+0x4c>
      return 0;
    }
    //if (CC3KPrinter != 0) { CC3KPrinter->println("Read "); CC3KPrinter->print(bufsiz); CC3KPrinter->println(" bytes"); }
    _rx_buf_idx = 0;
  }
  uint8_t ret = _rx_buf[_rx_buf_idx];
    2e52:	ec 0f       	add	r30, r28
    2e54:	fd 1f       	adc	r31, r29
    2e56:	84 85       	ldd	r24, Z+12	; 0x0c
  _rx_buf_idx++;
    2e58:	2f 5f       	subi	r18, 0xFF	; 255
    2e5a:	f5 01       	movw	r30, r10
    2e5c:	20 83       	st	Z, r18
  //if (CC3KPrinter != 0) { CC3KPrinter->print("("); CC3KPrinter->write(ret); CC3KPrinter->print(")"); }
  return ret;
    2e5e:	28 2f       	mov	r18, r24
    2e60:	30 e0       	ldi	r19, 0x00	; 0
}
    2e62:	c9 01       	movw	r24, r18
    2e64:	df 91       	pop	r29
    2e66:	cf 91       	pop	r28
    2e68:	1f 91       	pop	r17
    2e6a:	0f 91       	pop	r16
    2e6c:	ff 90       	pop	r15
    2e6e:	ef 90       	pop	r14
    2e70:	df 90       	pop	r13
    2e72:	cf 90       	pop	r12
    2e74:	bf 90       	pop	r11
    2e76:	af 90       	pop	r10
    2e78:	9f 90       	pop	r9
    2e7a:	8f 90       	pop	r8
    2e7c:	7f 90       	pop	r7
    2e7e:	6f 90       	pop	r6
    2e80:	5f 90       	pop	r5
    2e82:	4f 90       	pop	r4
    2e84:	08 95       	ret

00002e86 <_ZN22Adafruit_CC3000_Client4stopEv>:
  _socket = -1;
  return x;
}

void Adafruit_CC3000_Client::stop(){
  close();
    2e86:	0e 94 56 16 	call	0x2cac	; 0x2cac <_ZN22Adafruit_CC3000_Client5closeEv>
}
    2e8a:	08 95       	ret

00002e8c <_ZN22Adafruit_CC3000_Client9connectedEv>:

  _socket = tcp_socket;
  return 1;
}

uint8_t Adafruit_CC3000_Client::connected(void) { 
    2e8c:	0f 93       	push	r16
    2e8e:	1f 93       	push	r17
    2e90:	cf 93       	push	r28
    2e92:	df 93       	push	r29
    2e94:	ec 01       	movw	r28, r24
  if (_socket < 0) return false;
    2e96:	8c 01       	movw	r16, r24
    2e98:	01 5b       	subi	r16, 0xB1	; 177
    2e9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e9c:	f8 01       	movw	r30, r16
    2e9e:	80 81       	ld	r24, Z
    2ea0:	91 81       	ldd	r25, Z+1	; 0x01
    2ea2:	a2 81       	ldd	r26, Z+2	; 0x02
    2ea4:	b3 81       	ldd	r27, Z+3	; 0x03
    2ea6:	b7 fd       	sbrc	r27, 7
    2ea8:	27 c0       	rjmp	.+78     	; 0x2ef8 <_ZN22Adafruit_CC3000_Client9connectedEv+0x6c>

  if (! available() && closed_sockets[_socket] == true) {
    2eaa:	e8 81       	ld	r30, Y
    2eac:	f9 81       	ldd	r31, Y+1	; 0x01
    2eae:	04 80       	ldd	r0, Z+4	; 0x04
    2eb0:	f5 81       	ldd	r31, Z+5	; 0x05
    2eb2:	e0 2d       	mov	r30, r0
    2eb4:	ce 01       	movw	r24, r28
    2eb6:	09 95       	icall
    2eb8:	89 2b       	or	r24, r25
    2eba:	01 f5       	brne	.+64     	; 0x2efc <_ZN22Adafruit_CC3000_Client9connectedEv+0x70>
    2ebc:	d8 01       	movw	r26, r16
    2ebe:	2d 91       	ld	r18, X+
    2ec0:	3d 91       	ld	r19, X+
    2ec2:	4d 91       	ld	r20, X+
    2ec4:	5c 91       	ld	r21, X
    2ec6:	f9 01       	movw	r30, r18
    2ec8:	ef 57       	subi	r30, 0x7F	; 127
    2eca:	fc 4f       	sbci	r31, 0xFC	; 252
    2ecc:	80 81       	ld	r24, Z
    2ece:	81 30       	cpi	r24, 0x01	; 1
    2ed0:	a9 f4       	brne	.+42     	; 0x2efc <_ZN22Adafruit_CC3000_Client9connectedEv+0x70>
    //if (CC3KPrinter != 0) CC3KPrinter->println("No more data, and closed!");
    closesocket(_socket);
    2ed2:	ca 01       	movw	r24, r20
    2ed4:	b9 01       	movw	r22, r18
    2ed6:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <closesocket>
    closed_sockets[_socket] = false;
    2eda:	d8 01       	movw	r26, r16
    2edc:	ed 91       	ld	r30, X+
    2ede:	fc 91       	ld	r31, X
    2ee0:	ef 57       	subi	r30, 0x7F	; 127
    2ee2:	fc 4f       	sbci	r31, 0xFC	; 252
    2ee4:	10 82       	st	Z, r1
    _socket = -1;
    2ee6:	8f ef       	ldi	r24, 0xFF	; 255
    2ee8:	9f ef       	ldi	r25, 0xFF	; 255
    2eea:	af ef       	ldi	r26, 0xFF	; 255
    2eec:	bf ef       	ldi	r27, 0xFF	; 255
    2eee:	f8 01       	movw	r30, r16
    2ef0:	80 83       	st	Z, r24
    2ef2:	91 83       	std	Z+1, r25	; 0x01
    2ef4:	a2 83       	std	Z+2, r26	; 0x02
    2ef6:	b3 83       	std	Z+3, r27	; 0x03
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
    2efa:	01 c0       	rjmp	.+2      	; 0x2efe <_ZN22Adafruit_CC3000_Client9connectedEv+0x72>
    return false;
    2efc:	81 e0       	ldi	r24, 0x01	; 1
  }

  else return true;  
}
    2efe:	df 91       	pop	r29
    2f00:	cf 91       	pop	r28
    2f02:	1f 91       	pop	r17
    2f04:	0f 91       	pop	r16
    2f06:	08 95       	ret

00002f08 <_ZN22Adafruit_CC3000_Client10fastrprintEPK19__FlashStringHelper>:
  r = send(_socket, &c, 1, 0);
  if ( r < 0 ) return 0;
  return r;
}

size_t Adafruit_CC3000_Client::fastrprint(const __FlashStringHelper *ifsh)
    2f08:	2f 92       	push	r2
    2f0a:	3f 92       	push	r3
    2f0c:	4f 92       	push	r4
    2f0e:	5f 92       	push	r5
    2f10:	6f 92       	push	r6
    2f12:	7f 92       	push	r7
    2f14:	8f 92       	push	r8
    2f16:	9f 92       	push	r9
    2f18:	af 92       	push	r10
    2f1a:	bf 92       	push	r11
    2f1c:	cf 92       	push	r12
    2f1e:	df 92       	push	r13
    2f20:	ef 92       	push	r14
    2f22:	ff 92       	push	r15
    2f24:	0f 93       	push	r16
    2f26:	1f 93       	push	r17
    2f28:	df 93       	push	r29
    2f2a:	cf 93       	push	r28
    2f2c:	cd b7       	in	r28, 0x3d	; 61
    2f2e:	de b7       	in	r29, 0x3e	; 62
    2f30:	a0 97       	sbiw	r28, 0x20	; 32
    2f32:	0f b6       	in	r0, 0x3f	; 63
    2f34:	f8 94       	cli
    2f36:	de bf       	out	0x3e, r29	; 62
    2f38:	0f be       	out	0x3f, r0	; 63
    2f3a:	cd bf       	out	0x3d, r28	; 61
    2f3c:	3c 01       	movw	r6, r24
{
  char _tx_buf[TXBUFFERSIZE];
  uint8_t idx = 0;

  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    2f3e:	4b 01       	movw	r8, r22
    2f40:	00 e0       	ldi	r16, 0x00	; 0
    2f42:	aa 24       	eor	r10, r10
    2f44:	bb 24       	eor	r11, r11
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    if (c == 0) break;
    _tx_buf[idx] = c;
    2f46:	1e 01       	movw	r2, r28
    2f48:	08 94       	sec
    2f4a:	21 1c       	adc	r2, r1
    2f4c:	31 1c       	adc	r3, r1
    idx++;
    if (idx >= TXBUFFERSIZE) {
      // lets send it!
      n += send(_socket, _tx_buf, TXBUFFERSIZE, 0);
    2f4e:	6f e4       	ldi	r22, 0x4F	; 79
    2f50:	46 2e       	mov	r4, r22
    2f52:	51 2c       	mov	r5, r1
    2f54:	46 0c       	add	r4, r6
    2f56:	57 1c       	adc	r5, r7
size_t Adafruit_CC3000_Client::fastrprint(const __FlashStringHelper *ifsh)
{
  char _tx_buf[TXBUFFERSIZE];
  uint8_t idx = 0;

  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    2f58:	f4 01       	movw	r30, r8
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    2f5a:	08 94       	sec
    2f5c:	81 1c       	adc	r8, r1
    2f5e:	91 1c       	adc	r9, r1
    2f60:	84 91       	lpm	r24, Z+
    if (c == 0) break;
    2f62:	88 23       	and	r24, r24
    2f64:	d1 f0       	breq	.+52     	; 0x2f9a <_ZN22Adafruit_CC3000_Client10fastrprintEPK19__FlashStringHelper+0x92>
    _tx_buf[idx] = c;
    2f66:	f1 01       	movw	r30, r2
    2f68:	e0 0f       	add	r30, r16
    2f6a:	f1 1d       	adc	r31, r1
    2f6c:	80 83       	st	Z, r24
    idx++;
    2f6e:	0f 5f       	subi	r16, 0xFF	; 255
    if (idx >= TXBUFFERSIZE) {
    2f70:	00 32       	cpi	r16, 0x20	; 32
    2f72:	90 f3       	brcs	.-28     	; 0x2f58 <_ZN22Adafruit_CC3000_Client10fastrprintEPK19__FlashStringHelper+0x50>
      // lets send it!
      n += send(_socket, _tx_buf, TXBUFFERSIZE, 0);
    2f74:	f2 01       	movw	r30, r4
    2f76:	60 81       	ld	r22, Z
    2f78:	71 81       	ldd	r23, Z+1	; 0x01
    2f7a:	82 81       	ldd	r24, Z+2	; 0x02
    2f7c:	93 81       	ldd	r25, Z+3	; 0x03
    2f7e:	a1 01       	movw	r20, r2
    2f80:	00 e2       	ldi	r16, 0x20	; 32
    2f82:	10 e0       	ldi	r17, 0x00	; 0
    2f84:	20 e0       	ldi	r18, 0x00	; 0
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	cc 24       	eor	r12, r12
    2f8a:	dd 24       	eor	r13, r13
    2f8c:	76 01       	movw	r14, r12
    2f8e:	0e 94 a4 11 	call	0x2348	; 0x2348 <send>
    2f92:	a8 0e       	add	r10, r24
    2f94:	b9 1e       	adc	r11, r25
    2f96:	00 e0       	ldi	r16, 0x00	; 0
    2f98:	df cf       	rjmp	.-66     	; 0x2f58 <_ZN22Adafruit_CC3000_Client10fastrprintEPK19__FlashStringHelper+0x50>
      idx = 0;
    }
  }
  if (idx > 0) {
    2f9a:	00 23       	and	r16, r16
    2f9c:	b1 f0       	breq	.+44     	; 0x2fca <_ZN22Adafruit_CC3000_Client10fastrprintEPK19__FlashStringHelper+0xc2>
    // Send any remaining data in the transmit buffer.
    n += send(_socket, _tx_buf, idx, 0);
    2f9e:	8f e4       	ldi	r24, 0x4F	; 79
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	68 0e       	add	r6, r24
    2fa4:	79 1e       	adc	r7, r25
    2fa6:	f3 01       	movw	r30, r6
    2fa8:	60 81       	ld	r22, Z
    2faa:	71 81       	ldd	r23, Z+1	; 0x01
    2fac:	82 81       	ldd	r24, Z+2	; 0x02
    2fae:	93 81       	ldd	r25, Z+3	; 0x03
    2fb0:	10 e0       	ldi	r17, 0x00	; 0
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	ae 01       	movw	r20, r28
    2fb8:	4f 5f       	subi	r20, 0xFF	; 255
    2fba:	5f 4f       	sbci	r21, 0xFF	; 255
    2fbc:	cc 24       	eor	r12, r12
    2fbe:	dd 24       	eor	r13, r13
    2fc0:	76 01       	movw	r14, r12
    2fc2:	0e 94 a4 11 	call	0x2348	; 0x2348 <send>
    2fc6:	a8 0e       	add	r10, r24
    2fc8:	b9 1e       	adc	r11, r25
  }

  return n;
}
    2fca:	c5 01       	movw	r24, r10
    2fcc:	a0 96       	adiw	r28, 0x20	; 32
    2fce:	0f b6       	in	r0, 0x3f	; 63
    2fd0:	f8 94       	cli
    2fd2:	de bf       	out	0x3e, r29	; 62
    2fd4:	0f be       	out	0x3f, r0	; 63
    2fd6:	cd bf       	out	0x3d, r28	; 61
    2fd8:	cf 91       	pop	r28
    2fda:	df 91       	pop	r29
    2fdc:	1f 91       	pop	r17
    2fde:	0f 91       	pop	r16
    2fe0:	ff 90       	pop	r15
    2fe2:	ef 90       	pop	r14
    2fe4:	df 90       	pop	r13
    2fe6:	cf 90       	pop	r12
    2fe8:	bf 90       	pop	r11
    2fea:	af 90       	pop	r10
    2fec:	9f 90       	pop	r9
    2fee:	8f 90       	pop	r8
    2ff0:	7f 90       	pop	r7
    2ff2:	6f 90       	pop	r6
    2ff4:	5f 90       	pop	r5
    2ff6:	4f 90       	pop	r4
    2ff8:	3f 90       	pop	r3
    2ffa:	2f 90       	pop	r2
    2ffc:	08 95       	ret

00002ffe <_ZN22Adafruit_CC3000_Client12fastrprintlnEPK19__FlashStringHelper>:

size_t Adafruit_CC3000_Client::fastrprintln(const __FlashStringHelper *ifsh)
    2ffe:	ef 92       	push	r14
    3000:	ff 92       	push	r15
    3002:	0f 93       	push	r16
    3004:	1f 93       	push	r17
    3006:	8c 01       	movw	r16, r24
{
  size_t r = 0;
  r = fastrprint(ifsh);
    3008:	0e 94 84 17 	call	0x2f08	; 0x2f08 <_ZN22Adafruit_CC3000_Client10fastrprintEPK19__FlashStringHelper>
    300c:	7c 01       	movw	r14, r24
  r+= fastrprint(F("\r\n"));
    300e:	c8 01       	movw	r24, r16
    3010:	6b e6       	ldi	r22, 0x6B	; 107
    3012:	70 e0       	ldi	r23, 0x00	; 0
    3014:	0e 94 84 17 	call	0x2f08	; 0x2f08 <_ZN22Adafruit_CC3000_Client10fastrprintEPK19__FlashStringHelper>
    3018:	9c 01       	movw	r18, r24
    301a:	2e 0d       	add	r18, r14
    301c:	3f 1d       	adc	r19, r15
  return r;
}
    301e:	c9 01       	movw	r24, r18
    3020:	1f 91       	pop	r17
    3022:	0f 91       	pop	r16
    3024:	ff 90       	pop	r15
    3026:	ef 90       	pop	r14
    3028:	08 95       	ret

0000302a <_ZN22Adafruit_CC3000_Client5writeEh>:
size_t Adafruit_CC3000_Client::write(const uint8_t *buf, size_t len)
{
  return write(buf, len, 0);
}

size_t Adafruit_CC3000_Client::write(uint8_t c)
    302a:	cf 92       	push	r12
    302c:	df 92       	push	r13
    302e:	ef 92       	push	r14
    3030:	ff 92       	push	r15
    3032:	0f 93       	push	r16
    3034:	1f 93       	push	r17
    3036:	df 93       	push	r29
    3038:	cf 93       	push	r28
    303a:	0f 92       	push	r0
    303c:	cd b7       	in	r28, 0x3d	; 61
    303e:	de b7       	in	r29, 0x3e	; 62
    3040:	69 83       	std	Y+1, r22	; 0x01
{
  int32_t r;
  r = send(_socket, &c, 1, 0);
    3042:	fc 01       	movw	r30, r24
    3044:	e1 5b       	subi	r30, 0xB1	; 177
    3046:	ff 4f       	sbci	r31, 0xFF	; 255
    3048:	60 81       	ld	r22, Z
    304a:	71 81       	ldd	r23, Z+1	; 0x01
    304c:	82 81       	ldd	r24, Z+2	; 0x02
    304e:	93 81       	ldd	r25, Z+3	; 0x03
    3050:	ae 01       	movw	r20, r28
    3052:	4f 5f       	subi	r20, 0xFF	; 255
    3054:	5f 4f       	sbci	r21, 0xFF	; 255
    3056:	01 e0       	ldi	r16, 0x01	; 1
    3058:	10 e0       	ldi	r17, 0x00	; 0
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	cc 24       	eor	r12, r12
    3060:	dd 24       	eor	r13, r13
    3062:	76 01       	movw	r14, r12
    3064:	0e 94 a4 11 	call	0x2348	; 0x2348 <send>
    3068:	9c 01       	movw	r18, r24
    306a:	44 27       	eor	r20, r20
    306c:	37 fd       	sbrc	r19, 7
    306e:	40 95       	com	r20
    3070:	54 2f       	mov	r21, r20
  if ( r < 0 ) return 0;
    3072:	57 ff       	sbrs	r21, 7
    3074:	02 c0       	rjmp	.+4      	; 0x307a <_ZN22Adafruit_CC3000_Client5writeEh+0x50>
    3076:	20 e0       	ldi	r18, 0x00	; 0
    3078:	30 e0       	ldi	r19, 0x00	; 0
  return r;
}
    307a:	c9 01       	movw	r24, r18
    307c:	0f 90       	pop	r0
    307e:	cf 91       	pop	r28
    3080:	df 91       	pop	r29
    3082:	1f 91       	pop	r17
    3084:	0f 91       	pop	r16
    3086:	ff 90       	pop	r15
    3088:	ef 90       	pop	r14
    308a:	df 90       	pop	r13
    308c:	cf 90       	pop	r12
    308e:	08 95       	ret

00003090 <_ZN22Adafruit_CC3000_Client10fastrprintEPc>:
  else {
    return 0;
  }
}

size_t Adafruit_CC3000_Client::fastrprint(char *str)
    3090:	cf 92       	push	r12
    3092:	df 92       	push	r13
    3094:	ef 92       	push	r14
    3096:	ff 92       	push	r15
    3098:	0f 93       	push	r16
    309a:	1f 93       	push	r17
    309c:	cf 93       	push	r28
    309e:	df 93       	push	r29
    30a0:	ec 01       	movw	r28, r24
    30a2:	ab 01       	movw	r20, r22
{
  size_t len = strlen(str);
    30a4:	db 01       	movw	r26, r22
    30a6:	0d 90       	ld	r0, X+
    30a8:	00 20       	and	r0, r0
    30aa:	e9 f7       	brne	.-6      	; 0x30a6 <_ZN22Adafruit_CC3000_Client10fastrprintEPc+0x16>
    30ac:	11 97       	sbiw	r26, 0x01	; 1
    30ae:	a6 1b       	sub	r26, r22
    30b0:	b7 0b       	sbc	r27, r23
  if (len > 0) {
    30b2:	19 f4       	brne	.+6      	; 0x30ba <_ZN22Adafruit_CC3000_Client10fastrprintEPc+0x2a>
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	0f c0       	rjmp	.+30     	; 0x30d8 <_ZN22Adafruit_CC3000_Client10fastrprintEPc+0x48>
  else return true;  
}

size_t Adafruit_CC3000_Client::write(const void *buf, uint16_t len, uint32_t flags)
{
  return send(_socket, buf, len, flags);
    30ba:	c1 5b       	subi	r28, 0xB1	; 177
    30bc:	df 4f       	sbci	r29, 0xFF	; 255
    30be:	68 81       	ld	r22, Y
    30c0:	79 81       	ldd	r23, Y+1	; 0x01
    30c2:	8a 81       	ldd	r24, Y+2	; 0x02
    30c4:	9b 81       	ldd	r25, Y+3	; 0x03
    30c6:	8d 01       	movw	r16, r26
    30c8:	20 e0       	ldi	r18, 0x00	; 0
    30ca:	30 e0       	ldi	r19, 0x00	; 0
    30cc:	cc 24       	eor	r12, r12
    30ce:	dd 24       	eor	r13, r13
    30d0:	76 01       	movw	r14, r12
    30d2:	0e 94 a4 11 	call	0x2348	; 0x2348 <send>
    30d6:	9c 01       	movw	r18, r24
    return write(str, len, 0);
  }
  else {
    return 0;
  }
}
    30d8:	c9 01       	movw	r24, r18
    30da:	df 91       	pop	r29
    30dc:	cf 91       	pop	r28
    30de:	1f 91       	pop	r17
    30e0:	0f 91       	pop	r16
    30e2:	ff 90       	pop	r15
    30e4:	ef 90       	pop	r14
    30e6:	df 90       	pop	r13
    30e8:	cf 90       	pop	r12
    30ea:	08 95       	ret

000030ec <_ZN22Adafruit_CC3000_Client12fastrprintlnEPc>:

size_t Adafruit_CC3000_Client::fastrprintln(char *str) {
    30ec:	ef 92       	push	r14
    30ee:	ff 92       	push	r15
    30f0:	0f 93       	push	r16
    30f2:	1f 93       	push	r17
    30f4:	8c 01       	movw	r16, r24
  size_t r = 0;
  r = fastrprint(str);
    30f6:	0e 94 48 18 	call	0x3090	; 0x3090 <_ZN22Adafruit_CC3000_Client10fastrprintEPc>
    30fa:	7c 01       	movw	r14, r24
  r+= fastrprint(F("\r\n"));
    30fc:	c8 01       	movw	r24, r16
    30fe:	68 e6       	ldi	r22, 0x68	; 104
    3100:	70 e0       	ldi	r23, 0x00	; 0
    3102:	0e 94 84 17 	call	0x2f08	; 0x2f08 <_ZN22Adafruit_CC3000_Client10fastrprintEPK19__FlashStringHelper>
    3106:	9c 01       	movw	r18, r24
    3108:	2e 0d       	add	r18, r14
    310a:	3f 1d       	adc	r19, r15
  return r;
}
    310c:	c9 01       	movw	r24, r18
    310e:	1f 91       	pop	r17
    3110:	0f 91       	pop	r16
    3112:	ff 90       	pop	r15
    3114:	ef 90       	pop	r14
    3116:	08 95       	ret

00003118 <_ZN22Adafruit_CC3000_Client10fastrprintEPKc>:
  }
  if ((r += write("\r\n", 2, 0)) <= 0) return 0;  // meme fix
  return r;
}

size_t Adafruit_CC3000_Client::fastrprint(const char *str)
    3118:	cf 92       	push	r12
    311a:	df 92       	push	r13
    311c:	ef 92       	push	r14
    311e:	ff 92       	push	r15
    3120:	0f 93       	push	r16
    3122:	1f 93       	push	r17
    3124:	cf 93       	push	r28
    3126:	df 93       	push	r29
    3128:	ec 01       	movw	r28, r24
    312a:	ab 01       	movw	r20, r22
{
  size_t len = strlen(str);
    312c:	db 01       	movw	r26, r22
    312e:	0d 90       	ld	r0, X+
    3130:	00 20       	and	r0, r0
    3132:	e9 f7       	brne	.-6      	; 0x312e <_ZN22Adafruit_CC3000_Client10fastrprintEPKc+0x16>
    3134:	11 97       	sbiw	r26, 0x01	; 1
    3136:	a6 1b       	sub	r26, r22
    3138:	b7 0b       	sbc	r27, r23
  if (len > 0) {
    313a:	19 f4       	brne	.+6      	; 0x3142 <_ZN22Adafruit_CC3000_Client10fastrprintEPKc+0x2a>
    313c:	20 e0       	ldi	r18, 0x00	; 0
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	0f c0       	rjmp	.+30     	; 0x3160 <_ZN22Adafruit_CC3000_Client10fastrprintEPKc+0x48>
  else return true;  
}

size_t Adafruit_CC3000_Client::write(const void *buf, uint16_t len, uint32_t flags)
{
  return send(_socket, buf, len, flags);
    3142:	c1 5b       	subi	r28, 0xB1	; 177
    3144:	df 4f       	sbci	r29, 0xFF	; 255
    3146:	68 81       	ld	r22, Y
    3148:	79 81       	ldd	r23, Y+1	; 0x01
    314a:	8a 81       	ldd	r24, Y+2	; 0x02
    314c:	9b 81       	ldd	r25, Y+3	; 0x03
    314e:	8d 01       	movw	r16, r26
    3150:	20 e0       	ldi	r18, 0x00	; 0
    3152:	30 e0       	ldi	r19, 0x00	; 0
    3154:	cc 24       	eor	r12, r12
    3156:	dd 24       	eor	r13, r13
    3158:	76 01       	movw	r14, r12
    315a:	0e 94 a4 11 	call	0x2348	; 0x2348 <send>
    315e:	9c 01       	movw	r18, r24
    return write(str, len, 0);
  }
  else {
    return 0;
  }
}
    3160:	c9 01       	movw	r24, r18
    3162:	df 91       	pop	r29
    3164:	cf 91       	pop	r28
    3166:	1f 91       	pop	r17
    3168:	0f 91       	pop	r16
    316a:	ff 90       	pop	r15
    316c:	ef 90       	pop	r14
    316e:	df 90       	pop	r13
    3170:	cf 90       	pop	r12
    3172:	08 95       	ret

00003174 <_ZN22Adafruit_CC3000_Client5writeEPKhj>:
size_t Adafruit_CC3000_Client::write(const void *buf, uint16_t len, uint32_t flags)
{
  return send(_socket, buf, len, flags);
}

size_t Adafruit_CC3000_Client::write(const uint8_t *buf, size_t len)
    3174:	cf 92       	push	r12
    3176:	df 92       	push	r13
    3178:	ef 92       	push	r14
    317a:	ff 92       	push	r15
    317c:	0f 93       	push	r16
    317e:	1f 93       	push	r17
    3180:	db 01       	movw	r26, r22
  else return true;  
}

size_t Adafruit_CC3000_Client::write(const void *buf, uint16_t len, uint32_t flags)
{
  return send(_socket, buf, len, flags);
    3182:	fc 01       	movw	r30, r24
    3184:	e1 5b       	subi	r30, 0xB1	; 177
    3186:	ff 4f       	sbci	r31, 0xFF	; 255
    3188:	60 81       	ld	r22, Z
    318a:	71 81       	ldd	r23, Z+1	; 0x01
    318c:	82 81       	ldd	r24, Z+2	; 0x02
    318e:	93 81       	ldd	r25, Z+3	; 0x03
    3190:	8a 01       	movw	r16, r20
    3192:	20 e0       	ldi	r18, 0x00	; 0
    3194:	30 e0       	ldi	r19, 0x00	; 0
    3196:	ad 01       	movw	r20, r26
    3198:	cc 24       	eor	r12, r12
    319a:	dd 24       	eor	r13, r13
    319c:	76 01       	movw	r14, r12
    319e:	0e 94 a4 11 	call	0x2348	; 0x2348 <send>
}

size_t Adafruit_CC3000_Client::write(const uint8_t *buf, size_t len)
{
  return write(buf, len, 0);
}
    31a2:	1f 91       	pop	r17
    31a4:	0f 91       	pop	r16
    31a6:	ff 90       	pop	r15
    31a8:	ef 90       	pop	r14
    31aa:	df 90       	pop	r13
    31ac:	cf 90       	pop	r12
    31ae:	08 95       	ret

000031b0 <_ZN22Adafruit_CC3000_Client7connectE9IPAddressj>:
    return connect(ip, port);
  else 
    return 0;
}

int Adafruit_CC3000_Client::connect(IPAddress destIP, uint16_t destPort)
    31b0:	6f 92       	push	r6
    31b2:	7f 92       	push	r7
    31b4:	8f 92       	push	r8
    31b6:	9f 92       	push	r9
    31b8:	af 92       	push	r10
    31ba:	bf 92       	push	r11
    31bc:	cf 92       	push	r12
    31be:	df 92       	push	r13
    31c0:	ef 92       	push	r14
    31c2:	ff 92       	push	r15
    31c4:	0f 93       	push	r16
    31c6:	1f 93       	push	r17
    31c8:	df 93       	push	r29
    31ca:	cf 93       	push	r28
    31cc:	cd b7       	in	r28, 0x3d	; 61
    31ce:	de b7       	in	r29, 0x3e	; 62
    31d0:	60 97       	sbiw	r28, 0x10	; 16
    31d2:	0f b6       	in	r0, 0x3f	; 63
    31d4:	f8 94       	cli
    31d6:	de bf       	out	0x3e, r29	; 62
    31d8:	0f be       	out	0x3f, r0	; 63
    31da:	cd bf       	out	0x3d, r28	; 61
    31dc:	5c 01       	movw	r10, r24
    31de:	4b 01       	movw	r8, r22
    31e0:	3a 01       	movw	r6, r20
  // The only difference is it resets the client's buffers to be empty, and then implements the
  // same logic as connect.
  // TODO: Refactor this entire function away so there is a single common function for connecting
  // to a TCP socket that both this function and the connectTCP function will use.

  bufsiz = 0;
    31e2:	8d e4       	ldi	r24, 0x4D	; 77
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	a8 0e       	add	r10, r24
    31e8:	b9 1e       	adc	r11, r25
    31ea:	d5 01       	movw	r26, r10
    31ec:	1d 92       	st	X+, r1
    31ee:	1c 92       	st	X, r1
  _rx_buf_idx = 0;
    31f0:	f5 01       	movw	r30, r10
    31f2:	12 92       	st	-Z, r1
    31f4:	5f 01       	movw	r10, r30
    31f6:	84 eb       	ldi	r24, 0xB4	; 180
    31f8:	9f ef       	ldi	r25, 0xFF	; 255
    31fa:	a8 0e       	add	r10, r24
    31fc:	b9 1e       	adc	r11, r25
  sockaddr      socketAddress;
  int32_t       tcp_socket;

  // Create the socket(s)
  //if (CC3KPrinter != 0) CC3KPrinter->print(F("Creating socket ... "));
  tcp_socket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    31fe:	62 e0       	ldi	r22, 0x02	; 2
    3200:	70 e0       	ldi	r23, 0x00	; 0
    3202:	80 e0       	ldi	r24, 0x00	; 0
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	21 e0       	ldi	r18, 0x01	; 1
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	40 e0       	ldi	r20, 0x00	; 0
    320c:	50 e0       	ldi	r21, 0x00	; 0
    320e:	e6 e0       	ldi	r30, 0x06	; 6
    3210:	ee 2e       	mov	r14, r30
    3212:	f1 2c       	mov	r15, r1
    3214:	01 2d       	mov	r16, r1
    3216:	11 2d       	mov	r17, r1
    3218:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <socket>
    321c:	6b 01       	movw	r12, r22
    321e:	7c 01       	movw	r14, r24
  if (-1 == tcp_socket)
    3220:	9f ef       	ldi	r25, 0xFF	; 255
    3222:	c9 16       	cp	r12, r25
    3224:	9f ef       	ldi	r25, 0xFF	; 255
    3226:	d9 06       	cpc	r13, r25
    3228:	9f ef       	ldi	r25, 0xFF	; 255
    322a:	e9 06       	cpc	r14, r25
    322c:	9f ef       	ldi	r25, 0xFF	; 255
    322e:	f9 06       	cpc	r15, r25
    3230:	c9 f1       	breq	.+114    	; 0x32a4 <_ZN22Adafruit_CC3000_Client7connectE9IPAddressj+0xf4>
    }
    return 0;
  }
  //CC3KPrinter->print(F("DONE (socket ")); CC3KPrinter->print(tcp_socket); CC3KPrinter->println(F(")"));

  closed_sockets[tcp_socket] = false; // Clear any previous closed event
    3232:	f6 01       	movw	r30, r12
    3234:	ef 57       	subi	r30, 0x7F	; 127
    3236:	fc 4f       	sbci	r31, 0xFC	; 252
    3238:	10 82       	st	Z, r1

  // Try to open the socket
  memset(&socketAddress, 0x00, sizeof(socketAddress));
    323a:	8e 01       	movw	r16, r28
    323c:	0f 5f       	subi	r16, 0xFF	; 255
    323e:	1f 4f       	sbci	r17, 0xFF	; 255
    3240:	80 e1       	ldi	r24, 0x10	; 16
    3242:	d8 01       	movw	r26, r16
    3244:	1d 92       	st	X+, r1
    3246:	8a 95       	dec	r24
    3248:	e9 f7       	brne	.-6      	; 0x3244 <_ZN22Adafruit_CC3000_Client7connectE9IPAddressj+0x94>
  socketAddress.sa_family = AF_INET;
    324a:	82 e0       	ldi	r24, 0x02	; 2
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	9a 83       	std	Y+2, r25	; 0x02
    3250:	89 83       	std	Y+1, r24	; 0x01
  socketAddress.sa_data[0] = (destPort & 0xFF00) >> 8;  // Set the Port Number
    3252:	7b 82       	std	Y+3, r7	; 0x03
  socketAddress.sa_data[1] = (destPort & 0x00FF);
    3254:	6c 82       	std	Y+4, r6	; 0x04
  socketAddress.sa_data[2] = destIP >> 24;
    3256:	f4 01       	movw	r30, r8
    3258:	82 81       	ldd	r24, Z+2	; 0x02
    325a:	93 81       	ldd	r25, Z+3	; 0x03
    325c:	a4 81       	ldd	r26, Z+4	; 0x04
    325e:	b5 81       	ldd	r27, Z+5	; 0x05
    3260:	2b 2f       	mov	r18, r27
    3262:	33 27       	eor	r19, r19
    3264:	44 27       	eor	r20, r20
    3266:	55 27       	eor	r21, r21
    3268:	2d 83       	std	Y+5, r18	; 0x05
  socketAddress.sa_data[3] = destIP >> 16;
    326a:	9d 01       	movw	r18, r26
    326c:	44 27       	eor	r20, r20
    326e:	55 27       	eor	r21, r21
    3270:	2e 83       	std	Y+6, r18	; 0x06
  socketAddress.sa_data[4] = destIP >> 8;
    3272:	89 2f       	mov	r24, r25
    3274:	9a 2f       	mov	r25, r26
    3276:	ab 2f       	mov	r26, r27
    3278:	bb 27       	eor	r27, r27
    327a:	8f 83       	std	Y+7, r24	; 0x07
  socketAddress.sa_data[5] = destIP;
    327c:	82 81       	ldd	r24, Z+2	; 0x02
    327e:	88 87       	std	Y+8, r24	; 0x08
    CC3KPrinter->println(destPort);
  }

  //printHex((byte *)&socketAddress, sizeof(socketAddress));
  //if (CC3KPrinter != 0) CC3KPrinter->print(F("Connecting socket ... "));
  if (-1 == ::connect(tcp_socket, &socketAddress, sizeof(socketAddress)))
    3280:	c7 01       	movw	r24, r14
    3282:	b6 01       	movw	r22, r12
    3284:	a8 01       	movw	r20, r16
    3286:	00 e1       	ldi	r16, 0x10	; 16
    3288:	10 e0       	ldi	r17, 0x00	; 0
    328a:	20 e0       	ldi	r18, 0x00	; 0
    328c:	30 e0       	ldi	r19, 0x00	; 0
    328e:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <connect>
    3292:	6f 5f       	subi	r22, 0xFF	; 255
    3294:	7f 4f       	sbci	r23, 0xFF	; 255
    3296:	8f 4f       	sbci	r24, 0xFF	; 255
    3298:	9f 4f       	sbci	r25, 0xFF	; 255
    329a:	39 f4       	brne	.+14     	; 0x32aa <_ZN22Adafruit_CC3000_Client7connectE9IPAddressj+0xfa>
  {
    CHECK_PRINTER {
      CC3KPrinter->println(F("Connection error"));
    }
    closesocket(tcp_socket);
    329c:	c7 01       	movw	r24, r14
    329e:	b6 01       	movw	r22, r12
    32a0:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <closesocket>
    32a4:	20 e0       	ldi	r18, 0x00	; 0
    32a6:	30 e0       	ldi	r19, 0x00	; 0
    32a8:	0c c0       	rjmp	.+24     	; 0x32c2 <_ZN22Adafruit_CC3000_Client7connectE9IPAddressj+0x112>
    return 0;
  }
  // if (CC3KPrinter != 0) CC3KPrinter->println(F("DONE"));

  _socket = tcp_socket;
    32aa:	8f e4       	ldi	r24, 0x4F	; 79
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	a8 0e       	add	r10, r24
    32b0:	b9 1e       	adc	r11, r25
    32b2:	d5 01       	movw	r26, r10
    32b4:	cd 92       	st	X+, r12
    32b6:	dd 92       	st	X+, r13
    32b8:	ed 92       	st	X+, r14
    32ba:	fc 92       	st	X, r15
    32bc:	13 97       	sbiw	r26, 0x03	; 3
    32be:	21 e0       	ldi	r18, 0x01	; 1
    32c0:	30 e0       	ldi	r19, 0x00	; 0
  return 1;
}
    32c2:	c9 01       	movw	r24, r18
    32c4:	60 96       	adiw	r28, 0x10	; 16
    32c6:	0f b6       	in	r0, 0x3f	; 63
    32c8:	f8 94       	cli
    32ca:	de bf       	out	0x3e, r29	; 62
    32cc:	0f be       	out	0x3f, r0	; 63
    32ce:	cd bf       	out	0x3d, r28	; 61
    32d0:	cf 91       	pop	r28
    32d2:	df 91       	pop	r29
    32d4:	1f 91       	pop	r17
    32d6:	0f 91       	pop	r16
    32d8:	ff 90       	pop	r15
    32da:	ef 90       	pop	r14
    32dc:	df 90       	pop	r13
    32de:	cf 90       	pop	r12
    32e0:	bf 90       	pop	r11
    32e2:	af 90       	pop	r10
    32e4:	9f 90       	pop	r9
    32e6:	8f 90       	pop	r8
    32e8:	7f 90       	pop	r7
    32ea:	6f 90       	pop	r6
    32ec:	08 95       	ret

000032ee <_ZN15Adafruit_CC30009checkDHCPEv>:
    Checks if the DHCP process is complete or not

    @returns  True if DHCP process is complete (IP address assigned)
*/
/**************************************************************************/
bool Adafruit_CC3000::checkDHCP(void)
    32ee:	df 93       	push	r29
    32f0:	cf 93       	push	r28
    32f2:	00 d0       	rcall	.+0      	; 0x32f4 <_ZN15Adafruit_CC30009checkDHCPEv+0x6>
    32f4:	00 d0       	rcall	.+0      	; 0x32f6 <_ZN15Adafruit_CC30009checkDHCPEv+0x8>
    32f6:	cd b7       	in	r28, 0x3d	; 61
    32f8:	de b7       	in	r29, 0x3e	; 62
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    32fa:	80 91 a1 03 	lds	r24, 0x03A1
  // but for some reason this call is necessary or else UDP won't 
  // work.  See this thread from TI for more details and the genesis
  // of the workaround: http://e2e.ti.com/support/wireless_connectivity/f/851/t/342177.aspx
  // Putting this in checkDHCP is a nice way to make it just work
  // for people without any need to add to their sketch.
  if (cc3000Bitset.test(CC3000BitSet::HasDHCP)) {
    32fe:	82 ff       	sbrs	r24, 2
    3300:	09 c0       	rjmp	.+18     	; 0x3314 <_ZN15Adafruit_CC30009checkDHCPEv+0x26>
    uint32_t output;
    gethostbyname("localhost", 9, &output);
    3302:	83 e0       	ldi	r24, 0x03	; 3
    3304:	91 e0       	ldi	r25, 0x01	; 1
    3306:	69 e0       	ldi	r22, 0x09	; 9
    3308:	70 e0       	ldi	r23, 0x00	; 0
    330a:	ae 01       	movw	r20, r28
    330c:	4f 5f       	subi	r20, 0xFF	; 255
    330e:	5f 4f       	sbci	r21, 0xFF	; 255
    3310:	0e 94 32 0c 	call	0x1864	; 0x1864 <gethostbyname>
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    3314:	80 91 a1 03 	lds	r24, 0x03A1
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	96 95       	lsr	r25
    331c:	87 95       	ror	r24
    331e:	96 95       	lsr	r25
    3320:	87 95       	ror	r24
  if (cc3000Bitset.test(CC3000BitSet::HasDHCP)) {
    uint32_t output;
    gethostbyname("localhost", 9, &output);
  }
  return cc3000Bitset.test(CC3000BitSet::HasDHCP);
}
    3322:	81 70       	andi	r24, 0x01	; 1
    3324:	0f 90       	pop	r0
    3326:	0f 90       	pop	r0
    3328:	0f 90       	pop	r0
    332a:	0f 90       	pop	r0
    332c:	cf 91       	pop	r28
    332e:	df 91       	pop	r29
    3330:	08 95       	ret

00003332 <_ZN22Adafruit_CC3000_Client7connectEPKcj>:
Adafruit_CC3000_Client::operator bool()
{
  return connected();
}

int Adafruit_CC3000_Client::connect(const char *host, uint16_t port){
    3332:	af 92       	push	r10
    3334:	bf 92       	push	r11
    3336:	cf 92       	push	r12
    3338:	df 92       	push	r13
    333a:	ef 92       	push	r14
    333c:	ff 92       	push	r15
    333e:	0f 93       	push	r16
    3340:	1f 93       	push	r17
    3342:	df 93       	push	r29
    3344:	cf 93       	push	r28
    3346:	cd b7       	in	r28, 0x3d	; 61
    3348:	de b7       	in	r29, 0x3e	; 62
    334a:	2a 97       	sbiw	r28, 0x0a	; 10
    334c:	0f b6       	in	r0, 0x3f	; 63
    334e:	f8 94       	cli
    3350:	de bf       	out	0x3e, r29	; 62
    3352:	0f be       	out	0x3f, r0	; 63
    3354:	cd bf       	out	0x3d, r28	; 61
    3356:	6c 01       	movw	r12, r24
    3358:	cb 01       	movw	r24, r22
    335a:	5a 01       	movw	r10, r20
  
  // if (!_initialised) return 0;
  // if (!ulCC3000Connected) return 0;
  // if (!ulCC3000DHCP) return 0;

  uint32_t ip = 0;
    335c:	19 82       	std	Y+1, r1	; 0x01
    335e:	1a 82       	std	Y+2, r1	; 0x02
    3360:	1b 82       	std	Y+3, r1	; 0x03
    3362:	1c 82       	std	Y+4, r1	; 0x04

  int16_t r = gethostbyname(host, strlen(host), &ip);
    3364:	db 01       	movw	r26, r22
    3366:	0d 90       	ld	r0, X+
    3368:	00 20       	and	r0, r0
    336a:	e9 f7       	brne	.-6      	; 0x3366 <_ZN22Adafruit_CC3000_Client7connectEPKcj+0x34>
    336c:	11 97       	sbiw	r26, 0x01	; 1
    336e:	a6 1b       	sub	r26, r22
    3370:	b7 0b       	sbc	r27, r23
    3372:	bd 01       	movw	r22, r26
    3374:	ae 01       	movw	r20, r28
    3376:	4f 5f       	subi	r20, 0xFF	; 255
    3378:	5f 4f       	sbci	r21, 0xFF	; 255
    337a:	0e 94 32 0c 	call	0x1864	; 0x1864 <gethostbyname>

  if (ip!=0 && r!=0)
    337e:	49 81       	ldd	r20, Y+1	; 0x01
    3380:	5a 81       	ldd	r21, Y+2	; 0x02
    3382:	6b 81       	ldd	r22, Y+3	; 0x03
    3384:	7c 81       	ldd	r23, Y+4	; 0x04
    3386:	41 15       	cp	r20, r1
    3388:	51 05       	cpc	r21, r1
    338a:	61 05       	cpc	r22, r1
    338c:	71 05       	cpc	r23, r1
    338e:	a1 f0       	breq	.+40     	; 0x33b8 <_ZN22Adafruit_CC3000_Client7connectEPKcj+0x86>
    3390:	89 2b       	or	r24, r25
    3392:	91 f0       	breq	.+36     	; 0x33b8 <_ZN22Adafruit_CC3000_Client7connectEPKcj+0x86>
    return connect(ip, port);
    3394:	d6 01       	movw	r26, r12
    3396:	ed 91       	ld	r30, X+
    3398:	fc 91       	ld	r31, X
    339a:	e4 84       	ldd	r14, Z+12	; 0x0c
    339c:	f5 84       	ldd	r15, Z+13	; 0x0d
    339e:	8e 01       	movw	r16, r28
    33a0:	0b 5f       	subi	r16, 0xFB	; 251
    33a2:	1f 4f       	sbci	r17, 0xFF	; 255
    33a4:	c8 01       	movw	r24, r16
    33a6:	0e 94 34 2c 	call	0x5868	; 0x5868 <_ZN9IPAddressC1Em>
    33aa:	c6 01       	movw	r24, r12
    33ac:	b8 01       	movw	r22, r16
    33ae:	a5 01       	movw	r20, r10
    33b0:	f7 01       	movw	r30, r14
    33b2:	09 95       	icall
    33b4:	9c 01       	movw	r18, r24
    33b6:	02 c0       	rjmp	.+4      	; 0x33bc <_ZN22Adafruit_CC3000_Client7connectEPKcj+0x8a>
    33b8:	20 e0       	ldi	r18, 0x00	; 0
    33ba:	30 e0       	ldi	r19, 0x00	; 0
  else 
    return 0;
}
    33bc:	c9 01       	movw	r24, r18
    33be:	2a 96       	adiw	r28, 0x0a	; 10
    33c0:	0f b6       	in	r0, 0x3f	; 63
    33c2:	f8 94       	cli
    33c4:	de bf       	out	0x3e, r29	; 62
    33c6:	0f be       	out	0x3f, r0	; 63
    33c8:	cd bf       	out	0x3d, r28	; 61
    33ca:	cf 91       	pop	r28
    33cc:	df 91       	pop	r29
    33ce:	1f 91       	pop	r17
    33d0:	0f 91       	pop	r16
    33d2:	ff 90       	pop	r15
    33d4:	ef 90       	pop	r14
    33d6:	df 90       	pop	r13
    33d8:	cf 90       	pop	r12
    33da:	bf 90       	pop	r11
    33dc:	af 90       	pop	r10
    33de:	08 95       	ret

000033e0 <_ZN22Adafruit_CC3000_ClientaSERKS_>:
  bufsiz = copy.bufsiz;
  _rx_buf_idx = copy._rx_buf_idx;
  memcpy(_rx_buf, copy._rx_buf, RXBUFFERSIZE);
}

void Adafruit_CC3000_Client::operator=(const Adafruit_CC3000_Client& other) {
    33e0:	cf 93       	push	r28
    33e2:	df 93       	push	r29
    33e4:	fc 01       	movw	r30, r24
    33e6:	9b 01       	movw	r18, r22
  // Copy all the members to assign a new value to this client.
  _socket = other._socket;
    33e8:	e1 5b       	subi	r30, 0xB1	; 177
    33ea:	ff 4f       	sbci	r31, 0xFF	; 255
    33ec:	21 5b       	subi	r18, 0xB1	; 177
    33ee:	3f 4f       	sbci	r19, 0xFF	; 255
    33f0:	e9 01       	movw	r28, r18
    33f2:	88 81       	ld	r24, Y
    33f4:	99 81       	ldd	r25, Y+1	; 0x01
    33f6:	aa 81       	ldd	r26, Y+2	; 0x02
    33f8:	bb 81       	ldd	r27, Y+3	; 0x03
    33fa:	80 83       	st	Z, r24
    33fc:	91 83       	std	Z+1, r25	; 0x01
    33fe:	a2 83       	std	Z+2, r26	; 0x02
    3400:	b3 83       	std	Z+3, r27	; 0x03
  bufsiz = other.bufsiz;
    3402:	d9 01       	movw	r26, r18
    3404:	9e 91       	ld	r25, -X
    3406:	8e 91       	ld	r24, -X
    3408:	92 93       	st	-Z, r25
    340a:	82 93       	st	-Z, r24
  _rx_buf_idx = other._rx_buf_idx;
    340c:	ed 01       	movw	r28, r26
    340e:	8a 91       	ld	r24, -Y
    3410:	82 93       	st	-Z, r24
  memcpy(_rx_buf, other._rx_buf, RXBUFFERSIZE);
    3412:	e0 54       	subi	r30, 0x40	; 64
    3414:	f0 40       	sbci	r31, 0x00	; 0
    3416:	de 01       	movw	r26, r28
    3418:	a0 54       	subi	r26, 0x40	; 64
    341a:	b0 40       	sbci	r27, 0x00	; 0
    341c:	80 e4       	ldi	r24, 0x40	; 64
    341e:	0d 90       	ld	r0, X+
    3420:	01 92       	st	Z+, r0
    3422:	81 50       	subi	r24, 0x01	; 1
    3424:	e1 f7       	brne	.-8      	; 0x341e <_ZN22Adafruit_CC3000_ClientaSERKS_+0x3e>
}
    3426:	df 91       	pop	r29
    3428:	cf 91       	pop	r28
    342a:	08 95       	ret

0000342c <_Z21CC3000_UsynchCallbacklPch>:
//!
//! @brief  The function handles asynchronous events that come from CC3000
//!         device and operates a led for indicate
//
//*****************************************************************************
void CC3000_UsynchCallback(long lEventType, char * data, unsigned char length)
    342c:	ef 92       	push	r14
    342e:	ff 92       	push	r15
    3430:	0f 93       	push	r16
    3432:	1f 93       	push	r17
    3434:	7b 01       	movw	r14, r22
    3436:	8c 01       	movw	r16, r24
    3438:	fa 01       	movw	r30, r20
    343a:	42 2f       	mov	r20, r18
{
  if (lEventType == HCI_EVNT_WLAN_ASYNC_SIMPLE_CONFIG_DONE)
    343c:	80 e8       	ldi	r24, 0x80	; 128
    343e:	e8 16       	cp	r14, r24
    3440:	80 e8       	ldi	r24, 0x80	; 128
    3442:	f8 06       	cpc	r15, r24
    3444:	80 e0       	ldi	r24, 0x00	; 0
    3446:	08 07       	cpc	r16, r24
    3448:	80 e0       	ldi	r24, 0x00	; 0
    344a:	18 07       	cpc	r17, r24
    344c:	31 f4       	brne	.+12     	; 0x345a <_Z21CC3000_UsynchCallbacklPch+0x2e>
  bool test(const byte flag) {
    return (flags & flag) != 0;
  }

  void set(const byte flag) {
    flags |= flag;
    344e:	80 91 a1 03 	lds	r24, 0x03A1
    3452:	81 60       	ori	r24, 0x01	; 1
    3454:	80 93 a1 03 	sts	0x03A1, r24
    3458:	2b c0       	rjmp	.+86     	; 0x34b0 <_Z21CC3000_UsynchCallbacklPch+0x84>
  if (lEventType == HCI_EVNT_WLAN_ASYNC_SIMPLE_CONFIG_DONE)
  {
    cc3000Bitset.set(CC3000BitSet::IsSmartConfigFinished);
  }

  if (lEventType == HCI_EVNT_WLAN_UNSOL_CONNECT)
    345a:	81 e0       	ldi	r24, 0x01	; 1
    345c:	e8 16       	cp	r14, r24
    345e:	80 e8       	ldi	r24, 0x80	; 128
    3460:	f8 06       	cpc	r15, r24
    3462:	80 e0       	ldi	r24, 0x00	; 0
    3464:	08 07       	cpc	r16, r24
    3466:	80 e0       	ldi	r24, 0x00	; 0
    3468:	18 07       	cpc	r17, r24
    346a:	31 f4       	brne	.+12     	; 0x3478 <_Z21CC3000_UsynchCallbacklPch+0x4c>
  bool test(const byte flag) {
    return (flags & flag) != 0;
  }

  void set(const byte flag) {
    flags |= flag;
    346c:	80 91 a1 03 	lds	r24, 0x03A1
    3470:	82 60       	ori	r24, 0x02	; 2
    3472:	80 93 a1 03 	sts	0x03A1, r24
    3476:	28 c0       	rjmp	.+80     	; 0x34c8 <_Z21CC3000_UsynchCallbacklPch+0x9c>
  if (lEventType == HCI_EVNT_WLAN_UNSOL_CONNECT)
  {
    cc3000Bitset.set(CC3000BitSet::IsConnected);
  }

  if (lEventType == HCI_EVNT_WLAN_UNSOL_DISCONNECT)
    3478:	82 e0       	ldi	r24, 0x02	; 2
    347a:	e8 16       	cp	r14, r24
    347c:	80 e8       	ldi	r24, 0x80	; 128
    347e:	f8 06       	cpc	r15, r24
    3480:	80 e0       	ldi	r24, 0x00	; 0
    3482:	08 07       	cpc	r16, r24
    3484:	80 e0       	ldi	r24, 0x00	; 0
    3486:	18 07       	cpc	r17, r24
    3488:	31 f4       	brne	.+12     	; 0x3496 <_Z21CC3000_UsynchCallbacklPch+0x6a>
  void set(const byte flag) {
    flags |= flag;
  }

  void reset(const byte flag) {
    flags &= ~flag;
    348a:	80 91 a1 03 	lds	r24, 0x03A1
    348e:	89 7f       	andi	r24, 0xF9	; 249
    3490:	80 93 a1 03 	sts	0x03A1, r24
    3494:	2f c0       	rjmp	.+94     	; 0x34f4 <_Z21CC3000_UsynchCallbacklPch+0xc8>
  if (lEventType == HCI_EVNT_WLAN_UNSOL_DISCONNECT)
  {
    cc3000Bitset.reset(CC3000BitSet::IsConnected | CC3000BitSet::HasDHCP);
  }
  
  if (lEventType == HCI_EVNT_WLAN_UNSOL_DHCP)
    3496:	80 e1       	ldi	r24, 0x10	; 16
    3498:	e8 16       	cp	r14, r24
    349a:	80 e8       	ldi	r24, 0x80	; 128
    349c:	f8 06       	cpc	r15, r24
    349e:	80 e0       	ldi	r24, 0x00	; 0
    34a0:	08 07       	cpc	r16, r24
    34a2:	80 e0       	ldi	r24, 0x00	; 0
    34a4:	18 07       	cpc	r17, r24
    34a6:	21 f4       	brne	.+8      	; 0x34b0 <_Z21CC3000_UsynchCallbacklPch+0x84>
  bool test(const byte flag) {
    return (flags & flag) != 0;
  }

  void set(const byte flag) {
    flags |= flag;
    34a8:	80 91 a1 03 	lds	r24, 0x03A1
    34ac:	84 60       	ori	r24, 0x04	; 4
    34ae:	09 c0       	rjmp	.+18     	; 0x34c2 <_Z21CC3000_UsynchCallbacklPch+0x96>
  if (lEventType == HCI_EVNT_WLAN_UNSOL_DHCP)
  {
    cc3000Bitset.set(CC3000BitSet::HasDHCP);
  }

  if (lEventType == HCI_EVENT_CC3000_CAN_SHUT_DOWN)
    34b0:	89 e9       	ldi	r24, 0x99	; 153
    34b2:	e8 16       	cp	r14, r24
    34b4:	f1 04       	cpc	r15, r1
    34b6:	01 05       	cpc	r16, r1
    34b8:	11 05       	cpc	r17, r1
    34ba:	31 f4       	brne	.+12     	; 0x34c8 <_Z21CC3000_UsynchCallbacklPch+0x9c>
  bool test(const byte flag) {
    return (flags & flag) != 0;
  }

  void set(const byte flag) {
    flags |= flag;
    34bc:	80 91 a1 03 	lds	r24, 0x03A1
    34c0:	88 60       	ori	r24, 0x08	; 8
    34c2:	80 93 a1 03 	sts	0x03A1, r24
    34c6:	28 c0       	rjmp	.+80     	; 0x3518 <_Z21CC3000_UsynchCallbacklPch+0xec>
  if (lEventType == HCI_EVENT_CC3000_CAN_SHUT_DOWN)
  {
    cc3000Bitset.set(CC3000BitSet::OkToShutDown);
  }

  if (lEventType == HCI_EVNT_WLAN_ASYNC_PING_REPORT)
    34c8:	80 e4       	ldi	r24, 0x40	; 64
    34ca:	e8 16       	cp	r14, r24
    34cc:	80 e8       	ldi	r24, 0x80	; 128
    34ce:	f8 06       	cpc	r15, r24
    34d0:	80 e0       	ldi	r24, 0x00	; 0
    34d2:	08 07       	cpc	r16, r24
    34d4:	80 e0       	ldi	r24, 0x00	; 0
    34d6:	18 07       	cpc	r17, r24
    34d8:	69 f4       	brne	.+26     	; 0x34f4 <_Z21CC3000_UsynchCallbacklPch+0xc8>
  {
    //PRINT_F("CC3000: Ping report\n\r");
    pingReportnum++;
    34da:	80 91 6c 03 	lds	r24, 0x036C
    34de:	8f 5f       	subi	r24, 0xFF	; 255
    34e0:	80 93 6c 03 	sts	0x036C, r24
    memcpy(&pingReport, data, length);
    34e4:	2d e6       	ldi	r18, 0x6D	; 109
    34e6:	33 e0       	ldi	r19, 0x03	; 3
    34e8:	c9 01       	movw	r24, r18
    34ea:	bf 01       	movw	r22, r30
    34ec:	50 e0       	ldi	r21, 0x00	; 0
    34ee:	0e 94 8b 33 	call	0x6716	; 0x6716 <memcpy>
    34f2:	12 c0       	rjmp	.+36     	; 0x3518 <_Z21CC3000_UsynchCallbacklPch+0xec>
  }

  if (lEventType == HCI_EVNT_BSD_TCP_CLOSE_WAIT) {
    34f4:	80 e0       	ldi	r24, 0x00	; 0
    34f6:	e8 16       	cp	r14, r24
    34f8:	88 e8       	ldi	r24, 0x88	; 136
    34fa:	f8 06       	cpc	r15, r24
    34fc:	80 e0       	ldi	r24, 0x00	; 0
    34fe:	08 07       	cpc	r16, r24
    3500:	80 e0       	ldi	r24, 0x00	; 0
    3502:	18 07       	cpc	r17, r24
    3504:	49 f4       	brne	.+18     	; 0x3518 <_Z21CC3000_UsynchCallbacklPch+0xec>
    uint8_t socketnum;
    socketnum = data[0];
    3506:	40 81       	ld	r20, Z
    //PRINT_F("TCP Close wait #"); printDec(socketnum);
    if (socketnum < MAX_SOCKETS)
    3508:	40 32       	cpi	r20, 0x20	; 32
    350a:	30 f4       	brcc	.+12     	; 0x3518 <_Z21CC3000_UsynchCallbacklPch+0xec>
      closed_sockets[socketnum] = true;
    350c:	e4 2f       	mov	r30, r20
    350e:	f0 e0       	ldi	r31, 0x00	; 0
    3510:	ef 57       	subi	r30, 0x7F	; 127
    3512:	fc 4f       	sbci	r31, 0xFC	; 252
    3514:	81 e0       	ldi	r24, 0x01	; 1
    3516:	80 83       	st	Z, r24
  }
}
    3518:	1f 91       	pop	r17
    351a:	0f 91       	pop	r16
    351c:	ff 90       	pop	r15
    351e:	ef 90       	pop	r14
    3520:	08 95       	ret

00003522 <_ZN15Adafruit_CC300012getIPAddressEPmS0_S0_S0_S0_>:
    @brief   Reads the current IP address

    @returns  False if an error occured!
*/
/**************************************************************************/
bool Adafruit_CC3000::getIPAddress(uint32_t *retip, uint32_t *netmask, uint32_t *gateway, uint32_t *dhcpserv, uint32_t *dnsserv)
    3522:	8f 92       	push	r8
    3524:	9f 92       	push	r9
    3526:	af 92       	push	r10
    3528:	bf 92       	push	r11
    352a:	cf 92       	push	r12
    352c:	df 92       	push	r13
    352e:	ef 92       	push	r14
    3530:	ff 92       	push	r15
    3532:	0f 93       	push	r16
    3534:	1f 93       	push	r17
    3536:	df 93       	push	r29
    3538:	cf 93       	push	r28
    353a:	cd b7       	in	r28, 0x3d	; 61
    353c:	de b7       	in	r29, 0x3e	; 62
    353e:	ea 97       	sbiw	r28, 0x3a	; 58
    3540:	0f b6       	in	r0, 0x3f	; 63
    3542:	f8 94       	cli
    3544:	de bf       	out	0x3e, r29	; 62
    3546:	0f be       	out	0x3f, r0	; 63
    3548:	cd bf       	out	0x3d, r28	; 61
    354a:	fc 01       	movw	r30, r24
    354c:	6b 01       	movw	r12, r22
    354e:	5a 01       	movw	r10, r20
    3550:	49 01       	movw	r8, r18
{
  if (!_initialised) return false;
    3552:	80 81       	ld	r24, Z
    3554:	88 23       	and	r24, r24
    3556:	f1 f1       	breq	.+124    	; 0x35d4 <_ZN15Adafruit_CC300012getIPAddressEPmS0_S0_S0_S0_+0xb2>
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    3558:	80 91 a1 03 	lds	r24, 0x03A1
*/
/**************************************************************************/
bool Adafruit_CC3000::getIPAddress(uint32_t *retip, uint32_t *netmask, uint32_t *gateway, uint32_t *dhcpserv, uint32_t *dnsserv)
{
  if (!_initialised) return false;
  if (!cc3000Bitset.test(CC3000BitSet::IsConnected)) return false;
    355c:	81 ff       	sbrs	r24, 1
    355e:	3a c0       	rjmp	.+116    	; 0x35d4 <_ZN15Adafruit_CC300012getIPAddressEPmS0_S0_S0_S0_+0xb2>
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    3560:	80 91 a1 03 	lds	r24, 0x03A1
/**************************************************************************/
bool Adafruit_CC3000::getIPAddress(uint32_t *retip, uint32_t *netmask, uint32_t *gateway, uint32_t *dhcpserv, uint32_t *dnsserv)
{
  if (!_initialised) return false;
  if (!cc3000Bitset.test(CC3000BitSet::IsConnected)) return false;
  if (!cc3000Bitset.test(CC3000BitSet::HasDHCP)) return false;
    3564:	82 ff       	sbrs	r24, 2
    3566:	36 c0       	rjmp	.+108    	; 0x35d4 <_ZN15Adafruit_CC300012getIPAddressEPmS0_S0_S0_S0_+0xb2>

  tNetappIpconfigRetArgs ipconfig;
  netapp_ipconfig(&ipconfig);
    3568:	ce 01       	movw	r24, r28
    356a:	01 96       	adiw	r24, 0x01	; 1
    356c:	0e 94 36 0a 	call	0x146c	; 0x146c <netapp_ipconfig>

  /* If byte 1 is 0 we don't have a valid address */
  if (ipconfig.aucIP[3] == 0) return false;
    3570:	8c 81       	ldd	r24, Y+4	; 0x04
    3572:	88 23       	and	r24, r24
    3574:	79 f1       	breq	.+94     	; 0x35d4 <_ZN15Adafruit_CC300012getIPAddressEPmS0_S0_S0_S0_+0xb2>

  memcpy(retip, ipconfig.aucIP, 4);
    3576:	89 81       	ldd	r24, Y+1	; 0x01
    3578:	9a 81       	ldd	r25, Y+2	; 0x02
    357a:	ab 81       	ldd	r26, Y+3	; 0x03
    357c:	bc 81       	ldd	r27, Y+4	; 0x04
    357e:	f6 01       	movw	r30, r12
    3580:	80 83       	st	Z, r24
    3582:	91 83       	std	Z+1, r25	; 0x01
    3584:	a2 83       	std	Z+2, r26	; 0x02
    3586:	b3 83       	std	Z+3, r27	; 0x03
  memcpy(netmask, ipconfig.aucSubnetMask, 4);
    3588:	8d 81       	ldd	r24, Y+5	; 0x05
    358a:	9e 81       	ldd	r25, Y+6	; 0x06
    358c:	af 81       	ldd	r26, Y+7	; 0x07
    358e:	b8 85       	ldd	r27, Y+8	; 0x08
    3590:	f5 01       	movw	r30, r10
    3592:	80 83       	st	Z, r24
    3594:	91 83       	std	Z+1, r25	; 0x01
    3596:	a2 83       	std	Z+2, r26	; 0x02
    3598:	b3 83       	std	Z+3, r27	; 0x03
  memcpy(gateway, ipconfig.aucDefaultGateway, 4);
    359a:	89 85       	ldd	r24, Y+9	; 0x09
    359c:	9a 85       	ldd	r25, Y+10	; 0x0a
    359e:	ab 85       	ldd	r26, Y+11	; 0x0b
    35a0:	bc 85       	ldd	r27, Y+12	; 0x0c
    35a2:	f4 01       	movw	r30, r8
    35a4:	80 83       	st	Z, r24
    35a6:	91 83       	std	Z+1, r25	; 0x01
    35a8:	a2 83       	std	Z+2, r26	; 0x02
    35aa:	b3 83       	std	Z+3, r27	; 0x03
  memcpy(dhcpserv, ipconfig.aucDHCPServer, 4);
    35ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    35ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    35b0:	af 85       	ldd	r26, Y+15	; 0x0f
    35b2:	b8 89       	ldd	r27, Y+16	; 0x10
    35b4:	f8 01       	movw	r30, r16
    35b6:	80 83       	st	Z, r24
    35b8:	91 83       	std	Z+1, r25	; 0x01
    35ba:	a2 83       	std	Z+2, r26	; 0x02
    35bc:	b3 83       	std	Z+3, r27	; 0x03
  memcpy(dnsserv, ipconfig.aucDNSServer, 4);
    35be:	89 89       	ldd	r24, Y+17	; 0x11
    35c0:	9a 89       	ldd	r25, Y+18	; 0x12
    35c2:	ab 89       	ldd	r26, Y+19	; 0x13
    35c4:	bc 89       	ldd	r27, Y+20	; 0x14
    35c6:	f7 01       	movw	r30, r14
    35c8:	80 83       	st	Z, r24
    35ca:	91 83       	std	Z+1, r25	; 0x01
    35cc:	a2 83       	std	Z+2, r26	; 0x02
    35ce:	b3 83       	std	Z+3, r27	; 0x03
    35d0:	81 e0       	ldi	r24, 0x01	; 1
    35d2:	01 c0       	rjmp	.+2      	; 0x35d6 <_ZN15Adafruit_CC300012getIPAddressEPmS0_S0_S0_S0_+0xb4>

  return true;
    35d4:	80 e0       	ldi	r24, 0x00	; 0
}
    35d6:	ea 96       	adiw	r28, 0x3a	; 58
    35d8:	0f b6       	in	r0, 0x3f	; 63
    35da:	f8 94       	cli
    35dc:	de bf       	out	0x3e, r29	; 62
    35de:	0f be       	out	0x3f, r0	; 63
    35e0:	cd bf       	out	0x3d, r28	; 61
    35e2:	cf 91       	pop	r28
    35e4:	df 91       	pop	r29
    35e6:	1f 91       	pop	r17
    35e8:	0f 91       	pop	r16
    35ea:	ff 90       	pop	r15
    35ec:	ef 90       	pop	r14
    35ee:	df 90       	pop	r13
    35f0:	cf 90       	pop	r12
    35f2:	bf 90       	pop	r11
    35f4:	af 90       	pop	r10
    35f6:	9f 90       	pop	r9
    35f8:	8f 90       	pop	r8
    35fa:	08 95       	ret

000035fc <_ZN15Adafruit_CC300013connectSecureEPKcS1_l>:

    @returns  False if an error occured!
*/
/**************************************************************************/
#ifndef CC3000_TINY_DRIVER
bool Adafruit_CC3000::connectSecure(const char *ssid, const char *key, int32_t secMode)
    35fc:	2f 92       	push	r2
    35fe:	3f 92       	push	r3
    3600:	4f 92       	push	r4
    3602:	5f 92       	push	r5
    3604:	6f 92       	push	r6
    3606:	7f 92       	push	r7
    3608:	8f 92       	push	r8
    360a:	9f 92       	push	r9
    360c:	af 92       	push	r10
    360e:	bf 92       	push	r11
    3610:	cf 92       	push	r12
    3612:	df 92       	push	r13
    3614:	ef 92       	push	r14
    3616:	ff 92       	push	r15
    3618:	0f 93       	push	r16
    361a:	1f 93       	push	r17
    361c:	fc 01       	movw	r30, r24
    361e:	d6 2e       	mov	r13, r22
    3620:	c7 2e       	mov	r12, r23
    3622:	34 2e       	mov	r3, r20
    3624:	25 2e       	mov	r2, r21
{
  if (!_initialised) {
    3626:	80 81       	ld	r24, Z
    3628:	88 23       	and	r24, r24
    362a:	09 f4       	brne	.+2      	; 0x362e <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0x32>
    362c:	66 c0       	rjmp	.+204    	; 0x36fa <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0xfe>
    return false;
  }
  
  if ( (secMode < 0) || (secMode > 3)) {
    362e:	28 01       	movw	r4, r16
    3630:	39 01       	movw	r6, r18
    3632:	84 e0       	ldi	r24, 0x04	; 4
    3634:	48 16       	cp	r4, r24
    3636:	51 04       	cpc	r5, r1
    3638:	61 04       	cpc	r6, r1
    363a:	71 04       	cpc	r7, r1
    363c:	08 f0       	brcs	.+2      	; 0x3640 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0x44>
    363e:	5d c0       	rjmp	.+186    	; 0x36fa <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0xfe>
      CC3KPrinter->println(F("Security mode must be between 0 and 3"));
    }
    return false;
  }

  if (strlen(ssid) > MAXSSID) {
    3640:	a6 2f       	mov	r26, r22
    3642:	b7 2f       	mov	r27, r23
    3644:	fd 01       	movw	r30, r26
    3646:	01 90       	ld	r0, Z+
    3648:	00 20       	and	r0, r0
    364a:	e9 f7       	brne	.-6      	; 0x3646 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0x4a>
    364c:	31 97       	sbiw	r30, 0x01	; 1
    364e:	ea 1b       	sub	r30, r26
    3650:	fb 0b       	sbc	r31, r27
    3652:	b1 97       	sbiw	r30, 0x21	; 33
    3654:	08 f0       	brcs	.+2      	; 0x3658 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0x5c>
    3656:	51 c0       	rjmp	.+162    	; 0x36fa <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0xfe>
      CC3KPrinter->println(MAXSSID);
    }
    return false;
  }

  if (strlen(key) > MAXLENGTHKEY) {
    3658:	a4 2f       	mov	r26, r20
    365a:	b5 2f       	mov	r27, r21
    365c:	fd 01       	movw	r30, r26
    365e:	01 90       	ld	r0, Z+
    3660:	00 20       	and	r0, r0
    3662:	e9 f7       	brne	.-6      	; 0x365e <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0x62>
    3664:	31 97       	sbiw	r30, 0x01	; 1
    3666:	ea 1b       	sub	r30, r26
    3668:	fb 0b       	sbc	r31, r27
    366a:	b1 97       	sbiw	r30, 0x21	; 33
    366c:	08 f0       	brcs	.+2      	; 0x3670 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0x74>
    366e:	45 c0       	rjmp	.+138    	; 0x36fa <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0xfe>
      CC3KPrinter->println(MAXLENGTHKEY);
    }
    return false;
  }

  CHECK_SUCCESS(wlan_ioctl_set_connection_policy(0, 0, 0),
    3670:	60 e0       	ldi	r22, 0x00	; 0
    3672:	70 e0       	ldi	r23, 0x00	; 0
    3674:	80 e0       	ldi	r24, 0x00	; 0
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	20 e0       	ldi	r18, 0x00	; 0
    367a:	30 e0       	ldi	r19, 0x00	; 0
    367c:	40 e0       	ldi	r20, 0x00	; 0
    367e:	50 e0       	ldi	r21, 0x00	; 0
    3680:	ee 24       	eor	r14, r14
    3682:	ff 24       	eor	r15, r15
    3684:	87 01       	movw	r16, r14
    3686:	0e 94 2b 13 	call	0x2656	; 0x2656 <wlan_ioctl_set_connection_policy>
    368a:	61 15       	cp	r22, r1
    368c:	71 05       	cpc	r23, r1
    368e:	81 05       	cpc	r24, r1
    3690:	91 05       	cpc	r25, r1
    3692:	99 f5       	brne	.+102    	; 0x36fa <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0xfe>
                "Failed setting the connection policy",
                false);
  delay(500);
    3694:	64 ef       	ldi	r22, 0xF4	; 244
    3696:	71 e0       	ldi	r23, 0x01	; 1
    3698:	80 e0       	ldi	r24, 0x00	; 0
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	0e 94 8e 30 	call	0x611c	; 0x611c <delay>
  CHECK_SUCCESS(wlan_connect(secMode, (char *)ssid, strlen(ssid),
    36a0:	ed 2d       	mov	r30, r13
    36a2:	fc 2d       	mov	r31, r12
    36a4:	df 01       	movw	r26, r30
    36a6:	0d 90       	ld	r0, X+
    36a8:	00 20       	and	r0, r0
    36aa:	e9 f7       	brne	.-6      	; 0x36a6 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0xaa>
    36ac:	8d 01       	movw	r16, r26
    36ae:	01 50       	subi	r16, 0x01	; 1
    36b0:	10 40       	sbci	r17, 0x00	; 0
    36b2:	0e 1b       	sub	r16, r30
    36b4:	1f 0b       	sbc	r17, r31
    36b6:	e3 2d       	mov	r30, r3
    36b8:	f2 2d       	mov	r31, r2
    36ba:	df 01       	movw	r26, r30
    36bc:	0d 90       	ld	r0, X+
    36be:	00 20       	and	r0, r0
    36c0:	e9 f7       	brne	.-6      	; 0x36bc <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0xc0>
    36c2:	4d 01       	movw	r8, r26
    36c4:	08 94       	sec
    36c6:	81 08       	sbc	r8, r1
    36c8:	91 08       	sbc	r9, r1
    36ca:	8e 1a       	sub	r8, r30
    36cc:	9f 0a       	sbc	r9, r31
    36ce:	20 e0       	ldi	r18, 0x00	; 0
    36d0:	30 e0       	ldi	r19, 0x00	; 0
    36d2:	aa 24       	eor	r10, r10
    36d4:	bb 24       	eor	r11, r11
    36d6:	c3 01       	movw	r24, r6
    36d8:	b2 01       	movw	r22, r4
    36da:	4d 2d       	mov	r20, r13
    36dc:	5c 2d       	mov	r21, r12
    36de:	ee 24       	eor	r14, r14
    36e0:	ff 24       	eor	r15, r15
    36e2:	c3 2c       	mov	r12, r3
    36e4:	d2 2c       	mov	r13, r2
    36e6:	0e 94 83 13 	call	0x2706	; 0x2706 <wlan_connect>
    36ea:	20 e0       	ldi	r18, 0x00	; 0
    36ec:	61 15       	cp	r22, r1
    36ee:	71 05       	cpc	r23, r1
    36f0:	81 05       	cpc	r24, r1
    36f2:	91 05       	cpc	r25, r1
    36f4:	19 f4       	brne	.+6      	; 0x36fc <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0x100>
    36f6:	21 e0       	ldi	r18, 0x01	; 1
    36f8:	01 c0       	rjmp	.+2      	; 0x36fc <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0x100>
    36fa:	20 e0       	ldi	r18, 0x00	; 0
                "SSID connection failed", false);

  /* Wait for 'HCI_EVNT_WLAN_UNSOL_CONNECT' in CC3000_UsynchCallback */

  return true;
}
    36fc:	82 2f       	mov	r24, r18
    36fe:	1f 91       	pop	r17
    3700:	0f 91       	pop	r16
    3702:	ff 90       	pop	r15
    3704:	ef 90       	pop	r14
    3706:	df 90       	pop	r13
    3708:	cf 90       	pop	r12
    370a:	bf 90       	pop	r11
    370c:	af 90       	pop	r10
    370e:	9f 90       	pop	r9
    3710:	8f 90       	pop	r8
    3712:	7f 90       	pop	r7
    3714:	6f 90       	pop	r6
    3716:	5f 90       	pop	r5
    3718:	4f 90       	pop	r4
    371a:	3f 90       	pop	r3
    371c:	2f 90       	pop	r2
    371e:	08 95       	ret

00003720 <_ZN15Adafruit_CC300011connectOpenEPKc>:
    @param  ssid      The named of the AP to connect to (max 32 chars)

    @returns  False if an error occured!
*/
/**************************************************************************/
bool Adafruit_CC3000::connectOpen(const char *ssid)
    3720:	8f 92       	push	r8
    3722:	9f 92       	push	r9
    3724:	af 92       	push	r10
    3726:	bf 92       	push	r11
    3728:	cf 92       	push	r12
    372a:	df 92       	push	r13
    372c:	ef 92       	push	r14
    372e:	ff 92       	push	r15
    3730:	0f 93       	push	r16
    3732:	1f 93       	push	r17
    3734:	fc 01       	movw	r30, r24
    3736:	d6 2e       	mov	r13, r22
    3738:	c7 2e       	mov	r12, r23
{
  if (!_initialised) {
    373a:	80 81       	ld	r24, Z
    373c:	88 23       	and	r24, r24
    373e:	e1 f1       	breq	.+120    	; 0x37b8 <_ZN15Adafruit_CC300011connectOpenEPKc+0x98>
    return false;
  }

  #ifndef CC3000_TINY_DRIVER
    CHECK_SUCCESS(wlan_ioctl_set_connection_policy(0, 0, 0),
    3740:	60 e0       	ldi	r22, 0x00	; 0
    3742:	70 e0       	ldi	r23, 0x00	; 0
    3744:	80 e0       	ldi	r24, 0x00	; 0
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	20 e0       	ldi	r18, 0x00	; 0
    374a:	30 e0       	ldi	r19, 0x00	; 0
    374c:	40 e0       	ldi	r20, 0x00	; 0
    374e:	50 e0       	ldi	r21, 0x00	; 0
    3750:	ee 24       	eor	r14, r14
    3752:	ff 24       	eor	r15, r15
    3754:	87 01       	movw	r16, r14
    3756:	0e 94 2b 13 	call	0x2656	; 0x2656 <wlan_ioctl_set_connection_policy>
    375a:	61 15       	cp	r22, r1
    375c:	71 05       	cpc	r23, r1
    375e:	81 05       	cpc	r24, r1
    3760:	91 05       	cpc	r25, r1
    3762:	51 f5       	brne	.+84     	; 0x37b8 <_ZN15Adafruit_CC300011connectOpenEPKc+0x98>
                 "Failed to set connection policy", false);
    delay(500);
    3764:	64 ef       	ldi	r22, 0xF4	; 244
    3766:	71 e0       	ldi	r23, 0x01	; 1
    3768:	80 e0       	ldi	r24, 0x00	; 0
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	0e 94 8e 30 	call	0x611c	; 0x611c <delay>
    CHECK_SUCCESS(wlan_connect(WLAN_SEC_UNSEC,
    3770:	ed 2d       	mov	r30, r13
    3772:	fc 2d       	mov	r31, r12
    3774:	df 01       	movw	r26, r30
    3776:	0d 90       	ld	r0, X+
    3778:	00 20       	and	r0, r0
    377a:	e9 f7       	brne	.-6      	; 0x3776 <_ZN15Adafruit_CC300011connectOpenEPKc+0x56>
    377c:	8d 01       	movw	r16, r26
    377e:	01 50       	subi	r16, 0x01	; 1
    3780:	10 40       	sbci	r17, 0x00	; 0
    3782:	0e 1b       	sub	r16, r30
    3784:	1f 0b       	sbc	r17, r31
    3786:	20 e0       	ldi	r18, 0x00	; 0
    3788:	30 e0       	ldi	r19, 0x00	; 0
    378a:	60 e0       	ldi	r22, 0x00	; 0
    378c:	70 e0       	ldi	r23, 0x00	; 0
    378e:	80 e0       	ldi	r24, 0x00	; 0
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	4d 2d       	mov	r20, r13
    3794:	5c 2d       	mov	r21, r12
    3796:	ee 24       	eor	r14, r14
    3798:	ff 24       	eor	r15, r15
    379a:	cc 24       	eor	r12, r12
    379c:	dd 24       	eor	r13, r13
    379e:	88 24       	eor	r8, r8
    37a0:	99 24       	eor	r9, r9
    37a2:	54 01       	movw	r10, r8
    37a4:	0e 94 83 13 	call	0x2706	; 0x2706 <wlan_connect>
    37a8:	20 e0       	ldi	r18, 0x00	; 0
    37aa:	61 15       	cp	r22, r1
    37ac:	71 05       	cpc	r23, r1
    37ae:	81 05       	cpc	r24, r1
    37b0:	91 05       	cpc	r25, r1
    37b2:	19 f4       	brne	.+6      	; 0x37ba <_ZN15Adafruit_CC300011connectOpenEPKc+0x9a>
    37b4:	21 e0       	ldi	r18, 0x01	; 1
    37b6:	01 c0       	rjmp	.+2      	; 0x37ba <_ZN15Adafruit_CC300011connectOpenEPKc+0x9a>
    37b8:	20 e0       	ldi	r18, 0x00	; 0
  #else
    wlan_connect(ssid, strlen(ssid));
  #endif

  return true;
}
    37ba:	82 2f       	mov	r24, r18
    37bc:	1f 91       	pop	r17
    37be:	0f 91       	pop	r16
    37c0:	ff 90       	pop	r15
    37c2:	ef 90       	pop	r14
    37c4:	df 90       	pop	r13
    37c6:	cf 90       	pop	r12
    37c8:	bf 90       	pop	r11
    37ca:	af 90       	pop	r10
    37cc:	9f 90       	pop	r9
    37ce:	8f 90       	pop	r8
    37d0:	08 95       	ret

000037d2 <_ZN15Adafruit_CC300014printIPdotsRevEm>:
/*!
    @brief  Helper function to display an IP address with dots, printing
            the bytes in reverse order
*/
/**************************************************************************/
void Adafruit_CC3000::printIPdotsRev(uint32_t ip) {
    37d2:	ef 92       	push	r14
    37d4:	ff 92       	push	r15
    37d6:	0f 93       	push	r16
    37d8:	1f 93       	push	r17
    37da:	7a 01       	movw	r14, r20
    37dc:	8b 01       	movw	r16, r22
  if (CC3KPrinter == 0) return;
    37de:	80 91 a2 03 	lds	r24, 0x03A2
    37e2:	90 91 a3 03 	lds	r25, 0x03A3
    37e6:	00 97       	sbiw	r24, 0x00	; 0
    37e8:	09 f4       	brne	.+2      	; 0x37ec <_ZN15Adafruit_CC300014printIPdotsRevEm+0x1a>
    37ea:	40 c0       	rjmp	.+128    	; 0x386c <_ZN15Adafruit_CC300014printIPdotsRevEm+0x9a>
  CC3KPrinter->print((uint8_t)(ip >> 24));
    37ec:	27 2f       	mov	r18, r23
    37ee:	33 27       	eor	r19, r19
    37f0:	44 27       	eor	r20, r20
    37f2:	55 27       	eor	r21, r21
    37f4:	62 2f       	mov	r22, r18
    37f6:	4a e0       	ldi	r20, 0x0A	; 10
    37f8:	50 e0       	ldi	r21, 0x00	; 0
    37fa:	0e 94 77 2d 	call	0x5aee	; 0x5aee <_ZN5Print5printEhi>
  CC3KPrinter->print('.');
    37fe:	80 91 a2 03 	lds	r24, 0x03A2
    3802:	90 91 a3 03 	lds	r25, 0x03A3
    3806:	6e e2       	ldi	r22, 0x2E	; 46
    3808:	0e 94 97 2c 	call	0x592e	; 0x592e <_ZN5Print5printEc>
  CC3KPrinter->print((uint8_t)(ip >> 16));
    380c:	98 01       	movw	r18, r16
    380e:	44 27       	eor	r20, r20
    3810:	55 27       	eor	r21, r21
    3812:	80 91 a2 03 	lds	r24, 0x03A2
    3816:	90 91 a3 03 	lds	r25, 0x03A3
    381a:	62 2f       	mov	r22, r18
    381c:	4a e0       	ldi	r20, 0x0A	; 10
    381e:	50 e0       	ldi	r21, 0x00	; 0
    3820:	0e 94 77 2d 	call	0x5aee	; 0x5aee <_ZN5Print5printEhi>
  CC3KPrinter->print('.');
    3824:	80 91 a2 03 	lds	r24, 0x03A2
    3828:	90 91 a3 03 	lds	r25, 0x03A3
    382c:	6e e2       	ldi	r22, 0x2E	; 46
    382e:	0e 94 97 2c 	call	0x592e	; 0x592e <_ZN5Print5printEc>
  CC3KPrinter->print((uint8_t)(ip >> 8));
    3832:	55 27       	eor	r21, r21
    3834:	41 2f       	mov	r20, r17
    3836:	30 2f       	mov	r19, r16
    3838:	2f 2d       	mov	r18, r15
    383a:	80 91 a2 03 	lds	r24, 0x03A2
    383e:	90 91 a3 03 	lds	r25, 0x03A3
    3842:	62 2f       	mov	r22, r18
    3844:	4a e0       	ldi	r20, 0x0A	; 10
    3846:	50 e0       	ldi	r21, 0x00	; 0
    3848:	0e 94 77 2d 	call	0x5aee	; 0x5aee <_ZN5Print5printEhi>
  CC3KPrinter->print('.');
    384c:	80 91 a2 03 	lds	r24, 0x03A2
    3850:	90 91 a3 03 	lds	r25, 0x03A3
    3854:	6e e2       	ldi	r22, 0x2E	; 46
    3856:	0e 94 97 2c 	call	0x592e	; 0x592e <_ZN5Print5printEc>
  CC3KPrinter->print((uint8_t)(ip));  
    385a:	80 91 a2 03 	lds	r24, 0x03A2
    385e:	90 91 a3 03 	lds	r25, 0x03A3
    3862:	6e 2d       	mov	r22, r14
    3864:	4a e0       	ldi	r20, 0x0A	; 10
    3866:	50 e0       	ldi	r21, 0x00	; 0
    3868:	0e 94 77 2d 	call	0x5aee	; 0x5aee <_ZN5Print5printEhi>
}
    386c:	1f 91       	pop	r17
    386e:	0f 91       	pop	r16
    3870:	ff 90       	pop	r15
    3872:	ef 90       	pop	r14
    3874:	08 95       	ret

00003876 <_ZN15Adafruit_CC30005beginEhbPKc>:
              that were stored on the device from the SmartConfig process,
              otherwise false to erase existing profiles and start a
              clean connection
*/
/**************************************************************************/
bool Adafruit_CC3000::begin(uint8_t patchReq, bool useSmartConfigData, const char *_deviceName)
    3876:	6f 92       	push	r6
    3878:	7f 92       	push	r7
    387a:	8f 92       	push	r8
    387c:	9f 92       	push	r9
    387e:	af 92       	push	r10
    3880:	bf 92       	push	r11
    3882:	cf 92       	push	r12
    3884:	df 92       	push	r13
    3886:	ef 92       	push	r14
    3888:	ff 92       	push	r15
    388a:	0f 93       	push	r16
    388c:	1f 93       	push	r17
    388e:	cf 93       	push	r28
    3890:	df 93       	push	r29
    3892:	ec 01       	movw	r28, r24
    3894:	96 2e       	mov	r9, r22
    3896:	84 2e       	mov	r8, r20
    3898:	72 2e       	mov	r7, r18
    389a:	63 2e       	mov	r6, r19
{
  if (_initialised) return true;
    389c:	88 81       	ld	r24, Y
    389e:	88 23       	and	r24, r24
    38a0:	09 f0       	breq	.+2      	; 0x38a4 <_ZN15Adafruit_CC30005beginEhbPKc+0x2e>
    38a2:	8e c0       	rjmp	.+284    	; 0x39c0 <_ZN15Adafruit_CC30005beginEhbPKc+0x14a>
  // digitalPinToInterrupt macro is supported on Arduino 1.0.6+ and 1.5.6+
  // returns NOT_AN_INTERRUPT (-1 = 0xFF) if g_irqPin is not mapped to an INT
  #ifndef NOT_AN_INTERRUPT
    #define NOT_AN_INTERRUPT (-1)
  #endif
  g_IRQnum = digitalPinToInterrupt(g_irqPin);
    38a4:	80 91 68 03 	lds	r24, 0x0368
    38a8:	82 30       	cpi	r24, 0x02	; 2
    38aa:	11 f4       	brne	.+4      	; 0x38b0 <_ZN15Adafruit_CC30005beginEhbPKc+0x3a>
    38ac:	80 e0       	ldi	r24, 0x00	; 0
    38ae:	05 c0       	rjmp	.+10     	; 0x38ba <_ZN15Adafruit_CC30005beginEhbPKc+0x44>
    38b0:	83 30       	cpi	r24, 0x03	; 3
    38b2:	11 f0       	breq	.+4      	; 0x38b8 <_ZN15Adafruit_CC30005beginEhbPKc+0x42>
    38b4:	8f ef       	ldi	r24, 0xFF	; 255
    38b6:	01 c0       	rjmp	.+2      	; 0x38ba <_ZN15Adafruit_CC30005beginEhbPKc+0x44>
    38b8:	81 e0       	ldi	r24, 0x01	; 1
    38ba:	80 93 6a 03 	sts	0x036A, r24
  #else
  g_IRQnum = g_irqPin;
  // (almost) every single pin on Xmega supports interrupt
  #endif

  init_spi();
    38be:	0e 94 cd 24 	call	0x499a	; 0x499a <_Z8init_spiv>
  wlan_init(CC3000_UsynchCallback,
            sendWLFWPatch, sendDriverPatch, sendBootLoaderPatch,
            ReadWlanInterruptPin,
            WlanInterruptEnable,
            WlanInterruptDisable,
            WriteWlanPin);
    38c2:	86 e1       	ldi	r24, 0x16	; 22
    38c4:	9a e1       	ldi	r25, 0x1A	; 26
    38c6:	63 ed       	ldi	r22, 0xD3	; 211
    38c8:	71 e2       	ldi	r23, 0x21	; 33
    38ca:	43 ec       	ldi	r20, 0xC3	; 195
    38cc:	51 e2       	ldi	r21, 0x21	; 33
    38ce:	2b ec       	ldi	r18, 0xCB	; 203
    38d0:	31 e2       	ldi	r19, 0x21	; 33
    38d2:	0b ed       	ldi	r16, 0xDB	; 219
    38d4:	11 e2       	ldi	r17, 0x21	; 33
    38d6:	b9 e3       	ldi	r27, 0x39	; 57
    38d8:	eb 2e       	mov	r14, r27
    38da:	b2 e2       	ldi	r27, 0x22	; 34
    38dc:	fb 2e       	mov	r15, r27
    38de:	a3 ef       	ldi	r26, 0xF3	; 243
    38e0:	ca 2e       	mov	r12, r26
    38e2:	a1 e2       	ldi	r26, 0x21	; 33
    38e4:	da 2e       	mov	r13, r26
    38e6:	f7 ee       	ldi	r31, 0xE7	; 231
    38e8:	af 2e       	mov	r10, r31
    38ea:	f1 e2       	ldi	r31, 0x21	; 33
    38ec:	bf 2e       	mov	r11, r31
    38ee:	0e 94 db 11 	call	0x23b6	; 0x23b6 <wlan_init>
  DEBUGPRINT_F("start\n\r");

  wlan_start(patchReq);
    38f2:	89 2d       	mov	r24, r9
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <wlan_start>
  
  DEBUGPRINT_F("ioctl\n\r");
  // Check if we should erase previous stored connection details
  // (most likely written with data from the SmartConfig app)
  if (!useSmartConfigData)
    38fa:	88 20       	and	r8, r8
    38fc:	a1 f4       	brne	.+40     	; 0x3926 <_ZN15Adafruit_CC30005beginEhbPKc+0xb0>
  {
    // Manual connection only (no auto, profiles, etc.)
    wlan_ioctl_set_connection_policy(0, 0, 0);
    38fe:	60 e0       	ldi	r22, 0x00	; 0
    3900:	70 e0       	ldi	r23, 0x00	; 0
    3902:	80 e0       	ldi	r24, 0x00	; 0
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	20 e0       	ldi	r18, 0x00	; 0
    3908:	30 e0       	ldi	r19, 0x00	; 0
    390a:	40 e0       	ldi	r20, 0x00	; 0
    390c:	50 e0       	ldi	r21, 0x00	; 0
    390e:	ee 24       	eor	r14, r14
    3910:	ff 24       	eor	r15, r15
    3912:	87 01       	movw	r16, r14
    3914:	0e 94 2b 13 	call	0x2656	; 0x2656 <wlan_ioctl_set_connection_policy>
    // Delete previous profiles from memory
    wlan_ioctl_del_profile(255);
    3918:	6f ef       	ldi	r22, 0xFF	; 255
    391a:	70 e0       	ldi	r23, 0x00	; 0
    391c:	80 e0       	ldi	r24, 0x00	; 0
    391e:	90 e0       	ldi	r25, 0x00	; 0
    3920:	0e 94 f7 12 	call	0x25ee	; 0x25ee <wlan_ioctl_del_profile>
    3924:	0f c0       	rjmp	.+30     	; 0x3944 <_ZN15Adafruit_CC30005beginEhbPKc+0xce>
    
    // Fast Connect - the CC3000 device tries to reconnect to the last AP connected to:
    // wlan_ioctl_set_connection_policy(0, 1, 0)

    // Use Profiles - the CC3000 device tries to connect to an AP from profiles:
    wlan_ioctl_set_connection_policy(0, 0, 1);
    3926:	60 e0       	ldi	r22, 0x00	; 0
    3928:	70 e0       	ldi	r23, 0x00	; 0
    392a:	80 e0       	ldi	r24, 0x00	; 0
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	20 e0       	ldi	r18, 0x00	; 0
    3930:	30 e0       	ldi	r19, 0x00	; 0
    3932:	40 e0       	ldi	r20, 0x00	; 0
    3934:	50 e0       	ldi	r21, 0x00	; 0
    3936:	e1 e0       	ldi	r30, 0x01	; 1
    3938:	ee 2e       	mov	r14, r30
    393a:	f1 2c       	mov	r15, r1
    393c:	01 2d       	mov	r16, r1
    393e:	11 2d       	mov	r17, r1
    3940:	0e 94 2b 13 	call	0x2656	; 0x2656 <wlan_ioctl_set_connection_policy>
  }

  CHECK_SUCCESS(
    3944:	64 e0       	ldi	r22, 0x04	; 4
    3946:	72 e8       	ldi	r23, 0x82	; 130
    3948:	80 e0       	ldi	r24, 0x00	; 0
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	0e 94 0f 12 	call	0x241e	; 0x241e <wlan_set_event_mask>
    3950:	61 15       	cp	r22, r1
    3952:	71 05       	cpc	r23, r1
    3954:	81 05       	cpc	r24, r1
    3956:	91 05       	cpc	r25, r1
    3958:	a9 f5       	brne	.+106    	; 0x39c4 <_ZN15Adafruit_CC30005beginEhbPKc+0x14e>
                        //HCI_EVNT_BSD_TCP_CLOSE_WAIT |
                        //HCI_EVNT_WLAN_TX_COMPLETE |
                        HCI_EVNT_WLAN_KEEPALIVE),
                        "WLAN Set Event Mask FAIL", false);

  _initialised = true;
    395a:	81 e0       	ldi	r24, 0x01	; 1
    395c:	88 83       	st	Y, r24

  // Wait for re-connection if we're using SmartConfig data
  if (useSmartConfigData)
    395e:	88 20       	and	r8, r8
    3960:	79 f1       	breq	.+94     	; 0x39c0 <_ZN15Adafruit_CC30005beginEhbPKc+0x14a>
    3962:	00 e0       	ldi	r16, 0x00	; 0
    3964:	10 e0       	ldi	r17, 0x00	; 0
    3966:	0e c0       	rjmp	.+28     	; 0x3984 <_ZN15Adafruit_CC30005beginEhbPKc+0x10e>
  {
    // Wait for a connection
    uint32_t timeout = 0;
    while(!cc3000Bitset.test(CC3000BitSet::IsConnected))
    {
      cc3k_int_poll();
    3968:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <cc3k_int_poll>
    396c:	0f 5f       	subi	r16, 0xFF	; 255
    396e:	1f 4f       	sbci	r17, 0xFF	; 255
      if(timeout > WLAN_CONNECT_TIMEOUT)
    3970:	83 e0       	ldi	r24, 0x03	; 3
    3972:	0a 3e       	cpi	r16, 0xEA	; 234
    3974:	18 07       	cpc	r17, r24
    3976:	31 f1       	breq	.+76     	; 0x39c4 <_ZN15Adafruit_CC30005beginEhbPKc+0x14e>
          CC3KPrinter->println(F("Timed out using SmartConfig data"));
        }
        return false;
      }
      timeout += 10;
      delay(10);
    3978:	6a e0       	ldi	r22, 0x0A	; 10
    397a:	70 e0       	ldi	r23, 0x00	; 0
    397c:	80 e0       	ldi	r24, 0x00	; 0
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	0e 94 8e 30 	call	0x611c	; 0x611c <delay>
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    3984:	80 91 a1 03 	lds	r24, 0x03A1
  // Wait for re-connection if we're using SmartConfig data
  if (useSmartConfigData)
  {
    // Wait for a connection
    uint32_t timeout = 0;
    while(!cc3000Bitset.test(CC3000BitSet::IsConnected))
    3988:	81 ff       	sbrs	r24, 1
    398a:	ee cf       	rjmp	.-36     	; 0x3968 <_ZN15Adafruit_CC30005beginEhbPKc+0xf2>
      }
      timeout += 10;
      delay(10);
    }
    
    delay(1000);  
    398c:	68 ee       	ldi	r22, 0xE8	; 232
    398e:	73 e0       	ldi	r23, 0x03	; 3
    3990:	80 e0       	ldi	r24, 0x00	; 0
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	0e 94 8e 30 	call	0x611c	; 0x611c <delay>
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    3998:	80 91 a1 03 	lds	r24, 0x03A1
      timeout += 10;
      delay(10);
    }
    
    delay(1000);  
    if (cc3000Bitset.test(CC3000BitSet::HasDHCP))
    399c:	82 ff       	sbrs	r24, 2
    399e:	10 c0       	rjmp	.+32     	; 0x39c0 <_ZN15Adafruit_CC30005beginEhbPKc+0x14a>
    {
      mdnsAdvertiser(1, (char *) _deviceName, strlen(_deviceName));
    39a0:	e7 2d       	mov	r30, r7
    39a2:	f6 2d       	mov	r31, r6
    39a4:	df 01       	movw	r26, r30
    39a6:	0d 90       	ld	r0, X+
    39a8:	00 20       	and	r0, r0
    39aa:	e9 f7       	brne	.-6      	; 0x39a6 <_ZN15Adafruit_CC30005beginEhbPKc+0x130>
    39ac:	11 97       	sbiw	r26, 0x01	; 1
    39ae:	ae 1b       	sub	r26, r30
    39b0:	bf 0b       	sbc	r27, r31
    39b2:	81 e0       	ldi	r24, 0x01	; 1
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	67 2d       	mov	r22, r7
    39b8:	76 2d       	mov	r23, r6
    39ba:	ad 01       	movw	r20, r26
    39bc:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <mdnsAdvertiser>
    39c0:	81 e0       	ldi	r24, 0x01	; 1
    39c2:	01 c0       	rjmp	.+2      	; 0x39c6 <_ZN15Adafruit_CC30005beginEhbPKc+0x150>
    39c4:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
    
  return true;
}
    39c6:	df 91       	pop	r29
    39c8:	cf 91       	pop	r28
    39ca:	1f 91       	pop	r17
    39cc:	0f 91       	pop	r16
    39ce:	ff 90       	pop	r15
    39d0:	ef 90       	pop	r14
    39d2:	df 90       	pop	r13
    39d4:	cf 90       	pop	r12
    39d6:	bf 90       	pop	r11
    39d8:	af 90       	pop	r10
    39da:	9f 90       	pop	r9
    39dc:	8f 90       	pop	r8
    39de:	7f 90       	pop	r7
    39e0:	6f 90       	pop	r6
    39e2:	08 95       	ret

000039e4 <_ZN15Adafruit_CC30009scanSSIDsEm>:

    @returns  False if an error occured!
*/
/**************************************************************************/
#ifndef CC3000_TINY_DRIVER
bool Adafruit_CC3000::scanSSIDs(uint32_t time)
    39e4:	af 92       	push	r10
    39e6:	bf 92       	push	r11
    39e8:	cf 92       	push	r12
    39ea:	df 92       	push	r13
    39ec:	ef 92       	push	r14
    39ee:	ff 92       	push	r15
    39f0:	0f 93       	push	r16
    39f2:	1f 93       	push	r17
    39f4:	df 93       	push	r29
    39f6:	cf 93       	push	r28
    39f8:	cd b7       	in	r28, 0x3d	; 61
    39fa:	de b7       	in	r29, 0x3e	; 62
    39fc:	c0 54       	subi	r28, 0x40	; 64
    39fe:	d0 40       	sbci	r29, 0x00	; 0
    3a00:	0f b6       	in	r0, 0x3f	; 63
    3a02:	f8 94       	cli
    3a04:	de bf       	out	0x3e, r29	; 62
    3a06:	0f be       	out	0x3f, r0	; 63
    3a08:	cd bf       	out	0x3d, r28	; 61
    3a0a:	9c 01       	movw	r18, r24
{
  const unsigned long intervalTime[16] = { 2000, 2000, 2000, 2000,  2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000 };
    3a0c:	de 01       	movw	r26, r28
    3a0e:	11 96       	adiw	r26, 0x01	; 1
    3a10:	ec eb       	ldi	r30, 0xBC	; 188
    3a12:	f2 e0       	ldi	r31, 0x02	; 2
    3a14:	80 e4       	ldi	r24, 0x40	; 64
    3a16:	01 90       	ld	r0, Z+
    3a18:	0d 92       	st	X+, r0
    3a1a:	81 50       	subi	r24, 0x01	; 1
    3a1c:	e1 f7       	brne	.-8      	; 0x3a16 <_ZN15Adafruit_CC30009scanSSIDsEm+0x32>

  if (!_initialised)
    3a1e:	d9 01       	movw	r26, r18
    3a20:	8c 91       	ld	r24, X
    3a22:	88 23       	and	r24, r24
    3a24:	11 f4       	brne	.+4      	; 0x3a2a <_ZN15Adafruit_CC30009scanSSIDsEm+0x46>
    3a26:	20 e0       	ldi	r18, 0x00	; 0
    3a28:	4e c0       	rjmp	.+156    	; 0x3ac6 <_ZN15Adafruit_CC30009scanSSIDsEm+0xe2>
      CC3KPrinter->println(F("Started AP/SSID scan\n\r"));
    }
  }

  // Set  SSID Scan params to includes channels above 11 
  CHECK_SUCCESS(
    3a2a:	ed b7       	in	r30, 0x3d	; 61
    3a2c:	fe b7       	in	r31, 0x3e	; 62
    3a2e:	72 97       	sbiw	r30, 0x12	; 18
    3a30:	0f b6       	in	r0, 0x3f	; 63
    3a32:	f8 94       	cli
    3a34:	fe bf       	out	0x3e, r31	; 62
    3a36:	0f be       	out	0x3f, r0	; 63
    3a38:	ed bf       	out	0x3d, r30	; 61
    3a3a:	31 96       	adiw	r30, 0x01	; 1
    3a3c:	0f ef       	ldi	r16, 0xFF	; 255
    3a3e:	1f e1       	ldi	r17, 0x1F	; 31
    3a40:	20 e0       	ldi	r18, 0x00	; 0
    3a42:	30 e0       	ldi	r19, 0x00	; 0
    3a44:	ad b7       	in	r26, 0x3d	; 61
    3a46:	be b7       	in	r27, 0x3e	; 62
    3a48:	11 96       	adiw	r26, 0x01	; 1
    3a4a:	0d 93       	st	X+, r16
    3a4c:	1d 93       	st	X+, r17
    3a4e:	2d 93       	st	X+, r18
    3a50:	3c 93       	st	X, r19
    3a52:	14 97       	sbiw	r26, 0x04	; 4
    3a54:	88 e8       	ldi	r24, 0x88	; 136
    3a56:	9f ef       	ldi	r25, 0xFF	; 255
    3a58:	af ef       	ldi	r26, 0xFF	; 255
    3a5a:	bf ef       	ldi	r27, 0xFF	; 255
    3a5c:	84 83       	std	Z+4, r24	; 0x04
    3a5e:	95 83       	std	Z+5, r25	; 0x05
    3a60:	a6 83       	std	Z+6, r26	; 0x06
    3a62:	b7 83       	std	Z+7, r27	; 0x07
    3a64:	10 86       	std	Z+8, r1	; 0x08
    3a66:	11 86       	std	Z+9, r1	; 0x09
    3a68:	12 86       	std	Z+10, r1	; 0x0a
    3a6a:	13 86       	std	Z+11, r1	; 0x0b
    3a6c:	8c e2       	ldi	r24, 0x2C	; 44
    3a6e:	91 e0       	ldi	r25, 0x01	; 1
    3a70:	a0 e0       	ldi	r26, 0x00	; 0
    3a72:	b0 e0       	ldi	r27, 0x00	; 0
    3a74:	84 87       	std	Z+12, r24	; 0x0c
    3a76:	95 87       	std	Z+13, r25	; 0x0d
    3a78:	a6 87       	std	Z+14, r26	; 0x0e
    3a7a:	b7 87       	std	Z+15, r27	; 0x0f
    3a7c:	ce 01       	movw	r24, r28
    3a7e:	01 96       	adiw	r24, 0x01	; 1
    3a80:	91 8b       	std	Z+17, r25	; 0x11
    3a82:	80 8b       	std	Z+16, r24	; 0x10
    3a84:	cb 01       	movw	r24, r22
    3a86:	ba 01       	movw	r22, r20
    3a88:	24 e1       	ldi	r18, 0x14	; 20
    3a8a:	30 e0       	ldi	r19, 0x00	; 0
    3a8c:	40 e0       	ldi	r20, 0x00	; 0
    3a8e:	50 e0       	ldi	r21, 0x00	; 0
    3a90:	f4 e6       	ldi	r31, 0x64	; 100
    3a92:	ef 2e       	mov	r14, r31
    3a94:	f1 2c       	mov	r15, r1
    3a96:	01 2d       	mov	r16, r1
    3a98:	11 2d       	mov	r17, r1
    3a9a:	e5 e0       	ldi	r30, 0x05	; 5
    3a9c:	ae 2e       	mov	r10, r30
    3a9e:	b1 2c       	mov	r11, r1
    3aa0:	c1 2c       	mov	r12, r1
    3aa2:	d1 2c       	mov	r13, r1
    3aa4:	0e 94 68 12 	call	0x24d0	; 0x24d0 <wlan_ioctl_set_scan_params>
    3aa8:	20 e0       	ldi	r18, 0x00	; 0
    3aaa:	ed b7       	in	r30, 0x3d	; 61
    3aac:	fe b7       	in	r31, 0x3e	; 62
    3aae:	72 96       	adiw	r30, 0x12	; 18
    3ab0:	0f b6       	in	r0, 0x3f	; 63
    3ab2:	f8 94       	cli
    3ab4:	fe bf       	out	0x3e, r31	; 62
    3ab6:	0f be       	out	0x3f, r0	; 63
    3ab8:	ed bf       	out	0x3d, r30	; 61
    3aba:	61 15       	cp	r22, r1
    3abc:	71 05       	cpc	r23, r1
    3abe:	81 05       	cpc	r24, r1
    3ac0:	91 05       	cpc	r25, r1
    3ac2:	09 f4       	brne	.+2      	; 0x3ac6 <_ZN15Adafruit_CC30009scanSSIDsEm+0xe2>
    3ac4:	21 e0       	ldi	r18, 0x01	; 1
      wlan_ioctl_set_scan_params(time, 20, 100, 5, 0x1FFF, -120, 0, 300,
          (unsigned long * ) &intervalTime),
          "Failed setting params for SSID scan", false);

  return true;
}
    3ac6:	82 2f       	mov	r24, r18
    3ac8:	c0 5c       	subi	r28, 0xC0	; 192
    3aca:	df 4f       	sbci	r29, 0xFF	; 255
    3acc:	0f b6       	in	r0, 0x3f	; 63
    3ace:	f8 94       	cli
    3ad0:	de bf       	out	0x3e, r29	; 62
    3ad2:	0f be       	out	0x3f, r0	; 63
    3ad4:	cd bf       	out	0x3d, r28	; 61
    3ad6:	cf 91       	pop	r28
    3ad8:	df 91       	pop	r29
    3ada:	1f 91       	pop	r17
    3adc:	0f 91       	pop	r16
    3ade:	ff 90       	pop	r15
    3ae0:	ef 90       	pop	r14
    3ae2:	df 90       	pop	r13
    3ae4:	cf 90       	pop	r12
    3ae6:	bf 90       	pop	r11
    3ae8:	af 90       	pop	r10
    3aea:	08 95       	ret

00003aec <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh>:
  return true;
}
#endif

// Connect with timeout
bool Adafruit_CC3000::connectToAP(const char *ssid, const char *key, uint8_t secmode, uint8_t attempts) {
    3aec:	5f 92       	push	r5
    3aee:	6f 92       	push	r6
    3af0:	7f 92       	push	r7
    3af2:	8f 92       	push	r8
    3af4:	9f 92       	push	r9
    3af6:	af 92       	push	r10
    3af8:	bf 92       	push	r11
    3afa:	cf 92       	push	r12
    3afc:	df 92       	push	r13
    3afe:	ef 92       	push	r14
    3b00:	ff 92       	push	r15
    3b02:	0f 93       	push	r16
    3b04:	1f 93       	push	r17
    3b06:	cf 93       	push	r28
    3b08:	df 93       	push	r29
    3b0a:	ec 01       	movw	r28, r24
    3b0c:	3b 01       	movw	r6, r22
    3b0e:	4a 01       	movw	r8, r20
    3b10:	52 2e       	mov	r5, r18
    3b12:	a0 2e       	mov	r10, r16
  if (!_initialised) {
    3b14:	88 81       	ld	r24, Y
    3b16:	88 23       	and	r24, r24
    3b18:	09 f4       	brne	.+2      	; 0x3b1c <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0x30>
    3b1a:	52 c0       	rjmp	.+164    	; 0x3bc0 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0xd4>
    3b1c:	b0 2e       	mov	r11, r16
      }
    } else {
      /* NOTE: Secure connections are not available in 'Tiny' mode! */
#ifndef CC3000_TINY_DRIVER
      /* Connect to a secure network using WPA2, etc */
      if (! connectSecure(ssid, key, secmode)) {
    3b1e:	c2 2e       	mov	r12, r18
    3b20:	dd 24       	eor	r13, r13
    3b22:	ee 24       	eor	r14, r14
    3b24:	ff 24       	eor	r15, r15
  // If attempts is zero interpret that as no limit on number of retries.
  bool retryForever = attempts == 0;

  do {
    // Stop if the max number of attempts have been tried.
    if (!retryForever) {
    3b26:	aa 20       	and	r10, r10
    3b28:	51 f0       	breq	.+20     	; 0x3b3e <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0x52>
      if (attempts == 0) {
    3b2a:	bb 20       	and	r11, r11
    3b2c:	39 f4       	brne	.+14     	; 0x3b3c <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0x50>
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    3b2e:	80 91 a1 03 	lds	r24, 0x03A1
    3b32:	90 e0       	ldi	r25, 0x00	; 0
    3b34:	96 95       	lsr	r25
    3b36:	87 95       	ror	r24
    3b38:	81 70       	andi	r24, 0x01	; 1
    3b3a:	42 c0       	rjmp	.+132    	; 0x3bc0 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0xd4>
    // Stop if the max number of attempts have been tried.
    if (!retryForever) {
      if (attempts == 0) {
        return checkConnected();
      }
      attempts -= 1;
    3b3c:	ba 94       	dec	r11
    }

    cc3k_int_poll();
    3b3e:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <cc3k_int_poll>
    /* MEME: not sure why this is absolutely required but the cc3k freaks
       if you dont. maybe bootup delay? */
    // Setup a 4 second SSID scan
    scanSSIDs(4000);
    3b42:	ce 01       	movw	r24, r28
    3b44:	40 ea       	ldi	r20, 0xA0	; 160
    3b46:	5f e0       	ldi	r21, 0x0F	; 15
    3b48:	60 e0       	ldi	r22, 0x00	; 0
    3b4a:	70 e0       	ldi	r23, 0x00	; 0
    3b4c:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <_ZN15Adafruit_CC30009scanSSIDsEm>
    // Wait for results
    delay(4500);
    3b50:	64 e9       	ldi	r22, 0x94	; 148
    3b52:	71 e1       	ldi	r23, 0x11	; 17
    3b54:	80 e0       	ldi	r24, 0x00	; 0
    3b56:	90 e0       	ldi	r25, 0x00	; 0
    3b58:	0e 94 8e 30 	call	0x611c	; 0x611c <delay>
    scanSSIDs(0);
    3b5c:	ce 01       	movw	r24, r28
    3b5e:	40 e0       	ldi	r20, 0x00	; 0
    3b60:	50 e0       	ldi	r21, 0x00	; 0
    3b62:	60 e0       	ldi	r22, 0x00	; 0
    3b64:	70 e0       	ldi	r23, 0x00	; 0
    3b66:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <_ZN15Adafruit_CC30009scanSSIDsEm>
    CHECK_PRINTER {
      CC3KPrinter->print(F("\n\rConnecting to ")); 
      CC3KPrinter->print(ssid);
      CC3KPrinter->print(F("..."));
    }
    if ((secmode == 0) || (strlen(key) == 0)) {
    3b6a:	55 20       	and	r5, r5
    3b6c:	21 f0       	breq	.+8      	; 0x3b76 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0x8a>
    3b6e:	f4 01       	movw	r30, r8
    3b70:	80 81       	ld	r24, Z
    3b72:	88 23       	and	r24, r24
    3b74:	49 f4       	brne	.+18     	; 0x3b88 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0x9c>
      /* Connect to an unsecured network */
      if (! connectOpen(ssid)) {
    3b76:	ce 01       	movw	r24, r28
    3b78:	b3 01       	movw	r22, r6
    3b7a:	0e 94 90 1b 	call	0x3720	; 0x3720 <_ZN15Adafruit_CC300011connectOpenEPKc>
    3b7e:	88 23       	and	r24, r24
    3b80:	d1 f0       	breq	.+52     	; 0x3bb6 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0xca>
        CHECK_PRINTER {
          CC3KPrinter->println(F("Failed!"));
        }
        continue;
    3b82:	00 e1       	ldi	r16, 0x10	; 16
    3b84:	17 e2       	ldi	r17, 0x27	; 39
    3b86:	08 c0       	rjmp	.+16     	; 0x3b98 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0xac>
      }
    } else {
      /* NOTE: Secure connections are not available in 'Tiny' mode! */
#ifndef CC3000_TINY_DRIVER
      /* Connect to a secure network using WPA2, etc */
      if (! connectSecure(ssid, key, secmode)) {
    3b88:	ce 01       	movw	r24, r28
    3b8a:	b3 01       	movw	r22, r6
    3b8c:	a4 01       	movw	r20, r8
    3b8e:	97 01       	movw	r18, r14
    3b90:	86 01       	movw	r16, r12
    3b92:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <_ZN15Adafruit_CC300013connectSecureEPKcS1_l>
    3b96:	f3 cf       	rjmp	.-26     	; 0x3b7e <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0x92>
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    3b98:	80 91 a1 03 	lds	r24, 0x03A1

    /* Wait around a bit for the async connected signal to arrive or timeout */
    CHECK_PRINTER {
      CC3KPrinter->print(F("Waiting to connect..."));
    }
    while ((timer > 0) && !checkConnected())
    3b9c:	81 fd       	sbrc	r24, 1
    3b9e:	0b c0       	rjmp	.+22     	; 0x3bb6 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0xca>
    {
      cc3k_int_poll();
    3ba0:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <cc3k_int_poll>
      delay(10);
    3ba4:	6a e0       	ldi	r22, 0x0A	; 10
    3ba6:	70 e0       	ldi	r23, 0x00	; 0
    3ba8:	80 e0       	ldi	r24, 0x00	; 0
    3baa:	90 e0       	ldi	r25, 0x00	; 0
    3bac:	0e 94 8e 30 	call	0x611c	; 0x611c <delay>
      timer -= 10;
    3bb0:	0a 50       	subi	r16, 0x0A	; 10
    3bb2:	10 40       	sbci	r17, 0x00	; 0

    /* Wait around a bit for the async connected signal to arrive or timeout */
    CHECK_PRINTER {
      CC3KPrinter->print(F("Waiting to connect..."));
    }
    while ((timer > 0) && !checkConnected())
    3bb4:	89 f7       	brne	.-30     	; 0x3b98 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0xac>
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    3bb6:	80 91 a1 03 	lds	r24, 0x03A1
  int16_t timer;

  // If attempts is zero interpret that as no limit on number of retries.
  bool retryForever = attempts == 0;

  do {
    3bba:	81 ff       	sbrs	r24, 1
    3bbc:	b4 cf       	rjmp	.-152    	; 0x3b26 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0x3a>
    3bbe:	81 e0       	ldi	r24, 0x01	; 1
      }
    }
  } while (!checkConnected());

  return true;
}
    3bc0:	df 91       	pop	r29
    3bc2:	cf 91       	pop	r28
    3bc4:	1f 91       	pop	r17
    3bc6:	0f 91       	pop	r16
    3bc8:	ff 90       	pop	r15
    3bca:	ef 90       	pop	r14
    3bcc:	df 90       	pop	r13
    3bce:	cf 90       	pop	r12
    3bd0:	bf 90       	pop	r11
    3bd2:	af 90       	pop	r10
    3bd4:	9f 90       	pop	r9
    3bd6:	8f 90       	pop	r8
    3bd8:	7f 90       	pop	r7
    3bda:	6f 90       	pop	r6
    3bdc:	5f 90       	pop	r5
    3bde:	08 95       	ret

00003be0 <_ZN25Adafruit_CC3000_ClientRefcvbEv>:
  : _client(client) 
{ }

// Return true if the referenced client is connected.  This is provided for
// compatibility with Ethernet library code.
Adafruit_CC3000_ClientRef::operator bool() {
    3be0:	fc 01       	movw	r30, r24
  return connected();
    3be2:	a0 81       	ld	r26, Z
    3be4:	b1 81       	ldd	r27, Z+1	; 0x01
    3be6:	54 96       	adiw	r26, 0x14	; 20
    3be8:	2d 91       	ld	r18, X+
    3bea:	3c 91       	ld	r19, X
    3bec:	55 97       	sbiw	r26, 0x15	; 21
    3bee:	f9 01       	movw	r30, r18
    3bf0:	09 95       	icall
    3bf2:	81 11       	cpse	r24, r1
    3bf4:	81 e0       	ldi	r24, 0x01	; 1
}
    3bf6:	08 95       	ret

00003bf8 <_ZN25Adafruit_CC3000_ClientRef7connectE9IPAddressj>:
// Below are wrappers around the public client functions.  These hide the fact that users
// are dealing with a reference to a client instance and allow code to be written using
// value semantics like in the Ethernet library.
int Adafruit_CC3000_ClientRef::connect(IPAddress ip, uint16_t port) {
    3bf8:	0f 93       	push	r16
    3bfa:	1f 93       	push	r17
    3bfc:	df 93       	push	r29
    3bfe:	cf 93       	push	r28
    3c00:	00 d0       	rcall	.+0      	; 0x3c02 <_ZN25Adafruit_CC3000_ClientRef7connectE9IPAddressj+0xa>
    3c02:	00 d0       	rcall	.+0      	; 0x3c04 <_ZN25Adafruit_CC3000_ClientRef7connectE9IPAddressj+0xc>
    3c04:	00 d0       	rcall	.+0      	; 0x3c06 <_ZN25Adafruit_CC3000_ClientRef7connectE9IPAddressj+0xe>
    3c06:	cd b7       	in	r28, 0x3d	; 61
    3c08:	de b7       	in	r29, 0x3e	; 62
    3c0a:	db 01       	movw	r26, r22
  HANDLE_NULL(_client, false);
    3c0c:	fc 01       	movw	r30, r24
    3c0e:	24 85       	ldd	r18, Z+12	; 0x0c
    3c10:	35 85       	ldd	r19, Z+13	; 0x0d
    3c12:	21 15       	cp	r18, r1
    3c14:	31 05       	cpc	r19, r1
    3c16:	19 f4       	brne	.+6      	; 0x3c1e <_ZN25Adafruit_CC3000_ClientRef7connectE9IPAddressj+0x26>
    3c18:	20 e0       	ldi	r18, 0x00	; 0
    3c1a:	30 e0       	ldi	r19, 0x00	; 0
    3c1c:	1b c0       	rjmp	.+54     	; 0x3c54 <_ZN25Adafruit_CC3000_ClientRef7connectE9IPAddressj+0x5c>
  return _client->connect(ip, port);
    3c1e:	f9 01       	movw	r30, r18
    3c20:	80 81       	ld	r24, Z
    3c22:	91 81       	ldd	r25, Z+1	; 0x01
    3c24:	fc 01       	movw	r30, r24
    3c26:	04 85       	ldd	r16, Z+12	; 0x0c
    3c28:	15 85       	ldd	r17, Z+13	; 0x0d

#include <Printable.h>

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    3c2a:	86 e3       	ldi	r24, 0x36	; 54
    3c2c:	93 e0       	ldi	r25, 0x03	; 3
    3c2e:	9a 83       	std	Y+2, r25	; 0x02
    3c30:	89 83       	std	Y+1, r24	; 0x01
    3c32:	12 96       	adiw	r26, 0x02	; 2
    3c34:	8d 91       	ld	r24, X+
    3c36:	9d 91       	ld	r25, X+
    3c38:	0d 90       	ld	r0, X+
    3c3a:	bc 91       	ld	r27, X
    3c3c:	a0 2d       	mov	r26, r0
    3c3e:	8b 83       	std	Y+3, r24	; 0x03
    3c40:	9c 83       	std	Y+4, r25	; 0x04
    3c42:	ad 83       	std	Y+5, r26	; 0x05
    3c44:	be 83       	std	Y+6, r27	; 0x06
    3c46:	c9 01       	movw	r24, r18
    3c48:	be 01       	movw	r22, r28
    3c4a:	6f 5f       	subi	r22, 0xFF	; 255
    3c4c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c4e:	f8 01       	movw	r30, r16
    3c50:	09 95       	icall
    3c52:	9c 01       	movw	r18, r24
}
    3c54:	c9 01       	movw	r24, r18
    3c56:	26 96       	adiw	r28, 0x06	; 6
    3c58:	0f b6       	in	r0, 0x3f	; 63
    3c5a:	f8 94       	cli
    3c5c:	de bf       	out	0x3e, r29	; 62
    3c5e:	0f be       	out	0x3f, r0	; 63
    3c60:	cd bf       	out	0x3d, r28	; 61
    3c62:	cf 91       	pop	r28
    3c64:	df 91       	pop	r29
    3c66:	1f 91       	pop	r17
    3c68:	0f 91       	pop	r16
    3c6a:	08 95       	ret

00003c6c <_ZN25Adafruit_CC3000_ClientRef7connectEPKcj>:

int Adafruit_CC3000_ClientRef::connect(const char *host, uint16_t port) {
  HANDLE_NULL(_client, false);
    3c6c:	fc 01       	movw	r30, r24
    3c6e:	a4 85       	ldd	r26, Z+12	; 0x0c
    3c70:	b5 85       	ldd	r27, Z+13	; 0x0d
    3c72:	10 97       	sbiw	r26, 0x00	; 0
    3c74:	19 f4       	brne	.+6      	; 0x3c7c <_ZN25Adafruit_CC3000_ClientRef7connectEPKcj+0x10>
    3c76:	20 e0       	ldi	r18, 0x00	; 0
    3c78:	30 e0       	ldi	r19, 0x00	; 0
    3c7a:	09 c0       	rjmp	.+18     	; 0x3c8e <_ZN25Adafruit_CC3000_ClientRef7connectEPKcj+0x22>
  return _client->connect(host, port);
    3c7c:	ed 91       	ld	r30, X+
    3c7e:	fc 91       	ld	r31, X
    3c80:	11 97       	sbiw	r26, 0x01	; 1
    3c82:	06 84       	ldd	r0, Z+14	; 0x0e
    3c84:	f7 85       	ldd	r31, Z+15	; 0x0f
    3c86:	e0 2d       	mov	r30, r0
    3c88:	cd 01       	movw	r24, r26
    3c8a:	09 95       	icall
    3c8c:	9c 01       	movw	r18, r24
}
    3c8e:	c9 01       	movw	r24, r18
    3c90:	08 95       	ret

00003c92 <_ZN25Adafruit_CC3000_ClientRef9connectedEv>:

uint8_t Adafruit_CC3000_ClientRef::connected(void) {
  HANDLE_NULL(_client, false);
    3c92:	fc 01       	movw	r30, r24
    3c94:	a4 85       	ldd	r26, Z+12	; 0x0c
    3c96:	b5 85       	ldd	r27, Z+13	; 0x0d
    3c98:	10 97       	sbiw	r26, 0x00	; 0
    3c9a:	11 f4       	brne	.+4      	; 0x3ca0 <_ZN25Adafruit_CC3000_ClientRef9connectedEv+0xe>
    3c9c:	80 e0       	ldi	r24, 0x00	; 0
    3c9e:	08 95       	ret
  return _client->connected();
    3ca0:	ed 91       	ld	r30, X+
    3ca2:	fc 91       	ld	r31, X
    3ca4:	11 97       	sbiw	r26, 0x01	; 1
    3ca6:	04 88       	ldd	r0, Z+20	; 0x14
    3ca8:	f5 89       	ldd	r31, Z+21	; 0x15
    3caa:	e0 2d       	mov	r30, r0
    3cac:	cd 01       	movw	r24, r26
    3cae:	09 95       	icall
}
    3cb0:	08 95       	ret

00003cb2 <_ZN25Adafruit_CC3000_ClientRef5writeEh>:

size_t Adafruit_CC3000_ClientRef::write(uint8_t c) {
  HANDLE_NULL(_client, 0);
    3cb2:	fc 01       	movw	r30, r24
    3cb4:	a4 85       	ldd	r26, Z+12	; 0x0c
    3cb6:	b5 85       	ldd	r27, Z+13	; 0x0d
    3cb8:	10 97       	sbiw	r26, 0x00	; 0
    3cba:	19 f4       	brne	.+6      	; 0x3cc2 <_ZN25Adafruit_CC3000_ClientRef5writeEh+0x10>
    3cbc:	20 e0       	ldi	r18, 0x00	; 0
    3cbe:	30 e0       	ldi	r19, 0x00	; 0
    3cc0:	09 c0       	rjmp	.+18     	; 0x3cd4 <_ZN25Adafruit_CC3000_ClientRef5writeEh+0x22>
  return _client->write(c);
    3cc2:	ed 91       	ld	r30, X+
    3cc4:	fc 91       	ld	r31, X
    3cc6:	11 97       	sbiw	r26, 0x01	; 1
    3cc8:	01 90       	ld	r0, Z+
    3cca:	f0 81       	ld	r31, Z
    3ccc:	e0 2d       	mov	r30, r0
    3cce:	cd 01       	movw	r24, r26
    3cd0:	09 95       	icall
    3cd2:	9c 01       	movw	r18, r24
}
    3cd4:	c9 01       	movw	r24, r18
    3cd6:	08 95       	ret

00003cd8 <_ZN25Adafruit_CC3000_ClientRef4readEv>:
  HANDLE_NULL(_client, 0);
  return _client->read(buf, len, flags);
}

int Adafruit_CC3000_ClientRef::read(void) {
  HANDLE_NULL(_client, 0);
    3cd8:	fc 01       	movw	r30, r24
    3cda:	a4 85       	ldd	r26, Z+12	; 0x0c
    3cdc:	b5 85       	ldd	r27, Z+13	; 0x0d
    3cde:	10 97       	sbiw	r26, 0x00	; 0
    3ce0:	19 f4       	brne	.+6      	; 0x3ce8 <_ZN25Adafruit_CC3000_ClientRef4readEv+0x10>
    3ce2:	20 e0       	ldi	r18, 0x00	; 0
    3ce4:	30 e0       	ldi	r19, 0x00	; 0
    3ce6:	09 c0       	rjmp	.+18     	; 0x3cfa <_ZN25Adafruit_CC3000_ClientRef4readEv+0x22>
  return _client->read();
    3ce8:	ed 91       	ld	r30, X+
    3cea:	fc 91       	ld	r31, X
    3cec:	11 97       	sbiw	r26, 0x01	; 1
    3cee:	06 80       	ldd	r0, Z+6	; 0x06
    3cf0:	f7 81       	ldd	r31, Z+7	; 0x07
    3cf2:	e0 2d       	mov	r30, r0
    3cf4:	cd 01       	movw	r24, r26
    3cf6:	09 95       	icall
    3cf8:	9c 01       	movw	r18, r24
}
    3cfa:	c9 01       	movw	r24, r18
    3cfc:	08 95       	ret

00003cfe <_ZN25Adafruit_CC3000_ClientRef9availableEv>:
  HANDLE_NULL(_client, 0);
  return _client->close();
}

int Adafruit_CC3000_ClientRef::available(void) {
  HANDLE_NULL(_client, 0);
    3cfe:	fc 01       	movw	r30, r24
    3d00:	a4 85       	ldd	r26, Z+12	; 0x0c
    3d02:	b5 85       	ldd	r27, Z+13	; 0x0d
    3d04:	10 97       	sbiw	r26, 0x00	; 0
    3d06:	19 f4       	brne	.+6      	; 0x3d0e <_ZN25Adafruit_CC3000_ClientRef9availableEv+0x10>
    3d08:	20 e0       	ldi	r18, 0x00	; 0
    3d0a:	30 e0       	ldi	r19, 0x00	; 0
    3d0c:	09 c0       	rjmp	.+18     	; 0x3d20 <_ZN25Adafruit_CC3000_ClientRef9availableEv+0x22>
  return _client->available();
    3d0e:	ed 91       	ld	r30, X+
    3d10:	fc 91       	ld	r31, X
    3d12:	11 97       	sbiw	r26, 0x01	; 1
    3d14:	04 80       	ldd	r0, Z+4	; 0x04
    3d16:	f5 81       	ldd	r31, Z+5	; 0x05
    3d18:	e0 2d       	mov	r30, r0
    3d1a:	cd 01       	movw	r24, r26
    3d1c:	09 95       	icall
    3d1e:	9c 01       	movw	r18, r24
}
    3d20:	c9 01       	movw	r24, r18
    3d22:	08 95       	ret

00003d24 <_ZN25Adafruit_CC3000_ClientRef4readEPhj>:

int Adafruit_CC3000_ClientRef::read(uint8_t *buf, size_t size) {
  HANDLE_NULL(_client, 0);
    3d24:	fc 01       	movw	r30, r24
    3d26:	a4 85       	ldd	r26, Z+12	; 0x0c
    3d28:	b5 85       	ldd	r27, Z+13	; 0x0d
    3d2a:	10 97       	sbiw	r26, 0x00	; 0
    3d2c:	19 f4       	brne	.+6      	; 0x3d34 <_ZN25Adafruit_CC3000_ClientRef4readEPhj+0x10>
    3d2e:	20 e0       	ldi	r18, 0x00	; 0
    3d30:	30 e0       	ldi	r19, 0x00	; 0
    3d32:	09 c0       	rjmp	.+18     	; 0x3d46 <_ZN25Adafruit_CC3000_ClientRef4readEPhj+0x22>
  return _client->read(buf, size);
    3d34:	ed 91       	ld	r30, X+
    3d36:	fc 91       	ld	r31, X
    3d38:	11 97       	sbiw	r26, 0x01	; 1
    3d3a:	00 88       	ldd	r0, Z+16	; 0x10
    3d3c:	f1 89       	ldd	r31, Z+17	; 0x11
    3d3e:	e0 2d       	mov	r30, r0
    3d40:	cd 01       	movw	r24, r26
    3d42:	09 95       	icall
    3d44:	9c 01       	movw	r18, r24
}
    3d46:	c9 01       	movw	r24, r18
    3d48:	08 95       	ret

00003d4a <_ZN25Adafruit_CC3000_ClientRef5writeEPKhj>:

size_t Adafruit_CC3000_ClientRef::write(const uint8_t *buf, size_t size) {
  HANDLE_NULL(_client, 0);
    3d4a:	fc 01       	movw	r30, r24
    3d4c:	a4 85       	ldd	r26, Z+12	; 0x0c
    3d4e:	b5 85       	ldd	r27, Z+13	; 0x0d
    3d50:	10 97       	sbiw	r26, 0x00	; 0
    3d52:	19 f4       	brne	.+6      	; 0x3d5a <_ZN25Adafruit_CC3000_ClientRef5writeEPKhj+0x10>
    3d54:	20 e0       	ldi	r18, 0x00	; 0
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	09 c0       	rjmp	.+18     	; 0x3d6c <_ZN25Adafruit_CC3000_ClientRef5writeEPKhj+0x22>
  return _client->write(buf, size);
    3d5a:	ed 91       	ld	r30, X+
    3d5c:	fc 91       	ld	r31, X
    3d5e:	11 97       	sbiw	r26, 0x01	; 1
    3d60:	02 80       	ldd	r0, Z+2	; 0x02
    3d62:	f3 81       	ldd	r31, Z+3	; 0x03
    3d64:	e0 2d       	mov	r30, r0
    3d66:	cd 01       	movw	r24, r26
    3d68:	09 95       	icall
    3d6a:	9c 01       	movw	r18, r24
}
    3d6c:	c9 01       	movw	r24, r18
    3d6e:	08 95       	ret

00003d70 <_ZN25Adafruit_CC3000_ClientRef4peekEv>:

int Adafruit_CC3000_ClientRef::peek() {
  HANDLE_NULL(_client, 0);
    3d70:	fc 01       	movw	r30, r24
    3d72:	a4 85       	ldd	r26, Z+12	; 0x0c
    3d74:	b5 85       	ldd	r27, Z+13	; 0x0d
    3d76:	10 97       	sbiw	r26, 0x00	; 0
    3d78:	19 f4       	brne	.+6      	; 0x3d80 <_ZN25Adafruit_CC3000_ClientRef4peekEv+0x10>
    3d7a:	20 e0       	ldi	r18, 0x00	; 0
    3d7c:	30 e0       	ldi	r19, 0x00	; 0
    3d7e:	09 c0       	rjmp	.+18     	; 0x3d92 <_ZN25Adafruit_CC3000_ClientRef4peekEv+0x22>
  return _client->peek();
    3d80:	ed 91       	ld	r30, X+
    3d82:	fc 91       	ld	r31, X
    3d84:	11 97       	sbiw	r26, 0x01	; 1
    3d86:	00 84       	ldd	r0, Z+8	; 0x08
    3d88:	f1 85       	ldd	r31, Z+9	; 0x09
    3d8a:	e0 2d       	mov	r30, r0
    3d8c:	cd 01       	movw	r24, r26
    3d8e:	09 95       	icall
    3d90:	9c 01       	movw	r18, r24
}
    3d92:	c9 01       	movw	r24, r18
    3d94:	08 95       	ret

00003d96 <_ZN25Adafruit_CC3000_ClientRef5flushEv>:

void Adafruit_CC3000_ClientRef::flush() {
  if (_client != NULL) _client->flush();
    3d96:	fc 01       	movw	r30, r24
    3d98:	a4 85       	ldd	r26, Z+12	; 0x0c
    3d9a:	b5 85       	ldd	r27, Z+13	; 0x0d
    3d9c:	10 97       	sbiw	r26, 0x00	; 0
    3d9e:	41 f0       	breq	.+16     	; 0x3db0 <_ZN25Adafruit_CC3000_ClientRef5flushEv+0x1a>
    3da0:	ed 91       	ld	r30, X+
    3da2:	fc 91       	ld	r31, X
    3da4:	11 97       	sbiw	r26, 0x01	; 1
    3da6:	02 84       	ldd	r0, Z+10	; 0x0a
    3da8:	f3 85       	ldd	r31, Z+11	; 0x0b
    3daa:	e0 2d       	mov	r30, r0
    3dac:	cd 01       	movw	r24, r26
    3dae:	09 95       	icall
    3db0:	08 95       	ret

00003db2 <_ZN25Adafruit_CC3000_ClientRef4stopEv>:
}

void Adafruit_CC3000_ClientRef::stop() {
  if (_client != NULL) _client->stop();
    3db2:	fc 01       	movw	r30, r24
    3db4:	a4 85       	ldd	r26, Z+12	; 0x0c
    3db6:	b5 85       	ldd	r27, Z+13	; 0x0d
    3db8:	10 97       	sbiw	r26, 0x00	; 0
    3dba:	41 f0       	breq	.+16     	; 0x3dcc <_ZN25Adafruit_CC3000_ClientRef4stopEv+0x1a>
    3dbc:	ed 91       	ld	r30, X+
    3dbe:	fc 91       	ld	r31, X
    3dc0:	11 97       	sbiw	r26, 0x01	; 1
    3dc2:	02 88       	ldd	r0, Z+18	; 0x12
    3dc4:	f3 89       	ldd	r31, Z+19	; 0x13
    3dc6:	e0 2d       	mov	r30, r0
    3dc8:	cd 01       	movw	r24, r26
    3dca:	09 95       	icall
    3dcc:	08 95       	ret

00003dce <_ZN22Adafruit_CC3000_Server12getClientRefEa>:

  return -1;
}

// Given the index of client, returns the instance of that client for reading/writing
Adafruit_CC3000_ClientRef Adafruit_CC3000_Server::getClientRef(int8_t clientIndex) {
    3dce:	cf 93       	push	r28
    3dd0:	df 93       	push	r29
    3dd2:	9c 01       	movw	r18, r24
    3dd4:	ca e0       	ldi	r28, 0x0A	; 10
    3dd6:	d3 e0       	ldi	r29, 0x03	; 3
  if (clientIndex != -1) {
    3dd8:	4f 3f       	cpi	r20, 0xFF	; 255
    3dda:	b9 f0       	breq	.+46     	; 0x3e0a <_ZN22Adafruit_CC3000_Server12getClientRefEa+0x3c>
    return Adafruit_CC3000_ClientRef(&_clients[clientIndex]);
    3ddc:	fc 01       	movw	r30, r24
    3dde:	13 82       	std	Z+3, r1	; 0x03
    3de0:	12 82       	std	Z+2, r1	; 0x02
    3de2:	88 ee       	ldi	r24, 0xE8	; 232
    3de4:	93 e0       	ldi	r25, 0x03	; 3
    3de6:	a0 e0       	ldi	r26, 0x00	; 0
    3de8:	b0 e0       	ldi	r27, 0x00	; 0
    3dea:	84 83       	std	Z+4, r24	; 0x04
    3dec:	95 83       	std	Z+5, r25	; 0x05
    3dee:	a6 83       	std	Z+6, r26	; 0x06
    3df0:	b7 83       	std	Z+7, r27	; 0x07
  Adafruit_CC3000_ClientRef implementation
*/
/**************************************************************************/

Adafruit_CC3000_ClientRef::Adafruit_CC3000_ClientRef(Adafruit_CC3000_Client* client)
  : _client(client) 
    3df2:	d1 83       	std	Z+1, r29	; 0x01
    3df4:	c0 83       	st	Z, r28
    3df6:	83 e5       	ldi	r24, 0x53	; 83
    3df8:	48 02       	muls	r20, r24
    3dfa:	c0 01       	movw	r24, r0
    3dfc:	11 24       	eor	r1, r1
    3dfe:	04 96       	adiw	r24, 0x04	; 4
    3e00:	86 0f       	add	r24, r22
    3e02:	97 1f       	adc	r25, r23
    3e04:	95 87       	std	Z+13, r25	; 0x0d
    3e06:	84 87       	std	Z+12, r24	; 0x0c
    3e08:	0f c0       	rjmp	.+30     	; 0x3e28 <_ZN22Adafruit_CC3000_Server12getClientRefEa+0x5a>
  }
  
  // Couldn't find a client ready to read, so return a client that is not 
  // connected to signal no clients are available for reading (convention
  // used by the Ethernet library).
  return Adafruit_CC3000_ClientRef(NULL);
    3e0a:	fc 01       	movw	r30, r24
    3e0c:	13 82       	std	Z+3, r1	; 0x03
    3e0e:	12 82       	std	Z+2, r1	; 0x02
    3e10:	88 ee       	ldi	r24, 0xE8	; 232
    3e12:	93 e0       	ldi	r25, 0x03	; 3
    3e14:	a0 e0       	ldi	r26, 0x00	; 0
    3e16:	b0 e0       	ldi	r27, 0x00	; 0
    3e18:	84 83       	std	Z+4, r24	; 0x04
    3e1a:	95 83       	std	Z+5, r25	; 0x05
    3e1c:	a6 83       	std	Z+6, r26	; 0x06
    3e1e:	b7 83       	std	Z+7, r27	; 0x07
  Adafruit_CC3000_ClientRef implementation
*/
/**************************************************************************/

Adafruit_CC3000_ClientRef::Adafruit_CC3000_ClientRef(Adafruit_CC3000_Client* client)
  : _client(client) 
    3e20:	d1 83       	std	Z+1, r29	; 0x01
    3e22:	c0 83       	st	Z, r28
    3e24:	15 86       	std	Z+13, r1	; 0x0d
    3e26:	14 86       	std	Z+12, r1	; 0x0c
  
  // Couldn't find a client ready to read, so return a client that is not 
  // connected to signal no clients are available for reading (convention
  // used by the Ethernet library).
  return Adafruit_CC3000_ClientRef(NULL);
}
    3e28:	c9 01       	movw	r24, r18
    3e2a:	df 91       	pop	r29
    3e2c:	cf 91       	pop	r28
    3e2e:	08 95       	ret

00003e30 <_ZN22Adafruit_CC3000_Server5writeEPKhj>:
}

// Write data to all connected clients.  Buffer is a pointer to an array
// of bytes, and size specifies how many bytes to write from the buffer.
// Return the sum of bytes written to all clients.
size_t Adafruit_CC3000_Server::write(const uint8_t *buffer, size_t size) {
    3e30:	4f 92       	push	r4
    3e32:	5f 92       	push	r5
    3e34:	6f 92       	push	r6
    3e36:	7f 92       	push	r7
    3e38:	8f 92       	push	r8
    3e3a:	9f 92       	push	r9
    3e3c:	af 92       	push	r10
    3e3e:	bf 92       	push	r11
    3e40:	cf 92       	push	r12
    3e42:	df 92       	push	r13
    3e44:	ef 92       	push	r14
    3e46:	ff 92       	push	r15
    3e48:	0f 93       	push	r16
    3e4a:	1f 93       	push	r17
    3e4c:	cf 93       	push	r28
    3e4e:	df 93       	push	r29
    3e50:	5c 01       	movw	r10, r24
    3e52:	3b 01       	movw	r6, r22
    3e54:	4a 01       	movw	r8, r20
    3e56:	7c 01       	movw	r14, r24
    3e58:	cc 24       	eor	r12, r12
    3e5a:	dd 24       	eor	r13, r13
    3e5c:	00 e0       	ldi	r16, 0x00	; 0
    3e5e:	10 e0       	ldi	r17, 0x00	; 0
  size_t written = 0;
  for (int i = 0; i < MAX_SERVER_CLIENTS; ++i) {
    if (_clients[i].connected()) {
    3e60:	83 e5       	ldi	r24, 0x53	; 83
    3e62:	48 2e       	mov	r4, r24
    3e64:	51 2c       	mov	r5, r1
    3e66:	04 9d       	mul	r16, r4
    3e68:	e0 01       	movw	r28, r0
    3e6a:	05 9d       	mul	r16, r5
    3e6c:	d0 0d       	add	r29, r0
    3e6e:	14 9d       	mul	r17, r4
    3e70:	d0 0d       	add	r29, r0
    3e72:	11 24       	eor	r1, r1
    3e74:	24 96       	adiw	r28, 0x04	; 4
    3e76:	ca 0d       	add	r28, r10
    3e78:	db 1d       	adc	r29, r11
    3e7a:	d7 01       	movw	r26, r14
    3e7c:	14 96       	adiw	r26, 0x04	; 4
    3e7e:	ed 91       	ld	r30, X+
    3e80:	fc 91       	ld	r31, X
    3e82:	15 97       	sbiw	r26, 0x05	; 5
    3e84:	04 88       	ldd	r0, Z+20	; 0x14
    3e86:	f5 89       	ldd	r31, Z+21	; 0x15
    3e88:	e0 2d       	mov	r30, r0
    3e8a:	ce 01       	movw	r24, r28
    3e8c:	09 95       	icall
    3e8e:	88 23       	and	r24, r24
    3e90:	71 f0       	breq	.+28     	; 0x3eae <_ZN22Adafruit_CC3000_Server5writeEPKhj+0x7e>
      written += _clients[i].write(buffer, size);
    3e92:	d7 01       	movw	r26, r14
    3e94:	14 96       	adiw	r26, 0x04	; 4
    3e96:	ed 91       	ld	r30, X+
    3e98:	fc 91       	ld	r31, X
    3e9a:	15 97       	sbiw	r26, 0x05	; 5
    3e9c:	02 80       	ldd	r0, Z+2	; 0x02
    3e9e:	f3 81       	ldd	r31, Z+3	; 0x03
    3ea0:	e0 2d       	mov	r30, r0
    3ea2:	ce 01       	movw	r24, r28
    3ea4:	b3 01       	movw	r22, r6
    3ea6:	a4 01       	movw	r20, r8
    3ea8:	09 95       	icall
    3eaa:	c8 0e       	add	r12, r24
    3eac:	d9 1e       	adc	r13, r25
// Write data to all connected clients.  Buffer is a pointer to an array
// of bytes, and size specifies how many bytes to write from the buffer.
// Return the sum of bytes written to all clients.
size_t Adafruit_CC3000_Server::write(const uint8_t *buffer, size_t size) {
  size_t written = 0;
  for (int i = 0; i < MAX_SERVER_CLIENTS; ++i) {
    3eae:	0f 5f       	subi	r16, 0xFF	; 255
    3eb0:	1f 4f       	sbci	r17, 0xFF	; 255
    3eb2:	83 e5       	ldi	r24, 0x53	; 83
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	e8 0e       	add	r14, r24
    3eb8:	f9 1e       	adc	r15, r25
    3eba:	03 30       	cpi	r16, 0x03	; 3
    3ebc:	11 05       	cpc	r17, r1
    3ebe:	99 f6       	brne	.-90     	; 0x3e66 <_ZN22Adafruit_CC3000_Server5writeEPKhj+0x36>
    if (_clients[i].connected()) {
      written += _clients[i].write(buffer, size);
    }
  }
  return written;
}
    3ec0:	c6 01       	movw	r24, r12
    3ec2:	df 91       	pop	r29
    3ec4:	cf 91       	pop	r28
    3ec6:	1f 91       	pop	r17
    3ec8:	0f 91       	pop	r16
    3eca:	ff 90       	pop	r15
    3ecc:	ef 90       	pop	r14
    3ece:	df 90       	pop	r13
    3ed0:	cf 90       	pop	r12
    3ed2:	bf 90       	pop	r11
    3ed4:	af 90       	pop	r10
    3ed6:	9f 90       	pop	r9
    3ed8:	8f 90       	pop	r8
    3eda:	7f 90       	pop	r7
    3edc:	6f 90       	pop	r6
    3ede:	5f 90       	pop	r5
    3ee0:	4f 90       	pop	r4
    3ee2:	08 95       	ret

00003ee4 <_ZN22Adafruit_CC3000_Server5writeEh>:

// Write a byte value to all connected clients.
// Return the sum of bytes written to all clients.
size_t Adafruit_CC3000_Server::write(uint8_t value) {
    3ee4:	df 93       	push	r29
    3ee6:	cf 93       	push	r28
    3ee8:	0f 92       	push	r0
    3eea:	cd b7       	in	r28, 0x3d	; 61
    3eec:	de b7       	in	r29, 0x3e	; 62
    3eee:	fc 01       	movw	r30, r24
    3ef0:	69 83       	std	Y+1, r22	; 0x01
  return write(&value, 1);
    3ef2:	a0 81       	ld	r26, Z
    3ef4:	b1 81       	ldd	r27, Z+1	; 0x01
    3ef6:	12 96       	adiw	r26, 0x02	; 2
    3ef8:	2d 91       	ld	r18, X+
    3efa:	3c 91       	ld	r19, X
    3efc:	13 97       	sbiw	r26, 0x03	; 3
    3efe:	be 01       	movw	r22, r28
    3f00:	6f 5f       	subi	r22, 0xFF	; 255
    3f02:	7f 4f       	sbci	r23, 0xFF	; 255
    3f04:	41 e0       	ldi	r20, 0x01	; 1
    3f06:	50 e0       	ldi	r21, 0x00	; 0
    3f08:	f9 01       	movw	r30, r18
    3f0a:	09 95       	icall
}
    3f0c:	0f 90       	pop	r0
    3f0e:	cf 91       	pop	r28
    3f10:	df 91       	pop	r29
    3f12:	08 95       	ret

00003f14 <_GLOBAL__I__ZN25Adafruit_CC3000_ClientRefC2EP22Adafruit_CC3000_Client>:
      }
      // else either there were no sockets to accept or an error occured.
    }
  }
  return newClientCreated;
}
    3f14:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    3f16:	8a ea       	ldi	r24, 0xAA	; 170
    3f18:	93 e0       	ldi	r25, 0x03	; 3
    3f1a:	60 e0       	ldi	r22, 0x00	; 0
    3f1c:	40 e0       	ldi	r20, 0x00	; 0
    3f1e:	20 e0       	ldi	r18, 0x00	; 0
    3f20:	00 e0       	ldi	r16, 0x00	; 0
    3f22:	0e 94 d7 2b 	call	0x57ae	; 0x57ae <_ZN9IPAddressC1Ehhhh>
    3f26:	0f 91       	pop	r16
    3f28:	08 95       	ret

00003f2a <_ZN22Adafruit_CC3000_Server20acceptNewConnectionsEv>:
size_t Adafruit_CC3000_Server::write(uint8_t value) {
  return write(&value, 1);
}

// Accept new connections and update the connected clients.
bool Adafruit_CC3000_Server::acceptNewConnections() {
    3f2a:	2f 92       	push	r2
    3f2c:	3f 92       	push	r3
    3f2e:	4f 92       	push	r4
    3f30:	5f 92       	push	r5
    3f32:	7f 92       	push	r7
    3f34:	8f 92       	push	r8
    3f36:	9f 92       	push	r9
    3f38:	af 92       	push	r10
    3f3a:	bf 92       	push	r11
    3f3c:	cf 92       	push	r12
    3f3e:	df 92       	push	r13
    3f40:	ef 92       	push	r14
    3f42:	ff 92       	push	r15
    3f44:	0f 93       	push	r16
    3f46:	1f 93       	push	r17
    3f48:	df 93       	push	r29
    3f4a:	cf 93       	push	r28
    3f4c:	cd b7       	in	r28, 0x3d	; 61
    3f4e:	de b7       	in	r29, 0x3e	; 62
    3f50:	c3 55       	subi	r28, 0x53	; 83
    3f52:	d0 40       	sbci	r29, 0x00	; 0
    3f54:	0f b6       	in	r0, 0x3f	; 63
    3f56:	f8 94       	cli
    3f58:	de bf       	out	0x3e, r29	; 62
    3f5a:	0f be       	out	0x3f, r0	; 63
    3f5c:	cd bf       	out	0x3d, r28	; 61
    3f5e:	5c 01       	movw	r10, r24
    3f60:	6c 01       	movw	r12, r24
    3f62:	77 24       	eor	r7, r7
    3f64:	ee 24       	eor	r14, r14
    3f66:	ff 24       	eor	r15, r15
  bool newClientCreated = false;
  // For any unconnected client, see if new connections are pending and accept
  // them as a new client.
  for (int i = 0; i < MAX_SERVER_CLIENTS; ++i) {
    if (!_clients[i].connected()) {
    3f68:	23 e5       	ldi	r18, 0x53	; 83
    3f6a:	22 2e       	mov	r2, r18
    3f6c:	31 2c       	mov	r3, r1
      // Note: Because the non-blocking option was set for the listening
      // socket this call will not block and instead return SOC_IN_PROGRESS (-2) 
      // if there are no pending client connections. Also, the address of the 
      // connected client is not needed, so those parameters are set to NULL.
      cc3k_int_poll();
      int soc = accept(_listenSocket, NULL, NULL);
    3f6e:	9f ef       	ldi	r25, 0xFF	; 255
    3f70:	89 2e       	mov	r8, r25
    3f72:	91 2c       	mov	r9, r1
    3f74:	8a 0c       	add	r8, r10
    3f76:	9b 1c       	adc	r9, r11
      if (soc > -1) {
        _clients[i] = Adafruit_CC3000_Client(soc);
    3f78:	2e 01       	movw	r4, r28
    3f7a:	08 94       	sec
    3f7c:	41 1c       	adc	r4, r1
    3f7e:	51 1c       	adc	r5, r1
bool Adafruit_CC3000_Server::acceptNewConnections() {
  bool newClientCreated = false;
  // For any unconnected client, see if new connections are pending and accept
  // them as a new client.
  for (int i = 0; i < MAX_SERVER_CLIENTS; ++i) {
    if (!_clients[i].connected()) {
    3f80:	e2 9c       	mul	r14, r2
    3f82:	80 01       	movw	r16, r0
    3f84:	e3 9c       	mul	r14, r3
    3f86:	10 0d       	add	r17, r0
    3f88:	f2 9c       	mul	r15, r2
    3f8a:	10 0d       	add	r17, r0
    3f8c:	11 24       	eor	r1, r1
    3f8e:	0c 5f       	subi	r16, 0xFC	; 252
    3f90:	1f 4f       	sbci	r17, 0xFF	; 255
    3f92:	0a 0d       	add	r16, r10
    3f94:	1b 1d       	adc	r17, r11
    3f96:	d6 01       	movw	r26, r12
    3f98:	14 96       	adiw	r26, 0x04	; 4
    3f9a:	ed 91       	ld	r30, X+
    3f9c:	fc 91       	ld	r31, X
    3f9e:	15 97       	sbiw	r26, 0x05	; 5
    3fa0:	04 88       	ldd	r0, Z+20	; 0x14
    3fa2:	f5 89       	ldd	r31, Z+21	; 0x15
    3fa4:	e0 2d       	mov	r30, r0
    3fa6:	c8 01       	movw	r24, r16
    3fa8:	09 95       	icall
    3faa:	88 23       	and	r24, r24
    3fac:	f1 f4       	brne	.+60     	; 0x3fea <_ZN22Adafruit_CC3000_Server20acceptNewConnectionsEv+0xc0>
      // Note: Because the non-blocking option was set for the listening
      // socket this call will not block and instead return SOC_IN_PROGRESS (-2) 
      // if there are no pending client connections. Also, the address of the 
      // connected client is not needed, so those parameters are set to NULL.
      cc3k_int_poll();
    3fae:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <cc3k_int_poll>
      int soc = accept(_listenSocket, NULL, NULL);
    3fb2:	f4 01       	movw	r30, r8
    3fb4:	60 81       	ld	r22, Z
    3fb6:	71 81       	ldd	r23, Z+1	; 0x01
    3fb8:	82 81       	ldd	r24, Z+2	; 0x02
    3fba:	93 81       	ldd	r25, Z+3	; 0x03
    3fbc:	40 e0       	ldi	r20, 0x00	; 0
    3fbe:	50 e0       	ldi	r21, 0x00	; 0
    3fc0:	20 e0       	ldi	r18, 0x00	; 0
    3fc2:	30 e0       	ldi	r19, 0x00	; 0
    3fc4:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <accept>
    3fc8:	cb 01       	movw	r24, r22
      if (soc > -1) {
    3fca:	77 fd       	sbrc	r23, 7
    3fcc:	0e c0       	rjmp	.+28     	; 0x3fea <_ZN22Adafruit_CC3000_Server20acceptNewConnectionsEv+0xc0>
        _clients[i] = Adafruit_CC3000_Client(soc);
    3fce:	ac 01       	movw	r20, r24
    3fd0:	66 27       	eor	r22, r22
    3fd2:	57 fd       	sbrc	r21, 7
    3fd4:	60 95       	com	r22
    3fd6:	76 2f       	mov	r23, r22
    3fd8:	c2 01       	movw	r24, r4
    3fda:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <_ZN22Adafruit_CC3000_ClientC1El>
    3fde:	c8 01       	movw	r24, r16
    3fe0:	b2 01       	movw	r22, r4
    3fe2:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <_ZN22Adafruit_CC3000_ClientaSERKS_>
    3fe6:	77 24       	eor	r7, r7
    3fe8:	73 94       	inc	r7
// Accept new connections and update the connected clients.
bool Adafruit_CC3000_Server::acceptNewConnections() {
  bool newClientCreated = false;
  // For any unconnected client, see if new connections are pending and accept
  // them as a new client.
  for (int i = 0; i < MAX_SERVER_CLIENTS; ++i) {
    3fea:	08 94       	sec
    3fec:	e1 1c       	adc	r14, r1
    3fee:	f1 1c       	adc	r15, r1
    3ff0:	83 e5       	ldi	r24, 0x53	; 83
    3ff2:	90 e0       	ldi	r25, 0x00	; 0
    3ff4:	c8 0e       	add	r12, r24
    3ff6:	d9 1e       	adc	r13, r25
    3ff8:	93 e0       	ldi	r25, 0x03	; 3
    3ffa:	e9 16       	cp	r14, r25
    3ffc:	f1 04       	cpc	r15, r1
    3ffe:	09 f0       	breq	.+2      	; 0x4002 <_ZN22Adafruit_CC3000_Server20acceptNewConnectionsEv+0xd8>
    4000:	bf cf       	rjmp	.-130    	; 0x3f80 <_ZN22Adafruit_CC3000_Server20acceptNewConnectionsEv+0x56>
      }
      // else either there were no sockets to accept or an error occured.
    }
  }
  return newClientCreated;
}
    4002:	87 2d       	mov	r24, r7
    4004:	cd 5a       	subi	r28, 0xAD	; 173
    4006:	df 4f       	sbci	r29, 0xFF	; 255
    4008:	0f b6       	in	r0, 0x3f	; 63
    400a:	f8 94       	cli
    400c:	de bf       	out	0x3e, r29	; 62
    400e:	0f be       	out	0x3f, r0	; 63
    4010:	cd bf       	out	0x3d, r28	; 61
    4012:	cf 91       	pop	r28
    4014:	df 91       	pop	r29
    4016:	1f 91       	pop	r17
    4018:	0f 91       	pop	r16
    401a:	ff 90       	pop	r15
    401c:	ef 90       	pop	r14
    401e:	df 90       	pop	r13
    4020:	cf 90       	pop	r12
    4022:	bf 90       	pop	r11
    4024:	af 90       	pop	r10
    4026:	9f 90       	pop	r9
    4028:	8f 90       	pop	r8
    402a:	7f 90       	pop	r7
    402c:	5f 90       	pop	r5
    402e:	4f 90       	pop	r4
    4030:	3f 90       	pop	r3
    4032:	2f 90       	pop	r2
    4034:	08 95       	ret

00004036 <_ZN22Adafruit_CC3000_Server14availableIndexEPb>:

// Return index of a client with data available for reading. Can be turned
// into a client instance with getClientRef().  Accepts an optional parameter
// to return a boolean (by reference) indicating if available client is connecting
// for the first time.
int8_t Adafruit_CC3000_Server::availableIndex(bool *newClient) {
    4036:	af 92       	push	r10
    4038:	bf 92       	push	r11
    403a:	cf 92       	push	r12
    403c:	df 92       	push	r13
    403e:	ef 92       	push	r14
    4040:	ff 92       	push	r15
    4042:	0f 93       	push	r16
    4044:	1f 93       	push	r17
    4046:	cf 93       	push	r28
    4048:	df 93       	push	r29
    404a:	6c 01       	movw	r12, r24
    404c:	eb 01       	movw	r28, r22
  bool newClientCreated = acceptNewConnections();
    404e:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <_ZN22Adafruit_CC3000_Server20acceptNewConnectionsEv>

  if (newClient)
    4052:	20 97       	sbiw	r28, 0x00	; 0
    4054:	09 f0       	breq	.+2      	; 0x4058 <_ZN22Adafruit_CC3000_Server14availableIndexEPb+0x22>
    *newClient = newClientCreated;
    4056:	88 83       	st	Y, r24
    4058:	76 01       	movw	r14, r12
    405a:	00 e0       	ldi	r16, 0x00	; 0
    405c:	10 e0       	ldi	r17, 0x00	; 0

  // Find the first client which is ready to read and return it.
  for (int i = 0; i < MAX_SERVER_CLIENTS; ++i) {
    if (_clients[i].connected() && _clients[i].available() > 0) {
    405e:	33 e5       	ldi	r19, 0x53	; 83
    4060:	a3 2e       	mov	r10, r19
    4062:	b1 2c       	mov	r11, r1
    4064:	0a 9d       	mul	r16, r10
    4066:	e0 01       	movw	r28, r0
    4068:	0b 9d       	mul	r16, r11
    406a:	d0 0d       	add	r29, r0
    406c:	1a 9d       	mul	r17, r10
    406e:	d0 0d       	add	r29, r0
    4070:	11 24       	eor	r1, r1
    4072:	24 96       	adiw	r28, 0x04	; 4
    4074:	cc 0d       	add	r28, r12
    4076:	dd 1d       	adc	r29, r13
    4078:	d7 01       	movw	r26, r14
    407a:	14 96       	adiw	r26, 0x04	; 4
    407c:	ed 91       	ld	r30, X+
    407e:	fc 91       	ld	r31, X
    4080:	15 97       	sbiw	r26, 0x05	; 5
    4082:	04 88       	ldd	r0, Z+20	; 0x14
    4084:	f5 89       	ldd	r31, Z+21	; 0x15
    4086:	e0 2d       	mov	r30, r0
    4088:	ce 01       	movw	r24, r28
    408a:	09 95       	icall
    408c:	88 23       	and	r24, r24
    408e:	c9 f0       	breq	.+50     	; 0x40c2 <_ZN22Adafruit_CC3000_Server14availableIndexEPb+0x8c>
    4090:	d7 01       	movw	r26, r14
    4092:	14 96       	adiw	r26, 0x04	; 4
    4094:	ed 91       	ld	r30, X+
    4096:	fc 91       	ld	r31, X
    4098:	15 97       	sbiw	r26, 0x05	; 5
    409a:	04 80       	ldd	r0, Z+4	; 0x04
    409c:	f5 81       	ldd	r31, Z+5	; 0x05
    409e:	e0 2d       	mov	r30, r0
    40a0:	ce 01       	movw	r24, r28
    40a2:	09 95       	icall
    40a4:	18 16       	cp	r1, r24
    40a6:	19 06       	cpc	r1, r25
    40a8:	64 f4       	brge	.+24     	; 0x40c2 <_ZN22Adafruit_CC3000_Server14availableIndexEPb+0x8c>
      return i;
    40aa:	80 2f       	mov	r24, r16
    }
  }

  return -1;
}
    40ac:	df 91       	pop	r29
    40ae:	cf 91       	pop	r28
    40b0:	1f 91       	pop	r17
    40b2:	0f 91       	pop	r16
    40b4:	ff 90       	pop	r15
    40b6:	ef 90       	pop	r14
    40b8:	df 90       	pop	r13
    40ba:	cf 90       	pop	r12
    40bc:	bf 90       	pop	r11
    40be:	af 90       	pop	r10
    40c0:	08 95       	ret

  if (newClient)
    *newClient = newClientCreated;

  // Find the first client which is ready to read and return it.
  for (int i = 0; i < MAX_SERVER_CLIENTS; ++i) {
    40c2:	0f 5f       	subi	r16, 0xFF	; 255
    40c4:	1f 4f       	sbci	r17, 0xFF	; 255
    40c6:	83 e5       	ldi	r24, 0x53	; 83
    40c8:	90 e0       	ldi	r25, 0x00	; 0
    40ca:	e8 0e       	add	r14, r24
    40cc:	f9 1e       	adc	r15, r25
    40ce:	03 30       	cpi	r16, 0x03	; 3
    40d0:	11 05       	cpc	r17, r1
    40d2:	41 f6       	brne	.-112    	; 0x4064 <_ZN22Adafruit_CC3000_Server14availableIndexEPb+0x2e>
    40d4:	8f ef       	ldi	r24, 0xFF	; 255
    40d6:	ea cf       	rjmp	.-44     	; 0x40ac <_ZN22Adafruit_CC3000_Server14availableIndexEPb+0x76>

000040d8 <_ZN22Adafruit_CC3000_Server9availableEv>:
  // used by the Ethernet library).
  return Adafruit_CC3000_ClientRef(NULL);
}

// Return a reference to a client instance which has data available to read.
Adafruit_CC3000_ClientRef Adafruit_CC3000_Server::available() {
    40d8:	ef 92       	push	r14
    40da:	ff 92       	push	r15
    40dc:	0f 93       	push	r16
    40de:	1f 93       	push	r17
    40e0:	f8 2e       	mov	r15, r24
    40e2:	e9 2e       	mov	r14, r25
    40e4:	8b 01       	movw	r16, r22
  return getClientRef(availableIndex(NULL));
    40e6:	cb 01       	movw	r24, r22
    40e8:	60 e0       	ldi	r22, 0x00	; 0
    40ea:	70 e0       	ldi	r23, 0x00	; 0
    40ec:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN22Adafruit_CC3000_Server14availableIndexEPb>
    40f0:	48 2f       	mov	r20, r24
    40f2:	8f 2d       	mov	r24, r15
    40f4:	9e 2d       	mov	r25, r14
    40f6:	b8 01       	movw	r22, r16
    40f8:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <_ZN22Adafruit_CC3000_Server12getClientRefEa>
}
    40fc:	8f 2d       	mov	r24, r15
    40fe:	9e 2d       	mov	r25, r14
    4100:	1f 91       	pop	r17
    4102:	0f 91       	pop	r16
    4104:	ff 90       	pop	r15
    4106:	ef 90       	pop	r14
    4108:	08 95       	ret

0000410a <_ZN22Adafruit_CC3000_Server5beginEv>:

// Initialize the server and start listening for connections.
void Adafruit_CC3000_Server::begin() {
    410a:	2f 92       	push	r2
    410c:	3f 92       	push	r3
    410e:	4f 92       	push	r4
    4110:	5f 92       	push	r5
    4112:	6f 92       	push	r6
    4114:	7f 92       	push	r7
    4116:	8f 92       	push	r8
    4118:	9f 92       	push	r9
    411a:	af 92       	push	r10
    411c:	bf 92       	push	r11
    411e:	cf 92       	push	r12
    4120:	df 92       	push	r13
    4122:	ef 92       	push	r14
    4124:	ff 92       	push	r15
    4126:	0f 93       	push	r16
    4128:	1f 93       	push	r17
    412a:	df 93       	push	r29
    412c:	cf 93       	push	r28
    412e:	cd b7       	in	r28, 0x3d	; 61
    4130:	de b7       	in	r29, 0x3e	; 62
    4132:	a1 97       	sbiw	r28, 0x21	; 33
    4134:	0f b6       	in	r0, 0x3f	; 63
    4136:	f8 94       	cli
    4138:	de bf       	out	0x3e, r29	; 62
    413a:	0f be       	out	0x3f, r0	; 63
    413c:	cd bf       	out	0x3d, r28	; 61
    413e:	1c 01       	movw	r2, r24
  // Set the CC3000 inactivity timeout to 0 (never timeout).  This will ensure 
  // the CC3000 does not close the listening socket when it's idle for more than 
  // 60 seconds (the default timeout).  See more information from:
  // http://e2e.ti.com/support/low_power_rf/f/851/t/292664.aspx
  unsigned long aucDHCP       = 14400;
    4140:	80 e4       	ldi	r24, 0x40	; 64
    4142:	98 e3       	ldi	r25, 0x38	; 56
    4144:	a0 e0       	ldi	r26, 0x00	; 0
    4146:	b0 e0       	ldi	r27, 0x00	; 0
    4148:	8a 83       	std	Y+2, r24	; 0x02
    414a:	9b 83       	std	Y+3, r25	; 0x03
    414c:	ac 83       	std	Y+4, r26	; 0x04
    414e:	bd 83       	std	Y+5, r27	; 0x05
  unsigned long aucARP        = 3600;
    4150:	80 e1       	ldi	r24, 0x10	; 16
    4152:	9e e0       	ldi	r25, 0x0E	; 14
    4154:	a0 e0       	ldi	r26, 0x00	; 0
    4156:	b0 e0       	ldi	r27, 0x00	; 0
    4158:	8e 83       	std	Y+6, r24	; 0x06
    415a:	9f 83       	std	Y+7, r25	; 0x07
    415c:	a8 87       	std	Y+8, r26	; 0x08
    415e:	b9 87       	std	Y+9, r27	; 0x09
  unsigned long aucKeepalive  = 30;
    4160:	8e e1       	ldi	r24, 0x1E	; 30
    4162:	90 e0       	ldi	r25, 0x00	; 0
    4164:	a0 e0       	ldi	r26, 0x00	; 0
    4166:	b0 e0       	ldi	r27, 0x00	; 0
    4168:	8a 87       	std	Y+10, r24	; 0x0a
    416a:	9b 87       	std	Y+11, r25	; 0x0b
    416c:	ac 87       	std	Y+12, r26	; 0x0c
    416e:	bd 87       	std	Y+13, r27	; 0x0d
  unsigned long aucInactivity = 0;
    4170:	1e 86       	std	Y+14, r1	; 0x0e
    4172:	1f 86       	std	Y+15, r1	; 0x0f
    4174:	18 8a       	std	Y+16, r1	; 0x10
    4176:	19 8a       	std	Y+17, r1	; 0x11
  cc3k_int_poll();
    4178:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <cc3k_int_poll>
  if (netapp_timeout_values(&aucDHCP, &aucARP, &aucKeepalive, &aucInactivity) != 0) {
    417c:	ce 01       	movw	r24, r28
    417e:	02 96       	adiw	r24, 0x02	; 2
    4180:	be 01       	movw	r22, r28
    4182:	6a 5f       	subi	r22, 0xFA	; 250
    4184:	7f 4f       	sbci	r23, 0xFF	; 255
    4186:	ae 01       	movw	r20, r28
    4188:	46 5f       	subi	r20, 0xF6	; 246
    418a:	5f 4f       	sbci	r21, 0xFF	; 255
    418c:	9e 01       	movw	r18, r28
    418e:	22 5f       	subi	r18, 0xF2	; 242
    4190:	3f 4f       	sbci	r19, 0xFF	; 255
    4192:	0e 94 4a 0a 	call	0x1494	; 0x1494 <netapp_timeout_values>
    4196:	61 15       	cp	r22, r1
    4198:	71 05       	cpc	r23, r1
    419a:	81 05       	cpc	r24, r1
    419c:	91 05       	cpc	r25, r1
    419e:	09 f0       	breq	.+2      	; 0x41a2 <_ZN22Adafruit_CC3000_Server5beginEv+0x98>
    41a0:	67 c0       	rjmp	.+206    	; 0x4270 <_ZN22Adafruit_CC3000_Server5beginEv+0x166>
    CC3K_PRINTLN_F("Error setting inactivity timeout!");
    return;
  }
  // Create a TCP socket
  cc3k_int_poll();
    41a2:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <cc3k_int_poll>
  int16_t soc = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    41a6:	62 e0       	ldi	r22, 0x02	; 2
    41a8:	70 e0       	ldi	r23, 0x00	; 0
    41aa:	80 e0       	ldi	r24, 0x00	; 0
    41ac:	90 e0       	ldi	r25, 0x00	; 0
    41ae:	21 e0       	ldi	r18, 0x01	; 1
    41b0:	30 e0       	ldi	r19, 0x00	; 0
    41b2:	40 e0       	ldi	r20, 0x00	; 0
    41b4:	50 e0       	ldi	r21, 0x00	; 0
    41b6:	a6 e0       	ldi	r26, 0x06	; 6
    41b8:	ea 2e       	mov	r14, r26
    41ba:	f1 2c       	mov	r15, r1
    41bc:	01 2d       	mov	r16, r1
    41be:	11 2d       	mov	r17, r1
    41c0:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <socket>
    41c4:	8b 01       	movw	r16, r22
  if (soc < 0) {
    41c6:	77 fd       	sbrc	r23, 7
    41c8:	53 c0       	rjmp	.+166    	; 0x4270 <_ZN22Adafruit_CC3000_Server5beginEv+0x166>
    CC3K_PRINTLN_F("Couldn't create listening socket!");
    return;
  }
  // Set the socket's accept call as non-blocking.
  cc3k_int_poll();
    41ca:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <cc3k_int_poll>
  char arg = SOCK_ON; // nsd: looked in TI example code and they pass this as a 'short' in one example, and 'char' in two others. 'char' seems as likely work, and has no endianess issue
    41ce:	19 82       	std	Y+1, r1	; 0x01
  if (setsockopt(soc, SOL_SOCKET, SOCKOPT_ACCEPT_NONBLOCK, &arg, sizeof(arg)) < 0) {
    41d0:	28 01       	movw	r4, r16
    41d2:	66 24       	eor	r6, r6
    41d4:	57 fc       	sbrc	r5, 7
    41d6:	60 94       	com	r6
    41d8:	76 2c       	mov	r7, r6
    41da:	c3 01       	movw	r24, r6
    41dc:	b2 01       	movw	r22, r4
    41de:	2f ef       	ldi	r18, 0xFF	; 255
    41e0:	3f ef       	ldi	r19, 0xFF	; 255
    41e2:	40 e0       	ldi	r20, 0x00	; 0
    41e4:	50 e0       	ldi	r21, 0x00	; 0
    41e6:	f2 e0       	ldi	r31, 0x02	; 2
    41e8:	ef 2e       	mov	r14, r31
    41ea:	f1 2c       	mov	r15, r1
    41ec:	01 2d       	mov	r16, r1
    41ee:	11 2d       	mov	r17, r1
    41f0:	6e 01       	movw	r12, r28
    41f2:	08 94       	sec
    41f4:	c1 1c       	adc	r12, r1
    41f6:	d1 1c       	adc	r13, r1
    41f8:	e1 e0       	ldi	r30, 0x01	; 1
    41fa:	8e 2e       	mov	r8, r30
    41fc:	91 2c       	mov	r9, r1
    41fe:	a1 2c       	mov	r10, r1
    4200:	b1 2c       	mov	r11, r1
    4202:	0e 94 49 0b 	call	0x1692	; 0x1692 <setsockopt>
    4206:	97 fd       	sbrc	r25, 7
    4208:	33 c0       	rjmp	.+102    	; 0x4270 <_ZN22Adafruit_CC3000_Server5beginEv+0x166>
    CC3K_PRINTLN_F("Couldn't set socket as non-blocking!");
    return;
  }
  // Bind the socket to a TCP address.
  sockaddr_in address;
  address.sin_family = AF_INET;
    420a:	82 e0       	ldi	r24, 0x02	; 2
    420c:	90 e0       	ldi	r25, 0x00	; 0
    420e:	9b 8b       	std	Y+19, r25	; 0x13
    4210:	8a 8b       	std	Y+18, r24	; 0x12
  address.sin_addr.s_addr = htonl(0);     // Listen on any network interface, equivalent to INADDR_ANY in sockets programming.
    4212:	1e 8a       	std	Y+22, r1	; 0x16
    4214:	1f 8a       	std	Y+23, r1	; 0x17
    4216:	18 8e       	std	Y+24, r1	; 0x18
    4218:	19 8e       	std	Y+25, r1	; 0x19
  address.sin_port = htons(_port);        // Listen on the specified port.
    421a:	f1 01       	movw	r30, r2
    421c:	e3 50       	subi	r30, 0x03	; 3
    421e:	ff 4f       	sbci	r31, 0xFF	; 255
    4220:	90 81       	ld	r25, Z
    4222:	81 81       	ldd	r24, Z+1	; 0x01
    4224:	8c 8b       	std	Y+20, r24	; 0x14
    4226:	9d 8b       	std	Y+21, r25	; 0x15
  cc3k_int_poll();
    4228:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <cc3k_int_poll>
  if (bind(soc, (sockaddr*) &address, sizeof(address)) < 0) {
    422c:	c3 01       	movw	r24, r6
    422e:	b2 01       	movw	r22, r4
    4230:	ae 01       	movw	r20, r28
    4232:	4e 5e       	subi	r20, 0xEE	; 238
    4234:	5f 4f       	sbci	r21, 0xFF	; 255
    4236:	00 e1       	ldi	r16, 0x10	; 16
    4238:	10 e0       	ldi	r17, 0x00	; 0
    423a:	20 e0       	ldi	r18, 0x00	; 0
    423c:	30 e0       	ldi	r19, 0x00	; 0
    423e:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <bind>
    4242:	97 fd       	sbrc	r25, 7
    4244:	15 c0       	rjmp	.+42     	; 0x4270 <_ZN22Adafruit_CC3000_Server5beginEv+0x166>
    CC3K_PRINTLN_F("Error binding listen socket to address!");
    return;
  }
  // Start listening for connections.
  // The backlog parameter is 0 as it is not supported on TI's CC3000 firmware.
  cc3k_int_poll();
    4246:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <cc3k_int_poll>
  if (listen(soc, 0) < 0) {
    424a:	c3 01       	movw	r24, r6
    424c:	b2 01       	movw	r22, r4
    424e:	20 e0       	ldi	r18, 0x00	; 0
    4250:	30 e0       	ldi	r19, 0x00	; 0
    4252:	40 e0       	ldi	r20, 0x00	; 0
    4254:	50 e0       	ldi	r21, 0x00	; 0
    4256:	0e 94 a1 0c 	call	0x1942	; 0x1942 <listen>
    425a:	97 fd       	sbrc	r25, 7
    425c:	09 c0       	rjmp	.+18     	; 0x4270 <_ZN22Adafruit_CC3000_Server5beginEv+0x166>
    CC3K_PRINTLN_F("Error opening socket for listening!");
    return;
  }
  _listenSocket = soc;
    425e:	8f ef       	ldi	r24, 0xFF	; 255
    4260:	90 e0       	ldi	r25, 0x00	; 0
    4262:	28 0e       	add	r2, r24
    4264:	39 1e       	adc	r3, r25
    4266:	f1 01       	movw	r30, r2
    4268:	40 82       	st	Z, r4
    426a:	51 82       	std	Z+1, r5	; 0x01
    426c:	62 82       	std	Z+2, r6	; 0x02
    426e:	73 82       	std	Z+3, r7	; 0x03
}
    4270:	a1 96       	adiw	r28, 0x21	; 33
    4272:	0f b6       	in	r0, 0x3f	; 63
    4274:	f8 94       	cli
    4276:	de bf       	out	0x3e, r29	; 62
    4278:	0f be       	out	0x3f, r0	; 63
    427a:	cd bf       	out	0x3d, r28	; 61
    427c:	cf 91       	pop	r28
    427e:	df 91       	pop	r29
    4280:	1f 91       	pop	r17
    4282:	0f 91       	pop	r16
    4284:	ff 90       	pop	r15
    4286:	ef 90       	pop	r14
    4288:	df 90       	pop	r13
    428a:	cf 90       	pop	r12
    428c:	bf 90       	pop	r11
    428e:	af 90       	pop	r10
    4290:	9f 90       	pop	r9
    4292:	8f 90       	pop	r8
    4294:	7f 90       	pop	r7
    4296:	6f 90       	pop	r6
    4298:	5f 90       	pop	r5
    429a:	4f 90       	pop	r4
    429c:	3f 90       	pop	r3
    429e:	2f 90       	pop	r2
    42a0:	08 95       	ret

000042a2 <_ZN22Adafruit_CC3000_ServerC1Ej>:
  Adafruit_CC3000_Server implementation
*/
/**************************************************************************/

// Construct a TCP server to listen on the specified port.
Adafruit_CC3000_Server::Adafruit_CC3000_Server(uint16_t port)
    42a2:	ef 92       	push	r14
    42a4:	ff 92       	push	r15
    42a6:	0f 93       	push	r16
    42a8:	1f 93       	push	r17
    42aa:	8c 01       	movw	r16, r24
    42ac:	7b 01       	movw	r14, r22
    42ae:	fc 01       	movw	r30, r24
    42b0:	13 82       	std	Z+3, r1	; 0x03
    42b2:	12 82       	std	Z+2, r1	; 0x02
  : _port(port)
  , _listenSocket(-1)
    42b4:	80 e0       	ldi	r24, 0x00	; 0
    42b6:	93 e0       	ldi	r25, 0x03	; 3
    42b8:	91 83       	std	Z+1, r25	; 0x01
    42ba:	80 83       	st	Z, r24
    42bc:	c8 01       	movw	r24, r16
    42be:	04 96       	adiw	r24, 0x04	; 4
    42c0:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN22Adafruit_CC3000_ClientC1Ev>
    42c4:	c8 01       	movw	r24, r16
    42c6:	89 5a       	subi	r24, 0xA9	; 169
    42c8:	9f 4f       	sbci	r25, 0xFF	; 255
    42ca:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN22Adafruit_CC3000_ClientC1Ev>
    42ce:	c8 01       	movw	r24, r16
    42d0:	86 55       	subi	r24, 0x56	; 86
    42d2:	9f 4f       	sbci	r25, 0xFF	; 255
    42d4:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN22Adafruit_CC3000_ClientC1Ev>
    42d8:	03 50       	subi	r16, 0x03	; 3
    42da:	1f 4f       	sbci	r17, 0xFF	; 255
    42dc:	f8 01       	movw	r30, r16
    42de:	e1 92       	st	Z+, r14
    42e0:	f1 92       	st	Z+, r15
    42e2:	8f ef       	ldi	r24, 0xFF	; 255
    42e4:	9f ef       	ldi	r25, 0xFF	; 255
    42e6:	af ef       	ldi	r26, 0xFF	; 255
    42e8:	bf ef       	ldi	r27, 0xFF	; 255
    42ea:	80 83       	st	Z, r24
    42ec:	91 83       	std	Z+1, r25	; 0x01
    42ee:	a2 83       	std	Z+2, r26	; 0x02
    42f0:	b3 83       	std	Z+3, r27	; 0x03
{ }
    42f2:	1f 91       	pop	r17
    42f4:	0f 91       	pop	r16
    42f6:	ff 90       	pop	r15
    42f8:	ef 90       	pop	r14
    42fa:	08 95       	ret

000042fc <_ZN25Adafruit_CC3000_ClientRef5closeEv>:
  HANDLE_NULL(_client, 0);
  return _client->read();
}

int32_t Adafruit_CC3000_ClientRef::close(void) {
  HANDLE_NULL(_client, 0);
    42fc:	fc 01       	movw	r30, r24
    42fe:	84 85       	ldd	r24, Z+12	; 0x0c
    4300:	95 85       	ldd	r25, Z+13	; 0x0d
    4302:	00 97       	sbiw	r24, 0x00	; 0
    4304:	29 f4       	brne	.+10     	; 0x4310 <_ZN25Adafruit_CC3000_ClientRef5closeEv+0x14>
    4306:	20 e0       	ldi	r18, 0x00	; 0
    4308:	30 e0       	ldi	r19, 0x00	; 0
    430a:	40 e0       	ldi	r20, 0x00	; 0
    430c:	50 e0       	ldi	r21, 0x00	; 0
    430e:	04 c0       	rjmp	.+8      	; 0x4318 <_ZN25Adafruit_CC3000_ClientRef5closeEv+0x1c>
  return _client->close();
    4310:	0e 94 56 16 	call	0x2cac	; 0x2cac <_ZN22Adafruit_CC3000_Client5closeEv>
    4314:	9b 01       	movw	r18, r22
    4316:	ac 01       	movw	r20, r24
}
    4318:	b9 01       	movw	r22, r18
    431a:	ca 01       	movw	r24, r20
    431c:	08 95       	ret

0000431e <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPK19__FlashStringHelper>:
  HANDLE_NULL(_client, 0);
  return _client->fastrprint(ifsh);
}

size_t Adafruit_CC3000_ClientRef::fastrprintln(const __FlashStringHelper *ifsh) {
  HANDLE_NULL(_client, 0);
    431e:	fc 01       	movw	r30, r24
    4320:	84 85       	ldd	r24, Z+12	; 0x0c
    4322:	95 85       	ldd	r25, Z+13	; 0x0d
    4324:	00 97       	sbiw	r24, 0x00	; 0
    4326:	19 f4       	brne	.+6      	; 0x432e <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPK19__FlashStringHelper+0x10>
    4328:	20 e0       	ldi	r18, 0x00	; 0
    432a:	30 e0       	ldi	r19, 0x00	; 0
    432c:	03 c0       	rjmp	.+6      	; 0x4334 <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPK19__FlashStringHelper+0x16>
  return _client->fastrprintln(ifsh);
    432e:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <_ZN22Adafruit_CC3000_Client12fastrprintlnEPK19__FlashStringHelper>
    4332:	9c 01       	movw	r18, r24
}
    4334:	c9 01       	movw	r24, r18
    4336:	08 95       	ret

00004338 <_ZN25Adafruit_CC3000_ClientRef10fastrprintEPK19__FlashStringHelper>:
  HANDLE_NULL(_client, 0);
  return _client->fastrprintln(str);
}

size_t Adafruit_CC3000_ClientRef::fastrprint(const __FlashStringHelper *ifsh) {
  HANDLE_NULL(_client, 0);
    4338:	fc 01       	movw	r30, r24
    433a:	84 85       	ldd	r24, Z+12	; 0x0c
    433c:	95 85       	ldd	r25, Z+13	; 0x0d
    433e:	00 97       	sbiw	r24, 0x00	; 0
    4340:	19 f4       	brne	.+6      	; 0x4348 <_ZN25Adafruit_CC3000_ClientRef10fastrprintEPK19__FlashStringHelper+0x10>
    4342:	20 e0       	ldi	r18, 0x00	; 0
    4344:	30 e0       	ldi	r19, 0x00	; 0
    4346:	03 c0       	rjmp	.+6      	; 0x434e <_ZN25Adafruit_CC3000_ClientRef10fastrprintEPK19__FlashStringHelper+0x16>
  return _client->fastrprint(ifsh);
    4348:	0e 94 84 17 	call	0x2f08	; 0x2f08 <_ZN22Adafruit_CC3000_Client10fastrprintEPK19__FlashStringHelper>
    434c:	9c 01       	movw	r18, r24
}
    434e:	c9 01       	movw	r24, r18
    4350:	08 95       	ret

00004352 <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPc>:
  HANDLE_NULL(_client, 0);
  return _client->fastrprint(str);
}

size_t Adafruit_CC3000_ClientRef::fastrprintln(char *str) {
  HANDLE_NULL(_client, 0);
    4352:	fc 01       	movw	r30, r24
    4354:	84 85       	ldd	r24, Z+12	; 0x0c
    4356:	95 85       	ldd	r25, Z+13	; 0x0d
    4358:	00 97       	sbiw	r24, 0x00	; 0
    435a:	19 f4       	brne	.+6      	; 0x4362 <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPc+0x10>
    435c:	20 e0       	ldi	r18, 0x00	; 0
    435e:	30 e0       	ldi	r19, 0x00	; 0
    4360:	03 c0       	rjmp	.+6      	; 0x4368 <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPc+0x16>
  return _client->fastrprintln(str);
    4362:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZN22Adafruit_CC3000_Client12fastrprintlnEPc>
    4366:	9c 01       	movw	r18, r24
}
    4368:	c9 01       	movw	r24, r18
    436a:	08 95       	ret

0000436c <_ZN25Adafruit_CC3000_ClientRef10fastrprintEPKc>:
  HANDLE_NULL(_client, 0);
  return _client->write(c);
}

size_t Adafruit_CC3000_ClientRef::fastrprint(const char *str) {
  HANDLE_NULL(_client, 0);
    436c:	fc 01       	movw	r30, r24
    436e:	84 85       	ldd	r24, Z+12	; 0x0c
    4370:	95 85       	ldd	r25, Z+13	; 0x0d
    4372:	00 97       	sbiw	r24, 0x00	; 0
    4374:	19 f4       	brne	.+6      	; 0x437c <_ZN25Adafruit_CC3000_ClientRef10fastrprintEPKc+0x10>
    4376:	20 e0       	ldi	r18, 0x00	; 0
    4378:	30 e0       	ldi	r19, 0x00	; 0
    437a:	03 c0       	rjmp	.+6      	; 0x4382 <_ZN25Adafruit_CC3000_ClientRef10fastrprintEPKc+0x16>
  return _client->fastrprint(str);
    437c:	0e 94 8c 18 	call	0x3118	; 0x3118 <_ZN22Adafruit_CC3000_Client10fastrprintEPKc>
    4380:	9c 01       	movw	r18, r24
}
    4382:	c9 01       	movw	r24, r18
    4384:	08 95       	ret

00004386 <_Z15sendDriverPatchPm>:
//!
//! @brief  The function returns a pointer to the driver patch:
//!         since there is no patch in the host - it returns 0
//
//*****************************************************************************
char *sendDriverPatch(unsigned long *Length) {
    4386:	fc 01       	movw	r30, r24
  *Length = 0;
    4388:	10 82       	st	Z, r1
    438a:	11 82       	std	Z+1, r1	; 0x01
    438c:	12 82       	std	Z+2, r1	; 0x02
    438e:	13 82       	std	Z+3, r1	; 0x03
  return NULL;
}
    4390:	80 e0       	ldi	r24, 0x00	; 0
    4392:	90 e0       	ldi	r25, 0x00	; 0
    4394:	08 95       	ret

00004396 <_Z19sendBootLoaderPatchPm>:
//!
//! @brief  The function returns a pointer to the boot loader patch:
//!         since there is no patch in the host - it returns 0
//
//*****************************************************************************
char *sendBootLoaderPatch(unsigned long *Length) {
    4396:	fc 01       	movw	r30, r24
  *Length = 0;
    4398:	10 82       	st	Z, r1
    439a:	11 82       	std	Z+1, r1	; 0x01
    439c:	12 82       	std	Z+2, r1	; 0x02
    439e:	13 82       	std	Z+3, r1	; 0x03
  return NULL;
}
    43a0:	80 e0       	ldi	r24, 0x00	; 0
    43a2:	90 e0       	ldi	r25, 0x00	; 0
    43a4:	08 95       	ret

000043a6 <_Z13sendWLFWPatchPm>:
//!
//! @brief  The function returns a pointer to the FW patch:
//!         since there is no patch in the host - it returns 0
//
//*****************************************************************************
char *sendWLFWPatch(unsigned long *Length) {
    43a6:	fc 01       	movw	r30, r24
  *Length = 0;
    43a8:	10 82       	st	Z, r1
    43aa:	11 82       	std	Z+1, r1	; 0x01
    43ac:	12 82       	std	Z+2, r1	; 0x02
    43ae:	13 82       	std	Z+3, r1	; 0x03
  return NULL;
}
    43b0:	80 e0       	ldi	r24, 0x00	; 0
    43b2:	90 e0       	ldi	r25, 0x00	; 0
    43b4:	08 95       	ret

000043b6 <_Z20ReadWlanInterruptPinv>:
{
  DEBUGPRINT_F("\tCC3000: ReadWlanInterruptPin - ");
  DEBUGPRINT_DEC(digitalRead(g_irqPin));
  DEBUGPRINT_F("\n\r");

  return(digitalRead(g_irqPin));
    43b6:	80 91 68 03 	lds	r24, 0x0368
    43ba:	0e 94 b5 31 	call	0x636a	; 0x636a <digitalRead>
    43be:	9c 01       	movw	r18, r24
    43c0:	44 27       	eor	r20, r20
    43c2:	37 fd       	sbrc	r19, 7
    43c4:	40 95       	com	r20
    43c6:	54 2f       	mov	r21, r20
}
    43c8:	b9 01       	movw	r22, r18
    43ca:	ca 01       	movw	r24, r20
    43cc:	08 95       	ret

000043ce <_Z12WriteWlanPinh>:
    DEBUGPRINT_F("\tCC3000: WriteWlanPin - ");
    DEBUGPRINT_DEC(val);
    DEBUGPRINT_F("\n\r");
    delay(1);
  }
  if (val)
    43ce:	88 23       	and	r24, r24
    43d0:	21 f0       	breq	.+8      	; 0x43da <_Z12WriteWlanPinh+0xc>
  {
    digitalWrite(g_vbatPin, HIGH);
    43d2:	80 91 69 03 	lds	r24, 0x0369
    43d6:	61 e0       	ldi	r22, 0x01	; 1
    43d8:	03 c0       	rjmp	.+6      	; 0x43e0 <_Z12WriteWlanPinh+0x12>
  }
  else
  {
    digitalWrite(g_vbatPin, LOW);
    43da:	80 91 69 03 	lds	r24, 0x0369
    43de:	60 e0       	ldi	r22, 0x00	; 0
    43e0:	0e 94 61 31 	call	0x62c2	; 0x62c2 <digitalWrite>
    43e4:	08 95       	ret

000043e6 <_Z20WlanInterruptDisablev>:
 */
/**************************************************************************/
void WlanInterruptDisable()
{
  DEBUGPRINT_F("\tCC3000: WlanInterruptDisable\n\r");
  ccspi_int_enabled = 0;
    43e6:	10 92 c9 04 	sts	0x04C9, r1
  detachInterrupt(g_IRQnum);
    43ea:	80 91 6a 03 	lds	r24, 0x036A
    43ee:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <detachInterrupt>
}
    43f2:	08 95       	ret

000043f4 <_Z11SpiPauseSpiv>:
/**************************************************************************/
void SpiPauseSpi(void)
{
  DEBUGPRINT_F("\tCC3000: SpiPauseSpi\n\r");

  ccspi_int_enabled = 0;
    43f4:	10 92 c9 04 	sts	0x04C9, r1
  detachInterrupt(g_IRQnum);
    43f8:	80 91 6a 03 	lds	r24, 0x036A
    43fc:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <detachInterrupt>
}
    4400:	08 95       	ret

00004402 <_Z22SpiTriggerRxProcessingv>:
/**************************************************************************/
/*!

 */
/**************************************************************************/
void SpiTriggerRxProcessing(void)
    4402:	cf 93       	push	r28
    4404:	df 93       	push	r29
{
  DEBUGPRINT_F("\tCC3000: SpiTriggerRxProcessing\n\r");

  /* Trigger Rx processing */
  SpiPauseSpi();
    4406:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <_Z11SpiPauseSpiv>
  CC3000_DEASSERT_CS;
    440a:	80 91 67 03 	lds	r24, 0x0367
    440e:	61 e0       	ldi	r22, 0x01	; 1
    4410:	0e 94 61 31 	call	0x62c2	; 0x62c2 <digitalWrite>
    4414:	80 91 b3 03 	lds	r24, 0x03B3
    4418:	8c bd       	out	0x2c, r24	; 44
    441a:	80 91 b2 03 	lds	r24, 0x03B2
    441e:	88 23       	and	r24, r24
    4420:	19 f0       	breq	.+6      	; 0x4428 <_Z22SpiTriggerRxProcessingv+0x26>
    4422:	8d b5       	in	r24, 0x2d	; 45
    4424:	81 60       	ori	r24, 0x01	; 1
    4426:	02 c0       	rjmp	.+4      	; 0x442c <_Z22SpiTriggerRxProcessingv+0x2a>
    4428:	8d b5       	in	r24, 0x2d	; 45
    442a:	8e 7f       	andi	r24, 0xFE	; 254
    442c:	8d bd       	out	0x2d, r24	; 45

  //DEBUGPRINT_F("Magic?\n\r");
  /* The magic number that resides at the end of the TX/RX buffer (1 byte after the allocated size)
   * for the purpose of detection of the overrun. If the magic number is overriten - buffer overrun
   * occurred - and we will stuck here forever! */
  if (sSpiInformation.pRxPacket[CC3000_RX_BUFFER_SIZE - 1] != CC3000_BUFFER_MAGIC_NUMBER)
    442e:	c0 91 c0 03 	lds	r28, 0x03C0
    4432:	d0 91 c1 03 	lds	r29, 0x03C1
    4436:	ce 57       	subi	r28, 0x7E	; 126
    4438:	df 4f       	sbci	r29, 0xFF	; 255
    443a:	88 81       	ld	r24, Y
    443c:	c2 58       	subi	r28, 0x82	; 130
    443e:	d0 40       	sbci	r29, 0x00	; 0
    4440:	8e 3d       	cpi	r24, 0xDE	; 222
    4442:	09 f0       	breq	.+2      	; 0x4446 <_Z22SpiTriggerRxProcessingv+0x44>
    4444:	ff cf       	rjmp	.-2      	; 0x4444 <_Z22SpiTriggerRxProcessingv+0x42>
    DEBUGPRINT_F("\tCC3000: ERROR - magic number missing!\n\r");
    while (1);
  }

  //DEBUGPRINT_F("OK!\n\r");
  sSpiInformation.ulSpiState = eSPI_STATE_IDLE;
    4446:	82 e0       	ldi	r24, 0x02	; 2
    4448:	90 e0       	ldi	r25, 0x00	; 0
    444a:	a0 e0       	ldi	r26, 0x00	; 0
    444c:	b0 e0       	ldi	r27, 0x00	; 0
    444e:	80 93 ba 03 	sts	0x03BA, r24
    4452:	90 93 bb 03 	sts	0x03BB, r25
    4456:	a0 93 bc 03 	sts	0x03BC, r26
    445a:	b0 93 bd 03 	sts	0x03BD, r27
  sSpiInformation.SPIRxHandler(sSpiInformation.pRxPacket + SPI_HEADER_SIZE);
    445e:	e0 91 b4 03 	lds	r30, 0x03B4
    4462:	f0 91 b5 03 	lds	r31, 0x03B5
    4466:	ce 01       	movw	r24, r28
    4468:	05 96       	adiw	r24, 0x05	; 5
    446a:	09 95       	icall
}
    446c:	df 91       	pop	r29
    446e:	cf 91       	pop	r28
    4470:	08 95       	ret

00004472 <_Z19WlanInterruptEnablev>:
/**************************************************************************/
void WlanInterruptEnable()
{
  DEBUGPRINT_F("\tCC3000: WlanInterruptEnable.\n\r");
  // delay(100);
  ccspi_int_enabled = 1;
    4472:	81 e0       	ldi	r24, 0x01	; 1
    4474:	80 93 c9 04 	sts	0x04C9, r24
  attachInterrupt(g_IRQnum, SPI_IRQ, FALLING);
    4478:	80 91 6a 03 	lds	r24, 0x036A
    447c:	66 ee       	ldi	r22, 0xE6	; 230
    447e:	72 e2       	ldi	r23, 0x22	; 34
    4480:	42 e0       	ldi	r20, 0x02	; 2
    4482:	50 e0       	ldi	r21, 0x00	; 0
    4484:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <attachInterrupt>
}
    4488:	08 95       	ret

0000448a <_Z12SpiResumeSpiv>:
/**************************************************************************/
void SpiResumeSpi(void)
{
  DEBUGPRINT_F("\tCC3000: SpiResumeSpi\n\r");

  ccspi_int_enabled = 1;
    448a:	81 e0       	ldi	r24, 0x01	; 1
    448c:	80 93 c9 04 	sts	0x04C9, r24
  attachInterrupt(g_IRQnum, SPI_IRQ, FALLING);
    4490:	80 91 6a 03 	lds	r24, 0x036A
    4494:	66 ee       	ldi	r22, 0xE6	; 230
    4496:	72 e2       	ldi	r23, 0x22	; 34
    4498:	42 e0       	ldi	r20, 0x02	; 2
    449a:	50 e0       	ldi	r21, 0x00	; 0
    449c:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <attachInterrupt>
}
    44a0:	08 95       	ret

000044a2 <_Z22SpiReadDataSynchronousPht>:
/**************************************************************************/
/*!

 */
/**************************************************************************/
void SpiReadDataSynchronous(unsigned char *data, unsigned short size)
    44a2:	0f 93       	push	r16
    44a4:	1f 93       	push	r17
    44a6:	cf 93       	push	r28
    44a8:	df 93       	push	r29
    44aa:	8c 01       	movw	r16, r24
    44ac:	eb 01       	movw	r28, r22
{
  unsigned short i = 0;
  
  DEBUGPRINT_F("\tCC3000: SpiReadDataSynchronous\n\r");
  SPI.setDataMode(SPI_MODE1);
    44ae:	84 e0       	ldi	r24, 0x04	; 4
    44b0:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <_ZN8SPIClass11setDataModeEh>
    44b4:	20 e0       	ldi	r18, 0x00	; 0
    44b6:	30 e0       	ldi	r19, 0x00	; 0
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    44b8:	93 e0       	ldi	r25, 0x03	; 3
    44ba:	0b c0       	rjmp	.+22     	; 0x44d2 <_Z22SpiReadDataSynchronousPht+0x30>
    44bc:	9e bd       	out	0x2e, r25	; 46
  while (!(SPSR & _BV(SPIF)))
    44be:	0d b4       	in	r0, 0x2d	; 45
    44c0:	07 fe       	sbrs	r0, 7
    44c2:	fd cf       	rjmp	.-6      	; 0x44be <_Z22SpiReadDataSynchronousPht+0x1c>
    ;
  return SPDR;
    44c4:	8e b5       	in	r24, 0x2e	; 46
  for (i = 0; i < size; i ++)
  {
    data[i] = SPI.transfer(0x03);
    44c6:	f8 01       	movw	r30, r16
    44c8:	e2 0f       	add	r30, r18
    44ca:	f3 1f       	adc	r31, r19
    44cc:	80 83       	st	Z, r24
{
  unsigned short i = 0;
  
  DEBUGPRINT_F("\tCC3000: SpiReadDataSynchronous\n\r");
  SPI.setDataMode(SPI_MODE1);
  for (i = 0; i < size; i ++)
    44ce:	2f 5f       	subi	r18, 0xFF	; 255
    44d0:	3f 4f       	sbci	r19, 0xFF	; 255
    44d2:	2c 17       	cp	r18, r28
    44d4:	3d 07       	cpc	r19, r29
    44d6:	90 f3       	brcs	.-28     	; 0x44bc <_Z22SpiReadDataSynchronousPht+0x1a>
    data[i] = SPI.transfer(0x03);
    DEBUGPRINT_F("  ");
    DEBUGPRINT_HEX(data[i]);
  }
  DEBUGPRINT_F("\n\r");
}
    44d8:	df 91       	pop	r29
    44da:	cf 91       	pop	r28
    44dc:	1f 91       	pop	r17
    44de:	0f 91       	pop	r16
    44e0:	08 95       	ret

000044e2 <_Z15SpiReadDataContv>:
/**************************************************************************/
/*!

 */
/**************************************************************************/
long SpiReadDataCont(void)
    44e2:	ef 92       	push	r14
    44e4:	ff 92       	push	r15
    44e6:	0f 93       	push	r16
    44e8:	1f 93       	push	r17
    44ea:	cf 93       	push	r28
    44ec:	df 93       	push	r29
  unsigned char *evnt_buff, type;

  DEBUGPRINT_F("\tCC3000: SpiReadDataCont\n\r");

  /* Determine what type of packet we have */
  evnt_buff =  sSpiInformation.pRxPacket;
    44ee:	c0 91 c0 03 	lds	r28, 0x03C0
    44f2:	d0 91 c1 03 	lds	r29, 0x03C1
  data_to_recv = 0;
  STREAM_TO_UINT8((uint8_t *)(evnt_buff + SPI_HEADER_SIZE), HCI_PACKET_TYPE_OFFSET, type);

  switch(type)
    44f6:	8d 81       	ldd	r24, Y+5	; 0x05
    44f8:	82 30       	cpi	r24, 0x02	; 2
    44fa:	21 f0       	breq	.+8      	; 0x4504 <_Z15SpiReadDataContv+0x22>
    44fc:	84 30       	cpi	r24, 0x04	; 4
    44fe:	09 f0       	breq	.+2      	; 0x4502 <_Z15SpiReadDataContv+0x20>
    4500:	47 c0       	rjmp	.+142    	; 0x4590 <_Z15SpiReadDataContv+0xae>
    4502:	1b c0       	rjmp	.+54     	; 0x453a <_Z15SpiReadDataContv+0x58>
  {
    case HCI_TYPE_DATA:
      {
        /* We need to read the rest of data.. */
        STREAM_TO_UINT16((char *)(evnt_buff + SPI_HEADER_SIZE), HCI_DATA_LENGTH_OFFSET, data_to_recv);
    4504:	ce 01       	movw	r24, r28
    4506:	05 96       	adiw	r24, 0x05	; 5
    4508:	63 e0       	ldi	r22, 0x03	; 3
    450a:	70 e0       	ldi	r23, 0x00	; 0
    450c:	0e 94 4d 02 	call	0x49a	; 0x49a <STREAM_TO_UINT16_f>
    4510:	9c 01       	movw	r18, r24
    4512:	40 e0       	ldi	r20, 0x00	; 0
    4514:	50 e0       	ldi	r21, 0x00	; 0
        if (!((HEADERS_SIZE_EVNT + data_to_recv) & 1))
    4516:	80 fd       	sbrc	r24, 0
    4518:	05 c0       	rjmp	.+10     	; 0x4524 <_Z15SpiReadDataContv+0x42>
        {
          data_to_recv++;
    451a:	2f 5f       	subi	r18, 0xFF	; 255
    451c:	3f 4f       	sbci	r19, 0xFF	; 255
    451e:	4f 4f       	sbci	r20, 0xFF	; 255
    4520:	5f 4f       	sbci	r21, 0xFF	; 255
    4522:	05 c0       	rjmp	.+10     	; 0x452e <_Z15SpiReadDataContv+0x4c>
        }

        if (data_to_recv)
    4524:	21 15       	cp	r18, r1
    4526:	31 05       	cpc	r19, r1
    4528:	41 05       	cpc	r20, r1
    452a:	51 05       	cpc	r21, r1
    452c:	89 f1       	breq	.+98     	; 0x4590 <_Z15SpiReadDataContv+0xae>
        {
          SpiReadDataSynchronous(evnt_buff + HEADERS_SIZE_EVNT, data_to_recv);
    452e:	ce 01       	movw	r24, r28
    4530:	0a 96       	adiw	r24, 0x0a	; 10
    4532:	b9 01       	movw	r22, r18
    4534:	0e 94 51 22 	call	0x44a2	; 0x44a2 <_Z22SpiReadDataSynchronousPht>
    4538:	2b c0       	rjmp	.+86     	; 0x4590 <_Z15SpiReadDataContv+0xae>
        break;
      }
    case HCI_TYPE_EVNT:
      {
        /* Calculate the rest length of the data */
        STREAM_TO_UINT8((char *)(evnt_buff + SPI_HEADER_SIZE), HCI_EVENT_LENGTH_OFFSET, data_to_recv);
    453a:	88 85       	ldd	r24, Y+8	; 0x08
    453c:	28 2f       	mov	r18, r24
    453e:	30 e0       	ldi	r19, 0x00	; 0
    4540:	40 e0       	ldi	r20, 0x00	; 0
    4542:	50 e0       	ldi	r21, 0x00	; 0
        data_to_recv -= 1;
    4544:	79 01       	movw	r14, r18
    4546:	8a 01       	movw	r16, r20
    4548:	08 94       	sec
    454a:	e1 08       	sbc	r14, r1
    454c:	f1 08       	sbc	r15, r1
    454e:	01 09       	sbc	r16, r1
    4550:	11 09       	sbc	r17, r1

        /* Add padding byte if needed */
        if ((HEADERS_SIZE_EVNT + data_to_recv) & 1)
    4552:	da 01       	movw	r26, r20
    4554:	c9 01       	movw	r24, r18
    4556:	09 96       	adiw	r24, 0x09	; 9
    4558:	a1 1d       	adc	r26, r1
    455a:	b1 1d       	adc	r27, r1
    455c:	80 ff       	sbrs	r24, 0
    455e:	02 c0       	rjmp	.+4      	; 0x4564 <_Z15SpiReadDataContv+0x82>
    4560:	79 01       	movw	r14, r18
    4562:	8a 01       	movw	r16, r20
        {
          data_to_recv++;
        }

        if (data_to_recv)
    4564:	e1 14       	cp	r14, r1
    4566:	f1 04       	cpc	r15, r1
    4568:	01 05       	cpc	r16, r1
    456a:	11 05       	cpc	r17, r1
    456c:	29 f0       	breq	.+10     	; 0x4578 <_Z15SpiReadDataContv+0x96>
        {
          SpiReadDataSynchronous(evnt_buff + HEADERS_SIZE_EVNT, data_to_recv);
    456e:	ce 01       	movw	r24, r28
    4570:	0a 96       	adiw	r24, 0x0a	; 10
    4572:	b7 01       	movw	r22, r14
    4574:	0e 94 51 22 	call	0x44a2	; 0x44a2 <_Z22SpiReadDataSynchronousPht>
        }

        sSpiInformation.ulSpiState = eSPI_STATE_READ_EOT;
    4578:	88 e0       	ldi	r24, 0x08	; 8
    457a:	90 e0       	ldi	r25, 0x00	; 0
    457c:	a0 e0       	ldi	r26, 0x00	; 0
    457e:	b0 e0       	ldi	r27, 0x00	; 0
    4580:	80 93 ba 03 	sts	0x03BA, r24
    4584:	90 93 bb 03 	sts	0x03BB, r25
    4588:	a0 93 bc 03 	sts	0x03BC, r26
    458c:	b0 93 bd 03 	sts	0x03BD, r27
        break;
      }
  }

  return (0);
}
    4590:	60 e0       	ldi	r22, 0x00	; 0
    4592:	70 e0       	ldi	r23, 0x00	; 0
    4594:	80 e0       	ldi	r24, 0x00	; 0
    4596:	90 e0       	ldi	r25, 0x00	; 0
    4598:	df 91       	pop	r29
    459a:	cf 91       	pop	r28
    459c:	1f 91       	pop	r17
    459e:	0f 91       	pop	r16
    45a0:	ff 90       	pop	r15
    45a2:	ef 90       	pop	r14
    45a4:	08 95       	ret

000045a6 <_Z20SSIContReadOperationv>:
void SSIContReadOperation(void)
{
  DEBUGPRINT_F("\tCC3000: SpiContReadOperation\n\r");
  
  /* The header was read - continue with  the payload read */
  if (!SpiReadDataCont())
    45a6:	0e 94 71 22 	call	0x44e2	; 0x44e2 <_Z15SpiReadDataContv>
    45aa:	61 15       	cp	r22, r1
    45ac:	71 05       	cpc	r23, r1
    45ae:	81 05       	cpc	r24, r1
    45b0:	91 05       	cpc	r25, r1
    45b2:	11 f4       	brne	.+4      	; 0x45b8 <_Z20SSIContReadOperationv+0x12>
  {
    /* All the data was read - finalize handling by switching to teh task
     *  and calling from task Event Handler */
    //DEBUGPRINT_F("SPItrig\n\r");
    SpiTriggerRxProcessing();
    45b4:	0e 94 01 22 	call	0x4402	; 0x4402 <_Z22SpiTriggerRxProcessingv>
    45b8:	08 95       	ret

000045ba <_Z13SpiReadHeaderv>:
/**************************************************************************/
void SpiReadHeader(void)
{
  DEBUGPRINT_F("\tCC3000: SpiReadHeader\n\r");

  SpiReadDataSynchronous(sSpiInformation.pRxPacket, HEADERS_SIZE_EVNT);
    45ba:	80 91 c0 03 	lds	r24, 0x03C0
    45be:	90 91 c1 03 	lds	r25, 0x03C1
    45c2:	6a e0       	ldi	r22, 0x0A	; 10
    45c4:	70 e0       	ldi	r23, 0x00	; 0
    45c6:	0e 94 51 22 	call	0x44a2	; 0x44a2 <_Z22SpiReadDataSynchronousPht>
}
    45ca:	08 95       	ret

000045cc <_Z7SPI_IRQv>:
 */
/**************************************************************************/

void SPI_IRQ(void)
{
  ccspi_is_in_irq = 1;
    45cc:	81 e0       	ldi	r24, 0x01	; 1
    45ce:	80 93 c8 04 	sts	0x04C8, r24

  DEBUGPRINT_F("\tCC3000: Entering SPI_IRQ\n\r");
    
  if (sSpiInformation.ulSpiState == eSPI_STATE_POWERUP)
    45d2:	80 91 ba 03 	lds	r24, 0x03BA
    45d6:	90 91 bb 03 	lds	r25, 0x03BB
    45da:	a0 91 bc 03 	lds	r26, 0x03BC
    45de:	b0 91 bd 03 	lds	r27, 0x03BD
    45e2:	00 97       	sbiw	r24, 0x00	; 0
    45e4:	a1 05       	cpc	r26, r1
    45e6:	b1 05       	cpc	r27, r1
    45e8:	69 f4       	brne	.+26     	; 0x4604 <_Z7SPI_IRQv+0x38>
  {
    /* IRQ line was low ... perform a callback on the HCI Layer */
    sSpiInformation.ulSpiState = eSPI_STATE_INITIALIZED;
    45ea:	81 e0       	ldi	r24, 0x01	; 1
    45ec:	90 e0       	ldi	r25, 0x00	; 0
    45ee:	a0 e0       	ldi	r26, 0x00	; 0
    45f0:	b0 e0       	ldi	r27, 0x00	; 0
    45f2:	80 93 ba 03 	sts	0x03BA, r24
    45f6:	90 93 bb 03 	sts	0x03BB, r25
    45fa:	a0 93 bc 03 	sts	0x03BC, r26
    45fe:	b0 93 bd 03 	sts	0x03BD, r27
    4602:	76 c0       	rjmp	.+236    	; 0x46f0 <_Z7SPI_IRQv+0x124>
  }
  else if (sSpiInformation.ulSpiState == eSPI_STATE_IDLE)
    4604:	82 30       	cpi	r24, 0x02	; 2
    4606:	91 05       	cpc	r25, r1
    4608:	a1 05       	cpc	r26, r1
    460a:	b1 05       	cpc	r27, r1
    460c:	b1 f5       	brne	.+108    	; 0x467a <_Z7SPI_IRQv+0xae>
  {
    //DEBUGPRINT_F("IDLE\n\r");
    sSpiInformation.ulSpiState = eSPI_STATE_READ_IRQ;    
    460e:	86 e0       	ldi	r24, 0x06	; 6
    4610:	90 e0       	ldi	r25, 0x00	; 0
    4612:	a0 e0       	ldi	r26, 0x00	; 0
    4614:	b0 e0       	ldi	r27, 0x00	; 0
    4616:	80 93 ba 03 	sts	0x03BA, r24
    461a:	90 93 bb 03 	sts	0x03BB, r25
    461e:	a0 93 bc 03 	sts	0x03BC, r26
    4622:	b0 93 bd 03 	sts	0x03BD, r27
    /* IRQ line goes down - start reception */

    CC3000_ASSERT_CS;
    4626:	80 91 67 03 	lds	r24, 0x0367
    462a:	60 e0       	ldi	r22, 0x00	; 0
    462c:	0e 94 61 31 	call	0x62c2	; 0x62c2 <digitalWrite>
    4630:	8c b5       	in	r24, 0x2c	; 44
    4632:	80 93 b3 03 	sts	0x03B3, r24
    4636:	8d b5       	in	r24, 0x2d	; 45
    4638:	81 70       	andi	r24, 0x01	; 1
    463a:	80 93 b2 03 	sts	0x03B2, r24
    463e:	80 91 b0 03 	lds	r24, 0x03B0
    4642:	8c bd       	out	0x2c, r24	; 44
    4644:	80 91 b1 03 	lds	r24, 0x03B1
    4648:	88 23       	and	r24, r24
    464a:	19 f0       	breq	.+6      	; 0x4652 <_Z7SPI_IRQv+0x86>
    464c:	8d b5       	in	r24, 0x2d	; 45
    464e:	81 60       	ori	r24, 0x01	; 1
    4650:	02 c0       	rjmp	.+4      	; 0x4656 <_Z7SPI_IRQv+0x8a>
    4652:	8d b5       	in	r24, 0x2d	; 45
    4654:	8e 7f       	andi	r24, 0xFE	; 254
    4656:	8d bd       	out	0x2d, r24	; 45

    // Wait for TX/RX Compete which will come as DMA interrupt
    SpiReadHeader();
    4658:	0e 94 dd 22 	call	0x45ba	; 0x45ba <_Z13SpiReadHeaderv>
    sSpiInformation.ulSpiState = eSPI_STATE_READ_EOT;
    465c:	88 e0       	ldi	r24, 0x08	; 8
    465e:	90 e0       	ldi	r25, 0x00	; 0
    4660:	a0 e0       	ldi	r26, 0x00	; 0
    4662:	b0 e0       	ldi	r27, 0x00	; 0
    4664:	80 93 ba 03 	sts	0x03BA, r24
    4668:	90 93 bb 03 	sts	0x03BB, r25
    466c:	a0 93 bc 03 	sts	0x03BC, r26
    4670:	b0 93 bd 03 	sts	0x03BD, r27
    //DEBUGPRINT_F("SSICont\n\r");
    SSIContReadOperation();
    4674:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <_Z20SSIContReadOperationv>
    4678:	3b c0       	rjmp	.+118    	; 0x46f0 <_Z7SPI_IRQv+0x124>
  }
  else if (sSpiInformation.ulSpiState == eSPI_STATE_WRITE_IRQ)
    467a:	03 97       	sbiw	r24, 0x03	; 3
    467c:	a1 05       	cpc	r26, r1
    467e:	b1 05       	cpc	r27, r1
    4680:	b9 f5       	brne	.+110    	; 0x46f0 <_Z7SPI_IRQv+0x124>
  {
    SpiWriteDataSynchronous(sSpiInformation.pTxPacket, sSpiInformation.usTxPacketLength);
    4682:	60 91 be 03 	lds	r22, 0x03BE
    4686:	70 91 bf 03 	lds	r23, 0x03BF
    468a:	40 91 b6 03 	lds	r20, 0x03B6
    468e:	50 91 b7 03 	lds	r21, 0x03B7
    4692:	20 e0       	ldi	r18, 0x00	; 0
    4694:	30 e0       	ldi	r19, 0x00	; 0
    4696:	0b c0       	rjmp	.+22     	; 0x46ae <_Z7SPI_IRQv+0xe2>
  DEBUGPRINT_F("\tCC3000: SpiWriteDataSynchronous Start\n\r");

  unsigned short loc;
  for (loc = 0; loc < size; loc ++) 
  {
      SPI.transfer(data[loc]);
    4698:	fb 01       	movw	r30, r22
    469a:	e2 0f       	add	r30, r18
    469c:	f3 1f       	adc	r31, r19
    469e:	80 81       	ld	r24, Z
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    46a0:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    46a2:	0d b4       	in	r0, 0x2d	; 45
    46a4:	07 fe       	sbrs	r0, 7
    46a6:	fd cf       	rjmp	.-6      	; 0x46a2 <_Z7SPI_IRQv+0xd6>
    ;
  return SPDR;
    46a8:	8e b5       	in	r24, 0x2e	; 46
void SpiWriteDataSynchronous(unsigned char *data, unsigned short size)
{
  DEBUGPRINT_F("\tCC3000: SpiWriteDataSynchronous Start\n\r");

  unsigned short loc;
  for (loc = 0; loc < size; loc ++) 
    46aa:	2f 5f       	subi	r18, 0xFF	; 255
    46ac:	3f 4f       	sbci	r19, 0xFF	; 255
    46ae:	24 17       	cp	r18, r20
    46b0:	35 07       	cpc	r19, r21
    46b2:	90 f3       	brcs	.-28     	; 0x4698 <_Z7SPI_IRQv+0xcc>
    SSIContReadOperation();
  }
  else if (sSpiInformation.ulSpiState == eSPI_STATE_WRITE_IRQ)
  {
    SpiWriteDataSynchronous(sSpiInformation.pTxPacket, sSpiInformation.usTxPacketLength);
    sSpiInformation.ulSpiState = eSPI_STATE_IDLE;
    46b4:	82 e0       	ldi	r24, 0x02	; 2
    46b6:	90 e0       	ldi	r25, 0x00	; 0
    46b8:	a0 e0       	ldi	r26, 0x00	; 0
    46ba:	b0 e0       	ldi	r27, 0x00	; 0
    46bc:	80 93 ba 03 	sts	0x03BA, r24
    46c0:	90 93 bb 03 	sts	0x03BB, r25
    46c4:	a0 93 bc 03 	sts	0x03BC, r26
    46c8:	b0 93 bd 03 	sts	0x03BD, r27
    CC3000_DEASSERT_CS;
    46cc:	80 91 67 03 	lds	r24, 0x0367
    46d0:	61 e0       	ldi	r22, 0x01	; 1
    46d2:	0e 94 61 31 	call	0x62c2	; 0x62c2 <digitalWrite>
    46d6:	80 91 b3 03 	lds	r24, 0x03B3
    46da:	8c bd       	out	0x2c, r24	; 44
    46dc:	80 91 b2 03 	lds	r24, 0x03B2
    46e0:	88 23       	and	r24, r24
    46e2:	19 f0       	breq	.+6      	; 0x46ea <_Z7SPI_IRQv+0x11e>
    46e4:	8d b5       	in	r24, 0x2d	; 45
    46e6:	81 60       	ori	r24, 0x01	; 1
    46e8:	02 c0       	rjmp	.+4      	; 0x46ee <_Z7SPI_IRQv+0x122>
    46ea:	8d b5       	in	r24, 0x2d	; 45
    46ec:	8e 7f       	andi	r24, 0xFE	; 254
    46ee:	8d bd       	out	0x2d, r24	; 45
  }

  DEBUGPRINT_F("\tCC3000: Leaving SPI_IRQ\n\r");

  ccspi_is_in_irq = 0;
    46f0:	10 92 c8 04 	sts	0x04C8, r1
  return;
}
    46f4:	08 95       	ret

000046f6 <cc3k_int_poll>:
//
//*****************************************************************************

void cc3k_int_poll()
{
  if (digitalRead(g_irqPin) == LOW && ccspi_is_in_irq == 0 && ccspi_int_enabled != 0) {
    46f6:	80 91 68 03 	lds	r24, 0x0368
    46fa:	0e 94 b5 31 	call	0x636a	; 0x636a <digitalRead>
    46fe:	89 2b       	or	r24, r25
    4700:	51 f4       	brne	.+20     	; 0x4716 <cc3k_int_poll+0x20>
    4702:	80 91 c8 04 	lds	r24, 0x04C8
    4706:	88 23       	and	r24, r24
    4708:	31 f4       	brne	.+12     	; 0x4716 <cc3k_int_poll+0x20>
    470a:	80 91 c9 04 	lds	r24, 0x04C9
    470e:	88 23       	and	r24, r24
    4710:	11 f0       	breq	.+4      	; 0x4716 <cc3k_int_poll+0x20>
    SPI_IRQ();
    4712:	0e 94 e6 22 	call	0x45cc	; 0x45cc <_Z7SPI_IRQv>
    4716:	08 95       	ret

00004718 <_Z13SpiFirstWritePht>:
/**************************************************************************/
/*!

 */
/**************************************************************************/
long SpiFirstWrite(unsigned char *ucBuf, unsigned short usLength)
    4718:	0f 93       	push	r16
    471a:	1f 93       	push	r17
    471c:	cf 93       	push	r28
    471e:	df 93       	push	r29
    4720:	ec 01       	movw	r28, r24
    4722:	8b 01       	movw	r16, r22
{
  DEBUGPRINT_F("\tCC3000: SpiWriteFirst\n\r");
  
  /* Workaround for the first transaction */
  CC3000_ASSERT_CS;
    4724:	80 91 67 03 	lds	r24, 0x0367
    4728:	60 e0       	ldi	r22, 0x00	; 0
    472a:	0e 94 61 31 	call	0x62c2	; 0x62c2 <digitalWrite>
    472e:	8c b5       	in	r24, 0x2c	; 44
    4730:	80 93 b3 03 	sts	0x03B3, r24
    4734:	8d b5       	in	r24, 0x2d	; 45
    4736:	81 70       	andi	r24, 0x01	; 1
    4738:	80 93 b2 03 	sts	0x03B2, r24
    473c:	80 91 b0 03 	lds	r24, 0x03B0
    4740:	8c bd       	out	0x2c, r24	; 44
    4742:	80 91 b1 03 	lds	r24, 0x03B1
    4746:	88 23       	and	r24, r24
    4748:	19 f0       	breq	.+6      	; 0x4750 <_Z13SpiFirstWritePht+0x38>
    474a:	8d b5       	in	r24, 0x2d	; 45
    474c:	81 60       	ori	r24, 0x01	; 1
    474e:	02 c0       	rjmp	.+4      	; 0x4754 <_Z13SpiFirstWritePht+0x3c>
    4750:	8d b5       	in	r24, 0x2d	; 45
    4752:	8e 7f       	andi	r24, 0xFE	; 254
    4754:	8d bd       	out	0x2d, r24	; 45

  /* delay (stay low) for ~50us */
  delay(1);
    4756:	61 e0       	ldi	r22, 0x01	; 1
    4758:	70 e0       	ldi	r23, 0x00	; 0
    475a:	80 e0       	ldi	r24, 0x00	; 0
    475c:	90 e0       	ldi	r25, 0x00	; 0
    475e:	0e 94 8e 30 	call	0x611c	; 0x611c <delay>
    4762:	20 e0       	ldi	r18, 0x00	; 0
    4764:	30 e0       	ldi	r19, 0x00	; 0
  DEBUGPRINT_F("\tCC3000: SpiWriteDataSynchronous Start\n\r");

  unsigned short loc;
  for (loc = 0; loc < size; loc ++) 
  {
      SPI.transfer(data[loc]);
    4766:	fe 01       	movw	r30, r28
    4768:	e2 0f       	add	r30, r18
    476a:	f3 1f       	adc	r31, r19
    476c:	80 81       	ld	r24, Z
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    476e:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    4770:	0d b4       	in	r0, 0x2d	; 45
    4772:	07 fe       	sbrs	r0, 7
    4774:	fd cf       	rjmp	.-6      	; 0x4770 <_Z13SpiFirstWritePht+0x58>
    ;
  return SPDR;
    4776:	8e b5       	in	r24, 0x2e	; 46
void SpiWriteDataSynchronous(unsigned char *data, unsigned short size)
{
  DEBUGPRINT_F("\tCC3000: SpiWriteDataSynchronous Start\n\r");

  unsigned short loc;
  for (loc = 0; loc < size; loc ++) 
    4778:	2f 5f       	subi	r18, 0xFF	; 255
    477a:	3f 4f       	sbci	r19, 0xFF	; 255
    477c:	24 30       	cpi	r18, 0x04	; 4
    477e:	31 05       	cpc	r19, r1
    4780:	91 f7       	brne	.-28     	; 0x4766 <_Z13SpiFirstWritePht+0x4e>
  delay(1);

  /* SPI writes first 4 bytes of data */
  SpiWriteDataSynchronous(ucBuf, 4);

  delay(1);
    4782:	61 e0       	ldi	r22, 0x01	; 1
    4784:	70 e0       	ldi	r23, 0x00	; 0
    4786:	80 e0       	ldi	r24, 0x00	; 0
    4788:	90 e0       	ldi	r25, 0x00	; 0
    478a:	0e 94 8e 30 	call	0x611c	; 0x611c <delay>

  SpiWriteDataSynchronous(ucBuf + 4, usLength - 4);
    478e:	b8 01       	movw	r22, r16
    4790:	64 50       	subi	r22, 0x04	; 4
    4792:	70 40       	sbci	r23, 0x00	; 0
    4794:	fe 01       	movw	r30, r28
    4796:	20 e0       	ldi	r18, 0x00	; 0
    4798:	30 e0       	ldi	r19, 0x00	; 0
    479a:	09 c0       	rjmp	.+18     	; 0x47ae <_Z13SpiFirstWritePht+0x96>
  DEBUGPRINT_F("\tCC3000: SpiWriteDataSynchronous Start\n\r");

  unsigned short loc;
  for (loc = 0; loc < size; loc ++) 
  {
      SPI.transfer(data[loc]);
    479c:	84 81       	ldd	r24, Z+4	; 0x04
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    479e:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    47a0:	0d b4       	in	r0, 0x2d	; 45
    47a2:	07 fe       	sbrs	r0, 7
    47a4:	fd cf       	rjmp	.-6      	; 0x47a0 <_Z13SpiFirstWritePht+0x88>
    ;
  return SPDR;
    47a6:	8e b5       	in	r24, 0x2e	; 46
void SpiWriteDataSynchronous(unsigned char *data, unsigned short size)
{
  DEBUGPRINT_F("\tCC3000: SpiWriteDataSynchronous Start\n\r");

  unsigned short loc;
  for (loc = 0; loc < size; loc ++) 
    47a8:	2f 5f       	subi	r18, 0xFF	; 255
    47aa:	3f 4f       	sbci	r19, 0xFF	; 255
    47ac:	31 96       	adiw	r30, 0x01	; 1
    47ae:	26 17       	cp	r18, r22
    47b0:	37 07       	cpc	r19, r23
    47b2:	a0 f3       	brcs	.-24     	; 0x479c <_Z13SpiFirstWritePht+0x84>
  delay(1);

  SpiWriteDataSynchronous(ucBuf + 4, usLength - 4);

  /* From this point on - operate in a regular manner */
  sSpiInformation.ulSpiState = eSPI_STATE_IDLE;
    47b4:	82 e0       	ldi	r24, 0x02	; 2
    47b6:	90 e0       	ldi	r25, 0x00	; 0
    47b8:	a0 e0       	ldi	r26, 0x00	; 0
    47ba:	b0 e0       	ldi	r27, 0x00	; 0
    47bc:	80 93 ba 03 	sts	0x03BA, r24
    47c0:	90 93 bb 03 	sts	0x03BB, r25
    47c4:	a0 93 bc 03 	sts	0x03BC, r26
    47c8:	b0 93 bd 03 	sts	0x03BD, r27

  CC3000_DEASSERT_CS;
    47cc:	80 91 67 03 	lds	r24, 0x0367
    47d0:	61 e0       	ldi	r22, 0x01	; 1
    47d2:	0e 94 61 31 	call	0x62c2	; 0x62c2 <digitalWrite>
    47d6:	80 91 b3 03 	lds	r24, 0x03B3
    47da:	8c bd       	out	0x2c, r24	; 44
    47dc:	80 91 b2 03 	lds	r24, 0x03B2
    47e0:	88 23       	and	r24, r24
    47e2:	19 f0       	breq	.+6      	; 0x47ea <_Z13SpiFirstWritePht+0xd2>
    47e4:	8d b5       	in	r24, 0x2d	; 45
    47e6:	81 60       	ori	r24, 0x01	; 1
    47e8:	02 c0       	rjmp	.+4      	; 0x47ee <_Z13SpiFirstWritePht+0xd6>
    47ea:	8d b5       	in	r24, 0x2d	; 45
    47ec:	8e 7f       	andi	r24, 0xFE	; 254
    47ee:	8d bd       	out	0x2d, r24	; 45

  return(0);
}
    47f0:	60 e0       	ldi	r22, 0x00	; 0
    47f2:	70 e0       	ldi	r23, 0x00	; 0
    47f4:	80 e0       	ldi	r24, 0x00	; 0
    47f6:	90 e0       	ldi	r25, 0x00	; 0
    47f8:	df 91       	pop	r29
    47fa:	cf 91       	pop	r28
    47fc:	1f 91       	pop	r17
    47fe:	0f 91       	pop	r16
    4800:	08 95       	ret

00004802 <_Z8SpiWritePht>:
/**************************************************************************/
/*!

 */
/**************************************************************************/
long SpiWrite(unsigned char *pUserBuffer, unsigned short usLength)
    4802:	0f 93       	push	r16
    4804:	1f 93       	push	r17
    4806:	cf 93       	push	r28
    4808:	df 93       	push	r29
    480a:	ec 01       	movw	r28, r24
    480c:	90 e0       	ldi	r25, 0x00	; 0
    480e:	60 ff       	sbrs	r22, 0
    4810:	91 e0       	ldi	r25, 0x01	; 1
  if(!(usLength & 0x0001))
  {
    ucPad++;
  }

  pUserBuffer[0] = WRITE;
    4812:	81 e0       	ldi	r24, 0x01	; 1
    4814:	88 83       	st	Y, r24
  pUserBuffer[1] = HI(usLength + ucPad);
    4816:	9b 01       	movw	r18, r22
    4818:	29 0f       	add	r18, r25
    481a:	31 1d       	adc	r19, r1
    481c:	39 83       	std	Y+1, r19	; 0x01
  pUserBuffer[2] = LO(usLength + ucPad);
    481e:	96 0f       	add	r25, r22
    4820:	9a 83       	std	Y+2, r25	; 0x02
  pUserBuffer[3] = 0;
    4822:	1b 82       	std	Y+3, r1	; 0x03
  pUserBuffer[4] = 0;
    4824:	1c 82       	std	Y+4, r1	; 0x04
  usLength += (SPI_HEADER_SIZE + ucPad);

  /* The magic number that resides at the end of the TX/RX buffer (1 byte after the allocated size)
   * for the purpose of overrun detection. If the magic number is overwritten - buffer overrun
   * occurred - and we will be stuck here forever! */
  if (wlan_tx_buffer[CC3000_TX_BUFFER_SIZE - 1] != CC3000_BUFFER_MAGIC_NUMBER)
    4826:	80 91 c7 04 	lds	r24, 0x04C7
    482a:	8e 3d       	cpi	r24, 0xDE	; 222
    482c:	09 f0       	breq	.+2      	; 0x4830 <_Z8SpiWritePht+0x2e>
    482e:	ff cf       	rjmp	.-2      	; 0x482e <_Z8SpiWritePht+0x2c>
  {
    DEBUGPRINT_F("\tCC3000: Error - No magic number found in SpiWrite\n\r");
    while (1);
  }

  if (sSpiInformation.ulSpiState == eSPI_STATE_POWERUP)
    4830:	80 91 ba 03 	lds	r24, 0x03BA
    4834:	90 91 bb 03 	lds	r25, 0x03BB
    4838:	a0 91 bc 03 	lds	r26, 0x03BC
    483c:	b0 91 bd 03 	lds	r27, 0x03BD
    4840:	00 97       	sbiw	r24, 0x00	; 0
    4842:	a1 05       	cpc	r26, r1
    4844:	b1 05       	cpc	r27, r1
    4846:	09 f4       	brne	.+2      	; 0x484a <_Z8SpiWritePht+0x48>
    4848:	ff cf       	rjmp	.-2      	; 0x4848 <_Z8SpiWritePht+0x46>
  pUserBuffer[1] = HI(usLength + ucPad);
  pUserBuffer[2] = LO(usLength + ucPad);
  pUserBuffer[3] = 0;
  pUserBuffer[4] = 0;

  usLength += (SPI_HEADER_SIZE + ucPad);
    484a:	89 01       	movw	r16, r18
    484c:	0b 5f       	subi	r16, 0xFB	; 251
    484e:	1f 4f       	sbci	r17, 0xFF	; 255
  if (sSpiInformation.ulSpiState == eSPI_STATE_POWERUP)
  {
    while (sSpiInformation.ulSpiState != eSPI_STATE_INITIALIZED);
  }

  if (sSpiInformation.ulSpiState == eSPI_STATE_INITIALIZED)
    4850:	01 97       	sbiw	r24, 0x01	; 1
    4852:	a1 05       	cpc	r26, r1
    4854:	b1 05       	cpc	r27, r1
    4856:	29 f4       	brne	.+10     	; 0x4862 <_Z8SpiWritePht+0x60>
  {
    /* This is time for first TX/RX transactions over SPI: the IRQ is down - so need to send read buffer size command */
    SpiFirstWrite(pUserBuffer, usLength);
    4858:	ce 01       	movw	r24, r28
    485a:	b8 01       	movw	r22, r16
    485c:	0e 94 8c 23 	call	0x4718	; 0x4718 <_Z13SpiFirstWritePht>
    4860:	85 c0       	rjmp	.+266    	; 0x496c <_Z8SpiWritePht+0x16a>
  }
  else
  {
    /* We need to prevent here race that can occur in case two back to back packets are sent to the
     * device, so the state will move to IDLE and once again to not IDLE due to IRQ */
    tSLInformation.WlanInterruptDisable();
    4862:	e0 91 4e 03 	lds	r30, 0x034E
    4866:	f0 91 4f 03 	lds	r31, 0x034F
    486a:	09 95       	icall

    while (sSpiInformation.ulSpiState != eSPI_STATE_IDLE);
    486c:	80 91 ba 03 	lds	r24, 0x03BA
    4870:	90 91 bb 03 	lds	r25, 0x03BB
    4874:	a0 91 bc 03 	lds	r26, 0x03BC
    4878:	b0 91 bd 03 	lds	r27, 0x03BD
    487c:	02 97       	sbiw	r24, 0x02	; 2
    487e:	a1 05       	cpc	r26, r1
    4880:	b1 05       	cpc	r27, r1
    4882:	09 f0       	breq	.+2      	; 0x4886 <_Z8SpiWritePht+0x84>
    4884:	89 c0       	rjmp	.+274    	; 0x4998 <_Z8SpiWritePht+0x196>

    sSpiInformation.ulSpiState = eSPI_STATE_WRITE_IRQ;
    4886:	83 e0       	ldi	r24, 0x03	; 3
    4888:	90 e0       	ldi	r25, 0x00	; 0
    488a:	a0 e0       	ldi	r26, 0x00	; 0
    488c:	b0 e0       	ldi	r27, 0x00	; 0
    488e:	80 93 ba 03 	sts	0x03BA, r24
    4892:	90 93 bb 03 	sts	0x03BB, r25
    4896:	a0 93 bc 03 	sts	0x03BC, r26
    489a:	b0 93 bd 03 	sts	0x03BD, r27
    sSpiInformation.pTxPacket = pUserBuffer;
    489e:	d0 93 bf 03 	sts	0x03BF, r29
    48a2:	c0 93 be 03 	sts	0x03BE, r28
    sSpiInformation.usTxPacketLength = usLength;
    48a6:	10 93 b7 03 	sts	0x03B7, r17
    48aa:	00 93 b6 03 	sts	0x03B6, r16

    /* Assert the CS line and wait till SSI IRQ line is active and then initialize write operation */
    CC3000_ASSERT_CS;
    48ae:	80 91 67 03 	lds	r24, 0x0367
    48b2:	60 e0       	ldi	r22, 0x00	; 0
    48b4:	0e 94 61 31 	call	0x62c2	; 0x62c2 <digitalWrite>
    48b8:	8c b5       	in	r24, 0x2c	; 44
    48ba:	80 93 b3 03 	sts	0x03B3, r24
    48be:	8d b5       	in	r24, 0x2d	; 45
    48c0:	81 70       	andi	r24, 0x01	; 1
    48c2:	80 93 b2 03 	sts	0x03B2, r24
    48c6:	80 91 b0 03 	lds	r24, 0x03B0
    48ca:	8c bd       	out	0x2c, r24	; 44
    48cc:	80 91 b1 03 	lds	r24, 0x03B1
    48d0:	88 23       	and	r24, r24
    48d2:	19 f0       	breq	.+6      	; 0x48da <_Z8SpiWritePht+0xd8>
    48d4:	8d b5       	in	r24, 0x2d	; 45
    48d6:	81 60       	ori	r24, 0x01	; 1
    48d8:	02 c0       	rjmp	.+4      	; 0x48de <_Z8SpiWritePht+0xdc>
    48da:	8d b5       	in	r24, 0x2d	; 45
    48dc:	8e 7f       	andi	r24, 0xFE	; 254
    48de:	8d bd       	out	0x2d, r24	; 45

    /* Re-enable IRQ - if it was not disabled - this is not a problem... */
    tSLInformation.WlanInterruptEnable();
    48e0:	e0 91 4c 03 	lds	r30, 0x034C
    48e4:	f0 91 4d 03 	lds	r31, 0x034D
    48e8:	09 95       	icall

    /* Check for a missing interrupt between the CS assertion and enabling back the interrupts */
    if (tSLInformation.ReadWlanInterruptPin() == 0)
    48ea:	e0 91 4a 03 	lds	r30, 0x034A
    48ee:	f0 91 4b 03 	lds	r31, 0x034B
    48f2:	09 95       	icall
    48f4:	61 15       	cp	r22, r1
    48f6:	71 05       	cpc	r23, r1
    48f8:	81 05       	cpc	r24, r1
    48fa:	91 05       	cpc	r25, r1
    48fc:	b9 f5       	brne	.+110    	; 0x496c <_Z8SpiWritePht+0x16a>
    {
      SpiWriteDataSynchronous(sSpiInformation.pTxPacket, sSpiInformation.usTxPacketLength);
    48fe:	60 91 be 03 	lds	r22, 0x03BE
    4902:	70 91 bf 03 	lds	r23, 0x03BF
    4906:	40 91 b6 03 	lds	r20, 0x03B6
    490a:	50 91 b7 03 	lds	r21, 0x03B7
    490e:	20 e0       	ldi	r18, 0x00	; 0
    4910:	30 e0       	ldi	r19, 0x00	; 0
    4912:	0b c0       	rjmp	.+22     	; 0x492a <_Z8SpiWritePht+0x128>
  DEBUGPRINT_F("\tCC3000: SpiWriteDataSynchronous Start\n\r");

  unsigned short loc;
  for (loc = 0; loc < size; loc ++) 
  {
      SPI.transfer(data[loc]);
    4914:	fb 01       	movw	r30, r22
    4916:	e2 0f       	add	r30, r18
    4918:	f3 1f       	adc	r31, r19
    491a:	80 81       	ld	r24, Z
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    491c:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    491e:	0d b4       	in	r0, 0x2d	; 45
    4920:	07 fe       	sbrs	r0, 7
    4922:	fd cf       	rjmp	.-6      	; 0x491e <_Z8SpiWritePht+0x11c>
    ;
  return SPDR;
    4924:	8e b5       	in	r24, 0x2e	; 46
void SpiWriteDataSynchronous(unsigned char *data, unsigned short size)
{
  DEBUGPRINT_F("\tCC3000: SpiWriteDataSynchronous Start\n\r");

  unsigned short loc;
  for (loc = 0; loc < size; loc ++) 
    4926:	2f 5f       	subi	r18, 0xFF	; 255
    4928:	3f 4f       	sbci	r19, 0xFF	; 255
    492a:	24 17       	cp	r18, r20
    492c:	35 07       	cpc	r19, r21
    492e:	90 f3       	brcs	.-28     	; 0x4914 <_Z8SpiWritePht+0x112>
    /* Check for a missing interrupt between the CS assertion and enabling back the interrupts */
    if (tSLInformation.ReadWlanInterruptPin() == 0)
    {
      SpiWriteDataSynchronous(sSpiInformation.pTxPacket, sSpiInformation.usTxPacketLength);

      sSpiInformation.ulSpiState = eSPI_STATE_IDLE;
    4930:	82 e0       	ldi	r24, 0x02	; 2
    4932:	90 e0       	ldi	r25, 0x00	; 0
    4934:	a0 e0       	ldi	r26, 0x00	; 0
    4936:	b0 e0       	ldi	r27, 0x00	; 0
    4938:	80 93 ba 03 	sts	0x03BA, r24
    493c:	90 93 bb 03 	sts	0x03BB, r25
    4940:	a0 93 bc 03 	sts	0x03BC, r26
    4944:	b0 93 bd 03 	sts	0x03BD, r27

      CC3000_DEASSERT_CS;
    4948:	80 91 67 03 	lds	r24, 0x0367
    494c:	61 e0       	ldi	r22, 0x01	; 1
    494e:	0e 94 61 31 	call	0x62c2	; 0x62c2 <digitalWrite>
    4952:	80 91 b3 03 	lds	r24, 0x03B3
    4956:	8c bd       	out	0x2c, r24	; 44
    4958:	80 91 b2 03 	lds	r24, 0x03B2
    495c:	88 23       	and	r24, r24
    495e:	19 f0       	breq	.+6      	; 0x4966 <_Z8SpiWritePht+0x164>
    4960:	8d b5       	in	r24, 0x2d	; 45
    4962:	81 60       	ori	r24, 0x01	; 1
    4964:	02 c0       	rjmp	.+4      	; 0x496a <_Z8SpiWritePht+0x168>
    4966:	8d b5       	in	r24, 0x2d	; 45
    4968:	8e 7f       	andi	r24, 0xFE	; 254
    496a:	8d bd       	out	0x2d, r24	; 45
    }
  }

  /* Due to the fact that we are currently implementing a blocking situation
   * here we will wait till end of transaction */
  while (eSPI_STATE_IDLE != sSpiInformation.ulSpiState);
    496c:	80 91 ba 03 	lds	r24, 0x03BA
    4970:	90 91 bb 03 	lds	r25, 0x03BB
    4974:	a0 91 bc 03 	lds	r26, 0x03BC
    4978:	b0 91 bd 03 	lds	r27, 0x03BD
    497c:	02 97       	sbiw	r24, 0x02	; 2
    497e:	a1 05       	cpc	r26, r1
    4980:	b1 05       	cpc	r27, r1
    4982:	49 f4       	brne	.+18     	; 0x4996 <_Z8SpiWritePht+0x194>

  return(0);
}
    4984:	60 e0       	ldi	r22, 0x00	; 0
    4986:	70 e0       	ldi	r23, 0x00	; 0
    4988:	80 e0       	ldi	r24, 0x00	; 0
    498a:	90 e0       	ldi	r25, 0x00	; 0
    498c:	df 91       	pop	r29
    498e:	cf 91       	pop	r28
    4990:	1f 91       	pop	r17
    4992:	0f 91       	pop	r16
    4994:	08 95       	ret
    4996:	ff cf       	rjmp	.-2      	; 0x4996 <_Z8SpiWritePht+0x194>
    4998:	ff cf       	rjmp	.-2      	; 0x4998 <_Z8SpiWritePht+0x196>

0000499a <_Z8init_spiv>:
{

  DEBUGPRINT_F("\tCC3000: init_spi\n\r");
  
  /* Set POWER_EN pin to output and disable the CC3000 by default */
  pinMode(g_vbatPin, OUTPUT);
    499a:	80 91 69 03 	lds	r24, 0x0369
    499e:	61 e0       	ldi	r22, 0x01	; 1
    49a0:	0e 94 22 31 	call	0x6244	; 0x6244 <pinMode>
  digitalWrite(g_vbatPin, 0);
    49a4:	80 91 69 03 	lds	r24, 0x0369
    49a8:	60 e0       	ldi	r22, 0x00	; 0
    49aa:	0e 94 61 31 	call	0x62c2	; 0x62c2 <digitalWrite>
  delay(500);
    49ae:	64 ef       	ldi	r22, 0xF4	; 244
    49b0:	71 e0       	ldi	r23, 0x01	; 1
    49b2:	80 e0       	ldi	r24, 0x00	; 0
    49b4:	90 e0       	ldi	r25, 0x00	; 0
    49b6:	0e 94 8e 30 	call	0x611c	; 0x611c <delay>

  /* Set CS pin to output (don't de-assert yet) */
  pinMode(g_csPin, OUTPUT);
    49ba:	80 91 67 03 	lds	r24, 0x0367
    49be:	61 e0       	ldi	r22, 0x01	; 1
    49c0:	0e 94 22 31 	call	0x6244	; 0x6244 <pinMode>

  /* Set interrupt/gpio pin to input */
#if defined(INPUT_PULLUP)
  pinMode(g_irqPin, INPUT_PULLUP);
    49c4:	80 91 68 03 	lds	r24, 0x0368
    49c8:	62 e0       	ldi	r22, 0x02	; 2
    49ca:	0e 94 22 31 	call	0x6244	; 0x6244 <pinMode>
#else
  pinMode(g_irqPin, INPUT);
  digitalWrite(g_irqPin, HIGH); // w/weak pullup
#endif

  SpiConfigStoreOld(); // prime ccspi_old* values for DEASSERT
    49ce:	8c b5       	in	r24, 0x2c	; 44
    49d0:	80 93 b3 03 	sts	0x03B3, r24
    49d4:	8d b5       	in	r24, 0x2d	; 45
    49d6:	81 70       	andi	r24, 0x01	; 1
    49d8:	80 93 b2 03 	sts	0x03B2, r24

  /* Initialise SPI (Mode 1) */
  SPI.begin();
    49dc:	0e 94 12 02 	call	0x424	; 0x424 <_ZN8SPIClass5beginEv>
  SPI.setDataMode(SPI_MODE1);
    49e0:	84 e0       	ldi	r24, 0x04	; 4
    49e2:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <_ZN8SPIClass11setDataModeEh>
  SPI.setBitOrder(MSBFIRST);
    49e6:	81 e0       	ldi	r24, 0x01	; 1
    49e8:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <_ZN8SPIClass11setBitOrderEh>
  SPI.setClockDivider(g_SPIspeed);
    49ec:	80 91 6b 03 	lds	r24, 0x036B
    49f0:	0e 94 01 02 	call	0x402	; 0x402 <_ZN8SPIClass15setClockDividerEh>
  
  SpiConfigStoreMy(); // prime ccspi_my* values for ASSERT
    49f4:	8c b5       	in	r24, 0x2c	; 44
    49f6:	80 93 b0 03 	sts	0x03B0, r24
    49fa:	8d b5       	in	r24, 0x2d	; 45
    49fc:	81 70       	andi	r24, 0x01	; 1
    49fe:	80 93 b1 03 	sts	0x03B1, r24
#ifdef SPI_HAS_TRANSACTION
  SPI.usingInterrupt(g_IRQnum);
  digitalWrite(g_csPin, HIGH);  // same as CC3000_DEASSERT_CS, but not
  SpiConfigPop();               // SPI.endTransaction, because none began
#else
  CC3000_DEASSERT_CS;
    4a02:	80 91 67 03 	lds	r24, 0x0367
    4a06:	61 e0       	ldi	r22, 0x01	; 1
    4a08:	0e 94 61 31 	call	0x62c2	; 0x62c2 <digitalWrite>
    4a0c:	80 91 b3 03 	lds	r24, 0x03B3
    4a10:	8c bd       	out	0x2c, r24	; 44
    4a12:	80 91 b2 03 	lds	r24, 0x03B2
    4a16:	88 23       	and	r24, r24
    4a18:	19 f0       	breq	.+6      	; 0x4a20 <_Z8init_spiv+0x86>
    4a1a:	8d b5       	in	r24, 0x2d	; 45
    4a1c:	81 60       	ori	r24, 0x01	; 1
    4a1e:	02 c0       	rjmp	.+4      	; 0x4a24 <_Z8init_spiv+0x8a>
    4a20:	8d b5       	in	r24, 0x2d	; 45
    4a22:	8e 7f       	andi	r24, 0xFE	; 254
    4a24:	8d bd       	out	0x2d, r24	; 45
  /* ToDo: Configure IRQ interrupt! */

  DEBUGPRINT_F("\tCC3000: Finished init_spi\n\r");
  
  return(ESUCCESS);
}
    4a26:	80 e0       	ldi	r24, 0x00	; 0
    4a28:	90 e0       	ldi	r25, 0x00	; 0
    4a2a:	08 95       	ret

00004a2c <_Z7SpiOpenPFvPvE>:
/**************************************************************************/
/*!

 */
/**************************************************************************/
void SpiOpen(gcSpiHandleRx pfRxHandler)
    4a2c:	cf 93       	push	r28
    4a2e:	df 93       	push	r29
{
  DEBUGPRINT_F("\tCC3000: SpiOpen");
  
  sSpiInformation.ulSpiState = eSPI_STATE_POWERUP;
    4a30:	10 92 ba 03 	sts	0x03BA, r1
    4a34:	10 92 bb 03 	sts	0x03BB, r1
    4a38:	10 92 bc 03 	sts	0x03BC, r1
    4a3c:	10 92 bd 03 	sts	0x03BD, r1

  memset(spi_buffer, 0, sizeof(spi_buffer));
    4a40:	a2 ec       	ldi	r26, 0xC2	; 194
    4a42:	b3 e0       	ldi	r27, 0x03	; 3
    4a44:	23 e8       	ldi	r18, 0x83	; 131
    4a46:	ed 01       	movw	r28, r26
    4a48:	e2 2f       	mov	r30, r18
    4a4a:	19 92       	st	Y+, r1
    4a4c:	ea 95       	dec	r30
    4a4e:	e9 f7       	brne	.-6      	; 0x4a4a <_Z7SpiOpenPFvPvE+0x1e>
  memset(wlan_tx_buffer, 0, sizeof(wlan_tx_buffer));
    4a50:	e5 e4       	ldi	r30, 0x45	; 69
    4a52:	f4 e0       	ldi	r31, 0x04	; 4
    4a54:	ef 01       	movw	r28, r30
    4a56:	19 92       	st	Y+, r1
    4a58:	2a 95       	dec	r18
    4a5a:	e9 f7       	brne	.-6      	; 0x4a56 <_Z7SpiOpenPFvPvE+0x2a>

  sSpiInformation.SPIRxHandler      = pfRxHandler;
    4a5c:	90 93 b5 03 	sts	0x03B5, r25
    4a60:	80 93 b4 03 	sts	0x03B4, r24
  sSpiInformation.usTxPacketLength  = 0;
    4a64:	10 92 b7 03 	sts	0x03B7, r1
    4a68:	10 92 b6 03 	sts	0x03B6, r1
  sSpiInformation.pTxPacket         = NULL;
    4a6c:	10 92 bf 03 	sts	0x03BF, r1
    4a70:	10 92 be 03 	sts	0x03BE, r1
  sSpiInformation.pRxPacket         = (unsigned char *)spi_buffer;
    4a74:	b0 93 c1 03 	sts	0x03C1, r27
    4a78:	a0 93 c0 03 	sts	0x03C0, r26
  sSpiInformation.usRxPacketLength  = 0;
    4a7c:	10 92 b9 03 	sts	0x03B9, r1
    4a80:	10 92 b8 03 	sts	0x03B8, r1
  
  spi_buffer[CC3000_RX_BUFFER_SIZE - 1]     = CC3000_BUFFER_MAGIC_NUMBER;
    4a84:	8e ed       	ldi	r24, 0xDE	; 222
    4a86:	80 93 44 04 	sts	0x0444, r24
  wlan_tx_buffer[CC3000_TX_BUFFER_SIZE - 1] = CC3000_BUFFER_MAGIC_NUMBER;
    4a8a:	80 93 c7 04 	sts	0x04C7, r24

  /* Enable interrupt on the GPIO pin of WLAN IRQ */
  tSLInformation.WlanInterruptEnable();
    4a8e:	e0 91 4c 03 	lds	r30, 0x034C
    4a92:	f0 91 4d 03 	lds	r31, 0x034D
    4a96:	09 95       	icall

  DEBUGPRINT_F("\tCC3000: Finished SpiOpen\n\r");
}
    4a98:	df 91       	pop	r29
    4a9a:	cf 91       	pop	r28
    4a9c:	08 95       	ret

00004a9e <_GLOBAL__I_cc3000>:
    Serial.print(F("\nDHCPsrv: ")); cc3000.printIPdotsRev(dhcpserv);
    Serial.print(F("\nDNSserv: ")); cc3000.printIPdotsRev(dnsserv);
    Serial.println();
    return true;
  }
}
    4a9e:	ef 92       	push	r14
    4aa0:	ff 92       	push	r15
    4aa2:	0f 93       	push	r16
    4aa4:	8b e7       	ldi	r24, 0x7B	; 123
    4aa6:	96 e0       	ldi	r25, 0x06	; 6
    4aa8:	60 e0       	ldi	r22, 0x00	; 0
    4aaa:	40 e0       	ldi	r20, 0x00	; 0
    4aac:	20 e0       	ldi	r18, 0x00	; 0
    4aae:	00 e0       	ldi	r16, 0x00	; 0
    4ab0:	0e 94 d7 2b 	call	0x57ae	; 0x57ae <_ZN9IPAddressC1Ehhhh>
#define ADAFRUIT_CC3000_CS    10
// Use hardware SPI for the remaining pins
// On an UNO, SCK = 13, MISO = 12, and MOSI = 11

Adafruit_CC3000 cc3000 = Adafruit_CC3000(ADAFRUIT_CC3000_CS, ADAFRUIT_CC3000_IRQ, ADAFRUIT_CC3000_VBAT,
                                         SPI_CLOCK_DIVIDER); // you can change this clock speed
    4ab4:	8a ec       	ldi	r24, 0xCA	; 202
    4ab6:	94 e0       	ldi	r25, 0x04	; 4
    4ab8:	6a e0       	ldi	r22, 0x0A	; 10
    4aba:	43 e0       	ldi	r20, 0x03	; 3
    4abc:	25 e0       	ldi	r18, 0x05	; 5
    4abe:	04 e0       	ldi	r16, 0x04	; 4
    4ac0:	39 e0       	ldi	r19, 0x09	; 9
    4ac2:	e3 2e       	mov	r14, r19
    4ac4:	37 e0       	ldi	r19, 0x07	; 7
    4ac6:	f3 2e       	mov	r15, r19
    4ac8:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <_ZN15Adafruit_CC3000C1EhhhhP5Print>

#define TIMEOUT_MS            500    // Amount of time in milliseconds to wait for
                                     // an incoming request to finish.  Don't set this
                                     // too high or your server could be slow to respond.

Adafruit_CC3000_Server httpServer(LISTEN_PORT);
    4acc:	8b ec       	ldi	r24, 0xCB	; 203
    4ace:	94 e0       	ldi	r25, 0x04	; 4
    4ad0:	60 e5       	ldi	r22, 0x50	; 80
    4ad2:	70 e0       	ldi	r23, 0x00	; 0
    4ad4:	0e 94 51 21 	call	0x42a2	; 0x42a2 <_ZN22Adafruit_CC3000_ServerC1Ej>
    Serial.print(F("\nDHCPsrv: ")); cc3000.printIPdotsRev(dhcpserv);
    Serial.print(F("\nDNSserv: ")); cc3000.printIPdotsRev(dnsserv);
    Serial.println();
    return true;
  }
}
    4ad8:	0f 91       	pop	r16
    4ada:	ff 90       	pop	r15
    4adc:	ef 90       	pop	r14
    4ade:	08 95       	ret

00004ae0 <displayConnectionDetails>:
  if (linepath != NULL)
    strncpy(path, linepath, MAX_PATH);
}

// Tries to read the IP address and other connection details
bool displayConnectionDetails(void)
    4ae0:	ef 92       	push	r14
    4ae2:	ff 92       	push	r15
    4ae4:	0f 93       	push	r16
    4ae6:	1f 93       	push	r17
    4ae8:	df 93       	push	r29
    4aea:	cf 93       	push	r28
    4aec:	cd b7       	in	r28, 0x3d	; 61
    4aee:	de b7       	in	r29, 0x3e	; 62
    4af0:	64 97       	sbiw	r28, 0x14	; 20
    4af2:	0f b6       	in	r0, 0x3f	; 63
    4af4:	f8 94       	cli
    4af6:	de bf       	out	0x3e, r29	; 62
    4af8:	0f be       	out	0x3f, r0	; 63
    4afa:	cd bf       	out	0x3d, r28	; 61
{
  uint32_t ipAddress, netmask, gateway, dhcpserv, dnsserv;

  if(!cc3000.getIPAddress(&ipAddress, &netmask, &gateway, &dhcpserv, &dnsserv))
    4afc:	8a ec       	ldi	r24, 0xCA	; 202
    4afe:	94 e0       	ldi	r25, 0x04	; 4
    4b00:	be 01       	movw	r22, r28
    4b02:	6f 5f       	subi	r22, 0xFF	; 255
    4b04:	7f 4f       	sbci	r23, 0xFF	; 255
    4b06:	ae 01       	movw	r20, r28
    4b08:	4b 5f       	subi	r20, 0xFB	; 251
    4b0a:	5f 4f       	sbci	r21, 0xFF	; 255
    4b0c:	9e 01       	movw	r18, r28
    4b0e:	27 5f       	subi	r18, 0xF7	; 247
    4b10:	3f 4f       	sbci	r19, 0xFF	; 255
    4b12:	8e 01       	movw	r16, r28
    4b14:	03 5f       	subi	r16, 0xF3	; 243
    4b16:	1f 4f       	sbci	r17, 0xFF	; 255
    4b18:	e1 e1       	ldi	r30, 0x11	; 17
    4b1a:	ee 2e       	mov	r14, r30
    4b1c:	f1 2c       	mov	r15, r1
    4b1e:	ec 0e       	add	r14, r28
    4b20:	fd 1e       	adc	r15, r29
    4b22:	0e 94 91 1a 	call	0x3522	; 0x3522 <_ZN15Adafruit_CC300012getIPAddressEPmS0_S0_S0_S0_>
    4b26:	88 23       	and	r24, r24
    4b28:	41 f4       	brne	.+16     	; 0x4b3a <displayConnectionDetails+0x5a>
  {
    Serial.println(F("Unable to retrieve the IP Address!\r\n"));
    4b2a:	89 e0       	ldi	r24, 0x09	; 9
    4b2c:	97 e0       	ldi	r25, 0x07	; 7
    4b2e:	6a ea       	ldi	r22, 0xAA	; 170
    4b30:	70 e0       	ldi	r23, 0x00	; 0
    4b32:	0e 94 bf 2c 	call	0x597e	; 0x597e <_ZN5Print7printlnEPK19__FlashStringHelper>
    4b36:	80 e0       	ldi	r24, 0x00	; 0
    4b38:	4b c0       	rjmp	.+150    	; 0x4bd0 <displayConnectionDetails+0xf0>
    return false;
  }
  else
  {
    Serial.print(F("\nIP Addr: ")); cc3000.printIPdotsRev(ipAddress);
    4b3a:	89 e0       	ldi	r24, 0x09	; 9
    4b3c:	97 e0       	ldi	r25, 0x07	; 7
    4b3e:	6f e9       	ldi	r22, 0x9F	; 159
    4b40:	70 e0       	ldi	r23, 0x00	; 0
    4b42:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <_ZN5Print5printEPK19__FlashStringHelper>
    4b46:	49 81       	ldd	r20, Y+1	; 0x01
    4b48:	5a 81       	ldd	r21, Y+2	; 0x02
    4b4a:	6b 81       	ldd	r22, Y+3	; 0x03
    4b4c:	7c 81       	ldd	r23, Y+4	; 0x04
    4b4e:	8a ec       	ldi	r24, 0xCA	; 202
    4b50:	94 e0       	ldi	r25, 0x04	; 4
    4b52:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <_ZN15Adafruit_CC300014printIPdotsRevEm>
    Serial.print(F("\nNetmask: ")); cc3000.printIPdotsRev(netmask);
    4b56:	89 e0       	ldi	r24, 0x09	; 9
    4b58:	97 e0       	ldi	r25, 0x07	; 7
    4b5a:	64 e9       	ldi	r22, 0x94	; 148
    4b5c:	70 e0       	ldi	r23, 0x00	; 0
    4b5e:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <_ZN5Print5printEPK19__FlashStringHelper>
    4b62:	4d 81       	ldd	r20, Y+5	; 0x05
    4b64:	5e 81       	ldd	r21, Y+6	; 0x06
    4b66:	6f 81       	ldd	r22, Y+7	; 0x07
    4b68:	78 85       	ldd	r23, Y+8	; 0x08
    4b6a:	8a ec       	ldi	r24, 0xCA	; 202
    4b6c:	94 e0       	ldi	r25, 0x04	; 4
    4b6e:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <_ZN15Adafruit_CC300014printIPdotsRevEm>
    Serial.print(F("\nGateway: ")); cc3000.printIPdotsRev(gateway);
    4b72:	89 e0       	ldi	r24, 0x09	; 9
    4b74:	97 e0       	ldi	r25, 0x07	; 7
    4b76:	69 e8       	ldi	r22, 0x89	; 137
    4b78:	70 e0       	ldi	r23, 0x00	; 0
    4b7a:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <_ZN5Print5printEPK19__FlashStringHelper>
    4b7e:	49 85       	ldd	r20, Y+9	; 0x09
    4b80:	5a 85       	ldd	r21, Y+10	; 0x0a
    4b82:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b84:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b86:	8a ec       	ldi	r24, 0xCA	; 202
    4b88:	94 e0       	ldi	r25, 0x04	; 4
    4b8a:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <_ZN15Adafruit_CC300014printIPdotsRevEm>
    Serial.print(F("\nDHCPsrv: ")); cc3000.printIPdotsRev(dhcpserv);
    4b8e:	89 e0       	ldi	r24, 0x09	; 9
    4b90:	97 e0       	ldi	r25, 0x07	; 7
    4b92:	6e e7       	ldi	r22, 0x7E	; 126
    4b94:	70 e0       	ldi	r23, 0x00	; 0
    4b96:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <_ZN5Print5printEPK19__FlashStringHelper>
    4b9a:	4d 85       	ldd	r20, Y+13	; 0x0d
    4b9c:	5e 85       	ldd	r21, Y+14	; 0x0e
    4b9e:	6f 85       	ldd	r22, Y+15	; 0x0f
    4ba0:	78 89       	ldd	r23, Y+16	; 0x10
    4ba2:	8a ec       	ldi	r24, 0xCA	; 202
    4ba4:	94 e0       	ldi	r25, 0x04	; 4
    4ba6:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <_ZN15Adafruit_CC300014printIPdotsRevEm>
    Serial.print(F("\nDNSserv: ")); cc3000.printIPdotsRev(dnsserv);
    4baa:	89 e0       	ldi	r24, 0x09	; 9
    4bac:	97 e0       	ldi	r25, 0x07	; 7
    4bae:	63 e7       	ldi	r22, 0x73	; 115
    4bb0:	70 e0       	ldi	r23, 0x00	; 0
    4bb2:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <_ZN5Print5printEPK19__FlashStringHelper>
    4bb6:	49 89       	ldd	r20, Y+17	; 0x11
    4bb8:	5a 89       	ldd	r21, Y+18	; 0x12
    4bba:	6b 89       	ldd	r22, Y+19	; 0x13
    4bbc:	7c 89       	ldd	r23, Y+20	; 0x14
    4bbe:	8a ec       	ldi	r24, 0xCA	; 202
    4bc0:	94 e0       	ldi	r25, 0x04	; 4
    4bc2:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <_ZN15Adafruit_CC300014printIPdotsRevEm>
    Serial.println();
    4bc6:	89 e0       	ldi	r24, 0x09	; 9
    4bc8:	97 e0       	ldi	r25, 0x07	; 7
    4bca:	0e 94 9f 2c 	call	0x593e	; 0x593e <_ZN5Print7printlnEv>
    4bce:	81 e0       	ldi	r24, 0x01	; 1
    return true;
  }
}
    4bd0:	64 96       	adiw	r28, 0x14	; 20
    4bd2:	0f b6       	in	r0, 0x3f	; 63
    4bd4:	f8 94       	cli
    4bd6:	de bf       	out	0x3e, r29	; 62
    4bd8:	0f be       	out	0x3f, r0	; 63
    4bda:	cd bf       	out	0x3d, r28	; 61
    4bdc:	cf 91       	pop	r28
    4bde:	df 91       	pop	r29
    4be0:	1f 91       	pop	r17
    4be2:	0f 91       	pop	r16
    4be4:	ff 90       	pop	r15
    4be6:	ef 90       	pop	r14
    4be8:	08 95       	ret

00004bea <parseFirstLine>:
  }
  return false;
}

// Parse the action and path from the first line of an HTTP request.
void parseFirstLine(char* line, char* action, char* path) {
    4bea:	0f 93       	push	r16
    4bec:	1f 93       	push	r17
    4bee:	cf 93       	push	r28
    4bf0:	df 93       	push	r29
    4bf2:	eb 01       	movw	r28, r22
    4bf4:	8a 01       	movw	r16, r20
  // Parse first word up to whitespace as action.bool displayConnectionDetails(void)
  char* lineaction = strtok(line, " ");
    4bf6:	60 e1       	ldi	r22, 0x10	; 16
    4bf8:	71 e0       	ldi	r23, 0x01	; 1
    4bfa:	0e 94 86 33 	call	0x670c	; 0x670c <strtok>
    4bfe:	bc 01       	movw	r22, r24
  if (lineaction != NULL)
    4c00:	00 97       	sbiw	r24, 0x00	; 0
    4c02:	29 f0       	breq	.+10     	; 0x4c0e <parseFirstLine+0x24>
    strncpy(action, lineaction, MAX_ACTION);
    4c04:	ce 01       	movw	r24, r28
    4c06:	4a e0       	ldi	r20, 0x0A	; 10
    4c08:	50 e0       	ldi	r21, 0x00	; 0
    4c0a:	0e 94 b2 33 	call	0x6764	; 0x6764 <strncpy>
  // Parse second word up to whitespace as path.
  char* linepath = strtok(NULL, " ");
    4c0e:	80 e0       	ldi	r24, 0x00	; 0
    4c10:	90 e0       	ldi	r25, 0x00	; 0
    4c12:	60 e1       	ldi	r22, 0x10	; 16
    4c14:	71 e0       	ldi	r23, 0x01	; 1
    4c16:	0e 94 86 33 	call	0x670c	; 0x670c <strtok>
    4c1a:	bc 01       	movw	r22, r24
  if (linepath != NULL)
    4c1c:	00 97       	sbiw	r24, 0x00	; 0
    4c1e:	29 f0       	breq	.+10     	; 0x4c2a <parseFirstLine+0x40>
    strncpy(path, linepath, MAX_PATH);
    4c20:	c8 01       	movw	r24, r16
    4c22:	40 e4       	ldi	r20, 0x40	; 64
    4c24:	50 e0       	ldi	r21, 0x00	; 0
    4c26:	0e 94 b2 33 	call	0x6764	; 0x6764 <strncpy>
}
    4c2a:	df 91       	pop	r29
    4c2c:	cf 91       	pop	r28
    4c2e:	1f 91       	pop	r17
    4c30:	0f 91       	pop	r16
    4c32:	08 95       	ret

00004c34 <parseRequest>:
//  [method] [path] [version] \r\n
//  Header_key_1: Header_value_1 \r\n
//  ...
//  Header_key_n: Header_value_n \r\n
//  \r\n
bool parseRequest(uint8_t* buf, int bufSize, char* action, char* path) {
    4c34:	dc 01       	movw	r26, r24
  // Check if the request ends with \r\n to signal end of first line.
  if (bufSize < 2)
    4c36:	62 30       	cpi	r22, 0x02	; 2
    4c38:	71 05       	cpc	r23, r1
    4c3a:	9c f0       	brlt	.+38     	; 0x4c62 <parseRequest+0x2e>
    return false;
  if (buf[bufSize-2] == '\r' && buf[bufSize-1] == '\n') {
    4c3c:	fc 01       	movw	r30, r24
    4c3e:	e6 0f       	add	r30, r22
    4c40:	f7 1f       	adc	r31, r23
    4c42:	32 97       	sbiw	r30, 0x02	; 2
    4c44:	80 81       	ld	r24, Z
    4c46:	32 96       	adiw	r30, 0x02	; 2
    4c48:	8d 30       	cpi	r24, 0x0D	; 13
    4c4a:	59 f4       	brne	.+22     	; 0x4c62 <parseRequest+0x2e>
    4c4c:	31 97       	sbiw	r30, 0x01	; 1
    4c4e:	80 81       	ld	r24, Z
    4c50:	8a 30       	cpi	r24, 0x0A	; 10
    4c52:	39 f4       	brne	.+14     	; 0x4c62 <parseRequest+0x2e>
    parseFirstLine((char*)buf, action, path);
    4c54:	cd 01       	movw	r24, r26
    4c56:	ba 01       	movw	r22, r20
    4c58:	a9 01       	movw	r20, r18
    4c5a:	0e 94 f5 25 	call	0x4bea	; 0x4bea <parseFirstLine>
    4c5e:	81 e0       	ldi	r24, 0x01	; 1
    4c60:	08 95       	ret
    return true;
    4c62:	80 e0       	ldi	r24, 0x00	; 0
  }
  return false;
}
    4c64:	08 95       	ret

00004c66 <loop>:
  httpServer.begin();

  Serial.println(F("Listening for connections..."));
}

void loop(void)
    4c66:	af 92       	push	r10
    4c68:	bf 92       	push	r11
    4c6a:	cf 92       	push	r12
    4c6c:	df 92       	push	r13
    4c6e:	ef 92       	push	r14
    4c70:	ff 92       	push	r15
    4c72:	0f 93       	push	r16
    4c74:	1f 93       	push	r17
    4c76:	df 93       	push	r29
    4c78:	cf 93       	push	r28
    4c7a:	cd b7       	in	r28, 0x3d	; 61
    4c7c:	de b7       	in	r29, 0x3e	; 62
    4c7e:	a6 97       	sbiw	r28, 0x26	; 38
    4c80:	0f b6       	in	r0, 0x3f	; 63
    4c82:	f8 94       	cli
    4c84:	de bf       	out	0x3e, r29	; 62
    4c86:	0f be       	out	0x3f, r0	; 63
    4c88:	cd bf       	out	0x3d, r28	; 61
{
  // Try to get a client which is connected.
  Adafruit_CC3000_ClientRef client = httpServer.available();
    4c8a:	8e 01       	movw	r16, r28
    4c8c:	07 5e       	subi	r16, 0xE7	; 231
    4c8e:	1f 4f       	sbci	r17, 0xFF	; 255
    4c90:	c8 01       	movw	r24, r16
    4c92:	6b ec       	ldi	r22, 0xCB	; 203
    4c94:	74 e0       	ldi	r23, 0x04	; 4
    4c96:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <_ZN22Adafruit_CC3000_Server9availableEv>
  if (client) {
    4c9a:	c8 01       	movw	r24, r16
    4c9c:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <_ZN25Adafruit_CC3000_ClientRefcvbEv>
    4ca0:	88 23       	and	r24, r24
    4ca2:	09 f4       	brne	.+2      	; 0x4ca6 <loop+0x40>
    4ca4:	4e c1       	rjmp	.+668    	; 0x4f42 <loop+0x2dc>
    Serial.println(F("Client connected."));
    4ca6:	89 e0       	ldi	r24, 0x09	; 9
    4ca8:	97 e0       	ldi	r25, 0x07	; 7
    4caa:	6b e5       	ldi	r22, 0x5B	; 91
    4cac:	71 e0       	ldi	r23, 0x01	; 1
    4cae:	0e 94 bf 2c 	call	0x597e	; 0x597e <_ZN5Print7printlnEPK19__FlashStringHelper>
    // Process this request until it completes or times out.
    // Note that this is explicitly limited to handling one request at a time!

    // Clear the incoming data buffer and point to the beginning of it.
    bufindex = 0;
    4cb2:	10 92 2e 06 	sts	0x062E, r1
    4cb6:	10 92 2d 06 	sts	0x062D, r1
    memset(&buffer, 0, sizeof(buffer));
    4cba:	8f e5       	ldi	r24, 0x5F	; 95
    4cbc:	ee ec       	ldi	r30, 0xCE	; 206
    4cbe:	f5 e0       	ldi	r31, 0x05	; 5
    4cc0:	df 01       	movw	r26, r30
    4cc2:	1d 92       	st	X+, r1
    4cc4:	8a 95       	dec	r24
    4cc6:	e9 f7       	brne	.-6      	; 0x4cc2 <loop+0x5c>

    // Clear action and path strings.
    memset(&action, 0, sizeof(action));
    4cc8:	8b e0       	ldi	r24, 0x0B	; 11
    4cca:	ef e2       	ldi	r30, 0x2F	; 47
    4ccc:	f6 e0       	ldi	r31, 0x06	; 6
    4cce:	df 01       	movw	r26, r30
    4cd0:	1d 92       	st	X+, r1
    4cd2:	8a 95       	dec	r24
    4cd4:	e9 f7       	brne	.-6      	; 0x4cd0 <loop+0x6a>
    memset(&path,   0, sizeof(path));
    4cd6:	81 e4       	ldi	r24, 0x41	; 65
    4cd8:	ea e3       	ldi	r30, 0x3A	; 58
    4cda:	f6 e0       	ldi	r31, 0x06	; 6
    4cdc:	df 01       	movw	r26, r30
    4cde:	1d 92       	st	X+, r1
    4ce0:	8a 95       	dec	r24
    4ce2:	e9 f7       	brne	.-6      	; 0x4cde <loop+0x78>

    // Set a timeout for reading all the incoming data.
    unsigned long endtime = millis() + TIMEOUT_MS;
    4ce4:	0e 94 80 30 	call	0x6100	; 0x6100 <millis>
    4ce8:	6b 01       	movw	r12, r22
    4cea:	7c 01       	movw	r14, r24
    4cec:	84 ef       	ldi	r24, 0xF4	; 244
    4cee:	91 e0       	ldi	r25, 0x01	; 1
    4cf0:	a0 e0       	ldi	r26, 0x00	; 0
    4cf2:	b0 e0       	ldi	r27, 0x00	; 0
    4cf4:	c8 0e       	add	r12, r24
    4cf6:	d9 1e       	adc	r13, r25
    4cf8:	ea 1e       	adc	r14, r26
    4cfa:	fb 1e       	adc	r15, r27

    // Read all the incoming data until it can be parsed or the timeout expires.
    bool parsed = false;
    while (!parsed && (millis() < endtime) && (bufindex < BUFFER_SIZE)) {
      if (client.available()) {
    4cfc:	c8 01       	movw	r24, r16
    4cfe:	b0 2e       	mov	r11, r16
    4d00:	a9 2e       	mov	r10, r25
    4d02:	21 c0       	rjmp	.+66     	; 0x4d46 <loop+0xe0>
        buffer[bufindex++] = client.read();
    4d04:	00 91 2d 06 	lds	r16, 0x062D
    4d08:	10 91 2e 06 	lds	r17, 0x062E
    4d0c:	8b 2d       	mov	r24, r11
    4d0e:	9a 2d       	mov	r25, r10
    4d10:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <_ZN25Adafruit_CC3000_ClientRef4readEv>
    4d14:	f8 01       	movw	r30, r16
    4d16:	e2 53       	subi	r30, 0x32	; 50
    4d18:	fa 4f       	sbci	r31, 0xFA	; 250
    4d1a:	80 83       	st	Z, r24
    4d1c:	0f 5f       	subi	r16, 0xFF	; 255
    4d1e:	1f 4f       	sbci	r17, 0xFF	; 255
    4d20:	10 93 2e 06 	sts	0x062E, r17
    4d24:	00 93 2d 06 	sts	0x062D, r16
      }
      parsed = parseRequest(buffer, bufindex, action, path);
    4d28:	60 91 2d 06 	lds	r22, 0x062D
    4d2c:	70 91 2e 06 	lds	r23, 0x062E
    4d30:	8e ec       	ldi	r24, 0xCE	; 206
    4d32:	95 e0       	ldi	r25, 0x05	; 5
    4d34:	4f e2       	ldi	r20, 0x2F	; 47
    4d36:	56 e0       	ldi	r21, 0x06	; 6
    4d38:	2a e3       	ldi	r18, 0x3A	; 58
    4d3a:	36 e0       	ldi	r19, 0x06	; 6
    4d3c:	0e 94 1a 26 	call	0x4c34	; 0x4c34 <parseRequest>
    // Set a timeout for reading all the incoming data.
    unsigned long endtime = millis() + TIMEOUT_MS;

    // Read all the incoming data until it can be parsed or the timeout expires.
    bool parsed = false;
    while (!parsed && (millis() < endtime) && (bufindex < BUFFER_SIZE)) {
    4d40:	88 23       	and	r24, r24
    4d42:	09 f0       	breq	.+2      	; 0x4d46 <loop+0xe0>
    4d44:	cf c0       	rjmp	.+414    	; 0x4ee4 <loop+0x27e>
    4d46:	0e 94 80 30 	call	0x6100	; 0x6100 <millis>
    4d4a:	6c 15       	cp	r22, r12
    4d4c:	7d 05       	cpc	r23, r13
    4d4e:	8e 05       	cpc	r24, r14
    4d50:	9f 05       	cpc	r25, r15
    4d52:	08 f0       	brcs	.+2      	; 0x4d56 <loop+0xf0>
    4d54:	a7 c0       	rjmp	.+334    	; 0x4ea4 <loop+0x23e>
    4d56:	80 91 2d 06 	lds	r24, 0x062D
    4d5a:	90 91 2e 06 	lds	r25, 0x062E
    4d5e:	8e 35       	cpi	r24, 0x5E	; 94
    4d60:	91 05       	cpc	r25, r1
    4d62:	0c f0       	brlt	.+2      	; 0x4d66 <loop+0x100>
    4d64:	9f c0       	rjmp	.+318    	; 0x4ea4 <loop+0x23e>
      if (client.available()) {
    4d66:	8b 2d       	mov	r24, r11
    4d68:	9a 2d       	mov	r25, r10
    4d6a:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <_ZN25Adafruit_CC3000_ClientRef9availableEv>
    4d6e:	89 2b       	or	r24, r25
    4d70:	d9 f2       	breq	.-74     	; 0x4d28 <loop+0xc2>
    4d72:	c8 cf       	rjmp	.-112    	; 0x4d04 <loop+0x9e>
//    	  client.fastrprintln(F("Content-Type: text/html"));
//    	  client.fastrprintln(F("Connection: close")); // the connection will be closed after completion of the response
//    	  client.println();

				for (int i = 0; i < sizeof(HTTP_RESPONCE_HEADER_OK) / 2; i++) {
					client.fastrprint(HTTP_RESPONCE_HEADER_OK[i]);
    4d74:	d6 01       	movw	r26, r12
    4d76:	6d 91       	ld	r22, X+
    4d78:	7d 91       	ld	r23, X+
    4d7a:	6d 01       	movw	r12, r26
    4d7c:	c8 01       	movw	r24, r16
    4d7e:	0e 94 b6 21 	call	0x436c	; 0x436c <_ZN25Adafruit_CC3000_ClientRef10fastrprintEPKc>
//    	  client.fastrprintln(F("HTTP/1.1 200 OK"));
//    	  client.fastrprintln(F("Content-Type: text/html"));
//    	  client.fastrprintln(F("Connection: close")); // the connection will be closed after completion of the response
//    	  client.println();

				for (int i = 0; i < sizeof(HTTP_RESPONCE_HEADER_OK) / 2; i++) {
    4d82:	ba e8       	ldi	r27, 0x8A	; 138
    4d84:	cb 16       	cp	r12, r27
    4d86:	b2 e0       	ldi	r27, 0x02	; 2
    4d88:	db 06       	cpc	r13, r27
    4d8a:	a1 f7       	brne	.-24     	; 0x4d74 <loop+0x10e>
    4d8c:	9a e8       	ldi	r25, 0x8A	; 138
    4d8e:	c9 2e       	mov	r12, r25
    4d90:	92 e0       	ldi	r25, 0x02	; 2
    4d92:	d9 2e       	mov	r13, r25
    4d94:	8e 01       	movw	r16, r28
    4d96:	07 5e       	subi	r16, 0xE7	; 231
    4d98:	1f 4f       	sbci	r17, 0xFF	; 255
    4d9a:	07 c0       	rjmp	.+14     	; 0x4daa <loop+0x144>
					client.fastrprint(HTTP_RESPONCE_HEADER_OK[i]);
				}

				for (int i = 0; i < sizeof(HTTP_TEST_FORM) / 2; i++) {
					client.fastrprint(HTTP_TEST_FORM[i]);
    4d9c:	f6 01       	movw	r30, r12
    4d9e:	61 91       	ld	r22, Z+
    4da0:	71 91       	ld	r23, Z+
    4da2:	6f 01       	movw	r12, r30
    4da4:	c8 01       	movw	r24, r16
    4da6:	0e 94 b6 21 	call	0x436c	; 0x436c <_ZN25Adafruit_CC3000_ClientRef10fastrprintEPKc>

				for (int i = 0; i < sizeof(HTTP_RESPONCE_HEADER_OK) / 2; i++) {
					client.fastrprint(HTTP_RESPONCE_HEADER_OK[i]);
				}

				for (int i = 0; i < sizeof(HTTP_TEST_FORM) / 2; i++) {
    4daa:	fa e9       	ldi	r31, 0x9A	; 154
    4dac:	cf 16       	cp	r12, r31
    4dae:	f2 e0       	ldi	r31, 0x02	; 2
    4db0:	df 06       	cpc	r13, r31
    4db2:	a1 f7       	brne	.-24     	; 0x4d9c <loop+0x136>
//    	  client.fastrprintln(F("<form>"));
//    	  client.fastrprintln(F("<input type=text name='cmd' value='moveleft'>"));
//    	  client.fastrprintln(F("<input type=text name='time' value='1000'>"));
//    	  client.fastrprintln(F("<input type='submit' value='Send data...'>"));
//    	  client.fastrprintln(F("</form>"));
		client.fastrprint(F("You accessed path: "));
    4db4:	c8 01       	movw	r24, r16
    4db6:	64 e2       	ldi	r22, 0x24	; 36
    4db8:	71 e0       	ldi	r23, 0x01	; 1
    4dba:	0e 94 9c 21 	call	0x4338	; 0x4338 <_ZN25Adafruit_CC3000_ClientRef10fastrprintEPK19__FlashStringHelper>
			client.fastrprintln(path);
    4dbe:	c8 01       	movw	r24, r16
    4dc0:	6a e3       	ldi	r22, 0x3A	; 58
    4dc2:	76 e0       	ldi	r23, 0x06	; 6
    4dc4:	0e 94 a9 21 	call	0x4352	; 0x4352 <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPc>
			client.fastrprintln(F("</html>"));
    4dc8:	c8 01       	movw	r24, r16
    4dca:	6c e1       	ldi	r22, 0x1C	; 28
    4dcc:	71 e0       	ldi	r23, 0x01	; 1
    4dce:	0e 94 8f 21 	call	0x431e	; 0x431e <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPK19__FlashStringHelper>

			Serial.print(F(">>>PATH:"));
    4dd2:	89 e0       	ldi	r24, 0x09	; 9
    4dd4:	97 e0       	ldi	r25, 0x07	; 7
    4dd6:	63 e1       	ldi	r22, 0x13	; 19
    4dd8:	71 e0       	ldi	r23, 0x01	; 1
    4dda:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <_ZN5Print5printEPK19__FlashStringHelper>
			if(String(path).startsWith("/?cmd=moveleft&time=")) {
    4dde:	8e 01       	movw	r16, r28
    4de0:	0f 5f       	subi	r16, 0xFF	; 255
    4de2:	1f 4f       	sbci	r17, 0xFF	; 255
    4de4:	c8 01       	movw	r24, r16
    4de6:	6a e3       	ldi	r22, 0x3A	; 58
    4de8:	76 e0       	ldi	r23, 0x06	; 6
    4dea:	0e 94 a9 2f 	call	0x5f52	; 0x5f52 <_ZN6StringC1EPKc>
    4dee:	87 e0       	ldi	r24, 0x07	; 7
    4df0:	e8 2e       	mov	r14, r24
    4df2:	f1 2c       	mov	r15, r1
    4df4:	ec 0e       	add	r14, r28
    4df6:	fd 1e       	adc	r15, r29
    4df8:	c7 01       	movw	r24, r14
    4dfa:	62 e1       	ldi	r22, 0x12	; 18
    4dfc:	71 e0       	ldi	r23, 0x01	; 1
    4dfe:	0e 94 a9 2f 	call	0x5f52	; 0x5f52 <_ZN6StringC1EPKc>
    4e02:	c8 01       	movw	r24, r16
    4e04:	b7 01       	movw	r22, r14
    4e06:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <_ZNK6String10startsWithERKS_>
    4e0a:	d8 2e       	mov	r13, r24
    4e0c:	c7 01       	movw	r24, r14
    4e0e:	0e 94 23 30 	call	0x6046	; 0x6046 <_ZN6StringD1Ev>
    4e12:	c8 01       	movw	r24, r16
    4e14:	0e 94 23 30 	call	0x6046	; 0x6046 <_ZN6StringD1Ev>
    4e18:	dd 20       	and	r13, r13
    4e1a:	09 f4       	brne	.+2      	; 0x4e1e <loop+0x1b8>
    4e1c:	43 c0       	rjmp	.+134    	; 0x4ea4 <loop+0x23e>
				String p = String(path);
    4e1e:	bd e0       	ldi	r27, 0x0D	; 13
    4e20:	ab 2e       	mov	r10, r27
    4e22:	b1 2c       	mov	r11, r1
    4e24:	ac 0e       	add	r10, r28
    4e26:	bd 1e       	adc	r11, r29
    4e28:	c5 01       	movw	r24, r10
    4e2a:	6a e3       	ldi	r22, 0x3A	; 58
    4e2c:	76 e0       	ldi	r23, 0x06	; 6
    4e2e:	0e 94 a9 2f 	call	0x5f52	; 0x5f52 <_ZN6StringC1EPKc>
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
    4e32:	a3 e1       	ldi	r26, 0x13	; 19
    4e34:	ca 2e       	mov	r12, r26
    4e36:	d1 2c       	mov	r13, r1
    4e38:	cc 0e       	add	r12, r28
    4e3a:	dd 1e       	adc	r13, r29
    4e3c:	29 89       	ldd	r18, Y+17	; 0x11
    4e3e:	3a 89       	ldd	r19, Y+18	; 0x12
    4e40:	c6 01       	movw	r24, r12
    4e42:	b5 01       	movw	r22, r10
    4e44:	44 e1       	ldi	r20, 0x14	; 20
    4e46:	50 e0       	ldi	r21, 0x00	; 0
    4e48:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <_ZNK6String9substringEjj>
				String val = p.substring(20);
				int val_int = val.toInt();
    4e4c:	c6 01       	movw	r24, r12
    4e4e:	0e 94 f9 2e 	call	0x5df2	; 0x5df2 <_ZNK6String5toIntEv>
    4e52:	7b 01       	movw	r14, r22
    4e54:	8c 01       	movw	r16, r24
				Serial.print(F(">>>CMD VAL=["));
    4e56:	89 e0       	ldi	r24, 0x09	; 9
    4e58:	97 e0       	ldi	r25, 0x07	; 7
    4e5a:	66 e0       	ldi	r22, 0x06	; 6
    4e5c:	71 e0       	ldi	r23, 0x01	; 1
    4e5e:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.print(val_int);
    4e62:	89 e0       	ldi	r24, 0x09	; 9
    4e64:	97 e0       	ldi	r25, 0x07	; 7
    4e66:	b7 01       	movw	r22, r14
    4e68:	4a e0       	ldi	r20, 0x0A	; 10
    4e6a:	50 e0       	ldi	r21, 0x00	; 0
    4e6c:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <_ZN5Print5printEii>
				Serial.println(F("]"));
    4e70:	89 e0       	ldi	r24, 0x09	; 9
    4e72:	97 e0       	ldi	r25, 0x07	; 7
    4e74:	64 e0       	ldi	r22, 0x04	; 4
    4e76:	71 e0       	ldi	r23, 0x01	; 1
    4e78:	0e 94 bf 2c 	call	0x597e	; 0x597e <_ZN5Print7printlnEPK19__FlashStringHelper>
    4e7c:	c6 01       	movw	r24, r12
    4e7e:	0e 94 23 30 	call	0x6046	; 0x6046 <_ZN6StringD1Ev>
    4e82:	c5 01       	movw	r24, r10
    4e84:	0e 94 23 30 	call	0x6046	; 0x6046 <_ZN6StringD1Ev>
    4e88:	0d c0       	rjmp	.+26     	; 0x4ea4 <loop+0x23e>


      }
      else {
        // Unsupported action, respond with an HTTP 405 method not allowed error.
        client.fastrprintln(F("HTTP/1.1 405 Method Not Allowed"));
    4e8a:	8e 01       	movw	r16, r28
    4e8c:	07 5e       	subi	r16, 0xE7	; 231
    4e8e:	1f 4f       	sbci	r17, 0xFF	; 255
    4e90:	c8 01       	movw	r24, r16
    4e92:	64 ee       	ldi	r22, 0xE4	; 228
    4e94:	70 e0       	ldi	r23, 0x00	; 0
    4e96:	0e 94 8f 21 	call	0x431e	; 0x431e <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPK19__FlashStringHelper>
        client.fastrprintln(F(""));
    4e9a:	c8 01       	movw	r24, r16
    4e9c:	63 ee       	ldi	r22, 0xE3	; 227
    4e9e:	70 e0       	ldi	r23, 0x00	; 0
    4ea0:	0e 94 8f 21 	call	0x431e	; 0x431e <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPK19__FlashStringHelper>
      }
    }

    // Wait a short period to make sure the response had time to send before
    // the connection is closed (the CC3000 sends data asyncronously).
    delay(100);
    4ea4:	64 e6       	ldi	r22, 0x64	; 100
    4ea6:	70 e0       	ldi	r23, 0x00	; 0
    4ea8:	80 e0       	ldi	r24, 0x00	; 0
    4eaa:	90 e0       	ldi	r25, 0x00	; 0
    4eac:	0e 94 8e 30 	call	0x611c	; 0x611c <delay>

    Serial.print("Free RAM: "); Serial.println(getFreeRam(), DEC);
    4eb0:	89 e0       	ldi	r24, 0x09	; 9
    4eb2:	97 e0       	ldi	r25, 0x07	; 7
    4eb4:	67 e2       	ldi	r22, 0x27	; 39
    4eb6:	71 e0       	ldi	r23, 0x01	; 1
    4eb8:	0e 94 fb 2d 	call	0x5bf6	; 0x5bf6 <_ZN5Print5printEPKc>
    4ebc:	0e 94 81 02 	call	0x502	; 0x502 <_Z10getFreeRamv>
    4ec0:	bc 01       	movw	r22, r24
    4ec2:	89 e0       	ldi	r24, 0x09	; 9
    4ec4:	97 e0       	ldi	r25, 0x07	; 7
    4ec6:	4a e0       	ldi	r20, 0x0A	; 10
    4ec8:	50 e0       	ldi	r21, 0x00	; 0
    4eca:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <_ZN5Print7printlnEii>

    // Close the connection when done.
    Serial.println(F("Client disconnected"));
    4ece:	89 e0       	ldi	r24, 0x09	; 9
    4ed0:	97 e0       	ldi	r25, 0x07	; 7
    4ed2:	6f ec       	ldi	r22, 0xCF	; 207
    4ed4:	70 e0       	ldi	r23, 0x00	; 0
    4ed6:	0e 94 bf 2c 	call	0x597e	; 0x597e <_ZN5Print7printlnEPK19__FlashStringHelper>

    client.close();
    4eda:	ce 01       	movw	r24, r28
    4edc:	49 96       	adiw	r24, 0x19	; 25
    4ede:	0e 94 7e 21 	call	0x42fc	; 0x42fc <_ZN25Adafruit_CC3000_ClientRef5closeEv>
    4ee2:	2f c0       	rjmp	.+94     	; 0x4f42 <loop+0x2dc>
      parsed = parseRequest(buffer, bufindex, action, path);
    }

    // Handle the request if it was parsed.
    if (parsed) {
      Serial.println(F("Processing request"));
    4ee4:	89 e0       	ldi	r24, 0x09	; 9
    4ee6:	97 e0       	ldi	r25, 0x07	; 7
    4ee8:	68 e4       	ldi	r22, 0x48	; 72
    4eea:	71 e0       	ldi	r23, 0x01	; 1
    4eec:	0e 94 bf 2c 	call	0x597e	; 0x597e <_ZN5Print7printlnEPK19__FlashStringHelper>
      Serial.print(F("Action: ")); Serial.println(action);
    4ef0:	89 e0       	ldi	r24, 0x09	; 9
    4ef2:	97 e0       	ldi	r25, 0x07	; 7
    4ef4:	6f e3       	ldi	r22, 0x3F	; 63
    4ef6:	71 e0       	ldi	r23, 0x01	; 1
    4ef8:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <_ZN5Print5printEPK19__FlashStringHelper>
    4efc:	89 e0       	ldi	r24, 0x09	; 9
    4efe:	97 e0       	ldi	r25, 0x07	; 7
    4f00:	6f e2       	ldi	r22, 0x2F	; 47
    4f02:	76 e0       	ldi	r23, 0x06	; 6
    4f04:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <_ZN5Print7printlnEPKc>
      Serial.print(F("Path: ")); Serial.println(path);
    4f08:	89 e0       	ldi	r24, 0x09	; 9
    4f0a:	97 e0       	ldi	r25, 0x07	; 7
    4f0c:	68 e3       	ldi	r22, 0x38	; 56
    4f0e:	71 e0       	ldi	r23, 0x01	; 1
    4f10:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <_ZN5Print5printEPK19__FlashStringHelper>
    4f14:	89 e0       	ldi	r24, 0x09	; 9
    4f16:	97 e0       	ldi	r25, 0x07	; 7
    4f18:	6a e3       	ldi	r22, 0x3A	; 58
    4f1a:	76 e0       	ldi	r23, 0x06	; 6
    4f1c:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <_ZN5Print7printlnEPKc>
      // Check the action to see if it was a GET request.
      if (strcmp(action, "GET") == 0) {
    4f20:	8f e2       	ldi	r24, 0x2F	; 47
    4f22:	96 e0       	ldi	r25, 0x06	; 6
    4f24:	62 e3       	ldi	r22, 0x32	; 50
    4f26:	71 e0       	ldi	r23, 0x01	; 1
    4f28:	0e 94 94 33 	call	0x6728	; 0x6728 <strcmp>
    4f2c:	00 97       	sbiw	r24, 0x00	; 0
    4f2e:	09 f0       	breq	.+2      	; 0x4f32 <loop+0x2cc>
    4f30:	ac cf       	rjmp	.-168    	; 0x4e8a <loop+0x224>
    4f32:	f2 e8       	ldi	r31, 0x82	; 130
    4f34:	cf 2e       	mov	r12, r31
    4f36:	f2 e0       	ldi	r31, 0x02	; 2
    4f38:	df 2e       	mov	r13, r31
//    	  client.fastrprintln(F("Content-Type: text/html"));
//    	  client.fastrprintln(F("Connection: close")); // the connection will be closed after completion of the response
//    	  client.println();

				for (int i = 0; i < sizeof(HTTP_RESPONCE_HEADER_OK) / 2; i++) {
					client.fastrprint(HTTP_RESPONCE_HEADER_OK[i]);
    4f3a:	8e 01       	movw	r16, r28
    4f3c:	07 5e       	subi	r16, 0xE7	; 231
    4f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    4f40:	20 cf       	rjmp	.-448    	; 0x4d82 <loop+0x11c>
    // Close the connection when done.
    Serial.println(F("Client disconnected"));

    client.close();
  }
}
    4f42:	a6 96       	adiw	r28, 0x26	; 38
    4f44:	0f b6       	in	r0, 0x3f	; 63
    4f46:	f8 94       	cli
    4f48:	de bf       	out	0x3e, r29	; 62
    4f4a:	0f be       	out	0x3f, r0	; 63
    4f4c:	cd bf       	out	0x3d, r28	; 61
    4f4e:	cf 91       	pop	r28
    4f50:	df 91       	pop	r29
    4f52:	1f 91       	pop	r17
    4f54:	0f 91       	pop	r16
    4f56:	ff 90       	pop	r15
    4f58:	ef 90       	pop	r14
    4f5a:	df 90       	pop	r13
    4f5c:	cf 90       	pop	r12
    4f5e:	bf 90       	pop	r11
    4f60:	af 90       	pop	r10
    4f62:	08 95       	ret

00004f64 <setup>:
	"<input type=text name='time' value='2000'>\n",
	"<input type='submit' value='Send data...'>\n",
	"</form>"
};

void setup(void)
    4f64:	0f 93       	push	r16
    4f66:	1f 93       	push	r17
    4f68:	df 93       	push	r29
    4f6a:	cf 93       	push	r28
    4f6c:	cd b7       	in	r28, 0x3d	; 61
    4f6e:	de b7       	in	r29, 0x3e	; 62
    4f70:	2c 97       	sbiw	r28, 0x0c	; 12
    4f72:	0f b6       	in	r0, 0x3f	; 63
    4f74:	f8 94       	cli
    4f76:	de bf       	out	0x3e, r29	; 62
    4f78:	0f be       	out	0x3f, r0	; 63
    4f7a:	cd bf       	out	0x3d, r28	; 61
{
  Serial.begin(115200);
    4f7c:	89 e0       	ldi	r24, 0x09	; 9
    4f7e:	97 e0       	ldi	r25, 0x07	; 7
    4f80:	40 e0       	ldi	r20, 0x00	; 0
    4f82:	52 ec       	ldi	r21, 0xC2	; 194
    4f84:	61 e0       	ldi	r22, 0x01	; 1
    4f86:	70 e0       	ldi	r23, 0x00	; 0
    4f88:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <_ZN14HardwareSerial5beginEm>
  Serial.println(F("Hello, CC3000!\n"));
    4f8c:	89 e0       	ldi	r24, 0x09	; 9
    4f8e:	97 e0       	ldi	r25, 0x07	; 7
    4f90:	6d e1       	ldi	r22, 0x1D	; 29
    4f92:	73 e0       	ldi	r23, 0x03	; 3
    4f94:	0e 94 bf 2c 	call	0x597e	; 0x597e <_ZN5Print7printlnEPK19__FlashStringHelper>

	Serial.println(String(path));
    4f98:	8e 01       	movw	r16, r28
    4f9a:	0f 5f       	subi	r16, 0xFF	; 255
    4f9c:	1f 4f       	sbci	r17, 0xFF	; 255
    4f9e:	c8 01       	movw	r24, r16
    4fa0:	6a e3       	ldi	r22, 0x3A	; 58
    4fa2:	76 e0       	ldi	r23, 0x06	; 6
    4fa4:	0e 94 a9 2f 	call	0x5f52	; 0x5f52 <_ZN6StringC1EPKc>
    4fa8:	89 e0       	ldi	r24, 0x09	; 9
    4faa:	97 e0       	ldi	r25, 0x07	; 7
    4fac:	b8 01       	movw	r22, r16
    4fae:	0e 94 44 2e 	call	0x5c88	; 0x5c88 <_ZN5Print7printlnERK6String>
    4fb2:	c8 01       	movw	r24, r16
    4fb4:	0e 94 23 30 	call	0x6046	; 0x6046 <_ZN6StringD1Ev>
	Serial.print("SIZE OF HTTP_RESPONCE_HEADER_OK=");
    4fb8:	89 e0       	ldi	r24, 0x09	; 9
    4fba:	97 e0       	ldi	r25, 0x07	; 7
    4fbc:	66 e3       	ldi	r22, 0x36	; 54
    4fbe:	71 e0       	ldi	r23, 0x01	; 1
    4fc0:	0e 94 fb 2d 	call	0x5bf6	; 0x5bf6 <_ZN5Print5printEPKc>
	Serial.println(sizeof(HTTP_RESPONCE_HEADER_OK));
    4fc4:	89 e0       	ldi	r24, 0x09	; 9
    4fc6:	97 e0       	ldi	r25, 0x07	; 7
    4fc8:	68 e0       	ldi	r22, 0x08	; 8
    4fca:	70 e0       	ldi	r23, 0x00	; 0
    4fcc:	4a e0       	ldi	r20, 0x0A	; 10
    4fce:	50 e0       	ldi	r21, 0x00	; 0
    4fd0:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <_ZN5Print7printlnEji>

	Serial.println(String(path));
    4fd4:	8e 01       	movw	r16, r28
    4fd6:	09 5f       	subi	r16, 0xF9	; 249
    4fd8:	1f 4f       	sbci	r17, 0xFF	; 255
    4fda:	c8 01       	movw	r24, r16
    4fdc:	6a e3       	ldi	r22, 0x3A	; 58
    4fde:	76 e0       	ldi	r23, 0x06	; 6
    4fe0:	0e 94 a9 2f 	call	0x5f52	; 0x5f52 <_ZN6StringC1EPKc>
    4fe4:	89 e0       	ldi	r24, 0x09	; 9
    4fe6:	97 e0       	ldi	r25, 0x07	; 7
    4fe8:	b8 01       	movw	r22, r16
    4fea:	0e 94 44 2e 	call	0x5c88	; 0x5c88 <_ZN5Print7printlnERK6String>
    4fee:	c8 01       	movw	r24, r16
    4ff0:	0e 94 23 30 	call	0x6046	; 0x6046 <_ZN6StringD1Ev>
		Serial.print("SIZE OF HTTP_TEST_FORM=");
    4ff4:	89 e0       	ldi	r24, 0x09	; 9
    4ff6:	97 e0       	ldi	r25, 0x07	; 7
    4ff8:	67 e5       	ldi	r22, 0x57	; 87
    4ffa:	71 e0       	ldi	r23, 0x01	; 1
    4ffc:	0e 94 fb 2d 	call	0x5bf6	; 0x5bf6 <_ZN5Print5printEPKc>
		Serial.println(sizeof(HTTP_TEST_FORM));
    5000:	89 e0       	ldi	r24, 0x09	; 9
    5002:	97 e0       	ldi	r25, 0x07	; 7
    5004:	60 e1       	ldi	r22, 0x10	; 16
    5006:	70 e0       	ldi	r23, 0x00	; 0
    5008:	4a e0       	ldi	r20, 0x0A	; 10
    500a:	50 e0       	ldi	r21, 0x00	; 0
    500c:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <_ZN5Print7printlnEji>


  Serial.print("Free RAM: "); Serial.println(getFreeRam(), DEC);
    5010:	89 e0       	ldi	r24, 0x09	; 9
    5012:	97 e0       	ldi	r25, 0x07	; 7
    5014:	67 e2       	ldi	r22, 0x27	; 39
    5016:	71 e0       	ldi	r23, 0x01	; 1
    5018:	0e 94 fb 2d 	call	0x5bf6	; 0x5bf6 <_ZN5Print5printEPKc>
    501c:	0e 94 81 02 	call	0x502	; 0x502 <_Z10getFreeRamv>
    5020:	bc 01       	movw	r22, r24
    5022:	89 e0       	ldi	r24, 0x09	; 9
    5024:	97 e0       	ldi	r25, 0x07	; 7
    5026:	4a e0       	ldi	r20, 0x0A	; 10
    5028:	50 e0       	ldi	r21, 0x00	; 0
    502a:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <_ZN5Print7printlnEii>

  // Initialise the module
  Serial.println(F("\nInitializing..."));
    502e:	89 e0       	ldi	r24, 0x09	; 9
    5030:	97 e0       	ldi	r25, 0x07	; 7
    5032:	6c e0       	ldi	r22, 0x0C	; 12
    5034:	73 e0       	ldi	r23, 0x03	; 3
    5036:	0e 94 bf 2c 	call	0x597e	; 0x597e <_ZN5Print7printlnEPK19__FlashStringHelper>
  if (!cc3000.begin())
    503a:	8a ec       	ldi	r24, 0xCA	; 202
    503c:	94 e0       	ldi	r25, 0x04	; 4
    503e:	60 e0       	ldi	r22, 0x00	; 0
    5040:	40 e0       	ldi	r20, 0x00	; 0
    5042:	20 e0       	ldi	r18, 0x00	; 0
    5044:	30 e0       	ldi	r19, 0x00	; 0
    5046:	0e 94 3b 1c 	call	0x3876	; 0x3876 <_ZN15Adafruit_CC30005beginEhbPKc>
    504a:	88 23       	and	r24, r24
    504c:	39 f4       	brne	.+14     	; 0x505c <setup+0xf8>
  {
    Serial.println(F("Couldn't begin()! Check your wiring?"));
    504e:	89 e0       	ldi	r24, 0x09	; 9
    5050:	97 e0       	ldi	r25, 0x07	; 7
    5052:	67 ee       	ldi	r22, 0xE7	; 231
    5054:	72 e0       	ldi	r23, 0x02	; 2
    5056:	0e 94 bf 2c 	call	0x597e	; 0x597e <_ZN5Print7printlnEPK19__FlashStringHelper>
    505a:	ff cf       	rjmp	.-2      	; 0x505a <setup+0xf6>
    while(1);
  }

  Serial.print(F("\nAttempting to connect to ")); Serial.println(WLAN_SSID);
    505c:	89 e0       	ldi	r24, 0x09	; 9
    505e:	97 e0       	ldi	r25, 0x07	; 7
    5060:	6c ec       	ldi	r22, 0xCC	; 204
    5062:	72 e0       	ldi	r23, 0x02	; 2
    5064:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <_ZN5Print5printEPK19__FlashStringHelper>
    5068:	89 e0       	ldi	r24, 0x09	; 9
    506a:	97 e0       	ldi	r25, 0x07	; 7
    506c:	6f e6       	ldi	r22, 0x6F	; 111
    506e:	71 e0       	ldi	r23, 0x01	; 1
    5070:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <_ZN5Print7printlnEPKc>
  if (!cc3000.connectToAP(WLAN_SSID, WLAN_PASS, WLAN_SECURITY)) {
    5074:	8a ec       	ldi	r24, 0xCA	; 202
    5076:	94 e0       	ldi	r25, 0x04	; 4
    5078:	6f e6       	ldi	r22, 0x6F	; 111
    507a:	71 e0       	ldi	r23, 0x01	; 1
    507c:	45 e7       	ldi	r20, 0x75	; 117
    507e:	51 e0       	ldi	r21, 0x01	; 1
    5080:	23 e0       	ldi	r18, 0x03	; 3
    5082:	00 e0       	ldi	r16, 0x00	; 0
    5084:	0e 94 76 1d 	call	0x3aec	; 0x3aec <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh>
    5088:	88 23       	and	r24, r24
    508a:	39 f4       	brne	.+14     	; 0x509a <setup+0x136>
    Serial.println(F("Failed!"));
    508c:	89 e0       	ldi	r24, 0x09	; 9
    508e:	97 e0       	ldi	r25, 0x07	; 7
    5090:	64 ec       	ldi	r22, 0xC4	; 196
    5092:	72 e0       	ldi	r23, 0x02	; 2
    5094:	0e 94 bf 2c 	call	0x597e	; 0x597e <_ZN5Print7printlnEPK19__FlashStringHelper>
    5098:	ff cf       	rjmp	.-2      	; 0x5098 <setup+0x134>
    while(1);
  }

  Serial.println(F("Connected!"));
    509a:	89 e0       	ldi	r24, 0x09	; 9
    509c:	97 e0       	ldi	r25, 0x07	; 7
    509e:	69 eb       	ldi	r22, 0xB9	; 185
    50a0:	72 e0       	ldi	r23, 0x02	; 2
    50a2:	0e 94 bf 2c 	call	0x597e	; 0x597e <_ZN5Print7printlnEPK19__FlashStringHelper>

  Serial.println(F("Request DHCP"));
    50a6:	89 e0       	ldi	r24, 0x09	; 9
    50a8:	97 e0       	ldi	r25, 0x07	; 7
    50aa:	6c ea       	ldi	r22, 0xAC	; 172
    50ac:	72 e0       	ldi	r23, 0x02	; 2
    50ae:	0e 94 bf 2c 	call	0x597e	; 0x597e <_ZN5Print7printlnEPK19__FlashStringHelper>
    50b2:	06 c0       	rjmp	.+12     	; 0x50c0 <setup+0x15c>
  while (!cc3000.checkDHCP())
  {
    delay(100); // ToDo: Insert a DHCP timeout!
    50b4:	64 e6       	ldi	r22, 0x64	; 100
    50b6:	70 e0       	ldi	r23, 0x00	; 0
    50b8:	80 e0       	ldi	r24, 0x00	; 0
    50ba:	90 e0       	ldi	r25, 0x00	; 0
    50bc:	0e 94 8e 30 	call	0x611c	; 0x611c <delay>
  }

  Serial.println(F("Connected!"));

  Serial.println(F("Request DHCP"));
  while (!cc3000.checkDHCP())
    50c0:	8a ec       	ldi	r24, 0xCA	; 202
    50c2:	94 e0       	ldi	r25, 0x04	; 4
    50c4:	0e 94 77 19 	call	0x32ee	; 0x32ee <_ZN15Adafruit_CC30009checkDHCPEv>
    50c8:	88 23       	and	r24, r24
    50ca:	a1 f3       	breq	.-24     	; 0x50b4 <setup+0x150>
    50cc:	06 c0       	rjmp	.+12     	; 0x50da <setup+0x176>
    delay(100); // ToDo: Insert a DHCP timeout!
  }

  // Display the IP address DNS, Gateway, etc.
  while (! displayConnectionDetails()) {
    delay(1000);
    50ce:	68 ee       	ldi	r22, 0xE8	; 232
    50d0:	73 e0       	ldi	r23, 0x03	; 3
    50d2:	80 e0       	ldi	r24, 0x00	; 0
    50d4:	90 e0       	ldi	r25, 0x00	; 0
    50d6:	0e 94 8e 30 	call	0x611c	; 0x611c <delay>
  {
    delay(100); // ToDo: Insert a DHCP timeout!
  }

  // Display the IP address DNS, Gateway, etc.
  while (! displayConnectionDetails()) {
    50da:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <displayConnectionDetails>
    50de:	88 23       	and	r24, r24
    50e0:	b1 f3       	breq	.-20     	; 0x50ce <setup+0x16a>
  }

  // ******************************************************
  // You can safely remove this to save some flash memory!
  // ******************************************************
  Serial.println(F("\r\nNOTE: This sketch may cause problems with other sketches"));
    50e2:	89 e0       	ldi	r24, 0x09	; 9
    50e4:	97 e0       	ldi	r25, 0x07	; 7
    50e6:	61 e7       	ldi	r22, 0x71	; 113
    50e8:	72 e0       	ldi	r23, 0x02	; 2
    50ea:	0e 94 bf 2c 	call	0x597e	; 0x597e <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println(F("since the .disconnect() function is never called, so the"));
    50ee:	89 e0       	ldi	r24, 0x09	; 9
    50f0:	97 e0       	ldi	r25, 0x07	; 7
    50f2:	68 e3       	ldi	r22, 0x38	; 56
    50f4:	72 e0       	ldi	r23, 0x02	; 2
    50f6:	0e 94 bf 2c 	call	0x597e	; 0x597e <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println(F("AP may refuse connection requests from the CC3000 until a"));
    50fa:	89 e0       	ldi	r24, 0x09	; 9
    50fc:	97 e0       	ldi	r25, 0x07	; 7
    50fe:	6e ef       	ldi	r22, 0xFE	; 254
    5100:	71 e0       	ldi	r23, 0x01	; 1
    5102:	0e 94 bf 2c 	call	0x597e	; 0x597e <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println(F("timeout period passes.  This is normal behaviour since"));
    5106:	89 e0       	ldi	r24, 0x09	; 9
    5108:	97 e0       	ldi	r25, 0x07	; 7
    510a:	67 ec       	ldi	r22, 0xC7	; 199
    510c:	71 e0       	ldi	r23, 0x01	; 1
    510e:	0e 94 bf 2c 	call	0x597e	; 0x597e <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println(F("there isn't an obvious moment to disconnect with a server.\r\n"));
    5112:	89 e0       	ldi	r24, 0x09	; 9
    5114:	97 e0       	ldi	r25, 0x07	; 7
    5116:	6a e8       	ldi	r22, 0x8A	; 138
    5118:	71 e0       	ldi	r23, 0x01	; 1
    511a:	0e 94 bf 2c 	call	0x597e	; 0x597e <_ZN5Print7printlnEPK19__FlashStringHelper>

  // Start listening for connections
  httpServer.begin();
    511e:	8b ec       	ldi	r24, 0xCB	; 203
    5120:	94 e0       	ldi	r25, 0x04	; 4
    5122:	0e 94 85 20 	call	0x410a	; 0x410a <_ZN22Adafruit_CC3000_Server5beginEv>

  Serial.println(F("Listening for connections..."));
    5126:	89 e0       	ldi	r24, 0x09	; 9
    5128:	97 e0       	ldi	r25, 0x07	; 7
    512a:	6d e6       	ldi	r22, 0x6D	; 109
    512c:	71 e0       	ldi	r23, 0x01	; 1
    512e:	0e 94 bf 2c 	call	0x597e	; 0x597e <_ZN5Print7printlnEPK19__FlashStringHelper>
}
    5132:	2c 96       	adiw	r28, 0x0c	; 12
    5134:	0f b6       	in	r0, 0x3f	; 63
    5136:	f8 94       	cli
    5138:	de bf       	out	0x3e, r29	; 62
    513a:	0f be       	out	0x3f, r0	; 63
    513c:	cd bf       	out	0x3d, r28	; 61
    513e:	cf 91       	pop	r28
    5140:	df 91       	pop	r29
    5142:	1f 91       	pop	r17
    5144:	0f 91       	pop	r16
    5146:	08 95       	ret

00005148 <malloc>:
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	if (len < sizeof(struct __freelist) - sizeof(size_t))
    5148:	0f 93       	push	r16
    514a:	1f 93       	push	r17
    514c:	cf 93       	push	r28
    514e:	df 93       	push	r29
    5150:	bc 01       	movw	r22, r24
    5152:	82 30       	cpi	r24, 0x02	; 2
    5154:	91 05       	cpc	r25, r1
    5156:	10 f4       	brcc	.+4      	; 0x515c <malloc+0x14>
    5158:	62 e0       	ldi	r22, 0x02	; 2
    515a:	70 e0       	ldi	r23, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    515c:	e0 91 3d 07 	lds	r30, 0x073D
    5160:	f0 91 3e 07 	lds	r31, 0x073E
    5164:	a0 e0       	ldi	r26, 0x00	; 0
    5166:	b0 e0       	ldi	r27, 0x00	; 0
    5168:	40 e0       	ldi	r20, 0x00	; 0
    516a:	50 e0       	ldi	r21, 0x00	; 0
    516c:	24 c0       	rjmp	.+72     	; 0x51b6 <malloc+0x6e>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
    516e:	80 81       	ld	r24, Z
    5170:	91 81       	ldd	r25, Z+1	; 0x01
    5172:	86 17       	cp	r24, r22
    5174:	97 07       	cpc	r25, r23
    5176:	d0 f0       	brcs	.+52     	; 0x51ac <malloc+0x64>
			continue;
		if (fp1->sz == len) {
    5178:	86 17       	cp	r24, r22
    517a:	97 07       	cpc	r25, r23
    517c:	71 f4       	brne	.+28     	; 0x519a <malloc+0x52>
    517e:	82 81       	ldd	r24, Z+2	; 0x02
    5180:	93 81       	ldd	r25, Z+3	; 0x03
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
    5182:	10 97       	sbiw	r26, 0x00	; 0
    5184:	29 f0       	breq	.+10     	; 0x5190 <malloc+0x48>
				fp2->nx = fp1->nx;
    5186:	13 96       	adiw	r26, 0x03	; 3
    5188:	9c 93       	st	X, r25
    518a:	8e 93       	st	-X, r24
    518c:	12 97       	sbiw	r26, 0x02	; 2
    518e:	2c c0       	rjmp	.+88     	; 0x51e8 <malloc+0xa0>
			else
				__flp = fp1->nx;
    5190:	90 93 3e 07 	sts	0x073E, r25
    5194:	80 93 3d 07 	sts	0x073D, r24
    5198:	27 c0       	rjmp	.+78     	; 0x51e8 <malloc+0xa0>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    519a:	41 15       	cp	r20, r1
    519c:	51 05       	cpc	r21, r1
    519e:	19 f0       	breq	.+6      	; 0x51a6 <malloc+0x5e>
    51a0:	84 17       	cp	r24, r20
    51a2:	95 07       	cpc	r25, r21
    51a4:	18 f4       	brcc	.+6      	; 0x51ac <malloc+0x64>
    51a6:	ef 01       	movw	r28, r30
    51a8:	8d 01       	movw	r16, r26
    51aa:	ac 01       	movw	r20, r24
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    51ac:	df 01       	movw	r26, r30
    51ae:	82 81       	ldd	r24, Z+2	; 0x02
    51b0:	93 81       	ldd	r25, Z+3	; 0x03
    51b2:	9c 01       	movw	r18, r24
    51b4:	f9 01       	movw	r30, r18
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
    51b6:	30 97       	sbiw	r30, 0x00	; 0
    51b8:	d1 f6       	brne	.-76     	; 0x516e <malloc+0x26>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
    51ba:	41 15       	cp	r20, r1
    51bc:	51 05       	cpc	r21, r1
    51be:	f9 f0       	breq	.+62     	; 0x51fe <malloc+0xb6>
		if (s - len < sizeof(struct __freelist)) {
    51c0:	ca 01       	movw	r24, r20
    51c2:	86 1b       	sub	r24, r22
    51c4:	97 0b       	sbc	r25, r23
    51c6:	84 30       	cpi	r24, 0x04	; 4
    51c8:	91 05       	cpc	r25, r1
    51ca:	80 f4       	brcc	.+32     	; 0x51ec <malloc+0xa4>
    51cc:	8a 81       	ldd	r24, Y+2	; 0x02
    51ce:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
    51d0:	01 15       	cp	r16, r1
    51d2:	11 05       	cpc	r17, r1
    51d4:	21 f0       	breq	.+8      	; 0x51de <malloc+0x96>
				sfp2->nx = sfp1->nx;
    51d6:	f8 01       	movw	r30, r16
    51d8:	93 83       	std	Z+3, r25	; 0x03
    51da:	82 83       	std	Z+2, r24	; 0x02
    51dc:	04 c0       	rjmp	.+8      	; 0x51e6 <malloc+0x9e>
			else
				__flp = sfp1->nx;
    51de:	90 93 3e 07 	sts	0x073E, r25
    51e2:	80 93 3d 07 	sts	0x073D, r24
			return &(sfp1->nx);
    51e6:	fe 01       	movw	r30, r28
    51e8:	32 96       	adiw	r30, 0x02	; 2
    51ea:	45 c0       	rjmp	.+138    	; 0x5276 <malloc+0x12e>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
    51ec:	fe 01       	movw	r30, r28
    51ee:	e8 0f       	add	r30, r24
    51f0:	f9 1f       	adc	r31, r25
    51f2:	61 93       	st	Z+, r22
    51f4:	71 93       	st	Z+, r23
		sfp1->sz = s - sizeof(size_t);
    51f6:	02 97       	sbiw	r24, 0x02	; 2
    51f8:	99 83       	std	Y+1, r25	; 0x01
    51fa:	88 83       	st	Y, r24
    51fc:	3c c0       	rjmp	.+120    	; 0x5276 <malloc+0x12e>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
    51fe:	80 91 3b 07 	lds	r24, 0x073B
    5202:	90 91 3c 07 	lds	r25, 0x073C
    5206:	89 2b       	or	r24, r25
    5208:	41 f4       	brne	.+16     	; 0x521a <malloc+0xd2>
		__brkval = __malloc_heap_start;
    520a:	80 91 9c 02 	lds	r24, 0x029C
    520e:	90 91 9d 02 	lds	r25, 0x029D
    5212:	90 93 3c 07 	sts	0x073C, r25
    5216:	80 93 3b 07 	sts	0x073B, r24
	cp = __malloc_heap_end;
    521a:	40 91 9e 02 	lds	r20, 0x029E
    521e:	50 91 9f 02 	lds	r21, 0x029F
	if (cp == 0)
    5222:	41 15       	cp	r20, r1
    5224:	51 05       	cpc	r21, r1
    5226:	41 f4       	brne	.+16     	; 0x5238 <malloc+0xf0>
		cp = STACK_POINTER() - __malloc_margin;
    5228:	4d b7       	in	r20, 0x3d	; 61
    522a:	5e b7       	in	r21, 0x3e	; 62
    522c:	80 91 9a 02 	lds	r24, 0x029A
    5230:	90 91 9b 02 	lds	r25, 0x029B
    5234:	48 1b       	sub	r20, r24
    5236:	59 0b       	sbc	r21, r25
	if (cp <= __brkval)
    5238:	20 91 3b 07 	lds	r18, 0x073B
    523c:	30 91 3c 07 	lds	r19, 0x073C
    5240:	24 17       	cp	r18, r20
    5242:	35 07       	cpc	r19, r21
    5244:	b0 f4       	brcc	.+44     	; 0x5272 <malloc+0x12a>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
    5246:	ca 01       	movw	r24, r20
    5248:	82 1b       	sub	r24, r18
    524a:	93 0b       	sbc	r25, r19
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    524c:	86 17       	cp	r24, r22
    524e:	97 07       	cpc	r25, r23
    5250:	80 f0       	brcs	.+32     	; 0x5272 <malloc+0x12a>
    5252:	ab 01       	movw	r20, r22
    5254:	4e 5f       	subi	r20, 0xFE	; 254
    5256:	5f 4f       	sbci	r21, 0xFF	; 255
    5258:	84 17       	cp	r24, r20
    525a:	95 07       	cpc	r25, r21
    525c:	50 f0       	brcs	.+20     	; 0x5272 <malloc+0x12a>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    525e:	42 0f       	add	r20, r18
    5260:	53 1f       	adc	r21, r19
    5262:	50 93 3c 07 	sts	0x073C, r21
    5266:	40 93 3b 07 	sts	0x073B, r20
		fp1->sz = len;
    526a:	f9 01       	movw	r30, r18
    526c:	61 93       	st	Z+, r22
    526e:	71 93       	st	Z+, r23
    5270:	02 c0       	rjmp	.+4      	; 0x5276 <malloc+0x12e>
		return &(fp1->nx);
    5272:	e0 e0       	ldi	r30, 0x00	; 0
    5274:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
    5276:	cf 01       	movw	r24, r30
    5278:	df 91       	pop	r29
    527a:	cf 91       	pop	r28
    527c:	1f 91       	pop	r17
    527e:	0f 91       	pop	r16
    5280:	08 95       	ret

00005282 <free>:
{
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    5282:	cf 93       	push	r28
    5284:	df 93       	push	r29
    5286:	9c 01       	movw	r18, r24
    5288:	00 97       	sbiw	r24, 0x00	; 0
    528a:	09 f4       	brne	.+2      	; 0x528e <free+0xc>
    528c:	8f c0       	rjmp	.+286    	; 0x53ac <free+0x12a>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
    528e:	ec 01       	movw	r28, r24
    5290:	22 97       	sbiw	r28, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    5292:	1b 82       	std	Y+3, r1	; 0x03
    5294:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    5296:	60 91 3d 07 	lds	r22, 0x073D
    529a:	70 91 3e 07 	lds	r23, 0x073E
    529e:	61 15       	cp	r22, r1
    52a0:	71 05       	cpc	r23, r1
    52a2:	81 f4       	brne	.+32     	; 0x52c4 <free+0x42>
		if ((char *)p + fpnew->sz == __brkval)
    52a4:	88 81       	ld	r24, Y
    52a6:	99 81       	ldd	r25, Y+1	; 0x01
    52a8:	82 0f       	add	r24, r18
    52aa:	93 1f       	adc	r25, r19
    52ac:	20 91 3b 07 	lds	r18, 0x073B
    52b0:	30 91 3c 07 	lds	r19, 0x073C
    52b4:	28 17       	cp	r18, r24
    52b6:	39 07       	cpc	r19, r25
    52b8:	39 f5       	brne	.+78     	; 0x5308 <free+0x86>
			__brkval = cpnew;
    52ba:	d0 93 3c 07 	sts	0x073C, r29
    52be:	c0 93 3b 07 	sts	0x073B, r28
    52c2:	74 c0       	rjmp	.+232    	; 0x53ac <free+0x12a>
		else
			__flp = fpnew;
    52c4:	db 01       	movw	r26, r22
    52c6:	40 e0       	ldi	r20, 0x00	; 0
    52c8:	50 e0       	ldi	r21, 0x00	; 0
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    52ca:	ac 17       	cp	r26, r28
    52cc:	bd 07       	cpc	r27, r29
    52ce:	08 f1       	brcs	.+66     	; 0x5312 <free+0x90>
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    52d0:	bb 83       	std	Y+3, r27	; 0x03
    52d2:	aa 83       	std	Y+2, r26	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    52d4:	fe 01       	movw	r30, r28
    52d6:	21 91       	ld	r18, Z+
    52d8:	31 91       	ld	r19, Z+
    52da:	e2 0f       	add	r30, r18
    52dc:	f3 1f       	adc	r31, r19
    52de:	ae 17       	cp	r26, r30
    52e0:	bf 07       	cpc	r27, r31
    52e2:	79 f4       	brne	.+30     	; 0x5302 <free+0x80>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    52e4:	8d 91       	ld	r24, X+
    52e6:	9c 91       	ld	r25, X
    52e8:	11 97       	sbiw	r26, 0x01	; 1
    52ea:	28 0f       	add	r18, r24
    52ec:	39 1f       	adc	r19, r25
    52ee:	2e 5f       	subi	r18, 0xFE	; 254
    52f0:	3f 4f       	sbci	r19, 0xFF	; 255
    52f2:	39 83       	std	Y+1, r19	; 0x01
    52f4:	28 83       	st	Y, r18
			fpnew->nx = fp1->nx;
    52f6:	12 96       	adiw	r26, 0x02	; 2
    52f8:	8d 91       	ld	r24, X+
    52fa:	9c 91       	ld	r25, X
    52fc:	13 97       	sbiw	r26, 0x03	; 3
    52fe:	9b 83       	std	Y+3, r25	; 0x03
    5300:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (fp2 == 0) {
    5302:	41 15       	cp	r20, r1
    5304:	51 05       	cpc	r21, r1
    5306:	71 f4       	brne	.+28     	; 0x5324 <free+0xa2>
			/* new head of freelist */
			__flp = fpnew;
    5308:	d0 93 3e 07 	sts	0x073E, r29
    530c:	c0 93 3d 07 	sts	0x073D, r28
    5310:	4d c0       	rjmp	.+154    	; 0x53ac <free+0x12a>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    5312:	12 96       	adiw	r26, 0x02	; 2
    5314:	8d 91       	ld	r24, X+
    5316:	9c 91       	ld	r25, X
    5318:	13 97       	sbiw	r26, 0x03	; 3
    531a:	ad 01       	movw	r20, r26
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
    531c:	00 97       	sbiw	r24, 0x00	; 0
    531e:	11 f0       	breq	.+4      	; 0x5324 <free+0xa2>
    5320:	dc 01       	movw	r26, r24
    5322:	d3 cf       	rjmp	.-90     	; 0x52ca <free+0x48>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    5324:	da 01       	movw	r26, r20
    5326:	13 96       	adiw	r26, 0x03	; 3
    5328:	dc 93       	st	X, r29
    532a:	ce 93       	st	-X, r28
    532c:	12 97       	sbiw	r26, 0x02	; 2
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    532e:	fa 01       	movw	r30, r20
    5330:	21 91       	ld	r18, Z+
    5332:	31 91       	ld	r19, Z+
    5334:	e2 0f       	add	r30, r18
    5336:	f3 1f       	adc	r31, r19
    5338:	ce 17       	cp	r28, r30
    533a:	df 07       	cpc	r29, r31
    533c:	69 f4       	brne	.+26     	; 0x5358 <free+0xd6>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    533e:	88 81       	ld	r24, Y
    5340:	99 81       	ldd	r25, Y+1	; 0x01
    5342:	28 0f       	add	r18, r24
    5344:	39 1f       	adc	r19, r25
    5346:	2e 5f       	subi	r18, 0xFE	; 254
    5348:	3f 4f       	sbci	r19, 0xFF	; 255
    534a:	fa 01       	movw	r30, r20
    534c:	31 83       	std	Z+1, r19	; 0x01
    534e:	20 83       	st	Z, r18
		fp2->nx = fpnew->nx;
    5350:	8a 81       	ldd	r24, Y+2	; 0x02
    5352:	9b 81       	ldd	r25, Y+3	; 0x03
    5354:	93 83       	std	Z+3, r25	; 0x03
    5356:	82 83       	std	Z+2, r24	; 0x02
    5358:	e0 e0       	ldi	r30, 0x00	; 0
    535a:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1->nx != 0;
    535c:	db 01       	movw	r26, r22
    535e:	12 96       	adiw	r26, 0x02	; 2
    5360:	8d 91       	ld	r24, X+
    5362:	9c 91       	ld	r25, X
    5364:	13 97       	sbiw	r26, 0x03	; 3
    5366:	00 97       	sbiw	r24, 0x00	; 0
    5368:	19 f0       	breq	.+6      	; 0x5370 <free+0xee>
    536a:	bc 01       	movw	r22, r24
    536c:	fd 01       	movw	r30, r26
    536e:	f6 cf       	rjmp	.-20     	; 0x535c <free+0xda>
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
    5370:	ab 01       	movw	r20, r22
    5372:	4e 5f       	subi	r20, 0xFE	; 254
    5374:	5f 4f       	sbci	r21, 0xFF	; 255
	if (cp2 + fp1->sz == __brkval) {
    5376:	db 01       	movw	r26, r22
    5378:	8d 91       	ld	r24, X+
    537a:	9c 91       	ld	r25, X
    537c:	84 0f       	add	r24, r20
    537e:	95 1f       	adc	r25, r21
    5380:	20 91 3b 07 	lds	r18, 0x073B
    5384:	30 91 3c 07 	lds	r19, 0x073C
    5388:	28 17       	cp	r18, r24
    538a:	39 07       	cpc	r19, r25
    538c:	79 f4       	brne	.+30     	; 0x53ac <free+0x12a>
		if (fp2 == NULL)
    538e:	30 97       	sbiw	r30, 0x00	; 0
    5390:	29 f4       	brne	.+10     	; 0x539c <free+0x11a>
			/* Freelist is empty now. */
			__flp = NULL;
    5392:	10 92 3e 07 	sts	0x073E, r1
    5396:	10 92 3d 07 	sts	0x073D, r1
    539a:	02 c0       	rjmp	.+4      	; 0x53a0 <free+0x11e>
		else
			fp2->nx = NULL;
    539c:	13 82       	std	Z+3, r1	; 0x03
    539e:	12 82       	std	Z+2, r1	; 0x02
		__brkval = cp2 - sizeof(size_t);
    53a0:	42 50       	subi	r20, 0x02	; 2
    53a2:	50 40       	sbci	r21, 0x00	; 0
    53a4:	50 93 3c 07 	sts	0x073C, r21
    53a8:	40 93 3b 07 	sts	0x073B, r20
	}
}
    53ac:	df 91       	pop	r29
    53ae:	cf 91       	pop	r28
    53b0:	08 95       	ret

000053b2 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    53b2:	08 95       	ret

000053b4 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
    53b4:	1f 92       	push	r1
    53b6:	0f 92       	push	r0
    53b8:	0f b6       	in	r0, 0x3f	; 63
    53ba:	0f 92       	push	r0
    53bc:	11 24       	eor	r1, r1
    53be:	2f 93       	push	r18
    53c0:	3f 93       	push	r19
    53c2:	4f 93       	push	r20
    53c4:	8f 93       	push	r24
    53c6:	9f 93       	push	r25
    53c8:	ef 93       	push	r30
    53ca:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    53cc:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    53d0:	20 91 c1 06 	lds	r18, 0x06C1
    53d4:	30 91 c2 06 	lds	r19, 0x06C2

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    53d8:	2f 5f       	subi	r18, 0xFF	; 255
    53da:	3f 4f       	sbci	r19, 0xFF	; 255
    53dc:	2f 73       	andi	r18, 0x3F	; 63
    53de:	30 70       	andi	r19, 0x00	; 0
    53e0:	80 91 c3 06 	lds	r24, 0x06C3
    53e4:	90 91 c4 06 	lds	r25, 0x06C4
    53e8:	28 17       	cp	r18, r24
    53ea:	39 07       	cpc	r19, r25
    53ec:	59 f0       	breq	.+22     	; 0x5404 <__vector_18+0x50>
    buffer->buffer[buffer->head] = c;
    53ee:	e0 91 c1 06 	lds	r30, 0x06C1
    53f2:	f0 91 c2 06 	lds	r31, 0x06C2
    53f6:	ef 57       	subi	r30, 0x7F	; 127
    53f8:	f9 4f       	sbci	r31, 0xF9	; 249
    53fa:	40 83       	st	Z, r20
    buffer->head = i;
    53fc:	30 93 c2 06 	sts	0x06C2, r19
    5400:	20 93 c1 06 	sts	0x06C1, r18
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
    5404:	ff 91       	pop	r31
    5406:	ef 91       	pop	r30
    5408:	9f 91       	pop	r25
    540a:	8f 91       	pop	r24
    540c:	4f 91       	pop	r20
    540e:	3f 91       	pop	r19
    5410:	2f 91       	pop	r18
    5412:	0f 90       	pop	r0
    5414:	0f be       	out	0x3f, r0	; 63
    5416:	0f 90       	pop	r0
    5418:	1f 90       	pop	r1
    541a:	18 95       	reti

0000541c <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    541c:	e0 91 15 07 	lds	r30, 0x0715
    5420:	f0 91 16 07 	lds	r31, 0x0716
    5424:	e0 5c       	subi	r30, 0xC0	; 192
    5426:	ff 4f       	sbci	r31, 0xFF	; 255
    5428:	81 91       	ld	r24, Z+
    542a:	91 91       	ld	r25, Z+
    542c:	20 81       	ld	r18, Z
    542e:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    5430:	82 1b       	sub	r24, r18
    5432:	93 0b       	sbc	r25, r19
    5434:	8f 73       	andi	r24, 0x3F	; 63
    5436:	90 70       	andi	r25, 0x00	; 0
    5438:	89 2b       	or	r24, r25
    543a:	11 f0       	breq	.+4      	; 0x5440 <_Z14serialEventRunv+0x24>
    543c:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <_Z11serialEventv>
    5440:	08 95       	ret

00005442 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    5442:	1f 92       	push	r1
    5444:	0f 92       	push	r0
    5446:	0f b6       	in	r0, 0x3f	; 63
    5448:	0f 92       	push	r0
    544a:	11 24       	eor	r1, r1
    544c:	2f 93       	push	r18
    544e:	3f 93       	push	r19
    5450:	8f 93       	push	r24
    5452:	9f 93       	push	r25
    5454:	ef 93       	push	r30
    5456:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    5458:	20 91 05 07 	lds	r18, 0x0705
    545c:	30 91 06 07 	lds	r19, 0x0706
    5460:	80 91 07 07 	lds	r24, 0x0707
    5464:	90 91 08 07 	lds	r25, 0x0708
    5468:	28 17       	cp	r18, r24
    546a:	39 07       	cpc	r19, r25
    546c:	31 f4       	brne	.+12     	; 0x547a <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    546e:	80 91 c1 00 	lds	r24, 0x00C1
    5472:	8f 7d       	andi	r24, 0xDF	; 223
    5474:	80 93 c1 00 	sts	0x00C1, r24
    5478:	14 c0       	rjmp	.+40     	; 0x54a2 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    547a:	e0 91 07 07 	lds	r30, 0x0707
    547e:	f0 91 08 07 	lds	r31, 0x0708
    5482:	eb 53       	subi	r30, 0x3B	; 59
    5484:	f9 4f       	sbci	r31, 0xF9	; 249
    5486:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    5488:	80 91 07 07 	lds	r24, 0x0707
    548c:	90 91 08 07 	lds	r25, 0x0708
    5490:	01 96       	adiw	r24, 0x01	; 1
    5492:	8f 73       	andi	r24, 0x3F	; 63
    5494:	90 70       	andi	r25, 0x00	; 0
    5496:	90 93 08 07 	sts	0x0708, r25
    549a:	80 93 07 07 	sts	0x0707, r24
	
  #if defined(UDR0)
    UDR0 = c;
    549e:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    54a2:	ff 91       	pop	r31
    54a4:	ef 91       	pop	r30
    54a6:	9f 91       	pop	r25
    54a8:	8f 91       	pop	r24
    54aa:	3f 91       	pop	r19
    54ac:	2f 91       	pop	r18
    54ae:	0f 90       	pop	r0
    54b0:	0f be       	out	0x3f, r0	; 63
    54b2:	0f 90       	pop	r0
    54b4:	1f 90       	pop	r1
    54b6:	18 95       	reti

000054b8 <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    54b8:	af 92       	push	r10
    54ba:	bf 92       	push	r11
    54bc:	df 92       	push	r13
    54be:	ef 92       	push	r14
    54c0:	ff 92       	push	r15
    54c2:	0f 93       	push	r16
    54c4:	1f 93       	push	r17
    54c6:	cf 93       	push	r28
    54c8:	df 93       	push	r29
    54ca:	ec 01       	movw	r28, r24
    54cc:	7a 01       	movw	r14, r20
    54ce:	8b 01       	movw	r16, r22
    54d0:	dd 24       	eor	r13, r13
    54d2:	40 30       	cpi	r20, 0x00	; 0
    54d4:	81 ee       	ldi	r24, 0xE1	; 225
    54d6:	58 07       	cpc	r21, r24
    54d8:	80 e0       	ldi	r24, 0x00	; 0
    54da:	68 07       	cpc	r22, r24
    54dc:	80 e0       	ldi	r24, 0x00	; 0
    54de:	78 07       	cpc	r23, r24
    54e0:	11 f0       	breq	.+4      	; 0x54e6 <_ZN14HardwareSerial5beginEm+0x2e>
    54e2:	dd 24       	eor	r13, r13
    54e4:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    54e6:	91 e0       	ldi	r25, 0x01	; 1
    54e8:	a9 2e       	mov	r10, r25
    54ea:	b1 2c       	mov	r11, r1
    54ec:	ec 89       	ldd	r30, Y+20	; 0x14
    54ee:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    54f0:	dd 20       	and	r13, r13
    54f2:	69 f0       	breq	.+26     	; 0x550e <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    54f4:	c5 01       	movw	r24, r10
    54f6:	0e 8c       	ldd	r0, Y+30	; 0x1e
    54f8:	02 c0       	rjmp	.+4      	; 0x54fe <_ZN14HardwareSerial5beginEm+0x46>
    54fa:	88 0f       	add	r24, r24
    54fc:	99 1f       	adc	r25, r25
    54fe:	0a 94       	dec	r0
    5500:	e2 f7       	brpl	.-8      	; 0x54fa <_ZN14HardwareSerial5beginEm+0x42>
    5502:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    5504:	60 e0       	ldi	r22, 0x00	; 0
    5506:	79 e0       	ldi	r23, 0x09	; 9
    5508:	8d e3       	ldi	r24, 0x3D	; 61
    550a:	90 e0       	ldi	r25, 0x00	; 0
    550c:	05 c0       	rjmp	.+10     	; 0x5518 <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    550e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    5510:	60 e8       	ldi	r22, 0x80	; 128
    5512:	74 e8       	ldi	r23, 0x84	; 132
    5514:	8e e1       	ldi	r24, 0x1E	; 30
    5516:	90 e0       	ldi	r25, 0x00	; 0
    5518:	a8 01       	movw	r20, r16
    551a:	97 01       	movw	r18, r14
    551c:	0e 94 1c 33 	call	0x6638	; 0x6638 <__udivmodsi4>
    5520:	21 50       	subi	r18, 0x01	; 1
    5522:	30 40       	sbci	r19, 0x00	; 0
    5524:	40 40       	sbci	r20, 0x00	; 0
    5526:	50 40       	sbci	r21, 0x00	; 0
    5528:	56 95       	lsr	r21
    552a:	47 95       	ror	r20
    552c:	37 95       	ror	r19
    552e:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    5530:	80 e1       	ldi	r24, 0x10	; 16
    5532:	20 30       	cpi	r18, 0x00	; 0
    5534:	38 07       	cpc	r19, r24
    5536:	20 f0       	brcs	.+8      	; 0x5540 <_ZN14HardwareSerial5beginEm+0x88>
    5538:	dd 20       	and	r13, r13
    553a:	11 f0       	breq	.+4      	; 0x5540 <_ZN14HardwareSerial5beginEm+0x88>
    553c:	dd 24       	eor	r13, r13
    553e:	d6 cf       	rjmp	.-84     	; 0x54ec <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    5540:	e8 89       	ldd	r30, Y+16	; 0x10
    5542:	f9 89       	ldd	r31, Y+17	; 0x11
    5544:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    5546:	ea 89       	ldd	r30, Y+18	; 0x12
    5548:	fb 89       	ldd	r31, Y+19	; 0x13
    554a:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    554c:	ee 89       	ldd	r30, Y+22	; 0x16
    554e:	ff 89       	ldd	r31, Y+23	; 0x17
    5550:	40 81       	ld	r20, Z
    5552:	21 e0       	ldi	r18, 0x01	; 1
    5554:	30 e0       	ldi	r19, 0x00	; 0
    5556:	c9 01       	movw	r24, r18
    5558:	0a 8c       	ldd	r0, Y+26	; 0x1a
    555a:	02 c0       	rjmp	.+4      	; 0x5560 <_ZN14HardwareSerial5beginEm+0xa8>
    555c:	88 0f       	add	r24, r24
    555e:	99 1f       	adc	r25, r25
    5560:	0a 94       	dec	r0
    5562:	e2 f7       	brpl	.-8      	; 0x555c <_ZN14HardwareSerial5beginEm+0xa4>
    5564:	48 2b       	or	r20, r24
    5566:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    5568:	ee 89       	ldd	r30, Y+22	; 0x16
    556a:	ff 89       	ldd	r31, Y+23	; 0x17
    556c:	40 81       	ld	r20, Z
    556e:	c9 01       	movw	r24, r18
    5570:	0b 8c       	ldd	r0, Y+27	; 0x1b
    5572:	02 c0       	rjmp	.+4      	; 0x5578 <_ZN14HardwareSerial5beginEm+0xc0>
    5574:	88 0f       	add	r24, r24
    5576:	99 1f       	adc	r25, r25
    5578:	0a 94       	dec	r0
    557a:	e2 f7       	brpl	.-8      	; 0x5574 <_ZN14HardwareSerial5beginEm+0xbc>
    557c:	48 2b       	or	r20, r24
    557e:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    5580:	ee 89       	ldd	r30, Y+22	; 0x16
    5582:	ff 89       	ldd	r31, Y+23	; 0x17
    5584:	40 81       	ld	r20, Z
    5586:	c9 01       	movw	r24, r18
    5588:	0c 8c       	ldd	r0, Y+28	; 0x1c
    558a:	02 c0       	rjmp	.+4      	; 0x5590 <_ZN14HardwareSerial5beginEm+0xd8>
    558c:	88 0f       	add	r24, r24
    558e:	99 1f       	adc	r25, r25
    5590:	0a 94       	dec	r0
    5592:	e2 f7       	brpl	.-8      	; 0x558c <_ZN14HardwareSerial5beginEm+0xd4>
    5594:	48 2b       	or	r20, r24
    5596:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    5598:	ee 89       	ldd	r30, Y+22	; 0x16
    559a:	ff 89       	ldd	r31, Y+23	; 0x17
    559c:	80 81       	ld	r24, Z
    559e:	0d 8c       	ldd	r0, Y+29	; 0x1d
    55a0:	02 c0       	rjmp	.+4      	; 0x55a6 <_ZN14HardwareSerial5beginEm+0xee>
    55a2:	22 0f       	add	r18, r18
    55a4:	33 1f       	adc	r19, r19
    55a6:	0a 94       	dec	r0
    55a8:	e2 f7       	brpl	.-8      	; 0x55a2 <_ZN14HardwareSerial5beginEm+0xea>
    55aa:	20 95       	com	r18
    55ac:	28 23       	and	r18, r24
    55ae:	20 83       	st	Z, r18
}
    55b0:	df 91       	pop	r29
    55b2:	cf 91       	pop	r28
    55b4:	1f 91       	pop	r17
    55b6:	0f 91       	pop	r16
    55b8:	ff 90       	pop	r15
    55ba:	ef 90       	pop	r14
    55bc:	df 90       	pop	r13
    55be:	bf 90       	pop	r11
    55c0:	af 90       	pop	r10
    55c2:	08 95       	ret

000055c4 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    55c4:	dc 01       	movw	r26, r24
    55c6:	1c 96       	adiw	r26, 0x0c	; 12
    55c8:	ed 91       	ld	r30, X+
    55ca:	fc 91       	ld	r31, X
    55cc:	1d 97       	sbiw	r26, 0x0d	; 13
    55ce:	e0 5c       	subi	r30, 0xC0	; 192
    55d0:	ff 4f       	sbci	r31, 0xFF	; 255
    55d2:	21 91       	ld	r18, Z+
    55d4:	31 91       	ld	r19, Z+
    55d6:	80 81       	ld	r24, Z
    55d8:	91 81       	ldd	r25, Z+1	; 0x01
    55da:	28 1b       	sub	r18, r24
    55dc:	39 0b       	sbc	r19, r25
    55de:	2f 73       	andi	r18, 0x3F	; 63
    55e0:	30 70       	andi	r19, 0x00	; 0
}
    55e2:	c9 01       	movw	r24, r18
    55e4:	08 95       	ret

000055e6 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    55e6:	dc 01       	movw	r26, r24
    55e8:	1c 96       	adiw	r26, 0x0c	; 12
    55ea:	ed 91       	ld	r30, X+
    55ec:	fc 91       	ld	r31, X
    55ee:	1d 97       	sbiw	r26, 0x0d	; 13
    55f0:	e0 5c       	subi	r30, 0xC0	; 192
    55f2:	ff 4f       	sbci	r31, 0xFF	; 255
    55f4:	20 81       	ld	r18, Z
    55f6:	31 81       	ldd	r19, Z+1	; 0x01
    55f8:	e0 54       	subi	r30, 0x40	; 64
    55fa:	f0 40       	sbci	r31, 0x00	; 0
    55fc:	df 01       	movw	r26, r30
    55fe:	ae 5b       	subi	r26, 0xBE	; 190
    5600:	bf 4f       	sbci	r27, 0xFF	; 255
    5602:	8d 91       	ld	r24, X+
    5604:	9c 91       	ld	r25, X
    5606:	11 97       	sbiw	r26, 0x01	; 1
    5608:	28 17       	cp	r18, r24
    560a:	39 07       	cpc	r19, r25
    560c:	19 f4       	brne	.+6      	; 0x5614 <_ZN14HardwareSerial4peekEv+0x2e>
    560e:	2f ef       	ldi	r18, 0xFF	; 255
    5610:	3f ef       	ldi	r19, 0xFF	; 255
    5612:	07 c0       	rjmp	.+14     	; 0x5622 <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    5614:	8d 91       	ld	r24, X+
    5616:	9c 91       	ld	r25, X
    5618:	e8 0f       	add	r30, r24
    561a:	f9 1f       	adc	r31, r25
    561c:	80 81       	ld	r24, Z
    561e:	28 2f       	mov	r18, r24
    5620:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    5622:	c9 01       	movw	r24, r18
    5624:	08 95       	ret

00005626 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    5626:	dc 01       	movw	r26, r24
    5628:	1c 96       	adiw	r26, 0x0c	; 12
    562a:	ed 91       	ld	r30, X+
    562c:	fc 91       	ld	r31, X
    562e:	1d 97       	sbiw	r26, 0x0d	; 13
    5630:	e0 5c       	subi	r30, 0xC0	; 192
    5632:	ff 4f       	sbci	r31, 0xFF	; 255
    5634:	20 81       	ld	r18, Z
    5636:	31 81       	ldd	r19, Z+1	; 0x01
    5638:	e0 54       	subi	r30, 0x40	; 64
    563a:	f0 40       	sbci	r31, 0x00	; 0
    563c:	df 01       	movw	r26, r30
    563e:	ae 5b       	subi	r26, 0xBE	; 190
    5640:	bf 4f       	sbci	r27, 0xFF	; 255
    5642:	8d 91       	ld	r24, X+
    5644:	9c 91       	ld	r25, X
    5646:	11 97       	sbiw	r26, 0x01	; 1
    5648:	28 17       	cp	r18, r24
    564a:	39 07       	cpc	r19, r25
    564c:	19 f4       	brne	.+6      	; 0x5654 <_ZN14HardwareSerial4readEv+0x2e>
    564e:	2f ef       	ldi	r18, 0xFF	; 255
    5650:	3f ef       	ldi	r19, 0xFF	; 255
    5652:	10 c0       	rjmp	.+32     	; 0x5674 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    5654:	8d 91       	ld	r24, X+
    5656:	9c 91       	ld	r25, X
    5658:	11 97       	sbiw	r26, 0x01	; 1
    565a:	e8 0f       	add	r30, r24
    565c:	f9 1f       	adc	r31, r25
    565e:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    5660:	8d 91       	ld	r24, X+
    5662:	9c 91       	ld	r25, X
    5664:	11 97       	sbiw	r26, 0x01	; 1
    5666:	01 96       	adiw	r24, 0x01	; 1
    5668:	8f 73       	andi	r24, 0x3F	; 63
    566a:	90 70       	andi	r25, 0x00	; 0
    566c:	11 96       	adiw	r26, 0x01	; 1
    566e:	9c 93       	st	X, r25
    5670:	8e 93       	st	-X, r24
    return c;
    5672:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    5674:	c9 01       	movw	r24, r18
    5676:	08 95       	ret

00005678 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    5678:	fc 01       	movw	r30, r24
    567a:	86 85       	ldd	r24, Z+14	; 0x0e
    567c:	97 85       	ldd	r25, Z+15	; 0x0f
    567e:	dc 01       	movw	r26, r24
    5680:	a0 5c       	subi	r26, 0xC0	; 192
    5682:	bf 4f       	sbci	r27, 0xFF	; 255
    5684:	fc 01       	movw	r30, r24
    5686:	ee 5b       	subi	r30, 0xBE	; 190
    5688:	ff 4f       	sbci	r31, 0xFF	; 255
    568a:	2d 91       	ld	r18, X+
    568c:	3c 91       	ld	r19, X
    568e:	11 97       	sbiw	r26, 0x01	; 1
    5690:	80 81       	ld	r24, Z
    5692:	91 81       	ldd	r25, Z+1	; 0x01
    5694:	28 17       	cp	r18, r24
    5696:	39 07       	cpc	r19, r25
    5698:	c1 f7       	brne	.-16     	; 0x568a <_ZN14HardwareSerial5flushEv+0x12>
    ;
}
    569a:	08 95       	ret

0000569c <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    569c:	cf 93       	push	r28
    569e:	df 93       	push	r29
    56a0:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    56a2:	ee 85       	ldd	r30, Y+14	; 0x0e
    56a4:	ff 85       	ldd	r31, Y+15	; 0x0f
    56a6:	e0 5c       	subi	r30, 0xC0	; 192
    56a8:	ff 4f       	sbci	r31, 0xFF	; 255
    56aa:	20 81       	ld	r18, Z
    56ac:	31 81       	ldd	r19, Z+1	; 0x01
    56ae:	e0 54       	subi	r30, 0x40	; 64
    56b0:	f0 40       	sbci	r31, 0x00	; 0
    56b2:	2f 5f       	subi	r18, 0xFF	; 255
    56b4:	3f 4f       	sbci	r19, 0xFF	; 255
    56b6:	2f 73       	andi	r18, 0x3F	; 63
    56b8:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    56ba:	df 01       	movw	r26, r30
    56bc:	ae 5b       	subi	r26, 0xBE	; 190
    56be:	bf 4f       	sbci	r27, 0xFF	; 255
    56c0:	8d 91       	ld	r24, X+
    56c2:	9c 91       	ld	r25, X
    56c4:	11 97       	sbiw	r26, 0x01	; 1
    56c6:	28 17       	cp	r18, r24
    56c8:	39 07       	cpc	r19, r25
    56ca:	d1 f3       	breq	.-12     	; 0x56c0 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    56cc:	e0 5c       	subi	r30, 0xC0	; 192
    56ce:	ff 4f       	sbci	r31, 0xFF	; 255
    56d0:	80 81       	ld	r24, Z
    56d2:	91 81       	ldd	r25, Z+1	; 0x01
    56d4:	e0 54       	subi	r30, 0x40	; 64
    56d6:	f0 40       	sbci	r31, 0x00	; 0
    56d8:	e8 0f       	add	r30, r24
    56da:	f9 1f       	adc	r31, r25
    56dc:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    56de:	ee 85       	ldd	r30, Y+14	; 0x0e
    56e0:	ff 85       	ldd	r31, Y+15	; 0x0f
    56e2:	e0 5c       	subi	r30, 0xC0	; 192
    56e4:	ff 4f       	sbci	r31, 0xFF	; 255
    56e6:	31 83       	std	Z+1, r19	; 0x01
    56e8:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    56ea:	ee 89       	ldd	r30, Y+22	; 0x16
    56ec:	ff 89       	ldd	r31, Y+23	; 0x17
    56ee:	20 81       	ld	r18, Z
    56f0:	81 e0       	ldi	r24, 0x01	; 1
    56f2:	90 e0       	ldi	r25, 0x00	; 0
    56f4:	0d 8c       	ldd	r0, Y+29	; 0x1d
    56f6:	02 c0       	rjmp	.+4      	; 0x56fc <_ZN14HardwareSerial5writeEh+0x60>
    56f8:	88 0f       	add	r24, r24
    56fa:	99 1f       	adc	r25, r25
    56fc:	0a 94       	dec	r0
    56fe:	e2 f7       	brpl	.-8      	; 0x56f8 <_ZN14HardwareSerial5writeEh+0x5c>
    5700:	28 2b       	or	r18, r24
    5702:	20 83       	st	Z, r18
  
  return 1;
}
    5704:	81 e0       	ldi	r24, 0x01	; 1
    5706:	90 e0       	ldi	r25, 0x00	; 0
    5708:	df 91       	pop	r29
    570a:	cf 91       	pop	r28
    570c:	08 95       	ret

0000570e <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    570e:	10 92 0c 07 	sts	0x070C, r1
    5712:	10 92 0b 07 	sts	0x070B, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    5716:	88 ee       	ldi	r24, 0xE8	; 232
    5718:	93 e0       	ldi	r25, 0x03	; 3
    571a:	a0 e0       	ldi	r26, 0x00	; 0
    571c:	b0 e0       	ldi	r27, 0x00	; 0
    571e:	80 93 0d 07 	sts	0x070D, r24
    5722:	90 93 0e 07 	sts	0x070E, r25
    5726:	a0 93 0f 07 	sts	0x070F, r26
    572a:	b0 93 10 07 	sts	0x0710, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    572e:	86 e2       	ldi	r24, 0x26	; 38
    5730:	93 e0       	ldi	r25, 0x03	; 3
    5732:	90 93 0a 07 	sts	0x070A, r25
    5736:	80 93 09 07 	sts	0x0709, r24
{
  _rx_buffer = rx_buffer;
    573a:	81 e8       	ldi	r24, 0x81	; 129
    573c:	96 e0       	ldi	r25, 0x06	; 6
    573e:	90 93 16 07 	sts	0x0716, r25
    5742:	80 93 15 07 	sts	0x0715, r24
  _tx_buffer = tx_buffer;
    5746:	85 ec       	ldi	r24, 0xC5	; 197
    5748:	96 e0       	ldi	r25, 0x06	; 6
    574a:	90 93 18 07 	sts	0x0718, r25
    574e:	80 93 17 07 	sts	0x0717, r24
  _ubrrh = ubrrh;
    5752:	85 ec       	ldi	r24, 0xC5	; 197
    5754:	90 e0       	ldi	r25, 0x00	; 0
    5756:	90 93 1a 07 	sts	0x071A, r25
    575a:	80 93 19 07 	sts	0x0719, r24
  _ubrrl = ubrrl;
    575e:	84 ec       	ldi	r24, 0xC4	; 196
    5760:	90 e0       	ldi	r25, 0x00	; 0
    5762:	90 93 1c 07 	sts	0x071C, r25
    5766:	80 93 1b 07 	sts	0x071B, r24
  _ucsra = ucsra;
    576a:	80 ec       	ldi	r24, 0xC0	; 192
    576c:	90 e0       	ldi	r25, 0x00	; 0
    576e:	90 93 1e 07 	sts	0x071E, r25
    5772:	80 93 1d 07 	sts	0x071D, r24
  _ucsrb = ucsrb;
    5776:	81 ec       	ldi	r24, 0xC1	; 193
    5778:	90 e0       	ldi	r25, 0x00	; 0
    577a:	90 93 20 07 	sts	0x0720, r25
    577e:	80 93 1f 07 	sts	0x071F, r24
  _udr = udr;
    5782:	86 ec       	ldi	r24, 0xC6	; 198
    5784:	90 e0       	ldi	r25, 0x00	; 0
    5786:	90 93 22 07 	sts	0x0722, r25
    578a:	80 93 21 07 	sts	0x0721, r24
  _rxen = rxen;
    578e:	84 e0       	ldi	r24, 0x04	; 4
    5790:	80 93 23 07 	sts	0x0723, r24
  _txen = txen;
    5794:	83 e0       	ldi	r24, 0x03	; 3
    5796:	80 93 24 07 	sts	0x0724, r24
  _rxcie = rxcie;
    579a:	87 e0       	ldi	r24, 0x07	; 7
    579c:	80 93 25 07 	sts	0x0725, r24
  _udrie = udrie;
    57a0:	85 e0       	ldi	r24, 0x05	; 5
    57a2:	80 93 26 07 	sts	0x0726, r24
  _u2x = u2x;
    57a6:	81 e0       	ldi	r24, 0x01	; 1
    57a8:	80 93 27 07 	sts	0x0727, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    57ac:	08 95       	ret

000057ae <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    57ae:	0f 93       	push	r16
    57b0:	fc 01       	movw	r30, r24
    57b2:	86 e3       	ldi	r24, 0x36	; 54
    57b4:	93 e0       	ldi	r25, 0x03	; 3
    57b6:	91 83       	std	Z+1, r25	; 0x01
    57b8:	80 83       	st	Z, r24
{
    _address[0] = first_octet;
    57ba:	62 83       	std	Z+2, r22	; 0x02
    _address[1] = second_octet;
    57bc:	43 83       	std	Z+3, r20	; 0x03
    _address[2] = third_octet;
    57be:	24 83       	std	Z+4, r18	; 0x04
    _address[3] = fourth_octet;
    57c0:	05 83       	std	Z+5, r16	; 0x05
}
    57c2:	0f 91       	pop	r16
    57c4:	08 95       	ret

000057c6 <_GLOBAL__I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    57c6:	86 e3       	ldi	r24, 0x36	; 54
    57c8:	93 e0       	ldi	r25, 0x03	; 3
    57ca:	90 93 29 07 	sts	0x0729, r25
    57ce:	80 93 28 07 	sts	0x0728, r24
{
    _address[0] = first_octet;
    57d2:	10 92 2a 07 	sts	0x072A, r1
    _address[1] = second_octet;
    57d6:	10 92 2b 07 	sts	0x072B, r1
    _address[2] = third_octet;
    57da:	10 92 2c 07 	sts	0x072C, r1
    _address[3] = fourth_octet;
    57de:	10 92 2d 07 	sts	0x072D, r1
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
    57e2:	08 95       	ret

000057e4 <_ZNK9IPAddress7printToER5Print>:
bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
    57e4:	8f 92       	push	r8
    57e6:	9f 92       	push	r9
    57e8:	af 92       	push	r10
    57ea:	bf 92       	push	r11
    57ec:	cf 92       	push	r12
    57ee:	df 92       	push	r13
    57f0:	ef 92       	push	r14
    57f2:	ff 92       	push	r15
    57f4:	0f 93       	push	r16
    57f6:	1f 93       	push	r17
    57f8:	cf 93       	push	r28
    57fa:	df 93       	push	r29
    57fc:	4c 01       	movw	r8, r24
    57fe:	6b 01       	movw	r12, r22
    5800:	7c 01       	movw	r14, r24
    5802:	aa 24       	eor	r10, r10
    5804:	bb 24       	eor	r11, r11
    5806:	c0 e0       	ldi	r28, 0x00	; 0
    5808:	d0 e0       	ldi	r29, 0x00	; 0
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
    580a:	c6 01       	movw	r24, r12
    580c:	f7 01       	movw	r30, r14
    580e:	62 81       	ldd	r22, Z+2	; 0x02
    5810:	4a e0       	ldi	r20, 0x0A	; 10
    5812:	50 e0       	ldi	r21, 0x00	; 0
    5814:	0e 94 77 2d 	call	0x5aee	; 0x5aee <_ZN5Print5printEhi>
    5818:	8c 01       	movw	r16, r24
        n += p.print('.');
    581a:	c6 01       	movw	r24, r12
    581c:	6e e2       	ldi	r22, 0x2E	; 46
    581e:	0e 94 97 2c 	call	0x592e	; 0x592e <_ZN5Print5printEc>
size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
    5822:	08 0f       	add	r16, r24
    5824:	19 1f       	adc	r17, r25
        n += p.print('.');
    5826:	a0 0e       	add	r10, r16
    5828:	b1 1e       	adc	r11, r17
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    582a:	21 96       	adiw	r28, 0x01	; 1
    582c:	08 94       	sec
    582e:	e1 1c       	adc	r14, r1
    5830:	f1 1c       	adc	r15, r1
    5832:	c3 30       	cpi	r28, 0x03	; 3
    5834:	d1 05       	cpc	r29, r1
    5836:	49 f7       	brne	.-46     	; 0x580a <_ZNK9IPAddress7printToER5Print+0x26>
    {
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    5838:	c6 01       	movw	r24, r12
    583a:	f4 01       	movw	r30, r8
    583c:	65 81       	ldd	r22, Z+5	; 0x05
    583e:	4a e0       	ldi	r20, 0x0A	; 10
    5840:	50 e0       	ldi	r21, 0x00	; 0
    5842:	0e 94 77 2d 	call	0x5aee	; 0x5aee <_ZN5Print5printEhi>
    5846:	95 01       	movw	r18, r10
    5848:	28 0f       	add	r18, r24
    584a:	39 1f       	adc	r19, r25
    return n;
}
    584c:	c9 01       	movw	r24, r18
    584e:	df 91       	pop	r29
    5850:	cf 91       	pop	r28
    5852:	1f 91       	pop	r17
    5854:	0f 91       	pop	r16
    5856:	ff 90       	pop	r15
    5858:	ef 90       	pop	r14
    585a:	df 90       	pop	r13
    585c:	cf 90       	pop	r12
    585e:	bf 90       	pop	r11
    5860:	af 90       	pop	r10
    5862:	9f 90       	pop	r9
    5864:	8f 90       	pop	r8
    5866:	08 95       	ret

00005868 <_ZN9IPAddressC1Em>:
    _address[1] = second_octet;
    _address[2] = third_octet;
    _address[3] = fourth_octet;
}

IPAddress::IPAddress(uint32_t address)
    5868:	df 93       	push	r29
    586a:	cf 93       	push	r28
    586c:	00 d0       	rcall	.+0      	; 0x586e <_ZN9IPAddressC1Em+0x6>
    586e:	00 d0       	rcall	.+0      	; 0x5870 <_ZN9IPAddressC1Em+0x8>
    5870:	cd b7       	in	r28, 0x3d	; 61
    5872:	de b7       	in	r29, 0x3e	; 62
    5874:	fc 01       	movw	r30, r24
    5876:	86 e3       	ldi	r24, 0x36	; 54
    5878:	93 e0       	ldi	r25, 0x03	; 3
    587a:	91 83       	std	Z+1, r25	; 0x01
    587c:	80 83       	st	Z, r24
{
    memcpy(_address, &address, sizeof(_address));
    587e:	42 83       	std	Z+2, r20	; 0x02
    5880:	53 83       	std	Z+3, r21	; 0x03
    5882:	64 83       	std	Z+4, r22	; 0x04
    5884:	75 83       	std	Z+5, r23	; 0x05
}
    5886:	0f 90       	pop	r0
    5888:	0f 90       	pop	r0
    588a:	0f 90       	pop	r0
    588c:	0f 90       	pop	r0
    588e:	cf 91       	pop	r28
    5890:	df 91       	pop	r29
    5892:	08 95       	ret

00005894 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    5894:	cf 92       	push	r12
    5896:	df 92       	push	r13
    5898:	ef 92       	push	r14
    589a:	ff 92       	push	r15
    589c:	0f 93       	push	r16
    589e:	1f 93       	push	r17
    58a0:	cf 93       	push	r28
    58a2:	df 93       	push	r29
    58a4:	7c 01       	movw	r14, r24
    58a6:	6b 01       	movw	r12, r22
    58a8:	8a 01       	movw	r16, r20
    58aa:	c0 e0       	ldi	r28, 0x00	; 0
    58ac:	d0 e0       	ldi	r29, 0x00	; 0
    58ae:	0f c0       	rjmp	.+30     	; 0x58ce <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    58b0:	d6 01       	movw	r26, r12
    58b2:	6d 91       	ld	r22, X+
    58b4:	6d 01       	movw	r12, r26
    58b6:	d7 01       	movw	r26, r14
    58b8:	ed 91       	ld	r30, X+
    58ba:	fc 91       	ld	r31, X
    58bc:	01 90       	ld	r0, Z+
    58be:	f0 81       	ld	r31, Z
    58c0:	e0 2d       	mov	r30, r0
    58c2:	c7 01       	movw	r24, r14
    58c4:	09 95       	icall
    58c6:	c8 0f       	add	r28, r24
    58c8:	d9 1f       	adc	r29, r25
    58ca:	01 50       	subi	r16, 0x01	; 1
    58cc:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    58ce:	01 15       	cp	r16, r1
    58d0:	11 05       	cpc	r17, r1
    58d2:	71 f7       	brne	.-36     	; 0x58b0 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    58d4:	ce 01       	movw	r24, r28
    58d6:	df 91       	pop	r29
    58d8:	cf 91       	pop	r28
    58da:	1f 91       	pop	r17
    58dc:	0f 91       	pop	r16
    58de:	ff 90       	pop	r15
    58e0:	ef 90       	pop	r14
    58e2:	df 90       	pop	r13
    58e4:	cf 90       	pop	r12
    58e6:	08 95       	ret

000058e8 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
    58e8:	ef 92       	push	r14
    58ea:	ff 92       	push	r15
    58ec:	0f 93       	push	r16
    58ee:	1f 93       	push	r17
    58f0:	cf 93       	push	r28
    58f2:	df 93       	push	r29
    58f4:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    58f6:	8b 01       	movw	r16, r22
    58f8:	c0 e0       	ldi	r28, 0x00	; 0
    58fa:	d0 e0       	ldi	r29, 0x00	; 0
    58fc:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    58fe:	0f 5f       	subi	r16, 0xFF	; 255
    5900:	1f 4f       	sbci	r17, 0xFF	; 255
    5902:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    5904:	66 23       	and	r22, r22
    5906:	59 f0       	breq	.+22     	; 0x591e <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    n += write(c);
    5908:	d7 01       	movw	r26, r14
    590a:	ed 91       	ld	r30, X+
    590c:	fc 91       	ld	r31, X
    590e:	01 90       	ld	r0, Z+
    5910:	f0 81       	ld	r31, Z
    5912:	e0 2d       	mov	r30, r0
    5914:	c7 01       	movw	r24, r14
    5916:	09 95       	icall
    5918:	c8 0f       	add	r28, r24
    591a:	d9 1f       	adc	r29, r25
    591c:	ef cf       	rjmp	.-34     	; 0x58fc <_ZN5Print5printEPK19__FlashStringHelper+0x14>
  }
  return n;
}
    591e:	ce 01       	movw	r24, r28
    5920:	df 91       	pop	r29
    5922:	cf 91       	pop	r28
    5924:	1f 91       	pop	r17
    5926:	0f 91       	pop	r16
    5928:	ff 90       	pop	r15
    592a:	ef 90       	pop	r14
    592c:	08 95       	ret

0000592e <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    592e:	dc 01       	movw	r26, r24
{
  return write(c);
    5930:	ed 91       	ld	r30, X+
    5932:	fc 91       	ld	r31, X
    5934:	01 90       	ld	r0, Z+
    5936:	f0 81       	ld	r31, Z
    5938:	e0 2d       	mov	r30, r0
    593a:	09 95       	icall
}
    593c:	08 95       	ret

0000593e <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    593e:	ef 92       	push	r14
    5940:	ff 92       	push	r15
    5942:	0f 93       	push	r16
    5944:	1f 93       	push	r17
    5946:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    5948:	dc 01       	movw	r26, r24
    594a:	ed 91       	ld	r30, X+
    594c:	fc 91       	ld	r31, X
    594e:	01 90       	ld	r0, Z+
    5950:	f0 81       	ld	r31, Z
    5952:	e0 2d       	mov	r30, r0
    5954:	6d e0       	ldi	r22, 0x0D	; 13
    5956:	09 95       	icall
    5958:	7c 01       	movw	r14, r24
    595a:	d8 01       	movw	r26, r16
    595c:	ed 91       	ld	r30, X+
    595e:	fc 91       	ld	r31, X
    5960:	01 90       	ld	r0, Z+
    5962:	f0 81       	ld	r31, Z
    5964:	e0 2d       	mov	r30, r0
    5966:	c8 01       	movw	r24, r16
    5968:	6a e0       	ldi	r22, 0x0A	; 10
    596a:	09 95       	icall
    596c:	9c 01       	movw	r18, r24
    596e:	2e 0d       	add	r18, r14
    5970:	3f 1d       	adc	r19, r15
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    5972:	c9 01       	movw	r24, r18
    5974:	1f 91       	pop	r17
    5976:	0f 91       	pop	r16
    5978:	ff 90       	pop	r15
    597a:	ef 90       	pop	r14
    597c:	08 95       	ret

0000597e <_ZN5Print7printlnEPK19__FlashStringHelper>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    597e:	ef 92       	push	r14
    5980:	ff 92       	push	r15
    5982:	0f 93       	push	r16
    5984:	1f 93       	push	r17
    5986:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
    5988:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <_ZN5Print5printEPK19__FlashStringHelper>
    598c:	8c 01       	movw	r16, r24
  n += println();
    598e:	c7 01       	movw	r24, r14
    5990:	0e 94 9f 2c 	call	0x593e	; 0x593e <_ZN5Print7printlnEv>
    5994:	9c 01       	movw	r18, r24
    5996:	20 0f       	add	r18, r16
    5998:	31 1f       	adc	r19, r17
  return n;
}
    599a:	c9 01       	movw	r24, r18
    599c:	1f 91       	pop	r17
    599e:	0f 91       	pop	r16
    59a0:	ff 90       	pop	r15
    59a2:	ef 90       	pop	r14
    59a4:	08 95       	ret

000059a6 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    59a6:	cf 93       	push	r28
    59a8:	df 93       	push	r29
    59aa:	db 01       	movw	r26, r22
    59ac:	0d 90       	ld	r0, X+
    59ae:	00 20       	and	r0, r0
    59b0:	e9 f7       	brne	.-6      	; 0x59ac <_ZN5Print5writeEPKc+0x6>
    59b2:	11 97       	sbiw	r26, 0x01	; 1
    59b4:	a6 1b       	sub	r26, r22
    59b6:	b7 0b       	sbc	r27, r23
    59b8:	ec 01       	movw	r28, r24
    59ba:	e8 81       	ld	r30, Y
    59bc:	f9 81       	ldd	r31, Y+1	; 0x01
    59be:	02 80       	ldd	r0, Z+2	; 0x02
    59c0:	f3 81       	ldd	r31, Z+3	; 0x03
    59c2:	e0 2d       	mov	r30, r0
    59c4:	ad 01       	movw	r20, r26
    59c6:	09 95       	icall
    59c8:	df 91       	pop	r29
    59ca:	cf 91       	pop	r28
    59cc:	08 95       	ret

000059ce <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    59ce:	4f 92       	push	r4
    59d0:	5f 92       	push	r5
    59d2:	7f 92       	push	r7
    59d4:	8f 92       	push	r8
    59d6:	9f 92       	push	r9
    59d8:	af 92       	push	r10
    59da:	bf 92       	push	r11
    59dc:	cf 92       	push	r12
    59de:	df 92       	push	r13
    59e0:	ef 92       	push	r14
    59e2:	ff 92       	push	r15
    59e4:	0f 93       	push	r16
    59e6:	1f 93       	push	r17
    59e8:	df 93       	push	r29
    59ea:	cf 93       	push	r28
    59ec:	cd b7       	in	r28, 0x3d	; 61
    59ee:	de b7       	in	r29, 0x3e	; 62
    59f0:	a1 97       	sbiw	r28, 0x21	; 33
    59f2:	0f b6       	in	r0, 0x3f	; 63
    59f4:	f8 94       	cli
    59f6:	de bf       	out	0x3e, r29	; 62
    59f8:	0f be       	out	0x3f, r0	; 63
    59fa:	cd bf       	out	0x3d, r28	; 61
    59fc:	2c 01       	movw	r4, r24
    59fe:	74 2e       	mov	r7, r20
    5a00:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    5a02:	22 30       	cpi	r18, 0x02	; 2
    5a04:	08 f4       	brcc	.+2      	; 0x5a08 <_ZN5Print11printNumberEmh+0x3a>
    5a06:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    5a08:	19 a2       	std	Y+33, r1	; 0x21
    5a0a:	31 e2       	ldi	r19, 0x21	; 33
    5a0c:	c3 2e       	mov	r12, r19
    5a0e:	d1 2c       	mov	r13, r1
    5a10:	cc 0e       	add	r12, r28
    5a12:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    5a14:	82 2e       	mov	r8, r18
    5a16:	99 24       	eor	r9, r9
    5a18:	aa 24       	eor	r10, r10
    5a1a:	bb 24       	eor	r11, r11
    5a1c:	67 2d       	mov	r22, r7
    5a1e:	75 2f       	mov	r23, r21
    5a20:	a5 01       	movw	r20, r10
    5a22:	94 01       	movw	r18, r8
    5a24:	0e 94 1c 33 	call	0x6638	; 0x6638 <__udivmodsi4>
    5a28:	79 01       	movw	r14, r18
    5a2a:	8a 01       	movw	r16, r20
    char c = m - base * n;
    5a2c:	c8 01       	movw	r24, r16
    5a2e:	b7 01       	movw	r22, r14
    5a30:	a5 01       	movw	r20, r10
    5a32:	94 01       	movw	r18, r8
    5a34:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <__mulsi3>
    5a38:	47 2d       	mov	r20, r7
    5a3a:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    5a3c:	08 94       	sec
    5a3e:	c1 08       	sbc	r12, r1
    5a40:	d1 08       	sbc	r13, r1
    5a42:	4a 30       	cpi	r20, 0x0A	; 10
    5a44:	14 f4       	brge	.+4      	; 0x5a4a <_ZN5Print11printNumberEmh+0x7c>
    5a46:	40 5d       	subi	r20, 0xD0	; 208
    5a48:	01 c0       	rjmp	.+2      	; 0x5a4c <_ZN5Print11printNumberEmh+0x7e>
    5a4a:	49 5c       	subi	r20, 0xC9	; 201
    5a4c:	f6 01       	movw	r30, r12
    5a4e:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    5a50:	e1 14       	cp	r14, r1
    5a52:	f1 04       	cpc	r15, r1
    5a54:	01 05       	cpc	r16, r1
    5a56:	11 05       	cpc	r17, r1
    5a58:	21 f0       	breq	.+8      	; 0x5a62 <_ZN5Print11printNumberEmh+0x94>
    5a5a:	7e 2c       	mov	r7, r14
    5a5c:	5f 2d       	mov	r21, r15
    5a5e:	c8 01       	movw	r24, r16
    5a60:	dd cf       	rjmp	.-70     	; 0x5a1c <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    5a62:	c2 01       	movw	r24, r4
    5a64:	b6 01       	movw	r22, r12
    5a66:	0e 94 d3 2c 	call	0x59a6	; 0x59a6 <_ZN5Print5writeEPKc>
}
    5a6a:	a1 96       	adiw	r28, 0x21	; 33
    5a6c:	0f b6       	in	r0, 0x3f	; 63
    5a6e:	f8 94       	cli
    5a70:	de bf       	out	0x3e, r29	; 62
    5a72:	0f be       	out	0x3f, r0	; 63
    5a74:	cd bf       	out	0x3d, r28	; 61
    5a76:	cf 91       	pop	r28
    5a78:	df 91       	pop	r29
    5a7a:	1f 91       	pop	r17
    5a7c:	0f 91       	pop	r16
    5a7e:	ff 90       	pop	r15
    5a80:	ef 90       	pop	r14
    5a82:	df 90       	pop	r13
    5a84:	cf 90       	pop	r12
    5a86:	bf 90       	pop	r11
    5a88:	af 90       	pop	r10
    5a8a:	9f 90       	pop	r9
    5a8c:	8f 90       	pop	r8
    5a8e:	7f 90       	pop	r7
    5a90:	5f 90       	pop	r5
    5a92:	4f 90       	pop	r4
    5a94:	08 95       	ret

00005a96 <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    5a96:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    5a98:	21 15       	cp	r18, r1
    5a9a:	31 05       	cpc	r19, r1
    5a9c:	41 f4       	brne	.+16     	; 0x5aae <_ZN5Print5printEmi+0x18>
    5a9e:	ed 91       	ld	r30, X+
    5aa0:	fc 91       	ld	r31, X
    5aa2:	01 90       	ld	r0, Z+
    5aa4:	f0 81       	ld	r31, Z
    5aa6:	e0 2d       	mov	r30, r0
    5aa8:	64 2f       	mov	r22, r20
    5aaa:	09 95       	icall
    5aac:	08 95       	ret
  else return printNumber(n, base);
    5aae:	0e 94 e7 2c 	call	0x59ce	; 0x59ce <_ZN5Print11printNumberEmh>
}
    5ab2:	08 95       	ret

00005ab4 <_ZN5Print7printlnEji>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
    5ab4:	cf 92       	push	r12
    5ab6:	df 92       	push	r13
    5ab8:	ef 92       	push	r14
    5aba:	ff 92       	push	r15
    5abc:	0f 93       	push	r16
    5abe:	1f 93       	push	r17
    5ac0:	6c 01       	movw	r12, r24
    5ac2:	7b 01       	movw	r14, r22
    5ac4:	9a 01       	movw	r18, r20
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    5ac6:	00 e0       	ldi	r16, 0x00	; 0
    5ac8:	10 e0       	ldi	r17, 0x00	; 0
    5aca:	b8 01       	movw	r22, r16
    5acc:	a7 01       	movw	r20, r14
    5ace:	0e 94 4b 2d 	call	0x5a96	; 0x5a96 <_ZN5Print5printEmi>
    5ad2:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
    5ad4:	c6 01       	movw	r24, r12
    5ad6:	0e 94 9f 2c 	call	0x593e	; 0x593e <_ZN5Print7printlnEv>
    5ada:	08 0f       	add	r16, r24
    5adc:	19 1f       	adc	r17, r25
  return n;
}
    5ade:	c8 01       	movw	r24, r16
    5ae0:	1f 91       	pop	r17
    5ae2:	0f 91       	pop	r16
    5ae4:	ff 90       	pop	r15
    5ae6:	ef 90       	pop	r14
    5ae8:	df 90       	pop	r13
    5aea:	cf 90       	pop	r12
    5aec:	08 95       	ret

00005aee <_ZN5Print5printEhi>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    5aee:	ef 92       	push	r14
    5af0:	ff 92       	push	r15
    5af2:	0f 93       	push	r16
    5af4:	1f 93       	push	r17
    5af6:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    5af8:	e6 2e       	mov	r14, r22
    5afa:	ff 24       	eor	r15, r15
    5afc:	00 e0       	ldi	r16, 0x00	; 0
    5afe:	10 e0       	ldi	r17, 0x00	; 0
    5b00:	b8 01       	movw	r22, r16
    5b02:	a7 01       	movw	r20, r14
    5b04:	0e 94 4b 2d 	call	0x5a96	; 0x5a96 <_ZN5Print5printEmi>
}
    5b08:	1f 91       	pop	r17
    5b0a:	0f 91       	pop	r16
    5b0c:	ff 90       	pop	r15
    5b0e:	ef 90       	pop	r14
    5b10:	08 95       	ret

00005b12 <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    5b12:	cf 92       	push	r12
    5b14:	df 92       	push	r13
    5b16:	ef 92       	push	r14
    5b18:	ff 92       	push	r15
    5b1a:	0f 93       	push	r16
    5b1c:	1f 93       	push	r17
    5b1e:	cf 93       	push	r28
    5b20:	df 93       	push	r29
    5b22:	ec 01       	movw	r28, r24
    5b24:	6a 01       	movw	r12, r20
    5b26:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    5b28:	21 15       	cp	r18, r1
    5b2a:	31 05       	cpc	r19, r1
    5b2c:	41 f4       	brne	.+16     	; 0x5b3e <_ZN5Print5printEli+0x2c>
    return write(n);
    5b2e:	e8 81       	ld	r30, Y
    5b30:	f9 81       	ldd	r31, Y+1	; 0x01
    5b32:	01 90       	ld	r0, Z+
    5b34:	f0 81       	ld	r31, Z
    5b36:	e0 2d       	mov	r30, r0
    5b38:	64 2f       	mov	r22, r20
    5b3a:	09 95       	icall
    5b3c:	1f c0       	rjmp	.+62     	; 0x5b7c <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
    5b3e:	2a 30       	cpi	r18, 0x0A	; 10
    5b40:	31 05       	cpc	r19, r1
    5b42:	d1 f4       	brne	.+52     	; 0x5b78 <_ZN5Print5printEli+0x66>
    if (n < 0) {
    5b44:	77 ff       	sbrs	r23, 7
    5b46:	17 c0       	rjmp	.+46     	; 0x5b76 <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    5b48:	e8 81       	ld	r30, Y
    5b4a:	f9 81       	ldd	r31, Y+1	; 0x01
    5b4c:	01 90       	ld	r0, Z+
    5b4e:	f0 81       	ld	r31, Z
    5b50:	e0 2d       	mov	r30, r0
    5b52:	6d e2       	ldi	r22, 0x2D	; 45
    5b54:	09 95       	icall
    5b56:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    5b58:	44 27       	eor	r20, r20
    5b5a:	55 27       	eor	r21, r21
    5b5c:	ba 01       	movw	r22, r20
    5b5e:	4c 19       	sub	r20, r12
    5b60:	5d 09       	sbc	r21, r13
    5b62:	6e 09       	sbc	r22, r14
    5b64:	7f 09       	sbc	r23, r15
    5b66:	ce 01       	movw	r24, r28
    5b68:	2a e0       	ldi	r18, 0x0A	; 10
    5b6a:	0e 94 e7 2c 	call	0x59ce	; 0x59ce <_ZN5Print11printNumberEmh>
    5b6e:	98 01       	movw	r18, r16
    5b70:	28 0f       	add	r18, r24
    5b72:	39 1f       	adc	r19, r25
    5b74:	04 c0       	rjmp	.+8      	; 0x5b7e <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
    5b76:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    5b78:	0e 94 e7 2c 	call	0x59ce	; 0x59ce <_ZN5Print11printNumberEmh>
    5b7c:	9c 01       	movw	r18, r24
  }
}
    5b7e:	c9 01       	movw	r24, r18
    5b80:	df 91       	pop	r29
    5b82:	cf 91       	pop	r28
    5b84:	1f 91       	pop	r17
    5b86:	0f 91       	pop	r16
    5b88:	ff 90       	pop	r15
    5b8a:	ef 90       	pop	r14
    5b8c:	df 90       	pop	r13
    5b8e:	cf 90       	pop	r12
    5b90:	08 95       	ret

00005b92 <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    5b92:	ef 92       	push	r14
    5b94:	ff 92       	push	r15
    5b96:	0f 93       	push	r16
    5b98:	1f 93       	push	r17
    5b9a:	7b 01       	movw	r14, r22
    5b9c:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    5b9e:	00 27       	eor	r16, r16
    5ba0:	f7 fc       	sbrc	r15, 7
    5ba2:	00 95       	com	r16
    5ba4:	10 2f       	mov	r17, r16
    5ba6:	b8 01       	movw	r22, r16
    5ba8:	a7 01       	movw	r20, r14
    5baa:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <_ZN5Print5printEli>
}
    5bae:	1f 91       	pop	r17
    5bb0:	0f 91       	pop	r16
    5bb2:	ff 90       	pop	r15
    5bb4:	ef 90       	pop	r14
    5bb6:	08 95       	ret

00005bb8 <_ZN5Print7printlnEii>:
  size_t n = print(b, base);
  n += println();
  return n;
}

size_t Print::println(int num, int base)
    5bb8:	cf 92       	push	r12
    5bba:	df 92       	push	r13
    5bbc:	ef 92       	push	r14
    5bbe:	ff 92       	push	r15
    5bc0:	0f 93       	push	r16
    5bc2:	1f 93       	push	r17
    5bc4:	6c 01       	movw	r12, r24
    5bc6:	7b 01       	movw	r14, r22
    5bc8:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    5bca:	00 27       	eor	r16, r16
    5bcc:	f7 fc       	sbrc	r15, 7
    5bce:	00 95       	com	r16
    5bd0:	10 2f       	mov	r17, r16
    5bd2:	b8 01       	movw	r22, r16
    5bd4:	a7 01       	movw	r20, r14
    5bd6:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <_ZN5Print5printEli>
    5bda:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
    5bdc:	c6 01       	movw	r24, r12
    5bde:	0e 94 9f 2c 	call	0x593e	; 0x593e <_ZN5Print7printlnEv>
    5be2:	08 0f       	add	r16, r24
    5be4:	19 1f       	adc	r17, r25
  return n;
}
    5be6:	c8 01       	movw	r24, r16
    5be8:	1f 91       	pop	r17
    5bea:	0f 91       	pop	r16
    5bec:	ff 90       	pop	r15
    5bee:	ef 90       	pop	r14
    5bf0:	df 90       	pop	r13
    5bf2:	cf 90       	pop	r12
    5bf4:	08 95       	ret

00005bf6 <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    5bf6:	0e 94 d3 2c 	call	0x59a6	; 0x59a6 <_ZN5Print5writeEPKc>
}
    5bfa:	08 95       	ret

00005bfc <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    5bfc:	ef 92       	push	r14
    5bfe:	ff 92       	push	r15
    5c00:	0f 93       	push	r16
    5c02:	1f 93       	push	r17
    5c04:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    5c06:	0e 94 d3 2c 	call	0x59a6	; 0x59a6 <_ZN5Print5writeEPKc>
    5c0a:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    5c0c:	c7 01       	movw	r24, r14
    5c0e:	0e 94 9f 2c 	call	0x593e	; 0x593e <_ZN5Print7printlnEv>
    5c12:	08 0f       	add	r16, r24
    5c14:	19 1f       	adc	r17, r25
  return n;
}
    5c16:	c8 01       	movw	r24, r16
    5c18:	1f 91       	pop	r17
    5c1a:	0f 91       	pop	r16
    5c1c:	ff 90       	pop	r15
    5c1e:	ef 90       	pop	r14
    5c20:	08 95       	ret

00005c22 <_ZN5Print5printERK6String>:
    n += write(c);
  }
  return n;
}

size_t Print::print(const String &s)
    5c22:	af 92       	push	r10
    5c24:	bf 92       	push	r11
    5c26:	cf 92       	push	r12
    5c28:	df 92       	push	r13
    5c2a:	ef 92       	push	r14
    5c2c:	ff 92       	push	r15
    5c2e:	0f 93       	push	r16
    5c30:	1f 93       	push	r17
    5c32:	cf 93       	push	r28
    5c34:	df 93       	push	r29
    5c36:	5c 01       	movw	r10, r24
    5c38:	6b 01       	movw	r12, r22
    5c3a:	ee 24       	eor	r14, r14
    5c3c:	ff 24       	eor	r15, r15
    5c3e:	c0 e0       	ldi	r28, 0x00	; 0
    5c40:	d0 e0       	ldi	r29, 0x00	; 0
    5c42:	10 c0       	rjmp	.+32     	; 0x5c64 <_ZN5Print5printERK6String+0x42>
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    n += write(s[i]);
    5c44:	d5 01       	movw	r26, r10
    5c46:	ed 91       	ld	r30, X+
    5c48:	fc 91       	ld	r31, X
    5c4a:	00 81       	ld	r16, Z
    5c4c:	11 81       	ldd	r17, Z+1	; 0x01
    5c4e:	c6 01       	movw	r24, r12
    5c50:	be 01       	movw	r22, r28
    5c52:	0e 94 e8 2e 	call	0x5dd0	; 0x5dd0 <_ZNK6StringixEj>
    5c56:	68 2f       	mov	r22, r24
    5c58:	c5 01       	movw	r24, r10
    5c5a:	f8 01       	movw	r30, r16
    5c5c:	09 95       	icall
    5c5e:	e8 0e       	add	r14, r24
    5c60:	f9 1e       	adc	r15, r25
}

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    5c62:	21 96       	adiw	r28, 0x01	; 1
    5c64:	f6 01       	movw	r30, r12
    5c66:	84 81       	ldd	r24, Z+4	; 0x04
    5c68:	95 81       	ldd	r25, Z+5	; 0x05
    5c6a:	c8 17       	cp	r28, r24
    5c6c:	d9 07       	cpc	r29, r25
    5c6e:	50 f3       	brcs	.-44     	; 0x5c44 <_ZN5Print5printERK6String+0x22>
    n += write(s[i]);
  }
  return n;
}
    5c70:	c7 01       	movw	r24, r14
    5c72:	df 91       	pop	r29
    5c74:	cf 91       	pop	r28
    5c76:	1f 91       	pop	r17
    5c78:	0f 91       	pop	r16
    5c7a:	ff 90       	pop	r15
    5c7c:	ef 90       	pop	r14
    5c7e:	df 90       	pop	r13
    5c80:	cf 90       	pop	r12
    5c82:	bf 90       	pop	r11
    5c84:	af 90       	pop	r10
    5c86:	08 95       	ret

00005c88 <_ZN5Print7printlnERK6String>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
    5c88:	ef 92       	push	r14
    5c8a:	ff 92       	push	r15
    5c8c:	0f 93       	push	r16
    5c8e:	1f 93       	push	r17
    5c90:	7c 01       	movw	r14, r24
{
  size_t n = print(s);
    5c92:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <_ZN5Print5printERK6String>
    5c96:	8c 01       	movw	r16, r24
  n += println();
    5c98:	c7 01       	movw	r24, r14
    5c9a:	0e 94 9f 2c 	call	0x593e	; 0x593e <_ZN5Print7printlnEv>
    5c9e:	9c 01       	movw	r18, r24
    5ca0:	20 0f       	add	r18, r16
    5ca2:	31 1f       	adc	r19, r17
  return n;
}
    5ca4:	c9 01       	movw	r24, r18
    5ca6:	1f 91       	pop	r17
    5ca8:	0f 91       	pop	r16
    5caa:	ff 90       	pop	r15
    5cac:	ef 90       	pop	r14
    5cae:	08 95       	ret

00005cb0 <attachInterrupt>:

static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    5cb0:	82 30       	cpi	r24, 0x02	; 2
    5cb2:	00 f5       	brcc	.+64     	; 0x5cf4 <attachInterrupt+0x44>
    intFunc[interruptNum] = userFunc;
    5cb4:	e8 2f       	mov	r30, r24
    5cb6:	f0 e0       	ldi	r31, 0x00	; 0
    5cb8:	ee 0f       	add	r30, r30
    5cba:	ff 1f       	adc	r31, r31
    5cbc:	e2 5d       	subi	r30, 0xD2	; 210
    5cbe:	f8 4f       	sbci	r31, 0xF8	; 248
    5cc0:	71 83       	std	Z+1, r23	; 0x01
    5cc2:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    5cc4:	88 23       	and	r24, r24
    5cc6:	19 f0       	breq	.+6      	; 0x5cce <attachInterrupt+0x1e>
    5cc8:	81 30       	cpi	r24, 0x01	; 1
    5cca:	a1 f4       	brne	.+40     	; 0x5cf4 <attachInterrupt+0x44>
    5ccc:	08 c0       	rjmp	.+16     	; 0x5cde <attachInterrupt+0x2e>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    5cce:	80 91 69 00 	lds	r24, 0x0069
    5cd2:	8c 7f       	andi	r24, 0xFC	; 252
    5cd4:	84 2b       	or	r24, r20
    5cd6:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT0);
    5cda:	e8 9a       	sbi	0x1d, 0	; 29
    5cdc:	08 95       	ret
    #endif
      break;

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    5cde:	80 91 69 00 	lds	r24, 0x0069
    5ce2:	44 0f       	add	r20, r20
    5ce4:	55 1f       	adc	r21, r21
    5ce6:	44 0f       	add	r20, r20
    5ce8:	55 1f       	adc	r21, r21
    5cea:	83 7f       	andi	r24, 0xF3	; 243
    5cec:	84 2b       	or	r24, r20
    5cee:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT1);
    5cf2:	e9 9a       	sbi	0x1d, 1	; 29
    5cf4:	08 95       	ret

00005cf6 <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    5cf6:	82 30       	cpi	r24, 0x02	; 2
    5cf8:	80 f4       	brcc	.+32     	; 0x5d1a <detachInterrupt+0x24>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    5cfa:	88 23       	and	r24, r24
    5cfc:	19 f0       	breq	.+6      	; 0x5d04 <detachInterrupt+0xe>
    5cfe:	81 30       	cpi	r24, 0x01	; 1
    5d00:	21 f4       	brne	.+8      	; 0x5d0a <detachInterrupt+0x14>
    5d02:	02 c0       	rjmp	.+4      	; 0x5d08 <detachInterrupt+0x12>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
    5d04:	e8 98       	cbi	0x1d, 0	; 29
    5d06:	01 c0       	rjmp	.+2      	; 0x5d0a <detachInterrupt+0x14>
    #endif
      break;

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
    5d08:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;
#endif
    }
      
    intFunc[interruptNum] = 0;
    5d0a:	e8 2f       	mov	r30, r24
    5d0c:	f0 e0       	ldi	r31, 0x00	; 0
    5d0e:	ee 0f       	add	r30, r30
    5d10:	ff 1f       	adc	r31, r31
    5d12:	e2 5d       	subi	r30, 0xD2	; 210
    5d14:	f8 4f       	sbci	r31, 0xF8	; 248
    5d16:	11 82       	std	Z+1, r1	; 0x01
    5d18:	10 82       	st	Z, r1
    5d1a:	08 95       	ret

00005d1c <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

SIGNAL(INT0_vect) {
    5d1c:	1f 92       	push	r1
    5d1e:	0f 92       	push	r0
    5d20:	0f b6       	in	r0, 0x3f	; 63
    5d22:	0f 92       	push	r0
    5d24:	11 24       	eor	r1, r1
    5d26:	2f 93       	push	r18
    5d28:	3f 93       	push	r19
    5d2a:	4f 93       	push	r20
    5d2c:	5f 93       	push	r21
    5d2e:	6f 93       	push	r22
    5d30:	7f 93       	push	r23
    5d32:	8f 93       	push	r24
    5d34:	9f 93       	push	r25
    5d36:	af 93       	push	r26
    5d38:	bf 93       	push	r27
    5d3a:	ef 93       	push	r30
    5d3c:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    5d3e:	80 91 2e 07 	lds	r24, 0x072E
    5d42:	90 91 2f 07 	lds	r25, 0x072F
    5d46:	89 2b       	or	r24, r25
    5d48:	29 f0       	breq	.+10     	; 0x5d54 <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
    5d4a:	e0 91 2e 07 	lds	r30, 0x072E
    5d4e:	f0 91 2f 07 	lds	r31, 0x072F
    5d52:	09 95       	icall
}
    5d54:	ff 91       	pop	r31
    5d56:	ef 91       	pop	r30
    5d58:	bf 91       	pop	r27
    5d5a:	af 91       	pop	r26
    5d5c:	9f 91       	pop	r25
    5d5e:	8f 91       	pop	r24
    5d60:	7f 91       	pop	r23
    5d62:	6f 91       	pop	r22
    5d64:	5f 91       	pop	r21
    5d66:	4f 91       	pop	r20
    5d68:	3f 91       	pop	r19
    5d6a:	2f 91       	pop	r18
    5d6c:	0f 90       	pop	r0
    5d6e:	0f be       	out	0x3f, r0	; 63
    5d70:	0f 90       	pop	r0
    5d72:	1f 90       	pop	r1
    5d74:	18 95       	reti

00005d76 <__vector_2>:

SIGNAL(INT1_vect) {
    5d76:	1f 92       	push	r1
    5d78:	0f 92       	push	r0
    5d7a:	0f b6       	in	r0, 0x3f	; 63
    5d7c:	0f 92       	push	r0
    5d7e:	11 24       	eor	r1, r1
    5d80:	2f 93       	push	r18
    5d82:	3f 93       	push	r19
    5d84:	4f 93       	push	r20
    5d86:	5f 93       	push	r21
    5d88:	6f 93       	push	r22
    5d8a:	7f 93       	push	r23
    5d8c:	8f 93       	push	r24
    5d8e:	9f 93       	push	r25
    5d90:	af 93       	push	r26
    5d92:	bf 93       	push	r27
    5d94:	ef 93       	push	r30
    5d96:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    5d98:	80 91 30 07 	lds	r24, 0x0730
    5d9c:	90 91 31 07 	lds	r25, 0x0731
    5da0:	89 2b       	or	r24, r25
    5da2:	29 f0       	breq	.+10     	; 0x5dae <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
    5da4:	e0 91 30 07 	lds	r30, 0x0730
    5da8:	f0 91 31 07 	lds	r31, 0x0731
    5dac:	09 95       	icall
}
    5dae:	ff 91       	pop	r31
    5db0:	ef 91       	pop	r30
    5db2:	bf 91       	pop	r27
    5db4:	af 91       	pop	r26
    5db6:	9f 91       	pop	r25
    5db8:	8f 91       	pop	r24
    5dba:	7f 91       	pop	r23
    5dbc:	6f 91       	pop	r22
    5dbe:	5f 91       	pop	r21
    5dc0:	4f 91       	pop	r20
    5dc2:	3f 91       	pop	r19
    5dc4:	2f 91       	pop	r18
    5dc6:	0f 90       	pop	r0
    5dc8:	0f be       	out	0x3f, r0	; 63
    5dca:	0f 90       	pop	r0
    5dcc:	1f 90       	pop	r1
    5dce:	18 95       	reti

00005dd0 <_ZNK6StringixEj>:
		return dummy_writable_char;
	}
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
    5dd0:	fc 01       	movw	r30, r24
{
	if (index >= len || !buffer) return 0;
    5dd2:	84 81       	ldd	r24, Z+4	; 0x04
    5dd4:	95 81       	ldd	r25, Z+5	; 0x05
    5dd6:	68 17       	cp	r22, r24
    5dd8:	79 07       	cpc	r23, r25
    5dda:	48 f4       	brcc	.+18     	; 0x5dee <_ZNK6StringixEj+0x1e>
    5ddc:	01 90       	ld	r0, Z+
    5dde:	f0 81       	ld	r31, Z
    5de0:	e0 2d       	mov	r30, r0
    5de2:	30 97       	sbiw	r30, 0x00	; 0
    5de4:	21 f0       	breq	.+8      	; 0x5dee <_ZNK6StringixEj+0x1e>
	return buffer[index];
    5de6:	e6 0f       	add	r30, r22
    5de8:	f7 1f       	adc	r31, r23
    5dea:	80 81       	ld	r24, Z
    5dec:	08 95       	ret
    5dee:	80 e0       	ldi	r24, 0x00	; 0
}
    5df0:	08 95       	ret

00005df2 <_ZNK6String5toIntEv>:

/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
    5df2:	fc 01       	movw	r30, r24
{
	if (buffer) return atol(buffer);
    5df4:	80 81       	ld	r24, Z
    5df6:	91 81       	ldd	r25, Z+1	; 0x01
    5df8:	00 97       	sbiw	r24, 0x00	; 0
    5dfa:	29 f4       	brne	.+10     	; 0x5e06 <_ZNK6String5toIntEv+0x14>
    5dfc:	20 e0       	ldi	r18, 0x00	; 0
    5dfe:	30 e0       	ldi	r19, 0x00	; 0
    5e00:	40 e0       	ldi	r20, 0x00	; 0
    5e02:	50 e0       	ldi	r21, 0x00	; 0
    5e04:	04 c0       	rjmp	.+8      	; 0x5e0e <_ZNK6String5toIntEv+0x1c>
    5e06:	0e 94 5f 33 	call	0x66be	; 0x66be <atol>
    5e0a:	9b 01       	movw	r18, r22
    5e0c:	ac 01       	movw	r20, r24
	return 0;
}
    5e0e:	b9 01       	movw	r22, r18
    5e10:	ca 01       	movw	r24, r20
    5e12:	08 95       	ret

00005e14 <_ZNK6String10startsWithERKS_j>:
{
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
    5e14:	fc 01       	movw	r30, r24
    5e16:	db 01       	movw	r26, r22
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    5e18:	14 96       	adiw	r26, 0x04	; 4
    5e1a:	2d 91       	ld	r18, X+
    5e1c:	3c 91       	ld	r19, X
    5e1e:	15 97       	sbiw	r26, 0x05	; 5
    5e20:	84 81       	ldd	r24, Z+4	; 0x04
    5e22:	95 81       	ldd	r25, Z+5	; 0x05
    5e24:	82 1b       	sub	r24, r18
    5e26:	93 0b       	sbc	r25, r19
    5e28:	84 17       	cp	r24, r20
    5e2a:	95 07       	cpc	r25, r21
    5e2c:	a0 f0       	brcs	.+40     	; 0x5e56 <_ZNK6String10startsWithERKS_j+0x42>
    5e2e:	80 81       	ld	r24, Z
    5e30:	91 81       	ldd	r25, Z+1	; 0x01
    5e32:	00 97       	sbiw	r24, 0x00	; 0
    5e34:	81 f0       	breq	.+32     	; 0x5e56 <_ZNK6String10startsWithERKS_j+0x42>
    5e36:	6d 91       	ld	r22, X+
    5e38:	7c 91       	ld	r23, X
    5e3a:	61 15       	cp	r22, r1
    5e3c:	71 05       	cpc	r23, r1
    5e3e:	59 f0       	breq	.+22     	; 0x5e56 <_ZNK6String10startsWithERKS_j+0x42>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
    5e40:	84 0f       	add	r24, r20
    5e42:	95 1f       	adc	r25, r21
    5e44:	a9 01       	movw	r20, r18
    5e46:	0e 94 a4 33 	call	0x6748	; 0x6748 <strncmp>
    5e4a:	9c 01       	movw	r18, r24
    5e4c:	80 e0       	ldi	r24, 0x00	; 0
    5e4e:	23 2b       	or	r18, r19
    5e50:	19 f4       	brne	.+6      	; 0x5e58 <_ZNK6String10startsWithERKS_j+0x44>
    5e52:	81 e0       	ldi	r24, 0x01	; 1
    5e54:	08 95       	ret
    5e56:	80 e0       	ldi	r24, 0x00	; 0
}
    5e58:	08 95       	ret

00005e5a <_ZNK6String10startsWithERKS_>:
		if (tolower(*p1++) != tolower(*p2++)) return 0;
	} 
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
    5e5a:	fc 01       	movw	r30, r24
    5e5c:	db 01       	movw	r26, r22
{
	if (len < s2.len) return 0;
    5e5e:	24 81       	ldd	r18, Z+4	; 0x04
    5e60:	35 81       	ldd	r19, Z+5	; 0x05
    5e62:	14 96       	adiw	r26, 0x04	; 4
    5e64:	8d 91       	ld	r24, X+
    5e66:	9c 91       	ld	r25, X
    5e68:	15 97       	sbiw	r26, 0x05	; 5
    5e6a:	28 17       	cp	r18, r24
    5e6c:	39 07       	cpc	r19, r25
    5e6e:	10 f4       	brcc	.+4      	; 0x5e74 <_ZNK6String10startsWithERKS_+0x1a>
    5e70:	80 e0       	ldi	r24, 0x00	; 0
    5e72:	08 95       	ret
	return startsWith(s2, 0);
    5e74:	cf 01       	movw	r24, r30
    5e76:	40 e0       	ldi	r20, 0x00	; 0
    5e78:	50 e0       	ldi	r21, 0x00	; 0
    5e7a:	0e 94 0a 2f 	call	0x5e14	; 0x5e14 <_ZNK6String10startsWithERKS_j>
}
    5e7e:	08 95       	ret

00005e80 <_ZN6String12changeBufferEj>:
		return 1;
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
    5e80:	0f 93       	push	r16
    5e82:	1f 93       	push	r17
    5e84:	cf 93       	push	r28
    5e86:	df 93       	push	r29
    5e88:	ec 01       	movw	r28, r24
    5e8a:	8b 01       	movw	r16, r22
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    5e8c:	6f 5f       	subi	r22, 0xFF	; 255
    5e8e:	7f 4f       	sbci	r23, 0xFF	; 255
    5e90:	88 81       	ld	r24, Y
    5e92:	99 81       	ldd	r25, Y+1	; 0x01
    5e94:	0e 94 08 32 	call	0x6410	; 0x6410 <realloc>
	if (newbuffer) {
    5e98:	00 97       	sbiw	r24, 0x00	; 0
    5e9a:	11 f4       	brne	.+4      	; 0x5ea0 <_ZN6String12changeBufferEj+0x20>
    5e9c:	80 e0       	ldi	r24, 0x00	; 0
    5e9e:	05 c0       	rjmp	.+10     	; 0x5eaa <_ZN6String12changeBufferEj+0x2a>
		buffer = newbuffer;
    5ea0:	99 83       	std	Y+1, r25	; 0x01
    5ea2:	88 83       	st	Y, r24
		capacity = maxStrLen;
    5ea4:	1b 83       	std	Y+3, r17	; 0x03
    5ea6:	0a 83       	std	Y+2, r16	; 0x02
    5ea8:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    5eaa:	df 91       	pop	r29
    5eac:	cf 91       	pop	r28
    5eae:	1f 91       	pop	r17
    5eb0:	0f 91       	pop	r16
    5eb2:	08 95       	ret

00005eb4 <_ZN6String7reserveEj>:
	if (buffer) free(buffer);
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
    5eb4:	cf 93       	push	r28
    5eb6:	df 93       	push	r29
    5eb8:	ec 01       	movw	r28, r24
{
	if (buffer && capacity >= size) return 1;
    5eba:	88 81       	ld	r24, Y
    5ebc:	99 81       	ldd	r25, Y+1	; 0x01
    5ebe:	89 2b       	or	r24, r25
    5ec0:	29 f0       	breq	.+10     	; 0x5ecc <_ZN6String7reserveEj+0x18>
    5ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    5ec4:	9b 81       	ldd	r25, Y+3	; 0x03
    5ec6:	86 17       	cp	r24, r22
    5ec8:	97 07       	cpc	r25, r23
    5eca:	60 f4       	brcc	.+24     	; 0x5ee4 <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    5ecc:	ce 01       	movw	r24, r28
    5ece:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <_ZN6String12changeBufferEj>
    5ed2:	88 23       	and	r24, r24
    5ed4:	41 f0       	breq	.+16     	; 0x5ee6 <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    5ed6:	8c 81       	ldd	r24, Y+4	; 0x04
    5ed8:	9d 81       	ldd	r25, Y+5	; 0x05
    5eda:	89 2b       	or	r24, r25
    5edc:	19 f4       	brne	.+6      	; 0x5ee4 <_ZN6String7reserveEj+0x30>
    5ede:	e8 81       	ld	r30, Y
    5ee0:	f9 81       	ldd	r31, Y+1	; 0x01
    5ee2:	10 82       	st	Z, r1
    5ee4:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    5ee6:	df 91       	pop	r29
    5ee8:	cf 91       	pop	r28
    5eea:	08 95       	ret

00005eec <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
	flags = 0;
}

void String::invalidate(void)
    5eec:	cf 93       	push	r28
    5eee:	df 93       	push	r29
    5ef0:	ec 01       	movw	r28, r24
{
	if (buffer) free(buffer);
    5ef2:	88 81       	ld	r24, Y
    5ef4:	99 81       	ldd	r25, Y+1	; 0x01
    5ef6:	00 97       	sbiw	r24, 0x00	; 0
    5ef8:	11 f0       	breq	.+4      	; 0x5efe <_ZN6String10invalidateEv+0x12>
    5efa:	0e 94 41 29 	call	0x5282	; 0x5282 <free>
	buffer = NULL;
    5efe:	19 82       	std	Y+1, r1	; 0x01
    5f00:	18 82       	st	Y, r1
	capacity = len = 0;
    5f02:	1d 82       	std	Y+5, r1	; 0x05
    5f04:	1c 82       	std	Y+4, r1	; 0x04
    5f06:	1b 82       	std	Y+3, r1	; 0x03
    5f08:	1a 82       	std	Y+2, r1	; 0x02
}
    5f0a:	df 91       	pop	r29
    5f0c:	cf 91       	pop	r28
    5f0e:	08 95       	ret

00005f10 <_ZN6String4copyEPKcj>:

/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
    5f10:	ef 92       	push	r14
    5f12:	ff 92       	push	r15
    5f14:	0f 93       	push	r16
    5f16:	1f 93       	push	r17
    5f18:	cf 93       	push	r28
    5f1a:	df 93       	push	r29
    5f1c:	ec 01       	movw	r28, r24
    5f1e:	7b 01       	movw	r14, r22
    5f20:	8a 01       	movw	r16, r20
{
	if (!reserve(length)) {
    5f22:	ba 01       	movw	r22, r20
    5f24:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <_ZN6String7reserveEj>
    5f28:	88 23       	and	r24, r24
    5f2a:	21 f4       	brne	.+8      	; 0x5f34 <_ZN6String4copyEPKcj+0x24>
		invalidate();
    5f2c:	ce 01       	movw	r24, r28
    5f2e:	0e 94 76 2f 	call	0x5eec	; 0x5eec <_ZN6String10invalidateEv>
    5f32:	07 c0       	rjmp	.+14     	; 0x5f42 <_ZN6String4copyEPKcj+0x32>
		return *this;
	}
	len = length;
    5f34:	1d 83       	std	Y+5, r17	; 0x05
    5f36:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    5f38:	88 81       	ld	r24, Y
    5f3a:	99 81       	ldd	r25, Y+1	; 0x01
    5f3c:	b7 01       	movw	r22, r14
    5f3e:	0e 94 9d 33 	call	0x673a	; 0x673a <strcpy>
	return *this;
}
    5f42:	ce 01       	movw	r24, r28
    5f44:	df 91       	pop	r29
    5f46:	cf 91       	pop	r28
    5f48:	1f 91       	pop	r17
    5f4a:	0f 91       	pop	r16
    5f4c:	ff 90       	pop	r15
    5f4e:	ef 90       	pop	r14
    5f50:	08 95       	ret

00005f52 <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    5f52:	cf 93       	push	r28
    5f54:	df 93       	push	r29
    5f56:	ec 01       	movw	r28, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    5f58:	19 82       	std	Y+1, r1	; 0x01
    5f5a:	18 82       	st	Y, r1
	capacity = 0;
    5f5c:	1b 82       	std	Y+3, r1	; 0x03
    5f5e:	1a 82       	std	Y+2, r1	; 0x02
	len = 0;
    5f60:	1d 82       	std	Y+5, r1	; 0x05
    5f62:	1c 82       	std	Y+4, r1	; 0x04
	flags = 0;
    5f64:	1e 82       	std	Y+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    5f66:	61 15       	cp	r22, r1
    5f68:	71 05       	cpc	r23, r1
    5f6a:	51 f0       	breq	.+20     	; 0x5f80 <_ZN6StringC1EPKc+0x2e>
    5f6c:	db 01       	movw	r26, r22
    5f6e:	0d 90       	ld	r0, X+
    5f70:	00 20       	and	r0, r0
    5f72:	e9 f7       	brne	.-6      	; 0x5f6e <_ZN6StringC1EPKc+0x1c>
    5f74:	11 97       	sbiw	r26, 0x01	; 1
    5f76:	a6 1b       	sub	r26, r22
    5f78:	b7 0b       	sbc	r27, r23
    5f7a:	ad 01       	movw	r20, r26
    5f7c:	0e 94 88 2f 	call	0x5f10	; 0x5f10 <_ZN6String4copyEPKcj>
}
    5f80:	df 91       	pop	r29
    5f82:	cf 91       	pop	r28
    5f84:	08 95       	ret

00005f86 <_ZN6StringaSEPKc>:
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
    5f86:	0f 93       	push	r16
    5f88:	1f 93       	push	r17
    5f8a:	18 2f       	mov	r17, r24
    5f8c:	09 2f       	mov	r16, r25
{
	if (cstr) copy(cstr, strlen(cstr));
    5f8e:	61 15       	cp	r22, r1
    5f90:	71 05       	cpc	r23, r1
    5f92:	59 f0       	breq	.+22     	; 0x5faa <_ZN6StringaSEPKc+0x24>
    5f94:	db 01       	movw	r26, r22
    5f96:	0d 90       	ld	r0, X+
    5f98:	00 20       	and	r0, r0
    5f9a:	e9 f7       	brne	.-6      	; 0x5f96 <_ZN6StringaSEPKc+0x10>
    5f9c:	11 97       	sbiw	r26, 0x01	; 1
    5f9e:	a6 1b       	sub	r26, r22
    5fa0:	b7 0b       	sbc	r27, r23
    5fa2:	ad 01       	movw	r20, r26
    5fa4:	0e 94 88 2f 	call	0x5f10	; 0x5f10 <_ZN6String4copyEPKcj>
    5fa8:	02 c0       	rjmp	.+4      	; 0x5fae <_ZN6StringaSEPKc+0x28>
	else invalidate();
    5faa:	0e 94 76 2f 	call	0x5eec	; 0x5eec <_ZN6String10invalidateEv>
	
	return *this;
}
    5fae:	81 2f       	mov	r24, r17
    5fb0:	90 2f       	mov	r25, r16
    5fb2:	1f 91       	pop	r17
    5fb4:	0f 91       	pop	r16
    5fb6:	08 95       	ret

00005fb8 <_ZNK6String9substringEjj>:
String String::substring( unsigned int left ) const
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
    5fb8:	bf 92       	push	r11
    5fba:	cf 92       	push	r12
    5fbc:	df 92       	push	r13
    5fbe:	ef 92       	push	r14
    5fc0:	ff 92       	push	r15
    5fc2:	0f 93       	push	r16
    5fc4:	1f 93       	push	r17
    5fc6:	cf 93       	push	r28
    5fc8:	df 93       	push	r29
    5fca:	08 2f       	mov	r16, r24
    5fcc:	b9 2e       	mov	r11, r25
    5fce:	6b 01       	movw	r12, r22
    5fd0:	7a 01       	movw	r14, r20
    5fd2:	e9 01       	movw	r28, r18
{
	if (left > right) {
    5fd4:	24 17       	cp	r18, r20
    5fd6:	35 07       	cpc	r19, r21
    5fd8:	10 f4       	brcc	.+4      	; 0x5fde <_ZNK6String9substringEjj+0x26>
    5fda:	ea 01       	movw	r28, r20
    5fdc:	79 01       	movw	r14, r18
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    5fde:	80 2f       	mov	r24, r16
    5fe0:	9b 2d       	mov	r25, r11
    5fe2:	6d e7       	ldi	r22, 0x7D	; 125
    5fe4:	72 e0       	ldi	r23, 0x02	; 2
    5fe6:	0e 94 a9 2f 	call	0x5f52	; 0x5f52 <_ZN6StringC1EPKc>
	if (left > len) return out;
    5fea:	d6 01       	movw	r26, r12
    5fec:	14 96       	adiw	r26, 0x04	; 4
    5fee:	8d 91       	ld	r24, X+
    5ff0:	9c 91       	ld	r25, X
    5ff2:	15 97       	sbiw	r26, 0x05	; 5
    5ff4:	8e 15       	cp	r24, r14
    5ff6:	9f 05       	cpc	r25, r15
    5ff8:	d0 f0       	brcs	.+52     	; 0x602e <_ZNK6String9substringEjj+0x76>
    5ffa:	8c 17       	cp	r24, r28
    5ffc:	9d 07       	cpc	r25, r29
    5ffe:	08 f4       	brcc	.+2      	; 0x6002 <_ZNK6String9substringEjj+0x4a>
    6000:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    6002:	d6 01       	movw	r26, r12
    6004:	ed 91       	ld	r30, X+
    6006:	fc 91       	ld	r31, X
    6008:	11 97       	sbiw	r26, 0x01	; 1
    600a:	ec 0f       	add	r30, r28
    600c:	fd 1f       	adc	r31, r29
    600e:	10 81       	ld	r17, Z
	buffer[right] = '\0';	
    6010:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    6012:	6d 91       	ld	r22, X+
    6014:	7c 91       	ld	r23, X
    6016:	6e 0d       	add	r22, r14
    6018:	7f 1d       	adc	r23, r15
    601a:	80 2f       	mov	r24, r16
    601c:	9b 2d       	mov	r25, r11
    601e:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    6022:	d6 01       	movw	r26, r12
    6024:	ed 91       	ld	r30, X+
    6026:	fc 91       	ld	r31, X
    6028:	ec 0f       	add	r30, r28
    602a:	fd 1f       	adc	r31, r29
    602c:	10 83       	st	Z, r17
	return out;
}
    602e:	80 2f       	mov	r24, r16
    6030:	9b 2d       	mov	r25, r11
    6032:	df 91       	pop	r29
    6034:	cf 91       	pop	r28
    6036:	1f 91       	pop	r17
    6038:	0f 91       	pop	r16
    603a:	ff 90       	pop	r15
    603c:	ef 90       	pop	r14
    603e:	df 90       	pop	r13
    6040:	cf 90       	pop	r12
    6042:	bf 90       	pop	r11
    6044:	08 95       	ret

00006046 <_ZN6StringD1Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    6046:	fc 01       	movw	r30, r24
{
	free(buffer);
    6048:	80 81       	ld	r24, Z
    604a:	91 81       	ldd	r25, Z+1	; 0x01
    604c:	0e 94 41 29 	call	0x5282	; 0x5282 <free>
}
    6050:	08 95       	ret

00006052 <main>:
#include <Arduino.h>

int main(void)
    6052:	cf 93       	push	r28
    6054:	df 93       	push	r29
{
	init();
    6056:	0e 94 e7 30 	call	0x61ce	; 0x61ce <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    605a:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    605e:	ce e0       	ldi	r28, 0x0E	; 14
    6060:	da e2       	ldi	r29, 0x2A	; 42
#endif
	
	setup();
    
	for (;;) {
		loop();
    6062:	0e 94 33 26 	call	0x4c66	; 0x4c66 <loop>
		if (serialEventRun) serialEventRun();
    6066:	20 97       	sbiw	r28, 0x00	; 0
    6068:	e1 f3       	breq	.-8      	; 0x6062 <main+0x10>
    606a:	0e 94 0e 2a 	call	0x541c	; 0x541c <_Z14serialEventRunv>
    606e:	f9 cf       	rjmp	.-14     	; 0x6062 <main+0x10>

00006070 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    6070:	1f 92       	push	r1
    6072:	0f 92       	push	r0
    6074:	0f b6       	in	r0, 0x3f	; 63
    6076:	0f 92       	push	r0
    6078:	11 24       	eor	r1, r1
    607a:	2f 93       	push	r18
    607c:	3f 93       	push	r19
    607e:	8f 93       	push	r24
    6080:	9f 93       	push	r25
    6082:	af 93       	push	r26
    6084:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    6086:	80 91 36 07 	lds	r24, 0x0736
    608a:	90 91 37 07 	lds	r25, 0x0737
    608e:	a0 91 38 07 	lds	r26, 0x0738
    6092:	b0 91 39 07 	lds	r27, 0x0739
	unsigned char f = timer0_fract;
    6096:	30 91 3a 07 	lds	r19, 0x073A

	m += MILLIS_INC;
    609a:	01 96       	adiw	r24, 0x01	; 1
    609c:	a1 1d       	adc	r26, r1
    609e:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    60a0:	23 2f       	mov	r18, r19
    60a2:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    60a4:	2d 37       	cpi	r18, 0x7D	; 125
    60a6:	20 f0       	brcs	.+8      	; 0x60b0 <__vector_16+0x40>
		f -= FRACT_MAX;
    60a8:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    60aa:	01 96       	adiw	r24, 0x01	; 1
    60ac:	a1 1d       	adc	r26, r1
    60ae:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    60b0:	20 93 3a 07 	sts	0x073A, r18
	timer0_millis = m;
    60b4:	80 93 36 07 	sts	0x0736, r24
    60b8:	90 93 37 07 	sts	0x0737, r25
    60bc:	a0 93 38 07 	sts	0x0738, r26
    60c0:	b0 93 39 07 	sts	0x0739, r27
	timer0_overflow_count++;
    60c4:	80 91 32 07 	lds	r24, 0x0732
    60c8:	90 91 33 07 	lds	r25, 0x0733
    60cc:	a0 91 34 07 	lds	r26, 0x0734
    60d0:	b0 91 35 07 	lds	r27, 0x0735
    60d4:	01 96       	adiw	r24, 0x01	; 1
    60d6:	a1 1d       	adc	r26, r1
    60d8:	b1 1d       	adc	r27, r1
    60da:	80 93 32 07 	sts	0x0732, r24
    60de:	90 93 33 07 	sts	0x0733, r25
    60e2:	a0 93 34 07 	sts	0x0734, r26
    60e6:	b0 93 35 07 	sts	0x0735, r27
}
    60ea:	bf 91       	pop	r27
    60ec:	af 91       	pop	r26
    60ee:	9f 91       	pop	r25
    60f0:	8f 91       	pop	r24
    60f2:	3f 91       	pop	r19
    60f4:	2f 91       	pop	r18
    60f6:	0f 90       	pop	r0
    60f8:	0f be       	out	0x3f, r0	; 63
    60fa:	0f 90       	pop	r0
    60fc:	1f 90       	pop	r1
    60fe:	18 95       	reti

00006100 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    6100:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    6102:	f8 94       	cli
	m = timer0_millis;
    6104:	20 91 36 07 	lds	r18, 0x0736
    6108:	30 91 37 07 	lds	r19, 0x0737
    610c:	40 91 38 07 	lds	r20, 0x0738
    6110:	50 91 39 07 	lds	r21, 0x0739
	SREG = oldSREG;
    6114:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    6116:	b9 01       	movw	r22, r18
    6118:	ca 01       	movw	r24, r20
    611a:	08 95       	ret

0000611c <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    611c:	9b 01       	movw	r18, r22
    611e:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    6120:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    6122:	f8 94       	cli
	m = timer0_overflow_count;
    6124:	80 91 32 07 	lds	r24, 0x0732
    6128:	90 91 33 07 	lds	r25, 0x0733
    612c:	a0 91 34 07 	lds	r26, 0x0734
    6130:	b0 91 35 07 	lds	r27, 0x0735
#if defined(TCNT0)
	t = TCNT0;
    6134:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    6136:	a8 9b       	sbis	0x15, 0	; 21
    6138:	05 c0       	rjmp	.+10     	; 0x6144 <delay+0x28>
    613a:	6f 3f       	cpi	r22, 0xFF	; 255
    613c:	19 f0       	breq	.+6      	; 0x6144 <delay+0x28>
		m++;
    613e:	01 96       	adiw	r24, 0x01	; 1
    6140:	a1 1d       	adc	r26, r1
    6142:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    6144:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    6146:	ba 2f       	mov	r27, r26
    6148:	a9 2f       	mov	r26, r25
    614a:	98 2f       	mov	r25, r24
    614c:	88 27       	eor	r24, r24
    614e:	86 0f       	add	r24, r22
    6150:	91 1d       	adc	r25, r1
    6152:	a1 1d       	adc	r26, r1
    6154:	b1 1d       	adc	r27, r1
    6156:	62 e0       	ldi	r22, 0x02	; 2
    6158:	88 0f       	add	r24, r24
    615a:	99 1f       	adc	r25, r25
    615c:	aa 1f       	adc	r26, r26
    615e:	bb 1f       	adc	r27, r27
    6160:	6a 95       	dec	r22
    6162:	d1 f7       	brne	.-12     	; 0x6158 <delay+0x3c>
    6164:	bc 01       	movw	r22, r24
    6166:	2d c0       	rjmp	.+90     	; 0x61c2 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    6168:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    616a:	f8 94       	cli
	m = timer0_overflow_count;
    616c:	80 91 32 07 	lds	r24, 0x0732
    6170:	90 91 33 07 	lds	r25, 0x0733
    6174:	a0 91 34 07 	lds	r26, 0x0734
    6178:	b0 91 35 07 	lds	r27, 0x0735
#if defined(TCNT0)
	t = TCNT0;
    617c:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    617e:	a8 9b       	sbis	0x15, 0	; 21
    6180:	05 c0       	rjmp	.+10     	; 0x618c <delay+0x70>
    6182:	ef 3f       	cpi	r30, 0xFF	; 255
    6184:	19 f0       	breq	.+6      	; 0x618c <delay+0x70>
		m++;
    6186:	01 96       	adiw	r24, 0x01	; 1
    6188:	a1 1d       	adc	r26, r1
    618a:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    618c:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    618e:	ba 2f       	mov	r27, r26
    6190:	a9 2f       	mov	r26, r25
    6192:	98 2f       	mov	r25, r24
    6194:	88 27       	eor	r24, r24
    6196:	8e 0f       	add	r24, r30
    6198:	91 1d       	adc	r25, r1
    619a:	a1 1d       	adc	r26, r1
    619c:	b1 1d       	adc	r27, r1
    619e:	e2 e0       	ldi	r30, 0x02	; 2
    61a0:	88 0f       	add	r24, r24
    61a2:	99 1f       	adc	r25, r25
    61a4:	aa 1f       	adc	r26, r26
    61a6:	bb 1f       	adc	r27, r27
    61a8:	ea 95       	dec	r30
    61aa:	d1 f7       	brne	.-12     	; 0x61a0 <delay+0x84>
    61ac:	86 1b       	sub	r24, r22
    61ae:	97 0b       	sbc	r25, r23
    61b0:	88 5e       	subi	r24, 0xE8	; 232
    61b2:	93 40       	sbci	r25, 0x03	; 3
    61b4:	c8 f2       	brcs	.-78     	; 0x6168 <delay+0x4c>
			ms--;
    61b6:	21 50       	subi	r18, 0x01	; 1
    61b8:	30 40       	sbci	r19, 0x00	; 0
    61ba:	40 40       	sbci	r20, 0x00	; 0
    61bc:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    61be:	68 51       	subi	r22, 0x18	; 24
    61c0:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    61c2:	21 15       	cp	r18, r1
    61c4:	31 05       	cpc	r19, r1
    61c6:	41 05       	cpc	r20, r1
    61c8:	51 05       	cpc	r21, r1
    61ca:	71 f6       	brne	.-100    	; 0x6168 <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    61cc:	08 95       	ret

000061ce <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    61ce:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    61d0:	84 b5       	in	r24, 0x24	; 36
    61d2:	82 60       	ori	r24, 0x02	; 2
    61d4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    61d6:	84 b5       	in	r24, 0x24	; 36
    61d8:	81 60       	ori	r24, 0x01	; 1
    61da:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    61dc:	85 b5       	in	r24, 0x25	; 37
    61de:	82 60       	ori	r24, 0x02	; 2
    61e0:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    61e2:	85 b5       	in	r24, 0x25	; 37
    61e4:	81 60       	ori	r24, 0x01	; 1
    61e6:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    61e8:	ee e6       	ldi	r30, 0x6E	; 110
    61ea:	f0 e0       	ldi	r31, 0x00	; 0
    61ec:	80 81       	ld	r24, Z
    61ee:	81 60       	ori	r24, 0x01	; 1
    61f0:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    61f2:	e1 e8       	ldi	r30, 0x81	; 129
    61f4:	f0 e0       	ldi	r31, 0x00	; 0
    61f6:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    61f8:	80 81       	ld	r24, Z
    61fa:	82 60       	ori	r24, 0x02	; 2
    61fc:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    61fe:	80 81       	ld	r24, Z
    6200:	81 60       	ori	r24, 0x01	; 1
    6202:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    6204:	e0 e8       	ldi	r30, 0x80	; 128
    6206:	f0 e0       	ldi	r31, 0x00	; 0
    6208:	80 81       	ld	r24, Z
    620a:	81 60       	ori	r24, 0x01	; 1
    620c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    620e:	e1 eb       	ldi	r30, 0xB1	; 177
    6210:	f0 e0       	ldi	r31, 0x00	; 0
    6212:	80 81       	ld	r24, Z
    6214:	84 60       	ori	r24, 0x04	; 4
    6216:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    6218:	e0 eb       	ldi	r30, 0xB0	; 176
    621a:	f0 e0       	ldi	r31, 0x00	; 0
    621c:	80 81       	ld	r24, Z
    621e:	81 60       	ori	r24, 0x01	; 1
    6220:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    6222:	ea e7       	ldi	r30, 0x7A	; 122
    6224:	f0 e0       	ldi	r31, 0x00	; 0
    6226:	80 81       	ld	r24, Z
    6228:	84 60       	ori	r24, 0x04	; 4
    622a:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    622c:	80 81       	ld	r24, Z
    622e:	82 60       	ori	r24, 0x02	; 2
    6230:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    6232:	80 81       	ld	r24, Z
    6234:	81 60       	ori	r24, 0x01	; 1
    6236:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    6238:	80 81       	ld	r24, Z
    623a:	80 68       	ori	r24, 0x80	; 128
    623c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    623e:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    6242:	08 95       	ret

00006244 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    6244:	cf 93       	push	r28
    6246:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    6248:	48 2f       	mov	r20, r24
    624a:	50 e0       	ldi	r21, 0x00	; 0
    624c:	ca 01       	movw	r24, r20
    624e:	81 5a       	subi	r24, 0xA1	; 161
    6250:	9c 4f       	sbci	r25, 0xFC	; 252
    6252:	fc 01       	movw	r30, r24
    6254:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    6256:	45 5b       	subi	r20, 0xB5	; 181
    6258:	5c 4f       	sbci	r21, 0xFC	; 252
    625a:	fa 01       	movw	r30, r20
    625c:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    625e:	88 23       	and	r24, r24
    6260:	69 f1       	breq	.+90     	; 0x62bc <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    6262:	90 e0       	ldi	r25, 0x00	; 0
    6264:	88 0f       	add	r24, r24
    6266:	99 1f       	adc	r25, r25
    6268:	fc 01       	movw	r30, r24
    626a:	e3 5d       	subi	r30, 0xD3	; 211
    626c:	fc 4f       	sbci	r31, 0xFC	; 252
    626e:	a5 91       	lpm	r26, Z+
    6270:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    6272:	fc 01       	movw	r30, r24
    6274:	e9 5c       	subi	r30, 0xC9	; 201
    6276:	fc 4f       	sbci	r31, 0xFC	; 252
    6278:	c5 91       	lpm	r28, Z+
    627a:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    627c:	66 23       	and	r22, r22
    627e:	51 f4       	brne	.+20     	; 0x6294 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    6280:	2f b7       	in	r18, 0x3f	; 63
                cli();
    6282:	f8 94       	cli
		*reg &= ~bit;
    6284:	8c 91       	ld	r24, X
    6286:	93 2f       	mov	r25, r19
    6288:	90 95       	com	r25
    628a:	89 23       	and	r24, r25
    628c:	8c 93       	st	X, r24
		*out &= ~bit;
    628e:	88 81       	ld	r24, Y
    6290:	89 23       	and	r24, r25
    6292:	0b c0       	rjmp	.+22     	; 0x62aa <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    6294:	62 30       	cpi	r22, 0x02	; 2
    6296:	61 f4       	brne	.+24     	; 0x62b0 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    6298:	2f b7       	in	r18, 0x3f	; 63
                cli();
    629a:	f8 94       	cli
		*reg &= ~bit;
    629c:	8c 91       	ld	r24, X
    629e:	93 2f       	mov	r25, r19
    62a0:	90 95       	com	r25
    62a2:	89 23       	and	r24, r25
    62a4:	8c 93       	st	X, r24
		*out |= bit;
    62a6:	88 81       	ld	r24, Y
    62a8:	83 2b       	or	r24, r19
    62aa:	88 83       	st	Y, r24
		SREG = oldSREG;
    62ac:	2f bf       	out	0x3f, r18	; 63
    62ae:	06 c0       	rjmp	.+12     	; 0x62bc <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    62b0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    62b2:	f8 94       	cli
		*reg |= bit;
    62b4:	8c 91       	ld	r24, X
    62b6:	83 2b       	or	r24, r19
    62b8:	8c 93       	st	X, r24
		SREG = oldSREG;
    62ba:	9f bf       	out	0x3f, r25	; 63
	}
}
    62bc:	df 91       	pop	r29
    62be:	cf 91       	pop	r28
    62c0:	08 95       	ret

000062c2 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    62c2:	48 2f       	mov	r20, r24
    62c4:	50 e0       	ldi	r21, 0x00	; 0
    62c6:	ca 01       	movw	r24, r20
    62c8:	8d 58       	subi	r24, 0x8D	; 141
    62ca:	9c 4f       	sbci	r25, 0xFC	; 252
    62cc:	fc 01       	movw	r30, r24
    62ce:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    62d0:	ca 01       	movw	r24, r20
    62d2:	81 5a       	subi	r24, 0xA1	; 161
    62d4:	9c 4f       	sbci	r25, 0xFC	; 252
    62d6:	fc 01       	movw	r30, r24
    62d8:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    62da:	45 5b       	subi	r20, 0xB5	; 181
    62dc:	5c 4f       	sbci	r21, 0xFC	; 252
    62de:	fa 01       	movw	r30, r20
    62e0:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    62e2:	33 23       	and	r19, r19
    62e4:	09 f4       	brne	.+2      	; 0x62e8 <digitalWrite+0x26>
    62e6:	40 c0       	rjmp	.+128    	; 0x6368 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    62e8:	22 23       	and	r18, r18
    62ea:	51 f1       	breq	.+84     	; 0x6340 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    62ec:	23 30       	cpi	r18, 0x03	; 3
    62ee:	71 f0       	breq	.+28     	; 0x630c <digitalWrite+0x4a>
    62f0:	24 30       	cpi	r18, 0x04	; 4
    62f2:	28 f4       	brcc	.+10     	; 0x62fe <digitalWrite+0x3c>
    62f4:	21 30       	cpi	r18, 0x01	; 1
    62f6:	a1 f0       	breq	.+40     	; 0x6320 <digitalWrite+0x5e>
    62f8:	22 30       	cpi	r18, 0x02	; 2
    62fa:	11 f5       	brne	.+68     	; 0x6340 <digitalWrite+0x7e>
    62fc:	14 c0       	rjmp	.+40     	; 0x6326 <digitalWrite+0x64>
    62fe:	26 30       	cpi	r18, 0x06	; 6
    6300:	b1 f0       	breq	.+44     	; 0x632e <digitalWrite+0x6c>
    6302:	27 30       	cpi	r18, 0x07	; 7
    6304:	c1 f0       	breq	.+48     	; 0x6336 <digitalWrite+0x74>
    6306:	24 30       	cpi	r18, 0x04	; 4
    6308:	d9 f4       	brne	.+54     	; 0x6340 <digitalWrite+0x7e>
    630a:	04 c0       	rjmp	.+8      	; 0x6314 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    630c:	80 91 80 00 	lds	r24, 0x0080
    6310:	8f 77       	andi	r24, 0x7F	; 127
    6312:	03 c0       	rjmp	.+6      	; 0x631a <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    6314:	80 91 80 00 	lds	r24, 0x0080
    6318:	8f 7d       	andi	r24, 0xDF	; 223
    631a:	80 93 80 00 	sts	0x0080, r24
    631e:	10 c0       	rjmp	.+32     	; 0x6340 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    6320:	84 b5       	in	r24, 0x24	; 36
    6322:	8f 77       	andi	r24, 0x7F	; 127
    6324:	02 c0       	rjmp	.+4      	; 0x632a <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    6326:	84 b5       	in	r24, 0x24	; 36
    6328:	8f 7d       	andi	r24, 0xDF	; 223
    632a:	84 bd       	out	0x24, r24	; 36
    632c:	09 c0       	rjmp	.+18     	; 0x6340 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    632e:	80 91 b0 00 	lds	r24, 0x00B0
    6332:	8f 77       	andi	r24, 0x7F	; 127
    6334:	03 c0       	rjmp	.+6      	; 0x633c <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    6336:	80 91 b0 00 	lds	r24, 0x00B0
    633a:	8f 7d       	andi	r24, 0xDF	; 223
    633c:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    6340:	e3 2f       	mov	r30, r19
    6342:	f0 e0       	ldi	r31, 0x00	; 0
    6344:	ee 0f       	add	r30, r30
    6346:	ff 1f       	adc	r31, r31
    6348:	e9 5c       	subi	r30, 0xC9	; 201
    634a:	fc 4f       	sbci	r31, 0xFC	; 252
    634c:	a5 91       	lpm	r26, Z+
    634e:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    6350:	2f b7       	in	r18, 0x3f	; 63
	cli();
    6352:	f8 94       	cli

	if (val == LOW) {
    6354:	66 23       	and	r22, r22
    6356:	21 f4       	brne	.+8      	; 0x6360 <digitalWrite+0x9e>
		*out &= ~bit;
    6358:	8c 91       	ld	r24, X
    635a:	90 95       	com	r25
    635c:	89 23       	and	r24, r25
    635e:	02 c0       	rjmp	.+4      	; 0x6364 <digitalWrite+0xa2>
	} else {
		*out |= bit;
    6360:	8c 91       	ld	r24, X
    6362:	89 2b       	or	r24, r25
    6364:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    6366:	2f bf       	out	0x3f, r18	; 63
    6368:	08 95       	ret

0000636a <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    636a:	68 2f       	mov	r22, r24
    636c:	70 e0       	ldi	r23, 0x00	; 0
    636e:	cb 01       	movw	r24, r22
    6370:	8d 58       	subi	r24, 0x8D	; 141
    6372:	9c 4f       	sbci	r25, 0xFC	; 252
    6374:	fc 01       	movw	r30, r24
    6376:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    6378:	cb 01       	movw	r24, r22
    637a:	81 5a       	subi	r24, 0xA1	; 161
    637c:	9c 4f       	sbci	r25, 0xFC	; 252
    637e:	fc 01       	movw	r30, r24
    6380:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    6382:	65 5b       	subi	r22, 0xB5	; 181
    6384:	7c 4f       	sbci	r23, 0xFC	; 252
    6386:	fb 01       	movw	r30, r22
    6388:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
    638a:	99 23       	and	r25, r25
    638c:	19 f4       	brne	.+6      	; 0x6394 <digitalRead+0x2a>
    638e:	20 e0       	ldi	r18, 0x00	; 0
    6390:	30 e0       	ldi	r19, 0x00	; 0
    6392:	3c c0       	rjmp	.+120    	; 0x640c <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6394:	22 23       	and	r18, r18
    6396:	51 f1       	breq	.+84     	; 0x63ec <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    6398:	23 30       	cpi	r18, 0x03	; 3
    639a:	71 f0       	breq	.+28     	; 0x63b8 <digitalRead+0x4e>
    639c:	24 30       	cpi	r18, 0x04	; 4
    639e:	28 f4       	brcc	.+10     	; 0x63aa <digitalRead+0x40>
    63a0:	21 30       	cpi	r18, 0x01	; 1
    63a2:	a1 f0       	breq	.+40     	; 0x63cc <digitalRead+0x62>
    63a4:	22 30       	cpi	r18, 0x02	; 2
    63a6:	11 f5       	brne	.+68     	; 0x63ec <digitalRead+0x82>
    63a8:	14 c0       	rjmp	.+40     	; 0x63d2 <digitalRead+0x68>
    63aa:	26 30       	cpi	r18, 0x06	; 6
    63ac:	b1 f0       	breq	.+44     	; 0x63da <digitalRead+0x70>
    63ae:	27 30       	cpi	r18, 0x07	; 7
    63b0:	c1 f0       	breq	.+48     	; 0x63e2 <digitalRead+0x78>
    63b2:	24 30       	cpi	r18, 0x04	; 4
    63b4:	d9 f4       	brne	.+54     	; 0x63ec <digitalRead+0x82>
    63b6:	04 c0       	rjmp	.+8      	; 0x63c0 <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    63b8:	80 91 80 00 	lds	r24, 0x0080
    63bc:	8f 77       	andi	r24, 0x7F	; 127
    63be:	03 c0       	rjmp	.+6      	; 0x63c6 <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    63c0:	80 91 80 00 	lds	r24, 0x0080
    63c4:	8f 7d       	andi	r24, 0xDF	; 223
    63c6:	80 93 80 00 	sts	0x0080, r24
    63ca:	10 c0       	rjmp	.+32     	; 0x63ec <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    63cc:	84 b5       	in	r24, 0x24	; 36
    63ce:	8f 77       	andi	r24, 0x7F	; 127
    63d0:	02 c0       	rjmp	.+4      	; 0x63d6 <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    63d2:	84 b5       	in	r24, 0x24	; 36
    63d4:	8f 7d       	andi	r24, 0xDF	; 223
    63d6:	84 bd       	out	0x24, r24	; 36
    63d8:	09 c0       	rjmp	.+18     	; 0x63ec <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    63da:	80 91 b0 00 	lds	r24, 0x00B0
    63de:	8f 77       	andi	r24, 0x7F	; 127
    63e0:	03 c0       	rjmp	.+6      	; 0x63e8 <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    63e2:	80 91 b0 00 	lds	r24, 0x00B0
    63e6:	8f 7d       	andi	r24, 0xDF	; 223
    63e8:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    63ec:	89 2f       	mov	r24, r25
    63ee:	90 e0       	ldi	r25, 0x00	; 0
    63f0:	88 0f       	add	r24, r24
    63f2:	99 1f       	adc	r25, r25
    63f4:	8f 5b       	subi	r24, 0xBF	; 191
    63f6:	9c 4f       	sbci	r25, 0xFC	; 252
    63f8:	fc 01       	movw	r30, r24
    63fa:	a5 91       	lpm	r26, Z+
    63fc:	b4 91       	lpm	r27, Z+
    63fe:	8c 91       	ld	r24, X
    6400:	20 e0       	ldi	r18, 0x00	; 0
    6402:	30 e0       	ldi	r19, 0x00	; 0
    6404:	84 23       	and	r24, r20
    6406:	11 f0       	breq	.+4      	; 0x640c <digitalRead+0xa2>
    6408:	21 e0       	ldi	r18, 0x01	; 1
    640a:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    640c:	c9 01       	movw	r24, r18
    640e:	08 95       	ret

00006410 <realloc>:
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
    6410:	6f 92       	push	r6
    6412:	7f 92       	push	r7
    6414:	8f 92       	push	r8
    6416:	9f 92       	push	r9
    6418:	af 92       	push	r10
    641a:	bf 92       	push	r11
    641c:	cf 92       	push	r12
    641e:	df 92       	push	r13
    6420:	ef 92       	push	r14
    6422:	ff 92       	push	r15
    6424:	0f 93       	push	r16
    6426:	1f 93       	push	r17
    6428:	cf 93       	push	r28
    642a:	df 93       	push	r29
    642c:	8c 01       	movw	r16, r24
    642e:	00 97       	sbiw	r24, 0x00	; 0
    6430:	29 f4       	brne	.+10     	; 0x643c <realloc+0x2c>
		return malloc(len);
    6432:	cb 01       	movw	r24, r22
    6434:	0e 94 a4 28 	call	0x5148	; 0x5148 <malloc>
    6438:	8c 01       	movw	r16, r24
    643a:	bb c0       	rjmp	.+374    	; 0x65b2 <realloc+0x1a2>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
    643c:	8e ef       	ldi	r24, 0xFE	; 254
    643e:	e8 2e       	mov	r14, r24
    6440:	8f ef       	ldi	r24, 0xFF	; 255
    6442:	f8 2e       	mov	r15, r24
    6444:	e0 0e       	add	r14, r16
    6446:	f1 1e       	adc	r15, r17
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
    6448:	48 01       	movw	r8, r16
    644a:	86 0e       	add	r8, r22
    644c:	97 1e       	adc	r9, r23
	if (cp < cp1)
    644e:	8e 14       	cp	r8, r14
    6450:	9f 04       	cpc	r9, r15
    6452:	08 f4       	brcc	.+2      	; 0x6456 <realloc+0x46>
    6454:	ac c0       	rjmp	.+344    	; 0x65ae <realloc+0x19e>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
    6456:	d7 01       	movw	r26, r14
    6458:	4d 91       	ld	r20, X+
    645a:	5c 91       	ld	r21, X
    645c:	11 97       	sbiw	r26, 0x01	; 1
    645e:	46 17       	cp	r20, r22
    6460:	57 07       	cpc	r21, r23
    6462:	b8 f0       	brcs	.+46     	; 0x6492 <realloc+0x82>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    6464:	45 30       	cpi	r20, 0x05	; 5
    6466:	51 05       	cpc	r21, r1
    6468:	08 f4       	brcc	.+2      	; 0x646c <realloc+0x5c>
    646a:	a3 c0       	rjmp	.+326    	; 0x65b2 <realloc+0x1a2>
    646c:	ca 01       	movw	r24, r20
    646e:	04 97       	sbiw	r24, 0x04	; 4
    6470:	86 17       	cp	r24, r22
    6472:	97 07       	cpc	r25, r23
    6474:	08 f4       	brcc	.+2      	; 0x6478 <realloc+0x68>
    6476:	9d c0       	rjmp	.+314    	; 0x65b2 <realloc+0x1a2>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
    6478:	42 50       	subi	r20, 0x02	; 2
    647a:	50 40       	sbci	r21, 0x00	; 0
    647c:	46 1b       	sub	r20, r22
    647e:	57 0b       	sbc	r21, r23
    6480:	f4 01       	movw	r30, r8
    6482:	41 93       	st	Z+, r20
    6484:	51 93       	st	Z+, r21
		fp1->sz = len;
    6486:	6d 93       	st	X+, r22
    6488:	7c 93       	st	X, r23
		free(&(fp2->nx));
    648a:	cf 01       	movw	r24, r30
    648c:	0e 94 41 29 	call	0x5282	; 0x5282 <free>
    6490:	90 c0       	rjmp	.+288    	; 0x65b2 <realloc+0x1a2>

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
    6492:	5b 01       	movw	r10, r22
    6494:	a4 1a       	sub	r10, r20
    6496:	b5 0a       	sbc	r11, r21
	cp = (char *)ptr + fp1->sz;
    6498:	38 01       	movw	r6, r16
    649a:	64 0e       	add	r6, r20
    649c:	75 1e       	adc	r7, r21
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
    649e:	a0 91 3d 07 	lds	r26, 0x073D
    64a2:	b0 91 3e 07 	lds	r27, 0x073E
    64a6:	cc 24       	eor	r12, r12
    64a8:	dd 24       	eor	r13, r13
    64aa:	e0 e0       	ldi	r30, 0x00	; 0
    64ac:	f0 e0       	ldi	r31, 0x00	; 0
    64ae:	47 c0       	rjmp	.+142    	; 0x653e <realloc+0x12e>
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
    64b0:	a6 15       	cp	r26, r6
    64b2:	b7 05       	cpc	r27, r7
    64b4:	a9 f5       	brne	.+106    	; 0x6520 <realloc+0x110>
    64b6:	cd 91       	ld	r28, X+
    64b8:	dc 91       	ld	r29, X
    64ba:	11 97       	sbiw	r26, 0x01	; 1
    64bc:	ce 01       	movw	r24, r28
    64be:	02 96       	adiw	r24, 0x02	; 2
    64c0:	8a 15       	cp	r24, r10
    64c2:	9b 05       	cpc	r25, r11
    64c4:	68 f1       	brcs	.+90     	; 0x6520 <realloc+0x110>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
    64c6:	ce 01       	movw	r24, r28
    64c8:	8a 19       	sub	r24, r10
    64ca:	9b 09       	sbc	r25, r11
    64cc:	02 96       	adiw	r24, 0x02	; 2
    64ce:	12 96       	adiw	r26, 0x02	; 2
    64d0:	2c 91       	ld	r18, X
    64d2:	12 97       	sbiw	r26, 0x02	; 2
    64d4:	13 96       	adiw	r26, 0x03	; 3
    64d6:	3c 91       	ld	r19, X
    64d8:	05 97       	sbiw	r24, 0x05	; 5
    64da:	58 f0       	brcs	.+22     	; 0x64f2 <realloc+0xe2>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
    64dc:	f4 01       	movw	r30, r8
				fp2->nx = fp3->nx;
    64de:	22 83       	std	Z+2, r18	; 0x02
    64e0:	33 83       	std	Z+3, r19	; 0x03
				fp2->sz = fp3->sz - incr;
    64e2:	ca 19       	sub	r28, r10
    64e4:	db 09       	sbc	r29, r11
    64e6:	d1 83       	std	Z+1, r29	; 0x01
    64e8:	c0 83       	st	Z, r28
				fp1->sz = len;
    64ea:	d7 01       	movw	r26, r14
    64ec:	6d 93       	st	X+, r22
    64ee:	7c 93       	st	X, r23
    64f0:	09 c0       	rjmp	.+18     	; 0x6504 <realloc+0xf4>
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
    64f2:	4e 5f       	subi	r20, 0xFE	; 254
    64f4:	5f 4f       	sbci	r21, 0xFF	; 255
    64f6:	4c 0f       	add	r20, r28
    64f8:	5d 1f       	adc	r21, r29
    64fa:	f7 01       	movw	r30, r14
    64fc:	51 83       	std	Z+1, r21	; 0x01
    64fe:	40 83       	st	Z, r20
				fp2 = fp3->nx;
    6500:	c9 01       	movw	r24, r18
    6502:	fc 01       	movw	r30, r24
			}
			if (ofp3)
    6504:	c1 14       	cp	r12, r1
    6506:	d1 04       	cpc	r13, r1
    6508:	31 f0       	breq	.+12     	; 0x6516 <realloc+0x106>
				ofp3->nx = fp2;
    650a:	d6 01       	movw	r26, r12
    650c:	13 96       	adiw	r26, 0x03	; 3
    650e:	fc 93       	st	X, r31
    6510:	ee 93       	st	-X, r30
    6512:	12 97       	sbiw	r26, 0x02	; 2
    6514:	4e c0       	rjmp	.+156    	; 0x65b2 <realloc+0x1a2>
			else
				__flp = fp2;
    6516:	f0 93 3e 07 	sts	0x073E, r31
    651a:	e0 93 3d 07 	sts	0x073D, r30
    651e:	49 c0       	rjmp	.+146    	; 0x65b2 <realloc+0x1a2>
    6520:	8d 91       	ld	r24, X+
    6522:	9c 91       	ld	r25, X
    6524:	11 97       	sbiw	r26, 0x01	; 1
    6526:	e8 17       	cp	r30, r24
    6528:	f9 07       	cpc	r31, r25
    652a:	08 f4       	brcc	.+2      	; 0x652e <realloc+0x11e>
    652c:	fc 01       	movw	r30, r24
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
    652e:	6d 01       	movw	r12, r26
    6530:	12 96       	adiw	r26, 0x02	; 2
    6532:	8c 91       	ld	r24, X
    6534:	12 97       	sbiw	r26, 0x02	; 2
    6536:	13 96       	adiw	r26, 0x03	; 3
    6538:	9c 91       	ld	r25, X
    653a:	9c 01       	movw	r18, r24
    653c:	d9 01       	movw	r26, r18
	 */
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
    653e:	10 97       	sbiw	r26, 0x00	; 0
    6540:	09 f0       	breq	.+2      	; 0x6544 <realloc+0x134>
    6542:	b6 cf       	rjmp	.-148    	; 0x64b0 <realloc+0xa0>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
    6544:	80 91 3b 07 	lds	r24, 0x073B
    6548:	90 91 3c 07 	lds	r25, 0x073C
    654c:	86 15       	cp	r24, r6
    654e:	97 05       	cpc	r25, r7
    6550:	e9 f4       	brne	.+58     	; 0x658c <realloc+0x17c>
    6552:	e6 17       	cp	r30, r22
    6554:	f7 07       	cpc	r31, r23
    6556:	d0 f4       	brcc	.+52     	; 0x658c <realloc+0x17c>
		cp1 = __malloc_heap_end;
    6558:	20 91 9e 02 	lds	r18, 0x029E
    655c:	30 91 9f 02 	lds	r19, 0x029F
		cp = (char *)ptr + len;
		if (cp1 == 0)
    6560:	21 15       	cp	r18, r1
    6562:	31 05       	cpc	r19, r1
    6564:	41 f4       	brne	.+16     	; 0x6576 <realloc+0x166>
			cp1 = STACK_POINTER() - __malloc_margin;
    6566:	2d b7       	in	r18, 0x3d	; 61
    6568:	3e b7       	in	r19, 0x3e	; 62
    656a:	80 91 9a 02 	lds	r24, 0x029A
    656e:	90 91 9b 02 	lds	r25, 0x029B
    6572:	28 1b       	sub	r18, r24
    6574:	39 0b       	sbc	r19, r25
		if (cp < cp1) {
    6576:	82 16       	cp	r8, r18
    6578:	93 06       	cpc	r9, r19
    657a:	c8 f4       	brcc	.+50     	; 0x65ae <realloc+0x19e>
			__brkval = cp;
    657c:	90 92 3c 07 	sts	0x073C, r9
    6580:	80 92 3b 07 	sts	0x073B, r8
			fp1->sz = len;
    6584:	f7 01       	movw	r30, r14
    6586:	71 83       	std	Z+1, r23	; 0x01
    6588:	60 83       	st	Z, r22
    658a:	13 c0       	rjmp	.+38     	; 0x65b2 <realloc+0x1a2>

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
    658c:	cb 01       	movw	r24, r22
    658e:	0e 94 a4 28 	call	0x5148	; 0x5148 <malloc>
    6592:	ec 01       	movw	r28, r24
    6594:	00 97       	sbiw	r24, 0x00	; 0
    6596:	59 f0       	breq	.+22     	; 0x65ae <realloc+0x19e>
		return 0;
	memcpy(memp, ptr, fp1->sz);
    6598:	d7 01       	movw	r26, r14
    659a:	4d 91       	ld	r20, X+
    659c:	5c 91       	ld	r21, X
    659e:	b8 01       	movw	r22, r16
    65a0:	0e 94 8b 33 	call	0x6716	; 0x6716 <memcpy>
	free(ptr);
    65a4:	c8 01       	movw	r24, r16
    65a6:	0e 94 41 29 	call	0x5282	; 0x5282 <free>
    65aa:	8e 01       	movw	r16, r28
    65ac:	02 c0       	rjmp	.+4      	; 0x65b2 <realloc+0x1a2>
	return memp;
    65ae:	00 e0       	ldi	r16, 0x00	; 0
    65b0:	10 e0       	ldi	r17, 0x00	; 0
}
    65b2:	c8 01       	movw	r24, r16
    65b4:	df 91       	pop	r29
    65b6:	cf 91       	pop	r28
    65b8:	1f 91       	pop	r17
    65ba:	0f 91       	pop	r16
    65bc:	ff 90       	pop	r15
    65be:	ef 90       	pop	r14
    65c0:	df 90       	pop	r13
    65c2:	cf 90       	pop	r12
    65c4:	bf 90       	pop	r11
    65c6:	af 90       	pop	r10
    65c8:	9f 90       	pop	r9
    65ca:	8f 90       	pop	r8
    65cc:	7f 90       	pop	r7
    65ce:	6f 90       	pop	r6
    65d0:	08 95       	ret

000065d2 <__mulsi3>:
    65d2:	62 9f       	mul	r22, r18
    65d4:	d0 01       	movw	r26, r0
    65d6:	73 9f       	mul	r23, r19
    65d8:	f0 01       	movw	r30, r0
    65da:	82 9f       	mul	r24, r18
    65dc:	e0 0d       	add	r30, r0
    65de:	f1 1d       	adc	r31, r1
    65e0:	64 9f       	mul	r22, r20
    65e2:	e0 0d       	add	r30, r0
    65e4:	f1 1d       	adc	r31, r1
    65e6:	92 9f       	mul	r25, r18
    65e8:	f0 0d       	add	r31, r0
    65ea:	83 9f       	mul	r24, r19
    65ec:	f0 0d       	add	r31, r0
    65ee:	74 9f       	mul	r23, r20
    65f0:	f0 0d       	add	r31, r0
    65f2:	65 9f       	mul	r22, r21
    65f4:	f0 0d       	add	r31, r0
    65f6:	99 27       	eor	r25, r25
    65f8:	72 9f       	mul	r23, r18
    65fa:	b0 0d       	add	r27, r0
    65fc:	e1 1d       	adc	r30, r1
    65fe:	f9 1f       	adc	r31, r25
    6600:	63 9f       	mul	r22, r19
    6602:	b0 0d       	add	r27, r0
    6604:	e1 1d       	adc	r30, r1
    6606:	f9 1f       	adc	r31, r25
    6608:	bd 01       	movw	r22, r26
    660a:	cf 01       	movw	r24, r30
    660c:	11 24       	eor	r1, r1
    660e:	08 95       	ret

00006610 <__udivmodhi4>:
    6610:	aa 1b       	sub	r26, r26
    6612:	bb 1b       	sub	r27, r27
    6614:	51 e1       	ldi	r21, 0x11	; 17
    6616:	07 c0       	rjmp	.+14     	; 0x6626 <__udivmodhi4_ep>

00006618 <__udivmodhi4_loop>:
    6618:	aa 1f       	adc	r26, r26
    661a:	bb 1f       	adc	r27, r27
    661c:	a6 17       	cp	r26, r22
    661e:	b7 07       	cpc	r27, r23
    6620:	10 f0       	brcs	.+4      	; 0x6626 <__udivmodhi4_ep>
    6622:	a6 1b       	sub	r26, r22
    6624:	b7 0b       	sbc	r27, r23

00006626 <__udivmodhi4_ep>:
    6626:	88 1f       	adc	r24, r24
    6628:	99 1f       	adc	r25, r25
    662a:	5a 95       	dec	r21
    662c:	a9 f7       	brne	.-22     	; 0x6618 <__udivmodhi4_loop>
    662e:	80 95       	com	r24
    6630:	90 95       	com	r25
    6632:	bc 01       	movw	r22, r24
    6634:	cd 01       	movw	r24, r26
    6636:	08 95       	ret

00006638 <__udivmodsi4>:
    6638:	a1 e2       	ldi	r26, 0x21	; 33
    663a:	1a 2e       	mov	r1, r26
    663c:	aa 1b       	sub	r26, r26
    663e:	bb 1b       	sub	r27, r27
    6640:	fd 01       	movw	r30, r26
    6642:	0d c0       	rjmp	.+26     	; 0x665e <__udivmodsi4_ep>

00006644 <__udivmodsi4_loop>:
    6644:	aa 1f       	adc	r26, r26
    6646:	bb 1f       	adc	r27, r27
    6648:	ee 1f       	adc	r30, r30
    664a:	ff 1f       	adc	r31, r31
    664c:	a2 17       	cp	r26, r18
    664e:	b3 07       	cpc	r27, r19
    6650:	e4 07       	cpc	r30, r20
    6652:	f5 07       	cpc	r31, r21
    6654:	20 f0       	brcs	.+8      	; 0x665e <__udivmodsi4_ep>
    6656:	a2 1b       	sub	r26, r18
    6658:	b3 0b       	sbc	r27, r19
    665a:	e4 0b       	sbc	r30, r20
    665c:	f5 0b       	sbc	r31, r21

0000665e <__udivmodsi4_ep>:
    665e:	66 1f       	adc	r22, r22
    6660:	77 1f       	adc	r23, r23
    6662:	88 1f       	adc	r24, r24
    6664:	99 1f       	adc	r25, r25
    6666:	1a 94       	dec	r1
    6668:	69 f7       	brne	.-38     	; 0x6644 <__udivmodsi4_loop>
    666a:	60 95       	com	r22
    666c:	70 95       	com	r23
    666e:	80 95       	com	r24
    6670:	90 95       	com	r25
    6672:	9b 01       	movw	r18, r22
    6674:	ac 01       	movw	r20, r24
    6676:	bd 01       	movw	r22, r26
    6678:	cf 01       	movw	r24, r30
    667a:	08 95       	ret

0000667c <__divmodsi4>:
    667c:	97 fb       	bst	r25, 7
    667e:	09 2e       	mov	r0, r25
    6680:	05 26       	eor	r0, r21
    6682:	0e d0       	rcall	.+28     	; 0x66a0 <__divmodsi4_neg1>
    6684:	57 fd       	sbrc	r21, 7
    6686:	04 d0       	rcall	.+8      	; 0x6690 <__divmodsi4_neg2>
    6688:	d7 df       	rcall	.-82     	; 0x6638 <__udivmodsi4>
    668a:	0a d0       	rcall	.+20     	; 0x66a0 <__divmodsi4_neg1>
    668c:	00 1c       	adc	r0, r0
    668e:	38 f4       	brcc	.+14     	; 0x669e <__divmodsi4_exit>

00006690 <__divmodsi4_neg2>:
    6690:	50 95       	com	r21
    6692:	40 95       	com	r20
    6694:	30 95       	com	r19
    6696:	21 95       	neg	r18
    6698:	3f 4f       	sbci	r19, 0xFF	; 255
    669a:	4f 4f       	sbci	r20, 0xFF	; 255
    669c:	5f 4f       	sbci	r21, 0xFF	; 255

0000669e <__divmodsi4_exit>:
    669e:	08 95       	ret

000066a0 <__divmodsi4_neg1>:
    66a0:	f6 f7       	brtc	.-4      	; 0x669e <__divmodsi4_exit>
    66a2:	90 95       	com	r25
    66a4:	80 95       	com	r24
    66a6:	70 95       	com	r23
    66a8:	61 95       	neg	r22
    66aa:	7f 4f       	sbci	r23, 0xFF	; 255
    66ac:	8f 4f       	sbci	r24, 0xFF	; 255
    66ae:	9f 4f       	sbci	r25, 0xFF	; 255
    66b0:	08 95       	ret

000066b2 <__tablejump2__>:
    66b2:	ee 0f       	add	r30, r30
    66b4:	ff 1f       	adc	r31, r31

000066b6 <__tablejump__>:
    66b6:	05 90       	lpm	r0, Z+
    66b8:	f4 91       	lpm	r31, Z+
    66ba:	e0 2d       	mov	r30, r0
    66bc:	09 94       	ijmp

000066be <atol>:
    66be:	1f 93       	push	r17
    66c0:	fc 01       	movw	r30, r24
    66c2:	99 27       	eor	r25, r25
    66c4:	88 27       	eor	r24, r24
    66c6:	bc 01       	movw	r22, r24
    66c8:	e8 94       	clt
    66ca:	11 91       	ld	r17, Z+
    66cc:	10 32       	cpi	r17, 0x20	; 32
    66ce:	e9 f3       	breq	.-6      	; 0x66ca <atol+0xc>
    66d0:	19 30       	cpi	r17, 0x09	; 9
    66d2:	10 f0       	brcs	.+4      	; 0x66d8 <atol+0x1a>
    66d4:	1e 30       	cpi	r17, 0x0E	; 14
    66d6:	c8 f3       	brcs	.-14     	; 0x66ca <atol+0xc>
    66d8:	1b 32       	cpi	r17, 0x2B	; 43
    66da:	51 f0       	breq	.+20     	; 0x66f0 <atol+0x32>
    66dc:	1d 32       	cpi	r17, 0x2D	; 45
    66de:	49 f4       	brne	.+18     	; 0x66f2 <atol+0x34>
    66e0:	68 94       	set
    66e2:	06 c0       	rjmp	.+12     	; 0x66f0 <atol+0x32>
    66e4:	0e 94 f3 33 	call	0x67e6	; 0x67e6 <__mulsi_const_10>
    66e8:	61 0f       	add	r22, r17
    66ea:	71 1d       	adc	r23, r1
    66ec:	81 1d       	adc	r24, r1
    66ee:	91 1d       	adc	r25, r1
    66f0:	11 91       	ld	r17, Z+
    66f2:	10 53       	subi	r17, 0x30	; 48
    66f4:	1a 30       	cpi	r17, 0x0A	; 10
    66f6:	b0 f3       	brcs	.-20     	; 0x66e4 <atol+0x26>
    66f8:	3e f4       	brtc	.+14     	; 0x6708 <atol+0x4a>
    66fa:	90 95       	com	r25
    66fc:	80 95       	com	r24
    66fe:	70 95       	com	r23
    6700:	61 95       	neg	r22
    6702:	7f 4f       	sbci	r23, 0xFF	; 255
    6704:	8f 4f       	sbci	r24, 0xFF	; 255
    6706:	9f 4f       	sbci	r25, 0xFF	; 255
    6708:	1f 91       	pop	r17
    670a:	08 95       	ret

0000670c <strtok>:
    670c:	48 e3       	ldi	r20, 0x38	; 56
    670e:	53 e0       	ldi	r21, 0x03	; 3
    6710:	0e 94 c1 33 	call	0x6782	; 0x6782 <strtok_r>
    6714:	08 95       	ret

00006716 <memcpy>:
    6716:	fb 01       	movw	r30, r22
    6718:	dc 01       	movw	r26, r24
    671a:	02 c0       	rjmp	.+4      	; 0x6720 <memcpy+0xa>
    671c:	01 90       	ld	r0, Z+
    671e:	0d 92       	st	X+, r0
    6720:	41 50       	subi	r20, 0x01	; 1
    6722:	50 40       	sbci	r21, 0x00	; 0
    6724:	d8 f7       	brcc	.-10     	; 0x671c <memcpy+0x6>
    6726:	08 95       	ret

00006728 <strcmp>:
    6728:	fb 01       	movw	r30, r22
    672a:	dc 01       	movw	r26, r24
    672c:	8d 91       	ld	r24, X+
    672e:	01 90       	ld	r0, Z+
    6730:	80 19       	sub	r24, r0
    6732:	01 10       	cpse	r0, r1
    6734:	d9 f3       	breq	.-10     	; 0x672c <strcmp+0x4>
    6736:	99 0b       	sbc	r25, r25
    6738:	08 95       	ret

0000673a <strcpy>:
    673a:	fb 01       	movw	r30, r22
    673c:	dc 01       	movw	r26, r24
    673e:	01 90       	ld	r0, Z+
    6740:	0d 92       	st	X+, r0
    6742:	00 20       	and	r0, r0
    6744:	e1 f7       	brne	.-8      	; 0x673e <strcpy+0x4>
    6746:	08 95       	ret

00006748 <strncmp>:
    6748:	fb 01       	movw	r30, r22
    674a:	dc 01       	movw	r26, r24
    674c:	41 50       	subi	r20, 0x01	; 1
    674e:	50 40       	sbci	r21, 0x00	; 0
    6750:	30 f0       	brcs	.+12     	; 0x675e <strncmp+0x16>
    6752:	8d 91       	ld	r24, X+
    6754:	01 90       	ld	r0, Z+
    6756:	80 19       	sub	r24, r0
    6758:	19 f4       	brne	.+6      	; 0x6760 <strncmp+0x18>
    675a:	00 20       	and	r0, r0
    675c:	b9 f7       	brne	.-18     	; 0x674c <strncmp+0x4>
    675e:	88 1b       	sub	r24, r24
    6760:	99 0b       	sbc	r25, r25
    6762:	08 95       	ret

00006764 <strncpy>:
    6764:	fb 01       	movw	r30, r22
    6766:	dc 01       	movw	r26, r24
    6768:	41 50       	subi	r20, 0x01	; 1
    676a:	50 40       	sbci	r21, 0x00	; 0
    676c:	48 f0       	brcs	.+18     	; 0x6780 <strncpy+0x1c>
    676e:	01 90       	ld	r0, Z+
    6770:	0d 92       	st	X+, r0
    6772:	00 20       	and	r0, r0
    6774:	c9 f7       	brne	.-14     	; 0x6768 <strncpy+0x4>
    6776:	01 c0       	rjmp	.+2      	; 0x677a <strncpy+0x16>
    6778:	1d 92       	st	X+, r1
    677a:	41 50       	subi	r20, 0x01	; 1
    677c:	50 40       	sbci	r21, 0x00	; 0
    677e:	e0 f7       	brcc	.-8      	; 0x6778 <strncpy+0x14>
    6780:	08 95       	ret

00006782 <strtok_r>:
    6782:	00 97       	sbiw	r24, 0x00	; 0
    6784:	31 f4       	brne	.+12     	; 0x6792 <strtok_r+0x10>
    6786:	da 01       	movw	r26, r20
    6788:	8d 91       	ld	r24, X+
    678a:	9c 91       	ld	r25, X
    678c:	00 97       	sbiw	r24, 0x00	; 0
    678e:	09 f4       	brne	.+2      	; 0x6792 <strtok_r+0x10>
    6790:	0e c0       	rjmp	.+28     	; 0x67ae <strtok_r+0x2c>
    6792:	dc 01       	movw	r26, r24
    6794:	fb 01       	movw	r30, r22
    6796:	3d 91       	ld	r19, X+
    6798:	21 91       	ld	r18, Z+
    679a:	22 23       	and	r18, r18
    679c:	19 f0       	breq	.+6      	; 0x67a4 <strtok_r+0x22>
    679e:	32 17       	cp	r19, r18
    67a0:	c9 f3       	breq	.-14     	; 0x6794 <strtok_r+0x12>
    67a2:	fa cf       	rjmp	.-12     	; 0x6798 <strtok_r+0x16>
    67a4:	33 23       	and	r19, r19
    67a6:	31 f4       	brne	.+12     	; 0x67b4 <strtok_r+0x32>
    67a8:	da 01       	movw	r26, r20
    67aa:	1d 92       	st	X+, r1
    67ac:	1c 92       	st	X, r1
    67ae:	88 27       	eor	r24, r24
    67b0:	99 27       	eor	r25, r25
    67b2:	08 95       	ret
    67b4:	11 97       	sbiw	r26, 0x01	; 1
    67b6:	af 93       	push	r26
    67b8:	bf 93       	push	r27
    67ba:	fb 01       	movw	r30, r22
    67bc:	3d 91       	ld	r19, X+
    67be:	21 91       	ld	r18, Z+
    67c0:	32 17       	cp	r19, r18
    67c2:	71 f4       	brne	.+28     	; 0x67e0 <strtok_r+0x5e>
    67c4:	33 23       	and	r19, r19
    67c6:	21 f4       	brne	.+8      	; 0x67d0 <strtok_r+0x4e>
    67c8:	88 27       	eor	r24, r24
    67ca:	99 27       	eor	r25, r25
    67cc:	11 97       	sbiw	r26, 0x01	; 1
    67ce:	02 c0       	rjmp	.+4      	; 0x67d4 <strtok_r+0x52>
    67d0:	1e 92       	st	-X, r1
    67d2:	11 96       	adiw	r26, 0x01	; 1
    67d4:	fa 01       	movw	r30, r20
    67d6:	a1 93       	st	Z+, r26
    67d8:	b0 83       	st	Z, r27
    67da:	9f 91       	pop	r25
    67dc:	8f 91       	pop	r24
    67de:	08 95       	ret
    67e0:	22 23       	and	r18, r18
    67e2:	69 f7       	brne	.-38     	; 0x67be <strtok_r+0x3c>
    67e4:	ea cf       	rjmp	.-44     	; 0x67ba <strtok_r+0x38>

000067e6 <__mulsi_const_10>:
    67e6:	59 2f       	mov	r21, r25
    67e8:	48 2f       	mov	r20, r24
    67ea:	37 2f       	mov	r19, r23
    67ec:	26 2f       	mov	r18, r22
    67ee:	66 0f       	add	r22, r22
    67f0:	77 1f       	adc	r23, r23
    67f2:	88 1f       	adc	r24, r24
    67f4:	99 1f       	adc	r25, r25
    67f6:	66 0f       	add	r22, r22
    67f8:	77 1f       	adc	r23, r23
    67fa:	88 1f       	adc	r24, r24
    67fc:	99 1f       	adc	r25, r25
    67fe:	62 0f       	add	r22, r18
    6800:	73 1f       	adc	r23, r19
    6802:	84 1f       	adc	r24, r20
    6804:	95 1f       	adc	r25, r21
    6806:	66 0f       	add	r22, r22
    6808:	77 1f       	adc	r23, r23
    680a:	88 1f       	adc	r24, r24
    680c:	99 1f       	adc	r25, r25
    680e:	08 95       	ret

00006810 <_exit>:
    6810:	f8 94       	cli

00006812 <__stop_program>:
    6812:	ff cf       	rjmp	.-2      	; 0x6812 <__stop_program>
