
PicavetFirmWare.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016c  00800100  000070f8  0000718c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000070f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000454  0080026c  0080026c  000072f8  2**0
                  ALLOC
  3 .debug_aranges 00000fa8  00000000  00000000  000072f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00002bdb  00000000  00000000  000082a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00016322  00000000  00000000  0000ae7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003cd3  00000000  00000000  0002119d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000bf52  00000000  00000000  00024e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001bd0  00000000  00000000  00030dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000059bb  00000000  00000000  00032994  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000d324  00000000  00000000  0003834f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001018  00000000  00000000  00045673  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}


void SPIClass::end() {
  SPCR &= ~_BV(SPE);
}
       0:	0c 94 a0 03 	jmp	0x740	; 0x740 <__ctors_end>
//
//*****************************************************************************
void __error__(CHAR *pcFilename, UINT32 ulLine)
{
	//TODO full up function
}
       4:	0c 94 89 35 	jmp	0x6b12	; 0x6b12 <__vector_1>
  CC3KPrinter->print(F("Free RAM: "));
  CC3KPrinter->print(getFreeRam());
  CC3KPrinter->println(F(" bytes"));
}

void uart_putchar(char c) {
       8:	0c 94 b6 35 	jmp	0x6b6c	; 0x6b6c <__vector_2>

	// Send the command over SPI on data channel
	SpiWrite(pucBuff, ucArgsLength + ucDataLength + SIMPLE_LINK_HCI_DATA_CMND_HEADER_SIZE);

	return;
}
       c:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>

	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_NETAPP_ARP_FLUSH, &scRet);

	return(scRet);
}
      10:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_EVNT_GETMSSVALUE, &ret);

	return ret;
}
      14:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
//!
//!  @sa      wlan_smart_config_start , wlan_smart_config_stop
//
//*****************************************************************************

INT32 wlan_smart_config_set_prefix(CHAR* cNewPrefix)
      18:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
  g_SPIspeed = SPIspeed;

  cc3000Bitset.clear();

  CC3KPrinter = cc3kPrinter;
}
      1c:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
*/
/**************************************************************************/

Adafruit_CC3000_ClientRef::Adafruit_CC3000_ClientRef(Adafruit_CC3000_Client* client)
  : _client(client) 
{ }
      20:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
      }
#endif
  }
  
  DEBUGPRINT_F("\n\r\tCC3000: SpiWriteDataSynchronous End\n\r");
}
      24:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      28:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
{
    _address[0] = first_octet;
    _address[1] = second_octet;
    _address[2] = third_octet;
    _address[3] = fourth_octet;
}
      2c:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
      30:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      34:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
      38:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
      3c:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
      40:	0c 94 f2 35 	jmp	0x6be4	; 0x6be4 <__vector_16>
      44:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
      48:	0c 94 1e 31 	jmp	0x623c	; 0x623c <__vector_18>
      4c:	0c 94 6c 31 	jmp	0x62d8	; 0x62d8 <__vector_19>
      50:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
      54:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
      58:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
      5c:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
      60:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
      64:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>

00000068 <_ZZN22Adafruit_CC3000_Client12fastrprintlnEPcE3__c>:
      68:	0d 0a 00                                            ...

0000006b <_ZZN22Adafruit_CC3000_Client12fastrprintlnEPK19__FlashStringHelperE3__c>:
      6b:	0d 0a 00                                            ...

0000006e <_ZZN15Adafruit_CC30008printHexEPKhmE3__c_0>:
      6e:	30 00                                               0.

00000070 <_ZZN15Adafruit_CC30008printHexEPKhmE3__c>:
      70:	30 78 00                                            0x.

00000073 <HTTP_RESPONCE_HEADER_OK>:
      73:	0d 04 1e 04 37 04                                   ....7.

00000079 <HTTP_TEST_FORM>:
      79:	4b 04 5c 04 64 04 73 04 7a 04 a9 04 d7 04 00 05     K.\.d.s.z.......
      89:	08 05 0d 05 14 05 44 05 71 05 9b 05 a3 05 a8 05     ......D.q.......
      99:	af 05 dc 05 08 06 2f 06 37 06 3c 06 43 06 72 06     ....../.7.<.C.r.
      a9:	9f 06 c8 06                                         ....

000000ad <_ZZ24displayConnectionDetailsE3__c_4>:
      ad:	0a 44 4e 53 73 65 72 76 3a 20 00                    .DNSserv: .

000000b8 <_ZZ24displayConnectionDetailsE3__c_3>:
      b8:	0a 44 48 43 50 73 72 76 3a 20 00                    .DHCPsrv: .

000000c3 <_ZZ24displayConnectionDetailsE3__c_2>:
      c3:	0a 47 61 74 65 77 61 79 3a 20 00                    .Gateway: .

000000ce <_ZZ24displayConnectionDetailsE3__c_1>:
      ce:	0a 4e 65 74 6d 61 73 6b 3a 20 00                    .Netmask: .

000000d9 <_ZZ24displayConnectionDetailsE3__c_0>:
      d9:	0a 49 50 20 41 64 64 72 3a 20 00                    .IP Addr: .

000000e4 <_ZZ24displayConnectionDetailsE3__c>:
      e4:	55 6e 61 62 6c 65 20 74 6f 20 72 65 74 72 69 65     Unable to retrie
      f4:	76 65 20 74 68 65 20 49 50 20 41 64 64 72 65 73     ve the IP Addres
     104:	73 21 0d 0a 00                                      s!...

00000109 <_ZL13CMD_MOVE_LEFT>:
     109:	6d 6f 76 65 6c 65 66 74 00                          moveleft.

00000112 <_ZL14CMD_MOVE_RIGHT>:
     112:	6d 6f 76 65 72 69 67 68 74 00                       moveright.

0000011c <_ZL11CMD_MOVE_UP>:
     11c:	6d 6f 76 65 75 70 00                                moveup.

00000123 <_ZL13CMD_MOVE_DOWN>:
     123:	6d 6f 76 65 64 6f 77 6e 00                          movedown.

0000012c <_ZZ14runHttpCommandE3__c_7>:
     12c:	21 21 21 20 4d 4f 56 45 20 44 4f 57 4e 20 21 21     !!! MOVE DOWN !!
     13c:	21 21 00                                            !!.

0000013f <_ZZ14runHttpCommandE3__c_6>:
     13f:	21 21 21 20 4d 4f 56 45 20 55 50 20 21 21 21 21     !!! MOVE UP !!!!
	...

00000150 <_ZZ14runHttpCommandE3__c_5>:
     150:	21 21 21 20 4d 4f 56 45 20 52 49 47 48 54 20 21     !!! MOVE RIGHT !
     160:	21 21 21 00                                         !!!.

00000164 <_ZZ14runHttpCommandE3__c_4>:
     164:	21 21 21 20 4d 4f 56 45 20 4c 45 46 54 20 21 21     !!! MOVE LEFT !!
     174:	21 21 00                                            !!.

00000177 <_ZZ14runHttpCommandE3__c_3>:
     177:	5d 00                                               ].

00000179 <_ZZ14runHttpCommandE3__c_2>:
     179:	5d 5b 00                                            ][.

0000017c <_ZZ14runHttpCommandE3__c_1>:
     17c:	5d 20 76 61 6c 75 65 3d 5b 00                       ] value=[.

00000186 <_ZZ14runHttpCommandE3__c_0>:
     186:	63 6d 64 3d 5b 00                                   cmd=[.

0000018c <_ZZ14runHttpCommandE3__c>:
     18c:	72 75 6e 43 6f 6d 6d 61 6e 64 00                    runCommand.

00000197 <_ZZ4loopE3__c_8>:
     197:	43 6c 69 65 6e 74 20 64 69 73 63 6f 6e 6e 65 63     Client disconnec
     1a7:	74 65 64 00                                         ted.

000001ab <_ZZ4loopE3__c_7>:
	...

000001ac <_ZZ4loopE3__c_6>:
     1ac:	48 54 54 50 2f 31 2e 31 20 34 30 35 20 4d 65 74     HTTP/1.1 405 Met
     1bc:	68 6f 64 20 4e 6f 74 20 41 6c 6c 6f 77 65 64 00     hod Not Allowed.

000001cc <_ZZ4loopE3__c_5>:
     1cc:	3c 2f 68 74 6d 6c 3e 00                             </html>.

000001d4 <_ZZ4loopE3__c_4>:
     1d4:	3c 2f 68 32 3e 20 00                                </h2> .

000001db <_ZZ4loopE3__c_3>:
     1db:	3c 68 72 3e 3c 68 32 3e 20 52 45 53 55 4c 54 20     <hr><h2> RESULT 
	...

000001ec <_ZZ4loopE3__c_2>:
     1ec:	50 61 74 68 3a 20 00                                Path: .

000001f3 <_ZZ4loopE3__c_1>:
     1f3:	41 63 74 69 6f 6e 3a 20 00                          Action: .

000001fc <_ZZ4loopE3__c_0>:
     1fc:	50 72 6f 63 65 73 73 69 6e 67 20 72 65 71 75 65     Processing reque
     20c:	73 74 00                                            st.

0000020f <_ZZ4loopE3__c>:
     20f:	43 6c 69 65 6e 74 20 63 6f 6e 6e 65 63 74 65 64     Client connected
     21f:	2e 00                                               ..

00000221 <_ZZ5setupE3__c_16>:
     221:	4c 69 73 74 65 6e 69 6e 67 20 66 6f 72 20 63 6f     Listening for co
     231:	6e 6e 65 63 74 69 6f 6e 73 2e 2e 2e 00              nnections....

0000023e <_ZZ5setupE3__c_15>:
     23e:	74 68 65 72 65 20 69 73 6e 27 74 20 61 6e 20 6f     there isn't an o
     24e:	62 76 69 6f 75 73 20 6d 6f 6d 65 6e 74 20 74 6f     bvious moment to
     25e:	20 64 69 73 63 6f 6e 6e 65 63 74 20 77 69 74 68      disconnect with
     26e:	20 61 20 73 65 72 76 65 72 2e 0d 0a 00               a server....

0000027b <_ZZ5setupE3__c_14>:
     27b:	74 69 6d 65 6f 75 74 20 70 65 72 69 6f 64 20 70     timeout period p
     28b:	61 73 73 65 73 2e 20 20 54 68 69 73 20 69 73 20     asses.  This is 
     29b:	6e 6f 72 6d 61 6c 20 62 65 68 61 76 69 6f 75 72     normal behaviour
     2ab:	20 73 69 6e 63 65 00                                 since.

000002b2 <_ZZ5setupE3__c_13>:
     2b2:	41 50 20 6d 61 79 20 72 65 66 75 73 65 20 63 6f     AP may refuse co
     2c2:	6e 6e 65 63 74 69 6f 6e 20 72 65 71 75 65 73 74     nnection request
     2d2:	73 20 66 72 6f 6d 20 74 68 65 20 43 43 33 30 30     s from the CC300
     2e2:	30 20 75 6e 74 69 6c 20 61 00                       0 until a.

000002ec <_ZZ5setupE3__c_12>:
     2ec:	73 69 6e 63 65 20 74 68 65 20 2e 64 69 73 63 6f     since the .disco
     2fc:	6e 6e 65 63 74 28 29 20 66 75 6e 63 74 69 6f 6e     nnect() function
     30c:	20 69 73 20 6e 65 76 65 72 20 63 61 6c 6c 65 64      is never called
     31c:	2c 20 73 6f 20 74 68 65 00                          , so the.

00000325 <_ZZ5setupE3__c_11>:
     325:	0d 0a 4e 4f 54 45 3a 20 54 68 69 73 20 73 6b 65     ..NOTE: This ske
     335:	74 63 68 20 6d 61 79 20 63 61 75 73 65 20 70 72     tch may cause pr
     345:	6f 62 6c 65 6d 73 20 77 69 74 68 20 6f 74 68 65     oblems with othe
     355:	72 20 73 6b 65 74 63 68 65 73 00                    r sketches.

00000360 <_ZZ5setupE3__c_10>:
     360:	52 65 71 75 65 73 74 20 44 48 43 50 00              Request DHCP.

0000036d <_ZZ5setupE3__c_9>:
     36d:	43 6f 6e 6e 65 63 74 65 64 21 00                    Connected!.

00000378 <_ZZ5setupE3__c_8>:
     378:	46 61 69 6c 65 64 21 00                             Failed!.

00000380 <_ZZ5setupE3__c_7>:
     380:	0a 41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 63     .Attempting to c
     390:	6f 6e 6e 65 63 74 20 74 6f 20 00                    onnect to .

0000039b <_ZZ5setupE3__c_6>:
     39b:	43 6f 75 6c 64 6e 27 74 20 62 65 67 69 6e 28 29     Couldn't begin()
     3ab:	21 20 43 68 65 63 6b 20 79 6f 75 72 20 77 69 72     ! Check your wir
     3bb:	69 6e 67 3f 00                                      ing?.

000003c0 <_ZZ5setupE3__c_5>:
     3c0:	0a 49 6e 69 74 69 61 6c 69 7a 69 6e 67 2e 2e 2e     .Initializing...
	...

000003d1 <_ZZ5setupE3__c_4>:
     3d1:	41 43 54 49 4f 4e 3d 00                             ACTION=.

000003d9 <_ZZ5setupE3__c_3>:
     3d9:	41 43 54 49 4f 4e 3d 00                             ACTION=.

000003e1 <_ZZ5setupE3__c_2>:
     3e1:	41 43 54 49 4f 4e 3d 00                             ACTION=.

000003e9 <_ZZ5setupE3__c_1>:
     3e9:	41 43 54 49 4f 4e 3d 00                             ACTION=.

000003f1 <_ZZ5setupE3__c_0>:
     3f1:	41 43 54 49 4f 4e 3d 00                             ACTION=.

000003f9 <_ZZ5setupE3__c>:
     3f9:	50 69 63 61 76 65 74 20 57 69 46 69 20 43 43 33     Picavet WiFi CC3
     409:	30 30 30 00                                         000.

0000040d <_ZL25HTTP_RESPONCE_HEADER_OK_0>:
     40d:	48 54 54 50 2f 31 2e 31 20 32 30 30 20 4f 4b 0a     HTTP/1.1 200 OK.
	...

0000041e <_ZL25HTTP_RESPONCE_HEADER_OK_1>:
     41e:	43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74 65     Content-Type: te
     42e:	78 74 2f 68 74 6d 6c 0a 00                          xt/html..

00000437 <_ZL25HTTP_RESPONCE_HEADER_OK_2>:
     437:	43 6f 6e 6e 65 63 74 69 6f 6e 3a 20 63 6c 6f 73     Connection: clos
     447:	65 0a 0a 00                                         e...

0000044b <_ZL16HTTP_TEST_FORM_0>:
     44b:	3c 21 44 4f 43 54 59 50 45 20 48 54 4d 4c 3e 0a     <!DOCTYPE HTML>.
	...

0000045c <_ZL16HTTP_TEST_FORM_1>:
     45c:	3c 68 74 6d 6c 3e 0a 00                             <html>..

00000464 <_ZL16HTTP_TEST_FORM_2>:
     464:	3c 68 31 3e 54 45 53 54 3c 2f 68 31 3e 0a 00        <h1>TEST</h1>..

00000473 <_ZL16HTTP_TEST_FORM_3>:
     473:	3c 66 6f 72 6d 3e 00                                <form>.

0000047a <_ZL16HTTP_TEST_FORM_4>:
     47a:	3c 69 6e 70 75 74 20 74 79 70 65 3d 74 65 78 74     <input type=text
     48a:	20 6e 61 6d 65 3d 27 63 6d 64 27 20 76 61 6c 75      name='cmd' valu
     49a:	65 3d 27 6d 6f 76 65 6c 65 66 74 27 3e 0a 00        e='moveleft'>..

000004a9 <_ZL16HTTP_TEST_FORM_5>:
     4a9:	3c 69 6e 70 75 74 20 74 79 70 65 3d 74 65 78 74     <input type=text
     4b9:	20 6e 61 6d 65 3d 27 64 65 67 72 65 65 27 20 76      name='degree' v
     4c9:	61 6c 75 65 3d 27 2d 31 36 30 27 3e 0a 00           alue='-160'>..

000004d7 <_ZL16HTTP_TEST_FORM_6>:
     4d7:	3c 69 6e 70 75 74 20 74 79 70 65 3d 27 73 75 62     <input type='sub
     4e7:	6d 69 74 27 20 76 61 6c 75 65 3d 27 4d 6f 76 65     mit' value='Move
     4f7:	20 6c 65 66 74 27 3e 0a 00                           left'>..

00000500 <_ZL16HTTP_TEST_FORM_7>:
     500:	3c 2f 66 6f 72 6d 3e 00                             </form>.

00000508 <_ZL16HTTP_TEST_FORM_8>:
     508:	3c 62 72 3e 00                                      <br>.

0000050d <_ZL16HTTP_TEST_FORM_9>:
     50d:	3c 66 6f 72 6d 3e 00                                <form>.

00000514 <_ZL17HTTP_TEST_FORM_10>:
     514:	3c 69 6e 70 75 74 20 74 79 70 65 3d 74 65 78 74     <input type=text
     524:	20 6e 61 6d 65 3d 27 63 6d 64 27 20 76 61 6c 75      name='cmd' valu
     534:	65 3d 27 6d 6f 76 65 72 69 67 68 74 27 3e 0a 00     e='moveright'>..

00000544 <_ZL17HTTP_TEST_FORM_11>:
     544:	3c 69 6e 70 75 74 20 74 79 70 65 3d 74 65 78 74     <input type=text
     554:	20 6e 61 6d 65 3d 27 64 65 67 72 65 65 27 20 76      name='degree' v
     564:	61 6c 75 65 3d 27 31 32 30 27 3e 0a 00              alue='120'>..

00000571 <_ZL17HTTP_TEST_FORM_12>:
     571:	3c 69 6e 70 75 74 20 74 79 70 65 3d 27 73 75 62     <input type='sub
     581:	6d 69 74 27 20 76 61 6c 75 65 3d 27 4d 6f 76 65     mit' value='Move
     591:	20 72 69 67 68 74 27 3e 0a 00                        right'>..

0000059b <_ZL17HTTP_TEST_FORM_13>:
     59b:	3c 2f 66 6f 72 6d 3e 00                             </form>.

000005a3 <_ZL17HTTP_TEST_FORM_14>:
     5a3:	3c 62 72 3e 00                                      <br>.

000005a8 <_ZL17HTTP_TEST_FORM_15>:
     5a8:	3c 66 6f 72 6d 3e 00                                <form>.

000005af <_ZL17HTTP_TEST_FORM_16>:
     5af:	3c 69 6e 70 75 74 20 74 79 70 65 3d 74 65 78 74     <input type=text
     5bf:	20 6e 61 6d 65 3d 27 63 6d 64 27 20 76 61 6c 75      name='cmd' valu
     5cf:	65 3d 27 6d 6f 76 65 75 70 27 3e 0a 00              e='moveup'>..

000005dc <_ZL17HTTP_TEST_FORM_17>:
     5dc:	3c 69 6e 70 75 74 20 74 79 70 65 3d 74 65 78 74     <input type=text
     5ec:	20 6e 61 6d 65 3d 27 64 65 67 72 65 65 27 20 76      name='degree' v
     5fc:	61 6c 75 65 3d 27 33 30 27 3e 0a 00                 alue='30'>..

00000608 <_ZL17HTTP_TEST_FORM_18>:
     608:	3c 69 6e 70 75 74 20 74 79 70 65 3d 27 73 75 62     <input type='sub
     618:	6d 69 74 27 20 76 61 6c 75 65 3d 27 4d 6f 76 65     mit' value='Move
     628:	20 55 50 27 3e 0a 00                                 UP'>..

0000062f <_ZL17HTTP_TEST_FORM_19>:
     62f:	3c 2f 66 6f 72 6d 3e 00                             </form>.

00000637 <_ZL17HTTP_TEST_FORM_20>:
     637:	3c 62 72 3e 00                                      <br>.

0000063c <_ZL17HTTP_TEST_FORM_21>:
     63c:	3c 66 6f 72 6d 3e 00                                <form>.

00000643 <_ZL17HTTP_TEST_FORM_22>:
     643:	3c 69 6e 70 75 74 20 74 79 70 65 3d 74 65 78 74     <input type=text
     653:	20 6e 61 6d 65 3d 27 63 6d 64 27 20 76 61 6c 75      name='cmd' valu
     663:	65 3d 27 6d 6f 76 65 64 6f 77 6e 27 3e 0a 00        e='movedown'>..

00000672 <_ZL17HTTP_TEST_FORM_23>:
     672:	3c 69 6e 70 75 74 20 74 79 70 65 3d 74 65 78 74     <input type=text
     682:	20 6e 61 6d 65 3d 27 64 65 67 72 65 65 27 20 76      name='degree' v
     692:	61 6c 75 65 3d 27 2d 33 30 27 3e 0a 00              alue='-30'>..

0000069f <_ZL17HTTP_TEST_FORM_24>:
     69f:	3c 69 6e 70 75 74 20 74 79 70 65 3d 27 73 75 62     <input type='sub
     6af:	6d 69 74 27 20 76 61 6c 75 65 3d 27 4d 6f 76 65     mit' value='Move
     6bf:	20 44 4f 57 4e 27 3e 0a 00                           DOWN'>..

000006c8 <_ZL17HTTP_TEST_FORM_25>:
     6c8:	3c 2f 66 6f 72 6d 3e 00                             </form>.

000006d0 <port_to_mode_PGM>:
     6d0:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000006da <port_to_output_PGM>:
     6da:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000006e4 <port_to_input_PGM>:
     6e4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000006ee <digital_pin_to_port_PGM>:
     6ee:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     6fe:	03 03 03 03                                         ....

00000702 <digital_pin_to_bit_mask_PGM>:
     702:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     712:	04 08 10 20                                         ... 

00000716 <digital_pin_to_timer_PGM>:
     716:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     726:	00 00 00 00                                         ....

0000072a <__c.1971>:
     72a:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00000736 <__ctors_start>:
     736:	6b 1d       	adc	r22, r11
     738:	26 27       	eor	r18, r22
     73a:	de 2c       	mov	r13, r14
     73c:	d8 32       	cpi	r29, 0x28	; 40
     73e:	3a 33       	cpi	r19, 0x3A	; 58

00000740 <__ctors_end>:
     740:	11 24       	eor	r1, r1
     742:	1f be       	out	0x3f, r1	; 63
     744:	cf ef       	ldi	r28, 0xFF	; 255
     746:	d8 e0       	ldi	r29, 0x08	; 8
     748:	de bf       	out	0x3e, r29	; 62
     74a:	cd bf       	out	0x3d, r28	; 61

0000074c <__do_copy_data>:
     74c:	12 e0       	ldi	r17, 0x02	; 2
     74e:	a0 e0       	ldi	r26, 0x00	; 0
     750:	b1 e0       	ldi	r27, 0x01	; 1
     752:	e8 ef       	ldi	r30, 0xF8	; 248
     754:	f0 e7       	ldi	r31, 0x70	; 112
     756:	02 c0       	rjmp	.+4      	; 0x75c <.do_copy_data_start>

00000758 <.do_copy_data_loop>:
     758:	05 90       	lpm	r0, Z+
     75a:	0d 92       	st	X+, r0

0000075c <.do_copy_data_start>:
     75c:	ac 36       	cpi	r26, 0x6C	; 108
     75e:	b1 07       	cpc	r27, r17
     760:	d9 f7       	brne	.-10     	; 0x758 <.do_copy_data_loop>

00000762 <__do_clear_bss>:
     762:	16 e0       	ldi	r17, 0x06	; 6
     764:	ac e6       	ldi	r26, 0x6C	; 108
     766:	b2 e0       	ldi	r27, 0x02	; 2
     768:	01 c0       	rjmp	.+2      	; 0x76c <.do_clear_bss_start>

0000076a <.do_clear_bss_loop>:
     76a:	1d 92       	st	X+, r1

0000076c <.do_clear_bss_start>:
     76c:	a0 3c       	cpi	r26, 0xC0	; 192
     76e:	b1 07       	cpc	r27, r17
     770:	e1 f7       	brne	.-8      	; 0x76a <.do_clear_bss_loop>

00000772 <__do_global_ctors>:
     772:	17 e0       	ldi	r17, 0x07	; 7
     774:	c0 e4       	ldi	r28, 0x40	; 64
     776:	d7 e0       	ldi	r29, 0x07	; 7
     778:	04 c0       	rjmp	.+8      	; 0x782 <.do_global_ctors_start>

0000077a <.do_global_ctors_loop>:
     77a:	22 97       	sbiw	r28, 0x02	; 2
     77c:	fe 01       	movw	r30, r28
     77e:	0e 94 34 38 	call	0x7068	; 0x7068 <__tablejump__>

00000782 <.do_global_ctors_start>:
     782:	c6 33       	cpi	r28, 0x36	; 54
     784:	d1 07       	cpc	r29, r17
     786:	c9 f7       	brne	.-14     	; 0x77a <.do_global_ctors_loop>
     788:	0e 94 e3 35 	call	0x6bc6	; 0x6bc6 <main>
     78c:	0c 94 7a 38 	jmp	0x70f4	; 0x70f4 <_exit>

00000790 <__bad_interrupt>:
     790:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000794 <strcmp_P>:
     794:	fb 01       	movw	r30, r22
     796:	dc 01       	movw	r26, r24
     798:	8d 91       	ld	r24, X+
     79a:	05 90       	lpm	r0, Z+
     79c:	80 19       	sub	r24, r0
     79e:	01 10       	cpse	r0, r1
     7a0:	d9 f3       	breq	.-10     	; 0x798 <strcmp_P+0x4>
     7a2:	99 0b       	sbc	r25, r25
     7a4:	08 95       	ret

000007a6 <strcpy_P>:
     7a6:	fb 01       	movw	r30, r22
     7a8:	dc 01       	movw	r26, r24
     7aa:	05 90       	lpm	r0, Z+
     7ac:	0d 92       	st	X+, r0
     7ae:	00 20       	and	r0, r0
     7b0:	e1 f7       	brne	.-8      	; 0x7aa <strcpy_P+0x4>
     7b2:	08 95       	ret

000007b4 <strtok>:
     7b4:	4c e6       	ldi	r20, 0x6C	; 108
     7b6:	52 e0       	ldi	r21, 0x02	; 2
     7b8:	0e 94 00 04 	call	0x800	; 0x800 <strtok_r>
     7bc:	08 95       	ret

000007be <memcpy>:
     7be:	fb 01       	movw	r30, r22
     7c0:	dc 01       	movw	r26, r24
     7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <memcpy+0xa>
     7c4:	01 90       	ld	r0, Z+
     7c6:	0d 92       	st	X+, r0
     7c8:	41 50       	subi	r20, 0x01	; 1
     7ca:	50 40       	sbci	r21, 0x00	; 0
     7cc:	d8 f7       	brcc	.-10     	; 0x7c4 <memcpy+0x6>
     7ce:	08 95       	ret

000007d0 <strcmp>:
     7d0:	fb 01       	movw	r30, r22
     7d2:	dc 01       	movw	r26, r24
     7d4:	8d 91       	ld	r24, X+
     7d6:	01 90       	ld	r0, Z+
     7d8:	80 19       	sub	r24, r0
     7da:	01 10       	cpse	r0, r1
     7dc:	d9 f3       	breq	.-10     	; 0x7d4 <strcmp+0x4>
     7de:	99 0b       	sbc	r25, r25
     7e0:	08 95       	ret

000007e2 <strncpy>:
     7e2:	fb 01       	movw	r30, r22
     7e4:	dc 01       	movw	r26, r24
     7e6:	41 50       	subi	r20, 0x01	; 1
     7e8:	50 40       	sbci	r21, 0x00	; 0
     7ea:	48 f0       	brcs	.+18     	; 0x7fe <strncpy+0x1c>
     7ec:	01 90       	ld	r0, Z+
     7ee:	0d 92       	st	X+, r0
     7f0:	00 20       	and	r0, r0
     7f2:	c9 f7       	brne	.-14     	; 0x7e6 <strncpy+0x4>
     7f4:	01 c0       	rjmp	.+2      	; 0x7f8 <strncpy+0x16>
     7f6:	1d 92       	st	X+, r1
     7f8:	41 50       	subi	r20, 0x01	; 1
     7fa:	50 40       	sbci	r21, 0x00	; 0
     7fc:	e0 f7       	brcc	.-8      	; 0x7f6 <strncpy+0x14>
     7fe:	08 95       	ret

00000800 <strtok_r>:
     800:	00 97       	sbiw	r24, 0x00	; 0
     802:	31 f4       	brne	.+12     	; 0x810 <strtok_r+0x10>
     804:	da 01       	movw	r26, r20
     806:	8d 91       	ld	r24, X+
     808:	9c 91       	ld	r25, X
     80a:	00 97       	sbiw	r24, 0x00	; 0
     80c:	09 f4       	brne	.+2      	; 0x810 <strtok_r+0x10>
     80e:	0e c0       	rjmp	.+28     	; 0x82c <strtok_r+0x2c>
     810:	dc 01       	movw	r26, r24
     812:	fb 01       	movw	r30, r22
     814:	3d 91       	ld	r19, X+
     816:	21 91       	ld	r18, Z+
     818:	22 23       	and	r18, r18
     81a:	19 f0       	breq	.+6      	; 0x822 <strtok_r+0x22>
     81c:	32 17       	cp	r19, r18
     81e:	c9 f3       	breq	.-14     	; 0x812 <strtok_r+0x12>
     820:	fa cf       	rjmp	.-12     	; 0x816 <strtok_r+0x16>
     822:	33 23       	and	r19, r19
     824:	31 f4       	brne	.+12     	; 0x832 <strtok_r+0x32>
     826:	da 01       	movw	r26, r20
     828:	1d 92       	st	X+, r1
     82a:	1c 92       	st	X, r1
     82c:	88 27       	eor	r24, r24
     82e:	99 27       	eor	r25, r25
     830:	08 95       	ret
     832:	11 97       	sbiw	r26, 0x01	; 1
     834:	af 93       	push	r26
     836:	bf 93       	push	r27
     838:	fb 01       	movw	r30, r22
     83a:	3d 91       	ld	r19, X+
     83c:	21 91       	ld	r18, Z+
     83e:	32 17       	cp	r19, r18
     840:	71 f4       	brne	.+28     	; 0x85e <strtok_r+0x5e>
     842:	33 23       	and	r19, r19
     844:	21 f4       	brne	.+8      	; 0x84e <strtok_r+0x4e>
     846:	88 27       	eor	r24, r24
     848:	99 27       	eor	r25, r25
     84a:	11 97       	sbiw	r26, 0x01	; 1
     84c:	02 c0       	rjmp	.+4      	; 0x852 <strtok_r+0x52>
     84e:	1e 92       	st	-X, r1
     850:	11 96       	adiw	r26, 0x01	; 1
     852:	fa 01       	movw	r30, r20
     854:	a1 93       	st	Z+, r26
     856:	b0 83       	st	Z, r27
     858:	9f 91       	pop	r25
     85a:	8f 91       	pop	r24
     85c:	08 95       	ret
     85e:	22 23       	and	r18, r18
     860:	69 f7       	brne	.-38     	; 0x83c <strtok_r+0x3c>
     862:	ea cf       	rjmp	.-44     	; 0x838 <strtok_r+0x38>

00000864 <sprintf>:
     864:	ae e0       	ldi	r26, 0x0E	; 14
     866:	b0 e0       	ldi	r27, 0x00	; 0
     868:	e8 e3       	ldi	r30, 0x38	; 56
     86a:	f4 e0       	ldi	r31, 0x04	; 4
     86c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__prologue_saves__+0x1c>
     870:	0d 89       	ldd	r16, Y+21	; 0x15
     872:	1e 89       	ldd	r17, Y+22	; 0x16
     874:	86 e0       	ldi	r24, 0x06	; 6
     876:	8c 83       	std	Y+4, r24	; 0x04
     878:	1a 83       	std	Y+2, r17	; 0x02
     87a:	09 83       	std	Y+1, r16	; 0x01
     87c:	8f ef       	ldi	r24, 0xFF	; 255
     87e:	9f e7       	ldi	r25, 0x7F	; 127
     880:	9e 83       	std	Y+6, r25	; 0x06
     882:	8d 83       	std	Y+5, r24	; 0x05
     884:	9e 01       	movw	r18, r28
     886:	27 5e       	subi	r18, 0xE7	; 231
     888:	3f 4f       	sbci	r19, 0xFF	; 255
     88a:	ce 01       	movw	r24, r28
     88c:	01 96       	adiw	r24, 0x01	; 1
     88e:	6f 89       	ldd	r22, Y+23	; 0x17
     890:	78 8d       	ldd	r23, Y+24	; 0x18
     892:	a9 01       	movw	r20, r18
     894:	0e 94 70 04 	call	0x8e0	; 0x8e0 <vfprintf>
     898:	2f 81       	ldd	r18, Y+7	; 0x07
     89a:	38 85       	ldd	r19, Y+8	; 0x08
     89c:	02 0f       	add	r16, r18
     89e:	13 1f       	adc	r17, r19
     8a0:	f8 01       	movw	r30, r16
     8a2:	10 82       	st	Z, r1
     8a4:	2e 96       	adiw	r28, 0x0e	; 14
     8a6:	e4 e0       	ldi	r30, 0x04	; 4
     8a8:	0c 94 6d 38 	jmp	0x70da	; 0x70da <__epilogue_restores__+0x1c>

000008ac <sscanf>:
     8ac:	ae e0       	ldi	r26, 0x0E	; 14
     8ae:	b0 e0       	ldi	r27, 0x00	; 0
     8b0:	ec e5       	ldi	r30, 0x5C	; 92
     8b2:	f4 e0       	ldi	r31, 0x04	; 4
     8b4:	0c 94 53 38 	jmp	0x70a6	; 0x70a6 <__prologue_saves__+0x20>
     8b8:	85 e0       	ldi	r24, 0x05	; 5
     8ba:	8c 83       	std	Y+4, r24	; 0x04
     8bc:	8b 89       	ldd	r24, Y+19	; 0x13
     8be:	9c 89       	ldd	r25, Y+20	; 0x14
     8c0:	9a 83       	std	Y+2, r25	; 0x02
     8c2:	89 83       	std	Y+1, r24	; 0x01
     8c4:	9e 01       	movw	r18, r28
     8c6:	29 5e       	subi	r18, 0xE9	; 233
     8c8:	3f 4f       	sbci	r19, 0xFF	; 255
     8ca:	ce 01       	movw	r24, r28
     8cc:	01 96       	adiw	r24, 0x01	; 1
     8ce:	6d 89       	ldd	r22, Y+21	; 0x15
     8d0:	7e 89       	ldd	r23, Y+22	; 0x16
     8d2:	a9 01       	movw	r20, r18
     8d4:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <vfscanf>
     8d8:	2e 96       	adiw	r28, 0x0e	; 14
     8da:	e2 e0       	ldi	r30, 0x02	; 2
     8dc:	0c 94 6f 38 	jmp	0x70de	; 0x70de <__epilogue_restores__+0x20>

000008e0 <vfprintf>:
     8e0:	ab e0       	ldi	r26, 0x0B	; 11
     8e2:	b0 e0       	ldi	r27, 0x00	; 0
     8e4:	e6 e7       	ldi	r30, 0x76	; 118
     8e6:	f4 e0       	ldi	r31, 0x04	; 4
     8e8:	0c 94 43 38 	jmp	0x7086	; 0x7086 <__prologue_saves__>
     8ec:	3c 01       	movw	r6, r24
     8ee:	2b 01       	movw	r4, r22
     8f0:	5a 01       	movw	r10, r20
     8f2:	fc 01       	movw	r30, r24
     8f4:	17 82       	std	Z+7, r1	; 0x07
     8f6:	16 82       	std	Z+6, r1	; 0x06
     8f8:	83 81       	ldd	r24, Z+3	; 0x03
     8fa:	81 fd       	sbrc	r24, 1
     8fc:	03 c0       	rjmp	.+6      	; 0x904 <__stack+0x5>
     8fe:	6f ef       	ldi	r22, 0xFF	; 255
     900:	7f ef       	ldi	r23, 0xFF	; 255
     902:	c6 c1       	rjmp	.+908    	; 0xc90 <__stack+0x391>
     904:	9a e0       	ldi	r25, 0x0A	; 10
     906:	89 2e       	mov	r8, r25
     908:	1e 01       	movw	r2, r28
     90a:	08 94       	sec
     90c:	21 1c       	adc	r2, r1
     90e:	31 1c       	adc	r3, r1
     910:	f3 01       	movw	r30, r6
     912:	23 81       	ldd	r18, Z+3	; 0x03
     914:	f2 01       	movw	r30, r4
     916:	23 fd       	sbrc	r18, 3
     918:	85 91       	lpm	r24, Z+
     91a:	23 ff       	sbrs	r18, 3
     91c:	81 91       	ld	r24, Z+
     91e:	2f 01       	movw	r4, r30
     920:	88 23       	and	r24, r24
     922:	09 f4       	brne	.+2      	; 0x926 <__stack+0x27>
     924:	b2 c1       	rjmp	.+868    	; 0xc8a <__stack+0x38b>
     926:	85 32       	cpi	r24, 0x25	; 37
     928:	39 f4       	brne	.+14     	; 0x938 <__stack+0x39>
     92a:	23 fd       	sbrc	r18, 3
     92c:	85 91       	lpm	r24, Z+
     92e:	23 ff       	sbrs	r18, 3
     930:	81 91       	ld	r24, Z+
     932:	2f 01       	movw	r4, r30
     934:	85 32       	cpi	r24, 0x25	; 37
     936:	29 f4       	brne	.+10     	; 0x942 <__stack+0x43>
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	b3 01       	movw	r22, r6
     93c:	0e 94 45 09 	call	0x128a	; 0x128a <fputc>
     940:	e7 cf       	rjmp	.-50     	; 0x910 <__stack+0x11>
     942:	98 2f       	mov	r25, r24
     944:	ff 24       	eor	r15, r15
     946:	ee 24       	eor	r14, r14
     948:	99 24       	eor	r9, r9
     94a:	ff e1       	ldi	r31, 0x1F	; 31
     94c:	ff 15       	cp	r31, r15
     94e:	d0 f0       	brcs	.+52     	; 0x984 <__stack+0x85>
     950:	9b 32       	cpi	r25, 0x2B	; 43
     952:	69 f0       	breq	.+26     	; 0x96e <__stack+0x6f>
     954:	9c 32       	cpi	r25, 0x2C	; 44
     956:	28 f4       	brcc	.+10     	; 0x962 <__stack+0x63>
     958:	90 32       	cpi	r25, 0x20	; 32
     95a:	59 f0       	breq	.+22     	; 0x972 <__stack+0x73>
     95c:	93 32       	cpi	r25, 0x23	; 35
     95e:	91 f4       	brne	.+36     	; 0x984 <__stack+0x85>
     960:	0e c0       	rjmp	.+28     	; 0x97e <__stack+0x7f>
     962:	9d 32       	cpi	r25, 0x2D	; 45
     964:	49 f0       	breq	.+18     	; 0x978 <__stack+0x79>
     966:	90 33       	cpi	r25, 0x30	; 48
     968:	69 f4       	brne	.+26     	; 0x984 <__stack+0x85>
     96a:	41 e0       	ldi	r20, 0x01	; 1
     96c:	24 c0       	rjmp	.+72     	; 0x9b6 <__stack+0xb7>
     96e:	52 e0       	ldi	r21, 0x02	; 2
     970:	f5 2a       	or	r15, r21
     972:	84 e0       	ldi	r24, 0x04	; 4
     974:	f8 2a       	or	r15, r24
     976:	28 c0       	rjmp	.+80     	; 0x9c8 <__stack+0xc9>
     978:	98 e0       	ldi	r25, 0x08	; 8
     97a:	f9 2a       	or	r15, r25
     97c:	25 c0       	rjmp	.+74     	; 0x9c8 <__stack+0xc9>
     97e:	e0 e1       	ldi	r30, 0x10	; 16
     980:	fe 2a       	or	r15, r30
     982:	22 c0       	rjmp	.+68     	; 0x9c8 <__stack+0xc9>
     984:	f7 fc       	sbrc	r15, 7
     986:	29 c0       	rjmp	.+82     	; 0x9da <__stack+0xdb>
     988:	89 2f       	mov	r24, r25
     98a:	80 53       	subi	r24, 0x30	; 48
     98c:	8a 30       	cpi	r24, 0x0A	; 10
     98e:	70 f4       	brcc	.+28     	; 0x9ac <__stack+0xad>
     990:	f6 fe       	sbrs	r15, 6
     992:	05 c0       	rjmp	.+10     	; 0x99e <__stack+0x9f>
     994:	98 9c       	mul	r9, r8
     996:	90 2c       	mov	r9, r0
     998:	11 24       	eor	r1, r1
     99a:	98 0e       	add	r9, r24
     99c:	15 c0       	rjmp	.+42     	; 0x9c8 <__stack+0xc9>
     99e:	e8 9c       	mul	r14, r8
     9a0:	e0 2c       	mov	r14, r0
     9a2:	11 24       	eor	r1, r1
     9a4:	e8 0e       	add	r14, r24
     9a6:	f0 e2       	ldi	r31, 0x20	; 32
     9a8:	ff 2a       	or	r15, r31
     9aa:	0e c0       	rjmp	.+28     	; 0x9c8 <__stack+0xc9>
     9ac:	9e 32       	cpi	r25, 0x2E	; 46
     9ae:	29 f4       	brne	.+10     	; 0x9ba <__stack+0xbb>
     9b0:	f6 fc       	sbrc	r15, 6
     9b2:	6b c1       	rjmp	.+726    	; 0xc8a <__stack+0x38b>
     9b4:	40 e4       	ldi	r20, 0x40	; 64
     9b6:	f4 2a       	or	r15, r20
     9b8:	07 c0       	rjmp	.+14     	; 0x9c8 <__stack+0xc9>
     9ba:	9c 36       	cpi	r25, 0x6C	; 108
     9bc:	19 f4       	brne	.+6      	; 0x9c4 <__stack+0xc5>
     9be:	50 e8       	ldi	r21, 0x80	; 128
     9c0:	f5 2a       	or	r15, r21
     9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <__stack+0xc9>
     9c4:	98 36       	cpi	r25, 0x68	; 104
     9c6:	49 f4       	brne	.+18     	; 0x9da <__stack+0xdb>
     9c8:	f2 01       	movw	r30, r4
     9ca:	23 fd       	sbrc	r18, 3
     9cc:	95 91       	lpm	r25, Z+
     9ce:	23 ff       	sbrs	r18, 3
     9d0:	91 91       	ld	r25, Z+
     9d2:	2f 01       	movw	r4, r30
     9d4:	99 23       	and	r25, r25
     9d6:	09 f0       	breq	.+2      	; 0x9da <__stack+0xdb>
     9d8:	b8 cf       	rjmp	.-144    	; 0x94a <__stack+0x4b>
     9da:	89 2f       	mov	r24, r25
     9dc:	85 54       	subi	r24, 0x45	; 69
     9de:	83 30       	cpi	r24, 0x03	; 3
     9e0:	18 f0       	brcs	.+6      	; 0x9e8 <__stack+0xe9>
     9e2:	80 52       	subi	r24, 0x20	; 32
     9e4:	83 30       	cpi	r24, 0x03	; 3
     9e6:	38 f4       	brcc	.+14     	; 0x9f6 <__stack+0xf7>
     9e8:	44 e0       	ldi	r20, 0x04	; 4
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	a4 0e       	add	r10, r20
     9ee:	b5 1e       	adc	r11, r21
     9f0:	5f e3       	ldi	r21, 0x3F	; 63
     9f2:	59 83       	std	Y+1, r21	; 0x01
     9f4:	0f c0       	rjmp	.+30     	; 0xa14 <__stack+0x115>
     9f6:	93 36       	cpi	r25, 0x63	; 99
     9f8:	31 f0       	breq	.+12     	; 0xa06 <__stack+0x107>
     9fa:	93 37       	cpi	r25, 0x73	; 115
     9fc:	79 f0       	breq	.+30     	; 0xa1c <__stack+0x11d>
     9fe:	93 35       	cpi	r25, 0x53	; 83
     a00:	09 f0       	breq	.+2      	; 0xa04 <__stack+0x105>
     a02:	56 c0       	rjmp	.+172    	; 0xab0 <__stack+0x1b1>
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__stack+0x147>
     a06:	f5 01       	movw	r30, r10
     a08:	80 81       	ld	r24, Z
     a0a:	89 83       	std	Y+1, r24	; 0x01
     a0c:	42 e0       	ldi	r20, 0x02	; 2
     a0e:	50 e0       	ldi	r21, 0x00	; 0
     a10:	a4 0e       	add	r10, r20
     a12:	b5 1e       	adc	r11, r21
     a14:	61 01       	movw	r12, r2
     a16:	01 e0       	ldi	r16, 0x01	; 1
     a18:	10 e0       	ldi	r17, 0x00	; 0
     a1a:	12 c0       	rjmp	.+36     	; 0xa40 <__stack+0x141>
     a1c:	f5 01       	movw	r30, r10
     a1e:	c0 80       	ld	r12, Z
     a20:	d1 80       	ldd	r13, Z+1	; 0x01
     a22:	f6 fc       	sbrc	r15, 6
     a24:	03 c0       	rjmp	.+6      	; 0xa2c <__stack+0x12d>
     a26:	6f ef       	ldi	r22, 0xFF	; 255
     a28:	7f ef       	ldi	r23, 0xFF	; 255
     a2a:	02 c0       	rjmp	.+4      	; 0xa30 <__stack+0x131>
     a2c:	69 2d       	mov	r22, r9
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	42 e0       	ldi	r20, 0x02	; 2
     a32:	50 e0       	ldi	r21, 0x00	; 0
     a34:	a4 0e       	add	r10, r20
     a36:	b5 1e       	adc	r11, r21
     a38:	c6 01       	movw	r24, r12
     a3a:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <strnlen>
     a3e:	8c 01       	movw	r16, r24
     a40:	5f e7       	ldi	r21, 0x7F	; 127
     a42:	f5 22       	and	r15, r21
     a44:	14 c0       	rjmp	.+40     	; 0xa6e <__stack+0x16f>
     a46:	f5 01       	movw	r30, r10
     a48:	c0 80       	ld	r12, Z
     a4a:	d1 80       	ldd	r13, Z+1	; 0x01
     a4c:	f6 fc       	sbrc	r15, 6
     a4e:	03 c0       	rjmp	.+6      	; 0xa56 <__stack+0x157>
     a50:	6f ef       	ldi	r22, 0xFF	; 255
     a52:	7f ef       	ldi	r23, 0xFF	; 255
     a54:	02 c0       	rjmp	.+4      	; 0xa5a <__stack+0x15b>
     a56:	69 2d       	mov	r22, r9
     a58:	70 e0       	ldi	r23, 0x00	; 0
     a5a:	42 e0       	ldi	r20, 0x02	; 2
     a5c:	50 e0       	ldi	r21, 0x00	; 0
     a5e:	a4 0e       	add	r10, r20
     a60:	b5 1e       	adc	r11, r21
     a62:	c6 01       	movw	r24, r12
     a64:	0e 94 ed 08 	call	0x11da	; 0x11da <strnlen_P>
     a68:	8c 01       	movw	r16, r24
     a6a:	50 e8       	ldi	r21, 0x80	; 128
     a6c:	f5 2a       	or	r15, r21
     a6e:	f3 fe       	sbrs	r15, 3
     a70:	07 c0       	rjmp	.+14     	; 0xa80 <__stack+0x181>
     a72:	1a c0       	rjmp	.+52     	; 0xaa8 <__stack+0x1a9>
     a74:	80 e2       	ldi	r24, 0x20	; 32
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	b3 01       	movw	r22, r6
     a7a:	0e 94 45 09 	call	0x128a	; 0x128a <fputc>
     a7e:	ea 94       	dec	r14
     a80:	8e 2d       	mov	r24, r14
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	08 17       	cp	r16, r24
     a86:	19 07       	cpc	r17, r25
     a88:	a8 f3       	brcs	.-22     	; 0xa74 <__stack+0x175>
     a8a:	0e c0       	rjmp	.+28     	; 0xaa8 <__stack+0x1a9>
     a8c:	f6 01       	movw	r30, r12
     a8e:	f7 fc       	sbrc	r15, 7
     a90:	85 91       	lpm	r24, Z+
     a92:	f7 fe       	sbrs	r15, 7
     a94:	81 91       	ld	r24, Z+
     a96:	6f 01       	movw	r12, r30
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	b3 01       	movw	r22, r6
     a9c:	0e 94 45 09 	call	0x128a	; 0x128a <fputc>
     aa0:	e1 10       	cpse	r14, r1
     aa2:	ea 94       	dec	r14
     aa4:	01 50       	subi	r16, 0x01	; 1
     aa6:	10 40       	sbci	r17, 0x00	; 0
     aa8:	01 15       	cp	r16, r1
     aaa:	11 05       	cpc	r17, r1
     aac:	79 f7       	brne	.-34     	; 0xa8c <__stack+0x18d>
     aae:	ea c0       	rjmp	.+468    	; 0xc84 <__stack+0x385>
     ab0:	94 36       	cpi	r25, 0x64	; 100
     ab2:	11 f0       	breq	.+4      	; 0xab8 <__stack+0x1b9>
     ab4:	99 36       	cpi	r25, 0x69	; 105
     ab6:	69 f5       	brne	.+90     	; 0xb12 <__stack+0x213>
     ab8:	f7 fe       	sbrs	r15, 7
     aba:	08 c0       	rjmp	.+16     	; 0xacc <__stack+0x1cd>
     abc:	f5 01       	movw	r30, r10
     abe:	20 81       	ld	r18, Z
     ac0:	31 81       	ldd	r19, Z+1	; 0x01
     ac2:	42 81       	ldd	r20, Z+2	; 0x02
     ac4:	53 81       	ldd	r21, Z+3	; 0x03
     ac6:	84 e0       	ldi	r24, 0x04	; 4
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	0a c0       	rjmp	.+20     	; 0xae0 <__stack+0x1e1>
     acc:	f5 01       	movw	r30, r10
     ace:	80 81       	ld	r24, Z
     ad0:	91 81       	ldd	r25, Z+1	; 0x01
     ad2:	9c 01       	movw	r18, r24
     ad4:	44 27       	eor	r20, r20
     ad6:	37 fd       	sbrc	r19, 7
     ad8:	40 95       	com	r20
     ada:	54 2f       	mov	r21, r20
     adc:	82 e0       	ldi	r24, 0x02	; 2
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	a8 0e       	add	r10, r24
     ae2:	b9 1e       	adc	r11, r25
     ae4:	9f e6       	ldi	r25, 0x6F	; 111
     ae6:	f9 22       	and	r15, r25
     ae8:	57 ff       	sbrs	r21, 7
     aea:	09 c0       	rjmp	.+18     	; 0xafe <__stack+0x1ff>
     aec:	50 95       	com	r21
     aee:	40 95       	com	r20
     af0:	30 95       	com	r19
     af2:	21 95       	neg	r18
     af4:	3f 4f       	sbci	r19, 0xFF	; 255
     af6:	4f 4f       	sbci	r20, 0xFF	; 255
     af8:	5f 4f       	sbci	r21, 0xFF	; 255
     afa:	e0 e8       	ldi	r30, 0x80	; 128
     afc:	fe 2a       	or	r15, r30
     afe:	ca 01       	movw	r24, r20
     b00:	b9 01       	movw	r22, r18
     b02:	a1 01       	movw	r20, r2
     b04:	2a e0       	ldi	r18, 0x0A	; 10
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	0e 94 8b 09 	call	0x1316	; 0x1316 <__ultoa_invert>
     b0c:	d8 2e       	mov	r13, r24
     b0e:	d2 18       	sub	r13, r2
     b10:	40 c0       	rjmp	.+128    	; 0xb92 <__stack+0x293>
     b12:	95 37       	cpi	r25, 0x75	; 117
     b14:	29 f4       	brne	.+10     	; 0xb20 <__stack+0x221>
     b16:	1f 2d       	mov	r17, r15
     b18:	1f 7e       	andi	r17, 0xEF	; 239
     b1a:	2a e0       	ldi	r18, 0x0A	; 10
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	1d c0       	rjmp	.+58     	; 0xb5a <__stack+0x25b>
     b20:	1f 2d       	mov	r17, r15
     b22:	19 7f       	andi	r17, 0xF9	; 249
     b24:	9f 36       	cpi	r25, 0x6F	; 111
     b26:	61 f0       	breq	.+24     	; 0xb40 <__stack+0x241>
     b28:	90 37       	cpi	r25, 0x70	; 112
     b2a:	20 f4       	brcc	.+8      	; 0xb34 <__stack+0x235>
     b2c:	98 35       	cpi	r25, 0x58	; 88
     b2e:	09 f0       	breq	.+2      	; 0xb32 <__stack+0x233>
     b30:	ac c0       	rjmp	.+344    	; 0xc8a <__stack+0x38b>
     b32:	0f c0       	rjmp	.+30     	; 0xb52 <__stack+0x253>
     b34:	90 37       	cpi	r25, 0x70	; 112
     b36:	39 f0       	breq	.+14     	; 0xb46 <__stack+0x247>
     b38:	98 37       	cpi	r25, 0x78	; 120
     b3a:	09 f0       	breq	.+2      	; 0xb3e <__stack+0x23f>
     b3c:	a6 c0       	rjmp	.+332    	; 0xc8a <__stack+0x38b>
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__stack+0x249>
     b40:	28 e0       	ldi	r18, 0x08	; 8
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	0a c0       	rjmp	.+20     	; 0xb5a <__stack+0x25b>
     b46:	10 61       	ori	r17, 0x10	; 16
     b48:	14 fd       	sbrc	r17, 4
     b4a:	14 60       	ori	r17, 0x04	; 4
     b4c:	20 e1       	ldi	r18, 0x10	; 16
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	04 c0       	rjmp	.+8      	; 0xb5a <__stack+0x25b>
     b52:	14 fd       	sbrc	r17, 4
     b54:	16 60       	ori	r17, 0x06	; 6
     b56:	20 e1       	ldi	r18, 0x10	; 16
     b58:	32 e0       	ldi	r19, 0x02	; 2
     b5a:	17 ff       	sbrs	r17, 7
     b5c:	08 c0       	rjmp	.+16     	; 0xb6e <__stack+0x26f>
     b5e:	f5 01       	movw	r30, r10
     b60:	60 81       	ld	r22, Z
     b62:	71 81       	ldd	r23, Z+1	; 0x01
     b64:	82 81       	ldd	r24, Z+2	; 0x02
     b66:	93 81       	ldd	r25, Z+3	; 0x03
     b68:	44 e0       	ldi	r20, 0x04	; 4
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	08 c0       	rjmp	.+16     	; 0xb7e <__stack+0x27f>
     b6e:	f5 01       	movw	r30, r10
     b70:	80 81       	ld	r24, Z
     b72:	91 81       	ldd	r25, Z+1	; 0x01
     b74:	bc 01       	movw	r22, r24
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	42 e0       	ldi	r20, 0x02	; 2
     b7c:	50 e0       	ldi	r21, 0x00	; 0
     b7e:	a4 0e       	add	r10, r20
     b80:	b5 1e       	adc	r11, r21
     b82:	a1 01       	movw	r20, r2
     b84:	0e 94 8b 09 	call	0x1316	; 0x1316 <__ultoa_invert>
     b88:	d8 2e       	mov	r13, r24
     b8a:	d2 18       	sub	r13, r2
     b8c:	8f e7       	ldi	r24, 0x7F	; 127
     b8e:	f8 2e       	mov	r15, r24
     b90:	f1 22       	and	r15, r17
     b92:	f6 fe       	sbrs	r15, 6
     b94:	0b c0       	rjmp	.+22     	; 0xbac <__stack+0x2ad>
     b96:	5e ef       	ldi	r21, 0xFE	; 254
     b98:	f5 22       	and	r15, r21
     b9a:	d9 14       	cp	r13, r9
     b9c:	38 f4       	brcc	.+14     	; 0xbac <__stack+0x2ad>
     b9e:	f4 fe       	sbrs	r15, 4
     ba0:	07 c0       	rjmp	.+14     	; 0xbb0 <__stack+0x2b1>
     ba2:	f2 fc       	sbrc	r15, 2
     ba4:	05 c0       	rjmp	.+10     	; 0xbb0 <__stack+0x2b1>
     ba6:	8f ee       	ldi	r24, 0xEF	; 239
     ba8:	f8 22       	and	r15, r24
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <__stack+0x2b1>
     bac:	1d 2d       	mov	r17, r13
     bae:	01 c0       	rjmp	.+2      	; 0xbb2 <__stack+0x2b3>
     bb0:	19 2d       	mov	r17, r9
     bb2:	f4 fe       	sbrs	r15, 4
     bb4:	0d c0       	rjmp	.+26     	; 0xbd0 <__stack+0x2d1>
     bb6:	fe 01       	movw	r30, r28
     bb8:	ed 0d       	add	r30, r13
     bba:	f1 1d       	adc	r31, r1
     bbc:	80 81       	ld	r24, Z
     bbe:	80 33       	cpi	r24, 0x30	; 48
     bc0:	19 f4       	brne	.+6      	; 0xbc8 <__stack+0x2c9>
     bc2:	99 ee       	ldi	r25, 0xE9	; 233
     bc4:	f9 22       	and	r15, r25
     bc6:	08 c0       	rjmp	.+16     	; 0xbd8 <__stack+0x2d9>
     bc8:	1f 5f       	subi	r17, 0xFF	; 255
     bca:	f2 fe       	sbrs	r15, 2
     bcc:	05 c0       	rjmp	.+10     	; 0xbd8 <__stack+0x2d9>
     bce:	03 c0       	rjmp	.+6      	; 0xbd6 <__stack+0x2d7>
     bd0:	8f 2d       	mov	r24, r15
     bd2:	86 78       	andi	r24, 0x86	; 134
     bd4:	09 f0       	breq	.+2      	; 0xbd8 <__stack+0x2d9>
     bd6:	1f 5f       	subi	r17, 0xFF	; 255
     bd8:	0f 2d       	mov	r16, r15
     bda:	f3 fc       	sbrc	r15, 3
     bdc:	14 c0       	rjmp	.+40     	; 0xc06 <__stack+0x307>
     bde:	f0 fe       	sbrs	r15, 0
     be0:	0f c0       	rjmp	.+30     	; 0xc00 <__stack+0x301>
     be2:	1e 15       	cp	r17, r14
     be4:	10 f0       	brcs	.+4      	; 0xbea <__stack+0x2eb>
     be6:	9d 2c       	mov	r9, r13
     be8:	0b c0       	rjmp	.+22     	; 0xc00 <__stack+0x301>
     bea:	9d 2c       	mov	r9, r13
     bec:	9e 0c       	add	r9, r14
     bee:	91 1a       	sub	r9, r17
     bf0:	1e 2d       	mov	r17, r14
     bf2:	06 c0       	rjmp	.+12     	; 0xc00 <__stack+0x301>
     bf4:	80 e2       	ldi	r24, 0x20	; 32
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	b3 01       	movw	r22, r6
     bfa:	0e 94 45 09 	call	0x128a	; 0x128a <fputc>
     bfe:	1f 5f       	subi	r17, 0xFF	; 255
     c00:	1e 15       	cp	r17, r14
     c02:	c0 f3       	brcs	.-16     	; 0xbf4 <__stack+0x2f5>
     c04:	04 c0       	rjmp	.+8      	; 0xc0e <__stack+0x30f>
     c06:	1e 15       	cp	r17, r14
     c08:	10 f4       	brcc	.+4      	; 0xc0e <__stack+0x30f>
     c0a:	e1 1a       	sub	r14, r17
     c0c:	01 c0       	rjmp	.+2      	; 0xc10 <__stack+0x311>
     c0e:	ee 24       	eor	r14, r14
     c10:	04 ff       	sbrs	r16, 4
     c12:	0f c0       	rjmp	.+30     	; 0xc32 <__stack+0x333>
     c14:	80 e3       	ldi	r24, 0x30	; 48
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	b3 01       	movw	r22, r6
     c1a:	0e 94 45 09 	call	0x128a	; 0x128a <fputc>
     c1e:	02 ff       	sbrs	r16, 2
     c20:	1d c0       	rjmp	.+58     	; 0xc5c <__stack+0x35d>
     c22:	01 fd       	sbrc	r16, 1
     c24:	03 c0       	rjmp	.+6      	; 0xc2c <__stack+0x32d>
     c26:	88 e7       	ldi	r24, 0x78	; 120
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	0e c0       	rjmp	.+28     	; 0xc48 <__stack+0x349>
     c2c:	88 e5       	ldi	r24, 0x58	; 88
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	0b c0       	rjmp	.+22     	; 0xc48 <__stack+0x349>
     c32:	80 2f       	mov	r24, r16
     c34:	86 78       	andi	r24, 0x86	; 134
     c36:	91 f0       	breq	.+36     	; 0xc5c <__stack+0x35d>
     c38:	01 ff       	sbrs	r16, 1
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <__stack+0x341>
     c3c:	8b e2       	ldi	r24, 0x2B	; 43
     c3e:	01 c0       	rjmp	.+2      	; 0xc42 <__stack+0x343>
     c40:	80 e2       	ldi	r24, 0x20	; 32
     c42:	f7 fc       	sbrc	r15, 7
     c44:	8d e2       	ldi	r24, 0x2D	; 45
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	b3 01       	movw	r22, r6
     c4a:	0e 94 45 09 	call	0x128a	; 0x128a <fputc>
     c4e:	06 c0       	rjmp	.+12     	; 0xc5c <__stack+0x35d>
     c50:	80 e3       	ldi	r24, 0x30	; 48
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	b3 01       	movw	r22, r6
     c56:	0e 94 45 09 	call	0x128a	; 0x128a <fputc>
     c5a:	9a 94       	dec	r9
     c5c:	d9 14       	cp	r13, r9
     c5e:	c0 f3       	brcs	.-16     	; 0xc50 <__stack+0x351>
     c60:	da 94       	dec	r13
     c62:	f1 01       	movw	r30, r2
     c64:	ed 0d       	add	r30, r13
     c66:	f1 1d       	adc	r31, r1
     c68:	80 81       	ld	r24, Z
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	b3 01       	movw	r22, r6
     c6e:	0e 94 45 09 	call	0x128a	; 0x128a <fputc>
     c72:	dd 20       	and	r13, r13
     c74:	a9 f7       	brne	.-22     	; 0xc60 <__stack+0x361>
     c76:	06 c0       	rjmp	.+12     	; 0xc84 <__stack+0x385>
     c78:	80 e2       	ldi	r24, 0x20	; 32
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	b3 01       	movw	r22, r6
     c7e:	0e 94 45 09 	call	0x128a	; 0x128a <fputc>
     c82:	ea 94       	dec	r14
     c84:	ee 20       	and	r14, r14
     c86:	c1 f7       	brne	.-16     	; 0xc78 <__stack+0x379>
     c88:	43 ce       	rjmp	.-890    	; 0x910 <__stack+0x11>
     c8a:	f3 01       	movw	r30, r6
     c8c:	66 81       	ldd	r22, Z+6	; 0x06
     c8e:	77 81       	ldd	r23, Z+7	; 0x07
     c90:	cb 01       	movw	r24, r22
     c92:	2b 96       	adiw	r28, 0x0b	; 11
     c94:	e2 e1       	ldi	r30, 0x12	; 18
     c96:	0c 94 5f 38 	jmp	0x70be	; 0x70be <__epilogue_restores__>

00000c9a <putval>:
     c9a:	fc 01       	movw	r30, r24
     c9c:	20 fd       	sbrc	r18, 0
     c9e:	08 c0       	rjmp	.+16     	; 0xcb0 <putval+0x16>
     ca0:	23 fd       	sbrc	r18, 3
     ca2:	05 c0       	rjmp	.+10     	; 0xcae <putval+0x14>
     ca4:	22 ff       	sbrs	r18, 2
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <putval+0x12>
     ca8:	73 83       	std	Z+3, r23	; 0x03
     caa:	62 83       	std	Z+2, r22	; 0x02
     cac:	51 83       	std	Z+1, r21	; 0x01
     cae:	40 83       	st	Z, r20
     cb0:	08 95       	ret

00000cb2 <mulacc>:
     cb2:	ef 92       	push	r14
     cb4:	ff 92       	push	r15
     cb6:	0f 93       	push	r16
     cb8:	1f 93       	push	r17
     cba:	44 ff       	sbrs	r20, 4
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <mulacc+0x10>
     cbe:	33 e0       	ldi	r19, 0x03	; 3
     cc0:	11 c0       	rjmp	.+34     	; 0xce4 <mulacc+0x32>
     cc2:	46 ff       	sbrs	r20, 6
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <mulacc+0x18>
     cc6:	34 e0       	ldi	r19, 0x04	; 4
     cc8:	0d c0       	rjmp	.+26     	; 0xce4 <mulacc+0x32>
     cca:	db 01       	movw	r26, r22
     ccc:	fc 01       	movw	r30, r24
     cce:	aa 0f       	add	r26, r26
     cd0:	bb 1f       	adc	r27, r27
     cd2:	ee 1f       	adc	r30, r30
     cd4:	ff 1f       	adc	r31, r31
     cd6:	10 94       	com	r1
     cd8:	d1 f7       	brne	.-12     	; 0xcce <mulacc+0x1c>
     cda:	6a 0f       	add	r22, r26
     cdc:	7b 1f       	adc	r23, r27
     cde:	8e 1f       	adc	r24, r30
     ce0:	9f 1f       	adc	r25, r31
     ce2:	31 e0       	ldi	r19, 0x01	; 1
     ce4:	66 0f       	add	r22, r22
     ce6:	77 1f       	adc	r23, r23
     ce8:	88 1f       	adc	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	31 50       	subi	r19, 0x01	; 1
     cee:	d1 f7       	brne	.-12     	; 0xce4 <mulacc+0x32>
     cf0:	7b 01       	movw	r14, r22
     cf2:	8c 01       	movw	r16, r24
     cf4:	e2 0e       	add	r14, r18
     cf6:	f1 1c       	adc	r15, r1
     cf8:	01 1d       	adc	r16, r1
     cfa:	11 1d       	adc	r17, r1
     cfc:	a8 01       	movw	r20, r16
     cfe:	97 01       	movw	r18, r14
     d00:	b7 01       	movw	r22, r14
     d02:	ca 01       	movw	r24, r20
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	ff 90       	pop	r15
     d0a:	ef 90       	pop	r14
     d0c:	08 95       	ret

00000d0e <skip_spaces>:
     d0e:	0f 93       	push	r16
     d10:	1f 93       	push	r17
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	8c 01       	movw	r16, r24
     d18:	c8 01       	movw	r24, r16
     d1a:	0e 94 03 09 	call	0x1206	; 0x1206 <fgetc>
     d1e:	ec 01       	movw	r28, r24
     d20:	97 fd       	sbrc	r25, 7
     d22:	08 c0       	rjmp	.+16     	; 0xd34 <skip_spaces+0x26>
     d24:	0e 94 3b 38 	call	0x7076	; 0x7076 <isspace>
     d28:	89 2b       	or	r24, r25
     d2a:	b1 f7       	brne	.-20     	; 0xd18 <skip_spaces+0xa>
     d2c:	ce 01       	movw	r24, r28
     d2e:	b8 01       	movw	r22, r16
     d30:	0e 94 71 09 	call	0x12e2	; 0x12e2 <ungetc>
     d34:	ce 01       	movw	r24, r28
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	1f 91       	pop	r17
     d3c:	0f 91       	pop	r16
     d3e:	08 95       	ret

00000d40 <conv_int>:
     d40:	a0 e0       	ldi	r26, 0x00	; 0
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	e6 ea       	ldi	r30, 0xA6	; 166
     d46:	f6 e0       	ldi	r31, 0x06	; 6
     d48:	0c 94 4b 38 	jmp	0x7096	; 0x7096 <__prologue_saves__+0x10>
     d4c:	ec 01       	movw	r28, r24
     d4e:	c6 2e       	mov	r12, r22
     d50:	5a 01       	movw	r10, r20
     d52:	12 2f       	mov	r17, r18
     d54:	0e 94 03 09 	call	0x1206	; 0x1206 <fgetc>
     d58:	ac 01       	movw	r20, r24
     d5a:	8b 32       	cpi	r24, 0x2B	; 43
     d5c:	19 f0       	breq	.+6      	; 0xd64 <conv_int+0x24>
     d5e:	8d 32       	cpi	r24, 0x2D	; 45
     d60:	51 f4       	brne	.+20     	; 0xd76 <conv_int+0x36>
     d62:	10 68       	ori	r17, 0x80	; 128
     d64:	ca 94       	dec	r12
     d66:	09 f4       	brne	.+2      	; 0xd6a <conv_int+0x2a>
     d68:	6d c0       	rjmp	.+218    	; 0xe44 <conv_int+0x104>
     d6a:	ce 01       	movw	r24, r28
     d6c:	0e 94 03 09 	call	0x1206	; 0x1206 <fgetc>
     d70:	ac 01       	movw	r20, r24
     d72:	97 fd       	sbrc	r25, 7
     d74:	67 c0       	rjmp	.+206    	; 0xe44 <conv_int+0x104>
     d76:	6d ef       	ldi	r22, 0xFD	; 253
     d78:	d6 2e       	mov	r13, r22
     d7a:	d1 22       	and	r13, r17
     d7c:	8d 2d       	mov	r24, r13
     d7e:	80 73       	andi	r24, 0x30	; 48
     d80:	01 f5       	brne	.+64     	; 0xdc2 <conv_int+0x82>
     d82:	40 33       	cpi	r20, 0x30	; 48
     d84:	f1 f4       	brne	.+60     	; 0xdc2 <conv_int+0x82>
     d86:	ca 94       	dec	r12
     d88:	09 f4       	brne	.+2      	; 0xd8c <conv_int+0x4c>
     d8a:	47 c0       	rjmp	.+142    	; 0xe1a <conv_int+0xda>
     d8c:	ce 01       	movw	r24, r28
     d8e:	0e 94 03 09 	call	0x1206	; 0x1206 <fgetc>
     d92:	ac 01       	movw	r20, r24
     d94:	97 fd       	sbrc	r25, 7
     d96:	41 c0       	rjmp	.+130    	; 0xe1a <conv_int+0xda>
     d98:	82 e0       	ldi	r24, 0x02	; 2
     d9a:	d8 2a       	or	r13, r24
     d9c:	48 37       	cpi	r20, 0x78	; 120
     d9e:	11 f0       	breq	.+4      	; 0xda4 <conv_int+0x64>
     da0:	48 35       	cpi	r20, 0x58	; 88
     da2:	59 f4       	brne	.+22     	; 0xdba <conv_int+0x7a>
     da4:	80 e4       	ldi	r24, 0x40	; 64
     da6:	d8 2a       	or	r13, r24
     da8:	ca 94       	dec	r12
     daa:	b9 f1       	breq	.+110    	; 0xe1a <conv_int+0xda>
     dac:	ce 01       	movw	r24, r28
     dae:	0e 94 03 09 	call	0x1206	; 0x1206 <fgetc>
     db2:	ac 01       	movw	r20, r24
     db4:	99 23       	and	r25, r25
     db6:	2c f4       	brge	.+10     	; 0xdc2 <conv_int+0x82>
     db8:	30 c0       	rjmp	.+96     	; 0xe1a <conv_int+0xda>
     dba:	d6 fc       	sbrc	r13, 6
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <conv_int+0x82>
     dbe:	80 e1       	ldi	r24, 0x10	; 16
     dc0:	d8 2a       	or	r13, r24
     dc2:	ee 24       	eor	r14, r14
     dc4:	ff 24       	eor	r15, r15
     dc6:	87 01       	movw	r16, r14
     dc8:	24 2f       	mov	r18, r20
     dca:	20 53       	subi	r18, 0x30	; 48
     dcc:	28 30       	cpi	r18, 0x08	; 8
     dce:	88 f0       	brcs	.+34     	; 0xdf2 <conv_int+0xb2>
     dd0:	d4 fc       	sbrc	r13, 4
     dd2:	09 c0       	rjmp	.+18     	; 0xde6 <conv_int+0xa6>
     dd4:	2a 30       	cpi	r18, 0x0A	; 10
     dd6:	68 f0       	brcs	.+26     	; 0xdf2 <conv_int+0xb2>
     dd8:	d6 fe       	sbrs	r13, 6
     dda:	05 c0       	rjmp	.+10     	; 0xde6 <conv_int+0xa6>
     ddc:	2f 7d       	andi	r18, 0xDF	; 223
     dde:	82 2f       	mov	r24, r18
     de0:	81 51       	subi	r24, 0x11	; 17
     de2:	86 30       	cpi	r24, 0x06	; 6
     de4:	28 f0       	brcs	.+10     	; 0xdf0 <conv_int+0xb0>
     de6:	ca 01       	movw	r24, r20
     de8:	be 01       	movw	r22, r28
     dea:	0e 94 71 09 	call	0x12e2	; 0x12e2 <ungetc>
     dee:	12 c0       	rjmp	.+36     	; 0xe14 <conv_int+0xd4>
     df0:	27 50       	subi	r18, 0x07	; 7
     df2:	c8 01       	movw	r24, r16
     df4:	b7 01       	movw	r22, r14
     df6:	4d 2d       	mov	r20, r13
     df8:	0e 94 59 06 	call	0xcb2	; 0xcb2 <mulacc>
     dfc:	7b 01       	movw	r14, r22
     dfe:	8c 01       	movw	r16, r24
     e00:	82 e0       	ldi	r24, 0x02	; 2
     e02:	d8 2a       	or	r13, r24
     e04:	ca 94       	dec	r12
     e06:	61 f0       	breq	.+24     	; 0xe20 <conv_int+0xe0>
     e08:	ce 01       	movw	r24, r28
     e0a:	0e 94 03 09 	call	0x1206	; 0x1206 <fgetc>
     e0e:	ac 01       	movw	r20, r24
     e10:	97 ff       	sbrs	r25, 7
     e12:	da cf       	rjmp	.-76     	; 0xdc8 <conv_int+0x88>
     e14:	d1 fc       	sbrc	r13, 1
     e16:	04 c0       	rjmp	.+8      	; 0xe20 <conv_int+0xe0>
     e18:	15 c0       	rjmp	.+42     	; 0xe44 <conv_int+0x104>
     e1a:	ee 24       	eor	r14, r14
     e1c:	ff 24       	eor	r15, r15
     e1e:	87 01       	movw	r16, r14
     e20:	d7 fe       	sbrs	r13, 7
     e22:	08 c0       	rjmp	.+16     	; 0xe34 <conv_int+0xf4>
     e24:	10 95       	com	r17
     e26:	00 95       	com	r16
     e28:	f0 94       	com	r15
     e2a:	e0 94       	com	r14
     e2c:	e1 1c       	adc	r14, r1
     e2e:	f1 1c       	adc	r15, r1
     e30:	01 1d       	adc	r16, r1
     e32:	11 1d       	adc	r17, r1
     e34:	c5 01       	movw	r24, r10
     e36:	b8 01       	movw	r22, r16
     e38:	a7 01       	movw	r20, r14
     e3a:	2d 2d       	mov	r18, r13
     e3c:	0e 94 4d 06 	call	0xc9a	; 0xc9a <putval>
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	01 c0       	rjmp	.+2      	; 0xe46 <conv_int+0x106>
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
     e4a:	ea e0       	ldi	r30, 0x0A	; 10
     e4c:	0c 94 67 38 	jmp	0x70ce	; 0x70ce <__epilogue_restores__+0x10>

00000e50 <conv_brk>:
     e50:	a0 e2       	ldi	r26, 0x20	; 32
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	ee e2       	ldi	r30, 0x2E	; 46
     e56:	f7 e0       	ldi	r31, 0x07	; 7
     e58:	0c 94 47 38 	jmp	0x708e	; 0x708e <__prologue_saves__+0x8>
     e5c:	6c 01       	movw	r12, r24
     e5e:	a6 2e       	mov	r10, r22
     e60:	8a 01       	movw	r16, r20
     e62:	79 01       	movw	r14, r18
     e64:	fe 01       	movw	r30, r28
     e66:	31 96       	adiw	r30, 0x01	; 1
     e68:	80 e2       	ldi	r24, 0x20	; 32
     e6a:	df 01       	movw	r26, r30
     e6c:	1d 92       	st	X+, r1
     e6e:	8a 95       	dec	r24
     e70:	e9 f7       	brne	.-6      	; 0xe6c <conv_brk+0x1c>
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	60 e0       	ldi	r22, 0x00	; 0
     e78:	40 e0       	ldi	r20, 0x00	; 0
     e7a:	50 e0       	ldi	r21, 0x00	; 0
     e7c:	4f 01       	movw	r8, r30
     e7e:	a1 e0       	ldi	r26, 0x01	; 1
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	f6 01       	movw	r30, r12
     e84:	83 81       	ldd	r24, Z+3	; 0x03
     e86:	f7 01       	movw	r30, r14
     e88:	83 fd       	sbrc	r24, 3
     e8a:	25 91       	lpm	r18, Z+
     e8c:	83 ff       	sbrs	r24, 3
     e8e:	21 91       	ld	r18, Z+
     e90:	7f 01       	movw	r14, r30
     e92:	22 23       	and	r18, r18
     e94:	09 f4       	brne	.+2      	; 0xe98 <conv_brk+0x48>
     e96:	7e c0       	rjmp	.+252    	; 0xf94 <conv_brk+0x144>
     e98:	2e 35       	cpi	r18, 0x5E	; 94
     e9a:	19 f4       	brne	.+6      	; 0xea2 <conv_brk+0x52>
     e9c:	41 15       	cp	r20, r1
     e9e:	51 05       	cpc	r21, r1
     ea0:	69 f1       	breq	.+90     	; 0xefc <conv_brk+0xac>
     ea2:	87 2f       	mov	r24, r23
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	84 17       	cp	r24, r20
     ea8:	95 07       	cpc	r25, r21
     eaa:	44 f4       	brge	.+16     	; 0xebc <conv_brk+0x6c>
     eac:	2d 35       	cpi	r18, 0x5D	; 93
     eae:	51 f1       	breq	.+84     	; 0xf04 <conv_brk+0xb4>
     eb0:	2d 32       	cpi	r18, 0x2D	; 45
     eb2:	21 f4       	brne	.+8      	; 0xebc <conv_brk+0x6c>
     eb4:	33 23       	and	r19, r19
     eb6:	29 f4       	brne	.+10     	; 0xec2 <conv_brk+0x72>
     eb8:	31 e0       	ldi	r19, 0x01	; 1
     eba:	21 c0       	rjmp	.+66     	; 0xefe <conv_brk+0xae>
     ebc:	33 23       	and	r19, r19
     ebe:	09 f4       	brne	.+2      	; 0xec2 <conv_brk+0x72>
     ec0:	62 2f       	mov	r22, r18
     ec2:	32 2f       	mov	r19, r18
     ec4:	83 2f       	mov	r24, r19
     ec6:	86 95       	lsr	r24
     ec8:	86 95       	lsr	r24
     eca:	86 95       	lsr	r24
     ecc:	f4 01       	movw	r30, r8
     ece:	e8 0f       	add	r30, r24
     ed0:	f1 1d       	adc	r31, r1
     ed2:	83 2f       	mov	r24, r19
     ed4:	87 70       	andi	r24, 0x07	; 7
     ed6:	3d 01       	movw	r6, r26
     ed8:	02 c0       	rjmp	.+4      	; 0xede <conv_brk+0x8e>
     eda:	66 0c       	add	r6, r6
     edc:	77 1c       	adc	r7, r7
     ede:	8a 95       	dec	r24
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <conv_brk+0x8a>
     ee2:	20 81       	ld	r18, Z
     ee4:	26 29       	or	r18, r6
     ee6:	20 83       	st	Z, r18
     ee8:	36 17       	cp	r19, r22
     eea:	11 f4       	brne	.+4      	; 0xef0 <conv_brk+0xa0>
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	07 c0       	rjmp	.+14     	; 0xefe <conv_brk+0xae>
     ef0:	36 17       	cp	r19, r22
     ef2:	10 f4       	brcc	.+4      	; 0xef8 <conv_brk+0xa8>
     ef4:	3f 5f       	subi	r19, 0xFF	; 255
     ef6:	e6 cf       	rjmp	.-52     	; 0xec4 <conv_brk+0x74>
     ef8:	31 50       	subi	r19, 0x01	; 1
     efa:	e4 cf       	rjmp	.-56     	; 0xec4 <conv_brk+0x74>
     efc:	71 e0       	ldi	r23, 0x01	; 1
     efe:	4f 5f       	subi	r20, 0xFF	; 255
     f00:	5f 4f       	sbci	r21, 0xFF	; 255
     f02:	bf cf       	rjmp	.-130    	; 0xe82 <conv_brk+0x32>
     f04:	33 23       	and	r19, r19
     f06:	19 f0       	breq	.+6      	; 0xf0e <conv_brk+0xbe>
     f08:	8e 81       	ldd	r24, Y+6	; 0x06
     f0a:	80 62       	ori	r24, 0x20	; 32
     f0c:	8e 83       	std	Y+6, r24	; 0x06
     f0e:	77 23       	and	r23, r23
     f10:	59 f0       	breq	.+22     	; 0xf28 <conv_brk+0xd8>
     f12:	fe 01       	movw	r30, r28
     f14:	31 96       	adiw	r30, 0x01	; 1
     f16:	9e 01       	movw	r18, r28
     f18:	2f 5d       	subi	r18, 0xDF	; 223
     f1a:	3f 4f       	sbci	r19, 0xFF	; 255
     f1c:	80 81       	ld	r24, Z
     f1e:	80 95       	com	r24
     f20:	81 93       	st	Z+, r24
     f22:	e2 17       	cp	r30, r18
     f24:	f3 07       	cpc	r31, r19
     f26:	d1 f7       	brne	.-12     	; 0xf1c <conv_brk+0xcc>
     f28:	bb 24       	eor	r11, r11
     f2a:	b3 94       	inc	r11
     f2c:	4e 01       	movw	r8, r28
     f2e:	08 94       	sec
     f30:	81 1c       	adc	r8, r1
     f32:	91 1c       	adc	r9, r1
     f34:	c6 01       	movw	r24, r12
     f36:	0e 94 03 09 	call	0x1206	; 0x1206 <fgetc>
     f3a:	ac 01       	movw	r20, r24
     f3c:	97 fd       	sbrc	r25, 7
     f3e:	22 c0       	rjmp	.+68     	; 0xf84 <conv_brk+0x134>
     f40:	86 95       	lsr	r24
     f42:	86 95       	lsr	r24
     f44:	86 95       	lsr	r24
     f46:	f4 01       	movw	r30, r8
     f48:	e8 0f       	add	r30, r24
     f4a:	f1 1d       	adc	r31, r1
     f4c:	80 81       	ld	r24, Z
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	9a 01       	movw	r18, r20
     f52:	27 70       	andi	r18, 0x07	; 7
     f54:	30 70       	andi	r19, 0x00	; 0
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <conv_brk+0x10c>
     f58:	95 95       	asr	r25
     f5a:	87 95       	ror	r24
     f5c:	2a 95       	dec	r18
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <conv_brk+0x108>
     f60:	80 fd       	sbrc	r24, 0
     f62:	05 c0       	rjmp	.+10     	; 0xf6e <conv_brk+0x11e>
     f64:	ca 01       	movw	r24, r20
     f66:	b6 01       	movw	r22, r12
     f68:	0e 94 71 09 	call	0x12e2	; 0x12e2 <ungetc>
     f6c:	0b c0       	rjmp	.+22     	; 0xf84 <conv_brk+0x134>
     f6e:	01 15       	cp	r16, r1
     f70:	11 05       	cpc	r17, r1
     f72:	19 f0       	breq	.+6      	; 0xf7a <conv_brk+0x12a>
     f74:	d8 01       	movw	r26, r16
     f76:	4d 93       	st	X+, r20
     f78:	8d 01       	movw	r16, r26
     f7a:	aa 94       	dec	r10
     f7c:	bb 24       	eor	r11, r11
     f7e:	aa 20       	and	r10, r10
     f80:	c9 f6       	brne	.-78     	; 0xf34 <conv_brk+0xe4>
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <conv_brk+0x138>
     f84:	bb 20       	and	r11, r11
     f86:	31 f4       	brne	.+12     	; 0xf94 <conv_brk+0x144>
     f88:	01 15       	cp	r16, r1
     f8a:	11 05       	cpc	r17, r1
     f8c:	29 f0       	breq	.+10     	; 0xf98 <conv_brk+0x148>
     f8e:	f8 01       	movw	r30, r16
     f90:	10 82       	st	Z, r1
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <conv_brk+0x148>
     f94:	ee 24       	eor	r14, r14
     f96:	ff 24       	eor	r15, r15
     f98:	c7 01       	movw	r24, r14
     f9a:	a0 96       	adiw	r28, 0x20	; 32
     f9c:	ee e0       	ldi	r30, 0x0E	; 14
     f9e:	0c 94 63 38 	jmp	0x70c6	; 0x70c6 <__epilogue_restores__+0x8>

00000fa2 <vfscanf>:
     fa2:	a0 e0       	ldi	r26, 0x00	; 0
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e7 ed       	ldi	r30, 0xD7	; 215
     fa8:	f7 e0       	ldi	r31, 0x07	; 7
     faa:	0c 94 47 38 	jmp	0x708e	; 0x708e <__prologue_saves__+0x8>
     fae:	5c 01       	movw	r10, r24
     fb0:	6b 01       	movw	r12, r22
     fb2:	3a 01       	movw	r6, r20
     fb4:	fc 01       	movw	r30, r24
     fb6:	17 82       	std	Z+7, r1	; 0x07
     fb8:	16 82       	std	Z+6, r1	; 0x06
     fba:	88 24       	eor	r8, r8
     fbc:	ea c0       	rjmp	.+468    	; 0x1192 <vfscanf+0x1f0>
     fbe:	81 2f       	mov	r24, r17
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	0e 94 3b 38 	call	0x7076	; 0x7076 <isspace>
     fc6:	89 2b       	or	r24, r25
     fc8:	21 f0       	breq	.+8      	; 0xfd2 <vfscanf+0x30>
     fca:	c5 01       	movw	r24, r10
     fcc:	0e 94 87 06 	call	0xd0e	; 0xd0e <skip_spaces>
     fd0:	e0 c0       	rjmp	.+448    	; 0x1192 <vfscanf+0x1f0>
     fd2:	15 32       	cpi	r17, 0x25	; 37
     fd4:	49 f4       	brne	.+18     	; 0xfe8 <vfscanf+0x46>
     fd6:	f6 01       	movw	r30, r12
     fd8:	f3 fc       	sbrc	r15, 3
     fda:	65 91       	lpm	r22, Z+
     fdc:	f3 fe       	sbrs	r15, 3
     fde:	61 91       	ld	r22, Z+
     fe0:	6f 01       	movw	r12, r30
     fe2:	65 32       	cpi	r22, 0x25	; 37
     fe4:	69 f4       	brne	.+26     	; 0x1000 <vfscanf+0x5e>
     fe6:	15 e2       	ldi	r17, 0x25	; 37
     fe8:	c5 01       	movw	r24, r10
     fea:	0e 94 03 09 	call	0x1206	; 0x1206 <fgetc>
     fee:	97 fd       	sbrc	r25, 7
     ff0:	dc c0       	rjmp	.+440    	; 0x11aa <vfscanf+0x208>
     ff2:	18 17       	cp	r17, r24
     ff4:	09 f4       	brne	.+2      	; 0xff8 <vfscanf+0x56>
     ff6:	cd c0       	rjmp	.+410    	; 0x1192 <vfscanf+0x1f0>
     ff8:	b5 01       	movw	r22, r10
     ffa:	0e 94 71 09 	call	0x12e2	; 0x12e2 <ungetc>
     ffe:	da c0       	rjmp	.+436    	; 0x11b4 <vfscanf+0x212>
    1000:	6a 32       	cpi	r22, 0x2A	; 42
    1002:	19 f0       	breq	.+6      	; 0x100a <vfscanf+0x68>
    1004:	16 2f       	mov	r17, r22
    1006:	00 e0       	ldi	r16, 0x00	; 0
    1008:	06 c0       	rjmp	.+12     	; 0x1016 <vfscanf+0x74>
    100a:	f3 fc       	sbrc	r15, 3
    100c:	15 91       	lpm	r17, Z+
    100e:	f3 fe       	sbrs	r15, 3
    1010:	11 91       	ld	r17, Z+
    1012:	6f 01       	movw	r12, r30
    1014:	01 e0       	ldi	r16, 0x01	; 1
    1016:	99 24       	eor	r9, r9
    1018:	0f c0       	rjmp	.+30     	; 0x1038 <vfscanf+0x96>
    101a:	02 60       	ori	r16, 0x02	; 2
    101c:	69 2d       	mov	r22, r9
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	40 e2       	ldi	r20, 0x20	; 32
    1026:	0e 94 59 06 	call	0xcb2	; 0xcb2 <mulacc>
    102a:	96 2e       	mov	r9, r22
    102c:	f6 01       	movw	r30, r12
    102e:	f3 fc       	sbrc	r15, 3
    1030:	15 91       	lpm	r17, Z+
    1032:	f3 fe       	sbrs	r15, 3
    1034:	11 91       	ld	r17, Z+
    1036:	6f 01       	movw	r12, r30
    1038:	21 2f       	mov	r18, r17
    103a:	20 53       	subi	r18, 0x30	; 48
    103c:	2a 30       	cpi	r18, 0x0A	; 10
    103e:	68 f3       	brcs	.-38     	; 0x101a <vfscanf+0x78>
    1040:	01 fd       	sbrc	r16, 1
    1042:	03 c0       	rjmp	.+6      	; 0x104a <vfscanf+0xa8>
    1044:	99 24       	eor	r9, r9
    1046:	9a 94       	dec	r9
    1048:	03 c0       	rjmp	.+6      	; 0x1050 <vfscanf+0xae>
    104a:	99 20       	and	r9, r9
    104c:	09 f4       	brne	.+2      	; 0x1050 <vfscanf+0xae>
    104e:	b2 c0       	rjmp	.+356    	; 0x11b4 <vfscanf+0x212>
    1050:	18 36       	cpi	r17, 0x68	; 104
    1052:	21 f0       	breq	.+8      	; 0x105c <vfscanf+0xba>
    1054:	1c 36       	cpi	r17, 0x6C	; 108
    1056:	99 f4       	brne	.+38     	; 0x107e <vfscanf+0xdc>
    1058:	f6 01       	movw	r30, r12
    105a:	0b c0       	rjmp	.+22     	; 0x1072 <vfscanf+0xd0>
    105c:	f6 01       	movw	r30, r12
    105e:	f3 fc       	sbrc	r15, 3
    1060:	65 91       	lpm	r22, Z+
    1062:	f3 fe       	sbrs	r15, 3
    1064:	61 91       	ld	r22, Z+
    1066:	68 36       	cpi	r22, 0x68	; 104
    1068:	19 f0       	breq	.+6      	; 0x1070 <vfscanf+0xce>
    106a:	6f 01       	movw	r12, r30
    106c:	16 2f       	mov	r17, r22
    106e:	07 c0       	rjmp	.+14     	; 0x107e <vfscanf+0xdc>
    1070:	08 60       	ori	r16, 0x08	; 8
    1072:	04 60       	ori	r16, 0x04	; 4
    1074:	f3 fc       	sbrc	r15, 3
    1076:	15 91       	lpm	r17, Z+
    1078:	f3 fe       	sbrs	r15, 3
    107a:	11 91       	ld	r17, Z+
    107c:	6f 01       	movw	r12, r30
    107e:	11 23       	and	r17, r17
    1080:	09 f4       	brne	.+2      	; 0x1084 <vfscanf+0xe2>
    1082:	98 c0       	rjmp	.+304    	; 0x11b4 <vfscanf+0x212>
    1084:	8a e2       	ldi	r24, 0x2A	; 42
    1086:	97 e0       	ldi	r25, 0x07	; 7
    1088:	61 2f       	mov	r22, r17
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <strchr_P>
    1090:	89 2b       	or	r24, r25
    1092:	09 f4       	brne	.+2      	; 0x1096 <vfscanf+0xf4>
    1094:	8f c0       	rjmp	.+286    	; 0x11b4 <vfscanf+0x212>
    1096:	80 2f       	mov	r24, r16
    1098:	00 ff       	sbrs	r16, 0
    109a:	03 c0       	rjmp	.+6      	; 0x10a2 <vfscanf+0x100>
    109c:	ee 24       	eor	r14, r14
    109e:	ff 24       	eor	r15, r15
    10a0:	07 c0       	rjmp	.+14     	; 0x10b0 <vfscanf+0x10e>
    10a2:	f3 01       	movw	r30, r6
    10a4:	e0 80       	ld	r14, Z
    10a6:	f1 80       	ldd	r15, Z+1	; 0x01
    10a8:	22 e0       	ldi	r18, 0x02	; 2
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	62 0e       	add	r6, r18
    10ae:	73 1e       	adc	r7, r19
    10b0:	1e 36       	cpi	r17, 0x6E	; 110
    10b2:	51 f4       	brne	.+20     	; 0x10c8 <vfscanf+0x126>
    10b4:	f5 01       	movw	r30, r10
    10b6:	46 81       	ldd	r20, Z+6	; 0x06
    10b8:	57 81       	ldd	r21, Z+7	; 0x07
    10ba:	60 e0       	ldi	r22, 0x00	; 0
    10bc:	70 e0       	ldi	r23, 0x00	; 0
    10be:	c7 01       	movw	r24, r14
    10c0:	20 2f       	mov	r18, r16
    10c2:	0e 94 4d 06 	call	0xc9a	; 0xc9a <putval>
    10c6:	65 c0       	rjmp	.+202    	; 0x1192 <vfscanf+0x1f0>
    10c8:	13 36       	cpi	r17, 0x63	; 99
    10ca:	91 f4       	brne	.+36     	; 0x10f0 <vfscanf+0x14e>
    10cc:	81 fd       	sbrc	r24, 1
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <vfscanf+0x132>
    10d0:	99 24       	eor	r9, r9
    10d2:	93 94       	inc	r9
    10d4:	c5 01       	movw	r24, r10
    10d6:	0e 94 03 09 	call	0x1206	; 0x1206 <fgetc>
    10da:	97 fd       	sbrc	r25, 7
    10dc:	66 c0       	rjmp	.+204    	; 0x11aa <vfscanf+0x208>
    10de:	e1 14       	cp	r14, r1
    10e0:	f1 04       	cpc	r15, r1
    10e2:	19 f0       	breq	.+6      	; 0x10ea <vfscanf+0x148>
    10e4:	f7 01       	movw	r30, r14
    10e6:	81 93       	st	Z+, r24
    10e8:	7f 01       	movw	r14, r30
    10ea:	9a 94       	dec	r9
    10ec:	99 f7       	brne	.-26     	; 0x10d4 <vfscanf+0x132>
    10ee:	4f c0       	rjmp	.+158    	; 0x118e <vfscanf+0x1ec>
    10f0:	1b 35       	cpi	r17, 0x5B	; 91
    10f2:	59 f4       	brne	.+22     	; 0x110a <vfscanf+0x168>
    10f4:	c5 01       	movw	r24, r10
    10f6:	69 2d       	mov	r22, r9
    10f8:	a7 01       	movw	r20, r14
    10fa:	96 01       	movw	r18, r12
    10fc:	0e 94 28 07 	call	0xe50	; 0xe50 <conv_brk>
    1100:	6c 01       	movw	r12, r24
    1102:	00 97       	sbiw	r24, 0x00	; 0
    1104:	09 f0       	breq	.+2      	; 0x1108 <vfscanf+0x166>
    1106:	43 c0       	rjmp	.+134    	; 0x118e <vfscanf+0x1ec>
    1108:	3d c0       	rjmp	.+122    	; 0x1184 <vfscanf+0x1e2>
    110a:	c5 01       	movw	r24, r10
    110c:	0e 94 87 06 	call	0xd0e	; 0xd0e <skip_spaces>
    1110:	97 fd       	sbrc	r25, 7
    1112:	4b c0       	rjmp	.+150    	; 0x11aa <vfscanf+0x208>
    1114:	1f 36       	cpi	r17, 0x6F	; 111
    1116:	59 f1       	breq	.+86     	; 0x116e <vfscanf+0x1cc>
    1118:	10 37       	cpi	r17, 0x70	; 112
    111a:	28 f4       	brcc	.+10     	; 0x1126 <vfscanf+0x184>
    111c:	14 36       	cpi	r17, 0x64	; 100
    111e:	29 f1       	breq	.+74     	; 0x116a <vfscanf+0x1c8>
    1120:	19 36       	cpi	r17, 0x69	; 105
    1122:	39 f5       	brne	.+78     	; 0x1172 <vfscanf+0x1d0>
    1124:	27 c0       	rjmp	.+78     	; 0x1174 <vfscanf+0x1d2>
    1126:	13 37       	cpi	r17, 0x73	; 115
    1128:	19 f0       	breq	.+6      	; 0x1130 <vfscanf+0x18e>
    112a:	15 37       	cpi	r17, 0x75	; 117
    112c:	11 f5       	brne	.+68     	; 0x1172 <vfscanf+0x1d0>
    112e:	1d c0       	rjmp	.+58     	; 0x116a <vfscanf+0x1c8>
    1130:	c5 01       	movw	r24, r10
    1132:	0e 94 03 09 	call	0x1206	; 0x1206 <fgetc>
    1136:	ec 01       	movw	r28, r24
    1138:	97 fd       	sbrc	r25, 7
    113a:	11 c0       	rjmp	.+34     	; 0x115e <vfscanf+0x1bc>
    113c:	0e 94 3b 38 	call	0x7076	; 0x7076 <isspace>
    1140:	89 2b       	or	r24, r25
    1142:	29 f0       	breq	.+10     	; 0x114e <vfscanf+0x1ac>
    1144:	ce 01       	movw	r24, r28
    1146:	b5 01       	movw	r22, r10
    1148:	0e 94 71 09 	call	0x12e2	; 0x12e2 <ungetc>
    114c:	08 c0       	rjmp	.+16     	; 0x115e <vfscanf+0x1bc>
    114e:	e1 14       	cp	r14, r1
    1150:	f1 04       	cpc	r15, r1
    1152:	19 f0       	breq	.+6      	; 0x115a <vfscanf+0x1b8>
    1154:	f7 01       	movw	r30, r14
    1156:	c1 93       	st	Z+, r28
    1158:	7f 01       	movw	r14, r30
    115a:	9a 94       	dec	r9
    115c:	49 f7       	brne	.-46     	; 0x1130 <vfscanf+0x18e>
    115e:	e1 14       	cp	r14, r1
    1160:	f1 04       	cpc	r15, r1
    1162:	a9 f0       	breq	.+42     	; 0x118e <vfscanf+0x1ec>
    1164:	f7 01       	movw	r30, r14
    1166:	10 82       	st	Z, r1
    1168:	12 c0       	rjmp	.+36     	; 0x118e <vfscanf+0x1ec>
    116a:	00 62       	ori	r16, 0x20	; 32
    116c:	03 c0       	rjmp	.+6      	; 0x1174 <vfscanf+0x1d2>
    116e:	00 61       	ori	r16, 0x10	; 16
    1170:	01 c0       	rjmp	.+2      	; 0x1174 <vfscanf+0x1d2>
    1172:	00 64       	ori	r16, 0x40	; 64
    1174:	c5 01       	movw	r24, r10
    1176:	69 2d       	mov	r22, r9
    1178:	a7 01       	movw	r20, r14
    117a:	20 2f       	mov	r18, r16
    117c:	0e 94 a0 06 	call	0xd40	; 0xd40 <conv_int>
    1180:	88 23       	and	r24, r24
    1182:	29 f4       	brne	.+10     	; 0x118e <vfscanf+0x1ec>
    1184:	f5 01       	movw	r30, r10
    1186:	83 81       	ldd	r24, Z+3	; 0x03
    1188:	80 73       	andi	r24, 0x30	; 48
    118a:	79 f4       	brne	.+30     	; 0x11aa <vfscanf+0x208>
    118c:	13 c0       	rjmp	.+38     	; 0x11b4 <vfscanf+0x212>
    118e:	00 ff       	sbrs	r16, 0
    1190:	83 94       	inc	r8
    1192:	f5 01       	movw	r30, r10
    1194:	f3 80       	ldd	r15, Z+3	; 0x03
    1196:	f6 01       	movw	r30, r12
    1198:	f3 fc       	sbrc	r15, 3
    119a:	15 91       	lpm	r17, Z+
    119c:	f3 fe       	sbrs	r15, 3
    119e:	11 91       	ld	r17, Z+
    11a0:	6f 01       	movw	r12, r30
    11a2:	11 23       	and	r17, r17
    11a4:	09 f0       	breq	.+2      	; 0x11a8 <vfscanf+0x206>
    11a6:	0b cf       	rjmp	.-490    	; 0xfbe <vfscanf+0x1c>
    11a8:	05 c0       	rjmp	.+10     	; 0x11b4 <vfscanf+0x212>
    11aa:	88 20       	and	r8, r8
    11ac:	19 f4       	brne	.+6      	; 0x11b4 <vfscanf+0x212>
    11ae:	2f ef       	ldi	r18, 0xFF	; 255
    11b0:	3f ef       	ldi	r19, 0xFF	; 255
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <vfscanf+0x216>
    11b4:	28 2d       	mov	r18, r8
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	c9 01       	movw	r24, r18
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	ee e0       	ldi	r30, 0x0E	; 14
    11c0:	0c 94 63 38 	jmp	0x70c6	; 0x70c6 <__epilogue_restores__+0x8>

000011c4 <strchr_P>:
    11c4:	fc 01       	movw	r30, r24
    11c6:	05 90       	lpm	r0, Z+
    11c8:	06 16       	cp	r0, r22
    11ca:	21 f0       	breq	.+8      	; 0x11d4 <strchr_P+0x10>
    11cc:	00 20       	and	r0, r0
    11ce:	d9 f7       	brne	.-10     	; 0x11c6 <strchr_P+0x2>
    11d0:	c0 01       	movw	r24, r0
    11d2:	08 95       	ret
    11d4:	31 97       	sbiw	r30, 0x01	; 1
    11d6:	cf 01       	movw	r24, r30
    11d8:	08 95       	ret

000011da <strnlen_P>:
    11da:	fc 01       	movw	r30, r24
    11dc:	05 90       	lpm	r0, Z+
    11de:	61 50       	subi	r22, 0x01	; 1
    11e0:	70 40       	sbci	r23, 0x00	; 0
    11e2:	01 10       	cpse	r0, r1
    11e4:	d8 f7       	brcc	.-10     	; 0x11dc <strnlen_P+0x2>
    11e6:	80 95       	com	r24
    11e8:	90 95       	com	r25
    11ea:	8e 0f       	add	r24, r30
    11ec:	9f 1f       	adc	r25, r31
    11ee:	08 95       	ret

000011f0 <strnlen>:
    11f0:	fc 01       	movw	r30, r24
    11f2:	61 50       	subi	r22, 0x01	; 1
    11f4:	70 40       	sbci	r23, 0x00	; 0
    11f6:	01 90       	ld	r0, Z+
    11f8:	01 10       	cpse	r0, r1
    11fa:	d8 f7       	brcc	.-10     	; 0x11f2 <strnlen+0x2>
    11fc:	80 95       	com	r24
    11fe:	90 95       	com	r25
    1200:	8e 0f       	add	r24, r30
    1202:	9f 1f       	adc	r25, r31
    1204:	08 95       	ret

00001206 <fgetc>:
    1206:	cf 93       	push	r28
    1208:	df 93       	push	r29
    120a:	ec 01       	movw	r28, r24
    120c:	4b 81       	ldd	r20, Y+3	; 0x03
    120e:	40 ff       	sbrs	r20, 0
    1210:	1a c0       	rjmp	.+52     	; 0x1246 <fgetc+0x40>
    1212:	46 ff       	sbrs	r20, 6
    1214:	0a c0       	rjmp	.+20     	; 0x122a <fgetc+0x24>
    1216:	4f 7b       	andi	r20, 0xBF	; 191
    1218:	4b 83       	std	Y+3, r20	; 0x03
    121a:	8e 81       	ldd	r24, Y+6	; 0x06
    121c:	9f 81       	ldd	r25, Y+7	; 0x07
    121e:	01 96       	adiw	r24, 0x01	; 1
    1220:	9f 83       	std	Y+7, r25	; 0x07
    1222:	8e 83       	std	Y+6, r24	; 0x06
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	28 2f       	mov	r18, r24
    1228:	2b c0       	rjmp	.+86     	; 0x1280 <fgetc+0x7a>
    122a:	42 ff       	sbrs	r20, 2
    122c:	13 c0       	rjmp	.+38     	; 0x1254 <fgetc+0x4e>
    122e:	e8 81       	ld	r30, Y
    1230:	f9 81       	ldd	r31, Y+1	; 0x01
    1232:	80 81       	ld	r24, Z
    1234:	28 2f       	mov	r18, r24
    1236:	33 27       	eor	r19, r19
    1238:	27 fd       	sbrc	r18, 7
    123a:	30 95       	com	r19
    123c:	21 15       	cp	r18, r1
    123e:	31 05       	cpc	r19, r1
    1240:	29 f4       	brne	.+10     	; 0x124c <fgetc+0x46>
    1242:	40 62       	ori	r20, 0x20	; 32
    1244:	4b 83       	std	Y+3, r20	; 0x03
    1246:	2f ef       	ldi	r18, 0xFF	; 255
    1248:	3f ef       	ldi	r19, 0xFF	; 255
    124a:	1b c0       	rjmp	.+54     	; 0x1282 <fgetc+0x7c>
    124c:	31 96       	adiw	r30, 0x01	; 1
    124e:	f9 83       	std	Y+1, r31	; 0x01
    1250:	e8 83       	st	Y, r30
    1252:	11 c0       	rjmp	.+34     	; 0x1276 <fgetc+0x70>
    1254:	ea 85       	ldd	r30, Y+10	; 0x0a
    1256:	fb 85       	ldd	r31, Y+11	; 0x0b
    1258:	ce 01       	movw	r24, r28
    125a:	09 95       	icall
    125c:	9c 01       	movw	r18, r24
    125e:	97 ff       	sbrs	r25, 7
    1260:	0a c0       	rjmp	.+20     	; 0x1276 <fgetc+0x70>
    1262:	9b 81       	ldd	r25, Y+3	; 0x03
    1264:	2f 5f       	subi	r18, 0xFF	; 255
    1266:	3f 4f       	sbci	r19, 0xFF	; 255
    1268:	11 f0       	breq	.+4      	; 0x126e <fgetc+0x68>
    126a:	80 e2       	ldi	r24, 0x20	; 32
    126c:	01 c0       	rjmp	.+2      	; 0x1270 <fgetc+0x6a>
    126e:	80 e1       	ldi	r24, 0x10	; 16
    1270:	89 2b       	or	r24, r25
    1272:	8b 83       	std	Y+3, r24	; 0x03
    1274:	e8 cf       	rjmp	.-48     	; 0x1246 <fgetc+0x40>
    1276:	8e 81       	ldd	r24, Y+6	; 0x06
    1278:	9f 81       	ldd	r25, Y+7	; 0x07
    127a:	01 96       	adiw	r24, 0x01	; 1
    127c:	9f 83       	std	Y+7, r25	; 0x07
    127e:	8e 83       	std	Y+6, r24	; 0x06
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	c9 01       	movw	r24, r18
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	08 95       	ret

0000128a <fputc>:
    128a:	0f 93       	push	r16
    128c:	1f 93       	push	r17
    128e:	cf 93       	push	r28
    1290:	df 93       	push	r29
    1292:	8c 01       	movw	r16, r24
    1294:	eb 01       	movw	r28, r22
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	81 ff       	sbrs	r24, 1
    129a:	1b c0       	rjmp	.+54     	; 0x12d2 <fputc+0x48>
    129c:	82 ff       	sbrs	r24, 2
    129e:	0d c0       	rjmp	.+26     	; 0x12ba <fputc+0x30>
    12a0:	2e 81       	ldd	r18, Y+6	; 0x06
    12a2:	3f 81       	ldd	r19, Y+7	; 0x07
    12a4:	8c 81       	ldd	r24, Y+4	; 0x04
    12a6:	9d 81       	ldd	r25, Y+5	; 0x05
    12a8:	28 17       	cp	r18, r24
    12aa:	39 07       	cpc	r19, r25
    12ac:	64 f4       	brge	.+24     	; 0x12c6 <fputc+0x3c>
    12ae:	e8 81       	ld	r30, Y
    12b0:	f9 81       	ldd	r31, Y+1	; 0x01
    12b2:	01 93       	st	Z+, r16
    12b4:	f9 83       	std	Y+1, r31	; 0x01
    12b6:	e8 83       	st	Y, r30
    12b8:	06 c0       	rjmp	.+12     	; 0x12c6 <fputc+0x3c>
    12ba:	e8 85       	ldd	r30, Y+8	; 0x08
    12bc:	f9 85       	ldd	r31, Y+9	; 0x09
    12be:	80 2f       	mov	r24, r16
    12c0:	09 95       	icall
    12c2:	89 2b       	or	r24, r25
    12c4:	31 f4       	brne	.+12     	; 0x12d2 <fputc+0x48>
    12c6:	8e 81       	ldd	r24, Y+6	; 0x06
    12c8:	9f 81       	ldd	r25, Y+7	; 0x07
    12ca:	01 96       	adiw	r24, 0x01	; 1
    12cc:	9f 83       	std	Y+7, r25	; 0x07
    12ce:	8e 83       	std	Y+6, r24	; 0x06
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <fputc+0x4c>
    12d2:	0f ef       	ldi	r16, 0xFF	; 255
    12d4:	1f ef       	ldi	r17, 0xFF	; 255
    12d6:	c8 01       	movw	r24, r16
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	1f 91       	pop	r17
    12de:	0f 91       	pop	r16
    12e0:	08 95       	ret

000012e2 <ungetc>:
    12e2:	9c 01       	movw	r18, r24
    12e4:	fb 01       	movw	r30, r22
    12e6:	83 81       	ldd	r24, Z+3	; 0x03
    12e8:	80 ff       	sbrs	r24, 0
    12ea:	11 c0       	rjmp	.+34     	; 0x130e <ungetc+0x2c>
    12ec:	86 fd       	sbrc	r24, 6
    12ee:	0f c0       	rjmp	.+30     	; 0x130e <ungetc+0x2c>
    12f0:	9f ef       	ldi	r25, 0xFF	; 255
    12f2:	2f 3f       	cpi	r18, 0xFF	; 255
    12f4:	39 07       	cpc	r19, r25
    12f6:	59 f0       	breq	.+22     	; 0x130e <ungetc+0x2c>
    12f8:	22 83       	std	Z+2, r18	; 0x02
    12fa:	80 64       	ori	r24, 0x40	; 64
    12fc:	8f 7d       	andi	r24, 0xDF	; 223
    12fe:	83 83       	std	Z+3, r24	; 0x03
    1300:	86 81       	ldd	r24, Z+6	; 0x06
    1302:	97 81       	ldd	r25, Z+7	; 0x07
    1304:	01 97       	sbiw	r24, 0x01	; 1
    1306:	97 83       	std	Z+7, r25	; 0x07
    1308:	86 83       	std	Z+6, r24	; 0x06
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <ungetc+0x30>
    130e:	2f ef       	ldi	r18, 0xFF	; 255
    1310:	3f ef       	ldi	r19, 0xFF	; 255
    1312:	c9 01       	movw	r24, r18
    1314:	08 95       	ret

00001316 <__ultoa_invert>:
    1316:	fa 01       	movw	r30, r20
    1318:	aa 27       	eor	r26, r26
    131a:	28 30       	cpi	r18, 0x08	; 8
    131c:	51 f1       	breq	.+84     	; 0x1372 <__ultoa_invert+0x5c>
    131e:	20 31       	cpi	r18, 0x10	; 16
    1320:	81 f1       	breq	.+96     	; 0x1382 <__ultoa_invert+0x6c>
    1322:	e8 94       	clt
    1324:	6f 93       	push	r22
    1326:	6e 7f       	andi	r22, 0xFE	; 254
    1328:	6e 5f       	subi	r22, 0xFE	; 254
    132a:	7f 4f       	sbci	r23, 0xFF	; 255
    132c:	8f 4f       	sbci	r24, 0xFF	; 255
    132e:	9f 4f       	sbci	r25, 0xFF	; 255
    1330:	af 4f       	sbci	r26, 0xFF	; 255
    1332:	b1 e0       	ldi	r27, 0x01	; 1
    1334:	3e d0       	rcall	.+124    	; 0x13b2 <__ultoa_invert+0x9c>
    1336:	b4 e0       	ldi	r27, 0x04	; 4
    1338:	3c d0       	rcall	.+120    	; 0x13b2 <__ultoa_invert+0x9c>
    133a:	67 0f       	add	r22, r23
    133c:	78 1f       	adc	r23, r24
    133e:	89 1f       	adc	r24, r25
    1340:	9a 1f       	adc	r25, r26
    1342:	a1 1d       	adc	r26, r1
    1344:	68 0f       	add	r22, r24
    1346:	79 1f       	adc	r23, r25
    1348:	8a 1f       	adc	r24, r26
    134a:	91 1d       	adc	r25, r1
    134c:	a1 1d       	adc	r26, r1
    134e:	6a 0f       	add	r22, r26
    1350:	71 1d       	adc	r23, r1
    1352:	81 1d       	adc	r24, r1
    1354:	91 1d       	adc	r25, r1
    1356:	a1 1d       	adc	r26, r1
    1358:	20 d0       	rcall	.+64     	; 0x139a <__ultoa_invert+0x84>
    135a:	09 f4       	brne	.+2      	; 0x135e <__ultoa_invert+0x48>
    135c:	68 94       	set
    135e:	3f 91       	pop	r19
    1360:	2a e0       	ldi	r18, 0x0A	; 10
    1362:	26 9f       	mul	r18, r22
    1364:	11 24       	eor	r1, r1
    1366:	30 19       	sub	r19, r0
    1368:	30 5d       	subi	r19, 0xD0	; 208
    136a:	31 93       	st	Z+, r19
    136c:	de f6       	brtc	.-74     	; 0x1324 <__ultoa_invert+0xe>
    136e:	cf 01       	movw	r24, r30
    1370:	08 95       	ret
    1372:	46 2f       	mov	r20, r22
    1374:	47 70       	andi	r20, 0x07	; 7
    1376:	40 5d       	subi	r20, 0xD0	; 208
    1378:	41 93       	st	Z+, r20
    137a:	b3 e0       	ldi	r27, 0x03	; 3
    137c:	0f d0       	rcall	.+30     	; 0x139c <__ultoa_invert+0x86>
    137e:	c9 f7       	brne	.-14     	; 0x1372 <__ultoa_invert+0x5c>
    1380:	f6 cf       	rjmp	.-20     	; 0x136e <__ultoa_invert+0x58>
    1382:	46 2f       	mov	r20, r22
    1384:	4f 70       	andi	r20, 0x0F	; 15
    1386:	40 5d       	subi	r20, 0xD0	; 208
    1388:	4a 33       	cpi	r20, 0x3A	; 58
    138a:	18 f0       	brcs	.+6      	; 0x1392 <__ultoa_invert+0x7c>
    138c:	49 5d       	subi	r20, 0xD9	; 217
    138e:	31 fd       	sbrc	r19, 1
    1390:	40 52       	subi	r20, 0x20	; 32
    1392:	41 93       	st	Z+, r20
    1394:	02 d0       	rcall	.+4      	; 0x139a <__ultoa_invert+0x84>
    1396:	a9 f7       	brne	.-22     	; 0x1382 <__ultoa_invert+0x6c>
    1398:	ea cf       	rjmp	.-44     	; 0x136e <__ultoa_invert+0x58>
    139a:	b4 e0       	ldi	r27, 0x04	; 4
    139c:	a6 95       	lsr	r26
    139e:	97 95       	ror	r25
    13a0:	87 95       	ror	r24
    13a2:	77 95       	ror	r23
    13a4:	67 95       	ror	r22
    13a6:	ba 95       	dec	r27
    13a8:	c9 f7       	brne	.-14     	; 0x139c <__ultoa_invert+0x86>
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	61 05       	cpc	r22, r1
    13ae:	71 05       	cpc	r23, r1
    13b0:	08 95       	ret
    13b2:	9b 01       	movw	r18, r22
    13b4:	ac 01       	movw	r20, r24
    13b6:	0a 2e       	mov	r0, r26
    13b8:	06 94       	lsr	r0
    13ba:	57 95       	ror	r21
    13bc:	47 95       	ror	r20
    13be:	37 95       	ror	r19
    13c0:	27 95       	ror	r18
    13c2:	ba 95       	dec	r27
    13c4:	c9 f7       	brne	.-14     	; 0x13b8 <__ultoa_invert+0xa2>
    13c6:	62 0f       	add	r22, r18
    13c8:	73 1f       	adc	r23, r19
    13ca:	84 1f       	adc	r24, r20
    13cc:	95 1f       	adc	r25, r21
    13ce:	a0 1d       	adc	r26, r0
    13d0:	08 95       	ret

000013d2 <_ZN8SPIClass11setBitOrderEh>:

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  if(bitOrder == LSBFIRST) {
    13d2:	88 23       	and	r24, r24
    13d4:	19 f4       	brne	.+6      	; 0x13dc <_ZN8SPIClass11setBitOrderEh+0xa>
    SPCR |= _BV(DORD);
    13d6:	8c b5       	in	r24, 0x2c	; 44
    13d8:	80 62       	ori	r24, 0x20	; 32
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <_ZN8SPIClass11setBitOrderEh+0xe>
  } else {
    SPCR &= ~(_BV(DORD));
    13dc:	8c b5       	in	r24, 0x2c	; 44
    13de:	8f 7d       	andi	r24, 0xDF	; 223
    13e0:	8c bd       	out	0x2c, r24	; 44
    13e2:	08 95       	ret

000013e4 <_ZN8SPIClass11setDataModeEh>:
  }
}

void SPIClass::setDataMode(uint8_t mode)
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
    13e4:	9c b5       	in	r25, 0x2c	; 44
    13e6:	93 7f       	andi	r25, 0xF3	; 243
    13e8:	98 2b       	or	r25, r24
    13ea:	9c bd       	out	0x2c, r25	; 44
}
    13ec:	08 95       	ret

000013ee <_ZN8SPIClass15setClockDividerEh>:

void SPIClass::setClockDivider(uint8_t rate)
{
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
    13ee:	2c b5       	in	r18, 0x2c	; 44
    13f0:	38 2f       	mov	r19, r24
    13f2:	33 70       	andi	r19, 0x03	; 3
    13f4:	2c 7f       	andi	r18, 0xFC	; 252
    13f6:	32 2b       	or	r19, r18
    13f8:	3c bd       	out	0x2c, r19	; 44
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
    13fa:	2d b5       	in	r18, 0x2d	; 45
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	95 95       	asr	r25
    1400:	87 95       	ror	r24
    1402:	95 95       	asr	r25
    1404:	87 95       	ror	r24
    1406:	81 70       	andi	r24, 0x01	; 1
    1408:	2e 7f       	andi	r18, 0xFE	; 254
    140a:	82 2b       	or	r24, r18
    140c:	8d bd       	out	0x2d, r24	; 45
}
    140e:	08 95       	ret

00001410 <_ZN8SPIClass5beginEv>:
SPIClass SPI;

void SPIClass::begin() {

  // Set SS to high so a connected chip will be "deselected" by default
  digitalWrite(SS, HIGH);
    1410:	8a e0       	ldi	r24, 0x0A	; 10
    1412:	61 e0       	ldi	r22, 0x01	; 1
    1414:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <digitalWrite>

  // When the SS pin is set as OUTPUT, it can be used as
  // a general purpose output port (it doesn't influence
  // SPI operations).
  pinMode(SS, OUTPUT);
    1418:	8a e0       	ldi	r24, 0x0A	; 10
    141a:	61 e0       	ldi	r22, 0x01	; 1
    141c:	0e 94 dc 36 	call	0x6db8	; 0x6db8 <pinMode>

  // Warning: if the SS pin ever becomes a LOW INPUT then SPI
  // automatically switches to Slave, so the data direction of
  // the SS pin MUST be kept as OUTPUT.
  SPCR |= _BV(MSTR);
    1420:	8c b5       	in	r24, 0x2c	; 44
    1422:	80 61       	ori	r24, 0x10	; 16
    1424:	8c bd       	out	0x2c, r24	; 44
  SPCR |= _BV(SPE);
    1426:	8c b5       	in	r24, 0x2c	; 44
    1428:	80 64       	ori	r24, 0x40	; 64
    142a:	8c bd       	out	0x2c, r24	; 44
  // MISO pin automatically overrides to INPUT.
  // By doing this AFTER enabling SPI, we avoid accidentally
  // clocking in a single bit since the lines go directly
  // from "input" to SPI control.  
  // http://code.google.com/p/arduino/issues/detail?id=888
  pinMode(SCK, OUTPUT);
    142c:	8d e0       	ldi	r24, 0x0D	; 13
    142e:	61 e0       	ldi	r22, 0x01	; 1
    1430:	0e 94 dc 36 	call	0x6db8	; 0x6db8 <pinMode>
  pinMode(MOSI, OUTPUT);
    1434:	8b e0       	ldi	r24, 0x0B	; 11
    1436:	61 e0       	ldi	r22, 0x01	; 1
    1438:	0e 94 dc 36 	call	0x6db8	; 0x6db8 <pinMode>
}
    143c:	08 95       	ret

0000143e <UINT32_TO_STREAM_f>:
//!  @brief                This function is used for copying 32 bit to stream
//!						   while converting to little endian format.
//
//*****************************************************************************

UINT8* UINT32_TO_STREAM_f (UINT8 *p, UINT32 u32)
    143e:	cf 93       	push	r28
    1440:	df 93       	push	r29
    1442:	fc 01       	movw	r30, r24
{
	*(p)++ = (UINT8)(u32);
    1444:	dc 01       	movw	r26, r24
    1446:	4d 93       	st	X+, r20
    1448:	9d 01       	movw	r18, r26
	*(p)++ = (UINT8)((u32) >> 8);
    144a:	bb 27       	eor	r27, r27
    144c:	a7 2f       	mov	r26, r23
    144e:	96 2f       	mov	r25, r22
    1450:	85 2f       	mov	r24, r21
    1452:	81 83       	std	Z+1, r24	; 0x01
    1454:	f9 01       	movw	r30, r18
    1456:	31 96       	adiw	r30, 0x01	; 1
	*(p)++ = (UINT8)((u32) >> 16);
    1458:	cb 01       	movw	r24, r22
    145a:	aa 27       	eor	r26, r26
    145c:	bb 27       	eor	r27, r27
    145e:	e9 01       	movw	r28, r18
    1460:	89 83       	std	Y+1, r24	; 0x01
	*(p)++ = (UINT8)((u32) >> 24);
    1462:	47 2f       	mov	r20, r23
    1464:	55 27       	eor	r21, r21
    1466:	66 27       	eor	r22, r22
    1468:	77 27       	eor	r23, r23
    146a:	41 83       	std	Z+1, r20	; 0x01
    146c:	32 96       	adiw	r30, 0x02	; 2
	return p;
}
    146e:	cf 01       	movw	r24, r30
    1470:	df 91       	pop	r29
    1472:	cf 91       	pop	r28
    1474:	08 95       	ret

00001476 <UINT16_TO_STREAM_f>:
//!  @brief               This function is used for copying 16 bit to stream
//!                       while converting to little endian format.
//
//*****************************************************************************

UINT8* UINT16_TO_STREAM_f (UINT8 *p, UINT16 u16)
    1476:	dc 01       	movw	r26, r24
{
	*(p)++ = (UINT8)(u16);
    1478:	fc 01       	movw	r30, r24
    147a:	61 93       	st	Z+, r22
	*(p)++ = (UINT8)((u16) >> 8);
    147c:	11 96       	adiw	r26, 0x01	; 1
    147e:	7c 93       	st	X, r23
    1480:	31 96       	adiw	r30, 0x01	; 1
	return p;
}
    1482:	cf 01       	movw	r24, r30
    1484:	08 95       	ret

00001486 <STREAM_TO_UINT16_f>:
//!  @brief               This function is used for copying received stream to
//!                       16 bit in little endian format.
//
//*****************************************************************************

UINT16 STREAM_TO_UINT16_f(CHAR* cp, UINT16 offset)
    1486:	fb 01       	movw	r30, r22
{
  // Adafruit CC3k Host Driver Difference
  // Explicit cast to UINT8 pointer is required or decoding parameters breaks on Arduino.
  // Noted 12-12-2014 by tdicola
  UINT8 *p = (UINT8 *)cp;
    1488:	e8 0f       	add	r30, r24
    148a:	f9 1f       	adc	r31, r25
    148c:	31 81       	ldd	r19, Z+1	; 0x01
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	28 0f       	add	r18, r24
    1494:	31 1d       	adc	r19, r1
  DEBUGPRINT_F("\n\r");
  */

  return (UINT16)((UINT16)((UINT16)
          (*(p + offset + 1)) << 8) + (UINT16)(*(p + offset)));
}
    1496:	c9 01       	movw	r24, r18
    1498:	08 95       	ret

0000149a <STREAM_TO_UINT32_f>:
//!  @brief               This function is used for copying received stream to
//!                       32 bit in little endian format.
//
//*****************************************************************************

UINT32 STREAM_TO_UINT32_f(CHAR* cp, UINT16 offset)
    149a:	fb 01       	movw	r30, r22
{
  // Adafruit CC3k Host Driver Difference
  // Explicit cast to UINT8 pointer is required or decoding parameters breaks on Arduino.
  // Noted 12-12-2014 by tdicola
  UINT8 *p = (UINT8 *)cp;
    149c:	e8 0f       	add	r30, r24
    149e:	f9 1f       	adc	r31, r25
    14a0:	23 81       	ldd	r18, Z+3	; 0x03
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	40 e0       	ldi	r20, 0x00	; 0
    14a6:	50 e0       	ldi	r21, 0x00	; 0
    14a8:	52 2f       	mov	r21, r18
    14aa:	44 27       	eor	r20, r20
    14ac:	33 27       	eor	r19, r19
    14ae:	22 27       	eor	r18, r18
    14b0:	82 81       	ldd	r24, Z+2	; 0x02
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	a0 e0       	ldi	r26, 0x00	; 0
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	dc 01       	movw	r26, r24
    14ba:	99 27       	eor	r25, r25
    14bc:	88 27       	eor	r24, r24
    14be:	28 0f       	add	r18, r24
    14c0:	39 1f       	adc	r19, r25
    14c2:	4a 1f       	adc	r20, r26
    14c4:	5b 1f       	adc	r21, r27
    14c6:	80 81       	ld	r24, Z
    14c8:	28 0f       	add	r18, r24
    14ca:	31 1d       	adc	r19, r1
    14cc:	41 1d       	adc	r20, r1
    14ce:	51 1d       	adc	r21, r1
    14d0:	81 81       	ldd	r24, Z+1	; 0x01
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	a0 e0       	ldi	r26, 0x00	; 0
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	ba 2f       	mov	r27, r26
    14da:	a9 2f       	mov	r26, r25
    14dc:	98 2f       	mov	r25, r24
    14de:	88 27       	eor	r24, r24
    14e0:	28 0f       	add	r18, r24
    14e2:	39 1f       	adc	r19, r25
    14e4:	4a 1f       	adc	r20, r26
    14e6:	5b 1f       	adc	r21, r27

  return (UINT32)((UINT32)((UINT32)
	(*(p + offset + 3)) << 24) + (UINT32)((UINT32)
	(*(p + offset + 2)) << 16) + (UINT32)((UINT32)
	(*(p + offset + 1)) << 8) + (UINT32)(*(p + offset)));
}
    14e8:	b9 01       	movw	r22, r18
    14ea:	ca 01       	movw	r24, r20
    14ec:	08 95       	ret

000014ee <_Z10getFreeRamv>:
int getFreeRam(void) {
  char top;
  return &top - reinterpret_cast<char*>(sbrk(0));
}
#else // AVR 
int getFreeRam(void)
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <_Z10getFreeRamv+0x6>
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
{
  extern int  __bss_end;
  extern int  *__brkval;
  int free_memory;
  if((int)__brkval == 0) {
    14f8:	20 91 ba 06 	lds	r18, 0x06BA
    14fc:	30 91 bb 06 	lds	r19, 0x06BB
    1500:	ce 01       	movw	r24, r28
    1502:	01 96       	adiw	r24, 0x01	; 1
    1504:	21 15       	cp	r18, r1
    1506:	31 05       	cpc	r19, r1
    1508:	19 f4       	brne	.+6      	; 0x1510 <_Z10getFreeRamv+0x22>
    free_memory = ((int)&free_memory) - ((int)&__bss_end);
    150a:	80 5c       	subi	r24, 0xC0	; 192
    150c:	96 40       	sbci	r25, 0x06	; 6
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <_Z10getFreeRamv+0x26>
  }
  else {
    free_memory = ((int)&free_memory) - ((int)__brkval);
    1510:	82 1b       	sub	r24, r18
    1512:	93 0b       	sbc	r25, r19
    1514:	9a 83       	std	Y+2, r25	; 0x02
    1516:	89 83       	std	Y+1, r24	; 0x01
  }

  return free_memory;
} 
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	9a 81       	ldd	r25, Y+2	; 0x02
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	cf 91       	pop	r28
    1522:	df 91       	pop	r29
    1524:	08 95       	ret

00001526 <set_socket_active_status>:
//!
//!  @brief          Check if the socket ID and status are valid and set 
//!                  accordingly  the global socket status
//
//*****************************************************************************
void set_socket_active_status(INT32 Sd, INT32 Status)
    1526:	af 92       	push	r10
    1528:	bf 92       	push	r11
    152a:	cf 92       	push	r12
    152c:	df 92       	push	r13
    152e:	ef 92       	push	r14
    1530:	ff 92       	push	r15
    1532:	0f 93       	push	r16
    1534:	1f 93       	push	r17
    1536:	59 01       	movw	r10, r18
    1538:	6a 01       	movw	r12, r20
{
	if(M_IS_VALID_SD(Sd) && M_IS_VALID_STATUS(Status))
    153a:	68 30       	cpi	r22, 0x08	; 8
    153c:	71 05       	cpc	r23, r1
    153e:	81 05       	cpc	r24, r1
    1540:	91 05       	cpc	r25, r1
    1542:	a0 f5       	brcc	.+104    	; 0x15ac <set_socket_active_status+0x86>
    1544:	22 e0       	ldi	r18, 0x02	; 2
    1546:	a2 16       	cp	r10, r18
    1548:	b1 04       	cpc	r11, r1
    154a:	c1 04       	cpc	r12, r1
    154c:	d1 04       	cpc	r13, r1
    154e:	70 f5       	brcc	.+92     	; 0x15ac <set_socket_active_status+0x86>
	{
		socket_active_status &= ~(1 << Sd);      /* clean socket's mask */
		socket_active_status |= (Status << Sd); /* set new socket's mask */
    1550:	21 e0       	ldi	r18, 0x01	; 1
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	06 2e       	mov	r0, r22
    1556:	02 c0       	rjmp	.+4      	; 0x155c <set_socket_active_status+0x36>
    1558:	22 0f       	add	r18, r18
    155a:	33 1f       	adc	r19, r19
    155c:	0a 94       	dec	r0
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <set_socket_active_status+0x32>
    1560:	20 95       	com	r18
    1562:	30 95       	com	r19
    1564:	44 27       	eor	r20, r20
    1566:	37 fd       	sbrc	r19, 7
    1568:	40 95       	com	r20
    156a:	54 2f       	mov	r21, r20
    156c:	e0 90 d0 01 	lds	r14, 0x01D0
    1570:	f0 90 d1 01 	lds	r15, 0x01D1
    1574:	00 91 d2 01 	lds	r16, 0x01D2
    1578:	10 91 d3 01 	lds	r17, 0x01D3
    157c:	2e 21       	and	r18, r14
    157e:	3f 21       	and	r19, r15
    1580:	40 23       	and	r20, r16
    1582:	51 23       	and	r21, r17
    1584:	06 2e       	mov	r0, r22
    1586:	04 c0       	rjmp	.+8      	; 0x1590 <set_socket_active_status+0x6a>
    1588:	aa 0c       	add	r10, r10
    158a:	bb 1c       	adc	r11, r11
    158c:	cc 1c       	adc	r12, r12
    158e:	dd 1c       	adc	r13, r13
    1590:	0a 94       	dec	r0
    1592:	d2 f7       	brpl	.-12     	; 0x1588 <set_socket_active_status+0x62>
    1594:	2a 29       	or	r18, r10
    1596:	3b 29       	or	r19, r11
    1598:	4c 29       	or	r20, r12
    159a:	5d 29       	or	r21, r13
    159c:	20 93 d0 01 	sts	0x01D0, r18
    15a0:	30 93 d1 01 	sts	0x01D1, r19
    15a4:	40 93 d2 01 	sts	0x01D2, r20
    15a8:	50 93 d3 01 	sts	0x01D3, r21
	}
}
    15ac:	1f 91       	pop	r17
    15ae:	0f 91       	pop	r16
    15b0:	ff 90       	pop	r15
    15b2:	ef 90       	pop	r14
    15b4:	df 90       	pop	r13
    15b6:	cf 90       	pop	r12
    15b8:	bf 90       	pop	r11
    15ba:	af 90       	pop	r10
    15bc:	08 95       	ret

000015be <get_socket_active_status>:
//!
//!  @brief  Retrieve socket status
//
//*****************************************************************************

INT32 get_socket_active_status(INT32 Sd)
    15be:	9b 01       	movw	r18, r22
    15c0:	ac 01       	movw	r20, r24
{
	if(M_IS_VALID_SD(Sd))
    15c2:	68 30       	cpi	r22, 0x08	; 8
    15c4:	71 05       	cpc	r23, r1
    15c6:	81 05       	cpc	r24, r1
    15c8:	91 05       	cpc	r25, r1
    15ca:	e8 f4       	brcc	.+58     	; 0x1606 <get_socket_active_status+0x48>
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <get_socket_active_status+0x18>
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	2a 95       	dec	r18
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <get_socket_active_status+0x14>
    15da:	9c 01       	movw	r18, r24
    15dc:	44 27       	eor	r20, r20
    15de:	37 fd       	sbrc	r19, 7
    15e0:	40 95       	com	r20
    15e2:	54 2f       	mov	r21, r20
    15e4:	80 91 d0 01 	lds	r24, 0x01D0
    15e8:	90 91 d1 01 	lds	r25, 0x01D1
    15ec:	a0 91 d2 01 	lds	r26, 0x01D2
    15f0:	b0 91 d3 01 	lds	r27, 0x01D3
    15f4:	28 23       	and	r18, r24
    15f6:	39 23       	and	r19, r25
    15f8:	4a 23       	and	r20, r26
    15fa:	5b 23       	and	r21, r27
    15fc:	21 15       	cp	r18, r1
    15fe:	31 05       	cpc	r19, r1
    1600:	41 05       	cpc	r20, r1
    1602:	51 05       	cpc	r21, r1
    1604:	21 f0       	breq	.+8      	; 0x160e <get_socket_active_status+0x50>
    1606:	21 e0       	ldi	r18, 0x01	; 1
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	40 e0       	ldi	r20, 0x00	; 0
    160c:	50 e0       	ldi	r21, 0x00	; 0
	{
		return (socket_active_status & (1 << Sd)) ? SOCKET_STATUS_INACTIVE : SOCKET_STATUS_ACTIVE;
	}
	return SOCKET_STATUS_INACTIVE;
}
    160e:	b9 01       	movw	r22, r18
    1610:	ca 01       	movw	r24, r20
    1612:	08 95       	ret

00001614 <hci_unsol_event_handler>:
//!                      0 if event is not supported
//!
//!  @brief              Handle unsolicited events
//
//*****************************************************************************
INT32 hci_unsol_event_handler(CHAR *event_hdr)
    1614:	8f 92       	push	r8
    1616:	9f 92       	push	r9
    1618:	af 92       	push	r10
    161a:	bf 92       	push	r11
    161c:	cf 92       	push	r12
    161e:	df 92       	push	r13
    1620:	ef 92       	push	r14
    1622:	ff 92       	push	r15
    1624:	0f 93       	push	r16
    1626:	1f 93       	push	r17
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	a9 97       	sbiw	r28, 0x29	; 41
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	f8 94       	cli
    1636:	de bf       	out	0x3e, r29	; 62
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	cd bf       	out	0x3d, r28	; 61
    163c:	8c 01       	movw	r16, r24
	CHAR * data = NULL;
	INT32 event_type;
	UINT32 NumberOfReleasedPackets;
	UINT32 NumberOfSentPackets;

	STREAM_TO_UINT16(event_hdr, HCI_EVENT_OPCODE_OFFSET,event_type);
    163e:	61 e0       	ldi	r22, 0x01	; 1
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	0e 94 43 0a 	call	0x1486	; 0x1486 <STREAM_TO_UINT16_f>
    1646:	9c 01       	movw	r18, r24
    1648:	6c 01       	movw	r12, r24
    164a:	ee 24       	eor	r14, r14
    164c:	ff 24       	eor	r15, r15
	// Extra debug output.
	// Noted 12-12-2014 by tdicola
	DEBUGPRINT_F("\tHCI_UNSOL_EVT: ");
	DEBUGPRINT_HEX16(event_type);

	if (event_type & HCI_EVNT_UNSOL_BASE)
    164e:	d6 fe       	sbrs	r13, 6
    1650:	6d c0       	rjmp	.+218    	; 0x172c <hci_unsol_event_handler+0x118>
	{
		switch(event_type)
    1652:	81 e4       	ldi	r24, 0x41	; 65
    1654:	20 30       	cpi	r18, 0x00	; 0
    1656:	38 07       	cpc	r19, r24
    1658:	09 f0       	breq	.+2      	; 0x165c <hci_unsol_event_handler+0x48>
    165a:	68 c0       	rjmp	.+208    	; 0x172c <hci_unsol_event_handler+0x118>
	INT32 temp, value;
	UINT16 i;
	UINT16  pusNumberOfHandles=0;
	CHAR *pReadPayload;

	STREAM_TO_UINT16((CHAR *)pEvent,HCI_EVENT_HEADER_SIZE,pusNumberOfHandles);
    165c:	c8 01       	movw	r24, r16
    165e:	65 e0       	ldi	r22, 0x05	; 5
    1660:	70 e0       	ldi	r23, 0x00	; 0
    1662:	0e 94 43 0a 	call	0x1486	; 0x1486 <STREAM_TO_UINT16_f>
    1666:	4c 01       	movw	r8, r24
	pReadPayload = ((CHAR *)pEvent +
		HCI_EVENT_HEADER_SIZE + sizeof(pusNumberOfHandles));	
    1668:	97 e0       	ldi	r25, 0x07	; 7
    166a:	a9 2e       	mov	r10, r25
    166c:	b1 2c       	mov	r11, r1
    166e:	a0 0e       	add	r10, r16
    1670:	b1 1e       	adc	r11, r17
    1672:	cc 24       	eor	r12, r12
    1674:	dd 24       	eor	r13, r13
    1676:	ee 24       	eor	r14, r14
    1678:	ff 24       	eor	r15, r15
    167a:	87 01       	movw	r16, r14
    167c:	12 c0       	rjmp	.+36     	; 0x16a2 <hci_unsol_event_handler+0x8e>
	temp = 0;

	for(i = 0; i < pusNumberOfHandles ; i++)
	{
		STREAM_TO_UINT16(pReadPayload, FLOW_CONTROL_EVENT_FREE_BUFFS_OFFSET, value);
    167e:	c5 01       	movw	r24, r10
    1680:	62 e0       	ldi	r22, 0x02	; 2
    1682:	70 e0       	ldi	r23, 0x00	; 0
    1684:	0e 94 43 0a 	call	0x1486	; 0x1486 <STREAM_TO_UINT16_f>
		temp += value;
    1688:	a0 e0       	ldi	r26, 0x00	; 0
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e8 0e       	add	r14, r24
    168e:	f9 1e       	adc	r15, r25
    1690:	0a 1f       	adc	r16, r26
    1692:	1b 1f       	adc	r17, r27
		pReadPayload += FLOW_CONTROL_EVENT_SIZE;  
    1694:	a4 e0       	ldi	r26, 0x04	; 4
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	aa 0e       	add	r10, r26
    169a:	bb 1e       	adc	r11, r27
	STREAM_TO_UINT16((CHAR *)pEvent,HCI_EVENT_HEADER_SIZE,pusNumberOfHandles);
	pReadPayload = ((CHAR *)pEvent +
		HCI_EVENT_HEADER_SIZE + sizeof(pusNumberOfHandles));	
	temp = 0;

	for(i = 0; i < pusNumberOfHandles ; i++)
    169c:	08 94       	sec
    169e:	c1 1c       	adc	r12, r1
    16a0:	d1 1c       	adc	r13, r1
    16a2:	c8 14       	cp	r12, r8
    16a4:	d9 04       	cpc	r13, r9
    16a6:	58 f3       	brcs	.-42     	; 0x167e <hci_unsol_event_handler+0x6a>
		STREAM_TO_UINT16(pReadPayload, FLOW_CONTROL_EVENT_FREE_BUFFS_OFFSET, value);
		temp += value;
		pReadPayload += FLOW_CONTROL_EVENT_SIZE;  
	}

	tSLInformation.usNumberOfFreeBuffers += temp;
    16a8:	80 91 8a 02 	lds	r24, 0x028A
    16ac:	90 91 8b 02 	lds	r25, 0x028B
    16b0:	8e 0d       	add	r24, r14
    16b2:	9f 1d       	adc	r25, r15
    16b4:	90 93 8b 02 	sts	0x028B, r25
    16b8:	80 93 8a 02 	sts	0x028A, r24
	tSLInformation.NumberOfReleasedPackets += temp;
    16bc:	80 91 96 02 	lds	r24, 0x0296
    16c0:	90 91 97 02 	lds	r25, 0x0297
    16c4:	a0 91 98 02 	lds	r26, 0x0298
    16c8:	b0 91 99 02 	lds	r27, 0x0299
    16cc:	e8 0e       	add	r14, r24
    16ce:	f9 1e       	adc	r15, r25
    16d0:	0a 1f       	adc	r16, r26
    16d2:	1b 1f       	adc	r17, r27
    16d4:	e0 92 96 02 	sts	0x0296, r14
    16d8:	f0 92 97 02 	sts	0x0297, r15
    16dc:	00 93 98 02 	sts	0x0298, r16
    16e0:	10 93 99 02 	sts	0x0299, r17

		case HCI_EVNT_DATA_UNSOL_FREE_BUFF:
			{
				hci_event_unsol_flowcontrol_handler(event_hdr);

				NumberOfReleasedPackets = tSLInformation.NumberOfReleasedPackets;
    16e4:	20 91 96 02 	lds	r18, 0x0296
    16e8:	30 91 97 02 	lds	r19, 0x0297
    16ec:	40 91 98 02 	lds	r20, 0x0298
    16f0:	50 91 99 02 	lds	r21, 0x0299
				NumberOfSentPackets = tSLInformation.NumberOfSentPackets;
    16f4:	80 91 92 02 	lds	r24, 0x0292
    16f8:	90 91 93 02 	lds	r25, 0x0293
    16fc:	a0 91 94 02 	lds	r26, 0x0294
    1700:	b0 91 95 02 	lds	r27, 0x0295

				if (NumberOfReleasedPackets == NumberOfSentPackets)
    1704:	28 17       	cp	r18, r24
    1706:	39 07       	cpc	r19, r25
    1708:	4a 07       	cpc	r20, r26
    170a:	5b 07       	cpc	r21, r27
    170c:	09 f0       	breq	.+2      	; 0x1710 <hci_unsol_event_handler+0xfc>
    170e:	ad c0       	rjmp	.+346    	; 0x186a <hci_unsol_event_handler+0x256>
				{
					if (tSLInformation.InformHostOnTxComplete)
    1710:	80 91 9a 02 	lds	r24, 0x029A
    1714:	88 23       	and	r24, r24
    1716:	09 f4       	brne	.+2      	; 0x171a <hci_unsol_event_handler+0x106>
    1718:	a8 c0       	rjmp	.+336    	; 0x186a <hci_unsol_event_handler+0x256>
					{
						tSLInformation.sWlanCB(HCI_EVENT_CC3000_CAN_SHUT_DOWN, NULL, 0);
    171a:	e0 91 7c 02 	lds	r30, 0x027C
    171e:	f0 91 7d 02 	lds	r31, 0x027D
    1722:	69 e9       	ldi	r22, 0x99	; 153
    1724:	70 e0       	ldi	r23, 0x00	; 0
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	4a c0       	rjmp	.+148    	; 0x17c0 <hci_unsol_event_handler+0x1ac>

			}
		}
	}

	if(event_type & HCI_EVNT_WLAN_UNSOL_BASE)
    172c:	c6 01       	movw	r24, r12
    172e:	80 70       	andi	r24, 0x00	; 0
    1730:	90 78       	andi	r25, 0x80	; 128
    1732:	89 2b       	or	r24, r25
    1734:	09 f4       	brne	.+2      	; 0x1738 <hci_unsol_event_handler+0x124>
    1736:	f2 c0       	rjmp	.+484    	; 0x191c <hci_unsol_event_handler+0x308>
	{           
		switch(event_type)
    1738:	b0 e8       	ldi	r27, 0x80	; 128
    173a:	20 34       	cpi	r18, 0x40	; 64
    173c:	3b 07       	cpc	r19, r27
    173e:	09 f4       	brne	.+2      	; 0x1742 <hci_unsol_event_handler+0x12e>
    1740:	99 c0       	rjmp	.+306    	; 0x1874 <hci_unsol_event_handler+0x260>
    1742:	e0 e8       	ldi	r30, 0x80	; 128
    1744:	21 34       	cpi	r18, 0x41	; 65
    1746:	3e 07       	cpc	r19, r30
    1748:	a0 f4       	brcc	.+40     	; 0x1772 <hci_unsol_event_handler+0x15e>
    174a:	f0 e8       	ldi	r31, 0x80	; 128
    174c:	24 30       	cpi	r18, 0x04	; 4
    174e:	3f 07       	cpc	r19, r31
    1750:	51 f1       	breq	.+84     	; 0x17a6 <hci_unsol_event_handler+0x192>
    1752:	80 e8       	ldi	r24, 0x80	; 128
    1754:	25 30       	cpi	r18, 0x05	; 5
    1756:	38 07       	cpc	r19, r24
    1758:	38 f4       	brcc	.+14     	; 0x1768 <hci_unsol_event_handler+0x154>
    175a:	21 50       	subi	r18, 0x01	; 1
    175c:	30 48       	sbci	r19, 0x80	; 128
    175e:	22 30       	cpi	r18, 0x02	; 2
    1760:	31 05       	cpc	r19, r1
    1762:	08 f0       	brcs	.+2      	; 0x1766 <hci_unsol_event_handler+0x152>
    1764:	7e c1       	rjmp	.+764    	; 0x1a62 <hci_unsol_event_handler+0x44e>
    1766:	1f c0       	rjmp	.+62     	; 0x17a6 <hci_unsol_event_handler+0x192>
    1768:	20 51       	subi	r18, 0x10	; 16
    176a:	30 48       	sbci	r19, 0x80	; 128
    176c:	09 f0       	breq	.+2      	; 0x1770 <hci_unsol_event_handler+0x15c>
    176e:	79 c1       	rjmp	.+754    	; 0x1a62 <hci_unsol_event_handler+0x44e>
    1770:	2b c0       	rjmp	.+86     	; 0x17c8 <hci_unsol_event_handler+0x1b4>
    1772:	a4 e8       	ldi	r26, 0x84	; 132
    1774:	20 30       	cpi	r18, 0x00	; 0
    1776:	3a 07       	cpc	r19, r26
    1778:	b1 f0       	breq	.+44     	; 0x17a6 <hci_unsol_event_handler+0x192>
    177a:	b4 e8       	ldi	r27, 0x84	; 132
    177c:	21 30       	cpi	r18, 0x01	; 1
    177e:	3b 07       	cpc	r19, r27
    1780:	48 f4       	brcc	.+18     	; 0x1794 <hci_unsol_event_handler+0x180>
    1782:	e0 e8       	ldi	r30, 0x80	; 128
    1784:	20 38       	cpi	r18, 0x80	; 128
    1786:	3e 07       	cpc	r19, r30
    1788:	71 f0       	breq	.+28     	; 0x17a6 <hci_unsol_event_handler+0x192>
    178a:	20 50       	subi	r18, 0x00	; 0
    178c:	32 48       	sbci	r19, 0x82	; 130
    178e:	09 f0       	breq	.+2      	; 0x1792 <hci_unsol_event_handler+0x17e>
    1790:	68 c1       	rjmp	.+720    	; 0x1a62 <hci_unsol_event_handler+0x44e>
    1792:	09 c0       	rjmp	.+18     	; 0x17a6 <hci_unsol_event_handler+0x192>
    1794:	88 e8       	ldi	r24, 0x88	; 136
    1796:	20 30       	cpi	r18, 0x00	; 0
    1798:	38 07       	cpc	r19, r24
    179a:	09 f4       	brne	.+2      	; 0x179e <hci_unsol_event_handler+0x18a>
    179c:	ad c0       	rjmp	.+346    	; 0x18f8 <hci_unsol_event_handler+0x2e4>
    179e:	20 50       	subi	r18, 0x00	; 0
    17a0:	39 48       	sbci	r19, 0x89	; 137
    17a2:	09 f0       	breq	.+2      	; 0x17a6 <hci_unsol_event_handler+0x192>
    17a4:	5e c1       	rjmp	.+700    	; 0x1a62 <hci_unsol_event_handler+0x44e>
		case HCI_EVNT_WLAN_UNSOL_CONNECT:
		case HCI_EVNT_WLAN_UNSOL_DISCONNECT:
		case HCI_EVNT_WLAN_UNSOL_INIT:
		case HCI_EVNT_WLAN_ASYNC_SIMPLE_CONFIG_DONE:

			if( tSLInformation.sWlanCB )
    17a6:	80 91 7c 02 	lds	r24, 0x027C
    17aa:	90 91 7d 02 	lds	r25, 0x027D
    17ae:	89 2b       	or	r24, r25
    17b0:	09 f4       	brne	.+2      	; 0x17b4 <hci_unsol_event_handler+0x1a0>
    17b2:	5b c0       	rjmp	.+182    	; 0x186a <hci_unsol_event_handler+0x256>
			{
				tSLInformation.sWlanCB(event_type, 0, 0);
    17b4:	e0 91 7c 02 	lds	r30, 0x027C
    17b8:	f0 91 7d 02 	lds	r31, 0x027D
    17bc:	c7 01       	movw	r24, r14
    17be:	b6 01       	movw	r22, r12
    17c0:	40 e0       	ldi	r20, 0x00	; 0
    17c2:	50 e0       	ldi	r21, 0x00	; 0
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	50 c0       	rjmp	.+160    	; 0x1868 <hci_unsol_event_handler+0x254>
		case HCI_EVNT_WLAN_UNSOL_DHCP:
			{
				UINT8	params[NETAPP_IPCONFIG_MAC_OFFSET + 1];	// extra byte is for the status
				UINT8 *recParams = params;

				data = (CHAR*)(event_hdr) + HCI_EVENT_HEADER_SIZE;
    17c8:	f8 01       	movw	r30, r16
    17ca:	35 96       	adiw	r30, 0x05	; 5

				//Read IP address
				STREAM_TO_STREAM(data,recParams,NETAPP_IPCONFIG_IP_LENGTH);
    17cc:	d8 01       	movw	r26, r16
    17ce:	15 96       	adiw	r26, 0x05	; 5
    17d0:	8c 91       	ld	r24, X
    17d2:	15 97       	sbiw	r26, 0x05	; 5
    17d4:	8d 8b       	std	Y+21, r24	; 0x15
    17d6:	81 81       	ldd	r24, Z+1	; 0x01
    17d8:	8e 8b       	std	Y+22, r24	; 0x16
    17da:	82 81       	ldd	r24, Z+2	; 0x02
    17dc:	8f 8b       	std	Y+23, r24	; 0x17
    17de:	83 81       	ldd	r24, Z+3	; 0x03
    17e0:	88 8f       	std	Y+24, r24	; 0x18
				data += 4;
    17e2:	f8 01       	movw	r30, r16
    17e4:	39 96       	adiw	r30, 0x09	; 9
				localIP[1] = *(recParams-NETAPP_IPCONFIG_IP_LENGTH + 1);
				localIP[2] = *(recParams-NETAPP_IPCONFIG_IP_LENGTH + 2);
				localIP[3] = *(recParams-NETAPP_IPCONFIG_IP_LENGTH + 3);
#endif
				//Read subnet
				STREAM_TO_STREAM(data,recParams,NETAPP_IPCONFIG_IP_LENGTH);
    17e6:	19 96       	adiw	r26, 0x09	; 9
    17e8:	8c 91       	ld	r24, X
    17ea:	19 97       	sbiw	r26, 0x09	; 9
    17ec:	89 8f       	std	Y+25, r24	; 0x19
    17ee:	81 81       	ldd	r24, Z+1	; 0x01
    17f0:	8a 8f       	std	Y+26, r24	; 0x1a
    17f2:	82 81       	ldd	r24, Z+2	; 0x02
    17f4:	8b 8f       	std	Y+27, r24	; 0x1b
    17f6:	83 81       	ldd	r24, Z+3	; 0x03
    17f8:	8c 8f       	std	Y+28, r24	; 0x1c
				data += 4;
    17fa:	f8 01       	movw	r30, r16
    17fc:	3d 96       	adiw	r30, 0x0d	; 13
				//Read default GW
				STREAM_TO_STREAM(data,recParams,NETAPP_IPCONFIG_IP_LENGTH); 
    17fe:	1d 96       	adiw	r26, 0x0d	; 13
    1800:	8c 91       	ld	r24, X
    1802:	1d 97       	sbiw	r26, 0x0d	; 13
    1804:	8d 8f       	std	Y+29, r24	; 0x1d
    1806:	81 81       	ldd	r24, Z+1	; 0x01
    1808:	8e 8f       	std	Y+30, r24	; 0x1e
    180a:	82 81       	ldd	r24, Z+2	; 0x02
    180c:	8f 8f       	std	Y+31, r24	; 0x1f
    180e:	83 81       	ldd	r24, Z+3	; 0x03
    1810:	88 a3       	std	Y+32, r24	; 0x20
				data += 4;
    1812:	f8 01       	movw	r30, r16
    1814:	71 96       	adiw	r30, 0x11	; 17
				//Read DHCP server  
				STREAM_TO_STREAM(data,recParams,NETAPP_IPCONFIG_IP_LENGTH);     
    1816:	51 96       	adiw	r26, 0x11	; 17
    1818:	8c 91       	ld	r24, X
    181a:	51 97       	sbiw	r26, 0x11	; 17
    181c:	89 a3       	std	Y+33, r24	; 0x21
    181e:	81 81       	ldd	r24, Z+1	; 0x01
    1820:	8a a3       	std	Y+34, r24	; 0x22
    1822:	82 81       	ldd	r24, Z+2	; 0x02
    1824:	8b a3       	std	Y+35, r24	; 0x23
    1826:	83 81       	ldd	r24, Z+3	; 0x03
    1828:	8c a3       	std	Y+36, r24	; 0x24
				data += 4;
				//Read DNS server  
				STREAM_TO_STREAM(data,recParams,NETAPP_IPCONFIG_IP_LENGTH); 
    182a:	f8 01       	movw	r30, r16
    182c:	75 96       	adiw	r30, 0x15	; 21
    182e:	55 96       	adiw	r26, 0x15	; 21
    1830:	8c 91       	ld	r24, X
    1832:	55 97       	sbiw	r26, 0x15	; 21
    1834:	8d a3       	std	Y+37, r24	; 0x25
    1836:	81 81       	ldd	r24, Z+1	; 0x01
    1838:	8e a3       	std	Y+38, r24	; 0x26
    183a:	82 81       	ldd	r24, Z+2	; 0x02
    183c:	8f a3       	std	Y+39, r24	; 0x27
    183e:	83 81       	ldd	r24, Z+3	; 0x03
    1840:	88 a7       	std	Y+40, r24	; 0x28
				// read the status
				STREAM_TO_UINT8(event_hdr, HCI_EVENT_STATUS_OFFSET, *recParams);
    1842:	14 96       	adiw	r26, 0x04	; 4
    1844:	8c 91       	ld	r24, X
    1846:	89 a7       	std	Y+41, r24	; 0x29


				if( tSLInformation.sWlanCB )
    1848:	80 91 7c 02 	lds	r24, 0x027C
    184c:	90 91 7d 02 	lds	r25, 0x027D
    1850:	89 2b       	or	r24, r25
    1852:	59 f0       	breq	.+22     	; 0x186a <hci_unsol_event_handler+0x256>
				{
					tSLInformation.sWlanCB(event_type, (CHAR *)params, sizeof(params));
    1854:	e0 91 7c 02 	lds	r30, 0x027C
    1858:	f0 91 7d 02 	lds	r31, 0x027D
    185c:	c7 01       	movw	r24, r14
    185e:	b6 01       	movw	r22, r12
    1860:	ae 01       	movw	r20, r28
    1862:	4b 5e       	subi	r20, 0xEB	; 235
    1864:	5f 4f       	sbci	r21, 0xFF	; 255
    1866:	25 e1       	ldi	r18, 0x15	; 21
    1868:	09 95       	icall
    186a:	21 e0       	ldi	r18, 0x01	; 1
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e0       	ldi	r20, 0x00	; 0
    1870:	50 e0       	ldi	r21, 0x00	; 0
    1872:	fb c0       	rjmp	.+502    	; 0x1a6a <hci_unsol_event_handler+0x456>
			break;

		case HCI_EVNT_WLAN_ASYNC_PING_REPORT:
			{
				netapp_pingreport_args_t params;			
				data = (CHAR*)(event_hdr) + HCI_EVENT_HEADER_SIZE;			
    1874:	0b 5f       	subi	r16, 0xFB	; 251
    1876:	1f 4f       	sbci	r17, 0xFF	; 255
				STREAM_TO_UINT32(data, NETAPP_PING_PACKETS_SENT_OFFSET, params.packets_sent);			
    1878:	c8 01       	movw	r24, r16
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	70 e0       	ldi	r23, 0x00	; 0
    187e:	0e 94 4d 0a 	call	0x149a	; 0x149a <STREAM_TO_UINT32_f>
    1882:	69 83       	std	Y+1, r22	; 0x01
    1884:	7a 83       	std	Y+2, r23	; 0x02
    1886:	8b 83       	std	Y+3, r24	; 0x03
    1888:	9c 83       	std	Y+4, r25	; 0x04
				STREAM_TO_UINT32(data, NETAPP_PING_PACKETS_RCVD_OFFSET, params.packets_received);			
    188a:	c8 01       	movw	r24, r16
    188c:	64 e0       	ldi	r22, 0x04	; 4
    188e:	70 e0       	ldi	r23, 0x00	; 0
    1890:	0e 94 4d 0a 	call	0x149a	; 0x149a <STREAM_TO_UINT32_f>
    1894:	6d 83       	std	Y+5, r22	; 0x05
    1896:	7e 83       	std	Y+6, r23	; 0x06
    1898:	8f 83       	std	Y+7, r24	; 0x07
    189a:	98 87       	std	Y+8, r25	; 0x08
				STREAM_TO_UINT32(data, NETAPP_PING_MIN_RTT_OFFSET, params.min_round_time);		
    189c:	c8 01       	movw	r24, r16
    189e:	68 e0       	ldi	r22, 0x08	; 8
    18a0:	70 e0       	ldi	r23, 0x00	; 0
    18a2:	0e 94 4d 0a 	call	0x149a	; 0x149a <STREAM_TO_UINT32_f>
    18a6:	69 87       	std	Y+9, r22	; 0x09
    18a8:	7a 87       	std	Y+10, r23	; 0x0a
    18aa:	8b 87       	std	Y+11, r24	; 0x0b
    18ac:	9c 87       	std	Y+12, r25	; 0x0c
				STREAM_TO_UINT32(data, NETAPP_PING_MAX_RTT_OFFSET, params.max_round_time);	
    18ae:	c8 01       	movw	r24, r16
    18b0:	6c e0       	ldi	r22, 0x0C	; 12
    18b2:	70 e0       	ldi	r23, 0x00	; 0
    18b4:	0e 94 4d 0a 	call	0x149a	; 0x149a <STREAM_TO_UINT32_f>
    18b8:	6d 87       	std	Y+13, r22	; 0x0d
    18ba:	7e 87       	std	Y+14, r23	; 0x0e
    18bc:	8f 87       	std	Y+15, r24	; 0x0f
    18be:	98 8b       	std	Y+16, r25	; 0x10
				STREAM_TO_UINT32(data, NETAPP_PING_AVG_RTT_OFFSET, params.avg_round_time);
    18c0:	c8 01       	movw	r24, r16
    18c2:	60 e1       	ldi	r22, 0x10	; 16
    18c4:	70 e0       	ldi	r23, 0x00	; 0
    18c6:	0e 94 4d 0a 	call	0x149a	; 0x149a <STREAM_TO_UINT32_f>
    18ca:	9b 01       	movw	r18, r22
    18cc:	ac 01       	movw	r20, r24

				if( tSLInformation.sWlanCB )
    18ce:	80 91 7c 02 	lds	r24, 0x027C
    18d2:	90 91 7d 02 	lds	r25, 0x027D
    18d6:	89 2b       	or	r24, r25
    18d8:	41 f2       	breq	.-112    	; 0x186a <hci_unsol_event_handler+0x256>
				{
					tSLInformation.sWlanCB(event_type, (CHAR *)&params, sizeof(params));
    18da:	e0 91 7c 02 	lds	r30, 0x027C
    18de:	f0 91 7d 02 	lds	r31, 0x027D
				data = (CHAR*)(event_hdr) + HCI_EVENT_HEADER_SIZE;			
				STREAM_TO_UINT32(data, NETAPP_PING_PACKETS_SENT_OFFSET, params.packets_sent);			
				STREAM_TO_UINT32(data, NETAPP_PING_PACKETS_RCVD_OFFSET, params.packets_received);			
				STREAM_TO_UINT32(data, NETAPP_PING_MIN_RTT_OFFSET, params.min_round_time);		
				STREAM_TO_UINT32(data, NETAPP_PING_MAX_RTT_OFFSET, params.max_round_time);	
				STREAM_TO_UINT32(data, NETAPP_PING_AVG_RTT_OFFSET, params.avg_round_time);
    18e2:	29 8b       	std	Y+17, r18	; 0x11
    18e4:	3a 8b       	std	Y+18, r19	; 0x12
    18e6:	4b 8b       	std	Y+19, r20	; 0x13
    18e8:	5c 8b       	std	Y+20, r21	; 0x14

				if( tSLInformation.sWlanCB )
				{
					tSLInformation.sWlanCB(event_type, (CHAR *)&params, sizeof(params));
    18ea:	c7 01       	movw	r24, r14
    18ec:	b6 01       	movw	r22, r12
    18ee:	ae 01       	movw	r20, r28
    18f0:	4f 5f       	subi	r20, 0xFF	; 255
    18f2:	5f 4f       	sbci	r21, 0xFF	; 255
    18f4:	24 e1       	ldi	r18, 0x14	; 20
    18f6:	b8 cf       	rjmp	.-144    	; 0x1868 <hci_unsol_event_handler+0x254>
			  // Adafruit CC3k Host Driver Difference
			  // Extra debug output.
			  // Noted 12-12-2014 by tdicola
			  DEBUGPRINT_F("\tTCP Close Wait\n\r");
			  data = (CHAR*)(event_hdr) + HCI_EVENT_HEADER_SIZE;
			  if( tSLInformation.sWlanCB )
    18f8:	80 91 7c 02 	lds	r24, 0x027C
    18fc:	90 91 7d 02 	lds	r25, 0x027D
    1900:	89 2b       	or	r24, r25
    1902:	09 f4       	brne	.+2      	; 0x1906 <hci_unsol_event_handler+0x2f2>
    1904:	b2 cf       	rjmp	.-156    	; 0x186a <hci_unsol_event_handler+0x256>
			    {
				  //data[0] represents the socket id, for which FIN was received by remote.
				  //Upon receiving this event, the user can close the socket, or else the 
				  //socket will be closded after inacvitity timeout (by default 60 seconds)
			      tSLInformation.sWlanCB(event_type, data, 1);
    1906:	e0 91 7c 02 	lds	r30, 0x027C
    190a:	f0 91 7d 02 	lds	r31, 0x027D
    190e:	0b 5f       	subi	r16, 0xFB	; 251
    1910:	1f 4f       	sbci	r17, 0xFF	; 255
    1912:	c7 01       	movw	r24, r14
    1914:	b6 01       	movw	r22, r12
    1916:	a8 01       	movw	r20, r16
    1918:	21 e0       	ldi	r18, 0x01	; 1
    191a:	a6 cf       	rjmp	.-180    	; 0x1868 <hci_unsol_event_handler+0x254>
			return (0);
		}
		return(1);
	}

	if ((event_type == HCI_EVNT_SEND) || (event_type == HCI_EVNT_SENDTO)
    191c:	b3 e0       	ldi	r27, 0x03	; 3
    191e:	cb 16       	cp	r12, r27
    1920:	b0 e1       	ldi	r27, 0x10	; 16
    1922:	db 06       	cpc	r13, r27
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	eb 06       	cpc	r14, r27
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	fb 06       	cpc	r15, r27
    192c:	99 f0       	breq	.+38     	; 0x1954 <hci_unsol_event_handler+0x340>
    192e:	ef e0       	ldi	r30, 0x0F	; 15
    1930:	ce 16       	cp	r12, r30
    1932:	e0 e1       	ldi	r30, 0x10	; 16
    1934:	de 06       	cpc	r13, r30
    1936:	e0 e0       	ldi	r30, 0x00	; 0
    1938:	ee 06       	cpc	r14, r30
    193a:	e0 e0       	ldi	r30, 0x00	; 0
    193c:	fe 06       	cpc	r15, r30
    193e:	51 f0       	breq	.+20     	; 0x1954 <hci_unsol_event_handler+0x340>
    1940:	fe e0       	ldi	r31, 0x0E	; 14
    1942:	cf 16       	cp	r12, r31
    1944:	f0 e1       	ldi	r31, 0x10	; 16
    1946:	df 06       	cpc	r13, r31
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	ef 06       	cpc	r14, r31
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	ff 06       	cpc	r15, r31
    1950:	09 f0       	breq	.+2      	; 0x1954 <hci_unsol_event_handler+0x340>
    1952:	6a c0       	rjmp	.+212    	; 0x1a28 <hci_unsol_event_handler+0x414>
		// Adafruit CC3k Host Driver Difference
		// Extra debug output.
		// Noted 12-12-2014 by tdicola
		DEBUGPRINT_F("\tSEND event response\n\r");

                pArg = M_BSD_RESP_PARAMS_OFFSET(event_hdr);
    1954:	85 e0       	ldi	r24, 0x05	; 5
    1956:	c8 2e       	mov	r12, r24
    1958:	d1 2c       	mov	r13, r1
    195a:	c0 0e       	add	r12, r16
    195c:	d1 1e       	adc	r13, r17
                STREAM_TO_UINT32(pArg, BSD_RSP_PARAMS_STATUS_OFFSET,status);
    195e:	c6 01       	movw	r24, r12
    1960:	64 e0       	ldi	r22, 0x04	; 4
    1962:	70 e0       	ldi	r23, 0x00	; 0
    1964:	0e 94 4d 0a 	call	0x149a	; 0x149a <STREAM_TO_UINT32_f>

                if (ERROR_SOCKET_INACTIVE == status)
    1968:	67 5c       	subi	r22, 0xC7	; 199
    196a:	7f 4f       	sbci	r23, 0xFF	; 255
    196c:	8f 4f       	sbci	r24, 0xFF	; 255
    196e:	9f 4f       	sbci	r25, 0xFF	; 255
    1970:	09 f0       	breq	.+2      	; 0x1974 <hci_unsol_event_handler+0x360>
    1972:	77 c0       	rjmp	.+238    	; 0x1a62 <hci_unsol_event_handler+0x44e>
                {
                    // The only synchronous event that can come from SL device in form of
                    // command complete is "Command Complete" on data sent, in case SL device
                    // was unable to transmit
                    STREAM_TO_UINT8(event_hdr, HCI_EVENT_STATUS_OFFSET, tSLInformation.slTransmitDataError);
    1974:	d8 01       	movw	r26, r16
    1976:	14 96       	adiw	r26, 0x04	; 4
    1978:	8c 91       	ld	r24, X
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	a0 e0       	ldi	r26, 0x00	; 0
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	80 93 86 02 	sts	0x0286, r24
    1984:	90 93 87 02 	sts	0x0287, r25
    1988:	a0 93 88 02 	sts	0x0288, r26
    198c:	b0 93 89 02 	sts	0x0289, r27
//*****************************************************************************
void update_socket_active_status(CHAR *resp_params)
{
	INT32 status, sd;

	STREAM_TO_UINT32(resp_params, BSD_RSP_PARAMS_SOCKET_OFFSET,sd);
    1990:	c6 01       	movw	r24, r12
    1992:	60 e0       	ldi	r22, 0x00	; 0
    1994:	70 e0       	ldi	r23, 0x00	; 0
    1996:	0e 94 4d 0a 	call	0x149a	; 0x149a <STREAM_TO_UINT32_f>
    199a:	7b 01       	movw	r14, r22
    199c:	8c 01       	movw	r16, r24
	STREAM_TO_UINT32(resp_params, BSD_RSP_PARAMS_STATUS_OFFSET,status);
    199e:	c6 01       	movw	r24, r12
    19a0:	64 e0       	ldi	r22, 0x04	; 4
    19a2:	70 e0       	ldi	r23, 0x00	; 0
    19a4:	0e 94 4d 0a 	call	0x149a	; 0x149a <STREAM_TO_UINT32_f>

	if(ERROR_SOCKET_INACTIVE == status)
    19a8:	67 5c       	subi	r22, 0xC7	; 199
    19aa:	7f 4f       	sbci	r23, 0xFF	; 255
    19ac:	8f 4f       	sbci	r24, 0xFF	; 255
    19ae:	9f 4f       	sbci	r25, 0xFF	; 255
    19b0:	09 f0       	breq	.+2      	; 0x19b4 <hci_unsol_event_handler+0x3a0>
    19b2:	5b cf       	rjmp	.-330    	; 0x186a <hci_unsol_event_handler+0x256>
//!                  accordingly  the global socket status
//
//*****************************************************************************
void set_socket_active_status(INT32 Sd, INT32 Status)
{
	if(M_IS_VALID_SD(Sd) && M_IS_VALID_STATUS(Status))
    19b4:	e8 e0       	ldi	r30, 0x08	; 8
    19b6:	ee 16       	cp	r14, r30
    19b8:	f1 04       	cpc	r15, r1
    19ba:	01 05       	cpc	r16, r1
    19bc:	11 05       	cpc	r17, r1
    19be:	08 f0       	brcs	.+2      	; 0x19c2 <hci_unsol_event_handler+0x3ae>
    19c0:	54 cf       	rjmp	.-344    	; 0x186a <hci_unsol_event_handler+0x256>
	{
		socket_active_status &= ~(1 << Sd);      /* clean socket's mask */
		socket_active_status |= (Status << Sd); /* set new socket's mask */
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	0e 2c       	mov	r0, r14
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <hci_unsol_event_handler+0x3ba>
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	0a 94       	dec	r0
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <hci_unsol_event_handler+0x3b6>
    19d2:	80 95       	com	r24
    19d4:	90 95       	com	r25
    19d6:	aa 27       	eor	r26, r26
    19d8:	97 fd       	sbrc	r25, 7
    19da:	a0 95       	com	r26
    19dc:	ba 2f       	mov	r27, r26
    19de:	20 91 d0 01 	lds	r18, 0x01D0
    19e2:	30 91 d1 01 	lds	r19, 0x01D1
    19e6:	40 91 d2 01 	lds	r20, 0x01D2
    19ea:	50 91 d3 01 	lds	r21, 0x01D3
    19ee:	82 23       	and	r24, r18
    19f0:	93 23       	and	r25, r19
    19f2:	a4 23       	and	r26, r20
    19f4:	b5 23       	and	r27, r21
    19f6:	21 e0       	ldi	r18, 0x01	; 1
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	40 e0       	ldi	r20, 0x00	; 0
    19fc:	50 e0       	ldi	r21, 0x00	; 0
    19fe:	0e 2c       	mov	r0, r14
    1a00:	04 c0       	rjmp	.+8      	; 0x1a0a <hci_unsol_event_handler+0x3f6>
    1a02:	22 0f       	add	r18, r18
    1a04:	33 1f       	adc	r19, r19
    1a06:	44 1f       	adc	r20, r20
    1a08:	55 1f       	adc	r21, r21
    1a0a:	0a 94       	dec	r0
    1a0c:	d2 f7       	brpl	.-12     	; 0x1a02 <hci_unsol_event_handler+0x3ee>
    1a0e:	82 2b       	or	r24, r18
    1a10:	93 2b       	or	r25, r19
    1a12:	a4 2b       	or	r26, r20
    1a14:	b5 2b       	or	r27, r21
    1a16:	80 93 d0 01 	sts	0x01D0, r24
    1a1a:	90 93 d1 01 	sts	0x01D1, r25
    1a1e:	a0 93 d2 01 	sts	0x01D2, r26
    1a22:	b0 93 d3 01 	sts	0x01D3, r27
    1a26:	21 cf       	rjmp	.-446    	; 0x186a <hci_unsol_event_handler+0x256>
                else
                    return (0);
	}

	//handle a case where unsolicited event arrived, but was not handled by any of the cases above
	if ((event_type != tSLInformation.usRxEventOpcode) && (event_type != HCI_EVNT_PATCHES_REQ))
    1a28:	80 91 6e 02 	lds	r24, 0x026E
    1a2c:	90 91 6f 02 	lds	r25, 0x026F
    1a30:	a0 e0       	ldi	r26, 0x00	; 0
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	c8 16       	cp	r12, r24
    1a36:	d9 06       	cpc	r13, r25
    1a38:	ea 06       	cpc	r14, r26
    1a3a:	fb 06       	cpc	r15, r27
    1a3c:	91 f0       	breq	.+36     	; 0x1a62 <hci_unsol_event_handler+0x44e>
    1a3e:	60 e0       	ldi	r22, 0x00	; 0
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	cf 16       	cp	r12, r31
    1a44:	f0 e1       	ldi	r31, 0x10	; 16
    1a46:	df 06       	cpc	r13, r31
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	ef 06       	cpc	r14, r31
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	ff 06       	cpc	r15, r31
    1a50:	09 f4       	brne	.+2      	; 0x1a54 <hci_unsol_event_handler+0x440>
    1a52:	61 e0       	ldi	r22, 0x01	; 1
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	68 27       	eor	r22, r24
    1a58:	26 2f       	mov	r18, r22
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	40 e0       	ldi	r20, 0x00	; 0
    1a5e:	50 e0       	ldi	r21, 0x00	; 0
    1a60:	04 c0       	rjmp	.+8      	; 0x1a6a <hci_unsol_event_handler+0x456>
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	40 e0       	ldi	r20, 0x00	; 0
    1a68:	50 e0       	ldi	r21, 0x00	; 0
	{
		return(1);
	}

	return(0);
}
    1a6a:	b9 01       	movw	r22, r18
    1a6c:	ca 01       	movw	r24, r20
    1a6e:	a9 96       	adiw	r28, 0x29	; 41
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	f8 94       	cli
    1a74:	de bf       	out	0x3e, r29	; 62
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	cd bf       	out	0x3d, r28	; 61
    1a7a:	cf 91       	pop	r28
    1a7c:	df 91       	pop	r29
    1a7e:	1f 91       	pop	r17
    1a80:	0f 91       	pop	r16
    1a82:	ff 90       	pop	r15
    1a84:	ef 90       	pop	r14
    1a86:	df 90       	pop	r13
    1a88:	cf 90       	pop	r12
    1a8a:	bf 90       	pop	r11
    1a8c:	af 90       	pop	r10
    1a8e:	9f 90       	pop	r9
    1a90:	8f 90       	pop	r8
    1a92:	08 95       	ret

00001a94 <hci_unsolicited_event_handler>:
INT32 hci_unsolicited_event_handler(void)
{
	UINT32   res = 0;
	UINT8 *pucReceivedData;

	if (tSLInformation.usEventOrDataReceived != 0)
    1a94:	80 91 70 02 	lds	r24, 0x0270
    1a98:	90 91 71 02 	lds	r25, 0x0271
    1a9c:	89 2b       	or	r24, r25
    1a9e:	d1 f0       	breq	.+52     	; 0x1ad4 <hci_unsolicited_event_handler+0x40>
	{
		pucReceivedData = (tSLInformation.pucReceivedData);
    1aa0:	e0 91 72 02 	lds	r30, 0x0272
    1aa4:	f0 91 73 02 	lds	r31, 0x0273

		if (*pucReceivedData == HCI_TYPE_EVNT)
    1aa8:	80 81       	ld	r24, Z
    1aaa:	84 30       	cpi	r24, 0x04	; 4
    1aac:	99 f4       	brne	.+38     	; 0x1ad4 <hci_unsolicited_event_handler+0x40>
		{			

			// In case unsolicited event received - here the handling finished
			if (hci_unsol_event_handler((CHAR *)pucReceivedData) == 1)
    1aae:	cf 01       	movw	r24, r30
    1ab0:	0e 94 0a 0b 	call	0x1614	; 0x1614 <hci_unsol_event_handler>
    1ab4:	61 30       	cpi	r22, 0x01	; 1
    1ab6:	71 05       	cpc	r23, r1
    1ab8:	81 05       	cpc	r24, r1
    1aba:	91 05       	cpc	r25, r1
    1abc:	59 f4       	brne	.+22     	; 0x1ad4 <hci_unsolicited_event_handler+0x40>
			{

				// There was an unsolicited event received - we can release the buffer
				// and clean the event received 
				tSLInformation.usEventOrDataReceived = 0;
    1abe:	10 92 71 02 	sts	0x0271, r1
    1ac2:	10 92 70 02 	sts	0x0270, r1

				res = 1;
				SpiResumeSpi();
    1ac6:	0e 94 d4 29 	call	0x53a8	; 0x53a8 <_Z12SpiResumeSpiv>
    1aca:	21 e0       	ldi	r18, 0x01	; 1
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	40 e0       	ldi	r20, 0x00	; 0
    1ad0:	50 e0       	ldi	r21, 0x00	; 0
    1ad2:	04 c0       	rjmp	.+8      	; 0x1adc <hci_unsolicited_event_handler+0x48>
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	40 e0       	ldi	r20, 0x00	; 0
    1ada:	50 e0       	ldi	r21, 0x00	; 0
			}
		}
	}

	return res;
}
    1adc:	b9 01       	movw	r22, r18
    1ade:	ca 01       	movw	r24, r20
    1ae0:	08 95       	ret

00001ae2 <_Z30hci_unsol_handle_patch_requestPc>:
//!  @return none
//!
//!  @brief   Handle unsolicited event from type patch request
//
//*****************************************************************************
void hci_unsol_handle_patch_request(CHAR *event_hdr)
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	00 d0       	rcall	.+0      	; 0x1ae8 <_Z30hci_unsol_handle_patch_requestPc+0x6>
    1ae8:	00 d0       	rcall	.+0      	; 0x1aea <_Z30hci_unsol_handle_patch_requestPc+0x8>
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
{
	CHAR *params = (CHAR *)(event_hdr) + HCI_EVENT_HEADER_SIZE;
	UINT32 ucLength = 0;
    1aee:	19 82       	std	Y+1, r1	; 0x01
    1af0:	1a 82       	std	Y+2, r1	; 0x02
    1af2:	1b 82       	std	Y+3, r1	; 0x03
    1af4:	1c 82       	std	Y+4, r1	; 0x04
	CHAR *patch;

	switch (*params)
    1af6:	fc 01       	movw	r30, r24
    1af8:	85 81       	ldd	r24, Z+5	; 0x05
    1afa:	82 30       	cpi	r24, 0x02	; 2
    1afc:	21 f1       	breq	.+72     	; 0x1b46 <_Z30hci_unsol_handle_patch_requestPc+0x64>
    1afe:	83 30       	cpi	r24, 0x03	; 3
    1b00:	09 f4       	brne	.+2      	; 0x1b04 <_Z30hci_unsol_handle_patch_requestPc+0x22>
    1b02:	3f c0       	rjmp	.+126    	; 0x1b82 <_Z30hci_unsol_handle_patch_requestPc+0xa0>
    1b04:	81 30       	cpi	r24, 0x01	; 1
    1b06:	09 f0       	breq	.+2      	; 0x1b0a <_Z30hci_unsol_handle_patch_requestPc+0x28>
    1b08:	5f c0       	rjmp	.+190    	; 0x1bc8 <_Z30hci_unsol_handle_patch_requestPc+0xe6>
	{
	case HCI_EVENT_PATCHES_DRV_REQ:

		if (tSLInformation.sDriverPatches)
    1b0a:	80 91 78 02 	lds	r24, 0x0278
    1b0e:	90 91 79 02 	lds	r25, 0x0279
    1b12:	89 2b       	or	r24, r25
    1b14:	91 f0       	breq	.+36     	; 0x1b3a <_Z30hci_unsol_handle_patch_requestPc+0x58>
		{
			patch = tSLInformation.sDriverPatches(&ucLength);
    1b16:	e0 91 78 02 	lds	r30, 0x0278
    1b1a:	f0 91 79 02 	lds	r31, 0x0279
    1b1e:	ce 01       	movw	r24, r28
    1b20:	01 96       	adiw	r24, 0x01	; 1
    1b22:	09 95       	icall
    1b24:	ac 01       	movw	r20, r24

			if (patch)
    1b26:	00 97       	sbiw	r24, 0x00	; 0
    1b28:	41 f0       	breq	.+16     	; 0x1b3a <_Z30hci_unsol_handle_patch_requestPc+0x58>
			{
				hci_patch_send(HCI_EVENT_PATCHES_DRV_REQ, 
					tSLInformation.pucTxCommandBuffer, patch, ucLength);
    1b2a:	60 91 74 02 	lds	r22, 0x0274
    1b2e:	70 91 75 02 	lds	r23, 0x0275
    1b32:	29 81       	ldd	r18, Y+1	; 0x01
    1b34:	3a 81       	ldd	r19, Y+2	; 0x02
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	45 c0       	rjmp	.+138    	; 0x1bc4 <_Z30hci_unsol_handle_patch_requestPc+0xe2>
			}
		}

		// Send 0 length Patches response event
		hci_patch_send(HCI_EVENT_PATCHES_DRV_REQ, 
			tSLInformation.pucTxCommandBuffer, 0, 0);
    1b3a:	60 91 74 02 	lds	r22, 0x0274
    1b3e:	70 91 75 02 	lds	r23, 0x0275
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	3b c0       	rjmp	.+118    	; 0x1bbc <_Z30hci_unsol_handle_patch_requestPc+0xda>
		break;

	case HCI_EVENT_PATCHES_FW_REQ:

		if (tSLInformation.sFWPatches)
    1b46:	80 91 76 02 	lds	r24, 0x0276
    1b4a:	90 91 77 02 	lds	r25, 0x0277
    1b4e:	89 2b       	or	r24, r25
    1b50:	91 f0       	breq	.+36     	; 0x1b76 <_Z30hci_unsol_handle_patch_requestPc+0x94>
		{
			patch = tSLInformation.sFWPatches(&ucLength);
    1b52:	e0 91 76 02 	lds	r30, 0x0276
    1b56:	f0 91 77 02 	lds	r31, 0x0277
    1b5a:	ce 01       	movw	r24, r28
    1b5c:	01 96       	adiw	r24, 0x01	; 1
    1b5e:	09 95       	icall
    1b60:	ac 01       	movw	r20, r24

			// Build and send a patch
			if (patch)
    1b62:	00 97       	sbiw	r24, 0x00	; 0
    1b64:	41 f0       	breq	.+16     	; 0x1b76 <_Z30hci_unsol_handle_patch_requestPc+0x94>
			{
				hci_patch_send(HCI_EVENT_PATCHES_FW_REQ, 
					tSLInformation.pucTxCommandBuffer, patch, ucLength);
    1b66:	60 91 74 02 	lds	r22, 0x0274
    1b6a:	70 91 75 02 	lds	r23, 0x0275
    1b6e:	29 81       	ldd	r18, Y+1	; 0x01
    1b70:	3a 81       	ldd	r19, Y+2	; 0x02
    1b72:	82 e0       	ldi	r24, 0x02	; 2
    1b74:	27 c0       	rjmp	.+78     	; 0x1bc4 <_Z30hci_unsol_handle_patch_requestPc+0xe2>
			}
		}

		// Send 0 length Patches response event
		hci_patch_send(HCI_EVENT_PATCHES_FW_REQ, 
			tSLInformation.pucTxCommandBuffer, 0, 0);
    1b76:	60 91 74 02 	lds	r22, 0x0274
    1b7a:	70 91 75 02 	lds	r23, 0x0275
    1b7e:	82 e0       	ldi	r24, 0x02	; 2
    1b80:	1d c0       	rjmp	.+58     	; 0x1bbc <_Z30hci_unsol_handle_patch_requestPc+0xda>
		break;

	case HCI_EVENT_PATCHES_BOOTLOAD_REQ:

		if (tSLInformation.sBootLoaderPatches)
    1b82:	80 91 7a 02 	lds	r24, 0x027A
    1b86:	90 91 7b 02 	lds	r25, 0x027B
    1b8a:	89 2b       	or	r24, r25
    1b8c:	91 f0       	breq	.+36     	; 0x1bb2 <_Z30hci_unsol_handle_patch_requestPc+0xd0>
		{
			patch = tSLInformation.sBootLoaderPatches(&ucLength);
    1b8e:	e0 91 7a 02 	lds	r30, 0x027A
    1b92:	f0 91 7b 02 	lds	r31, 0x027B
    1b96:	ce 01       	movw	r24, r28
    1b98:	01 96       	adiw	r24, 0x01	; 1
    1b9a:	09 95       	icall
    1b9c:	ac 01       	movw	r20, r24

			if (patch)
    1b9e:	00 97       	sbiw	r24, 0x00	; 0
    1ba0:	41 f0       	breq	.+16     	; 0x1bb2 <_Z30hci_unsol_handle_patch_requestPc+0xd0>
			{
				hci_patch_send(HCI_EVENT_PATCHES_BOOTLOAD_REQ,  
					tSLInformation.pucTxCommandBuffer, patch, ucLength);
    1ba2:	60 91 74 02 	lds	r22, 0x0274
    1ba6:	70 91 75 02 	lds	r23, 0x0275
    1baa:	29 81       	ldd	r18, Y+1	; 0x01
    1bac:	3a 81       	ldd	r19, Y+2	; 0x02
    1bae:	83 e0       	ldi	r24, 0x03	; 3
    1bb0:	09 c0       	rjmp	.+18     	; 0x1bc4 <_Z30hci_unsol_handle_patch_requestPc+0xe2>
			}
		}

		// Send 0 length Patches response event
		hci_patch_send(HCI_EVENT_PATCHES_BOOTLOAD_REQ, 
			tSLInformation.pucTxCommandBuffer, 0, 0);
    1bb2:	60 91 74 02 	lds	r22, 0x0274
    1bb6:	70 91 75 02 	lds	r23, 0x0275
    1bba:	83 e0       	ldi	r24, 0x03	; 3
    1bbc:	40 e0       	ldi	r20, 0x00	; 0
    1bbe:	50 e0       	ldi	r21, 0x00	; 0
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	0e 94 90 11 	call	0x2320	; 0x2320 <hci_patch_send>
		break;
	}
}
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	cf 91       	pop	r28
    1bd2:	df 91       	pop	r29
    1bd4:	08 95       	ret

00001bd6 <hci_event_handler>:
//!                  event handler from global array of handlers pointers
//
//*****************************************************************************


UINT8 * hci_event_handler(void *pRetParams, UINT8 *from, UINT8 *fromlen)
    1bd6:	4f 92       	push	r4
    1bd8:	5f 92       	push	r5
    1bda:	6f 92       	push	r6
    1bdc:	7f 92       	push	r7
    1bde:	8f 92       	push	r8
    1be0:	9f 92       	push	r9
    1be2:	af 92       	push	r10
    1be4:	bf 92       	push	r11
    1be6:	cf 92       	push	r12
    1be8:	df 92       	push	r13
    1bea:	ef 92       	push	r14
    1bec:	ff 92       	push	r15
    1bee:	0f 93       	push	r16
    1bf0:	1f 93       	push	r17
    1bf2:	cf 93       	push	r28
    1bf4:	df 93       	push	r29
    1bf6:	6c 01       	movw	r12, r24
    1bf8:	2b 01       	movw	r4, r22
    1bfa:	3a 01       	movw	r6, r20
    1bfc:	aa 24       	eor	r10, r10
    1bfe:	bb 24       	eor	r11, r11
	while (1)
	{
		// Adafruit CC3k Host Driver Difference
		// Call cc3k_int_poll to try to keep from missing interrupts.
		// Noted 12-12-2014 by tdicola
		cc3k_int_poll();
    1c00:	0e 94 0a 2b 	call	0x5614	; 0x5614 <cc3k_int_poll>

		if (tSLInformation.usEventOrDataReceived != 0)
    1c04:	80 91 70 02 	lds	r24, 0x0270
    1c08:	90 91 71 02 	lds	r25, 0x0271
    1c0c:	89 2b       	or	r24, r25
    1c0e:	c1 f3       	breq	.-16     	; 0x1c00 <hci_event_handler+0x2a>
		{				
			pucReceivedData = (tSLInformation.pucReceivedData);
    1c10:	80 90 72 02 	lds	r8, 0x0272
    1c14:	90 90 73 02 	lds	r9, 0x0273

			if (*pucReceivedData == HCI_TYPE_EVNT)
    1c18:	d4 01       	movw	r26, r8
    1c1a:	8c 91       	ld	r24, X
    1c1c:	84 30       	cpi	r24, 0x04	; 4
    1c1e:	09 f0       	breq	.+2      	; 0x1c22 <hci_event_handler+0x4c>
    1c20:	bf c2       	rjmp	.+1406   	; 0x21a0 <hci_event_handler+0x5ca>
			{
				// Event Received
				STREAM_TO_UINT16((CHAR *)pucReceivedData, HCI_EVENT_OPCODE_OFFSET,
    1c22:	c4 01       	movw	r24, r8
    1c24:	61 e0       	ldi	r22, 0x01	; 1
    1c26:	70 e0       	ldi	r23, 0x00	; 0
    1c28:	0e 94 43 0a 	call	0x1486	; 0x1486 <STREAM_TO_UINT16_f>
    1c2c:	5c 01       	movw	r10, r24
				// Explicit cast of pRetParams to UINT8* to fix compiler warning.
				// Noted 12-12-2014 by tdicola
				RetParams = (UINT8 *)pRetParams;

				// In case unsolicited event received - here the handling finished
				if (hci_unsol_event_handler((CHAR *)pucReceivedData) == 0)
    1c2e:	c4 01       	movw	r24, r8
    1c30:	0e 94 0a 0b 	call	0x1614	; 0x1614 <hci_unsol_event_handler>
    1c34:	61 15       	cp	r22, r1
    1c36:	71 05       	cpc	r23, r1
    1c38:	81 05       	cpc	r24, r1
    1c3a:	91 05       	cpc	r25, r1
    1c3c:	09 f0       	breq	.+2      	; 0x1c40 <hci_event_handler+0x6a>
    1c3e:	a4 c2       	rjmp	.+1352   	; 0x2188 <hci_event_handler+0x5b2>
			if (*pucReceivedData == HCI_TYPE_EVNT)
			{
				// Event Received
				STREAM_TO_UINT16((CHAR *)pucReceivedData, HCI_EVENT_OPCODE_OFFSET,
					usReceivedEventOpcode);
				pucReceivedParams = pucReceivedData + HCI_EVENT_HEADER_SIZE;		
    1c40:	e4 01       	movw	r28, r8
    1c42:	25 96       	adiw	r28, 0x05	; 5
				// In case unsolicited event received - here the handling finished
				if (hci_unsol_event_handler((CHAR *)pucReceivedData) == 0)
				{
					STREAM_TO_UINT8(pucReceivedData, HCI_DATA_LENGTH_OFFSET, usLength);

					switch(usReceivedEventOpcode)
    1c44:	b8 e0       	ldi	r27, 0x08	; 8
    1c46:	ab 16       	cp	r10, r27
    1c48:	b0 e1       	ldi	r27, 0x10	; 16
    1c4a:	bb 06       	cpc	r11, r27
    1c4c:	08 f0       	brcs	.+2      	; 0x1c50 <hci_event_handler+0x7a>
    1c4e:	56 c0       	rjmp	.+172    	; 0x1cfc <hci_event_handler+0x126>
    1c50:	e6 e0       	ldi	r30, 0x06	; 6
    1c52:	ae 16       	cp	r10, r30
    1c54:	e0 e1       	ldi	r30, 0x10	; 16
    1c56:	be 06       	cpc	r11, r30
    1c58:	08 f0       	brcs	.+2      	; 0x1c5c <hci_event_handler+0x86>
    1c5a:	cc c0       	rjmp	.+408    	; 0x1df4 <hci_event_handler+0x21e>
    1c5c:	f2 e0       	ldi	r31, 0x02	; 2
    1c5e:	af 16       	cp	r10, r31
    1c60:	f2 e0       	ldi	r31, 0x02	; 2
    1c62:	bf 06       	cpc	r11, r31
    1c64:	09 f4       	brne	.+2      	; 0x1c68 <hci_event_handler+0x92>
    1c66:	c6 c0       	rjmp	.+396    	; 0x1df4 <hci_event_handler+0x21e>
    1c68:	03 e0       	ldi	r16, 0x03	; 3
    1c6a:	a0 16       	cp	r10, r16
    1c6c:	02 e0       	ldi	r16, 0x02	; 2
    1c6e:	b0 06       	cpc	r11, r16
    1c70:	00 f5       	brcc	.+64     	; 0x1cb2 <hci_event_handler+0xdc>
    1c72:	1d e0       	ldi	r17, 0x0D	; 13
    1c74:	a1 16       	cp	r10, r17
    1c76:	b1 04       	cpc	r11, r1
    1c78:	80 f4       	brcc	.+32     	; 0x1c9a <hci_event_handler+0xc4>
    1c7a:	68 e0       	ldi	r22, 0x08	; 8
    1c7c:	a6 16       	cp	r10, r22
    1c7e:	b1 04       	cpc	r11, r1
    1c80:	08 f0       	brcs	.+2      	; 0x1c84 <hci_event_handler+0xae>
    1c82:	b8 c0       	rjmp	.+368    	; 0x1df4 <hci_event_handler+0x21e>
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	a8 16       	cp	r10, r24
    1c88:	b1 04       	cpc	r11, r1
    1c8a:	08 f4       	brcc	.+2      	; 0x1c8e <hci_event_handler+0xb8>
    1c8c:	7d c2       	rjmp	.+1274   	; 0x2188 <hci_event_handler+0x5b2>
    1c8e:	97 e0       	ldi	r25, 0x07	; 7
    1c90:	a9 16       	cp	r10, r25
    1c92:	b1 04       	cpc	r11, r1
    1c94:	08 f4       	brcc	.+2      	; 0x1c98 <hci_event_handler+0xc2>
    1c96:	ae c0       	rjmp	.+348    	; 0x1df4 <hci_event_handler+0x21e>
    1c98:	d4 c1       	rjmp	.+936    	; 0x2042 <hci_event_handler+0x46c>
    1c9a:	ad e0       	ldi	r26, 0x0D	; 13
    1c9c:	aa 16       	cp	r10, r26
    1c9e:	b1 04       	cpc	r11, r1
    1ca0:	09 f4       	brne	.+2      	; 0x1ca4 <hci_event_handler+0xce>
    1ca2:	a3 c0       	rjmp	.+326    	; 0x1dea <hci_event_handler+0x214>
    1ca4:	b1 e0       	ldi	r27, 0x01	; 1
    1ca6:	ab 16       	cp	r10, r27
    1ca8:	b2 e0       	ldi	r27, 0x02	; 2
    1caa:	bb 06       	cpc	r11, r27
    1cac:	09 f0       	breq	.+2      	; 0x1cb0 <hci_event_handler+0xda>
    1cae:	6c c2       	rjmp	.+1240   	; 0x2188 <hci_event_handler+0x5b2>
    1cb0:	9c c0       	rjmp	.+312    	; 0x1dea <hci_event_handler+0x214>
    1cb2:	e3 e0       	ldi	r30, 0x03	; 3
    1cb4:	ae 16       	cp	r10, r30
    1cb6:	e0 e1       	ldi	r30, 0x10	; 16
    1cb8:	be 06       	cpc	r11, r30
    1cba:	98 f4       	brcc	.+38     	; 0x1ce2 <hci_event_handler+0x10c>
    1cbc:	f1 e0       	ldi	r31, 0x01	; 1
    1cbe:	af 16       	cp	r10, r31
    1cc0:	f0 e1       	ldi	r31, 0x10	; 16
    1cc2:	bf 06       	cpc	r11, r31
    1cc4:	08 f0       	brcs	.+2      	; 0x1cc8 <hci_event_handler+0xf2>
    1cc6:	96 c0       	rjmp	.+300    	; 0x1df4 <hci_event_handler+0x21e>
    1cc8:	05 e0       	ldi	r16, 0x05	; 5
    1cca:	a0 16       	cp	r10, r16
    1ccc:	02 e0       	ldi	r16, 0x02	; 2
    1cce:	b0 06       	cpc	r11, r16
    1cd0:	08 f4       	brcc	.+2      	; 0x1cd4 <hci_event_handler+0xfe>
    1cd2:	8b c0       	rjmp	.+278    	; 0x1dea <hci_event_handler+0x214>
    1cd4:	17 e0       	ldi	r17, 0x07	; 7
    1cd6:	a1 16       	cp	r10, r17
    1cd8:	12 e0       	ldi	r17, 0x02	; 2
    1cda:	b1 06       	cpc	r11, r17
    1cdc:	09 f0       	breq	.+2      	; 0x1ce0 <hci_event_handler+0x10a>
    1cde:	54 c2       	rjmp	.+1192   	; 0x2188 <hci_event_handler+0x5b2>
    1ce0:	8d c0       	rjmp	.+282    	; 0x1dfc <hci_event_handler+0x226>
    1ce2:	64 e0       	ldi	r22, 0x04	; 4
    1ce4:	a6 16       	cp	r10, r22
    1ce6:	60 e1       	ldi	r22, 0x10	; 16
    1ce8:	b6 06       	cpc	r11, r22
    1cea:	09 f4       	brne	.+2      	; 0x1cee <hci_event_handler+0x118>
    1cec:	dc c0       	rjmp	.+440    	; 0x1ea6 <hci_event_handler+0x2d0>
    1cee:	85 e0       	ldi	r24, 0x05	; 5
    1cf0:	a8 16       	cp	r10, r24
    1cf2:	80 e1       	ldi	r24, 0x10	; 16
    1cf4:	b8 06       	cpc	r11, r24
    1cf6:	08 f0       	brcs	.+2      	; 0x1cfa <hci_event_handler+0x124>
    1cf8:	b1 c0       	rjmp	.+354    	; 0x1e5c <hci_event_handler+0x286>
    1cfa:	42 c1       	rjmp	.+644    	; 0x1f80 <hci_event_handler+0x3aa>
    1cfc:	91 e1       	ldi	r25, 0x11	; 17
    1cfe:	a9 16       	cp	r10, r25
    1d00:	90 e1       	ldi	r25, 0x10	; 16
    1d02:	b9 06       	cpc	r11, r25
    1d04:	09 f4       	brne	.+2      	; 0x1d08 <hci_event_handler+0x132>
    1d06:	71 c0       	rjmp	.+226    	; 0x1dea <hci_event_handler+0x214>
    1d08:	a2 e1       	ldi	r26, 0x12	; 18
    1d0a:	aa 16       	cp	r10, r26
    1d0c:	a0 e1       	ldi	r26, 0x10	; 16
    1d0e:	ba 06       	cpc	r11, r26
    1d10:	58 f5       	brcc	.+86     	; 0x1d68 <hci_event_handler+0x192>
    1d12:	bb e0       	ldi	r27, 0x0B	; 11
    1d14:	ab 16       	cp	r10, r27
    1d16:	b0 e1       	ldi	r27, 0x10	; 16
    1d18:	bb 06       	cpc	r11, r27
    1d1a:	09 f4       	brne	.+2      	; 0x1d1e <hci_event_handler+0x148>
    1d1c:	6b c0       	rjmp	.+214    	; 0x1df4 <hci_event_handler+0x21e>
    1d1e:	ec e0       	ldi	r30, 0x0C	; 12
    1d20:	ae 16       	cp	r10, r30
    1d22:	e0 e1       	ldi	r30, 0x10	; 16
    1d24:	be 06       	cpc	r11, r30
    1d26:	68 f4       	brcc	.+26     	; 0x1d42 <hci_event_handler+0x16c>
    1d28:	f9 e0       	ldi	r31, 0x09	; 9
    1d2a:	af 16       	cp	r10, r31
    1d2c:	f0 e1       	ldi	r31, 0x10	; 16
    1d2e:	bf 06       	cpc	r11, r31
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <hci_event_handler+0x15e>
    1d32:	60 c0       	rjmp	.+192    	; 0x1df4 <hci_event_handler+0x21e>
    1d34:	0a e0       	ldi	r16, 0x0A	; 10
    1d36:	a0 16       	cp	r10, r16
    1d38:	00 e1       	ldi	r16, 0x10	; 16
    1d3a:	b0 06       	cpc	r11, r16
    1d3c:	08 f0       	brcs	.+2      	; 0x1d40 <hci_event_handler+0x16a>
    1d3e:	73 c1       	rjmp	.+742    	; 0x2026 <hci_event_handler+0x450>
    1d40:	3a c1       	rjmp	.+628    	; 0x1fb6 <hci_event_handler+0x3e0>
    1d42:	1f e0       	ldi	r17, 0x0F	; 15
    1d44:	a1 16       	cp	r10, r17
    1d46:	10 e1       	ldi	r17, 0x10	; 16
    1d48:	b1 06       	cpc	r11, r17
    1d4a:	09 f4       	brne	.+2      	; 0x1d4e <hci_event_handler+0x178>
    1d4c:	19 c1       	rjmp	.+562    	; 0x1f80 <hci_event_handler+0x3aa>
    1d4e:	60 e1       	ldi	r22, 0x10	; 16
    1d50:	a6 16       	cp	r10, r22
    1d52:	60 e1       	ldi	r22, 0x10	; 16
    1d54:	b6 06       	cpc	r11, r22
    1d56:	08 f0       	brcs	.+2      	; 0x1d5a <hci_event_handler+0x184>
    1d58:	61 c0       	rjmp	.+194    	; 0x1e1c <hci_event_handler+0x246>
    1d5a:	8d e0       	ldi	r24, 0x0D	; 13
    1d5c:	a8 16       	cp	r10, r24
    1d5e:	80 e1       	ldi	r24, 0x10	; 16
    1d60:	b8 06       	cpc	r11, r24
    1d62:	09 f0       	breq	.+2      	; 0x1d66 <hci_event_handler+0x190>
    1d64:	11 c2       	rjmp	.+1058   	; 0x2188 <hci_event_handler+0x5b2>
    1d66:	9f c0       	rjmp	.+318    	; 0x1ea6 <hci_event_handler+0x2d0>
    1d68:	95 e0       	ldi	r25, 0x05	; 5
    1d6a:	a9 16       	cp	r10, r25
    1d6c:	90 e2       	ldi	r25, 0x20	; 32
    1d6e:	b9 06       	cpc	r11, r25
    1d70:	09 f4       	brne	.+2      	; 0x1d74 <hci_event_handler+0x19e>
    1d72:	a4 c1       	rjmp	.+840    	; 0x20bc <hci_event_handler+0x4e6>
    1d74:	a6 e0       	ldi	r26, 0x06	; 6
    1d76:	aa 16       	cp	r10, r26
    1d78:	a0 e2       	ldi	r26, 0x20	; 32
    1d7a:	ba 06       	cpc	r11, r26
    1d7c:	68 f4       	brcc	.+26     	; 0x1d98 <hci_event_handler+0x1c2>
    1d7e:	b2 e1       	ldi	r27, 0x12	; 18
    1d80:	ab 16       	cp	r10, r27
    1d82:	b0 e1       	ldi	r27, 0x10	; 16
    1d84:	bb 06       	cpc	r11, r27
    1d86:	09 f4       	brne	.+2      	; 0x1d8a <hci_event_handler+0x1b4>
    1d88:	60 c0       	rjmp	.+192    	; 0x1e4a <hci_event_handler+0x274>
    1d8a:	e1 e0       	ldi	r30, 0x01	; 1
    1d8c:	ae 16       	cp	r10, r30
    1d8e:	e0 e2       	ldi	r30, 0x20	; 32
    1d90:	be 06       	cpc	r11, r30
    1d92:	08 f4       	brcc	.+2      	; 0x1d96 <hci_event_handler+0x1c0>
    1d94:	f9 c1       	rjmp	.+1010   	; 0x2188 <hci_event_handler+0x5b2>
    1d96:	29 c0       	rjmp	.+82     	; 0x1dea <hci_event_handler+0x214>
    1d98:	fa e0       	ldi	r31, 0x0A	; 10
    1d9a:	af 16       	cp	r10, r31
    1d9c:	f0 e2       	ldi	r31, 0x20	; 32
    1d9e:	bf 06       	cpc	r11, r31
    1da0:	60 f4       	brcc	.+24     	; 0x1dba <hci_event_handler+0x1e4>
    1da2:	08 e0       	ldi	r16, 0x08	; 8
    1da4:	a0 16       	cp	r10, r16
    1da6:	00 e2       	ldi	r16, 0x20	; 32
    1da8:	b0 06       	cpc	r11, r16
    1daa:	f8 f4       	brcc	.+62     	; 0x1dea <hci_event_handler+0x214>
    1dac:	16 e0       	ldi	r17, 0x06	; 6
    1dae:	a1 16       	cp	r10, r17
    1db0:	10 e2       	ldi	r17, 0x20	; 32
    1db2:	b1 06       	cpc	r11, r17
    1db4:	09 f0       	breq	.+2      	; 0x1db8 <hci_event_handler+0x1e2>
    1db6:	e8 c1       	rjmp	.+976    	; 0x2188 <hci_event_handler+0x5b2>
    1db8:	18 c0       	rjmp	.+48     	; 0x1dea <hci_event_handler+0x214>
    1dba:	6b e0       	ldi	r22, 0x0B	; 11
    1dbc:	a6 16       	cp	r10, r22
    1dbe:	60 e4       	ldi	r22, 0x40	; 64
    1dc0:	b6 06       	cpc	r11, r22
    1dc2:	09 f0       	breq	.+2      	; 0x1dc6 <hci_event_handler+0x1f0>
    1dc4:	e1 c1       	rjmp	.+962    	; 0x2188 <hci_event_handler+0x5b2>
					{		
					case HCI_CMND_READ_BUFFER_SIZE:
						{
							STREAM_TO_UINT8((CHAR *)pucReceivedParams, 0, 
    1dc6:	d4 01       	movw	r26, r8
    1dc8:	15 96       	adiw	r26, 0x05	; 5
    1dca:	8c 91       	ld	r24, X
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	90 93 8b 02 	sts	0x028B, r25
    1dd2:	80 93 8a 02 	sts	0x028A, r24
								tSLInformation.usNumberOfFreeBuffers);
							STREAM_TO_UINT16((CHAR *)pucReceivedParams, 1, 
    1dd6:	ce 01       	movw	r24, r28
    1dd8:	61 e0       	ldi	r22, 0x01	; 1
    1dda:	70 e0       	ldi	r23, 0x00	; 0
    1ddc:	0e 94 43 0a 	call	0x1486	; 0x1486 <STREAM_TO_UINT16_f>
    1de0:	90 93 8d 02 	sts	0x028D, r25
    1de4:	80 93 8c 02 	sts	0x028C, r24
    1de8:	cf c1       	rjmp	.+926    	; 0x2188 <hci_event_handler+0x5b2>
					case HCI_EVNT_NVMEM_CREATE_ENTRY:
					case HCI_CMND_NVMEM_WRITE_PATCH:
					case HCI_NETAPP_PING_REPORT:
					case HCI_EVNT_MDNS_ADVERTISE:

						STREAM_TO_UINT8(pucReceivedData, HCI_EVENT_STATUS_OFFSET
    1dea:	e4 01       	movw	r28, r8
    1dec:	8c 81       	ldd	r24, Y+4	; 0x04
    1dee:	f6 01       	movw	r30, r12
    1df0:	80 83       	st	Z, r24
    1df2:	ca c1       	rjmp	.+916    	; 0x2188 <hci_event_handler+0x5b2>
					case HCI_CMND_LISTEN:
					case HCI_EVNT_CLOSE_SOCKET:
					case HCI_EVNT_CONNECT:
					case HCI_EVNT_NVMEM_WRITE:

						STREAM_TO_UINT32((CHAR *)pucReceivedParams,0
    1df4:	ce 01       	movw	r24, r28
    1df6:	60 e0       	ldi	r22, 0x00	; 0
    1df8:	70 e0       	ldi	r23, 0x00	; 0
    1dfa:	1e c0       	rjmp	.+60     	; 0x1e38 <hci_event_handler+0x262>
							,*(UINT32 *)pRetParams);
						break;

					case HCI_EVNT_READ_SP_VERSION:

						STREAM_TO_UINT8(pucReceivedData, HCI_EVENT_STATUS_OFFSET
    1dfc:	f4 01       	movw	r30, r8
    1dfe:	84 81       	ldd	r24, Z+4	; 0x04
    1e00:	d6 01       	movw	r26, r12
    1e02:	8d 93       	st	X+, r24
    1e04:	6d 01       	movw	r12, r26
							,*(UINT8 *)pRetParams);
						pRetParams = ((CHAR *)pRetParams) + 1;
						STREAM_TO_UINT32((CHAR *)pucReceivedParams, 0, retValue32);
    1e06:	ce 01       	movw	r24, r28
    1e08:	60 e0       	ldi	r22, 0x00	; 0
    1e0a:	70 e0       	ldi	r23, 0x00	; 0
    1e0c:	0e 94 4d 0a 	call	0x149a	; 0x149a <STREAM_TO_UINT32_f>
    1e10:	ab 01       	movw	r20, r22
    1e12:	bc 01       	movw	r22, r24
						UINT32_TO_STREAM((UINT8 *)pRetParams, retValue32);				
    1e14:	c6 01       	movw	r24, r12
    1e16:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
    1e1a:	b6 c1       	rjmp	.+876    	; 0x2188 <hci_event_handler+0x5b2>
						break;

					case HCI_EVNT_BSD_GETHOSTBYNAME:

						STREAM_TO_UINT32((CHAR *)pucReceivedParams
    1e1c:	ce 01       	movw	r24, r28
    1e1e:	60 e0       	ldi	r22, 0x00	; 0
    1e20:	70 e0       	ldi	r23, 0x00	; 0
    1e22:	0e 94 4d 0a 	call	0x149a	; 0x149a <STREAM_TO_UINT32_f>
    1e26:	f6 01       	movw	r30, r12
    1e28:	61 93       	st	Z+, r22
    1e2a:	71 93       	st	Z+, r23
    1e2c:	81 93       	st	Z+, r24
    1e2e:	91 93       	st	Z+, r25
    1e30:	6f 01       	movw	r12, r30
							,GET_HOST_BY_NAME_RETVAL_OFFSET,*(UINT32 *)pRetParams);
						pRetParams = ((CHAR *)pRetParams) + 4;
						STREAM_TO_UINT32((CHAR *)pucReceivedParams
    1e32:	ce 01       	movw	r24, r28
    1e34:	64 e0       	ldi	r22, 0x04	; 4
    1e36:	70 e0       	ldi	r23, 0x00	; 0
    1e38:	0e 94 4d 0a 	call	0x149a	; 0x149a <STREAM_TO_UINT32_f>
    1e3c:	d6 01       	movw	r26, r12
    1e3e:	6d 93       	st	X+, r22
    1e40:	7d 93       	st	X+, r23
    1e42:	8d 93       	st	X+, r24
    1e44:	9c 93       	st	X, r25
    1e46:	13 97       	sbiw	r26, 0x03	; 3
    1e48:	9f c1       	rjmp	.+830    	; 0x2188 <hci_event_handler+0x5b2>
							,GET_HOST_BY_NAME_ADDR_OFFSET,*(UINT32 *)pRetParams);					
						break;

					case HCI_EVNT_GETMSSVALUE:

						STREAM_TO_UINT16((CHAR *)pucReceivedParams
    1e4a:	ce 01       	movw	r24, r28
    1e4c:	60 e0       	ldi	r22, 0x00	; 0
    1e4e:	70 e0       	ldi	r23, 0x00	; 0
    1e50:	0e 94 43 0a 	call	0x1486	; 0x1486 <STREAM_TO_UINT16_f>
    1e54:	e6 01       	movw	r28, r12
    1e56:	99 83       	std	Y+1, r25	; 0x01
    1e58:	88 83       	st	Y, r24
    1e5a:	96 c1       	rjmp	.+812    	; 0x2188 <hci_event_handler+0x5b2>

						break;

					case HCI_EVNT_ACCEPT:
						{
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,ACCEPT_SD_OFFSET
    1e5c:	ce 01       	movw	r24, r28
    1e5e:	60 e0       	ldi	r22, 0x00	; 0
    1e60:	70 e0       	ldi	r23, 0x00	; 0
    1e62:	0e 94 4d 0a 	call	0x149a	; 0x149a <STREAM_TO_UINT32_f>
    1e66:	f6 01       	movw	r30, r12
    1e68:	61 93       	st	Z+, r22
    1e6a:	71 93       	st	Z+, r23
    1e6c:	81 93       	st	Z+, r24
    1e6e:	91 93       	st	Z+, r25
    1e70:	8f 01       	movw	r16, r30
								,*(UINT32 *)pRetParams);
							pRetParams = ((CHAR *)pRetParams) + 4;
							STREAM_TO_UINT32((CHAR *)pucReceivedParams
    1e72:	ce 01       	movw	r24, r28
    1e74:	64 e0       	ldi	r22, 0x04	; 4
    1e76:	70 e0       	ldi	r23, 0x00	; 0
    1e78:	0e 94 4d 0a 	call	0x149a	; 0x149a <STREAM_TO_UINT32_f>
    1e7c:	d6 01       	movw	r26, r12
    1e7e:	14 96       	adiw	r26, 0x04	; 4
    1e80:	6d 93       	st	X+, r22
    1e82:	7d 93       	st	X+, r23
    1e84:	8d 93       	st	X+, r24
    1e86:	9c 93       	st	X, r25
    1e88:	17 97       	sbiw	r26, 0x07	; 7
								,ACCEPT_RETURN_STATUS_OFFSET,*(UINT32 *)pRetParams);
							pRetParams = ((CHAR *)pRetParams) + 4; 
    1e8a:	e4 e0       	ldi	r30, 0x04	; 4
    1e8c:	ce 2e       	mov	r12, r30
    1e8e:	d1 2c       	mov	r13, r1
    1e90:	c0 0e       	add	r12, r16
    1e92:	d1 1e       	adc	r13, r17

							//This argument returns in network order
							memcpy((UINT8 *)pRetParams, 
								pucReceivedParams + ACCEPT_ADDRESS__OFFSET, sizeof(sockaddr));	
    1e94:	d6 01       	movw	r26, r12
    1e96:	fe 01       	movw	r30, r28
    1e98:	38 96       	adiw	r30, 0x08	; 8
    1e9a:	80 e1       	ldi	r24, 0x10	; 16
    1e9c:	01 90       	ld	r0, Z+
    1e9e:	0d 92       	st	X+, r0
    1ea0:	81 50       	subi	r24, 0x01	; 1
    1ea2:	e1 f7       	brne	.-8      	; 0x1e9c <hci_event_handler+0x2c6>
    1ea4:	71 c1       	rjmp	.+738    	; 0x2188 <hci_event_handler+0x5b2>
						}

					case HCI_EVNT_RECV:
					case HCI_EVNT_RECVFROM:
						{
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SL_RECEIVE_SD_OFFSET ,*(UINT32 *)pRetParams);
    1ea6:	ce 01       	movw	r24, r28
    1ea8:	60 e0       	ldi	r22, 0x00	; 0
    1eaa:	70 e0       	ldi	r23, 0x00	; 0
    1eac:	0e 94 4d 0a 	call	0x149a	; 0x149a <STREAM_TO_UINT32_f>
    1eb0:	f6 01       	movw	r30, r12
    1eb2:	61 93       	st	Z+, r22
    1eb4:	71 93       	st	Z+, r23
    1eb6:	81 93       	st	Z+, r24
    1eb8:	91 93       	st	Z+, r25
    1eba:	8f 01       	movw	r16, r30
							pRetParams = ((CHAR *)pRetParams) + 4;
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SL_RECEIVE_NUM_BYTES_OFFSET,*(UINT32 *)pRetParams);
    1ebc:	ce 01       	movw	r24, r28
    1ebe:	64 e0       	ldi	r22, 0x04	; 4
    1ec0:	70 e0       	ldi	r23, 0x00	; 0
    1ec2:	0e 94 4d 0a 	call	0x149a	; 0x149a <STREAM_TO_UINT32_f>
    1ec6:	d6 01       	movw	r26, r12
    1ec8:	14 96       	adiw	r26, 0x04	; 4
    1eca:	6d 93       	st	X+, r22
    1ecc:	7d 93       	st	X+, r23
    1ece:	8d 93       	st	X+, r24
    1ed0:	9c 93       	st	X, r25
    1ed2:	17 97       	sbiw	r26, 0x07	; 7
							pRetParams = ((CHAR *)pRetParams) + 4;
    1ed4:	74 e0       	ldi	r23, 0x04	; 4
    1ed6:	c7 2e       	mov	r12, r23
    1ed8:	d1 2c       	mov	r13, r1
    1eda:	c0 0e       	add	r12, r16
    1edc:	d1 1e       	adc	r13, r17
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SL_RECEIVE__FLAGS__OFFSET,*(UINT32 *)pRetParams);
    1ede:	ce 01       	movw	r24, r28
    1ee0:	68 e0       	ldi	r22, 0x08	; 8
    1ee2:	70 e0       	ldi	r23, 0x00	; 0
    1ee4:	0e 94 4d 0a 	call	0x149a	; 0x149a <STREAM_TO_UINT32_f>
    1ee8:	9b 01       	movw	r18, r22
    1eea:	ac 01       	movw	r20, r24
    1eec:	e8 01       	movw	r28, r16
    1eee:	6c 83       	std	Y+4, r22	; 0x04
    1ef0:	7d 83       	std	Y+5, r23	; 0x05
    1ef2:	8e 83       	std	Y+6, r24	; 0x06
    1ef4:	9f 83       	std	Y+7, r25	; 0x07

							if(((tBsdReadReturnParams *)pRetParams)->iNumberOfBytes == ERROR_SOCKET_INACTIVE)
    1ef6:	f6 01       	movw	r30, r12
    1ef8:	84 81       	ldd	r24, Z+4	; 0x04
    1efa:	95 81       	ldd	r25, Z+5	; 0x05
    1efc:	a6 81       	ldd	r26, Z+6	; 0x06
    1efe:	b7 81       	ldd	r27, Z+7	; 0x07
    1f00:	87 5c       	subi	r24, 0xC7	; 199
    1f02:	9f 4f       	sbci	r25, 0xFF	; 255
    1f04:	af 4f       	sbci	r26, 0xFF	; 255
    1f06:	bf 4f       	sbci	r27, 0xFF	; 255
    1f08:	09 f0       	breq	.+2      	; 0x1f0c <hci_event_handler+0x336>
    1f0a:	3e c1       	rjmp	.+636    	; 0x2188 <hci_event_handler+0x5b2>
//!                  accordingly  the global socket status
//
//*****************************************************************************
void set_socket_active_status(INT32 Sd, INT32 Status)
{
	if(M_IS_VALID_SD(Sd) && M_IS_VALID_STATUS(Status))
    1f0c:	28 30       	cpi	r18, 0x08	; 8
    1f0e:	31 05       	cpc	r19, r1
    1f10:	41 05       	cpc	r20, r1
    1f12:	51 05       	cpc	r21, r1
    1f14:	08 f0       	brcs	.+2      	; 0x1f18 <hci_event_handler+0x342>
    1f16:	38 c1       	rjmp	.+624    	; 0x2188 <hci_event_handler+0x5b2>
	{
		socket_active_status &= ~(1 << Sd);      /* clean socket's mask */
    1f18:	82 2f       	mov	r24, r18
    1f1a:	21 e0       	ldi	r18, 0x01	; 1
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	08 2e       	mov	r0, r24
    1f20:	02 c0       	rjmp	.+4      	; 0x1f26 <hci_event_handler+0x350>
    1f22:	22 0f       	add	r18, r18
    1f24:	33 1f       	adc	r19, r19
    1f26:	0a 94       	dec	r0
    1f28:	e2 f7       	brpl	.-8      	; 0x1f22 <hci_event_handler+0x34c>
    1f2a:	20 95       	com	r18
    1f2c:	30 95       	com	r19
    1f2e:	44 27       	eor	r20, r20
    1f30:	37 fd       	sbrc	r19, 7
    1f32:	40 95       	com	r20
    1f34:	54 2f       	mov	r21, r20
    1f36:	e0 90 d0 01 	lds	r14, 0x01D0
    1f3a:	f0 90 d1 01 	lds	r15, 0x01D1
    1f3e:	00 91 d2 01 	lds	r16, 0x01D2
    1f42:	10 91 d3 01 	lds	r17, 0x01D3
    1f46:	2e 21       	and	r18, r14
    1f48:	3f 21       	and	r19, r15
    1f4a:	40 23       	and	r20, r16
    1f4c:	51 23       	and	r21, r17
		socket_active_status |= (Status << Sd); /* set new socket's mask */
    1f4e:	61 e0       	ldi	r22, 0x01	; 1
    1f50:	e6 2e       	mov	r14, r22
    1f52:	f1 2c       	mov	r15, r1
    1f54:	01 2d       	mov	r16, r1
    1f56:	11 2d       	mov	r17, r1
    1f58:	04 c0       	rjmp	.+8      	; 0x1f62 <hci_event_handler+0x38c>
    1f5a:	ee 0c       	add	r14, r14
    1f5c:	ff 1c       	adc	r15, r15
    1f5e:	00 1f       	adc	r16, r16
    1f60:	11 1f       	adc	r17, r17
    1f62:	8a 95       	dec	r24
    1f64:	d2 f7       	brpl	.-12     	; 0x1f5a <hci_event_handler+0x384>
    1f66:	2e 29       	or	r18, r14
    1f68:	3f 29       	or	r19, r15
    1f6a:	40 2b       	or	r20, r16
    1f6c:	51 2b       	or	r21, r17
    1f6e:	20 93 d0 01 	sts	0x01D0, r18
    1f72:	30 93 d1 01 	sts	0x01D1, r19
    1f76:	40 93 d2 01 	sts	0x01D2, r20
    1f7a:	50 93 d3 01 	sts	0x01D3, r21
    1f7e:	04 c1       	rjmp	.+520    	; 0x2188 <hci_event_handler+0x5b2>
						}

					case HCI_EVNT_SEND:
					case HCI_EVNT_SENDTO:
						{
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SL_RECEIVE_SD_OFFSET ,*(UINT32 *)pRetParams);
    1f80:	ce 01       	movw	r24, r28
    1f82:	60 e0       	ldi	r22, 0x00	; 0
    1f84:	70 e0       	ldi	r23, 0x00	; 0
    1f86:	0e 94 4d 0a 	call	0x149a	; 0x149a <STREAM_TO_UINT32_f>
    1f8a:	d6 01       	movw	r26, r12
    1f8c:	6d 93       	st	X+, r22
    1f8e:	7d 93       	st	X+, r23
    1f90:	8d 93       	st	X+, r24
    1f92:	9d 93       	st	X+, r25
    1f94:	8d 01       	movw	r16, r26
							pRetParams = ((CHAR *)pRetParams) + 4;
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SL_RECEIVE_NUM_BYTES_OFFSET,*(UINT32 *)pRetParams);
    1f96:	ce 01       	movw	r24, r28
    1f98:	64 e0       	ldi	r22, 0x04	; 4
    1f9a:	70 e0       	ldi	r23, 0x00	; 0
    1f9c:	0e 94 4d 0a 	call	0x149a	; 0x149a <STREAM_TO_UINT32_f>
    1fa0:	e6 01       	movw	r28, r12
    1fa2:	6c 83       	std	Y+4, r22	; 0x04
    1fa4:	7d 83       	std	Y+5, r23	; 0x05
    1fa6:	8e 83       	std	Y+6, r24	; 0x06
    1fa8:	9f 83       	std	Y+7, r25	; 0x07
							pRetParams = ((CHAR *)pRetParams) + 4;
    1faa:	54 e0       	ldi	r21, 0x04	; 4
    1fac:	c5 2e       	mov	r12, r21
    1fae:	d1 2c       	mov	r13, r1
    1fb0:	c0 0e       	add	r12, r16
    1fb2:	d1 1e       	adc	r13, r17
    1fb4:	e9 c0       	rjmp	.+466    	; 0x2188 <hci_event_handler+0x5b2>
							break;
						}

					case HCI_EVNT_SELECT:
						{ 
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SELECT_STATUS_OFFSET,*(UINT32 *)pRetParams);
    1fb6:	ce 01       	movw	r24, r28
    1fb8:	60 e0       	ldi	r22, 0x00	; 0
    1fba:	70 e0       	ldi	r23, 0x00	; 0
    1fbc:	0e 94 4d 0a 	call	0x149a	; 0x149a <STREAM_TO_UINT32_f>
    1fc0:	f6 01       	movw	r30, r12
    1fc2:	61 93       	st	Z+, r22
    1fc4:	71 93       	st	Z+, r23
    1fc6:	81 93       	st	Z+, r24
    1fc8:	91 93       	st	Z+, r25
    1fca:	8f 01       	movw	r16, r30
							pRetParams = ((CHAR *)pRetParams) + 4;
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SELECT_READFD_OFFSET,*(UINT32 *)pRetParams);
    1fcc:	ce 01       	movw	r24, r28
    1fce:	64 e0       	ldi	r22, 0x04	; 4
    1fd0:	70 e0       	ldi	r23, 0x00	; 0
    1fd2:	0e 94 4d 0a 	call	0x149a	; 0x149a <STREAM_TO_UINT32_f>
    1fd6:	d6 01       	movw	r26, r12
    1fd8:	14 96       	adiw	r26, 0x04	; 4
    1fda:	6d 93       	st	X+, r22
    1fdc:	7d 93       	st	X+, r23
    1fde:	8d 93       	st	X+, r24
    1fe0:	9c 93       	st	X, r25
    1fe2:	17 97       	sbiw	r26, 0x07	; 7
							pRetParams = ((CHAR *)pRetParams) + 4;
    1fe4:	44 e0       	ldi	r20, 0x04	; 4
    1fe6:	e4 2e       	mov	r14, r20
    1fe8:	f1 2c       	mov	r15, r1
    1fea:	e0 0e       	add	r14, r16
    1fec:	f1 1e       	adc	r15, r17
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SELECT_WRITEFD_OFFSET,*(UINT32 *)pRetParams);
    1fee:	ce 01       	movw	r24, r28
    1ff0:	68 e0       	ldi	r22, 0x08	; 8
    1ff2:	70 e0       	ldi	r23, 0x00	; 0
    1ff4:	0e 94 4d 0a 	call	0x149a	; 0x149a <STREAM_TO_UINT32_f>
    1ff8:	f8 01       	movw	r30, r16
    1ffa:	64 83       	std	Z+4, r22	; 0x04
    1ffc:	75 83       	std	Z+5, r23	; 0x05
    1ffe:	86 83       	std	Z+6, r24	; 0x06
    2000:	97 83       	std	Z+7, r25	; 0x07
							pRetParams = ((CHAR *)pRetParams) + 4;
    2002:	34 e0       	ldi	r19, 0x04	; 4
    2004:	c3 2e       	mov	r12, r19
    2006:	d1 2c       	mov	r13, r1
    2008:	ce 0c       	add	r12, r14
    200a:	df 1c       	adc	r13, r15
							STREAM_TO_UINT32((CHAR *)pucReceivedParams,SELECT_EXFD_OFFSET,*(UINT32 *)pRetParams);			
    200c:	ce 01       	movw	r24, r28
    200e:	6c e0       	ldi	r22, 0x0C	; 12
    2010:	70 e0       	ldi	r23, 0x00	; 0
    2012:	0e 94 4d 0a 	call	0x149a	; 0x149a <STREAM_TO_UINT32_f>
    2016:	d7 01       	movw	r26, r14
    2018:	14 96       	adiw	r26, 0x04	; 4
    201a:	6d 93       	st	X+, r22
    201c:	7d 93       	st	X+, r23
    201e:	8d 93       	st	X+, r24
    2020:	9c 93       	st	X, r25
    2022:	17 97       	sbiw	r26, 0x07	; 7
    2024:	b1 c0       	rjmp	.+354    	; 0x2188 <hci_event_handler+0x5b2>
							break;
						}

					case HCI_CMND_GETSOCKOPT:

						STREAM_TO_UINT8(pucReceivedData, HCI_EVENT_STATUS_OFFSET,((tBsdGetSockOptReturnParams *)pRetParams)->iStatus);
    2026:	e4 01       	movw	r28, r8
    2028:	8c 81       	ldd	r24, Y+4	; 0x04
    202a:	f6 01       	movw	r30, r12
    202c:	84 83       	std	Z+4, r24	; 0x04
						//This argument returns in network order
						memcpy((UINT8 *)pRetParams, pucReceivedParams, 4);
    202e:	8d 81       	ldd	r24, Y+5	; 0x05
    2030:	9e 81       	ldd	r25, Y+6	; 0x06
    2032:	af 81       	ldd	r26, Y+7	; 0x07
    2034:	b8 85       	ldd	r27, Y+8	; 0x08
    2036:	e6 01       	movw	r28, r12
    2038:	88 83       	st	Y, r24
    203a:	99 83       	std	Y+1, r25	; 0x01
    203c:	aa 83       	std	Y+2, r26	; 0x02
    203e:	bb 83       	std	Y+3, r27	; 0x03
    2040:	a3 c0       	rjmp	.+326    	; 0x2188 <hci_event_handler+0x5b2>
						break;

					case HCI_CMND_WLAN_IOCTL_GET_SCAN_RESULTS:

						STREAM_TO_UINT32((CHAR *)pucReceivedParams,GET_SCAN_RESULTS_TABlE_COUNT_OFFSET,*(UINT32 *)pRetParams);
    2042:	ce 01       	movw	r24, r28
    2044:	60 e0       	ldi	r22, 0x00	; 0
    2046:	70 e0       	ldi	r23, 0x00	; 0
    2048:	0e 94 4d 0a 	call	0x149a	; 0x149a <STREAM_TO_UINT32_f>
    204c:	f6 01       	movw	r30, r12
    204e:	61 93       	st	Z+, r22
    2050:	71 93       	st	Z+, r23
    2052:	81 93       	st	Z+, r24
    2054:	91 93       	st	Z+, r25
    2056:	8f 01       	movw	r16, r30
						pRetParams = ((CHAR *)pRetParams) + 4;   					
						STREAM_TO_UINT32((CHAR *)pucReceivedParams,GET_SCAN_RESULTS_SCANRESULT_STATUS_OFFSET,*(UINT32 *)pRetParams);
    2058:	ce 01       	movw	r24, r28
    205a:	64 e0       	ldi	r22, 0x04	; 4
    205c:	70 e0       	ldi	r23, 0x00	; 0
    205e:	0e 94 4d 0a 	call	0x149a	; 0x149a <STREAM_TO_UINT32_f>
    2062:	d6 01       	movw	r26, r12
    2064:	14 96       	adiw	r26, 0x04	; 4
    2066:	6d 93       	st	X+, r22
    2068:	7d 93       	st	X+, r23
    206a:	8d 93       	st	X+, r24
    206c:	9c 93       	st	X, r25
    206e:	17 97       	sbiw	r26, 0x07	; 7
						pRetParams = ((CHAR *)pRetParams) + 4;                                                        					
						STREAM_TO_UINT16((CHAR *)pucReceivedParams,GET_SCAN_RESULTS_ISVALID_TO_SSIDLEN_OFFSET,*(UINT32 *)pRetParams);
    2070:	ce 01       	movw	r24, r28
    2072:	68 e0       	ldi	r22, 0x08	; 8
    2074:	70 e0       	ldi	r23, 0x00	; 0
    2076:	0e 94 43 0a 	call	0x1486	; 0x1486 <STREAM_TO_UINT16_f>
    207a:	a0 e0       	ldi	r26, 0x00	; 0
    207c:	b0 e0       	ldi	r27, 0x00	; 0
    207e:	f8 01       	movw	r30, r16
    2080:	84 83       	std	Z+4, r24	; 0x04
    2082:	95 83       	std	Z+5, r25	; 0x05
    2084:	a6 83       	std	Z+6, r26	; 0x06
    2086:	b7 83       	std	Z+7, r27	; 0x07
						pRetParams = ((CHAR *)pRetParams) + 2;   					
						STREAM_TO_UINT16((CHAR *)pucReceivedParams,GET_SCAN_RESULTS_FRAME_TIME_OFFSET,*(UINT32 *)pRetParams);
    2088:	ce 01       	movw	r24, r28
    208a:	6a e0       	ldi	r22, 0x0A	; 10
    208c:	70 e0       	ldi	r23, 0x00	; 0
    208e:	0e 94 43 0a 	call	0x1486	; 0x1486 <STREAM_TO_UINT16_f>
    2092:	a0 e0       	ldi	r26, 0x00	; 0
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	f6 01       	movw	r30, r12
    2098:	82 87       	std	Z+10, r24	; 0x0a
    209a:	93 87       	std	Z+11, r25	; 0x0b
    209c:	a4 87       	std	Z+12, r26	; 0x0c
    209e:	b5 87       	std	Z+13, r27	; 0x0d
						pRetParams = ((CHAR *)pRetParams) + 2;  
    20a0:	2c e0       	ldi	r18, 0x0C	; 12
    20a2:	e2 2e       	mov	r14, r18
    20a4:	f1 2c       	mov	r15, r1
    20a6:	ce 0c       	add	r12, r14
    20a8:	df 1c       	adc	r13, r15
						memcpy((UINT8 *)pRetParams, (CHAR *)(pucReceivedParams + GET_SCAN_RESULTS_FRAME_TIME_OFFSET + 2), GET_SCAN_RESULTS_SSID_MAC_LENGTH);	
    20aa:	d6 01       	movw	r26, r12
    20ac:	fe 01       	movw	r30, r28
    20ae:	3c 96       	adiw	r30, 0x0c	; 12
    20b0:	86 e2       	ldi	r24, 0x26	; 38
    20b2:	01 90       	ld	r0, Z+
    20b4:	0d 92       	st	X+, r0
    20b6:	81 50       	subi	r24, 0x01	; 1
    20b8:	e1 f7       	brne	.-8      	; 0x20b2 <hci_event_handler+0x4dc>
    20ba:	66 c0       	rjmp	.+204    	; 0x2188 <hci_event_handler+0x5b2>
						break;

					case HCI_NETAPP_IPCONFIG:

						//Read IP address
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_IP_LENGTH);
    20bc:	d4 01       	movw	r26, r8
    20be:	15 96       	adiw	r26, 0x05	; 5
    20c0:	8c 91       	ld	r24, X
    20c2:	f6 01       	movw	r30, r12
    20c4:	81 93       	st	Z+, r24
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
    20c8:	d6 01       	movw	r26, r12
    20ca:	11 96       	adiw	r26, 0x01	; 1
    20cc:	8c 93       	st	X, r24
    20ce:	11 97       	sbiw	r26, 0x01	; 1
    20d0:	8a 81       	ldd	r24, Y+2	; 0x02
    20d2:	81 83       	std	Z+1, r24	; 0x01
    20d4:	8b 81       	ldd	r24, Y+3	; 0x03
    20d6:	82 83       	std	Z+2, r24	; 0x02
    20d8:	14 96       	adiw	r26, 0x04	; 4
						RecvParams += 4;
    20da:	f4 01       	movw	r30, r8
    20dc:	39 96       	adiw	r30, 0x09	; 9

						//Read subnet
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_IP_LENGTH);
    20de:	e4 01       	movw	r28, r8
    20e0:	89 85       	ldd	r24, Y+9	; 0x09
    20e2:	e6 01       	movw	r28, r12
    20e4:	8c 83       	std	Y+4, r24	; 0x04
    20e6:	81 81       	ldd	r24, Z+1	; 0x01
    20e8:	8d 83       	std	Y+5, r24	; 0x05
    20ea:	82 81       	ldd	r24, Z+2	; 0x02
    20ec:	8e 83       	std	Y+6, r24	; 0x06
    20ee:	83 81       	ldd	r24, Z+3	; 0x03
    20f0:	8f 83       	std	Y+7, r24	; 0x07
    20f2:	9d 01       	movw	r18, r26
    20f4:	2c 5f       	subi	r18, 0xFC	; 252
    20f6:	3f 4f       	sbci	r19, 0xFF	; 255
						RecvParams += 4;
    20f8:	f4 01       	movw	r30, r8
    20fa:	3d 96       	adiw	r30, 0x0d	; 13

						//Read default GW
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_IP_LENGTH);
    20fc:	e4 01       	movw	r28, r8
    20fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2100:	14 96       	adiw	r26, 0x04	; 4
    2102:	8c 93       	st	X, r24
    2104:	14 97       	sbiw	r26, 0x04	; 4
    2106:	81 81       	ldd	r24, Z+1	; 0x01
    2108:	e6 01       	movw	r28, r12
    210a:	89 87       	std	Y+9, r24	; 0x09
    210c:	82 81       	ldd	r24, Z+2	; 0x02
    210e:	8a 87       	std	Y+10, r24	; 0x0a
    2110:	83 81       	ldd	r24, Z+3	; 0x03
    2112:	8b 87       	std	Y+11, r24	; 0x0b
						RecvParams += 4;
    2114:	f4 01       	movw	r30, r8
    2116:	71 96       	adiw	r30, 0x11	; 17

						//Read DHCP server                                          	
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_IP_LENGTH);
    2118:	e4 01       	movw	r28, r8
    211a:	89 89       	ldd	r24, Y+17	; 0x11
    211c:	e9 01       	movw	r28, r18
    211e:	8c 83       	std	Y+4, r24	; 0x04
    2120:	81 81       	ldd	r24, Z+1	; 0x01
    2122:	e6 01       	movw	r28, r12
    2124:	8d 87       	std	Y+13, r24	; 0x0d
    2126:	82 81       	ldd	r24, Z+2	; 0x02
    2128:	8e 87       	std	Y+14, r24	; 0x0e
    212a:	83 81       	ldd	r24, Z+3	; 0x03
    212c:	8f 87       	std	Y+15, r24	; 0x0f
						RecvParams += 4;
    212e:	f4 01       	movw	r30, r8
    2130:	75 96       	adiw	r30, 0x15	; 21

						//Read DNS server                                           
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_IP_LENGTH);
    2132:	e4 01       	movw	r28, r8
    2134:	8d 89       	ldd	r24, Y+21	; 0x15
    2136:	e9 01       	movw	r28, r18
    2138:	88 87       	std	Y+8, r24	; 0x08
    213a:	81 81       	ldd	r24, Z+1	; 0x01
    213c:	1d 96       	adiw	r26, 0x0d	; 13
    213e:	8c 93       	st	X, r24
    2140:	1d 97       	sbiw	r26, 0x0d	; 13
    2142:	82 81       	ldd	r24, Z+2	; 0x02
    2144:	1e 96       	adiw	r26, 0x0e	; 14
    2146:	8c 93       	st	X, r24
    2148:	1e 97       	sbiw	r26, 0x0e	; 14
    214a:	83 81       	ldd	r24, Z+3	; 0x03
    214c:	1f 96       	adiw	r26, 0x0f	; 15
    214e:	8c 93       	st	X, r24
    2150:	e4 01       	movw	r28, r8
    2152:	96 01       	movw	r18, r12
    2154:	f4 01       	movw	r30, r8
    2156:	d6 01       	movw	r26, r12
						RecvParams += 4;

						//Read Mac address                            	
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_MAC_LENGTH);
    2158:	a4 01       	movw	r20, r8
    215a:	4a 5f       	subi	r20, 0xFA	; 250
    215c:	5f 4f       	sbci	r21, 0xFF	; 255
    215e:	81 8d       	ldd	r24, Z+25	; 0x19
    2160:	54 96       	adiw	r26, 0x14	; 20
    2162:	8c 93       	st	X, r24
    2164:	54 97       	sbiw	r26, 0x14	; 20
    2166:	31 96       	adiw	r30, 0x01	; 1
    2168:	11 96       	adiw	r26, 0x01	; 1
    216a:	e4 17       	cp	r30, r20
    216c:	f5 07       	cpc	r31, r21
    216e:	b9 f7       	brne	.-18     	; 0x215e <hci_event_handler+0x588>
						RecvParams += 6;

						//Read SSID
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_SSID_LENGTH);
    2170:	a4 01       	movw	r20, r8
    2172:	40 5e       	subi	r20, 0xE0	; 224
    2174:	5f 4f       	sbci	r21, 0xFF	; 255
    2176:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2178:	f9 01       	movw	r30, r18
    217a:	82 8f       	std	Z+26, r24	; 0x1a
    217c:	21 96       	adiw	r28, 0x01	; 1
    217e:	2f 5f       	subi	r18, 0xFF	; 255
    2180:	3f 4f       	sbci	r19, 0xFF	; 255
    2182:	c4 17       	cp	r28, r20
    2184:	d5 07       	cpc	r29, r21
    2186:	b9 f7       	brne	.-18     	; 0x2176 <hci_event_handler+0x5a0>

					}
				}

				if (usReceivedEventOpcode == tSLInformation.usRxEventOpcode)
    2188:	80 91 6e 02 	lds	r24, 0x026E
    218c:	90 91 6f 02 	lds	r25, 0x026F
    2190:	a8 16       	cp	r10, r24
    2192:	b9 06       	cpc	r11, r25
    2194:	b9 f5       	brne	.+110    	; 0x2204 <hci_event_handler+0x62e>
				{
					tSLInformation.usRxEventOpcode = 0;
    2196:	10 92 6f 02 	sts	0x026F, r1
    219a:	10 92 6e 02 	sts	0x026E, r1
    219e:	32 c0       	rjmp	.+100    	; 0x2204 <hci_event_handler+0x62e>
				}
			}
			else
			{				
				pucReceivedParams = pucReceivedData;
				STREAM_TO_UINT8((CHAR *)pucReceivedData, HCI_PACKET_ARGSIZE_OFFSET, ucArgsize);
    21a0:	d4 01       	movw	r26, r8
    21a2:	12 96       	adiw	r26, 0x02	; 2
    21a4:	0c 91       	ld	r16, X

				STREAM_TO_UINT16((CHAR *)pucReceivedData, HCI_PACKET_LENGTH_OFFSET, usLength);
    21a6:	c4 01       	movw	r24, r8
    21a8:	63 e0       	ldi	r22, 0x03	; 3
    21aa:	70 e0       	ldi	r23, 0x00	; 0
    21ac:	0e 94 43 0a 	call	0x1486	; 0x1486 <STREAM_TO_UINT16_f>
    21b0:	ec 01       	movw	r28, r24

				// Data received: note that the only case where from and from length 
				// are not null is in recv from, so fill the args accordingly
				if (from)
    21b2:	41 14       	cp	r4, r1
    21b4:	51 04       	cpc	r5, r1
    21b6:	a1 f0       	breq	.+40     	; 0x21e0 <hci_event_handler+0x60a>
				{
					STREAM_TO_UINT32((CHAR *)(pucReceivedData + HCI_DATA_HEADER_SIZE), BSD_RECV_FROM_FROMLEN_OFFSET, *(UINT32 *)fromlen);
    21b8:	c4 01       	movw	r24, r8
    21ba:	05 96       	adiw	r24, 0x05	; 5
    21bc:	64 e0       	ldi	r22, 0x04	; 4
    21be:	70 e0       	ldi	r23, 0x00	; 0
    21c0:	0e 94 4d 0a 	call	0x149a	; 0x149a <STREAM_TO_UINT32_f>
    21c4:	46 2f       	mov	r20, r22
    21c6:	f3 01       	movw	r30, r6
    21c8:	60 83       	st	Z, r22
    21ca:	71 83       	std	Z+1, r23	; 0x01
    21cc:	82 83       	std	Z+2, r24	; 0x02
    21ce:	93 83       	std	Z+3, r25	; 0x03
					memcpy(from, (pucReceivedData + HCI_DATA_HEADER_SIZE + BSD_RECV_FROM_FROM_OFFSET) ,*fromlen);
    21d0:	94 01       	movw	r18, r8
    21d2:	2b 5e       	subi	r18, 0xEB	; 235
    21d4:	3f 4f       	sbci	r19, 0xFF	; 255
    21d6:	c2 01       	movw	r24, r4
    21d8:	b9 01       	movw	r22, r18
    21da:	50 e0       	ldi	r21, 0x00	; 0
    21dc:	0e 94 df 03 	call	0x7be	; 0x7be <memcpy>
				}

				memcpy(pRetParams, pucReceivedParams + HCI_DATA_HEADER_SIZE + ucArgsize,
					usLength - ucArgsize);
    21e0:	20 2f       	mov	r18, r16
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	fe 01       	movw	r30, r28
    21e6:	e2 1b       	sub	r30, r18
    21e8:	f3 0b       	sbc	r31, r19
    21ea:	2b 5f       	subi	r18, 0xFB	; 251
    21ec:	3f 4f       	sbci	r19, 0xFF	; 255
    21ee:	28 0d       	add	r18, r8
    21f0:	39 1d       	adc	r19, r9
    21f2:	c6 01       	movw	r24, r12
    21f4:	b9 01       	movw	r22, r18
    21f6:	af 01       	movw	r20, r30
    21f8:	0e 94 df 03 	call	0x7be	; 0x7be <memcpy>

				tSLInformation.usRxDataPending = 0;
    21fc:	10 92 91 02 	sts	0x0291, r1
    2200:	10 92 90 02 	sts	0x0290, r1
			}

			tSLInformation.usEventOrDataReceived = 0;
    2204:	10 92 71 02 	sts	0x0271, r1
    2208:	10 92 70 02 	sts	0x0270, r1

			SpiResumeSpi();
    220c:	0e 94 d4 29 	call	0x53a8	; 0x53a8 <_Z12SpiResumeSpiv>

			// Since we are going to TX - we need to handle this event after the 
			// ResumeSPi since we need interrupts
			if ((*pucReceivedData == HCI_TYPE_EVNT) &&
    2210:	d4 01       	movw	r26, r8
    2212:	8c 91       	ld	r24, X
    2214:	84 30       	cpi	r24, 0x04	; 4
    2216:	41 f4       	brne	.+16     	; 0x2228 <hci_event_handler+0x652>
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	ab 16       	cp	r10, r27
    221c:	b0 e1       	ldi	r27, 0x10	; 16
    221e:	bb 06       	cpc	r11, r27
    2220:	19 f4       	brne	.+6      	; 0x2228 <hci_event_handler+0x652>
				(usReceivedEventOpcode == HCI_EVNT_PATCHES_REQ))
			{
				hci_unsol_handle_patch_request((CHAR *)pucReceivedData);
    2222:	c4 01       	movw	r24, r8
    2224:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <_Z30hci_unsol_handle_patch_requestPc>
			}

			if ((tSLInformation.usRxEventOpcode == 0) && (tSLInformation.usRxDataPending == 0))
    2228:	80 91 6e 02 	lds	r24, 0x026E
    222c:	90 91 6f 02 	lds	r25, 0x026F
    2230:	89 2b       	or	r24, r25
    2232:	09 f0       	breq	.+2      	; 0x2236 <hci_event_handler+0x660>
    2234:	e5 cc       	rjmp	.-1590   	; 0x1c00 <hci_event_handler+0x2a>
    2236:	80 91 90 02 	lds	r24, 0x0290
    223a:	90 91 91 02 	lds	r25, 0x0291
    223e:	89 2b       	or	r24, r25
    2240:	09 f0       	breq	.+2      	; 0x2244 <hci_event_handler+0x66e>
    2242:	de cc       	rjmp	.-1604   	; 0x1c00 <hci_event_handler+0x2a>
				return NULL;
			}	
		}
	}

}
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	df 91       	pop	r29
    224a:	cf 91       	pop	r28
    224c:	1f 91       	pop	r17
    224e:	0f 91       	pop	r16
    2250:	ff 90       	pop	r15
    2252:	ef 90       	pop	r14
    2254:	df 90       	pop	r13
    2256:	cf 90       	pop	r12
    2258:	bf 90       	pop	r11
    225a:	af 90       	pop	r10
    225c:	9f 90       	pop	r9
    225e:	8f 90       	pop	r8
    2260:	7f 90       	pop	r7
    2262:	6f 90       	pop	r6
    2264:	5f 90       	pop	r5
    2266:	4f 90       	pop	r4
    2268:	08 95       	ret

0000226a <SimpleLinkWaitData>:

void SimpleLinkWaitData(UINT8 *pBuf, UINT8 *from, UINT8 *fromlen)
{
	// In the blocking implementation the control to caller will be returned only 
	// after the end of current transaction, i.e. only after data will be received
	tSLInformation.usRxDataPending = 1;
    226a:	21 e0       	ldi	r18, 0x01	; 1
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	30 93 91 02 	sts	0x0291, r19
    2272:	20 93 90 02 	sts	0x0290, r18
	hci_event_handler(pBuf, from, fromlen);
    2276:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <hci_event_handler>
}
    227a:	08 95       	ret

0000227c <SimpleLinkWaitEvent>:

void SimpleLinkWaitEvent(UINT16 usOpcode, void *pRetParams)
{
	// In the blocking implementation the control to caller will be returned only 
	// after the end of current transaction
	tSLInformation.usRxEventOpcode = usOpcode;
    227c:	90 93 6f 02 	sts	0x026F, r25
    2280:	80 93 6e 02 	sts	0x026E, r24
	hci_event_handler(pRetParams, 0, 0);
    2284:	cb 01       	movw	r24, r22
    2286:	60 e0       	ldi	r22, 0x00	; 0
    2288:	70 e0       	ldi	r23, 0x00	; 0
    228a:	40 e0       	ldi	r20, 0x00	; 0
    228c:	50 e0       	ldi	r21, 0x00	; 0
    228e:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <hci_event_handler>
}
    2292:	08 95       	ret

00002294 <hci_data_send>:
INT32 hci_data_send(UINT8 ucOpcode, 
	UINT8 *ucArgs,
	UINT16 usArgsLength, 
	UINT16 usDataLength,
	const UINT8 *ucTail,
	UINT16 usTailLength)
    2294:	cf 92       	push	r12
    2296:	df 92       	push	r13
    2298:	ef 92       	push	r14
    229a:	ff 92       	push	r15
    229c:	0f 93       	push	r16
    229e:	1f 93       	push	r17
    22a0:	6b 01       	movw	r12, r22
    22a2:	89 01       	movw	r16, r18
{
	UINT8 *stream;

	stream = ((ucArgs) + SPI_HEADER_SIZE);

	UINT8_TO_STREAM(stream, HCI_TYPE_DATA);
    22a4:	92 e0       	ldi	r25, 0x02	; 2
    22a6:	fb 01       	movw	r30, r22
    22a8:	95 83       	std	Z+5, r25	; 0x05
	UINT8_TO_STREAM(stream, ucOpcode);
    22aa:	86 83       	std	Z+6, r24	; 0x06
	UINT8_TO_STREAM(stream, usArgsLength);
    22ac:	47 83       	std	Z+7, r20	; 0x07
	stream = UINT16_TO_STREAM(stream, usArgsLength + usDataLength + usTailLength);
    22ae:	04 0f       	add	r16, r20
    22b0:	15 1f       	adc	r17, r21
    22b2:	0e 0d       	add	r16, r14
    22b4:	1f 1d       	adc	r17, r15
    22b6:	cb 01       	movw	r24, r22
    22b8:	08 96       	adiw	r24, 0x08	; 8
    22ba:	b8 01       	movw	r22, r16
    22bc:	0e 94 3b 0a 	call	0x1476	; 0x1476 <UINT16_TO_STREAM_f>

	// Send the packet over the SPI
	SpiWrite(ucArgs, SIMPLE_LINK_HCI_DATA_HEADER_SIZE + usArgsLength + usDataLength + usTailLength);
    22c0:	0b 5f       	subi	r16, 0xFB	; 251
    22c2:	1f 4f       	sbci	r17, 0xFF	; 255
    22c4:	c6 01       	movw	r24, r12
    22c6:	b8 01       	movw	r22, r16
    22c8:	0e 94 90 2b 	call	0x5720	; 0x5720 <_Z8SpiWritePht>

	return(ESUCCESS);
}
    22cc:	60 e0       	ldi	r22, 0x00	; 0
    22ce:	70 e0       	ldi	r23, 0x00	; 0
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	1f 91       	pop	r17
    22d6:	0f 91       	pop	r16
    22d8:	ff 90       	pop	r15
    22da:	ef 90       	pop	r14
    22dc:	df 90       	pop	r13
    22de:	cf 90       	pop	r12
    22e0:	08 95       	ret

000022e2 <hci_command_send>:
//!  @return              none
//!
//!  @brief               Initiate an HCI command.
//
//*****************************************************************************
UINT16 hci_command_send(UINT16 usOpcode, UINT8 *pucBuff, UINT8 ucArgsLength)
    22e2:	ef 92       	push	r14
    22e4:	ff 92       	push	r15
    22e6:	0f 93       	push	r16
    22e8:	1f 93       	push	r17
    22ea:	9c 01       	movw	r18, r24
    22ec:	7b 01       	movw	r14, r22
    22ee:	04 2f       	mov	r16, r20
{ 
	UINT8 *stream;

	stream = (pucBuff + SPI_HEADER_SIZE);

	UINT8_TO_STREAM(stream, HCI_TYPE_CMND);
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	fb 01       	movw	r30, r22
    22f4:	85 83       	std	Z+5, r24	; 0x05
	stream = UINT16_TO_STREAM(stream, usOpcode);
    22f6:	cb 01       	movw	r24, r22
    22f8:	06 96       	adiw	r24, 0x06	; 6
    22fa:	b9 01       	movw	r22, r18
    22fc:	0e 94 3b 0a 	call	0x1476	; 0x1476 <UINT16_TO_STREAM_f>
    2300:	fc 01       	movw	r30, r24
	UINT8_TO_STREAM(stream, ucArgsLength);
    2302:	00 83       	st	Z, r16

	//Update the opcode of the event we will be waiting for
	SpiWrite(pucBuff, ucArgsLength + SIMPLE_LINK_HCI_CMND_HEADER_SIZE);
    2304:	10 e0       	ldi	r17, 0x00	; 0
    2306:	0c 5f       	subi	r16, 0xFC	; 252
    2308:	1f 4f       	sbci	r17, 0xFF	; 255
    230a:	c7 01       	movw	r24, r14
    230c:	b8 01       	movw	r22, r16
    230e:	0e 94 90 2b 	call	0x5720	; 0x5720 <_Z8SpiWritePht>

	return(0);
}
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	1f 91       	pop	r17
    2318:	0f 91       	pop	r16
    231a:	ff 90       	pop	r15
    231c:	ef 90       	pop	r14
    231e:	08 95       	ret

00002320 <hci_patch_send>:
//!  @return              none
//!
//!  @brief               Prepeare HCI header and initiate an HCI patch write operation
//
//*****************************************************************************
void hci_patch_send(UINT8 ucOpcode, UINT8 *pucBuff, CHAR *patch, UINT16 usDataLength)
    2320:	4f 92       	push	r4
    2322:	5f 92       	push	r5
    2324:	6f 92       	push	r6
    2326:	7f 92       	push	r7
    2328:	8f 92       	push	r8
    232a:	9f 92       	push	r9
    232c:	af 92       	push	r10
    232e:	bf 92       	push	r11
    2330:	cf 92       	push	r12
    2332:	df 92       	push	r13
    2334:	ef 92       	push	r14
    2336:	ff 92       	push	r15
    2338:	0f 93       	push	r16
    233a:	1f 93       	push	r17
    233c:	cf 93       	push	r28
    233e:	df 93       	push	r29
    2340:	6b 01       	movw	r12, r22
    2342:	4a 01       	movw	r8, r20
    2344:	e9 01       	movw	r28, r18
{ 
	UINT8 *data_ptr = (pucBuff + SPI_HEADER_SIZE);
    2346:	45 e0       	ldi	r20, 0x05	; 5
    2348:	44 2e       	mov	r4, r20
    234a:	51 2c       	mov	r5, r1
    234c:	46 0e       	add	r4, r22
    234e:	57 1e       	adc	r5, r23
	UINT16 usTransLength;
	UINT8 *stream = (pucBuff + SPI_HEADER_SIZE);

	UINT8_TO_STREAM(stream, HCI_TYPE_PATCH);
    2350:	93 e0       	ldi	r25, 0x03	; 3
    2352:	fb 01       	movw	r30, r22
    2354:	95 83       	std	Z+5, r25	; 0x05
	UINT8_TO_STREAM(stream, ucOpcode);
    2356:	86 83       	std	Z+6, r24	; 0x06
    2358:	37 e0       	ldi	r19, 0x07	; 7
    235a:	63 2e       	mov	r6, r19
    235c:	71 2c       	mov	r7, r1
    235e:	66 0e       	add	r6, r22
    2360:	77 1e       	adc	r7, r23
	stream = UINT16_TO_STREAM(stream, usDataLength + SIMPLE_LINK_HCI_PATCH_HEADER_SIZE);
    2362:	8e 01       	movw	r16, r28
    2364:	0e 5f       	subi	r16, 0xFE	; 254
    2366:	1f 4f       	sbci	r17, 0xFF	; 255
    2368:	c3 01       	movw	r24, r6
    236a:	b8 01       	movw	r22, r16
    236c:	0e 94 3b 0a 	call	0x1476	; 0x1476 <UINT16_TO_STREAM_f>
    2370:	7c 01       	movw	r14, r24
    2372:	2b e0       	ldi	r18, 0x0B	; 11
    2374:	a2 2e       	mov	r10, r18
    2376:	b1 2c       	mov	r11, r1
    2378:	ac 0c       	add	r10, r12
    237a:	bd 1c       	adc	r11, r13

	if (usDataLength <= SL_PATCH_PORTION_SIZE)
    237c:	f3 e0       	ldi	r31, 0x03	; 3
    237e:	c9 3e       	cpi	r28, 0xE9	; 233
    2380:	df 07       	cpc	r29, r31
    2382:	90 f4       	brcc	.+36     	; 0x23a8 <hci_patch_send+0x88>
	{
		UINT16_TO_STREAM(stream, usDataLength);
    2384:	be 01       	movw	r22, r28
    2386:	0e 94 3b 0a 	call	0x1476	; 0x1476 <UINT16_TO_STREAM_f>
		stream = UINT16_TO_STREAM(stream, usDataLength);
    238a:	c7 01       	movw	r24, r14
    238c:	be 01       	movw	r22, r28
    238e:	0e 94 3b 0a 	call	0x1476	; 0x1476 <UINT16_TO_STREAM_f>
		memcpy((pucBuff + SPI_HEADER_SIZE) + HCI_PATCH_HEADER_SIZE, patch, usDataLength);
    2392:	c5 01       	movw	r24, r10
    2394:	b4 01       	movw	r22, r8
    2396:	ae 01       	movw	r20, r28
    2398:	0e 94 df 03 	call	0x7be	; 0x7be <memcpy>

		// Update the opcode of the event we will be waiting for
		SpiWrite(pucBuff, usDataLength + HCI_PATCH_HEADER_SIZE);
    239c:	26 96       	adiw	r28, 0x06	; 6
    239e:	c6 01       	movw	r24, r12
    23a0:	be 01       	movw	r22, r28
    23a2:	0e 94 90 2b 	call	0x5720	; 0x5720 <_Z8SpiWritePht>
    23a6:	47 c0       	rjmp	.+142    	; 0x2436 <hci_patch_send+0x116>
	}
	else
	{

		usTransLength = (usDataLength/SL_PATCH_PORTION_SIZE);
		UINT16_TO_STREAM(stream, usDataLength + SIMPLE_LINK_HCI_PATCH_HEADER_SIZE + usTransLength*SIMPLE_LINK_HCI_PATCH_HEADER_SIZE);
    23a8:	ce 01       	movw	r24, r28
    23aa:	68 ee       	ldi	r22, 0xE8	; 232
    23ac:	73 e0       	ldi	r23, 0x03	; 3
    23ae:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <__udivmodhi4>
    23b2:	66 0f       	add	r22, r22
    23b4:	77 1f       	adc	r23, r23
    23b6:	06 0f       	add	r16, r22
    23b8:	17 1f       	adc	r17, r23
    23ba:	c7 01       	movw	r24, r14
    23bc:	b8 01       	movw	r22, r16
    23be:	0e 94 3b 0a 	call	0x1476	; 0x1476 <UINT16_TO_STREAM_f>
		stream = UINT16_TO_STREAM(stream, SL_PATCH_PORTION_SIZE);
    23c2:	c7 01       	movw	r24, r14
    23c4:	68 ee       	ldi	r22, 0xE8	; 232
    23c6:	73 e0       	ldi	r23, 0x03	; 3
    23c8:	0e 94 3b 0a 	call	0x1476	; 0x1476 <UINT16_TO_STREAM_f>
		memcpy(pucBuff + SPI_HEADER_SIZE + HCI_PATCH_HEADER_SIZE, patch, SL_PATCH_PORTION_SIZE);
    23cc:	d5 01       	movw	r26, r10
    23ce:	f4 01       	movw	r30, r8
    23d0:	88 ee       	ldi	r24, 0xE8	; 232
    23d2:	93 e0       	ldi	r25, 0x03	; 3
    23d4:	01 90       	ld	r0, Z+
    23d6:	0d 92       	st	X+, r0
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	e1 f7       	brne	.-8      	; 0x23d4 <hci_patch_send+0xb4>
		usDataLength -= SL_PATCH_PORTION_SIZE;
    23dc:	8e 01       	movw	r16, r28
    23de:	08 5e       	subi	r16, 0xE8	; 232
    23e0:	13 40       	sbci	r17, 0x03	; 3
		patch += SL_PATCH_PORTION_SIZE;
    23e2:	88 ee       	ldi	r24, 0xE8	; 232
    23e4:	e8 2e       	mov	r14, r24
    23e6:	83 e0       	ldi	r24, 0x03	; 3
    23e8:	f8 2e       	mov	r15, r24
    23ea:	e8 0c       	add	r14, r8
    23ec:	f9 1c       	adc	r15, r9

		// Update the opcode of the event we will be waiting for
		SpiWrite(pucBuff, SL_PATCH_PORTION_SIZE + HCI_PATCH_HEADER_SIZE);
    23ee:	c6 01       	movw	r24, r12
    23f0:	6e ee       	ldi	r22, 0xEE	; 238
    23f2:	73 e0       	ldi	r23, 0x03	; 3
    23f4:	1b c0       	rjmp	.+54     	; 0x242c <hci_patch_send+0x10c>
		while (usDataLength)
		{
			// Adafruit CC3k Host Driver Difference
			// Check for missed interrupt to try to make code more reliable.
			// Noted 12-12-2014 by tdicola
			cc3k_int_poll();
    23f6:	0e 94 0a 2b 	call	0x5614	; 0x5614 <cc3k_int_poll>

			if (usDataLength <= SL_PATCH_PORTION_SIZE)
    23fa:	83 e0       	ldi	r24, 0x03	; 3
    23fc:	09 3e       	cpi	r16, 0xE9	; 233
    23fe:	18 07       	cpc	r17, r24
    2400:	20 f4       	brcc	.+8      	; 0x240a <hci_patch_send+0xea>
    2402:	e8 01       	movw	r28, r16
    2404:	00 e0       	ldi	r16, 0x00	; 0
    2406:	10 e0       	ldi	r17, 0x00	; 0
    2408:	04 c0       	rjmp	.+8      	; 0x2412 <hci_patch_send+0xf2>

			}
			else
			{
				usTransLength = SL_PATCH_PORTION_SIZE;
				usDataLength -= usTransLength;
    240a:	08 5e       	subi	r16, 0xE8	; 232
    240c:	13 40       	sbci	r17, 0x03	; 3
    240e:	c8 ee       	ldi	r28, 0xE8	; 232
    2410:	d3 e0       	ldi	r29, 0x03	; 3
			}

			*(UINT16 *)data_ptr = usTransLength;
    2412:	f2 01       	movw	r30, r4
    2414:	d1 83       	std	Z+1, r29	; 0x01
    2416:	c0 83       	st	Z, r28
			memcpy(data_ptr + SIMPLE_LINK_HCI_PATCH_HEADER_SIZE, patch, usTransLength);
    2418:	c3 01       	movw	r24, r6
    241a:	b7 01       	movw	r22, r14
    241c:	ae 01       	movw	r20, r28
    241e:	0e 94 df 03 	call	0x7be	; 0x7be <memcpy>
			patch += usTransLength;
    2422:	ec 0e       	add	r14, r28
    2424:	fd 1e       	adc	r15, r29

			// Update the opcode of the event we will be waiting for
			SpiWrite((UINT8 *)data_ptr, usTransLength + sizeof(usTransLength));
    2426:	22 96       	adiw	r28, 0x02	; 2
    2428:	c2 01       	movw	r24, r4
    242a:	be 01       	movw	r22, r28
    242c:	0e 94 90 2b 	call	0x5720	; 0x5720 <_Z8SpiWritePht>
		patch += SL_PATCH_PORTION_SIZE;

		// Update the opcode of the event we will be waiting for
		SpiWrite(pucBuff, SL_PATCH_PORTION_SIZE + HCI_PATCH_HEADER_SIZE);

		while (usDataLength)
    2430:	01 15       	cp	r16, r1
    2432:	11 05       	cpc	r17, r1
    2434:	01 f7       	brne	.-64     	; 0x23f6 <hci_patch_send+0xd6>

			// Update the opcode of the event we will be waiting for
			SpiWrite((UINT8 *)data_ptr, usTransLength + sizeof(usTransLength));
		}
	}
}
    2436:	df 91       	pop	r29
    2438:	cf 91       	pop	r28
    243a:	1f 91       	pop	r17
    243c:	0f 91       	pop	r16
    243e:	ff 90       	pop	r15
    2440:	ef 90       	pop	r14
    2442:	df 90       	pop	r13
    2444:	cf 90       	pop	r12
    2446:	bf 90       	pop	r11
    2448:	af 90       	pop	r10
    244a:	9f 90       	pop	r9
    244c:	8f 90       	pop	r8
    244e:	7f 90       	pop	r7
    2450:	6f 90       	pop	r6
    2452:	5f 90       	pop	r5
    2454:	4f 90       	pop	r4
    2456:	08 95       	ret

00002458 <netapp_ipconfig>:
//!       		the Wireless network the device is associated with.
//!
//*****************************************************************************

#ifndef CC3000_TINY_DRIVER
void netapp_ipconfig( tNetappIpconfigRetArgs * ipconfig )
    2458:	0f 93       	push	r16
    245a:	1f 93       	push	r17
    245c:	8c 01       	movw	r16, r24
{
	UINT8 *ptr;

	ptr = tSLInformation.pucTxCommandBuffer;
    245e:	60 91 74 02 	lds	r22, 0x0274
    2462:	70 91 75 02 	lds	r23, 0x0275

	// Initiate a HCI command
	hci_command_send(HCI_NETAPP_IPCONFIG, ptr, 0);
    2466:	85 e0       	ldi	r24, 0x05	; 5
    2468:	90 e2       	ldi	r25, 0x20	; 32
    246a:	40 e0       	ldi	r20, 0x00	; 0
    246c:	0e 94 71 11 	call	0x22e2	; 0x22e2 <hci_command_send>

	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_NETAPP_IPCONFIG, ipconfig );
    2470:	85 e0       	ldi	r24, 0x05	; 5
    2472:	90 e2       	ldi	r25, 0x20	; 32
    2474:	b8 01       	movw	r22, r16
    2476:	0e 94 3e 11 	call	0x227c	; 0x227c <SimpleLinkWaitEvent>

}
    247a:	1f 91       	pop	r17
    247c:	0f 91       	pop	r16
    247e:	08 95       	ret

00002480 <netapp_timeout_values>:
//!               it will be set automatically to 10s.
//!
//*****************************************************************************

#ifndef CC3000_TINY_DRIVER
INT32 netapp_timeout_values(UINT32 *aucDHCP, UINT32 *aucARP,UINT32 *aucKeepalive,	UINT32 *aucInactivity)
    2480:	8f 92       	push	r8
    2482:	9f 92       	push	r9
    2484:	af 92       	push	r10
    2486:	bf 92       	push	r11
    2488:	cf 92       	push	r12
    248a:	df 92       	push	r13
    248c:	ef 92       	push	r14
    248e:	ff 92       	push	r15
    2490:	0f 93       	push	r16
    2492:	1f 93       	push	r17
    2494:	df 93       	push	r29
    2496:	cf 93       	push	r28
    2498:	0f 92       	push	r0
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
    249e:	4c 01       	movw	r8, r24
    24a0:	8b 01       	movw	r16, r22
    24a2:	7a 01       	movw	r14, r20
    24a4:	69 01       	movw	r12, r18
{
	INT8 scRet;
	UINT8 *ptr;
	UINT8 *args;

	scRet = EFAIL;
    24a6:	8f ef       	ldi	r24, 0xFF	; 255
    24a8:	89 83       	std	Y+1, r24	; 0x01
	ptr = tSLInformation.pucTxCommandBuffer;
    24aa:	a0 90 74 02 	lds	r10, 0x0274
    24ae:	b0 90 75 02 	lds	r11, 0x0275
	args = (ptr + HEADERS_SIZE_CMD);

	// Set minimal values of timers 
	MIN_TIMER_SET(*aucDHCP)
    24b2:	f4 01       	movw	r30, r8
    24b4:	80 81       	ld	r24, Z
    24b6:	91 81       	ldd	r25, Z+1	; 0x01
    24b8:	a2 81       	ldd	r26, Z+2	; 0x02
    24ba:	b3 81       	ldd	r27, Z+3	; 0x03
    24bc:	01 97       	sbiw	r24, 0x01	; 1
    24be:	a1 09       	sbc	r26, r1
    24c0:	b1 09       	sbc	r27, r1
    24c2:	09 97       	sbiw	r24, 0x09	; 9
    24c4:	a1 05       	cpc	r26, r1
    24c6:	b1 05       	cpc	r27, r1
    24c8:	40 f4       	brcc	.+16     	; 0x24da <netapp_timeout_values+0x5a>
    24ca:	8a e0       	ldi	r24, 0x0A	; 10
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	a0 e0       	ldi	r26, 0x00	; 0
    24d0:	b0 e0       	ldi	r27, 0x00	; 0
    24d2:	80 83       	st	Z, r24
    24d4:	91 83       	std	Z+1, r25	; 0x01
    24d6:	a2 83       	std	Z+2, r26	; 0x02
    24d8:	b3 83       	std	Z+3, r27	; 0x03
		MIN_TIMER_SET(*aucARP)
    24da:	f8 01       	movw	r30, r16
    24dc:	80 81       	ld	r24, Z
    24de:	91 81       	ldd	r25, Z+1	; 0x01
    24e0:	a2 81       	ldd	r26, Z+2	; 0x02
    24e2:	b3 81       	ldd	r27, Z+3	; 0x03
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	a1 09       	sbc	r26, r1
    24e8:	b1 09       	sbc	r27, r1
    24ea:	09 97       	sbiw	r24, 0x09	; 9
    24ec:	a1 05       	cpc	r26, r1
    24ee:	b1 05       	cpc	r27, r1
    24f0:	40 f4       	brcc	.+16     	; 0x2502 <netapp_timeout_values+0x82>
    24f2:	8a e0       	ldi	r24, 0x0A	; 10
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	a0 e0       	ldi	r26, 0x00	; 0
    24f8:	b0 e0       	ldi	r27, 0x00	; 0
    24fa:	80 83       	st	Z, r24
    24fc:	91 83       	std	Z+1, r25	; 0x01
    24fe:	a2 83       	std	Z+2, r26	; 0x02
    2500:	b3 83       	std	Z+3, r27	; 0x03
		MIN_TIMER_SET(*aucKeepalive)
    2502:	f7 01       	movw	r30, r14
    2504:	80 81       	ld	r24, Z
    2506:	91 81       	ldd	r25, Z+1	; 0x01
    2508:	a2 81       	ldd	r26, Z+2	; 0x02
    250a:	b3 81       	ldd	r27, Z+3	; 0x03
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	a1 09       	sbc	r26, r1
    2510:	b1 09       	sbc	r27, r1
    2512:	09 97       	sbiw	r24, 0x09	; 9
    2514:	a1 05       	cpc	r26, r1
    2516:	b1 05       	cpc	r27, r1
    2518:	40 f4       	brcc	.+16     	; 0x252a <netapp_timeout_values+0xaa>
    251a:	8a e0       	ldi	r24, 0x0A	; 10
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	a0 e0       	ldi	r26, 0x00	; 0
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	80 83       	st	Z, r24
    2524:	91 83       	std	Z+1, r25	; 0x01
    2526:	a2 83       	std	Z+2, r26	; 0x02
    2528:	b3 83       	std	Z+3, r27	; 0x03
		MIN_TIMER_SET(*aucInactivity)
    252a:	f6 01       	movw	r30, r12
    252c:	80 81       	ld	r24, Z
    252e:	91 81       	ldd	r25, Z+1	; 0x01
    2530:	a2 81       	ldd	r26, Z+2	; 0x02
    2532:	b3 81       	ldd	r27, Z+3	; 0x03
    2534:	01 97       	sbiw	r24, 0x01	; 1
    2536:	a1 09       	sbc	r26, r1
    2538:	b1 09       	sbc	r27, r1
    253a:	09 97       	sbiw	r24, 0x09	; 9
    253c:	a1 05       	cpc	r26, r1
    253e:	b1 05       	cpc	r27, r1
    2540:	40 f4       	brcc	.+16     	; 0x2552 <netapp_timeout_values+0xd2>
    2542:	8a e0       	ldi	r24, 0x0A	; 10
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	a0 e0       	ldi	r26, 0x00	; 0
    2548:	b0 e0       	ldi	r27, 0x00	; 0
    254a:	80 83       	st	Z, r24
    254c:	91 83       	std	Z+1, r25	; 0x01
    254e:	a2 83       	std	Z+2, r26	; 0x02
    2550:	b3 83       	std	Z+3, r27	; 0x03

		// Fill in temporary command buffer
		args = UINT32_TO_STREAM(args, *aucDHCP);
    2552:	f4 01       	movw	r30, r8
    2554:	40 81       	ld	r20, Z
    2556:	51 81       	ldd	r21, Z+1	; 0x01
    2558:	62 81       	ldd	r22, Z+2	; 0x02
    255a:	73 81       	ldd	r23, Z+3	; 0x03
    255c:	c5 01       	movw	r24, r10
    255e:	09 96       	adiw	r24, 0x09	; 9
    2560:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, *aucARP);
    2564:	f8 01       	movw	r30, r16
    2566:	40 81       	ld	r20, Z
    2568:	51 81       	ldd	r21, Z+1	; 0x01
    256a:	62 81       	ldd	r22, Z+2	; 0x02
    256c:	73 81       	ldd	r23, Z+3	; 0x03
    256e:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, *aucKeepalive);
    2572:	f7 01       	movw	r30, r14
    2574:	40 81       	ld	r20, Z
    2576:	51 81       	ldd	r21, Z+1	; 0x01
    2578:	62 81       	ldd	r22, Z+2	; 0x02
    257a:	73 81       	ldd	r23, Z+3	; 0x03
    257c:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, *aucInactivity);
    2580:	f6 01       	movw	r30, r12
    2582:	40 81       	ld	r20, Z
    2584:	51 81       	ldd	r21, Z+1	; 0x01
    2586:	62 81       	ldd	r22, Z+2	; 0x02
    2588:	73 81       	ldd	r23, Z+3	; 0x03
    258a:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>

	// Initiate a HCI command
	hci_command_send(HCI_NETAPP_SET_TIMERS, ptr, NETAPP_SET_TIMER_PARAMS_LEN);
    258e:	89 e0       	ldi	r24, 0x09	; 9
    2590:	90 e2       	ldi	r25, 0x20	; 32
    2592:	b5 01       	movw	r22, r10
    2594:	44 e1       	ldi	r20, 0x14	; 20
    2596:	0e 94 71 11 	call	0x22e2	; 0x22e2 <hci_command_send>

	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_NETAPP_SET_TIMERS, &scRet);
    259a:	89 e0       	ldi	r24, 0x09	; 9
    259c:	90 e2       	ldi	r25, 0x20	; 32
    259e:	be 01       	movw	r22, r28
    25a0:	6f 5f       	subi	r22, 0xFF	; 255
    25a2:	7f 4f       	sbci	r23, 0xFF	; 255
    25a4:	0e 94 3e 11 	call	0x227c	; 0x227c <SimpleLinkWaitEvent>
    25a8:	29 81       	ldd	r18, Y+1	; 0x01
    25aa:	33 27       	eor	r19, r19
    25ac:	27 fd       	sbrc	r18, 7
    25ae:	30 95       	com	r19
    25b0:	43 2f       	mov	r20, r19
    25b2:	53 2f       	mov	r21, r19

	return(scRet);
}
    25b4:	b9 01       	movw	r22, r18
    25b6:	ca 01       	movw	r24, r20
    25b8:	0f 90       	pop	r0
    25ba:	cf 91       	pop	r28
    25bc:	df 91       	pop	r29
    25be:	1f 91       	pop	r17
    25c0:	0f 91       	pop	r16
    25c2:	ff 90       	pop	r15
    25c4:	ef 90       	pop	r14
    25c6:	df 90       	pop	r13
    25c8:	cf 90       	pop	r12
    25ca:	bf 90       	pop	r11
    25cc:	af 90       	pop	r10
    25ce:	9f 90       	pop	r9
    25d0:	8f 90       	pop	r8
    25d2:	08 95       	ret

000025d4 <mdnsAdvertiser>:
//!
//!  @brief    Set CC3000 in mDNS advertiser mode in order to advertise itself.
//
//*****************************************************************************

INT16 mdnsAdvertiser(UINT16 mdnsEnabled, CHAR * deviceServiceName, UINT16 deviceServiceNameLength)
    25d4:	cf 92       	push	r12
    25d6:	df 92       	push	r13
    25d8:	ef 92       	push	r14
    25da:	ff 92       	push	r15
    25dc:	0f 93       	push	r16
    25de:	1f 93       	push	r17
    25e0:	df 93       	push	r29
    25e2:	cf 93       	push	r28
    25e4:	0f 92       	push	r0
    25e6:	cd b7       	in	r28, 0x3d	; 61
    25e8:	de b7       	in	r29, 0x3e	; 62
    25ea:	d6 2e       	mov	r13, r22
    25ec:	c7 2e       	mov	r12, r23
    25ee:	8a 01       	movw	r16, r20
{
	INT8 ret;
	UINT8 *pTxBuffer, *pArgs;

	if (deviceServiceNameLength > MDNS_DEVICE_SERVICE_MAX_LENGTH)
    25f0:	41 32       	cpi	r20, 0x21	; 33
    25f2:	51 05       	cpc	r21, r1
    25f4:	18 f0       	brcs	.+6      	; 0x25fc <mdnsAdvertiser+0x28>
    25f6:	2f ef       	ldi	r18, 0xFF	; 255
    25f8:	3f ef       	ldi	r19, 0xFF	; 255
    25fa:	36 c0       	rjmp	.+108    	; 0x2668 <mdnsAdvertiser+0x94>
	{
		return EFAIL;
	}

	pTxBuffer = tSLInformation.pucTxCommandBuffer;
    25fc:	e0 90 74 02 	lds	r14, 0x0274
    2600:	f0 90 75 02 	lds	r15, 0x0275
	pArgs = (pTxBuffer + SIMPLE_LINK_HCI_CMND_TRANSPORT_HEADER_SIZE);

	// Fill in HCI packet structure
	pArgs = UINT32_TO_STREAM(pArgs, mdnsEnabled);
    2604:	ac 01       	movw	r20, r24
    2606:	60 e0       	ldi	r22, 0x00	; 0
    2608:	70 e0       	ldi	r23, 0x00	; 0
    260a:	c7 01       	movw	r24, r14
    260c:	09 96       	adiw	r24, 0x09	; 9
    260e:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	pArgs = UINT32_TO_STREAM(pArgs, 8);
    2612:	48 e0       	ldi	r20, 0x08	; 8
    2614:	50 e0       	ldi	r21, 0x00	; 0
    2616:	60 e0       	ldi	r22, 0x00	; 0
    2618:	70 e0       	ldi	r23, 0x00	; 0
    261a:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	pArgs = UINT32_TO_STREAM(pArgs, deviceServiceNameLength);
    261e:	a8 01       	movw	r20, r16
    2620:	60 e0       	ldi	r22, 0x00	; 0
    2622:	70 e0       	ldi	r23, 0x00	; 0
    2624:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
    2628:	dc 01       	movw	r26, r24
    262a:	8d 2d       	mov	r24, r13
    262c:	9c 2d       	mov	r25, r12
    262e:	fc 01       	movw	r30, r24
	ARRAY_TO_STREAM(pArgs, deviceServiceName, deviceServiceNameLength);
    2630:	9f 01       	movw	r18, r30
    2632:	20 0f       	add	r18, r16
    2634:	31 1f       	adc	r19, r17
    2636:	02 c0       	rjmp	.+4      	; 0x263c <mdnsAdvertiser+0x68>
    2638:	81 91       	ld	r24, Z+
    263a:	8d 93       	st	X+, r24
    263c:	e2 17       	cp	r30, r18
    263e:	f3 07       	cpc	r31, r19
    2640:	d9 f7       	brne	.-10     	; 0x2638 <mdnsAdvertiser+0x64>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_MDNS_ADVERTISE, pTxBuffer, SOCKET_MDNS_ADVERTISE_PARAMS_LEN + deviceServiceNameLength);
    2642:	40 2f       	mov	r20, r16
    2644:	44 5f       	subi	r20, 0xF4	; 244
    2646:	81 e1       	ldi	r24, 0x11	; 17
    2648:	90 e1       	ldi	r25, 0x10	; 16
    264a:	b7 01       	movw	r22, r14
    264c:	0e 94 71 11 	call	0x22e2	; 0x22e2 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_EVNT_MDNS_ADVERTISE, &ret);
    2650:	81 e1       	ldi	r24, 0x11	; 17
    2652:	90 e1       	ldi	r25, 0x10	; 16
    2654:	be 01       	movw	r22, r28
    2656:	6f 5f       	subi	r22, 0xFF	; 255
    2658:	7f 4f       	sbci	r23, 0xFF	; 255
    265a:	0e 94 3e 11 	call	0x227c	; 0x227c <SimpleLinkWaitEvent>

	return ret;
    265e:	89 81       	ldd	r24, Y+1	; 0x01
    2660:	28 2f       	mov	r18, r24
    2662:	33 27       	eor	r19, r19
    2664:	27 fd       	sbrc	r18, 7
    2666:	30 95       	com	r19

}
    2668:	c9 01       	movw	r24, r18
    266a:	0f 90       	pop	r0
    266c:	cf 91       	pop	r28
    266e:	df 91       	pop	r29
    2670:	1f 91       	pop	r17
    2672:	0f 91       	pop	r16
    2674:	ff 90       	pop	r15
    2676:	ef 90       	pop	r14
    2678:	df 90       	pop	r13
    267a:	cf 90       	pop	r12
    267c:	08 95       	ret

0000267e <setsockopt>:
//
//*****************************************************************************

#ifndef CC3000_TINY_DRIVER
INT16 setsockopt(INT32 sd, INT32 level, INT32 optname, const void *optval,
	socklen_t optlen)
    267e:	2f 92       	push	r2
    2680:	3f 92       	push	r3
    2682:	4f 92       	push	r4
    2684:	5f 92       	push	r5
    2686:	6f 92       	push	r6
    2688:	7f 92       	push	r7
    268a:	8f 92       	push	r8
    268c:	9f 92       	push	r9
    268e:	af 92       	push	r10
    2690:	bf 92       	push	r11
    2692:	cf 92       	push	r12
    2694:	df 92       	push	r13
    2696:	ef 92       	push	r14
    2698:	ff 92       	push	r15
    269a:	0f 93       	push	r16
    269c:	1f 93       	push	r17
    269e:	df 93       	push	r29
    26a0:	cf 93       	push	r28
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
    26a6:	28 97       	sbiw	r28, 0x08	; 8
    26a8:	0f b6       	in	r0, 0x3f	; 63
    26aa:	f8 94       	cli
    26ac:	de bf       	out	0x3e, r29	; 62
    26ae:	0f be       	out	0x3f, r0	; 63
    26b0:	cd bf       	out	0x3d, r28	; 61
    26b2:	2b 01       	movw	r4, r22
    26b4:	3c 01       	movw	r6, r24
    26b6:	2d 83       	std	Y+5, r18	; 0x05
    26b8:	3e 83       	std	Y+6, r19	; 0x06
    26ba:	4f 83       	std	Y+7, r20	; 0x07
    26bc:	58 87       	std	Y+8, r21	; 0x08
    26be:	16 01       	movw	r2, r12
{
	INT32 ret;
	UINT8 *ptr, *args;

	ptr = tSLInformation.pucTxCommandBuffer;
    26c0:	c0 90 74 02 	lds	r12, 0x0274
    26c4:	d0 90 75 02 	lds	r13, 0x0275
	args = (ptr + HEADERS_SIZE_CMD);

	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, sd);
    26c8:	c6 01       	movw	r24, r12
    26ca:	09 96       	adiw	r24, 0x09	; 9
    26cc:	b3 01       	movw	r22, r6
    26ce:	a2 01       	movw	r20, r4
    26d0:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, level);
    26d4:	4d 81       	ldd	r20, Y+5	; 0x05
    26d6:	5e 81       	ldd	r21, Y+6	; 0x06
    26d8:	6f 81       	ldd	r22, Y+7	; 0x07
    26da:	78 85       	ldd	r23, Y+8	; 0x08
    26dc:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, optname);
    26e0:	b8 01       	movw	r22, r16
    26e2:	a7 01       	movw	r20, r14
    26e4:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, 0x00000008);
    26e8:	48 e0       	ldi	r20, 0x08	; 8
    26ea:	50 e0       	ldi	r21, 0x00	; 0
    26ec:	60 e0       	ldi	r22, 0x00	; 0
    26ee:	70 e0       	ldi	r23, 0x00	; 0
    26f0:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, optlen);
    26f4:	b5 01       	movw	r22, r10
    26f6:	a4 01       	movw	r20, r8
    26f8:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
    26fc:	bc 01       	movw	r22, r24
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	40 e0       	ldi	r20, 0x00	; 0
    2704:	50 e0       	ldi	r21, 0x00	; 0
    2706:	0c c0       	rjmp	.+24     	; 0x2720 <setsockopt+0xa2>
//
//*****************************************************************************

#ifndef CC3000_TINY_DRIVER
INT16 setsockopt(INT32 sd, INT32 level, INT32 optname, const void *optval,
	socklen_t optlen)
    2708:	f9 01       	movw	r30, r18
	args = UINT32_TO_STREAM(args, sd);
	args = UINT32_TO_STREAM(args, level);
	args = UINT32_TO_STREAM(args, optname);
	args = UINT32_TO_STREAM(args, 0x00000008);
	args = UINT32_TO_STREAM(args, optlen);
	ARRAY_TO_STREAM(args, ((UINT8 *)optval), optlen);
    270a:	db 01       	movw	r26, r22
    270c:	a2 0f       	add	r26, r18
    270e:	b3 1f       	adc	r27, r19
    2710:	e2 0d       	add	r30, r2
    2712:	f3 1d       	adc	r31, r3
    2714:	80 81       	ld	r24, Z
    2716:	8c 93       	st	X, r24
    2718:	2f 5f       	subi	r18, 0xFF	; 255
    271a:	3f 4f       	sbci	r19, 0xFF	; 255
    271c:	4f 4f       	sbci	r20, 0xFF	; 255
    271e:	5f 4f       	sbci	r21, 0xFF	; 255
    2720:	28 15       	cp	r18, r8
    2722:	39 05       	cpc	r19, r9
    2724:	4a 05       	cpc	r20, r10
    2726:	5b 05       	cpc	r21, r11
    2728:	78 f3       	brcs	.-34     	; 0x2708 <setsockopt+0x8a>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_SETSOCKOPT,
		ptr, SOCKET_SET_SOCK_OPT_PARAMS_LEN  + optlen);
    272a:	48 2d       	mov	r20, r8
    272c:	4c 5e       	subi	r20, 0xEC	; 236
    272e:	89 e0       	ldi	r24, 0x09	; 9
    2730:	90 e1       	ldi	r25, 0x10	; 16
    2732:	b6 01       	movw	r22, r12
    2734:	0e 94 71 11 	call	0x22e2	; 0x22e2 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_SETSOCKOPT, &ret);
    2738:	89 e0       	ldi	r24, 0x09	; 9
    273a:	90 e1       	ldi	r25, 0x10	; 16
    273c:	be 01       	movw	r22, r28
    273e:	6f 5f       	subi	r22, 0xFF	; 255
    2740:	7f 4f       	sbci	r23, 0xFF	; 255
    2742:	0e 94 3e 11 	call	0x227c	; 0x227c <SimpleLinkWaitEvent>

	if (ret >= 0)
    2746:	29 81       	ldd	r18, Y+1	; 0x01
    2748:	3a 81       	ldd	r19, Y+2	; 0x02
    274a:	4b 81       	ldd	r20, Y+3	; 0x03
    274c:	5c 81       	ldd	r21, Y+4	; 0x04
    274e:	57 fd       	sbrc	r21, 7
    2750:	03 c0       	rjmp	.+6      	; 0x2758 <setsockopt+0xda>
    2752:	60 e0       	ldi	r22, 0x00	; 0
    2754:	70 e0       	ldi	r23, 0x00	; 0
    2756:	05 c0       	rjmp	.+10     	; 0x2762 <setsockopt+0xe4>
	{
		return (0);
	}
	else
	{
		errno = ret;
    2758:	b9 01       	movw	r22, r18
    275a:	30 93 bf 06 	sts	0x06BF, r19
    275e:	20 93 be 06 	sts	0x06BE, r18
		return ret;
	}
}
    2762:	cb 01       	movw	r24, r22
    2764:	28 96       	adiw	r28, 0x08	; 8
    2766:	0f b6       	in	r0, 0x3f	; 63
    2768:	f8 94       	cli
    276a:	de bf       	out	0x3e, r29	; 62
    276c:	0f be       	out	0x3f, r0	; 63
    276e:	cd bf       	out	0x3d, r28	; 61
    2770:	cf 91       	pop	r28
    2772:	df 91       	pop	r29
    2774:	1f 91       	pop	r17
    2776:	0f 91       	pop	r16
    2778:	ff 90       	pop	r15
    277a:	ef 90       	pop	r14
    277c:	df 90       	pop	r13
    277e:	cf 90       	pop	r12
    2780:	bf 90       	pop	r11
    2782:	af 90       	pop	r10
    2784:	9f 90       	pop	r9
    2786:	8f 90       	pop	r8
    2788:	7f 90       	pop	r7
    278a:	6f 90       	pop	r6
    278c:	5f 90       	pop	r5
    278e:	4f 90       	pop	r4
    2790:	3f 90       	pop	r3
    2792:	2f 90       	pop	r2
    2794:	08 95       	ret

00002796 <connect>:
//!
//!  @sa socket
//
//*****************************************************************************

INT32 connect(INT32 sd, const sockaddr *addr, INT32 addrlen)
    2796:	cf 92       	push	r12
    2798:	df 92       	push	r13
    279a:	ef 92       	push	r14
    279c:	ff 92       	push	r15
    279e:	0f 93       	push	r16
    27a0:	1f 93       	push	r17
    27a2:	df 93       	push	r29
    27a4:	cf 93       	push	r28
    27a6:	00 d0       	rcall	.+0      	; 0x27a8 <connect+0x12>
    27a8:	00 d0       	rcall	.+0      	; 0x27aa <connect+0x14>
    27aa:	cd b7       	in	r28, 0x3d	; 61
    27ac:	de b7       	in	r29, 0x3e	; 62
    27ae:	8b 01       	movw	r16, r22
    27b0:	9c 01       	movw	r18, r24
    27b2:	f4 2e       	mov	r15, r20
    27b4:	e5 2e       	mov	r14, r21
{
	INT32 ret;
	UINT8 *ptr, *args;

	ret = EFAIL;
    27b6:	8f ef       	ldi	r24, 0xFF	; 255
    27b8:	9f ef       	ldi	r25, 0xFF	; 255
    27ba:	af ef       	ldi	r26, 0xFF	; 255
    27bc:	bf ef       	ldi	r27, 0xFF	; 255
    27be:	89 83       	std	Y+1, r24	; 0x01
    27c0:	9a 83       	std	Y+2, r25	; 0x02
    27c2:	ab 83       	std	Y+3, r26	; 0x03
    27c4:	bc 83       	std	Y+4, r27	; 0x04
	ptr = tSLInformation.pucTxCommandBuffer;
    27c6:	c0 90 74 02 	lds	r12, 0x0274
    27ca:	d0 90 75 02 	lds	r13, 0x0275
	args = (ptr + SIMPLE_LINK_HCI_CMND_TRANSPORT_HEADER_SIZE);
	addrlen = 8;

	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, sd);
    27ce:	c6 01       	movw	r24, r12
    27d0:	09 96       	adiw	r24, 0x09	; 9
    27d2:	b9 01       	movw	r22, r18
    27d4:	a8 01       	movw	r20, r16
    27d6:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, 0x00000008);
    27da:	48 e0       	ldi	r20, 0x08	; 8
    27dc:	50 e0       	ldi	r21, 0x00	; 0
    27de:	60 e0       	ldi	r22, 0x00	; 0
    27e0:	70 e0       	ldi	r23, 0x00	; 0
    27e2:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, addrlen);
    27e6:	48 e0       	ldi	r20, 0x08	; 8
    27e8:	50 e0       	ldi	r21, 0x00	; 0
    27ea:	60 e0       	ldi	r22, 0x00	; 0
    27ec:	70 e0       	ldi	r23, 0x00	; 0
    27ee:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
    27f2:	dc 01       	movw	r26, r24
    27f4:	8f 2d       	mov	r24, r15
    27f6:	9e 2d       	mov	r25, r14
    27f8:	fc 01       	movw	r30, r24
	ARRAY_TO_STREAM(args, ((UINT8 *)addr), addrlen);
    27fa:	9f 01       	movw	r18, r30
    27fc:	28 5f       	subi	r18, 0xF8	; 248
    27fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2800:	81 91       	ld	r24, Z+
    2802:	8d 93       	st	X+, r24
    2804:	e2 17       	cp	r30, r18
    2806:	f3 07       	cpc	r31, r19
    2808:	d9 f7       	brne	.-10     	; 0x2800 <connect+0x6a>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_CONNECT,
		ptr, SOCKET_CONNECT_PARAMS_LEN);
    280a:	87 e0       	ldi	r24, 0x07	; 7
    280c:	90 e1       	ldi	r25, 0x10	; 16
    280e:	b6 01       	movw	r22, r12
    2810:	44 e1       	ldi	r20, 0x14	; 20
    2812:	0e 94 71 11 	call	0x22e2	; 0x22e2 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_CONNECT, &ret);
    2816:	87 e0       	ldi	r24, 0x07	; 7
    2818:	90 e1       	ldi	r25, 0x10	; 16
    281a:	be 01       	movw	r22, r28
    281c:	6f 5f       	subi	r22, 0xFF	; 255
    281e:	7f 4f       	sbci	r23, 0xFF	; 255
    2820:	0e 94 3e 11 	call	0x227c	; 0x227c <SimpleLinkWaitEvent>

	errno = ret;
    2824:	69 81       	ldd	r22, Y+1	; 0x01
    2826:	7a 81       	ldd	r23, Y+2	; 0x02
    2828:	8b 81       	ldd	r24, Y+3	; 0x03
    282a:	9c 81       	ldd	r25, Y+4	; 0x04
    282c:	9b 01       	movw	r18, r22
    282e:	20 93 be 06 	sts	0x06BE, r18
    2832:	30 93 bf 06 	sts	0x06BF, r19

	return((INT32)ret);
}
    2836:	0f 90       	pop	r0
    2838:	0f 90       	pop	r0
    283a:	0f 90       	pop	r0
    283c:	0f 90       	pop	r0
    283e:	cf 91       	pop	r28
    2840:	df 91       	pop	r29
    2842:	1f 91       	pop	r17
    2844:	0f 91       	pop	r16
    2846:	ff 90       	pop	r15
    2848:	ef 90       	pop	r14
    284a:	df 90       	pop	r13
    284c:	cf 90       	pop	r12
    284e:	08 95       	ret

00002850 <gethostbyname>:
// Adafruit CC3k Host Driver Difference
// Make hostname a const char pointer because it isn't modified and the Adafruit
// driver code needs it to be const to interface with Arduino's client library.
// Noted 12-12-2014 by tdicola
INT16 gethostbyname(const CHAR * hostname, UINT16 usNameLen, 
	UINT32* out_ip_addr)
    2850:	af 92       	push	r10
    2852:	bf 92       	push	r11
    2854:	cf 92       	push	r12
    2856:	df 92       	push	r13
    2858:	ef 92       	push	r14
    285a:	ff 92       	push	r15
    285c:	0f 93       	push	r16
    285e:	1f 93       	push	r17
    2860:	df 93       	push	r29
    2862:	cf 93       	push	r28
    2864:	cd b7       	in	r28, 0x3d	; 61
    2866:	de b7       	in	r29, 0x3e	; 62
    2868:	28 97       	sbiw	r28, 0x08	; 8
    286a:	0f b6       	in	r0, 0x3f	; 63
    286c:	f8 94       	cli
    286e:	de bf       	out	0x3e, r29	; 62
    2870:	0f be       	out	0x3f, r0	; 63
    2872:	cd bf       	out	0x3d, r28	; 61
    2874:	b8 2e       	mov	r11, r24
    2876:	a9 2e       	mov	r10, r25
    2878:	8b 01       	movw	r16, r22
    287a:	6a 01       	movw	r12, r20
{
	tBsdGethostbynameParams ret;
	UINT8 *ptr, *args;

	errno = EFAIL;
    287c:	8f ef       	ldi	r24, 0xFF	; 255
    287e:	9f ef       	ldi	r25, 0xFF	; 255
    2880:	90 93 bf 06 	sts	0x06BF, r25
    2884:	80 93 be 06 	sts	0x06BE, r24

	if (usNameLen > HOSTNAME_MAX_LENGTH)
    2888:	67 3e       	cpi	r22, 0xE7	; 231
    288a:	71 05       	cpc	r23, r1
    288c:	18 f0       	brcs	.+6      	; 0x2894 <gethostbyname+0x44>
    288e:	2f ef       	ldi	r18, 0xFF	; 255
    2890:	3f ef       	ldi	r19, 0xFF	; 255
    2892:	3b c0       	rjmp	.+118    	; 0x290a <gethostbyname+0xba>
	{
		return errno;
	}

	ptr = tSLInformation.pucTxCommandBuffer;
    2894:	e0 90 74 02 	lds	r14, 0x0274
    2898:	f0 90 75 02 	lds	r15, 0x0275
	args = (ptr + SIMPLE_LINK_HCI_CMND_TRANSPORT_HEADER_SIZE);

	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, 8);
    289c:	c7 01       	movw	r24, r14
    289e:	09 96       	adiw	r24, 0x09	; 9
    28a0:	48 e0       	ldi	r20, 0x08	; 8
    28a2:	50 e0       	ldi	r21, 0x00	; 0
    28a4:	60 e0       	ldi	r22, 0x00	; 0
    28a6:	70 e0       	ldi	r23, 0x00	; 0
    28a8:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, usNameLen);
    28ac:	a8 01       	movw	r20, r16
    28ae:	60 e0       	ldi	r22, 0x00	; 0
    28b0:	70 e0       	ldi	r23, 0x00	; 0
    28b2:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
    28b6:	dc 01       	movw	r26, r24
    28b8:	8b 2d       	mov	r24, r11
    28ba:	9a 2d       	mov	r25, r10
    28bc:	fc 01       	movw	r30, r24
	ARRAY_TO_STREAM(args, hostname, usNameLen);
    28be:	9f 01       	movw	r18, r30
    28c0:	20 0f       	add	r18, r16
    28c2:	31 1f       	adc	r19, r17
    28c4:	02 c0       	rjmp	.+4      	; 0x28ca <gethostbyname+0x7a>
    28c6:	81 91       	ld	r24, Z+
    28c8:	8d 93       	st	X+, r24
    28ca:	e2 17       	cp	r30, r18
    28cc:	f3 07       	cpc	r31, r19
    28ce:	d9 f7       	brne	.-10     	; 0x28c6 <gethostbyname+0x76>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_GETHOSTNAME, ptr, SOCKET_GET_HOST_BY_NAME_PARAMS_LEN
		+ usNameLen - 1);
    28d0:	40 2f       	mov	r20, r16
    28d2:	48 5f       	subi	r20, 0xF8	; 248
    28d4:	80 e1       	ldi	r24, 0x10	; 16
    28d6:	90 e1       	ldi	r25, 0x10	; 16
    28d8:	b7 01       	movw	r22, r14
    28da:	0e 94 71 11 	call	0x22e2	; 0x22e2 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_EVNT_BSD_GETHOSTBYNAME, &ret);
    28de:	80 e1       	ldi	r24, 0x10	; 16
    28e0:	90 e1       	ldi	r25, 0x10	; 16
    28e2:	be 01       	movw	r22, r28
    28e4:	6f 5f       	subi	r22, 0xFF	; 255
    28e6:	7f 4f       	sbci	r23, 0xFF	; 255
    28e8:	0e 94 3e 11 	call	0x227c	; 0x227c <SimpleLinkWaitEvent>

	errno = ret.retVal;
    28ec:	29 81       	ldd	r18, Y+1	; 0x01
    28ee:	3a 81       	ldd	r19, Y+2	; 0x02
    28f0:	30 93 bf 06 	sts	0x06BF, r19
    28f4:	20 93 be 06 	sts	0x06BE, r18

	(*((INT32*)out_ip_addr)) = ret.outputAddress;
    28f8:	8d 81       	ldd	r24, Y+5	; 0x05
    28fa:	9e 81       	ldd	r25, Y+6	; 0x06
    28fc:	af 81       	ldd	r26, Y+7	; 0x07
    28fe:	b8 85       	ldd	r27, Y+8	; 0x08
    2900:	f6 01       	movw	r30, r12
    2902:	80 83       	st	Z, r24
    2904:	91 83       	std	Z+1, r25	; 0x01
    2906:	a2 83       	std	Z+2, r26	; 0x02
    2908:	b3 83       	std	Z+3, r27	; 0x03

	return (errno);

}
    290a:	c9 01       	movw	r24, r18
    290c:	28 96       	adiw	r28, 0x08	; 8
    290e:	0f b6       	in	r0, 0x3f	; 63
    2910:	f8 94       	cli
    2912:	de bf       	out	0x3e, r29	; 62
    2914:	0f be       	out	0x3f, r0	; 63
    2916:	cd bf       	out	0x3d, r28	; 61
    2918:	cf 91       	pop	r28
    291a:	df 91       	pop	r29
    291c:	1f 91       	pop	r17
    291e:	0f 91       	pop	r16
    2920:	ff 90       	pop	r15
    2922:	ef 90       	pop	r14
    2924:	df 90       	pop	r13
    2926:	cf 90       	pop	r12
    2928:	bf 90       	pop	r11
    292a:	af 90       	pop	r10
    292c:	08 95       	ret

0000292e <listen>:
//!
//! @note   On this version, backlog is not supported
//
//*****************************************************************************

INT32 listen(INT32 sd, INT32 backlog)
    292e:	8f 92       	push	r8
    2930:	9f 92       	push	r9
    2932:	af 92       	push	r10
    2934:	bf 92       	push	r11
    2936:	cf 92       	push	r12
    2938:	df 92       	push	r13
    293a:	ef 92       	push	r14
    293c:	ff 92       	push	r15
    293e:	0f 93       	push	r16
    2940:	1f 93       	push	r17
    2942:	df 93       	push	r29
    2944:	cf 93       	push	r28
    2946:	00 d0       	rcall	.+0      	; 0x2948 <listen+0x1a>
    2948:	00 d0       	rcall	.+0      	; 0x294a <listen+0x1c>
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62
    294e:	7b 01       	movw	r14, r22
    2950:	8c 01       	movw	r16, r24
    2952:	59 01       	movw	r10, r18
    2954:	6a 01       	movw	r12, r20
{
	INT32 ret;
	UINT8 *ptr, *args;

	ret = EFAIL;
    2956:	8f ef       	ldi	r24, 0xFF	; 255
    2958:	9f ef       	ldi	r25, 0xFF	; 255
    295a:	af ef       	ldi	r26, 0xFF	; 255
    295c:	bf ef       	ldi	r27, 0xFF	; 255
    295e:	89 83       	std	Y+1, r24	; 0x01
    2960:	9a 83       	std	Y+2, r25	; 0x02
    2962:	ab 83       	std	Y+3, r26	; 0x03
    2964:	bc 83       	std	Y+4, r27	; 0x04
	ptr = tSLInformation.pucTxCommandBuffer;
    2966:	80 90 74 02 	lds	r8, 0x0274
    296a:	90 90 75 02 	lds	r9, 0x0275
	args = (ptr + HEADERS_SIZE_CMD);

	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, sd);
    296e:	c4 01       	movw	r24, r8
    2970:	09 96       	adiw	r24, 0x09	; 9
    2972:	b8 01       	movw	r22, r16
    2974:	a7 01       	movw	r20, r14
    2976:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, backlog);
    297a:	b6 01       	movw	r22, r12
    297c:	a5 01       	movw	r20, r10
    297e:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_LISTEN,
		ptr, SOCKET_LISTEN_PARAMS_LEN);
    2982:	86 e0       	ldi	r24, 0x06	; 6
    2984:	90 e1       	ldi	r25, 0x10	; 16
    2986:	b4 01       	movw	r22, r8
    2988:	48 e0       	ldi	r20, 0x08	; 8
    298a:	0e 94 71 11 	call	0x22e2	; 0x22e2 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_LISTEN, &ret);
    298e:	86 e0       	ldi	r24, 0x06	; 6
    2990:	90 e1       	ldi	r25, 0x10	; 16
    2992:	be 01       	movw	r22, r28
    2994:	6f 5f       	subi	r22, 0xFF	; 255
    2996:	7f 4f       	sbci	r23, 0xFF	; 255
    2998:	0e 94 3e 11 	call	0x227c	; 0x227c <SimpleLinkWaitEvent>
	errno = ret;
    299c:	69 81       	ldd	r22, Y+1	; 0x01
    299e:	7a 81       	ldd	r23, Y+2	; 0x02
    29a0:	8b 81       	ldd	r24, Y+3	; 0x03
    29a2:	9c 81       	ldd	r25, Y+4	; 0x04
    29a4:	9b 01       	movw	r18, r22
    29a6:	20 93 be 06 	sts	0x06BE, r18
    29aa:	30 93 bf 06 	sts	0x06BF, r19

	return(ret);
}
    29ae:	0f 90       	pop	r0
    29b0:	0f 90       	pop	r0
    29b2:	0f 90       	pop	r0
    29b4:	0f 90       	pop	r0
    29b6:	cf 91       	pop	r28
    29b8:	df 91       	pop	r29
    29ba:	1f 91       	pop	r17
    29bc:	0f 91       	pop	r16
    29be:	ff 90       	pop	r15
    29c0:	ef 90       	pop	r14
    29c2:	df 90       	pop	r13
    29c4:	cf 90       	pop	r12
    29c6:	bf 90       	pop	r11
    29c8:	af 90       	pop	r10
    29ca:	9f 90       	pop	r9
    29cc:	8f 90       	pop	r8
    29ce:	08 95       	ret

000029d0 <bind>:
//!
//! @sa     socket ; accept ; listen
//
//*****************************************************************************

INT32 bind(INT32 sd, const sockaddr *addr, INT32 addrlen)
    29d0:	cf 92       	push	r12
    29d2:	df 92       	push	r13
    29d4:	ef 92       	push	r14
    29d6:	ff 92       	push	r15
    29d8:	0f 93       	push	r16
    29da:	1f 93       	push	r17
    29dc:	df 93       	push	r29
    29de:	cf 93       	push	r28
    29e0:	00 d0       	rcall	.+0      	; 0x29e2 <bind+0x12>
    29e2:	00 d0       	rcall	.+0      	; 0x29e4 <bind+0x14>
    29e4:	cd b7       	in	r28, 0x3d	; 61
    29e6:	de b7       	in	r29, 0x3e	; 62
    29e8:	8b 01       	movw	r16, r22
    29ea:	9c 01       	movw	r18, r24
    29ec:	f4 2e       	mov	r15, r20
    29ee:	e5 2e       	mov	r14, r21
{
	INT32 ret;
	UINT8 *ptr, *args;

	ret = EFAIL;
    29f0:	8f ef       	ldi	r24, 0xFF	; 255
    29f2:	9f ef       	ldi	r25, 0xFF	; 255
    29f4:	af ef       	ldi	r26, 0xFF	; 255
    29f6:	bf ef       	ldi	r27, 0xFF	; 255
    29f8:	89 83       	std	Y+1, r24	; 0x01
    29fa:	9a 83       	std	Y+2, r25	; 0x02
    29fc:	ab 83       	std	Y+3, r26	; 0x03
    29fe:	bc 83       	std	Y+4, r27	; 0x04
	ptr = tSLInformation.pucTxCommandBuffer;
    2a00:	c0 90 74 02 	lds	r12, 0x0274
    2a04:	d0 90 75 02 	lds	r13, 0x0275
	args = (ptr + HEADERS_SIZE_CMD);

	addrlen = ASIC_ADDR_LEN;

	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, sd);
    2a08:	c6 01       	movw	r24, r12
    2a0a:	09 96       	adiw	r24, 0x09	; 9
    2a0c:	b9 01       	movw	r22, r18
    2a0e:	a8 01       	movw	r20, r16
    2a10:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, 0x00000008);
    2a14:	48 e0       	ldi	r20, 0x08	; 8
    2a16:	50 e0       	ldi	r21, 0x00	; 0
    2a18:	60 e0       	ldi	r22, 0x00	; 0
    2a1a:	70 e0       	ldi	r23, 0x00	; 0
    2a1c:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, addrlen);
    2a20:	48 e0       	ldi	r20, 0x08	; 8
    2a22:	50 e0       	ldi	r21, 0x00	; 0
    2a24:	60 e0       	ldi	r22, 0x00	; 0
    2a26:	70 e0       	ldi	r23, 0x00	; 0
    2a28:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	8f 2d       	mov	r24, r15
    2a30:	9e 2d       	mov	r25, r14
    2a32:	fc 01       	movw	r30, r24
	ARRAY_TO_STREAM(args, ((UINT8 *)addr), addrlen);
    2a34:	9f 01       	movw	r18, r30
    2a36:	28 5f       	subi	r18, 0xF8	; 248
    2a38:	3f 4f       	sbci	r19, 0xFF	; 255
    2a3a:	81 91       	ld	r24, Z+
    2a3c:	8d 93       	st	X+, r24
    2a3e:	e2 17       	cp	r30, r18
    2a40:	f3 07       	cpc	r31, r19
    2a42:	d9 f7       	brne	.-10     	; 0x2a3a <bind+0x6a>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_BIND,
		ptr, SOCKET_BIND_PARAMS_LEN);
    2a44:	82 e0       	ldi	r24, 0x02	; 2
    2a46:	90 e1       	ldi	r25, 0x10	; 16
    2a48:	b6 01       	movw	r22, r12
    2a4a:	44 e1       	ldi	r20, 0x14	; 20
    2a4c:	0e 94 71 11 	call	0x22e2	; 0x22e2 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_BIND, &ret);
    2a50:	82 e0       	ldi	r24, 0x02	; 2
    2a52:	90 e1       	ldi	r25, 0x10	; 16
    2a54:	be 01       	movw	r22, r28
    2a56:	6f 5f       	subi	r22, 0xFF	; 255
    2a58:	7f 4f       	sbci	r23, 0xFF	; 255
    2a5a:	0e 94 3e 11 	call	0x227c	; 0x227c <SimpleLinkWaitEvent>

	errno = ret;
    2a5e:	69 81       	ldd	r22, Y+1	; 0x01
    2a60:	7a 81       	ldd	r23, Y+2	; 0x02
    2a62:	8b 81       	ldd	r24, Y+3	; 0x03
    2a64:	9c 81       	ldd	r25, Y+4	; 0x04
    2a66:	9b 01       	movw	r18, r22
    2a68:	20 93 be 06 	sts	0x06BE, r18
    2a6c:	30 93 bf 06 	sts	0x06BF, r19

	return(ret);
}
    2a70:	0f 90       	pop	r0
    2a72:	0f 90       	pop	r0
    2a74:	0f 90       	pop	r0
    2a76:	0f 90       	pop	r0
    2a78:	cf 91       	pop	r28
    2a7a:	df 91       	pop	r29
    2a7c:	1f 91       	pop	r17
    2a7e:	0f 91       	pop	r16
    2a80:	ff 90       	pop	r15
    2a82:	ef 90       	pop	r14
    2a84:	df 90       	pop	r13
    2a86:	cf 90       	pop	r12
    2a88:	08 95       	ret

00002a8a <_Z16simple_link_recvlPvllP11_sockaddr_tPml>:
//!                  excess bytes may be discarded depending on the type of
//!                  socket the message is received from
//
//*****************************************************************************
INT16 simple_link_recv(INT32 sd, void *buf, INT32 len, INT32 flags, sockaddr *from,
	socklen_t *fromlen, INT32 opcode)
    2a8a:	2f 92       	push	r2
    2a8c:	3f 92       	push	r3
    2a8e:	4f 92       	push	r4
    2a90:	5f 92       	push	r5
    2a92:	6f 92       	push	r6
    2a94:	7f 92       	push	r7
    2a96:	8f 92       	push	r8
    2a98:	9f 92       	push	r9
    2a9a:	af 92       	push	r10
    2a9c:	bf 92       	push	r11
    2a9e:	cf 92       	push	r12
    2aa0:	df 92       	push	r13
    2aa2:	ef 92       	push	r14
    2aa4:	ff 92       	push	r15
    2aa6:	0f 93       	push	r16
    2aa8:	1f 93       	push	r17
    2aaa:	df 93       	push	r29
    2aac:	cf 93       	push	r28
    2aae:	cd b7       	in	r28, 0x3d	; 61
    2ab0:	de b7       	in	r29, 0x3e	; 62
    2ab2:	64 97       	sbiw	r28, 0x14	; 20
    2ab4:	0f b6       	in	r0, 0x3f	; 63
    2ab6:	f8 94       	cli
    2ab8:	de bf       	out	0x3e, r29	; 62
    2aba:	0f be       	out	0x3f, r0	; 63
    2abc:	cd bf       	out	0x3d, r28	; 61
    2abe:	2b 01       	movw	r4, r22
    2ac0:	3c 01       	movw	r6, r24
    2ac2:	5e 87       	std	Y+14, r21	; 0x0e
    2ac4:	4d 87       	std	Y+13, r20	; 0x0d
    2ac6:	0f 87       	std	Y+15, r16	; 0x0f
    2ac8:	18 8b       	std	Y+16, r17	; 0x10
    2aca:	29 8b       	std	Y+17, r18	; 0x11
    2acc:	3a 8b       	std	Y+18, r19	; 0x12
    2ace:	15 01       	movw	r2, r10
    2ad0:	9c 8a       	std	Y+20, r9	; 0x14
    2ad2:	8b 8a       	std	Y+19, r8	; 0x13
    2ad4:	89 a4       	ldd	r8, Y+41	; 0x29
    2ad6:	9a a4       	ldd	r9, Y+42	; 0x2a
    2ad8:	ab a4       	ldd	r10, Y+43	; 0x2b
    2ada:	bc a4       	ldd	r11, Y+44	; 0x2c
{
	UINT8 *ptr, *args;
	tBsdReadReturnParams tSocketReadEvent;

	ptr = tSLInformation.pucTxCommandBuffer;
    2adc:	00 91 74 02 	lds	r16, 0x0274
    2ae0:	10 91 75 02 	lds	r17, 0x0275
	args = (ptr + HEADERS_SIZE_CMD);

	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, sd);
    2ae4:	c8 01       	movw	r24, r16
    2ae6:	09 96       	adiw	r24, 0x09	; 9
    2ae8:	b3 01       	movw	r22, r6
    2aea:	a2 01       	movw	r20, r4
    2aec:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, len);
    2af0:	4f 85       	ldd	r20, Y+15	; 0x0f
    2af2:	58 89       	ldd	r21, Y+16	; 0x10
    2af4:	69 89       	ldd	r22, Y+17	; 0x11
    2af6:	7a 89       	ldd	r23, Y+18	; 0x12
    2af8:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, flags);
    2afc:	b7 01       	movw	r22, r14
    2afe:	a6 01       	movw	r20, r12
    2b00:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>

	// Generate the read command, and wait for the 
	hci_command_send(opcode,  ptr, SOCKET_RECV_FROM_PARAMS_LEN);
    2b04:	c4 01       	movw	r24, r8
    2b06:	b8 01       	movw	r22, r16
    2b08:	4c e0       	ldi	r20, 0x0C	; 12
    2b0a:	0e 94 71 11 	call	0x22e2	; 0x22e2 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(opcode, &tSocketReadEvent);
    2b0e:	c4 01       	movw	r24, r8
    2b10:	be 01       	movw	r22, r28
    2b12:	6f 5f       	subi	r22, 0xFF	; 255
    2b14:	7f 4f       	sbci	r23, 0xFF	; 255
    2b16:	0e 94 3e 11 	call	0x227c	; 0x227c <SimpleLinkWaitEvent>
	DEBUGPRINT_F(" Flags: 0x");
	DEBUGPRINT_HEX(tSocketReadEvent.uiFlags);
	DEBUGPRINT_F("\n\r");

	// In case the number of bytes is more then zero - read data
	if (tSocketReadEvent.iNumberOfBytes > 0)
    2b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b1e:	af 81       	ldd	r26, Y+7	; 0x07
    2b20:	b8 85       	ldd	r27, Y+8	; 0x08
    2b22:	18 16       	cp	r1, r24
    2b24:	19 06       	cpc	r1, r25
    2b26:	1a 06       	cpc	r1, r26
    2b28:	1b 06       	cpc	r1, r27
    2b2a:	3c f4       	brge	.+14     	; 0x2b3a <_Z16simple_link_recvlPvllP11_sockaddr_tPml+0xb0>
		// Wait for the data in a synchronous way. Here we assume that the bug is 
		// big enough to store also parameters of receive from too....
		// Adafruit CC3k Host Driver Difference
		// Fix compiler error with explicit cast from void to UINT8 pointer.
		// Noted 12-12-2014 by tdicola
		SimpleLinkWaitData((UINT8*)buf, (UINT8 *)from, (UINT8 *)fromlen);
    2b2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b30:	b1 01       	movw	r22, r2
    2b32:	4b 89       	ldd	r20, Y+19	; 0x13
    2b34:	5c 89       	ldd	r21, Y+20	; 0x14
    2b36:	0e 94 35 11 	call	0x226a	; 0x226a <SimpleLinkWaitData>
	}

	errno = tSocketReadEvent.iNumberOfBytes;
    2b3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b3e:	80 93 be 06 	sts	0x06BE, r24
    2b42:	90 93 bf 06 	sts	0x06BF, r25
	  uart_putchar(((UINT8 *)buf)[i]);
	}
#endif
	
	return(tSocketReadEvent.iNumberOfBytes);
}
    2b46:	64 96       	adiw	r28, 0x14	; 20
    2b48:	0f b6       	in	r0, 0x3f	; 63
    2b4a:	f8 94       	cli
    2b4c:	de bf       	out	0x3e, r29	; 62
    2b4e:	0f be       	out	0x3f, r0	; 63
    2b50:	cd bf       	out	0x3d, r28	; 61
    2b52:	cf 91       	pop	r28
    2b54:	df 91       	pop	r29
    2b56:	1f 91       	pop	r17
    2b58:	0f 91       	pop	r16
    2b5a:	ff 90       	pop	r15
    2b5c:	ef 90       	pop	r14
    2b5e:	df 90       	pop	r13
    2b60:	cf 90       	pop	r12
    2b62:	bf 90       	pop	r11
    2b64:	af 90       	pop	r10
    2b66:	9f 90       	pop	r9
    2b68:	8f 90       	pop	r8
    2b6a:	7f 90       	pop	r7
    2b6c:	6f 90       	pop	r6
    2b6e:	5f 90       	pop	r5
    2b70:	4f 90       	pop	r4
    2b72:	3f 90       	pop	r3
    2b74:	2f 90       	pop	r2
    2b76:	08 95       	ret

00002b78 <recv>:
//!
//!  @Note On this version, only blocking mode is supported.
//
//*****************************************************************************

INT16 recv(INT32 sd, void *buf, INT32 len, INT32 flags)
    2b78:	8f 92       	push	r8
    2b7a:	9f 92       	push	r9
    2b7c:	af 92       	push	r10
    2b7e:	bf 92       	push	r11
    2b80:	cf 92       	push	r12
    2b82:	df 92       	push	r13
    2b84:	ef 92       	push	r14
    2b86:	ff 92       	push	r15
    2b88:	0f 93       	push	r16
    2b8a:	1f 93       	push	r17
{
	return(simple_link_recv(sd, buf, len, flags, NULL, NULL, HCI_CMND_RECV));
    2b8c:	00 d0       	rcall	.+0      	; 0x2b8e <recv+0x16>
    2b8e:	00 d0       	rcall	.+0      	; 0x2b90 <recv+0x18>
    2b90:	f4 e0       	ldi	r31, 0x04	; 4
    2b92:	8f 2e       	mov	r8, r31
    2b94:	f0 e1       	ldi	r31, 0x10	; 16
    2b96:	9f 2e       	mov	r9, r31
    2b98:	a1 2c       	mov	r10, r1
    2b9a:	b1 2c       	mov	r11, r1
    2b9c:	ed b7       	in	r30, 0x3d	; 61
    2b9e:	fe b7       	in	r31, 0x3e	; 62
    2ba0:	81 82       	std	Z+1, r8	; 0x01
    2ba2:	92 82       	std	Z+2, r9	; 0x02
    2ba4:	a3 82       	std	Z+3, r10	; 0x03
    2ba6:	b4 82       	std	Z+4, r11	; 0x04
    2ba8:	aa 24       	eor	r10, r10
    2baa:	bb 24       	eor	r11, r11
    2bac:	88 24       	eor	r8, r8
    2bae:	99 24       	eor	r9, r9
    2bb0:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <_Z16simple_link_recvlPvllP11_sockaddr_tPml>
    2bb4:	0f 90       	pop	r0
    2bb6:	0f 90       	pop	r0
    2bb8:	0f 90       	pop	r0
    2bba:	0f 90       	pop	r0
}
    2bbc:	1f 91       	pop	r17
    2bbe:	0f 91       	pop	r16
    2bc0:	ff 90       	pop	r15
    2bc2:	ef 90       	pop	r14
    2bc4:	df 90       	pop	r13
    2bc6:	cf 90       	pop	r12
    2bc8:	bf 90       	pop	r11
    2bca:	af 90       	pop	r10
    2bcc:	9f 90       	pop	r9
    2bce:	8f 90       	pop	r8
    2bd0:	08 95       	ret

00002bd2 <select>:
//!  @sa socket
//
//*****************************************************************************

INT16 select(INT32 nfds, fd_set *readsds, fd_set *writesds, fd_set *exceptsds, 
struct timeval *timeout)
    2bd2:	4f 92       	push	r4
    2bd4:	5f 92       	push	r5
    2bd6:	6f 92       	push	r6
    2bd8:	7f 92       	push	r7
    2bda:	8f 92       	push	r8
    2bdc:	9f 92       	push	r9
    2bde:	af 92       	push	r10
    2be0:	bf 92       	push	r11
    2be2:	cf 92       	push	r12
    2be4:	df 92       	push	r13
    2be6:	ef 92       	push	r14
    2be8:	ff 92       	push	r15
    2bea:	0f 93       	push	r16
    2bec:	1f 93       	push	r17
    2bee:	df 93       	push	r29
    2bf0:	cf 93       	push	r28
    2bf2:	cd b7       	in	r28, 0x3d	; 61
    2bf4:	de b7       	in	r29, 0x3e	; 62
    2bf6:	60 97       	sbiw	r28, 0x10	; 16
    2bf8:	0f b6       	in	r0, 0x3f	; 63
    2bfa:	f8 94       	cli
    2bfc:	de bf       	out	0x3e, r29	; 62
    2bfe:	0f be       	out	0x3f, r0	; 63
    2c00:	cd bf       	out	0x3d, r28	; 61
    2c02:	5b 01       	movw	r10, r22
    2c04:	6c 01       	movw	r12, r24
    2c06:	4a 01       	movw	r8, r20
    2c08:	39 01       	movw	r6, r18
    2c0a:	28 01       	movw	r4, r16
    2c0c:	87 01       	movw	r16, r14
	{
		is_blocking = 0; /* no blocking, timeout */
	}

	// Fill in HCI packet structure
	ptr = tSLInformation.pucTxCommandBuffer;
    2c0e:	e0 90 74 02 	lds	r14, 0x0274
    2c12:	f0 90 75 02 	lds	r15, 0x0275
	args = (ptr + HEADERS_SIZE_CMD);

	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, nfds);
    2c16:	c7 01       	movw	r24, r14
    2c18:	09 96       	adiw	r24, 0x09	; 9
    2c1a:	b6 01       	movw	r22, r12
    2c1c:	a5 01       	movw	r20, r10
    2c1e:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, 0x00000014);
    2c22:	44 e1       	ldi	r20, 0x14	; 20
    2c24:	50 e0       	ldi	r21, 0x00	; 0
    2c26:	60 e0       	ldi	r22, 0x00	; 0
    2c28:	70 e0       	ldi	r23, 0x00	; 0
    2c2a:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, 0x00000014);
    2c2e:	44 e1       	ldi	r20, 0x14	; 20
    2c30:	50 e0       	ldi	r21, 0x00	; 0
    2c32:	60 e0       	ldi	r22, 0x00	; 0
    2c34:	70 e0       	ldi	r23, 0x00	; 0
    2c36:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, 0x00000014);
    2c3a:	44 e1       	ldi	r20, 0x14	; 20
    2c3c:	50 e0       	ldi	r21, 0x00	; 0
    2c3e:	60 e0       	ldi	r22, 0x00	; 0
    2c40:	70 e0       	ldi	r23, 0x00	; 0
    2c42:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, 0x00000014);
    2c46:	44 e1       	ldi	r20, 0x14	; 20
    2c48:	50 e0       	ldi	r21, 0x00	; 0
    2c4a:	60 e0       	ldi	r22, 0x00	; 0
    2c4c:	70 e0       	ldi	r23, 0x00	; 0
    2c4e:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, is_blocking);
    2c52:	40 e0       	ldi	r20, 0x00	; 0
    2c54:	50 e0       	ldi	r21, 0x00	; 0
    2c56:	60 e0       	ldi	r22, 0x00	; 0
    2c58:	70 e0       	ldi	r23, 0x00	; 0
    2c5a:	01 15       	cp	r16, r1
    2c5c:	11 05       	cpc	r17, r1
    2c5e:	21 f4       	brne	.+8      	; 0x2c68 <select+0x96>
    2c60:	41 e0       	ldi	r20, 0x01	; 1
    2c62:	50 e0       	ldi	r21, 0x00	; 0
    2c64:	60 e0       	ldi	r22, 0x00	; 0
    2c66:	70 e0       	ldi	r23, 0x00	; 0
    2c68:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, ((readsds) ? *(UINT32*)readsds : 0));
    2c6c:	81 14       	cp	r8, r1
    2c6e:	91 04       	cpc	r9, r1
    2c70:	29 f4       	brne	.+10     	; 0x2c7c <select+0xaa>
    2c72:	40 e0       	ldi	r20, 0x00	; 0
    2c74:	50 e0       	ldi	r21, 0x00	; 0
    2c76:	60 e0       	ldi	r22, 0x00	; 0
    2c78:	70 e0       	ldi	r23, 0x00	; 0
    2c7a:	05 c0       	rjmp	.+10     	; 0x2c86 <select+0xb4>
    2c7c:	f4 01       	movw	r30, r8
    2c7e:	40 81       	ld	r20, Z
    2c80:	51 81       	ldd	r21, Z+1	; 0x01
    2c82:	62 81       	ldd	r22, Z+2	; 0x02
    2c84:	73 81       	ldd	r23, Z+3	; 0x03
    2c86:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, ((writesds) ? *(UINT32*)writesds : 0));
    2c8a:	61 14       	cp	r6, r1
    2c8c:	71 04       	cpc	r7, r1
    2c8e:	29 f4       	brne	.+10     	; 0x2c9a <select+0xc8>
    2c90:	40 e0       	ldi	r20, 0x00	; 0
    2c92:	50 e0       	ldi	r21, 0x00	; 0
    2c94:	60 e0       	ldi	r22, 0x00	; 0
    2c96:	70 e0       	ldi	r23, 0x00	; 0
    2c98:	05 c0       	rjmp	.+10     	; 0x2ca4 <select+0xd2>
    2c9a:	f3 01       	movw	r30, r6
    2c9c:	40 81       	ld	r20, Z
    2c9e:	51 81       	ldd	r21, Z+1	; 0x01
    2ca0:	62 81       	ldd	r22, Z+2	; 0x02
    2ca2:	73 81       	ldd	r23, Z+3	; 0x03
    2ca4:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, ((exceptsds) ? *(UINT32*)exceptsds : 0));
    2ca8:	41 14       	cp	r4, r1
    2caa:	51 04       	cpc	r5, r1
    2cac:	29 f4       	brne	.+10     	; 0x2cb8 <select+0xe6>
    2cae:	40 e0       	ldi	r20, 0x00	; 0
    2cb0:	50 e0       	ldi	r21, 0x00	; 0
    2cb2:	60 e0       	ldi	r22, 0x00	; 0
    2cb4:	70 e0       	ldi	r23, 0x00	; 0
    2cb6:	05 c0       	rjmp	.+10     	; 0x2cc2 <select+0xf0>
    2cb8:	f2 01       	movw	r30, r4
    2cba:	40 81       	ld	r20, Z
    2cbc:	51 81       	ldd	r21, Z+1	; 0x01
    2cbe:	62 81       	ldd	r22, Z+2	; 0x02
    2cc0:	73 81       	ldd	r23, Z+3	; 0x03
    2cc2:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
    2cc6:	9c 01       	movw	r18, r24

	if (timeout)
    2cc8:	01 15       	cp	r16, r1
    2cca:	11 05       	cpc	r17, r1
    2ccc:	51 f1       	breq	.+84     	; 0x2d22 <select+0x150>
	{
		if ( 0 == timeout->tv_sec && timeout->tv_usec < 
    2cce:	f8 01       	movw	r30, r16
    2cd0:	80 81       	ld	r24, Z
    2cd2:	91 81       	ldd	r25, Z+1	; 0x01
    2cd4:	a2 81       	ldd	r26, Z+2	; 0x02
    2cd6:	b3 81       	ldd	r27, Z+3	; 0x03
    2cd8:	00 97       	sbiw	r24, 0x00	; 0
    2cda:	a1 05       	cpc	r26, r1
    2cdc:	b1 05       	cpc	r27, r1
    2cde:	91 f4       	brne	.+36     	; 0x2d04 <select+0x132>
    2ce0:	84 81       	ldd	r24, Z+4	; 0x04
    2ce2:	95 81       	ldd	r25, Z+5	; 0x05
    2ce4:	a6 81       	ldd	r26, Z+6	; 0x06
    2ce6:	b7 81       	ldd	r27, Z+7	; 0x07
    2ce8:	88 58       	subi	r24, 0x88	; 136
    2cea:	93 41       	sbci	r25, 0x13	; 19
    2cec:	a0 40       	sbci	r26, 0x00	; 0
    2cee:	b0 40       	sbci	r27, 0x00	; 0
    2cf0:	4c f4       	brge	.+18     	; 0x2d04 <select+0x132>
			SELECT_TIMEOUT_MIN_MICRO_SECONDS)
		{
			timeout->tv_usec = SELECT_TIMEOUT_MIN_MICRO_SECONDS;
    2cf2:	88 e8       	ldi	r24, 0x88	; 136
    2cf4:	93 e1       	ldi	r25, 0x13	; 19
    2cf6:	a0 e0       	ldi	r26, 0x00	; 0
    2cf8:	b0 e0       	ldi	r27, 0x00	; 0
    2cfa:	f8 01       	movw	r30, r16
    2cfc:	84 83       	std	Z+4, r24	; 0x04
    2cfe:	95 83       	std	Z+5, r25	; 0x05
    2d00:	a6 83       	std	Z+6, r26	; 0x06
    2d02:	b7 83       	std	Z+7, r27	; 0x07
		}
		args = UINT32_TO_STREAM(args, timeout->tv_sec);
    2d04:	f8 01       	movw	r30, r16
    2d06:	40 81       	ld	r20, Z
    2d08:	51 81       	ldd	r21, Z+1	; 0x01
    2d0a:	62 81       	ldd	r22, Z+2	; 0x02
    2d0c:	73 81       	ldd	r23, Z+3	; 0x03
    2d0e:	c9 01       	movw	r24, r18
    2d10:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
		args = UINT32_TO_STREAM(args, timeout->tv_usec);
    2d14:	f8 01       	movw	r30, r16
    2d16:	44 81       	ldd	r20, Z+4	; 0x04
    2d18:	55 81       	ldd	r21, Z+5	; 0x05
    2d1a:	66 81       	ldd	r22, Z+6	; 0x06
    2d1c:	77 81       	ldd	r23, Z+7	; 0x07
    2d1e:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	}

	// Initiate a HCI command
	hci_command_send(HCI_CMND_BSD_SELECT, ptr, SOCKET_SELECT_PARAMS_LEN);
    2d22:	88 e0       	ldi	r24, 0x08	; 8
    2d24:	90 e1       	ldi	r25, 0x10	; 16
    2d26:	b7 01       	movw	r22, r14
    2d28:	4c e2       	ldi	r20, 0x2C	; 44
    2d2a:	0e 94 71 11 	call	0x22e2	; 0x22e2 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_EVNT_SELECT, &tParams);
    2d2e:	88 e0       	ldi	r24, 0x08	; 8
    2d30:	90 e1       	ldi	r25, 0x10	; 16
    2d32:	be 01       	movw	r22, r28
    2d34:	6f 5f       	subi	r22, 0xFF	; 255
    2d36:	7f 4f       	sbci	r23, 0xFF	; 255
    2d38:	0e 94 3e 11 	call	0x227c	; 0x227c <SimpleLinkWaitEvent>

	// Update actually read FD
	if (tParams.iStatus >= 0)
    2d3c:	89 81       	ldd	r24, Y+1	; 0x01
    2d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d40:	ab 81       	ldd	r26, Y+3	; 0x03
    2d42:	bc 81       	ldd	r27, Y+4	; 0x04
    2d44:	b7 fd       	sbrc	r27, 7
    2d46:	27 c0       	rjmp	.+78     	; 0x2d96 <select+0x1c4>
	{
		if (readsds)
    2d48:	81 14       	cp	r8, r1
    2d4a:	91 04       	cpc	r9, r1
    2d4c:	49 f0       	breq	.+18     	; 0x2d60 <select+0x18e>
		{
			memcpy(readsds, &tParams.uiRdfd, sizeof(tParams.uiRdfd));
    2d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d50:	9e 81       	ldd	r25, Y+6	; 0x06
    2d52:	af 81       	ldd	r26, Y+7	; 0x07
    2d54:	b8 85       	ldd	r27, Y+8	; 0x08
    2d56:	f4 01       	movw	r30, r8
    2d58:	80 83       	st	Z, r24
    2d5a:	91 83       	std	Z+1, r25	; 0x01
    2d5c:	a2 83       	std	Z+2, r26	; 0x02
    2d5e:	b3 83       	std	Z+3, r27	; 0x03
		}

		if (writesds)
    2d60:	61 14       	cp	r6, r1
    2d62:	71 04       	cpc	r7, r1
    2d64:	49 f0       	breq	.+18     	; 0x2d78 <select+0x1a6>
		{
			memcpy(writesds, &tParams.uiWrfd, sizeof(tParams.uiWrfd)); 
    2d66:	89 85       	ldd	r24, Y+9	; 0x09
    2d68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d6a:	ab 85       	ldd	r26, Y+11	; 0x0b
    2d6c:	bc 85       	ldd	r27, Y+12	; 0x0c
    2d6e:	f3 01       	movw	r30, r6
    2d70:	80 83       	st	Z, r24
    2d72:	91 83       	std	Z+1, r25	; 0x01
    2d74:	a2 83       	std	Z+2, r26	; 0x02
    2d76:	b3 83       	std	Z+3, r27	; 0x03
		}

		if (exceptsds)
    2d78:	41 14       	cp	r4, r1
    2d7a:	51 04       	cpc	r5, r1
    2d7c:	49 f0       	breq	.+18     	; 0x2d90 <select+0x1be>
		{
			memcpy(exceptsds, &tParams.uiExfd, sizeof(tParams.uiExfd)); 
    2d7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d80:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d82:	af 85       	ldd	r26, Y+15	; 0x0f
    2d84:	b8 89       	ldd	r27, Y+16	; 0x10
    2d86:	f2 01       	movw	r30, r4
    2d88:	80 83       	st	Z, r24
    2d8a:	91 83       	std	Z+1, r25	; 0x01
    2d8c:	a2 83       	std	Z+2, r26	; 0x02
    2d8e:	b3 83       	std	Z+3, r27	; 0x03
		}

		return(tParams.iStatus);
    2d90:	29 81       	ldd	r18, Y+1	; 0x01
    2d92:	3a 81       	ldd	r19, Y+2	; 0x02
    2d94:	06 c0       	rjmp	.+12     	; 0x2da2 <select+0x1d0>

	}
	else
	{
		errno = tParams.iStatus;
    2d96:	90 93 bf 06 	sts	0x06BF, r25
    2d9a:	80 93 be 06 	sts	0x06BE, r24
    2d9e:	2f ef       	ldi	r18, 0xFF	; 255
    2da0:	3f ef       	ldi	r19, 0xFF	; 255
		return(-1);
	}
}
    2da2:	c9 01       	movw	r24, r18
    2da4:	60 96       	adiw	r28, 0x10	; 16
    2da6:	0f b6       	in	r0, 0x3f	; 63
    2da8:	f8 94       	cli
    2daa:	de bf       	out	0x3e, r29	; 62
    2dac:	0f be       	out	0x3f, r0	; 63
    2dae:	cd bf       	out	0x3d, r28	; 61
    2db0:	cf 91       	pop	r28
    2db2:	df 91       	pop	r29
    2db4:	1f 91       	pop	r17
    2db6:	0f 91       	pop	r16
    2db8:	ff 90       	pop	r15
    2dba:	ef 90       	pop	r14
    2dbc:	df 90       	pop	r13
    2dbe:	cf 90       	pop	r12
    2dc0:	bf 90       	pop	r11
    2dc2:	af 90       	pop	r10
    2dc4:	9f 90       	pop	r9
    2dc6:	8f 90       	pop	r8
    2dc8:	7f 90       	pop	r7
    2dca:	6f 90       	pop	r6
    2dcc:	5f 90       	pop	r5
    2dce:	4f 90       	pop	r4
    2dd0:	08 95       	ret

00002dd2 <accept>:
//!
//! @sa     socket ; bind ; listen
//
//*****************************************************************************

INT32 accept(INT32 sd, sockaddr *addr, socklen_t *addrlen)
    2dd2:	8f 92       	push	r8
    2dd4:	9f 92       	push	r9
    2dd6:	af 92       	push	r10
    2dd8:	bf 92       	push	r11
    2dda:	cf 92       	push	r12
    2ddc:	df 92       	push	r13
    2dde:	ef 92       	push	r14
    2de0:	ff 92       	push	r15
    2de2:	0f 93       	push	r16
    2de4:	1f 93       	push	r17
    2de6:	df 93       	push	r29
    2de8:	cf 93       	push	r28
    2dea:	cd b7       	in	r28, 0x3d	; 61
    2dec:	de b7       	in	r29, 0x3e	; 62
    2dee:	68 97       	sbiw	r28, 0x18	; 24
    2df0:	0f b6       	in	r0, 0x3f	; 63
    2df2:	f8 94       	cli
    2df4:	de bf       	out	0x3e, r29	; 62
    2df6:	0f be       	out	0x3f, r0	; 63
    2df8:	cd bf       	out	0x3d, r28	; 61
    2dfa:	5b 01       	movw	r10, r22
    2dfc:	6c 01       	movw	r12, r24
    2dfe:	7a 01       	movw	r14, r20
    2e00:	49 01       	movw	r8, r18
	INT32 ret;
	UINT8 *ptr, *args;
	tBsdReturnParams tAcceptReturnArguments;

	ret = EFAIL;
	ptr = tSLInformation.pucTxCommandBuffer;
    2e02:	00 91 74 02 	lds	r16, 0x0274
    2e06:	10 91 75 02 	lds	r17, 0x0275
	args = (ptr + HEADERS_SIZE_CMD);

	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, sd);
    2e0a:	c8 01       	movw	r24, r16
    2e0c:	09 96       	adiw	r24, 0x09	; 9
    2e0e:	b6 01       	movw	r22, r12
    2e10:	a5 01       	movw	r20, r10
    2e12:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_ACCEPT,
		ptr, SOCKET_ACCEPT_PARAMS_LEN);
    2e16:	85 e0       	ldi	r24, 0x05	; 5
    2e18:	90 e1       	ldi	r25, 0x10	; 16
    2e1a:	b8 01       	movw	r22, r16
    2e1c:	44 e0       	ldi	r20, 0x04	; 4
    2e1e:	0e 94 71 11 	call	0x22e2	; 0x22e2 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_ACCEPT, &tAcceptReturnArguments);
    2e22:	85 e0       	ldi	r24, 0x05	; 5
    2e24:	90 e1       	ldi	r25, 0x10	; 16
    2e26:	be 01       	movw	r22, r28
    2e28:	6f 5f       	subi	r22, 0xFF	; 255
    2e2a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e2c:	0e 94 3e 11 	call	0x227c	; 0x227c <SimpleLinkWaitEvent>

	// need specify return parameters!!!
	// Adafruit CC3k Host Driver Difference
	// Bug fix to prevent writing to null memory pointer.
	// Noted 12-12-2014 by tdicola
	if (addr) memcpy(addr, &tAcceptReturnArguments.tSocketAddress, ASIC_ADDR_LEN);
    2e30:	e1 14       	cp	r14, r1
    2e32:	f1 04       	cpc	r15, r1
    2e34:	41 f0       	breq	.+16     	; 0x2e46 <accept+0x74>
    2e36:	d7 01       	movw	r26, r14
    2e38:	fe 01       	movw	r30, r28
    2e3a:	39 96       	adiw	r30, 0x09	; 9
    2e3c:	88 e0       	ldi	r24, 0x08	; 8
    2e3e:	01 90       	ld	r0, Z+
    2e40:	0d 92       	st	X+, r0
    2e42:	81 50       	subi	r24, 0x01	; 1
    2e44:	e1 f7       	brne	.-8      	; 0x2e3e <accept+0x6c>
	if (addrlen) *addrlen = ASIC_ADDR_LEN;
    2e46:	81 14       	cp	r8, r1
    2e48:	91 04       	cpc	r9, r1
    2e4a:	49 f0       	breq	.+18     	; 0x2e5e <accept+0x8c>
    2e4c:	88 e0       	ldi	r24, 0x08	; 8
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	a0 e0       	ldi	r26, 0x00	; 0
    2e52:	b0 e0       	ldi	r27, 0x00	; 0
    2e54:	f4 01       	movw	r30, r8
    2e56:	80 83       	st	Z, r24
    2e58:	91 83       	std	Z+1, r25	; 0x01
    2e5a:	a2 83       	std	Z+2, r26	; 0x02
    2e5c:	b3 83       	std	Z+3, r27	; 0x03
	errno = tAcceptReturnArguments.iStatus; 
    2e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e60:	9e 81       	ldd	r25, Y+6	; 0x06
    2e62:	90 93 bf 06 	sts	0x06BF, r25
    2e66:	80 93 be 06 	sts	0x06BE, r24
	ret = errno;
    2e6a:	7c 01       	movw	r14, r24
    2e6c:	00 27       	eor	r16, r16
    2e6e:	f7 fc       	sbrc	r15, 7
    2e70:	00 95       	com	r16
    2e72:	10 2f       	mov	r17, r16

	// if succeeded, iStatus = new socket descriptor. otherwise - error number 
	if(M_IS_VALID_SD(ret))
    2e74:	f8 e0       	ldi	r31, 0x08	; 8
    2e76:	ef 16       	cp	r14, r31
    2e78:	f1 04       	cpc	r15, r1
    2e7a:	01 05       	cpc	r16, r1
    2e7c:	11 05       	cpc	r17, r1
    2e7e:	38 f4       	brcc	.+14     	; 0x2e8e <accept+0xbc>
	{
		set_socket_active_status(ret, SOCKET_STATUS_ACTIVE);
    2e80:	c8 01       	movw	r24, r16
    2e82:	b7 01       	movw	r22, r14
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	40 e0       	ldi	r20, 0x00	; 0
    2e8a:	50 e0       	ldi	r21, 0x00	; 0
    2e8c:	06 c0       	rjmp	.+12     	; 0x2e9a <accept+0xc8>
	}
	else
	{
		set_socket_active_status(sd, SOCKET_STATUS_INACTIVE);
    2e8e:	c6 01       	movw	r24, r12
    2e90:	b5 01       	movw	r22, r10
    2e92:	21 e0       	ldi	r18, 0x01	; 1
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	40 e0       	ldi	r20, 0x00	; 0
    2e98:	50 e0       	ldi	r21, 0x00	; 0
    2e9a:	0e 94 93 0a 	call	0x1526	; 0x1526 <set_socket_active_status>
	}

	return(ret);
}
    2e9e:	b7 01       	movw	r22, r14
    2ea0:	c8 01       	movw	r24, r16
    2ea2:	68 96       	adiw	r28, 0x18	; 24
    2ea4:	0f b6       	in	r0, 0x3f	; 63
    2ea6:	f8 94       	cli
    2ea8:	de bf       	out	0x3e, r29	; 62
    2eaa:	0f be       	out	0x3f, r0	; 63
    2eac:	cd bf       	out	0x3d, r28	; 61
    2eae:	cf 91       	pop	r28
    2eb0:	df 91       	pop	r29
    2eb2:	1f 91       	pop	r17
    2eb4:	0f 91       	pop	r16
    2eb6:	ff 90       	pop	r15
    2eb8:	ef 90       	pop	r14
    2eba:	df 90       	pop	r13
    2ebc:	cf 90       	pop	r12
    2ebe:	bf 90       	pop	r11
    2ec0:	af 90       	pop	r10
    2ec2:	9f 90       	pop	r9
    2ec4:	8f 90       	pop	r8
    2ec6:	08 95       	ret

00002ec8 <closesocket>:
//!
//!  @brief  The socket function closes a created socket.
//
//*****************************************************************************

INT32 closesocket(INT32 sd)
    2ec8:	cf 92       	push	r12
    2eca:	df 92       	push	r13
    2ecc:	ef 92       	push	r14
    2ece:	ff 92       	push	r15
    2ed0:	0f 93       	push	r16
    2ed2:	1f 93       	push	r17
    2ed4:	df 93       	push	r29
    2ed6:	cf 93       	push	r28
    2ed8:	00 d0       	rcall	.+0      	; 0x2eda <closesocket+0x12>
    2eda:	00 d0       	rcall	.+0      	; 0x2edc <closesocket+0x14>
    2edc:	cd b7       	in	r28, 0x3d	; 61
    2ede:	de b7       	in	r29, 0x3e	; 62
    2ee0:	6b 01       	movw	r12, r22
    2ee2:	7c 01       	movw	r14, r24
{
	INT32 ret;
	UINT8 *ptr, *args;

	ret = EFAIL;
    2ee4:	8f ef       	ldi	r24, 0xFF	; 255
    2ee6:	9f ef       	ldi	r25, 0xFF	; 255
    2ee8:	af ef       	ldi	r26, 0xFF	; 255
    2eea:	bf ef       	ldi	r27, 0xFF	; 255
    2eec:	89 83       	std	Y+1, r24	; 0x01
    2eee:	9a 83       	std	Y+2, r25	; 0x02
    2ef0:	ab 83       	std	Y+3, r26	; 0x03
    2ef2:	bc 83       	std	Y+4, r27	; 0x04
	ptr = tSLInformation.pucTxCommandBuffer;
    2ef4:	00 91 74 02 	lds	r16, 0x0274
    2ef8:	10 91 75 02 	lds	r17, 0x0275
	args = (ptr + HEADERS_SIZE_CMD);

	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, sd);
    2efc:	c8 01       	movw	r24, r16
    2efe:	09 96       	adiw	r24, 0x09	; 9
    2f00:	b7 01       	movw	r22, r14
    2f02:	a6 01       	movw	r20, r12
    2f04:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_CLOSE_SOCKET,
		ptr, SOCKET_CLOSE_PARAMS_LEN);
    2f08:	8b e0       	ldi	r24, 0x0B	; 11
    2f0a:	90 e1       	ldi	r25, 0x10	; 16
    2f0c:	b8 01       	movw	r22, r16
    2f0e:	44 e0       	ldi	r20, 0x04	; 4
    2f10:	0e 94 71 11 	call	0x22e2	; 0x22e2 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_CLOSE_SOCKET, &ret);
    2f14:	8b e0       	ldi	r24, 0x0B	; 11
    2f16:	90 e1       	ldi	r25, 0x10	; 16
    2f18:	be 01       	movw	r22, r28
    2f1a:	6f 5f       	subi	r22, 0xFF	; 255
    2f1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f1e:	0e 94 3e 11 	call	0x227c	; 0x227c <SimpleLinkWaitEvent>
	errno = ret;
    2f22:	89 81       	ldd	r24, Y+1	; 0x01
    2f24:	9a 81       	ldd	r25, Y+2	; 0x02
    2f26:	90 93 bf 06 	sts	0x06BF, r25
    2f2a:	80 93 be 06 	sts	0x06BE, r24

	// since 'close' call may result in either OK (and then it closed) or error 
	// mark this socket as invalid 
	set_socket_active_status(sd, SOCKET_STATUS_INACTIVE);
    2f2e:	c7 01       	movw	r24, r14
    2f30:	b6 01       	movw	r22, r12
    2f32:	21 e0       	ldi	r18, 0x01	; 1
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	40 e0       	ldi	r20, 0x00	; 0
    2f38:	50 e0       	ldi	r21, 0x00	; 0
    2f3a:	0e 94 93 0a 	call	0x1526	; 0x1526 <set_socket_active_status>
    2f3e:	69 81       	ldd	r22, Y+1	; 0x01
    2f40:	7a 81       	ldd	r23, Y+2	; 0x02

	return(ret);
}
    2f42:	8b 81       	ldd	r24, Y+3	; 0x03
    2f44:	9c 81       	ldd	r25, Y+4	; 0x04
    2f46:	0f 90       	pop	r0
    2f48:	0f 90       	pop	r0
    2f4a:	0f 90       	pop	r0
    2f4c:	0f 90       	pop	r0
    2f4e:	cf 91       	pop	r28
    2f50:	df 91       	pop	r29
    2f52:	1f 91       	pop	r17
    2f54:	0f 91       	pop	r16
    2f56:	ff 90       	pop	r15
    2f58:	ef 90       	pop	r14
    2f5a:	df 90       	pop	r13
    2f5c:	cf 90       	pop	r12
    2f5e:	08 95       	ret

00002f60 <socket>:
//!          transport service provider. This function is called by the 
//!          application layer to obtain a socket handle.
//
//*****************************************************************************

INT32 socket(INT32 domain, INT32 type, INT32 protocol)
    2f60:	4f 92       	push	r4
    2f62:	5f 92       	push	r5
    2f64:	6f 92       	push	r6
    2f66:	7f 92       	push	r7
    2f68:	8f 92       	push	r8
    2f6a:	9f 92       	push	r9
    2f6c:	af 92       	push	r10
    2f6e:	bf 92       	push	r11
    2f70:	cf 92       	push	r12
    2f72:	df 92       	push	r13
    2f74:	ef 92       	push	r14
    2f76:	ff 92       	push	r15
    2f78:	0f 93       	push	r16
    2f7a:	1f 93       	push	r17
    2f7c:	df 93       	push	r29
    2f7e:	cf 93       	push	r28
    2f80:	00 d0       	rcall	.+0      	; 0x2f82 <socket+0x22>
    2f82:	00 d0       	rcall	.+0      	; 0x2f84 <socket+0x24>
    2f84:	cd b7       	in	r28, 0x3d	; 61
    2f86:	de b7       	in	r29, 0x3e	; 62
    2f88:	5b 01       	movw	r10, r22
    2f8a:	6c 01       	movw	r12, r24
    2f8c:	39 01       	movw	r6, r18
    2f8e:	4a 01       	movw	r8, r20
{
	INT32 ret;
	UINT8 *ptr, *args;

	ret = EFAIL;
    2f90:	8f ef       	ldi	r24, 0xFF	; 255
    2f92:	9f ef       	ldi	r25, 0xFF	; 255
    2f94:	af ef       	ldi	r26, 0xFF	; 255
    2f96:	bf ef       	ldi	r27, 0xFF	; 255
    2f98:	89 83       	std	Y+1, r24	; 0x01
    2f9a:	9a 83       	std	Y+2, r25	; 0x02
    2f9c:	ab 83       	std	Y+3, r26	; 0x03
    2f9e:	bc 83       	std	Y+4, r27	; 0x04
	ptr = tSLInformation.pucTxCommandBuffer;
    2fa0:	40 90 74 02 	lds	r4, 0x0274
    2fa4:	50 90 75 02 	lds	r5, 0x0275
	args = (ptr + HEADERS_SIZE_CMD);

	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, domain);
    2fa8:	c2 01       	movw	r24, r4
    2faa:	09 96       	adiw	r24, 0x09	; 9
    2fac:	b6 01       	movw	r22, r12
    2fae:	a5 01       	movw	r20, r10
    2fb0:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, type);
    2fb4:	b4 01       	movw	r22, r8
    2fb6:	a3 01       	movw	r20, r6
    2fb8:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, protocol);
    2fbc:	b8 01       	movw	r22, r16
    2fbe:	a7 01       	movw	r20, r14
    2fc0:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_SOCKET, ptr, SOCKET_OPEN_PARAMS_LEN);
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	90 e1       	ldi	r25, 0x10	; 16
    2fc8:	b2 01       	movw	r22, r4
    2fca:	4c e0       	ldi	r20, 0x0C	; 12
    2fcc:	0e 94 71 11 	call	0x22e2	; 0x22e2 <hci_command_send>

	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_SOCKET, &ret);
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	90 e1       	ldi	r25, 0x10	; 16
    2fd4:	be 01       	movw	r22, r28
    2fd6:	6f 5f       	subi	r22, 0xFF	; 255
    2fd8:	7f 4f       	sbci	r23, 0xFF	; 255
    2fda:	0e 94 3e 11 	call	0x227c	; 0x227c <SimpleLinkWaitEvent>

	// Process the event 
	errno = ret;
    2fde:	69 81       	ldd	r22, Y+1	; 0x01
    2fe0:	7a 81       	ldd	r23, Y+2	; 0x02
    2fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe6:	70 93 bf 06 	sts	0x06BF, r23
    2fea:	60 93 be 06 	sts	0x06BE, r22

	set_socket_active_status(ret, SOCKET_STATUS_ACTIVE);
    2fee:	20 e0       	ldi	r18, 0x00	; 0
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	40 e0       	ldi	r20, 0x00	; 0
    2ff4:	50 e0       	ldi	r21, 0x00	; 0
    2ff6:	0e 94 93 0a 	call	0x1526	; 0x1526 <set_socket_active_status>
    2ffa:	69 81       	ldd	r22, Y+1	; 0x01
    2ffc:	7a 81       	ldd	r23, Y+2	; 0x02

	return(ret);
}
    2ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    3000:	9c 81       	ldd	r25, Y+4	; 0x04
    3002:	0f 90       	pop	r0
    3004:	0f 90       	pop	r0
    3006:	0f 90       	pop	r0
    3008:	0f 90       	pop	r0
    300a:	cf 91       	pop	r28
    300c:	df 91       	pop	r29
    300e:	1f 91       	pop	r17
    3010:	0f 91       	pop	r16
    3012:	ff 90       	pop	r15
    3014:	ef 90       	pop	r14
    3016:	df 90       	pop	r13
    3018:	cf 90       	pop	r12
    301a:	bf 90       	pop	r11
    301c:	af 90       	pop	r10
    301e:	9f 90       	pop	r9
    3020:	8f 90       	pop	r8
    3022:	7f 90       	pop	r7
    3024:	6f 90       	pop	r6
    3026:	5f 90       	pop	r5
    3028:	4f 90       	pop	r4
    302a:	08 95       	ret

0000302c <_Z26HostFlowControlConsumeBuffs>:
//!  @brief  if SEND_NON_BLOCKING not define - block until have free buffer 
//!          becomes available, else return immediately  with correct status 
//!          regarding the buffers available.
//
//*****************************************************************************
INT16 HostFlowControlConsumeBuff(INT16 sd)
    302c:	8f 92       	push	r8
    302e:	9f 92       	push	r9
    3030:	af 92       	push	r10
    3032:	bf 92       	push	r11
    3034:	cf 92       	push	r12
    3036:	df 92       	push	r13
    3038:	ef 92       	push	r14
    303a:	ff 92       	push	r15
    303c:	0f 93       	push	r16
    303e:	1f 93       	push	r17
    3040:	8c 01       	movw	r16, r24

// Adafruit CC3k Host Driver Difference
// Allow defining a send timeout period.
// Noted 12-12-2014 by tdicola
#ifdef SEND_TIMEOUT_MS
	unsigned long startTime = millis();
    3042:	0e 94 3a 36 	call	0x6c74	; 0x6c74 <millis>
    3046:	4b 01       	movw	r8, r22
    3048:	5c 01       	movw	r10, r24
			errno = tSLInformation.slTransmitDataError;
			tSLInformation.slTransmitDataError = 0;
			return errno;
		}

		if(SOCKET_STATUS_ACTIVE != get_socket_active_status(sd))
    304a:	68 01       	movw	r12, r16
    304c:	ee 24       	eor	r14, r14
    304e:	d7 fc       	sbrc	r13, 7
    3050:	e0 94       	com	r14
    3052:	fe 2c       	mov	r15, r14
	do
	{
		// In case last transmission failed then we will return the last failure 
		// reason here.
		// Note that the buffer will not be allocated in this case
		if (tSLInformation.slTransmitDataError != 0)
    3054:	80 91 86 02 	lds	r24, 0x0286
    3058:	90 91 87 02 	lds	r25, 0x0287
    305c:	a0 91 88 02 	lds	r26, 0x0288
    3060:	b0 91 89 02 	lds	r27, 0x0289
    3064:	00 97       	sbiw	r24, 0x00	; 0
    3066:	a1 05       	cpc	r26, r1
    3068:	b1 05       	cpc	r27, r1
    306a:	b1 f0       	breq	.+44     	; 0x3098 <_Z26HostFlowControlConsumeBuffs+0x6c>
		{
			errno = tSLInformation.slTransmitDataError;
    306c:	80 91 86 02 	lds	r24, 0x0286
    3070:	90 91 87 02 	lds	r25, 0x0287
    3074:	a0 91 88 02 	lds	r26, 0x0288
    3078:	b0 91 89 02 	lds	r27, 0x0289
    307c:	9c 01       	movw	r18, r24
    307e:	90 93 bf 06 	sts	0x06BF, r25
    3082:	80 93 be 06 	sts	0x06BE, r24
			tSLInformation.slTransmitDataError = 0;
    3086:	10 92 86 02 	sts	0x0286, r1
    308a:	10 92 87 02 	sts	0x0287, r1
    308e:	10 92 88 02 	sts	0x0288, r1
    3092:	10 92 89 02 	sts	0x0289, r1
    3096:	2c c0       	rjmp	.+88     	; 0x30f0 <_Z26HostFlowControlConsumeBuffs+0xc4>
			return errno;
		}

		if(SOCKET_STATUS_ACTIVE != get_socket_active_status(sd))
    3098:	c7 01       	movw	r24, r14
    309a:	b6 01       	movw	r22, r12
    309c:	0e 94 df 0a 	call	0x15be	; 0x15be <get_socket_active_status>
    30a0:	61 15       	cp	r22, r1
    30a2:	71 05       	cpc	r23, r1
    30a4:	81 05       	cpc	r24, r1
    30a6:	91 05       	cpc	r25, r1
    30a8:	19 f0       	breq	.+6      	; 0x30b0 <_Z26HostFlowControlConsumeBuffs+0x84>
    30aa:	2f ef       	ldi	r18, 0xFF	; 255
    30ac:	3f ef       	ldi	r19, 0xFF	; 255
    30ae:	20 c0       	rjmp	.+64     	; 0x30f0 <_Z26HostFlowControlConsumeBuffs+0xc4>

// Adafruit CC3k Host Driver Difference
// Implementation of send timeout.
// Noted 12-12-2014 by tdicola
#ifdef SEND_TIMEOUT_MS
		if ((millis() - startTime) > SEND_TIMEOUT_MS)
    30b0:	0e 94 3a 36 	call	0x6c74	; 0x6c74 <millis>
    30b4:	68 19       	sub	r22, r8
    30b6:	79 09       	sbc	r23, r9
    30b8:	8a 09       	sbc	r24, r10
    30ba:	9b 09       	sbc	r25, r11
    30bc:	61 53       	subi	r22, 0x31	; 49
    30be:	75 47       	sbci	r23, 0x75	; 117
    30c0:	80 40       	sbci	r24, 0x00	; 0
    30c2:	90 40       	sbci	r25, 0x00	; 0
    30c4:	18 f0       	brcs	.+6      	; 0x30cc <_Z26HostFlowControlConsumeBuffs+0xa0>
    30c6:	2d ef       	ldi	r18, 0xFD	; 253
    30c8:	3f ef       	ldi	r19, 0xFF	; 255
    30ca:	12 c0       	rjmp	.+36     	; 0x30f0 <_Z26HostFlowControlConsumeBuffs+0xc4>
// Noted 12-12-2014 by tdicola
#ifdef SEND_TIMEOUT_MS
	unsigned long startTime = millis();
#endif

	do
    30cc:	80 91 8a 02 	lds	r24, 0x028A
    30d0:	90 91 8b 02 	lds	r25, 0x028B
    30d4:	89 2b       	or	r24, r25
    30d6:	09 f4       	brne	.+2      	; 0x30da <_Z26HostFlowControlConsumeBuffs+0xae>
    30d8:	bd cf       	rjmp	.-134    	; 0x3054 <_Z26HostFlowControlConsumeBuffs+0x28>
		}
#endif

	} while(0 == tSLInformation.usNumberOfFreeBuffers);

	tSLInformation.usNumberOfFreeBuffers--;
    30da:	80 91 8a 02 	lds	r24, 0x028A
    30de:	90 91 8b 02 	lds	r25, 0x028B
    30e2:	01 97       	sbiw	r24, 0x01	; 1
    30e4:	90 93 8b 02 	sts	0x028B, r25
    30e8:	80 93 8a 02 	sts	0x028A, r24
    30ec:	20 e0       	ldi	r18, 0x00	; 0
    30ee:	30 e0       	ldi	r19, 0x00	; 0
	{
		tSLInformation.usNumberOfFreeBuffers--;
		return 0;
	}
#endif
}
    30f0:	c9 01       	movw	r24, r18
    30f2:	1f 91       	pop	r17
    30f4:	0f 91       	pop	r16
    30f6:	ff 90       	pop	r15
    30f8:	ef 90       	pop	r14
    30fa:	df 90       	pop	r13
    30fc:	cf 90       	pop	r12
    30fe:	bf 90       	pop	r11
    3100:	af 90       	pop	r10
    3102:	9f 90       	pop	r9
    3104:	8f 90       	pop	r8
    3106:	08 95       	ret

00003108 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll>:
//!  @brief          This function is used to transmit a message to another
//!                  socket
//
//*****************************************************************************
INT16 simple_link_send(INT32 sd, const void *buf, INT32 len, INT32 flags,
	const sockaddr *to, INT32 tolen, INT32 opcode)
    3108:	2f 92       	push	r2
    310a:	3f 92       	push	r3
    310c:	4f 92       	push	r4
    310e:	5f 92       	push	r5
    3110:	6f 92       	push	r6
    3112:	7f 92       	push	r7
    3114:	8f 92       	push	r8
    3116:	9f 92       	push	r9
    3118:	af 92       	push	r10
    311a:	bf 92       	push	r11
    311c:	cf 92       	push	r12
    311e:	df 92       	push	r13
    3120:	ef 92       	push	r14
    3122:	ff 92       	push	r15
    3124:	0f 93       	push	r16
    3126:	1f 93       	push	r17
    3128:	df 93       	push	r29
    312a:	cf 93       	push	r28
    312c:	cd b7       	in	r28, 0x3d	; 61
    312e:	de b7       	in	r29, 0x3e	; 62
    3130:	6a 97       	sbiw	r28, 0x1a	; 26
    3132:	0f b6       	in	r0, 0x3f	; 63
    3134:	f8 94       	cli
    3136:	de bf       	out	0x3e, r29	; 62
    3138:	0f be       	out	0x3f, r0	; 63
    313a:	cd bf       	out	0x3d, r28	; 61
    313c:	1b 01       	movw	r2, r22
    313e:	2c 01       	movw	r4, r24
    3140:	5c 8b       	std	Y+20, r21	; 0x14
    3142:	4b 8b       	std	Y+19, r20	; 0x13
    3144:	38 01       	movw	r6, r16
    3146:	49 01       	movw	r8, r18
    3148:	cd 8a       	std	Y+21, r12	; 0x15
    314a:	de 8a       	std	Y+22, r13	; 0x16
    314c:	ef 8a       	std	Y+23, r14	; 0x17
    314e:	f8 8e       	std	Y+24, r15	; 0x18
    3150:	ba 8e       	std	Y+26, r11	; 0x1a
    3152:	a9 8e       	std	Y+25, r10	; 0x19
    3154:	cf a4       	ldd	r12, Y+47	; 0x2f
    3156:	d8 a8       	ldd	r13, Y+48	; 0x30
    3158:	e9 a8       	ldd	r14, Y+49	; 0x31
    315a:	fa a8       	ldd	r15, Y+50	; 0x32
	UINT32 addr_offset;
	INT16 res;
	tBsdReadReturnParams tSocketSendEvent;

	// Check the bsd_arguments
	if (0 != (res = HostFlowControlConsumeBuff(sd)))
    315c:	cb 01       	movw	r24, r22
    315e:	0e 94 16 18 	call	0x302c	; 0x302c <_Z26HostFlowControlConsumeBuffs>
    3162:	9c 01       	movw	r18, r24
    3164:	00 97       	sbiw	r24, 0x00	; 0
    3166:	09 f0       	breq	.+2      	; 0x316a <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x62>
    3168:	cb c0       	rjmp	.+406    	; 0x3300 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x1f8>
	{
		return res;
	}

	//Update the number of sent packets
	tSLInformation.NumberOfSentPackets++;
    316a:	80 91 92 02 	lds	r24, 0x0292
    316e:	90 91 93 02 	lds	r25, 0x0293
    3172:	a0 91 94 02 	lds	r26, 0x0294
    3176:	b0 91 95 02 	lds	r27, 0x0295
    317a:	01 96       	adiw	r24, 0x01	; 1
    317c:	a1 1d       	adc	r26, r1
    317e:	b1 1d       	adc	r27, r1
    3180:	80 93 92 02 	sts	0x0292, r24
    3184:	90 93 93 02 	sts	0x0293, r25
    3188:	a0 93 94 02 	sts	0x0294, r26
    318c:	b0 93 95 02 	sts	0x0295, r27

	// Allocate a buffer and construct a packet and send it over spi
	ptr = tSLInformation.pucTxCommandBuffer;
    3190:	20 91 74 02 	lds	r18, 0x0274
    3194:	30 91 75 02 	lds	r19, 0x0275
    3198:	3a 8b       	std	Y+18, r19	; 0x12
    319a:	29 8b       	std	Y+17, r18	; 0x11
	args = (ptr + HEADERS_SIZE_DATA);

	// Update the offset of data and parameters according to the command
	switch(opcode)
    319c:	8b a9       	ldd	r24, Y+51	; 0x33
    319e:	9c a9       	ldd	r25, Y+52	; 0x34
    31a0:	ad a9       	ldd	r26, Y+53	; 0x35
    31a2:	be a9       	ldd	r27, Y+54	; 0x36
    31a4:	81 38       	cpi	r24, 0x81	; 129
    31a6:	91 05       	cpc	r25, r1
    31a8:	a1 05       	cpc	r26, r1
    31aa:	b1 05       	cpc	r27, r1
    31ac:	b9 f0       	breq	.+46     	; 0x31dc <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0xd4>
    31ae:	83 38       	cpi	r24, 0x83	; 131
    31b0:	91 05       	cpc	r25, r1
    31b2:	a1 05       	cpc	r26, r1
    31b4:	b1 05       	cpc	r27, r1
    31b6:	f1 f4       	brne	.+60     	; 0x31f4 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0xec>
	{ 
	case HCI_CMND_SENDTO:
		{
			addr_offset = len + sizeof(len) + sizeof(len);
    31b8:	a4 01       	movw	r20, r8
    31ba:	93 01       	movw	r18, r6
    31bc:	28 5f       	subi	r18, 0xF8	; 248
    31be:	3f 4f       	sbci	r19, 0xFF	; 255
    31c0:	4f 4f       	sbci	r20, 0xFF	; 255
    31c2:	5f 4f       	sbci	r21, 0xFF	; 255
    31c4:	2d 87       	std	Y+13, r18	; 0x0d
    31c6:	3e 87       	std	Y+14, r19	; 0x0e
    31c8:	4f 87       	std	Y+15, r20	; 0x0f
    31ca:	58 8b       	std	Y+16, r21	; 0x10
			addrlen = 8;
			uArgSize = SOCKET_SENDTO_PARAMS_LEN;
			pDataPtr = ptr + HEADERS_SIZE_DATA + SOCKET_SENDTO_PARAMS_LEN;
    31cc:	a9 88       	ldd	r10, Y+17	; 0x11
    31ce:	ba 88       	ldd	r11, Y+18	; 0x12
    31d0:	42 e2       	ldi	r20, 0x22	; 34
    31d2:	50 e0       	ldi	r21, 0x00	; 0
    31d4:	a4 0e       	add	r10, r20
    31d6:	b5 1e       	adc	r11, r21
    31d8:	18 e1       	ldi	r17, 0x18	; 24
    31da:	0c c0       	rjmp	.+24     	; 0x31f4 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0xec>
	case HCI_CMND_SEND:
		{
			tolen = 0;
			to = NULL;
			uArgSize = HCI_CMND_SEND_ARG_LENGTH;
			pDataPtr = ptr + HEADERS_SIZE_DATA + HCI_CMND_SEND_ARG_LENGTH;
    31dc:	a9 88       	ldd	r10, Y+17	; 0x11
    31de:	ba 88       	ldd	r11, Y+18	; 0x12
    31e0:	8a e1       	ldi	r24, 0x1A	; 26
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	a8 0e       	add	r10, r24
    31e6:	b9 1e       	adc	r11, r25
    31e8:	1a 8e       	std	Y+26, r1	; 0x1a
    31ea:	19 8e       	std	Y+25, r1	; 0x19
    31ec:	cc 24       	eor	r12, r12
    31ee:	dd 24       	eor	r13, r13
    31f0:	76 01       	movw	r14, r12
    31f2:	10 e1       	ldi	r17, 0x10	; 16
			break;
		}
	}

	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, sd);
    31f4:	89 89       	ldd	r24, Y+17	; 0x11
    31f6:	9a 89       	ldd	r25, Y+18	; 0x12
    31f8:	0a 96       	adiw	r24, 0x0a	; 10
    31fa:	b2 01       	movw	r22, r4
    31fc:	a1 01       	movw	r20, r2
    31fe:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, uArgSize - sizeof(sd));
    3202:	01 2f       	mov	r16, r17
    3204:	10 e0       	ldi	r17, 0x00	; 0
    3206:	04 50       	subi	r16, 0x04	; 4
    3208:	10 40       	sbci	r17, 0x00	; 0
    320a:	a8 01       	movw	r20, r16
    320c:	60 e0       	ldi	r22, 0x00	; 0
    320e:	70 e0       	ldi	r23, 0x00	; 0
    3210:	0c 5f       	subi	r16, 0xFC	; 252
    3212:	1f 4f       	sbci	r17, 0xFF	; 255
    3214:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, len);
    3218:	b4 01       	movw	r22, r8
    321a:	a3 01       	movw	r20, r6
    321c:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, flags);
    3220:	4d 89       	ldd	r20, Y+21	; 0x15
    3222:	5e 89       	ldd	r21, Y+22	; 0x16
    3224:	6f 89       	ldd	r22, Y+23	; 0x17
    3226:	78 8d       	ldd	r23, Y+24	; 0x18
    3228:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>

	if (opcode == HCI_CMND_SENDTO)
    322c:	2b a9       	ldd	r18, Y+51	; 0x33
    322e:	3c a9       	ldd	r19, Y+52	; 0x34
    3230:	4d a9       	ldd	r20, Y+53	; 0x35
    3232:	5e a9       	ldd	r21, Y+54	; 0x36
    3234:	23 38       	cpi	r18, 0x83	; 131
    3236:	31 05       	cpc	r19, r1
    3238:	41 05       	cpc	r20, r1
    323a:	51 05       	cpc	r21, r1
    323c:	61 f4       	brne	.+24     	; 0x3256 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x14e>
	{
		args = UINT32_TO_STREAM(args, addr_offset);
    323e:	4d 85       	ldd	r20, Y+13	; 0x0d
    3240:	5e 85       	ldd	r21, Y+14	; 0x0e
    3242:	6f 85       	ldd	r22, Y+15	; 0x0f
    3244:	78 89       	ldd	r23, Y+16	; 0x10
    3246:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
		args = UINT32_TO_STREAM(args, addrlen);
    324a:	48 e0       	ldi	r20, 0x08	; 8
    324c:	50 e0       	ldi	r21, 0x00	; 0
    324e:	60 e0       	ldi	r22, 0x00	; 0
    3250:	70 e0       	ldi	r23, 0x00	; 0
    3252:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
    3256:	20 e0       	ldi	r18, 0x00	; 0
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	40 e0       	ldi	r20, 0x00	; 0
    325c:	50 e0       	ldi	r21, 0x00	; 0
    325e:	0c c0       	rjmp	.+24     	; 0x3278 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x170>
	}

	// Copy the data received from user into the TX Buffer
	ARRAY_TO_STREAM(pDataPtr, ((UINT8 *)buf), len);
    3260:	eb 89       	ldd	r30, Y+19	; 0x13
    3262:	fc 89       	ldd	r31, Y+20	; 0x14
    3264:	e2 0f       	add	r30, r18
    3266:	f3 1f       	adc	r31, r19
    3268:	80 81       	ld	r24, Z
    326a:	d5 01       	movw	r26, r10
    326c:	8d 93       	st	X+, r24
    326e:	5d 01       	movw	r10, r26
    3270:	2f 5f       	subi	r18, 0xFF	; 255
    3272:	3f 4f       	sbci	r19, 0xFF	; 255
    3274:	4f 4f       	sbci	r20, 0xFF	; 255
    3276:	5f 4f       	sbci	r21, 0xFF	; 255
    3278:	26 15       	cp	r18, r6
    327a:	37 05       	cpc	r19, r7
    327c:	48 05       	cpc	r20, r8
    327e:	59 05       	cpc	r21, r9
    3280:	7c f3       	brlt	.-34     	; 0x3260 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x158>

	// In case we are using SendTo, copy the to parameters
	if (opcode == HCI_CMND_SENDTO)
    3282:	2b a9       	ldd	r18, Y+51	; 0x33
    3284:	3c a9       	ldd	r19, Y+52	; 0x34
    3286:	4d a9       	ldd	r20, Y+53	; 0x35
    3288:	5e a9       	ldd	r21, Y+54	; 0x36
    328a:	23 38       	cpi	r18, 0x83	; 131
    328c:	31 05       	cpc	r19, r1
    328e:	41 05       	cpc	r20, r1
    3290:	51 05       	cpc	r21, r1
    3292:	c1 f4       	brne	.+48     	; 0x32c4 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x1bc>
    3294:	20 e0       	ldi	r18, 0x00	; 0
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	40 e0       	ldi	r20, 0x00	; 0
    329a:	50 e0       	ldi	r21, 0x00	; 0
    329c:	0e c0       	rjmp	.+28     	; 0x32ba <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x1b2>
//!  @brief          This function is used to transmit a message to another
//!                  socket
//
//*****************************************************************************
INT16 simple_link_send(INT32 sd, const void *buf, INT32 len, INT32 flags,
	const sockaddr *to, INT32 tolen, INT32 opcode)
    329e:	f9 01       	movw	r30, r18
	ARRAY_TO_STREAM(pDataPtr, ((UINT8 *)buf), len);

	// In case we are using SendTo, copy the to parameters
	if (opcode == HCI_CMND_SENDTO)
	{	
		ARRAY_TO_STREAM(pDataPtr, ((UINT8 *)to), tolen);
    32a0:	d5 01       	movw	r26, r10
    32a2:	a2 0f       	add	r26, r18
    32a4:	b3 1f       	adc	r27, r19
    32a6:	89 8d       	ldd	r24, Y+25	; 0x19
    32a8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    32aa:	e8 0f       	add	r30, r24
    32ac:	f9 1f       	adc	r31, r25
    32ae:	80 81       	ld	r24, Z
    32b0:	8c 93       	st	X, r24
    32b2:	2f 5f       	subi	r18, 0xFF	; 255
    32b4:	3f 4f       	sbci	r19, 0xFF	; 255
    32b6:	4f 4f       	sbci	r20, 0xFF	; 255
    32b8:	5f 4f       	sbci	r21, 0xFF	; 255
    32ba:	2c 15       	cp	r18, r12
    32bc:	3d 05       	cpc	r19, r13
    32be:	4e 05       	cpc	r20, r14
    32c0:	5f 05       	cpc	r21, r15
    32c2:	6c f3       	brlt	.-38     	; 0x329e <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x196>
	}

	// Initiate a HCI command
	hci_data_send(opcode, ptr, uArgSize, len,(UINT8*)to, tolen);
    32c4:	8b a9       	ldd	r24, Y+51	; 0x33
    32c6:	69 89       	ldd	r22, Y+17	; 0x11
    32c8:	7a 89       	ldd	r23, Y+18	; 0x12
    32ca:	a8 01       	movw	r20, r16
    32cc:	93 01       	movw	r18, r6
    32ce:	09 8d       	ldd	r16, Y+25	; 0x19
    32d0:	1a 8d       	ldd	r17, Y+26	; 0x1a
    32d2:	76 01       	movw	r14, r12
    32d4:	0e 94 4a 11 	call	0x2294	; 0x2294 <hci_data_send>
    32d8:	be 01       	movw	r22, r28
    32da:	6f 5f       	subi	r22, 0xFF	; 255
    32dc:	7f 4f       	sbci	r23, 0xFF	; 255

	if (opcode == HCI_CMND_SENDTO)
    32de:	2b a9       	ldd	r18, Y+51	; 0x33
    32e0:	3c a9       	ldd	r19, Y+52	; 0x34
    32e2:	4d a9       	ldd	r20, Y+53	; 0x35
    32e4:	5e a9       	ldd	r21, Y+54	; 0x36
    32e6:	23 38       	cpi	r18, 0x83	; 131
    32e8:	31 05       	cpc	r19, r1
    32ea:	41 05       	cpc	r20, r1
    32ec:	51 05       	cpc	r21, r1
    32ee:	19 f4       	brne	.+6      	; 0x32f6 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x1ee>
		SimpleLinkWaitEvent(HCI_EVNT_SENDTO, &tSocketSendEvent);
    32f0:	8f e0       	ldi	r24, 0x0F	; 15
    32f2:	90 e1       	ldi	r25, 0x10	; 16
    32f4:	02 c0       	rjmp	.+4      	; 0x32fa <_Z16simple_link_sendlPKvllPK11_sockaddr_tll+0x1f2>
	else
		SimpleLinkWaitEvent(HCI_EVNT_SEND, &tSocketSendEvent);
    32f6:	83 e0       	ldi	r24, 0x03	; 3
    32f8:	90 e1       	ldi	r25, 0x10	; 16
    32fa:	0e 94 3e 11 	call	0x227c	; 0x227c <SimpleLinkWaitEvent>

	return	(len);
    32fe:	93 01       	movw	r18, r6
}
    3300:	c9 01       	movw	r24, r18
    3302:	6a 96       	adiw	r28, 0x1a	; 26
    3304:	0f b6       	in	r0, 0x3f	; 63
    3306:	f8 94       	cli
    3308:	de bf       	out	0x3e, r29	; 62
    330a:	0f be       	out	0x3f, r0	; 63
    330c:	cd bf       	out	0x3d, r28	; 61
    330e:	cf 91       	pop	r28
    3310:	df 91       	pop	r29
    3312:	1f 91       	pop	r17
    3314:	0f 91       	pop	r16
    3316:	ff 90       	pop	r15
    3318:	ef 90       	pop	r14
    331a:	df 90       	pop	r13
    331c:	cf 90       	pop	r12
    331e:	bf 90       	pop	r11
    3320:	af 90       	pop	r10
    3322:	9f 90       	pop	r9
    3324:	8f 90       	pop	r8
    3326:	7f 90       	pop	r7
    3328:	6f 90       	pop	r6
    332a:	5f 90       	pop	r5
    332c:	4f 90       	pop	r4
    332e:	3f 90       	pop	r3
    3330:	2f 90       	pop	r2
    3332:	08 95       	ret

00003334 <send>:
//!
//!  @sa             sendto
//
//*****************************************************************************

INT16 send(INT32 sd, const void *buf, INT32 len, INT32 flags)
    3334:	8f 92       	push	r8
    3336:	9f 92       	push	r9
    3338:	af 92       	push	r10
    333a:	bf 92       	push	r11
    333c:	cf 92       	push	r12
    333e:	df 92       	push	r13
    3340:	ef 92       	push	r14
    3342:	ff 92       	push	r15
    3344:	0f 93       	push	r16
    3346:	1f 93       	push	r17
{
	return(simple_link_send(sd, buf, len, flags, NULL, 0, HCI_CMND_SEND));
    3348:	ed b7       	in	r30, 0x3d	; 61
    334a:	fe b7       	in	r31, 0x3e	; 62
    334c:	38 97       	sbiw	r30, 0x08	; 8
    334e:	0f b6       	in	r0, 0x3f	; 63
    3350:	f8 94       	cli
    3352:	fe bf       	out	0x3e, r31	; 62
    3354:	0f be       	out	0x3f, r0	; 63
    3356:	ed bf       	out	0x3d, r30	; 61
    3358:	11 82       	std	Z+1, r1	; 0x01
    335a:	12 82       	std	Z+2, r1	; 0x02
    335c:	13 82       	std	Z+3, r1	; 0x03
    335e:	14 82       	std	Z+4, r1	; 0x04
    3360:	b1 e8       	ldi	r27, 0x81	; 129
    3362:	8b 2e       	mov	r8, r27
    3364:	91 2c       	mov	r9, r1
    3366:	a1 2c       	mov	r10, r1
    3368:	b1 2c       	mov	r11, r1
    336a:	85 82       	std	Z+5, r8	; 0x05
    336c:	96 82       	std	Z+6, r9	; 0x06
    336e:	a7 82       	std	Z+7, r10	; 0x07
    3370:	b0 86       	std	Z+8, r11	; 0x08
    3372:	aa 24       	eor	r10, r10
    3374:	bb 24       	eor	r11, r11
    3376:	0e 94 84 18 	call	0x3108	; 0x3108 <_Z16simple_link_sendlPKvllPK11_sockaddr_tll>
    337a:	2d b7       	in	r18, 0x3d	; 61
    337c:	3e b7       	in	r19, 0x3e	; 62
    337e:	28 5f       	subi	r18, 0xF8	; 248
    3380:	3f 4f       	sbci	r19, 0xFF	; 255
    3382:	0f b6       	in	r0, 0x3f	; 63
    3384:	f8 94       	cli
    3386:	3e bf       	out	0x3e, r19	; 62
    3388:	0f be       	out	0x3f, r0	; 63
    338a:	2d bf       	out	0x3d, r18	; 61
}
    338c:	1f 91       	pop	r17
    338e:	0f 91       	pop	r16
    3390:	ff 90       	pop	r15
    3392:	ef 90       	pop	r14
    3394:	df 90       	pop	r13
    3396:	cf 90       	pop	r12
    3398:	bf 90       	pop	r11
    339a:	af 90       	pop	r10
    339c:	9f 90       	pop	r9
    339e:	8f 90       	pop	r8
    33a0:	08 95       	ret

000033a2 <wlan_init>:
	tDriverPatches sDriverPatches,
	tBootLoaderPatches sBootLoaderPatches,
	tWlanReadInteruptPin  sReadWlanInterruptPin,
	tWlanInterruptEnable  sWlanInterruptEnable,
	tWlanInterruptDisable sWlanInterruptDisable,
	tWriteWlanPin         sWriteWlanPin)
    33a2:	af 92       	push	r10
    33a4:	bf 92       	push	r11
    33a6:	cf 92       	push	r12
    33a8:	df 92       	push	r13
    33aa:	ef 92       	push	r14
    33ac:	ff 92       	push	r15
    33ae:	0f 93       	push	r16
    33b0:	1f 93       	push	r17
{

	tSLInformation.sFWPatches = sFWPatches;
    33b2:	70 93 77 02 	sts	0x0277, r23
    33b6:	60 93 76 02 	sts	0x0276, r22
	tSLInformation.sDriverPatches = sDriverPatches;
    33ba:	50 93 79 02 	sts	0x0279, r21
    33be:	40 93 78 02 	sts	0x0278, r20
	tSLInformation.sBootLoaderPatches = sBootLoaderPatches;
    33c2:	30 93 7b 02 	sts	0x027B, r19
    33c6:	20 93 7a 02 	sts	0x027A, r18

	// init io callback
	tSLInformation.ReadWlanInterruptPin = sReadWlanInterruptPin;
    33ca:	10 93 7f 02 	sts	0x027F, r17
    33ce:	00 93 7e 02 	sts	0x027E, r16
	tSLInformation.WlanInterruptEnable  = sWlanInterruptEnable;
    33d2:	f0 92 81 02 	sts	0x0281, r15
    33d6:	e0 92 80 02 	sts	0x0280, r14
	tSLInformation.WlanInterruptDisable = sWlanInterruptDisable;
    33da:	d0 92 83 02 	sts	0x0283, r13
    33de:	c0 92 82 02 	sts	0x0282, r12
	tSLInformation.WriteWlanPin = sWriteWlanPin;
    33e2:	b0 92 85 02 	sts	0x0285, r11
    33e6:	a0 92 84 02 	sts	0x0284, r10

	//init asynchronous events callback
	tSLInformation.sWlanCB= sWlanCB;
    33ea:	90 93 7d 02 	sts	0x027D, r25
    33ee:	80 93 7c 02 	sts	0x027C, r24

	// By default TX Complete events are routed to host too
	tSLInformation.InformHostOnTxComplete = 1;
    33f2:	81 e0       	ldi	r24, 0x01	; 1
    33f4:	80 93 9a 02 	sts	0x029A, r24
}
    33f8:	1f 91       	pop	r17
    33fa:	0f 91       	pop	r16
    33fc:	ff 90       	pop	r15
    33fe:	ef 90       	pop	r14
    3400:	df 90       	pop	r13
    3402:	cf 90       	pop	r12
    3404:	bf 90       	pop	r11
    3406:	af 90       	pop	r10
    3408:	08 95       	ret

0000340a <wlan_set_event_mask>:
//!  @brief    Mask event according to bit mask. In case that event is 
//!            masked (1), the device will not send the masked event to host. 
//
//*****************************************************************************

INT32 wlan_set_event_mask(UINT32 ulMask)
    340a:	0f 93       	push	r16
    340c:	1f 93       	push	r17
    340e:	df 93       	push	r29
    3410:	cf 93       	push	r28
    3412:	00 d0       	rcall	.+0      	; 0x3414 <wlan_set_event_mask+0xa>
    3414:	00 d0       	rcall	.+0      	; 0x3416 <wlan_set_event_mask+0xc>
    3416:	cd b7       	in	r28, 0x3d	; 61
    3418:	de b7       	in	r29, 0x3e	; 62
    341a:	ab 01       	movw	r20, r22
    341c:	bc 01       	movw	r22, r24
	INT32 ret;
	UINT8 *ptr;
	UINT8 *args;


	if ((ulMask & HCI_EVNT_WLAN_TX_COMPLETE) == HCI_EVNT_WLAN_TX_COMPLETE)
    341e:	db 01       	movw	r26, r22
    3420:	ca 01       	movw	r24, r20
    3422:	88 70       	andi	r24, 0x08	; 8
    3424:	90 78       	andi	r25, 0x80	; 128
    3426:	a0 70       	andi	r26, 0x00	; 0
    3428:	b0 70       	andi	r27, 0x00	; 0
    342a:	88 50       	subi	r24, 0x08	; 8
    342c:	90 48       	sbci	r25, 0x80	; 128
    342e:	a0 40       	sbci	r26, 0x00	; 0
    3430:	b0 40       	sbci	r27, 0x00	; 0
    3432:	a9 f4       	brne	.+42     	; 0x345e <wlan_set_event_mask+0x54>
	{
		tSLInformation.InformHostOnTxComplete = 0;
    3434:	10 92 9a 02 	sts	0x029A, r1

		// Since an event is a virtual event - i.e. it is not coming from CC3000
		// there is no need to send anything to the device if it was an only event
		if (ulMask == HCI_EVNT_WLAN_TX_COMPLETE)
    3438:	48 30       	cpi	r20, 0x08	; 8
    343a:	80 e8       	ldi	r24, 0x80	; 128
    343c:	58 07       	cpc	r21, r24
    343e:	80 e0       	ldi	r24, 0x00	; 0
    3440:	68 07       	cpc	r22, r24
    3442:	80 e0       	ldi	r24, 0x00	; 0
    3444:	78 07       	cpc	r23, r24
    3446:	29 f4       	brne	.+10     	; 0x3452 <wlan_set_event_mask+0x48>
    3448:	20 e0       	ldi	r18, 0x00	; 0
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	40 e0       	ldi	r20, 0x00	; 0
    344e:	50 e0       	ldi	r21, 0x00	; 0
    3450:	2a c0       	rjmp	.+84     	; 0x34a6 <wlan_set_event_mask+0x9c>
		{
			return 0;
		}

		ulMask &= ~HCI_EVNT_WLAN_TX_COMPLETE;
    3452:	47 7f       	andi	r20, 0xF7	; 247
    3454:	5f 77       	andi	r21, 0x7F	; 127
    3456:	60 70       	andi	r22, 0x00	; 0
    3458:	70 70       	andi	r23, 0x00	; 0
		ulMask |= HCI_EVNT_WLAN_UNSOL_BASE;
    345a:	50 68       	ori	r21, 0x80	; 128
    345c:	03 c0       	rjmp	.+6      	; 0x3464 <wlan_set_event_mask+0x5a>
	}
	else
	{
		tSLInformation.InformHostOnTxComplete = 1;
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	80 93 9a 02 	sts	0x029A, r24
	}

	ret = EFAIL;
    3464:	8f ef       	ldi	r24, 0xFF	; 255
    3466:	9f ef       	ldi	r25, 0xFF	; 255
    3468:	af ef       	ldi	r26, 0xFF	; 255
    346a:	bf ef       	ldi	r27, 0xFF	; 255
    346c:	89 83       	std	Y+1, r24	; 0x01
    346e:	9a 83       	std	Y+2, r25	; 0x02
    3470:	ab 83       	std	Y+3, r26	; 0x03
    3472:	bc 83       	std	Y+4, r27	; 0x04
	ptr = tSLInformation.pucTxCommandBuffer;
    3474:	00 91 74 02 	lds	r16, 0x0274
    3478:	10 91 75 02 	lds	r17, 0x0275
	args = (UINT8 *)(ptr + HEADERS_SIZE_CMD);

	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, ulMask);
    347c:	c8 01       	movw	r24, r16
    347e:	09 96       	adiw	r24, 0x09	; 9
    3480:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_EVENT_MASK,
		ptr, WLAN_SET_MASK_PARAMS_LEN);
    3484:	88 e0       	ldi	r24, 0x08	; 8
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	b8 01       	movw	r22, r16
    348a:	44 e0       	ldi	r20, 0x04	; 4
    348c:	0e 94 71 11 	call	0x22e2	; 0x22e2 <hci_command_send>

	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_CMND_EVENT_MASK, &ret);
    3490:	88 e0       	ldi	r24, 0x08	; 8
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	be 01       	movw	r22, r28
    3496:	6f 5f       	subi	r22, 0xFF	; 255
    3498:	7f 4f       	sbci	r23, 0xFF	; 255
    349a:	0e 94 3e 11 	call	0x227c	; 0x227c <SimpleLinkWaitEvent>

	return(ret);
    349e:	29 81       	ldd	r18, Y+1	; 0x01
    34a0:	3a 81       	ldd	r19, Y+2	; 0x02
    34a2:	4b 81       	ldd	r20, Y+3	; 0x03
    34a4:	5c 81       	ldd	r21, Y+4	; 0x04
}
    34a6:	b9 01       	movw	r22, r18
    34a8:	ca 01       	movw	r24, r20
    34aa:	0f 90       	pop	r0
    34ac:	0f 90       	pop	r0
    34ae:	0f 90       	pop	r0
    34b0:	0f 90       	pop	r0
    34b2:	cf 91       	pop	r28
    34b4:	df 91       	pop	r29
    34b6:	1f 91       	pop	r17
    34b8:	0f 91       	pop	r16
    34ba:	08 95       	ret

000034bc <wlan_ioctl_set_scan_params>:
	UINT32 uiMaxDwellTime,
	UINT32 uiNumOfProbeRequests,
	UINT32 uiChannelMask,INT32 iRSSIThreshold,
	UINT32 uiSNRThreshold,
	UINT32 uiDefaultTxPower,
	UINT32 *aiIntervalList)
    34bc:	2f 92       	push	r2
    34be:	3f 92       	push	r3
    34c0:	4f 92       	push	r4
    34c2:	5f 92       	push	r5
    34c4:	6f 92       	push	r6
    34c6:	7f 92       	push	r7
    34c8:	8f 92       	push	r8
    34ca:	9f 92       	push	r9
    34cc:	af 92       	push	r10
    34ce:	bf 92       	push	r11
    34d0:	cf 92       	push	r12
    34d2:	df 92       	push	r13
    34d4:	ef 92       	push	r14
    34d6:	ff 92       	push	r15
    34d8:	0f 93       	push	r16
    34da:	1f 93       	push	r17
    34dc:	df 93       	push	r29
    34de:	cf 93       	push	r28
    34e0:	cd b7       	in	r28, 0x3d	; 61
    34e2:	de b7       	in	r29, 0x3e	; 62
    34e4:	28 97       	sbiw	r28, 0x08	; 8
    34e6:	0f b6       	in	r0, 0x3f	; 63
    34e8:	f8 94       	cli
    34ea:	de bf       	out	0x3e, r29	; 62
    34ec:	0f be       	out	0x3f, r0	; 63
    34ee:	cd bf       	out	0x3d, r28	; 61
    34f0:	3b 01       	movw	r6, r22
    34f2:	4c 01       	movw	r8, r24
    34f4:	19 01       	movw	r2, r18
    34f6:	2a 01       	movw	r4, r20
    34f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    34fa:	8f 83       	std	Y+7, r24	; 0x07
    34fc:	9e a5       	ldd	r25, Y+46	; 0x2e
    34fe:	98 87       	std	Y+8, r25	; 0x08
{
	UINT32  uiRes;
	UINT8 *ptr;
	UINT8 *args;

	ptr = tSLInformation.pucTxCommandBuffer;
    3500:	80 91 74 02 	lds	r24, 0x0274
    3504:	90 91 75 02 	lds	r25, 0x0275
    3508:	9e 83       	std	Y+6, r25	; 0x06
    350a:	8d 83       	std	Y+5, r24	; 0x05
	args = (ptr + HEADERS_SIZE_CMD);

	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, 36);
    350c:	09 96       	adiw	r24, 0x09	; 9
    350e:	44 e2       	ldi	r20, 0x24	; 36
    3510:	50 e0       	ldi	r21, 0x00	; 0
    3512:	60 e0       	ldi	r22, 0x00	; 0
    3514:	70 e0       	ldi	r23, 0x00	; 0
    3516:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, uiEnable);
    351a:	b4 01       	movw	r22, r8
    351c:	a3 01       	movw	r20, r6
    351e:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, uiMinDwellTime);
    3522:	b2 01       	movw	r22, r4
    3524:	a1 01       	movw	r20, r2
    3526:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, uiMaxDwellTime);
    352a:	b8 01       	movw	r22, r16
    352c:	a7 01       	movw	r20, r14
    352e:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, uiNumOfProbeRequests);
    3532:	b6 01       	movw	r22, r12
    3534:	a5 01       	movw	r20, r10
    3536:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, uiChannelMask);
    353a:	4d 8d       	ldd	r20, Y+29	; 0x1d
    353c:	5e 8d       	ldd	r21, Y+30	; 0x1e
    353e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3540:	78 a1       	ldd	r23, Y+32	; 0x20
    3542:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, iRSSIThreshold);
    3546:	49 a1       	ldd	r20, Y+33	; 0x21
    3548:	5a a1       	ldd	r21, Y+34	; 0x22
    354a:	6b a1       	ldd	r22, Y+35	; 0x23
    354c:	7c a1       	ldd	r23, Y+36	; 0x24
    354e:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, uiSNRThreshold);
    3552:	4d a1       	ldd	r20, Y+37	; 0x25
    3554:	5e a1       	ldd	r21, Y+38	; 0x26
    3556:	6f a1       	ldd	r22, Y+39	; 0x27
    3558:	78 a5       	ldd	r23, Y+40	; 0x28
    355a:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, uiDefaultTxPower);
    355e:	49 a5       	ldd	r20, Y+41	; 0x29
    3560:	5a a5       	ldd	r21, Y+42	; 0x2a
    3562:	6b a5       	ldd	r22, Y+43	; 0x2b
    3564:	7c a5       	ldd	r23, Y+44	; 0x2c
    3566:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
    356a:	dc 01       	movw	r26, r24
    356c:	8f 81       	ldd	r24, Y+7	; 0x07
    356e:	98 85       	ldd	r25, Y+8	; 0x08
    3570:	fc 01       	movw	r30, r24
	ARRAY_TO_STREAM(args, aiIntervalList, sizeof(UINT32) * 
    3572:	9f 01       	movw	r18, r30
    3574:	20 5c       	subi	r18, 0xC0	; 192
    3576:	3f 4f       	sbci	r19, 0xFF	; 255
    3578:	02 c0       	rjmp	.+4      	; 0x357e <wlan_ioctl_set_scan_params+0xc2>
    357a:	81 91       	ld	r24, Z+
    357c:	8d 93       	st	X+, r24
    357e:	e2 17       	cp	r30, r18
    3580:	f3 07       	cpc	r31, r19
    3582:	d9 f7       	brne	.-10     	; 0x357a <wlan_ioctl_set_scan_params+0xbe>
		SL_SET_SCAN_PARAMS_INTERVAL_LIST_SIZE);

	// Initiate a HCI command
	hci_command_send(HCI_CMND_WLAN_IOCTL_SET_SCANPARAM,
		ptr, WLAN_SET_SCAN_PARAMS_LEN);
    3584:	83 e0       	ldi	r24, 0x03	; 3
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	6d 81       	ldd	r22, Y+5	; 0x05
    358a:	7e 81       	ldd	r23, Y+6	; 0x06
    358c:	44 e6       	ldi	r20, 0x64	; 100
    358e:	0e 94 71 11 	call	0x22e2	; 0x22e2 <hci_command_send>

	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_CMND_WLAN_IOCTL_SET_SCANPARAM, &uiRes);
    3592:	83 e0       	ldi	r24, 0x03	; 3
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	be 01       	movw	r22, r28
    3598:	6f 5f       	subi	r22, 0xFF	; 255
    359a:	7f 4f       	sbci	r23, 0xFF	; 255
    359c:	0e 94 3e 11 	call	0x227c	; 0x227c <SimpleLinkWaitEvent>
    35a0:	69 81       	ldd	r22, Y+1	; 0x01
    35a2:	7a 81       	ldd	r23, Y+2	; 0x02

	return(uiRes);
}
    35a4:	8b 81       	ldd	r24, Y+3	; 0x03
    35a6:	9c 81       	ldd	r25, Y+4	; 0x04
    35a8:	28 96       	adiw	r28, 0x08	; 8
    35aa:	0f b6       	in	r0, 0x3f	; 63
    35ac:	f8 94       	cli
    35ae:	de bf       	out	0x3e, r29	; 62
    35b0:	0f be       	out	0x3f, r0	; 63
    35b2:	cd bf       	out	0x3d, r28	; 61
    35b4:	cf 91       	pop	r28
    35b6:	df 91       	pop	r29
    35b8:	1f 91       	pop	r17
    35ba:	0f 91       	pop	r16
    35bc:	ff 90       	pop	r15
    35be:	ef 90       	pop	r14
    35c0:	df 90       	pop	r13
    35c2:	cf 90       	pop	r12
    35c4:	bf 90       	pop	r11
    35c6:	af 90       	pop	r10
    35c8:	9f 90       	pop	r9
    35ca:	8f 90       	pop	r8
    35cc:	7f 90       	pop	r7
    35ce:	6f 90       	pop	r6
    35d0:	5f 90       	pop	r5
    35d2:	4f 90       	pop	r4
    35d4:	3f 90       	pop	r3
    35d6:	2f 90       	pop	r2
    35d8:	08 95       	ret

000035da <wlan_ioctl_del_profile>:
//!
//!  @sa        wlan_add_profile 
//
//*****************************************************************************

INT32 wlan_ioctl_del_profile(UINT32 ulIndex)
    35da:	0f 93       	push	r16
    35dc:	1f 93       	push	r17
    35de:	df 93       	push	r29
    35e0:	cf 93       	push	r28
    35e2:	00 d0       	rcall	.+0      	; 0x35e4 <wlan_ioctl_del_profile+0xa>
    35e4:	00 d0       	rcall	.+0      	; 0x35e6 <wlan_ioctl_del_profile+0xc>
    35e6:	cd b7       	in	r28, 0x3d	; 61
    35e8:	de b7       	in	r29, 0x3e	; 62
    35ea:	ab 01       	movw	r20, r22
    35ec:	bc 01       	movw	r22, r24
{
	INT32 ret;
	UINT8 *ptr;
	UINT8 *args;

	ptr = tSLInformation.pucTxCommandBuffer;
    35ee:	00 91 74 02 	lds	r16, 0x0274
    35f2:	10 91 75 02 	lds	r17, 0x0275
	args = (UINT8 *)(ptr + HEADERS_SIZE_CMD);

	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, ulIndex);
    35f6:	c8 01       	movw	r24, r16
    35f8:	09 96       	adiw	r24, 0x09	; 9
    35fa:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	ret = EFAIL;
    35fe:	8f ef       	ldi	r24, 0xFF	; 255
    3600:	9f ef       	ldi	r25, 0xFF	; 255
    3602:	af ef       	ldi	r26, 0xFF	; 255
    3604:	bf ef       	ldi	r27, 0xFF	; 255
    3606:	89 83       	std	Y+1, r24	; 0x01
    3608:	9a 83       	std	Y+2, r25	; 0x02
    360a:	ab 83       	std	Y+3, r26	; 0x03
    360c:	bc 83       	std	Y+4, r27	; 0x04

	// Initiate a HCI command
	hci_command_send(HCI_CMND_WLAN_IOCTL_DEL_PROFILE,
		ptr, WLAN_DEL_PROFILE_PARAMS_LEN);
    360e:	86 e0       	ldi	r24, 0x06	; 6
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	b8 01       	movw	r22, r16
    3614:	44 e0       	ldi	r20, 0x04	; 4
    3616:	0e 94 71 11 	call	0x22e2	; 0x22e2 <hci_command_send>

	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_CMND_WLAN_IOCTL_DEL_PROFILE, &ret);
    361a:	86 e0       	ldi	r24, 0x06	; 6
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	be 01       	movw	r22, r28
    3620:	6f 5f       	subi	r22, 0xFF	; 255
    3622:	7f 4f       	sbci	r23, 0xFF	; 255
    3624:	0e 94 3e 11 	call	0x227c	; 0x227c <SimpleLinkWaitEvent>
    3628:	69 81       	ldd	r22, Y+1	; 0x01
    362a:	7a 81       	ldd	r23, Y+2	; 0x02

	return(ret);
}
    362c:	8b 81       	ldd	r24, Y+3	; 0x03
    362e:	9c 81       	ldd	r25, Y+4	; 0x04
    3630:	0f 90       	pop	r0
    3632:	0f 90       	pop	r0
    3634:	0f 90       	pop	r0
    3636:	0f 90       	pop	r0
    3638:	cf 91       	pop	r28
    363a:	df 91       	pop	r29
    363c:	1f 91       	pop	r17
    363e:	0f 91       	pop	r16
    3640:	08 95       	ret

00003642 <wlan_ioctl_set_connection_policy>:
//
//*****************************************************************************

INT32 wlan_ioctl_set_connection_policy(UINT32 should_connect_to_open_ap, 
	UINT32 ulShouldUseFastConnect,
	UINT32 ulUseProfiles)
    3642:	4f 92       	push	r4
    3644:	5f 92       	push	r5
    3646:	6f 92       	push	r6
    3648:	7f 92       	push	r7
    364a:	8f 92       	push	r8
    364c:	9f 92       	push	r9
    364e:	af 92       	push	r10
    3650:	bf 92       	push	r11
    3652:	cf 92       	push	r12
    3654:	df 92       	push	r13
    3656:	ef 92       	push	r14
    3658:	ff 92       	push	r15
    365a:	0f 93       	push	r16
    365c:	1f 93       	push	r17
    365e:	df 93       	push	r29
    3660:	cf 93       	push	r28
    3662:	00 d0       	rcall	.+0      	; 0x3664 <wlan_ioctl_set_connection_policy+0x22>
    3664:	00 d0       	rcall	.+0      	; 0x3666 <wlan_ioctl_set_connection_policy+0x24>
    3666:	cd b7       	in	r28, 0x3d	; 61
    3668:	de b7       	in	r29, 0x3e	; 62
    366a:	5b 01       	movw	r10, r22
    366c:	6c 01       	movw	r12, r24
    366e:	39 01       	movw	r6, r18
    3670:	4a 01       	movw	r8, r20
{
	INT32 ret;
	UINT8 *ptr;
	UINT8 *args;

	ret = EFAIL;
    3672:	8f ef       	ldi	r24, 0xFF	; 255
    3674:	9f ef       	ldi	r25, 0xFF	; 255
    3676:	af ef       	ldi	r26, 0xFF	; 255
    3678:	bf ef       	ldi	r27, 0xFF	; 255
    367a:	89 83       	std	Y+1, r24	; 0x01
    367c:	9a 83       	std	Y+2, r25	; 0x02
    367e:	ab 83       	std	Y+3, r26	; 0x03
    3680:	bc 83       	std	Y+4, r27	; 0x04
	ptr = tSLInformation.pucTxCommandBuffer;
    3682:	40 90 74 02 	lds	r4, 0x0274
    3686:	50 90 75 02 	lds	r5, 0x0275
	args = (UINT8 *)(ptr + HEADERS_SIZE_CMD);

	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, should_connect_to_open_ap);
    368a:	c2 01       	movw	r24, r4
    368c:	09 96       	adiw	r24, 0x09	; 9
    368e:	b6 01       	movw	r22, r12
    3690:	a5 01       	movw	r20, r10
    3692:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, ulShouldUseFastConnect);
    3696:	b4 01       	movw	r22, r8
    3698:	a3 01       	movw	r20, r6
    369a:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, ulUseProfiles);
    369e:	b8 01       	movw	r22, r16
    36a0:	a7 01       	movw	r20, r14
    36a2:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>

	// Initiate a HCI command
	hci_command_send(HCI_CMND_WLAN_IOCTL_SET_CONNECTION_POLICY,
		ptr, WLAN_SET_CONNECTION_POLICY_PARAMS_LEN);
    36a6:	84 e0       	ldi	r24, 0x04	; 4
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	b2 01       	movw	r22, r4
    36ac:	4c e0       	ldi	r20, 0x0C	; 12
    36ae:	0e 94 71 11 	call	0x22e2	; 0x22e2 <hci_command_send>

	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_CMND_WLAN_IOCTL_SET_CONNECTION_POLICY, &ret);
    36b2:	84 e0       	ldi	r24, 0x04	; 4
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	be 01       	movw	r22, r28
    36b8:	6f 5f       	subi	r22, 0xFF	; 255
    36ba:	7f 4f       	sbci	r23, 0xFF	; 255
    36bc:	0e 94 3e 11 	call	0x227c	; 0x227c <SimpleLinkWaitEvent>
    36c0:	69 81       	ldd	r22, Y+1	; 0x01
    36c2:	7a 81       	ldd	r23, Y+2	; 0x02

	return(ret);
}
    36c4:	8b 81       	ldd	r24, Y+3	; 0x03
    36c6:	9c 81       	ldd	r25, Y+4	; 0x04
    36c8:	0f 90       	pop	r0
    36ca:	0f 90       	pop	r0
    36cc:	0f 90       	pop	r0
    36ce:	0f 90       	pop	r0
    36d0:	cf 91       	pop	r28
    36d2:	df 91       	pop	r29
    36d4:	1f 91       	pop	r17
    36d6:	0f 91       	pop	r16
    36d8:	ff 90       	pop	r15
    36da:	ef 90       	pop	r14
    36dc:	df 90       	pop	r13
    36de:	cf 90       	pop	r12
    36e0:	bf 90       	pop	r11
    36e2:	af 90       	pop	r10
    36e4:	9f 90       	pop	r9
    36e6:	8f 90       	pop	r8
    36e8:	7f 90       	pop	r7
    36ea:	6f 90       	pop	r6
    36ec:	5f 90       	pop	r5
    36ee:	4f 90       	pop	r4
    36f0:	08 95       	ret

000036f2 <wlan_connect>:
// Adafruit CC3k Host Driver Difference
// Make ssid a const char pointer because it isn't modified and the Adafruit
// driver code needs it to be const to interface with Arduino's client library.
// Noted 12-12-2014 by tdicola
INT32 wlan_connect(UINT32 ulSecType, const CHAR *ssid, INT32 ssid_len,
	UINT8 *bssid, UINT8 *key, INT32 key_len)
    36f2:	2f 92       	push	r2
    36f4:	3f 92       	push	r3
    36f6:	4f 92       	push	r4
    36f8:	5f 92       	push	r5
    36fa:	6f 92       	push	r6
    36fc:	7f 92       	push	r7
    36fe:	8f 92       	push	r8
    3700:	9f 92       	push	r9
    3702:	af 92       	push	r10
    3704:	bf 92       	push	r11
    3706:	cf 92       	push	r12
    3708:	df 92       	push	r13
    370a:	ef 92       	push	r14
    370c:	ff 92       	push	r15
    370e:	0f 93       	push	r16
    3710:	1f 93       	push	r17
    3712:	df 93       	push	r29
    3714:	cf 93       	push	r28
    3716:	cd b7       	in	r28, 0x3d	; 61
    3718:	de b7       	in	r29, 0x3e	; 62
    371a:	60 97       	sbiw	r28, 0x10	; 16
    371c:	0f b6       	in	r0, 0x3f	; 63
    371e:	f8 94       	cli
    3720:	de bf       	out	0x3e, r29	; 62
    3722:	0f be       	out	0x3f, r0	; 63
    3724:	cd bf       	out	0x3d, r28	; 61
    3726:	2b 01       	movw	r4, r22
    3728:	3c 01       	movw	r6, r24
    372a:	5c 87       	std	Y+12, r21	; 0x0c
    372c:	4b 87       	std	Y+11, r20	; 0x0b
    372e:	0d 87       	std	Y+13, r16	; 0x0d
    3730:	1e 87       	std	Y+14, r17	; 0x0e
    3732:	2f 87       	std	Y+15, r18	; 0x0f
    3734:	38 8b       	std	Y+16, r19	; 0x10
    3736:	16 01       	movw	r2, r12
{
	INT32 ret;
	UINT8 *ptr;
	UINT8 *args;
	UINT8 bssid_zero[] = {0, 0, 0, 0, 0, 0};
    3738:	8e 01       	movw	r16, r28
    373a:	0b 5f       	subi	r16, 0xFB	; 251
    373c:	1f 4f       	sbci	r17, 0xFF	; 255
    373e:	86 e0       	ldi	r24, 0x06	; 6
    3740:	d8 01       	movw	r26, r16
    3742:	1d 92       	st	X+, r1
    3744:	8a 95       	dec	r24
    3746:	e9 f7       	brne	.-6      	; 0x3742 <wlan_connect+0x50>

	ret  	= EFAIL;
    3748:	8f ef       	ldi	r24, 0xFF	; 255
    374a:	9f ef       	ldi	r25, 0xFF	; 255
    374c:	af ef       	ldi	r26, 0xFF	; 255
    374e:	bf ef       	ldi	r27, 0xFF	; 255
    3750:	89 83       	std	Y+1, r24	; 0x01
    3752:	9a 83       	std	Y+2, r25	; 0x02
    3754:	ab 83       	std	Y+3, r26	; 0x03
    3756:	bc 83       	std	Y+4, r27	; 0x04
	ptr  	= tSLInformation.pucTxCommandBuffer;
    3758:	c0 90 74 02 	lds	r12, 0x0274
    375c:	d0 90 75 02 	lds	r13, 0x0275
	args 	= (ptr + HEADERS_SIZE_CMD);

	// Fill in command buffer
	args = UINT32_TO_STREAM(args, 0x0000001c);
    3760:	c6 01       	movw	r24, r12
    3762:	09 96       	adiw	r24, 0x09	; 9
    3764:	4c e1       	ldi	r20, 0x1C	; 28
    3766:	50 e0       	ldi	r21, 0x00	; 0
    3768:	60 e0       	ldi	r22, 0x00	; 0
    376a:	70 e0       	ldi	r23, 0x00	; 0
    376c:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, ssid_len);
    3770:	4d 85       	ldd	r20, Y+13	; 0x0d
    3772:	5e 85       	ldd	r21, Y+14	; 0x0e
    3774:	6f 85       	ldd	r22, Y+15	; 0x0f
    3776:	78 89       	ldd	r23, Y+16	; 0x10
    3778:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, ulSecType);
    377c:	b3 01       	movw	r22, r6
    377e:	a2 01       	movw	r20, r4
    3780:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, 0x00000010 + ssid_len);
    3784:	4d 85       	ldd	r20, Y+13	; 0x0d
    3786:	5e 85       	ldd	r21, Y+14	; 0x0e
    3788:	6f 85       	ldd	r22, Y+15	; 0x0f
    378a:	78 89       	ldd	r23, Y+16	; 0x10
    378c:	40 5f       	subi	r20, 0xF0	; 240
    378e:	5f 4f       	sbci	r21, 0xFF	; 255
    3790:	6f 4f       	sbci	r22, 0xFF	; 255
    3792:	7f 4f       	sbci	r23, 0xFF	; 255
    3794:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT32_TO_STREAM(args, key_len);
    3798:	b5 01       	movw	r22, r10
    379a:	a4 01       	movw	r20, r8
    379c:	0e 94 1f 0a 	call	0x143e	; 0x143e <UINT32_TO_STREAM_f>
	args = UINT16_TO_STREAM(args, 0);
    37a0:	60 e0       	ldi	r22, 0x00	; 0
    37a2:	70 e0       	ldi	r23, 0x00	; 0
    37a4:	0e 94 3b 0a 	call	0x1476	; 0x1476 <UINT16_TO_STREAM_f>
    37a8:	dc 01       	movw	r26, r24

	// padding shall be zeroed
	if(bssid)
    37aa:	e1 14       	cp	r14, r1
    37ac:	f1 04       	cpc	r15, r1
    37ae:	81 f0       	breq	.+32     	; 0x37d0 <wlan_connect+0xde>
    37b0:	ac 01       	movw	r20, r24
    37b2:	20 e0       	ldi	r18, 0x00	; 0
    37b4:	30 e0       	ldi	r19, 0x00	; 0
	{
		ARRAY_TO_STREAM(args, bssid, ETH_ALEN);
    37b6:	f7 01       	movw	r30, r14
    37b8:	e2 0f       	add	r30, r18
    37ba:	f3 1f       	adc	r31, r19
    37bc:	80 81       	ld	r24, Z
    37be:	fa 01       	movw	r30, r20
    37c0:	81 93       	st	Z+, r24
    37c2:	af 01       	movw	r20, r30
    37c4:	2f 5f       	subi	r18, 0xFF	; 255
    37c6:	3f 4f       	sbci	r19, 0xFF	; 255
    37c8:	26 30       	cpi	r18, 0x06	; 6
    37ca:	31 05       	cpc	r19, r1
    37cc:	a1 f7       	brne	.-24     	; 0x37b6 <wlan_connect+0xc4>
    37ce:	0e c0       	rjmp	.+28     	; 0x37ec <wlan_connect+0xfa>
    37d0:	b8 01       	movw	r22, r16
    37d2:	9c 01       	movw	r18, r24
	}
	else
	{
		ARRAY_TO_STREAM(args, bssid_zero, ETH_ALEN);
    37d4:	ae 01       	movw	r20, r28
    37d6:	45 5f       	subi	r20, 0xF5	; 245
    37d8:	5f 4f       	sbci	r21, 0xFF	; 255
    37da:	fb 01       	movw	r30, r22
    37dc:	81 91       	ld	r24, Z+
    37de:	bf 01       	movw	r22, r30
    37e0:	f9 01       	movw	r30, r18
    37e2:	81 93       	st	Z+, r24
    37e4:	9f 01       	movw	r18, r30
    37e6:	64 17       	cp	r22, r20
    37e8:	75 07       	cpc	r23, r21
    37ea:	b9 f7       	brne	.-18     	; 0x37da <wlan_connect+0xe8>
    37ec:	bd 01       	movw	r22, r26
    37ee:	6a 5f       	subi	r22, 0xFA	; 250
    37f0:	7f 4f       	sbci	r23, 0xFF	; 255
    37f2:	20 e0       	ldi	r18, 0x00	; 0
    37f4:	30 e0       	ldi	r19, 0x00	; 0
    37f6:	40 e0       	ldi	r20, 0x00	; 0
    37f8:	50 e0       	ldi	r21, 0x00	; 0
    37fa:	0c c0       	rjmp	.+24     	; 0x3814 <wlan_connect+0x122>
	}

	ARRAY_TO_STREAM(args, ssid, ssid_len);
    37fc:	eb 85       	ldd	r30, Y+11	; 0x0b
    37fe:	fc 85       	ldd	r31, Y+12	; 0x0c
    3800:	e2 0f       	add	r30, r18
    3802:	f3 1f       	adc	r31, r19
    3804:	80 81       	ld	r24, Z
    3806:	db 01       	movw	r26, r22
    3808:	8d 93       	st	X+, r24
    380a:	bd 01       	movw	r22, r26
    380c:	2f 5f       	subi	r18, 0xFF	; 255
    380e:	3f 4f       	sbci	r19, 0xFF	; 255
    3810:	4f 4f       	sbci	r20, 0xFF	; 255
    3812:	5f 4f       	sbci	r21, 0xFF	; 255
    3814:	8d 85       	ldd	r24, Y+13	; 0x0d
    3816:	9e 85       	ldd	r25, Y+14	; 0x0e
    3818:	af 85       	ldd	r26, Y+15	; 0x0f
    381a:	b8 89       	ldd	r27, Y+16	; 0x10
    381c:	28 17       	cp	r18, r24
    381e:	39 07       	cpc	r19, r25
    3820:	4a 07       	cpc	r20, r26
    3822:	5b 07       	cpc	r21, r27
    3824:	5c f3       	brlt	.-42     	; 0x37fc <wlan_connect+0x10a>

	if(key_len && key)
    3826:	81 14       	cp	r8, r1
    3828:	91 04       	cpc	r9, r1
    382a:	a1 04       	cpc	r10, r1
    382c:	b1 04       	cpc	r11, r1
    382e:	c9 f0       	breq	.+50     	; 0x3862 <wlan_connect+0x170>
    3830:	21 14       	cp	r2, r1
    3832:	31 04       	cpc	r3, r1
    3834:	b1 f0       	breq	.+44     	; 0x3862 <wlan_connect+0x170>
    3836:	20 e0       	ldi	r18, 0x00	; 0
    3838:	30 e0       	ldi	r19, 0x00	; 0
    383a:	40 e0       	ldi	r20, 0x00	; 0
    383c:	50 e0       	ldi	r21, 0x00	; 0
    383e:	0c c0       	rjmp	.+24     	; 0x3858 <wlan_connect+0x166>
// Adafruit CC3k Host Driver Difference
// Make ssid a const char pointer because it isn't modified and the Adafruit
// driver code needs it to be const to interface with Arduino's client library.
// Noted 12-12-2014 by tdicola
INT32 wlan_connect(UINT32 ulSecType, const CHAR *ssid, INT32 ssid_len,
	UINT8 *bssid, UINT8 *key, INT32 key_len)
    3840:	f9 01       	movw	r30, r18

	ARRAY_TO_STREAM(args, ssid, ssid_len);

	if(key_len && key)
	{
		ARRAY_TO_STREAM(args, key, key_len);
    3842:	db 01       	movw	r26, r22
    3844:	a2 0f       	add	r26, r18
    3846:	b3 1f       	adc	r27, r19
    3848:	e2 0d       	add	r30, r2
    384a:	f3 1d       	adc	r31, r3
    384c:	80 81       	ld	r24, Z
    384e:	8c 93       	st	X, r24
    3850:	2f 5f       	subi	r18, 0xFF	; 255
    3852:	3f 4f       	sbci	r19, 0xFF	; 255
    3854:	4f 4f       	sbci	r20, 0xFF	; 255
    3856:	5f 4f       	sbci	r21, 0xFF	; 255
    3858:	28 15       	cp	r18, r8
    385a:	39 05       	cpc	r19, r9
    385c:	4a 05       	cpc	r20, r10
    385e:	5b 05       	cpc	r21, r11
    3860:	7c f3       	brlt	.-34     	; 0x3840 <wlan_connect+0x14e>
	}

	// Initiate a HCI command
	hci_command_send(HCI_CMND_WLAN_CONNECT, ptr, WLAN_CONNECT_PARAM_LEN + 
		ssid_len + key_len - 1);
    3862:	4d 85       	ldd	r20, Y+13	; 0x0d
    3864:	44 5e       	subi	r20, 0xE4	; 228
    3866:	48 0d       	add	r20, r8
    3868:	81 e0       	ldi	r24, 0x01	; 1
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	b6 01       	movw	r22, r12
    386e:	0e 94 71 11 	call	0x22e2	; 0x22e2 <hci_command_send>

	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_CMND_WLAN_CONNECT, &ret);
    3872:	81 e0       	ldi	r24, 0x01	; 1
    3874:	90 e0       	ldi	r25, 0x00	; 0
    3876:	be 01       	movw	r22, r28
    3878:	6f 5f       	subi	r22, 0xFF	; 255
    387a:	7f 4f       	sbci	r23, 0xFF	; 255
    387c:	0e 94 3e 11 	call	0x227c	; 0x227c <SimpleLinkWaitEvent>
	errno = ret;
    3880:	69 81       	ldd	r22, Y+1	; 0x01
    3882:	7a 81       	ldd	r23, Y+2	; 0x02
    3884:	8b 81       	ldd	r24, Y+3	; 0x03
    3886:	9c 81       	ldd	r25, Y+4	; 0x04
    3888:	9b 01       	movw	r18, r22
    388a:	20 93 be 06 	sts	0x06BE, r18
    388e:	30 93 bf 06 	sts	0x06BF, r19

	return(ret);
}
    3892:	60 96       	adiw	r28, 0x10	; 16
    3894:	0f b6       	in	r0, 0x3f	; 63
    3896:	f8 94       	cli
    3898:	de bf       	out	0x3e, r29	; 62
    389a:	0f be       	out	0x3f, r0	; 63
    389c:	cd bf       	out	0x3d, r28	; 61
    389e:	cf 91       	pop	r28
    38a0:	df 91       	pop	r29
    38a2:	1f 91       	pop	r17
    38a4:	0f 91       	pop	r16
    38a6:	ff 90       	pop	r15
    38a8:	ef 90       	pop	r14
    38aa:	df 90       	pop	r13
    38ac:	cf 90       	pop	r12
    38ae:	bf 90       	pop	r11
    38b0:	af 90       	pop	r10
    38b2:	9f 90       	pop	r9
    38b4:	8f 90       	pop	r8
    38b6:	7f 90       	pop	r7
    38b8:	6f 90       	pop	r6
    38ba:	5f 90       	pop	r5
    38bc:	4f 90       	pop	r4
    38be:	3f 90       	pop	r3
    38c0:	2f 90       	pop	r2
    38c2:	08 95       	ret

000038c4 <wlan_start>:
//!  @sa            wlan_init , wlan_stop
//!
//
//*****************************************************************************

void wlan_start(UINT16 usPatchesAvailableAtHost)
    38c4:	ef 92       	push	r14
    38c6:	ff 92       	push	r15
    38c8:	0f 93       	push	r16
    38ca:	1f 93       	push	r17
    38cc:	cf 93       	push	r28
    38ce:	df 93       	push	r29
    38d0:	ec 01       	movw	r28, r24
{

	UINT32 ulSpiIRQState;

	tSLInformation.NumberOfSentPackets = 0;
    38d2:	10 92 92 02 	sts	0x0292, r1
    38d6:	10 92 93 02 	sts	0x0293, r1
    38da:	10 92 94 02 	sts	0x0294, r1
    38de:	10 92 95 02 	sts	0x0295, r1
	tSLInformation.NumberOfReleasedPackets = 0;
    38e2:	10 92 96 02 	sts	0x0296, r1
    38e6:	10 92 97 02 	sts	0x0297, r1
    38ea:	10 92 98 02 	sts	0x0298, r1
    38ee:	10 92 99 02 	sts	0x0299, r1
	tSLInformation.usRxEventOpcode = 0;
    38f2:	10 92 6f 02 	sts	0x026F, r1
    38f6:	10 92 6e 02 	sts	0x026E, r1
	tSLInformation.usNumberOfFreeBuffers = 0;
    38fa:	10 92 8b 02 	sts	0x028B, r1
    38fe:	10 92 8a 02 	sts	0x028A, r1
	tSLInformation.usSlBufferLength = 0;
    3902:	10 92 8d 02 	sts	0x028D, r1
    3906:	10 92 8c 02 	sts	0x028C, r1
	tSLInformation.usBufferSize = 0;
    390a:	10 92 8f 02 	sts	0x028F, r1
    390e:	10 92 8e 02 	sts	0x028E, r1
	tSLInformation.usRxDataPending = 0;
    3912:	10 92 91 02 	sts	0x0291, r1
    3916:	10 92 90 02 	sts	0x0290, r1
	tSLInformation.slTransmitDataError = 0;
    391a:	10 92 86 02 	sts	0x0286, r1
    391e:	10 92 87 02 	sts	0x0287, r1
    3922:	10 92 88 02 	sts	0x0288, r1
    3926:	10 92 89 02 	sts	0x0289, r1
	tSLInformation.usEventOrDataReceived = 0;
    392a:	10 92 71 02 	sts	0x0271, r1
    392e:	10 92 70 02 	sts	0x0270, r1
	tSLInformation.pucReceivedData = 0;
    3932:	10 92 73 02 	sts	0x0273, r1
    3936:	10 92 72 02 	sts	0x0272, r1

	// Allocate the memory for the RX/TX data transactions
	tSLInformation.pucTxCommandBuffer = (UINT8 *)wlan_tx_buffer;
    393a:	89 e7       	ldi	r24, 0x79	; 121
    393c:	93 e0       	ldi	r25, 0x03	; 3
    393e:	90 93 75 02 	sts	0x0275, r25
    3942:	80 93 74 02 	sts	0x0274, r24

	// init spi
	SpiOpen(SpiReceiveHandler);
    3946:	84 e0       	ldi	r24, 0x04	; 4
    3948:	9d e1       	ldi	r25, 0x1D	; 29
    394a:	0e 94 a5 2c 	call	0x594a	; 0x594a <_Z7SpiOpenPFvPvE>

	// Check the IRQ line
	ulSpiIRQState = tSLInformation.ReadWlanInterruptPin();
    394e:	e0 91 7e 02 	lds	r30, 0x027E
    3952:	f0 91 7f 02 	lds	r31, 0x027F
    3956:	09 95       	icall
    3958:	7b 01       	movw	r14, r22
    395a:	8c 01       	movw	r16, r24

	// Chip enable: toggle WLAN EN line
	tSLInformation.WriteWlanPin( WLAN_ENABLE );
    395c:	e0 91 84 02 	lds	r30, 0x0284
    3960:	f0 91 85 02 	lds	r31, 0x0285
    3964:	81 e0       	ldi	r24, 0x01	; 1
    3966:	09 95       	icall

	if (ulSpiIRQState)
    3968:	e1 14       	cp	r14, r1
    396a:	f1 04       	cpc	r15, r1
    396c:	01 05       	cpc	r16, r1
    396e:	11 05       	cpc	r17, r1
    3970:	59 f0       	breq	.+22     	; 0x3988 <wlan_start+0xc4>
	{
		// wait till the IRQ line goes low
		while(tSLInformation.ReadWlanInterruptPin() != 0)
    3972:	e0 91 7e 02 	lds	r30, 0x027E
    3976:	f0 91 7f 02 	lds	r31, 0x027F
    397a:	09 95       	icall
    397c:	61 15       	cp	r22, r1
    397e:	71 05       	cpc	r23, r1
    3980:	81 05       	cpc	r24, r1
    3982:	91 05       	cpc	r25, r1
    3984:	b1 f7       	brne	.-20     	; 0x3972 <wlan_start+0xae>
    3986:	14 c0       	rjmp	.+40     	; 0x39b0 <wlan_start+0xec>
		}
	}
	else
	{
		// wait till the IRQ line goes high and than low
		while(tSLInformation.ReadWlanInterruptPin() == 0)
    3988:	e0 91 7e 02 	lds	r30, 0x027E
    398c:	f0 91 7f 02 	lds	r31, 0x027F
    3990:	09 95       	icall
    3992:	61 15       	cp	r22, r1
    3994:	71 05       	cpc	r23, r1
    3996:	81 05       	cpc	r24, r1
    3998:	91 05       	cpc	r25, r1
    399a:	b1 f3       	breq	.-20     	; 0x3988 <wlan_start+0xc4>
		{
		}

		while(tSLInformation.ReadWlanInterruptPin() != 0)
    399c:	e0 91 7e 02 	lds	r30, 0x027E
    39a0:	f0 91 7f 02 	lds	r31, 0x027F
    39a4:	09 95       	icall
    39a6:	61 15       	cp	r22, r1
    39a8:	71 05       	cpc	r23, r1
    39aa:	81 05       	cpc	r24, r1
    39ac:	91 05       	cpc	r25, r1
    39ae:	b1 f7       	brne	.-20     	; 0x399c <wlan_start+0xd8>
static void SimpleLink_Init_Start(UINT16 usPatchesAvailableAtHost)
{
	UINT8 *ptr;
	UINT8 *args;

	ptr = tSLInformation.pucTxCommandBuffer;
    39b0:	e0 91 74 02 	lds	r30, 0x0274
    39b4:	f0 91 75 02 	lds	r31, 0x0275
	args = (UINT8 *)(ptr + HEADERS_SIZE_CMD);

	UINT8_TO_STREAM(args, ((usPatchesAvailableAtHost) ? SL_PATCHES_REQUEST_FORCE_NONE : SL_PATCHES_REQUEST_DEFAULT));
    39b8:	cd 2b       	or	r28, r29
    39ba:	11 f4       	brne	.+4      	; 0x39c0 <wlan_start+0xfc>
    39bc:	80 e0       	ldi	r24, 0x00	; 0
    39be:	01 c0       	rjmp	.+2      	; 0x39c2 <wlan_start+0xfe>
    39c0:	82 e0       	ldi	r24, 0x02	; 2
    39c2:	81 87       	std	Z+9, r24	; 0x09

	// IRQ Line asserted - send HCI_CMND_SIMPLE_LINK_START to CC3000
	hci_command_send(HCI_CMND_SIMPLE_LINK_START, ptr, WLAN_SL_INIT_START_PARAMS_LEN);
    39c4:	80 e0       	ldi	r24, 0x00	; 0
    39c6:	90 e4       	ldi	r25, 0x40	; 64
    39c8:	bf 01       	movw	r22, r30
    39ca:	41 e0       	ldi	r20, 0x01	; 1
    39cc:	0e 94 71 11 	call	0x22e2	; 0x22e2 <hci_command_send>

	SimpleLinkWaitEvent(HCI_CMND_SIMPLE_LINK_START, 0);
    39d0:	80 e0       	ldi	r24, 0x00	; 0
    39d2:	90 e4       	ldi	r25, 0x40	; 64
    39d4:	60 e0       	ldi	r22, 0x00	; 0
    39d6:	70 e0       	ldi	r23, 0x00	; 0
    39d8:	0e 94 3e 11 	call	0x227c	; 0x227c <SimpleLinkWaitEvent>
	DEBUGPRINT_F("SimpleLink start\n\r");
	SimpleLink_Init_Start(usPatchesAvailableAtHost);

	// Read Buffer's size and finish
	DEBUGPRINT_F("Read buffer\n\r");
	hci_command_send(HCI_CMND_READ_BUFFER_SIZE, tSLInformation.pucTxCommandBuffer, 0);
    39dc:	60 91 74 02 	lds	r22, 0x0274
    39e0:	70 91 75 02 	lds	r23, 0x0275
    39e4:	8b e0       	ldi	r24, 0x0B	; 11
    39e6:	90 e4       	ldi	r25, 0x40	; 64
    39e8:	40 e0       	ldi	r20, 0x00	; 0
    39ea:	0e 94 71 11 	call	0x22e2	; 0x22e2 <hci_command_send>
	SimpleLinkWaitEvent(HCI_CMND_READ_BUFFER_SIZE, 0);
    39ee:	8b e0       	ldi	r24, 0x0B	; 11
    39f0:	90 e4       	ldi	r25, 0x40	; 64
    39f2:	60 e0       	ldi	r22, 0x00	; 0
    39f4:	70 e0       	ldi	r23, 0x00	; 0
    39f6:	0e 94 3e 11 	call	0x227c	; 0x227c <SimpleLinkWaitEvent>
}
    39fa:	df 91       	pop	r29
    39fc:	cf 91       	pop	r28
    39fe:	1f 91       	pop	r17
    3a00:	0f 91       	pop	r16
    3a02:	ff 90       	pop	r15
    3a04:	ef 90       	pop	r14
    3a06:	08 95       	ret

00003a08 <_Z17SpiReceiveHandlerPv>:
//! 			          called from the SPI library to receive the data
//
//*****************************************************************************
void SpiReceiveHandler(void *pvBuffer)
{	
	tSLInformation.usEventOrDataReceived = 1;
    3a08:	21 e0       	ldi	r18, 0x01	; 1
    3a0a:	30 e0       	ldi	r19, 0x00	; 0
    3a0c:	30 93 71 02 	sts	0x0271, r19
    3a10:	20 93 70 02 	sts	0x0270, r18
	tSLInformation.pucReceivedData = (UINT8 *)pvBuffer;
    3a14:	90 93 73 02 	sts	0x0273, r25
    3a18:	80 93 72 02 	sts	0x0272, r24

	hci_unsolicited_event_handler();
    3a1c:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <hci_unsolicited_event_handler>
}
    3a20:	08 95       	ret

00003a22 <_ZN15Adafruit_CC3000C1EhhhhP5Print>:
            Note that by default this class will assume the first hardware 
            serial should be used for debug output.  This behavior can be
            changed by explicitly specifying a cc3kPrinter parameter.
*/
/**************************************************************************/
Adafruit_CC3000::Adafruit_CC3000(uint8_t csPin, uint8_t irqPin, uint8_t vbatPin, uint8_t SPIspeed, Print* cc3kPrinter)
    3a22:	ef 92       	push	r14
    3a24:	ff 92       	push	r15
    3a26:	0f 93       	push	r16
    3a28:	fc 01       	movw	r30, r24
{
  _initialised = false;
    3a2a:	10 82       	st	Z, r1
  g_csPin = csPin;
    3a2c:	60 93 9b 02 	sts	0x029B, r22
  g_irqPin = irqPin;
    3a30:	40 93 9c 02 	sts	0x029C, r20
  g_vbatPin = vbatPin;
    3a34:	20 93 9d 02 	sts	0x029D, r18
  g_IRQnum = 0xFF;
    3a38:	8f ef       	ldi	r24, 0xFF	; 255
    3a3a:	80 93 9e 02 	sts	0x029E, r24
  g_SPIspeed = SPIspeed;
    3a3e:	00 93 9f 02 	sts	0x029F, r16
  static const byte IsConnected = 0x02;
  static const byte HasDHCP = 0x04;
  static const byte OkToShutDown = 0x08;

  void clear() {
    flags = 0;
    3a42:	10 92 d5 02 	sts	0x02D5, r1
  g_IRQnum = 0xFF;
  g_SPIspeed = SPIspeed;

  cc3000Bitset.clear();

  CC3KPrinter = cc3kPrinter;
    3a46:	f0 92 d7 02 	sts	0x02D7, r15
    3a4a:	e0 92 d6 02 	sts	0x02D6, r14
}
    3a4e:	0f 91       	pop	r16
    3a50:	ff 90       	pop	r15
    3a52:	ef 90       	pop	r14
    3a54:	08 95       	ret

00003a56 <_ZN22Adafruit_CC3000_ClientC1Ev>:
  return Adafruit_CC3000_Client(udp_socket);
}


/**********************************************************************/
Adafruit_CC3000_Client::Adafruit_CC3000_Client(void) {
    3a56:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3a58:	13 82       	std	Z+3, r1	; 0x03
    3a5a:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    3a5c:	88 ee       	ldi	r24, 0xE8	; 232
    3a5e:	93 e0       	ldi	r25, 0x03	; 3
    3a60:	a0 e0       	ldi	r26, 0x00	; 0
    3a62:	b0 e0       	ldi	r27, 0x00	; 0
    3a64:	84 83       	std	Z+4, r24	; 0x04
    3a66:	95 83       	std	Z+5, r25	; 0x05
    3a68:	a6 83       	std	Z+6, r26	; 0x06
    3a6a:	b7 83       	std	Z+7, r27	; 0x07
    3a6c:	88 ed       	ldi	r24, 0xD8	; 216
    3a6e:	91 e0       	ldi	r25, 0x01	; 1
    3a70:	91 83       	std	Z+1, r25	; 0x01
    3a72:	80 83       	st	Z, r24
  _socket = -1;
    3a74:	e1 5b       	subi	r30, 0xB1	; 177
    3a76:	ff 4f       	sbci	r31, 0xFF	; 255
    3a78:	8f ef       	ldi	r24, 0xFF	; 255
    3a7a:	9f ef       	ldi	r25, 0xFF	; 255
    3a7c:	af ef       	ldi	r26, 0xFF	; 255
    3a7e:	bf ef       	ldi	r27, 0xFF	; 255
    3a80:	80 83       	st	Z, r24
    3a82:	91 83       	std	Z+1, r25	; 0x01
    3a84:	a2 83       	std	Z+2, r26	; 0x02
    3a86:	b3 83       	std	Z+3, r27	; 0x03
}
    3a88:	08 95       	ret

00003a8a <_ZN22Adafruit_CC3000_ClientC1El>:

Adafruit_CC3000_Client::Adafruit_CC3000_Client(int32_t s) {
    3a8a:	fc 01       	movw	r30, r24
    3a8c:	13 82       	std	Z+3, r1	; 0x03
    3a8e:	12 82       	std	Z+2, r1	; 0x02
    3a90:	88 ee       	ldi	r24, 0xE8	; 232
    3a92:	93 e0       	ldi	r25, 0x03	; 3
    3a94:	a0 e0       	ldi	r26, 0x00	; 0
    3a96:	b0 e0       	ldi	r27, 0x00	; 0
    3a98:	84 83       	std	Z+4, r24	; 0x04
    3a9a:	95 83       	std	Z+5, r25	; 0x05
    3a9c:	a6 83       	std	Z+6, r26	; 0x06
    3a9e:	b7 83       	std	Z+7, r27	; 0x07
    3aa0:	88 ed       	ldi	r24, 0xD8	; 216
    3aa2:	91 e0       	ldi	r25, 0x01	; 1
    3aa4:	91 83       	std	Z+1, r25	; 0x01
    3aa6:	80 83       	st	Z, r24
  _socket = s; 
    3aa8:	e1 5b       	subi	r30, 0xB1	; 177
    3aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    3aac:	40 83       	st	Z, r20
    3aae:	51 83       	std	Z+1, r21	; 0x01
    3ab0:	62 83       	std	Z+2, r22	; 0x02
    3ab2:	73 83       	std	Z+3, r23	; 0x03
  bufsiz = 0;
    3ab4:	12 92       	st	-Z, r1
    3ab6:	12 92       	st	-Z, r1
  _rx_buf_idx = 0;
    3ab8:	12 92       	st	-Z, r1
}
    3aba:	08 95       	ret

00003abc <_ZN22Adafruit_CC3000_ClientcvbEv>:
  bufsiz = other.bufsiz;
  _rx_buf_idx = other._rx_buf_idx;
  memcpy(_rx_buf, other._rx_buf, RXBUFFERSIZE);
}

Adafruit_CC3000_Client::operator bool()
    3abc:	fc 01       	movw	r30, r24
{
  return connected();
    3abe:	a0 81       	ld	r26, Z
    3ac0:	b1 81       	ldd	r27, Z+1	; 0x01
    3ac2:	54 96       	adiw	r26, 0x14	; 20
    3ac4:	2d 91       	ld	r18, X+
    3ac6:	3c 91       	ld	r19, X
    3ac8:	55 97       	sbiw	r26, 0x15	; 21
    3aca:	f9 01       	movw	r30, r18
    3acc:	09 95       	icall
    3ace:	81 11       	cpse	r24, r1
    3ad0:	81 e0       	ldi	r24, 0x01	; 1
}
    3ad2:	08 95       	ret

00003ad4 <_ZN22Adafruit_CC3000_Client5flushEv>:
  else return 0;  // no data is available
}

void Adafruit_CC3000_Client::flush(){
  // No flush implementation, unclear if necessary.
}
    3ad4:	08 95       	ret

00003ad6 <_GLOBAL__I_g_csPin>:
  return ret;
}

void Adafruit_CC3000::setPrinter(Print* p) {
  CC3KPrinter = p;
}
    3ad6:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    3ad8:	88 ed       	ldi	r24, 0xD8	; 216
    3ada:	92 e0       	ldi	r25, 0x02	; 2
    3adc:	60 e0       	ldi	r22, 0x00	; 0
    3ade:	40 e0       	ldi	r20, 0x00	; 0
    3ae0:	20 e0       	ldi	r18, 0x00	; 0
    3ae2:	00 e0       	ldi	r16, 0x00	; 0
    3ae4:	0e 94 2e 33 	call	0x665c	; 0x665c <_ZN9IPAddressC1Ehhhh>
    3ae8:	0f 91       	pop	r16
    3aea:	08 95       	ret

00003aec <_ZN22Adafruit_CC3000_Client4readEPhj>:
{
  return recv(_socket, buf, len, flags);

}

int Adafruit_CC3000_Client::read(uint8_t *buf, size_t len) 
    3aec:	cf 92       	push	r12
    3aee:	df 92       	push	r13
    3af0:	ef 92       	push	r14
    3af2:	ff 92       	push	r15
    3af4:	0f 93       	push	r16
    3af6:	1f 93       	push	r17
    3af8:	db 01       	movw	r26, r22
  return r;
}

int Adafruit_CC3000_Client::read(void *buf, uint16_t len, uint32_t flags) 
{
  return recv(_socket, buf, len, flags);
    3afa:	fc 01       	movw	r30, r24
    3afc:	e1 5b       	subi	r30, 0xB1	; 177
    3afe:	ff 4f       	sbci	r31, 0xFF	; 255
    3b00:	60 81       	ld	r22, Z
    3b02:	71 81       	ldd	r23, Z+1	; 0x01
    3b04:	82 81       	ldd	r24, Z+2	; 0x02
    3b06:	93 81       	ldd	r25, Z+3	; 0x03
    3b08:	8a 01       	movw	r16, r20
    3b0a:	20 e0       	ldi	r18, 0x00	; 0
    3b0c:	30 e0       	ldi	r19, 0x00	; 0
    3b0e:	ad 01       	movw	r20, r26
    3b10:	cc 24       	eor	r12, r12
    3b12:	dd 24       	eor	r13, r13
    3b14:	76 01       	movw	r14, r12
    3b16:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <recv>
}

int Adafruit_CC3000_Client::read(uint8_t *buf, size_t len) 
{
  return read(buf, len, 0);
}
    3b1a:	1f 91       	pop	r17
    3b1c:	0f 91       	pop	r16
    3b1e:	ff 90       	pop	r15
    3b20:	ef 90       	pop	r14
    3b22:	df 90       	pop	r13
    3b24:	cf 90       	pop	r12
    3b26:	08 95       	ret

00003b28 <_ZN22Adafruit_CC3000_Client9availableEv>:
  _rx_buf_idx++;
  //if (CC3KPrinter != 0) { CC3KPrinter->print("("); CC3KPrinter->write(ret); CC3KPrinter->print(")"); }
  return ret;
}

int Adafruit_CC3000_Client::available(void) {
    3b28:	8f 92       	push	r8
    3b2a:	9f 92       	push	r9
    3b2c:	af 92       	push	r10
    3b2e:	bf 92       	push	r11
    3b30:	cf 92       	push	r12
    3b32:	df 92       	push	r13
    3b34:	ef 92       	push	r14
    3b36:	ff 92       	push	r15
    3b38:	0f 93       	push	r16
    3b3a:	1f 93       	push	r17
    3b3c:	df 93       	push	r29
    3b3e:	cf 93       	push	r28
    3b40:	cd b7       	in	r28, 0x3d	; 61
    3b42:	de b7       	in	r29, 0x3e	; 62
    3b44:	2c 97       	sbiw	r28, 0x0c	; 12
    3b46:	0f b6       	in	r0, 0x3f	; 63
    3b48:	f8 94       	cli
    3b4a:	de bf       	out	0x3e, r29	; 62
    3b4c:	0f be       	out	0x3f, r0	; 63
    3b4e:	cd bf       	out	0x3d, r28	; 61
    3b50:	fc 01       	movw	r30, r24
  // not open!
  if (_socket < 0) return 0;
    3b52:	e1 5b       	subi	r30, 0xB1	; 177
    3b54:	ff 4f       	sbci	r31, 0xFF	; 255
    3b56:	80 81       	ld	r24, Z
    3b58:	91 81       	ldd	r25, Z+1	; 0x01
    3b5a:	a2 81       	ldd	r26, Z+2	; 0x02
    3b5c:	b3 81       	ldd	r27, Z+3	; 0x03
    3b5e:	ef 54       	subi	r30, 0x4F	; 79
    3b60:	f0 40       	sbci	r31, 0x00	; 0
    3b62:	b7 ff       	sbrs	r27, 7
    3b64:	03 c0       	rjmp	.+6      	; 0x3b6c <_ZN22Adafruit_CC3000_Client9availableEv+0x44>
    3b66:	20 e0       	ldi	r18, 0x00	; 0
    3b68:	30 e0       	ldi	r19, 0x00	; 0
    3b6a:	82 c0       	rjmp	.+260    	; 0x3c70 <_ZN22Adafruit_CC3000_Client9availableEv+0x148>

  if ((bufsiz > 0) // we have some data in the internal buffer
    3b6c:	e3 5b       	subi	r30, 0xB3	; 179
    3b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b70:	20 81       	ld	r18, Z
    3b72:	31 81       	ldd	r19, Z+1	; 0x01
    3b74:	ed 54       	subi	r30, 0x4D	; 77
    3b76:	f0 40       	sbci	r31, 0x00	; 0
    3b78:	12 16       	cp	r1, r18
    3b7a:	13 06       	cpc	r1, r19
    3b7c:	64 f4       	brge	.+24     	; 0x3b96 <_ZN22Adafruit_CC3000_Client9availableEv+0x6e>
    3b7e:	e4 5b       	subi	r30, 0xB4	; 180
    3b80:	ff 4f       	sbci	r31, 0xFF	; 255
    3b82:	80 81       	ld	r24, Z
    3b84:	ec 54       	subi	r30, 0x4C	; 76
    3b86:	f0 40       	sbci	r31, 0x00	; 0
    3b88:	90 e0       	ldi	r25, 0x00	; 0
    3b8a:	82 17       	cp	r24, r18
    3b8c:	93 07       	cpc	r25, r19
    3b8e:	1c f4       	brge	.+6      	; 0x3b96 <_ZN22Adafruit_CC3000_Client9availableEv+0x6e>
      && (_rx_buf_idx < bufsiz)) {  // we havent already spit it all out
    return (bufsiz - _rx_buf_idx);
    3b90:	28 1b       	sub	r18, r24
    3b92:	39 0b       	sbc	r19, r25
    3b94:	6d c0       	rjmp	.+218    	; 0x3c70 <_ZN22Adafruit_CC3000_Client9availableEv+0x148>

  // do a select() call on this socket
  timeval timeout;
  fd_set fd_read;

  memset(&fd_read, 0, sizeof(fd_read));
    3b96:	19 82       	std	Y+1, r1	; 0x01
    3b98:	1a 82       	std	Y+2, r1	; 0x02
    3b9a:	1b 82       	std	Y+3, r1	; 0x03
    3b9c:	1c 82       	std	Y+4, r1	; 0x04
  FD_SET(_socket, &fd_read);
    3b9e:	e1 5b       	subi	r30, 0xB1	; 177
    3ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba2:	c0 80       	ld	r12, Z
    3ba4:	d1 80       	ldd	r13, Z+1	; 0x01
    3ba6:	e2 80       	ldd	r14, Z+2	; 0x02
    3ba8:	f3 80       	ldd	r15, Z+3	; 0x03
    3baa:	c7 01       	movw	r24, r14
    3bac:	b6 01       	movw	r22, r12
    3bae:	20 e2       	ldi	r18, 0x20	; 32
    3bb0:	30 e0       	ldi	r19, 0x00	; 0
    3bb2:	40 e0       	ldi	r20, 0x00	; 0
    3bb4:	50 e0       	ldi	r21, 0x00	; 0
    3bb6:	0e 94 17 38 	call	0x702e	; 0x702e <__divmodsi4>
    3bba:	92 2e       	mov	r9, r18
    3bbc:	83 2e       	mov	r8, r19
    3bbe:	02 2f       	mov	r16, r18
    3bc0:	13 2f       	mov	r17, r19
    3bc2:	00 0f       	add	r16, r16
    3bc4:	11 1f       	adc	r17, r17
    3bc6:	00 0f       	add	r16, r16
    3bc8:	11 1f       	adc	r17, r17
    3bca:	5e 01       	movw	r10, r28
    3bcc:	08 94       	sec
    3bce:	a1 1c       	adc	r10, r1
    3bd0:	b1 1c       	adc	r11, r1
    3bd2:	0a 0d       	add	r16, r10
    3bd4:	1b 1d       	adc	r17, r11
    3bd6:	c7 01       	movw	r24, r14
    3bd8:	b6 01       	movw	r22, r12
    3bda:	20 e2       	ldi	r18, 0x20	; 32
    3bdc:	30 e0       	ldi	r19, 0x00	; 0
    3bde:	40 e0       	ldi	r20, 0x00	; 0
    3be0:	50 e0       	ldi	r21, 0x00	; 0
    3be2:	0e 94 17 38 	call	0x702e	; 0x702e <__divmodsi4>
    3be6:	21 e0       	ldi	r18, 0x01	; 1
    3be8:	30 e0       	ldi	r19, 0x00	; 0
    3bea:	40 e0       	ldi	r20, 0x00	; 0
    3bec:	50 e0       	ldi	r21, 0x00	; 0
    3bee:	04 c0       	rjmp	.+8      	; 0x3bf8 <_ZN22Adafruit_CC3000_Client9availableEv+0xd0>
    3bf0:	22 0f       	add	r18, r18
    3bf2:	33 1f       	adc	r19, r19
    3bf4:	44 1f       	adc	r20, r20
    3bf6:	55 1f       	adc	r21, r21
    3bf8:	6a 95       	dec	r22
    3bfa:	d2 f7       	brpl	.-12     	; 0x3bf0 <_ZN22Adafruit_CC3000_Client9availableEv+0xc8>
    3bfc:	e9 2d       	mov	r30, r9
    3bfe:	f8 2d       	mov	r31, r8
    3c00:	ee 0f       	add	r30, r30
    3c02:	ff 1f       	adc	r31, r31
    3c04:	ee 0f       	add	r30, r30
    3c06:	ff 1f       	adc	r31, r31
    3c08:	ea 0d       	add	r30, r10
    3c0a:	fb 1d       	adc	r31, r11
    3c0c:	80 81       	ld	r24, Z
    3c0e:	91 81       	ldd	r25, Z+1	; 0x01
    3c10:	a2 81       	ldd	r26, Z+2	; 0x02
    3c12:	b3 81       	ldd	r27, Z+3	; 0x03
    3c14:	28 2b       	or	r18, r24
    3c16:	39 2b       	or	r19, r25
    3c18:	4a 2b       	or	r20, r26
    3c1a:	5b 2b       	or	r21, r27
    3c1c:	f8 01       	movw	r30, r16
    3c1e:	20 83       	st	Z, r18
    3c20:	31 83       	std	Z+1, r19	; 0x01
    3c22:	42 83       	std	Z+2, r20	; 0x02
    3c24:	53 83       	std	Z+3, r21	; 0x03

  timeout.tv_sec = 0;
    3c26:	1d 82       	std	Y+5, r1	; 0x05
    3c28:	1e 82       	std	Y+6, r1	; 0x06
    3c2a:	1f 82       	std	Y+7, r1	; 0x07
    3c2c:	18 86       	std	Y+8, r1	; 0x08
  timeout.tv_usec = 5000; // 5 millisec
    3c2e:	88 e8       	ldi	r24, 0x88	; 136
    3c30:	93 e1       	ldi	r25, 0x13	; 19
    3c32:	a0 e0       	ldi	r26, 0x00	; 0
    3c34:	b0 e0       	ldi	r27, 0x00	; 0
    3c36:	89 87       	std	Y+9, r24	; 0x09
    3c38:	9a 87       	std	Y+10, r25	; 0x0a
    3c3a:	ab 87       	std	Y+11, r26	; 0x0b
    3c3c:	bc 87       	std	Y+12, r27	; 0x0c

  int16_t s = select(_socket+1, &fd_read, NULL, NULL, &timeout);
    3c3e:	08 94       	sec
    3c40:	c1 1c       	adc	r12, r1
    3c42:	d1 1c       	adc	r13, r1
    3c44:	e1 1c       	adc	r14, r1
    3c46:	f1 1c       	adc	r15, r1
    3c48:	c7 01       	movw	r24, r14
    3c4a:	b6 01       	movw	r22, r12
    3c4c:	a5 01       	movw	r20, r10
    3c4e:	20 e0       	ldi	r18, 0x00	; 0
    3c50:	30 e0       	ldi	r19, 0x00	; 0
    3c52:	00 e0       	ldi	r16, 0x00	; 0
    3c54:	10 e0       	ldi	r17, 0x00	; 0
    3c56:	e5 e0       	ldi	r30, 0x05	; 5
    3c58:	ee 2e       	mov	r14, r30
    3c5a:	f1 2c       	mov	r15, r1
    3c5c:	ec 0e       	add	r14, r28
    3c5e:	fd 1e       	adc	r15, r29
    3c60:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <select>
    3c64:	20 e0       	ldi	r18, 0x00	; 0
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	01 97       	sbiw	r24, 0x01	; 1
    3c6a:	11 f4       	brne	.+4      	; 0x3c70 <_ZN22Adafruit_CC3000_Client9availableEv+0x148>
    3c6c:	21 e0       	ldi	r18, 0x01	; 1
    3c6e:	30 e0       	ldi	r19, 0x00	; 0
  //if (CC3KPrinter != 0) } CC3KPrinter->print(F("Select: ")); CC3KPrinter->println(s); }
  if (s == 1) return 1;  // some data is available to read
  else return 0;  // no data is available
}
    3c70:	c9 01       	movw	r24, r18
    3c72:	2c 96       	adiw	r28, 0x0c	; 12
    3c74:	0f b6       	in	r0, 0x3f	; 63
    3c76:	f8 94       	cli
    3c78:	de bf       	out	0x3e, r29	; 62
    3c7a:	0f be       	out	0x3f, r0	; 63
    3c7c:	cd bf       	out	0x3d, r28	; 61
    3c7e:	cf 91       	pop	r28
    3c80:	df 91       	pop	r29
    3c82:	1f 91       	pop	r17
    3c84:	0f 91       	pop	r16
    3c86:	ff 90       	pop	r15
    3c88:	ef 90       	pop	r14
    3c8a:	df 90       	pop	r13
    3c8c:	cf 90       	pop	r12
    3c8e:	bf 90       	pop	r11
    3c90:	af 90       	pop	r10
    3c92:	9f 90       	pop	r9
    3c94:	8f 90       	pop	r8
    3c96:	08 95       	ret

00003c98 <_ZN22Adafruit_CC3000_Client5closeEv>:
int Adafruit_CC3000_Client::read(uint8_t *buf, size_t len) 
{
  return read(buf, len, 0);
}

int32_t Adafruit_CC3000_Client::close(void) {
    3c98:	0f 93       	push	r16
    3c9a:	1f 93       	push	r17
  int32_t x = closesocket(_socket);
    3c9c:	8c 01       	movw	r16, r24
    3c9e:	01 5b       	subi	r16, 0xB1	; 177
    3ca0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ca2:	f8 01       	movw	r30, r16
    3ca4:	60 81       	ld	r22, Z
    3ca6:	71 81       	ldd	r23, Z+1	; 0x01
    3ca8:	82 81       	ldd	r24, Z+2	; 0x02
    3caa:	93 81       	ldd	r25, Z+3	; 0x03
    3cac:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <closesocket>
  _socket = -1;
    3cb0:	2f ef       	ldi	r18, 0xFF	; 255
    3cb2:	3f ef       	ldi	r19, 0xFF	; 255
    3cb4:	4f ef       	ldi	r20, 0xFF	; 255
    3cb6:	5f ef       	ldi	r21, 0xFF	; 255
    3cb8:	f8 01       	movw	r30, r16
    3cba:	20 83       	st	Z, r18
    3cbc:	31 83       	std	Z+1, r19	; 0x01
    3cbe:	42 83       	std	Z+2, r20	; 0x02
    3cc0:	53 83       	std	Z+3, r21	; 0x03
  return x;
}
    3cc2:	1f 91       	pop	r17
    3cc4:	0f 91       	pop	r16
    3cc6:	08 95       	ret

00003cc8 <_ZN22Adafruit_CC3000_Client4peekEv>:

void Adafruit_CC3000_Client::flush(){
  // No flush implementation, unclear if necessary.
}

int Adafruit_CC3000_Client::peek(){
    3cc8:	4f 92       	push	r4
    3cca:	5f 92       	push	r5
    3ccc:	6f 92       	push	r6
    3cce:	7f 92       	push	r7
    3cd0:	8f 92       	push	r8
    3cd2:	9f 92       	push	r9
    3cd4:	af 92       	push	r10
    3cd6:	bf 92       	push	r11
    3cd8:	cf 92       	push	r12
    3cda:	df 92       	push	r13
    3cdc:	ef 92       	push	r14
    3cde:	ff 92       	push	r15
    3ce0:	0f 93       	push	r16
    3ce2:	1f 93       	push	r17
    3ce4:	cf 93       	push	r28
    3ce6:	df 93       	push	r29
    3ce8:	ec 01       	movw	r28, r24
  while ((bufsiz <= 0) || (bufsiz == _rx_buf_idx)) {
    cc3k_int_poll();
    // buffer in some more data
    bufsiz = recv(_socket, _rx_buf, sizeof(_rx_buf), 0);
    3cea:	9c e0       	ldi	r25, 0x0C	; 12
    3cec:	49 2e       	mov	r4, r25
    3cee:	51 2c       	mov	r5, r1
    3cf0:	4c 0e       	add	r4, r28
    3cf2:	5d 1e       	adc	r5, r29
void Adafruit_CC3000_Client::flush(){
  // No flush implementation, unclear if necessary.
}

int Adafruit_CC3000_Client::peek(){
  while ((bufsiz <= 0) || (bufsiz == _rx_buf_idx)) {
    3cf4:	8d e4       	ldi	r24, 0x4D	; 77
    3cf6:	88 2e       	mov	r8, r24
    3cf8:	91 2c       	mov	r9, r1
    3cfa:	8c 0e       	add	r8, r28
    3cfc:	9d 1e       	adc	r9, r29
    3cfe:	0c e4       	ldi	r16, 0x4C	; 76
    3d00:	a0 2e       	mov	r10, r16
    3d02:	b1 2c       	mov	r11, r1
    3d04:	ac 0e       	add	r10, r28
    3d06:	bd 1e       	adc	r11, r29
    cc3k_int_poll();
    // buffer in some more data
    bufsiz = recv(_socket, _rx_buf, sizeof(_rx_buf), 0);
    3d08:	1f e4       	ldi	r17, 0x4F	; 79
    3d0a:	61 2e       	mov	r6, r17
    3d0c:	71 2c       	mov	r7, r1
    3d0e:	6c 0e       	add	r6, r28
    3d10:	7d 1e       	adc	r7, r29
    3d12:	1f c0       	rjmp	.+62     	; 0x3d52 <_ZN22Adafruit_CC3000_Client4peekEv+0x8a>
  // No flush implementation, unclear if necessary.
}

int Adafruit_CC3000_Client::peek(){
  while ((bufsiz <= 0) || (bufsiz == _rx_buf_idx)) {
    cc3k_int_poll();
    3d14:	0e 94 0a 2b 	call	0x5614	; 0x5614 <cc3k_int_poll>
    // buffer in some more data
    bufsiz = recv(_socket, _rx_buf, sizeof(_rx_buf), 0);
    3d18:	f3 01       	movw	r30, r6
    3d1a:	60 81       	ld	r22, Z
    3d1c:	71 81       	ldd	r23, Z+1	; 0x01
    3d1e:	82 81       	ldd	r24, Z+2	; 0x02
    3d20:	93 81       	ldd	r25, Z+3	; 0x03
    3d22:	a2 01       	movw	r20, r4
    3d24:	00 e4       	ldi	r16, 0x40	; 64
    3d26:	10 e0       	ldi	r17, 0x00	; 0
    3d28:	20 e0       	ldi	r18, 0x00	; 0
    3d2a:	30 e0       	ldi	r19, 0x00	; 0
    3d2c:	cc 24       	eor	r12, r12
    3d2e:	dd 24       	eor	r13, r13
    3d30:	76 01       	movw	r14, r12
    3d32:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <recv>
    3d36:	f4 01       	movw	r30, r8
    3d38:	91 83       	std	Z+1, r25	; 0x01
    3d3a:	80 83       	st	Z, r24
    if (bufsiz == -57) {
    3d3c:	87 5c       	subi	r24, 0xC7	; 199
    3d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d40:	31 f4       	brne	.+12     	; 0x3d4e <_ZN22Adafruit_CC3000_Client4peekEv+0x86>
      close();
    3d42:	ce 01       	movw	r24, r28
    3d44:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <_ZN22Adafruit_CC3000_Client5closeEv>
    3d48:	20 e0       	ldi	r18, 0x00	; 0
    3d4a:	30 e0       	ldi	r19, 0x00	; 0
    3d4c:	14 c0       	rjmp	.+40     	; 0x3d76 <_ZN22Adafruit_CC3000_Client4peekEv+0xae>
      return 0;
    }
    //if (CC3KPrinter != 0) { CC3KPrinter->println("Read "); CC3KPrinter->print(bufsiz); CC3KPrinter->println(" bytes"); }
    _rx_buf_idx = 0;
    3d4e:	f5 01       	movw	r30, r10
    3d50:	10 82       	st	Z, r1
void Adafruit_CC3000_Client::flush(){
  // No flush implementation, unclear if necessary.
}

int Adafruit_CC3000_Client::peek(){
  while ((bufsiz <= 0) || (bufsiz == _rx_buf_idx)) {
    3d52:	f4 01       	movw	r30, r8
    3d54:	20 81       	ld	r18, Z
    3d56:	31 81       	ldd	r19, Z+1	; 0x01
    3d58:	12 16       	cp	r1, r18
    3d5a:	13 06       	cpc	r1, r19
    3d5c:	dc f6       	brge	.-74     	; 0x3d14 <_ZN22Adafruit_CC3000_Client4peekEv+0x4c>
    3d5e:	f5 01       	movw	r30, r10
    3d60:	80 81       	ld	r24, Z
    3d62:	e8 2f       	mov	r30, r24
    3d64:	f0 e0       	ldi	r31, 0x00	; 0
    3d66:	2e 17       	cp	r18, r30
    3d68:	3f 07       	cpc	r19, r31
    3d6a:	a1 f2       	breq	.-88     	; 0x3d14 <_ZN22Adafruit_CC3000_Client4peekEv+0x4c>
    _rx_buf_idx = 0;
  }
  uint8_t ret = _rx_buf[_rx_buf_idx];

  //if (CC3KPrinter != 0) { CC3KPrinter->print("("); CC3KPrinter->write(ret); CC3KPrinter->print(")"); }
  return ret;
    3d6c:	ec 0f       	add	r30, r28
    3d6e:	fd 1f       	adc	r31, r29
    3d70:	84 85       	ldd	r24, Z+12	; 0x0c
    3d72:	28 2f       	mov	r18, r24
    3d74:	30 e0       	ldi	r19, 0x00	; 0
}
    3d76:	c9 01       	movw	r24, r18
    3d78:	df 91       	pop	r29
    3d7a:	cf 91       	pop	r28
    3d7c:	1f 91       	pop	r17
    3d7e:	0f 91       	pop	r16
    3d80:	ff 90       	pop	r15
    3d82:	ef 90       	pop	r14
    3d84:	df 90       	pop	r13
    3d86:	cf 90       	pop	r12
    3d88:	bf 90       	pop	r11
    3d8a:	af 90       	pop	r10
    3d8c:	9f 90       	pop	r9
    3d8e:	8f 90       	pop	r8
    3d90:	7f 90       	pop	r7
    3d92:	6f 90       	pop	r6
    3d94:	5f 90       	pop	r5
    3d96:	4f 90       	pop	r4
    3d98:	08 95       	ret

00003d9a <_ZN22Adafruit_CC3000_Client4readEv>:

void Adafruit_CC3000_Client::stop(){
  close();
}

int Adafruit_CC3000_Client::read(void) 
    3d9a:	4f 92       	push	r4
    3d9c:	5f 92       	push	r5
    3d9e:	6f 92       	push	r6
    3da0:	7f 92       	push	r7
    3da2:	8f 92       	push	r8
    3da4:	9f 92       	push	r9
    3da6:	af 92       	push	r10
    3da8:	bf 92       	push	r11
    3daa:	cf 92       	push	r12
    3dac:	df 92       	push	r13
    3dae:	ef 92       	push	r14
    3db0:	ff 92       	push	r15
    3db2:	0f 93       	push	r16
    3db4:	1f 93       	push	r17
    3db6:	cf 93       	push	r28
    3db8:	df 93       	push	r29
    3dba:	ec 01       	movw	r28, r24
{
  while ((bufsiz <= 0) || (bufsiz == _rx_buf_idx)) {
    cc3k_int_poll();
    // buffer in some more data
    bufsiz = recv(_socket, _rx_buf, sizeof(_rx_buf), 0);
    3dbc:	5c e0       	ldi	r21, 0x0C	; 12
    3dbe:	45 2e       	mov	r4, r21
    3dc0:	51 2c       	mov	r5, r1
    3dc2:	48 0e       	add	r4, r24
    3dc4:	59 1e       	adc	r5, r25
  close();
}

int Adafruit_CC3000_Client::read(void) 
{
  while ((bufsiz <= 0) || (bufsiz == _rx_buf_idx)) {
    3dc6:	4d e4       	ldi	r20, 0x4D	; 77
    3dc8:	84 2e       	mov	r8, r20
    3dca:	91 2c       	mov	r9, r1
    3dcc:	88 0e       	add	r8, r24
    3dce:	99 1e       	adc	r9, r25
    3dd0:	3c e4       	ldi	r19, 0x4C	; 76
    3dd2:	a3 2e       	mov	r10, r19
    3dd4:	b1 2c       	mov	r11, r1
    3dd6:	a8 0e       	add	r10, r24
    3dd8:	b9 1e       	adc	r11, r25
    cc3k_int_poll();
    // buffer in some more data
    bufsiz = recv(_socket, _rx_buf, sizeof(_rx_buf), 0);
    3dda:	2f e4       	ldi	r18, 0x4F	; 79
    3ddc:	62 2e       	mov	r6, r18
    3dde:	71 2c       	mov	r7, r1
    3de0:	68 0e       	add	r6, r24
    3de2:	79 1e       	adc	r7, r25
    3de4:	1f c0       	rjmp	.+62     	; 0x3e24 <_ZN22Adafruit_CC3000_Client4readEv+0x8a>
}

int Adafruit_CC3000_Client::read(void) 
{
  while ((bufsiz <= 0) || (bufsiz == _rx_buf_idx)) {
    cc3k_int_poll();
    3de6:	0e 94 0a 2b 	call	0x5614	; 0x5614 <cc3k_int_poll>
    // buffer in some more data
    bufsiz = recv(_socket, _rx_buf, sizeof(_rx_buf), 0);
    3dea:	f3 01       	movw	r30, r6
    3dec:	60 81       	ld	r22, Z
    3dee:	71 81       	ldd	r23, Z+1	; 0x01
    3df0:	82 81       	ldd	r24, Z+2	; 0x02
    3df2:	93 81       	ldd	r25, Z+3	; 0x03
    3df4:	a2 01       	movw	r20, r4
    3df6:	00 e4       	ldi	r16, 0x40	; 64
    3df8:	10 e0       	ldi	r17, 0x00	; 0
    3dfa:	20 e0       	ldi	r18, 0x00	; 0
    3dfc:	30 e0       	ldi	r19, 0x00	; 0
    3dfe:	cc 24       	eor	r12, r12
    3e00:	dd 24       	eor	r13, r13
    3e02:	76 01       	movw	r14, r12
    3e04:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <recv>
    3e08:	f4 01       	movw	r30, r8
    3e0a:	91 83       	std	Z+1, r25	; 0x01
    3e0c:	80 83       	st	Z, r24
    if (bufsiz == -57) {
    3e0e:	87 5c       	subi	r24, 0xC7	; 199
    3e10:	9f 4f       	sbci	r25, 0xFF	; 255
    3e12:	31 f4       	brne	.+12     	; 0x3e20 <_ZN22Adafruit_CC3000_Client4readEv+0x86>
      close();
    3e14:	ce 01       	movw	r24, r28
    3e16:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <_ZN22Adafruit_CC3000_Client5closeEv>
    3e1a:	20 e0       	ldi	r18, 0x00	; 0
    3e1c:	30 e0       	ldi	r19, 0x00	; 0
    3e1e:	17 c0       	rjmp	.+46     	; 0x3e4e <_ZN22Adafruit_CC3000_Client4readEv+0xb4>
      return 0;
    }
    //if (CC3KPrinter != 0) { CC3KPrinter->println("Read "); CC3KPrinter->print(bufsiz); CC3KPrinter->println(" bytes"); }
    _rx_buf_idx = 0;
    3e20:	f5 01       	movw	r30, r10
    3e22:	10 82       	st	Z, r1
  close();
}

int Adafruit_CC3000_Client::read(void) 
{
  while ((bufsiz <= 0) || (bufsiz == _rx_buf_idx)) {
    3e24:	f4 01       	movw	r30, r8
    3e26:	80 81       	ld	r24, Z
    3e28:	91 81       	ldd	r25, Z+1	; 0x01
    3e2a:	18 16       	cp	r1, r24
    3e2c:	19 06       	cpc	r1, r25
    3e2e:	dc f6       	brge	.-74     	; 0x3de6 <_ZN22Adafruit_CC3000_Client4readEv+0x4c>
    3e30:	f5 01       	movw	r30, r10
    3e32:	20 81       	ld	r18, Z
    3e34:	e2 2f       	mov	r30, r18
    3e36:	f0 e0       	ldi	r31, 0x00	; 0
    3e38:	8e 17       	cp	r24, r30
    3e3a:	9f 07       	cpc	r25, r31
    3e3c:	a1 f2       	breq	.-88     	; 0x3de6 <_ZN22Adafruit_CC3000_Client4readEv+0x4c>
      return 0;
    }
    //if (CC3KPrinter != 0) { CC3KPrinter->println("Read "); CC3KPrinter->print(bufsiz); CC3KPrinter->println(" bytes"); }
    _rx_buf_idx = 0;
  }
  uint8_t ret = _rx_buf[_rx_buf_idx];
    3e3e:	ec 0f       	add	r30, r28
    3e40:	fd 1f       	adc	r31, r29
    3e42:	84 85       	ldd	r24, Z+12	; 0x0c
  _rx_buf_idx++;
    3e44:	2f 5f       	subi	r18, 0xFF	; 255
    3e46:	f5 01       	movw	r30, r10
    3e48:	20 83       	st	Z, r18
  //if (CC3KPrinter != 0) { CC3KPrinter->print("("); CC3KPrinter->write(ret); CC3KPrinter->print(")"); }
  return ret;
    3e4a:	28 2f       	mov	r18, r24
    3e4c:	30 e0       	ldi	r19, 0x00	; 0
}
    3e4e:	c9 01       	movw	r24, r18
    3e50:	df 91       	pop	r29
    3e52:	cf 91       	pop	r28
    3e54:	1f 91       	pop	r17
    3e56:	0f 91       	pop	r16
    3e58:	ff 90       	pop	r15
    3e5a:	ef 90       	pop	r14
    3e5c:	df 90       	pop	r13
    3e5e:	cf 90       	pop	r12
    3e60:	bf 90       	pop	r11
    3e62:	af 90       	pop	r10
    3e64:	9f 90       	pop	r9
    3e66:	8f 90       	pop	r8
    3e68:	7f 90       	pop	r7
    3e6a:	6f 90       	pop	r6
    3e6c:	5f 90       	pop	r5
    3e6e:	4f 90       	pop	r4
    3e70:	08 95       	ret

00003e72 <_ZN22Adafruit_CC3000_Client4stopEv>:
  _socket = -1;
  return x;
}

void Adafruit_CC3000_Client::stop(){
  close();
    3e72:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <_ZN22Adafruit_CC3000_Client5closeEv>
}
    3e76:	08 95       	ret

00003e78 <_ZN22Adafruit_CC3000_Client9connectedEv>:

  _socket = tcp_socket;
  return 1;
}

uint8_t Adafruit_CC3000_Client::connected(void) { 
    3e78:	0f 93       	push	r16
    3e7a:	1f 93       	push	r17
    3e7c:	cf 93       	push	r28
    3e7e:	df 93       	push	r29
    3e80:	ec 01       	movw	r28, r24
  if (_socket < 0) return false;
    3e82:	8c 01       	movw	r16, r24
    3e84:	01 5b       	subi	r16, 0xB1	; 177
    3e86:	1f 4f       	sbci	r17, 0xFF	; 255
    3e88:	f8 01       	movw	r30, r16
    3e8a:	80 81       	ld	r24, Z
    3e8c:	91 81       	ldd	r25, Z+1	; 0x01
    3e8e:	a2 81       	ldd	r26, Z+2	; 0x02
    3e90:	b3 81       	ldd	r27, Z+3	; 0x03
    3e92:	b7 fd       	sbrc	r27, 7
    3e94:	27 c0       	rjmp	.+78     	; 0x3ee4 <_ZN22Adafruit_CC3000_Client9connectedEv+0x6c>

  if (! available() && closed_sockets[_socket] == true) {
    3e96:	e8 81       	ld	r30, Y
    3e98:	f9 81       	ldd	r31, Y+1	; 0x01
    3e9a:	04 80       	ldd	r0, Z+4	; 0x04
    3e9c:	f5 81       	ldd	r31, Z+5	; 0x05
    3e9e:	e0 2d       	mov	r30, r0
    3ea0:	ce 01       	movw	r24, r28
    3ea2:	09 95       	icall
    3ea4:	89 2b       	or	r24, r25
    3ea6:	01 f5       	brne	.+64     	; 0x3ee8 <_ZN22Adafruit_CC3000_Client9connectedEv+0x70>
    3ea8:	d8 01       	movw	r26, r16
    3eaa:	2d 91       	ld	r18, X+
    3eac:	3d 91       	ld	r19, X+
    3eae:	4d 91       	ld	r20, X+
    3eb0:	5c 91       	ld	r21, X
    3eb2:	f9 01       	movw	r30, r18
    3eb4:	eb 54       	subi	r30, 0x4B	; 75
    3eb6:	fd 4f       	sbci	r31, 0xFD	; 253
    3eb8:	80 81       	ld	r24, Z
    3eba:	81 30       	cpi	r24, 0x01	; 1
    3ebc:	a9 f4       	brne	.+42     	; 0x3ee8 <_ZN22Adafruit_CC3000_Client9connectedEv+0x70>
    //if (CC3KPrinter != 0) CC3KPrinter->println("No more data, and closed!");
    closesocket(_socket);
    3ebe:	ca 01       	movw	r24, r20
    3ec0:	b9 01       	movw	r22, r18
    3ec2:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <closesocket>
    closed_sockets[_socket] = false;
    3ec6:	d8 01       	movw	r26, r16
    3ec8:	ed 91       	ld	r30, X+
    3eca:	fc 91       	ld	r31, X
    3ecc:	eb 54       	subi	r30, 0x4B	; 75
    3ece:	fd 4f       	sbci	r31, 0xFD	; 253
    3ed0:	10 82       	st	Z, r1
    _socket = -1;
    3ed2:	8f ef       	ldi	r24, 0xFF	; 255
    3ed4:	9f ef       	ldi	r25, 0xFF	; 255
    3ed6:	af ef       	ldi	r26, 0xFF	; 255
    3ed8:	bf ef       	ldi	r27, 0xFF	; 255
    3eda:	f8 01       	movw	r30, r16
    3edc:	80 83       	st	Z, r24
    3ede:	91 83       	std	Z+1, r25	; 0x01
    3ee0:	a2 83       	std	Z+2, r26	; 0x02
    3ee2:	b3 83       	std	Z+3, r27	; 0x03
    3ee4:	80 e0       	ldi	r24, 0x00	; 0
    3ee6:	01 c0       	rjmp	.+2      	; 0x3eea <_ZN22Adafruit_CC3000_Client9connectedEv+0x72>
    return false;
    3ee8:	81 e0       	ldi	r24, 0x01	; 1
  }

  else return true;  
}
    3eea:	df 91       	pop	r29
    3eec:	cf 91       	pop	r28
    3eee:	1f 91       	pop	r17
    3ef0:	0f 91       	pop	r16
    3ef2:	08 95       	ret

00003ef4 <_ZN22Adafruit_CC3000_Client10fastrprintEPK19__FlashStringHelper>:
  r = send(_socket, &c, 1, 0);
  if ( r < 0 ) return 0;
  return r;
}

size_t Adafruit_CC3000_Client::fastrprint(const __FlashStringHelper *ifsh)
    3ef4:	2f 92       	push	r2
    3ef6:	3f 92       	push	r3
    3ef8:	4f 92       	push	r4
    3efa:	5f 92       	push	r5
    3efc:	6f 92       	push	r6
    3efe:	7f 92       	push	r7
    3f00:	8f 92       	push	r8
    3f02:	9f 92       	push	r9
    3f04:	af 92       	push	r10
    3f06:	bf 92       	push	r11
    3f08:	cf 92       	push	r12
    3f0a:	df 92       	push	r13
    3f0c:	ef 92       	push	r14
    3f0e:	ff 92       	push	r15
    3f10:	0f 93       	push	r16
    3f12:	1f 93       	push	r17
    3f14:	df 93       	push	r29
    3f16:	cf 93       	push	r28
    3f18:	cd b7       	in	r28, 0x3d	; 61
    3f1a:	de b7       	in	r29, 0x3e	; 62
    3f1c:	a0 97       	sbiw	r28, 0x20	; 32
    3f1e:	0f b6       	in	r0, 0x3f	; 63
    3f20:	f8 94       	cli
    3f22:	de bf       	out	0x3e, r29	; 62
    3f24:	0f be       	out	0x3f, r0	; 63
    3f26:	cd bf       	out	0x3d, r28	; 61
    3f28:	3c 01       	movw	r6, r24
{
  char _tx_buf[TXBUFFERSIZE];
  uint8_t idx = 0;

  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    3f2a:	4b 01       	movw	r8, r22
    3f2c:	00 e0       	ldi	r16, 0x00	; 0
    3f2e:	aa 24       	eor	r10, r10
    3f30:	bb 24       	eor	r11, r11
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    if (c == 0) break;
    _tx_buf[idx] = c;
    3f32:	1e 01       	movw	r2, r28
    3f34:	08 94       	sec
    3f36:	21 1c       	adc	r2, r1
    3f38:	31 1c       	adc	r3, r1
    idx++;
    if (idx >= TXBUFFERSIZE) {
      // lets send it!
      n += send(_socket, _tx_buf, TXBUFFERSIZE, 0);
    3f3a:	6f e4       	ldi	r22, 0x4F	; 79
    3f3c:	46 2e       	mov	r4, r22
    3f3e:	51 2c       	mov	r5, r1
    3f40:	46 0c       	add	r4, r6
    3f42:	57 1c       	adc	r5, r7
size_t Adafruit_CC3000_Client::fastrprint(const __FlashStringHelper *ifsh)
{
  char _tx_buf[TXBUFFERSIZE];
  uint8_t idx = 0;

  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    3f44:	f4 01       	movw	r30, r8
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    3f46:	08 94       	sec
    3f48:	81 1c       	adc	r8, r1
    3f4a:	91 1c       	adc	r9, r1
    3f4c:	84 91       	lpm	r24, Z+
    if (c == 0) break;
    3f4e:	88 23       	and	r24, r24
    3f50:	d1 f0       	breq	.+52     	; 0x3f86 <_ZN22Adafruit_CC3000_Client10fastrprintEPK19__FlashStringHelper+0x92>
    _tx_buf[idx] = c;
    3f52:	f1 01       	movw	r30, r2
    3f54:	e0 0f       	add	r30, r16
    3f56:	f1 1d       	adc	r31, r1
    3f58:	80 83       	st	Z, r24
    idx++;
    3f5a:	0f 5f       	subi	r16, 0xFF	; 255
    if (idx >= TXBUFFERSIZE) {
    3f5c:	00 32       	cpi	r16, 0x20	; 32
    3f5e:	90 f3       	brcs	.-28     	; 0x3f44 <_ZN22Adafruit_CC3000_Client10fastrprintEPK19__FlashStringHelper+0x50>
      // lets send it!
      n += send(_socket, _tx_buf, TXBUFFERSIZE, 0);
    3f60:	f2 01       	movw	r30, r4
    3f62:	60 81       	ld	r22, Z
    3f64:	71 81       	ldd	r23, Z+1	; 0x01
    3f66:	82 81       	ldd	r24, Z+2	; 0x02
    3f68:	93 81       	ldd	r25, Z+3	; 0x03
    3f6a:	a1 01       	movw	r20, r2
    3f6c:	00 e2       	ldi	r16, 0x20	; 32
    3f6e:	10 e0       	ldi	r17, 0x00	; 0
    3f70:	20 e0       	ldi	r18, 0x00	; 0
    3f72:	30 e0       	ldi	r19, 0x00	; 0
    3f74:	cc 24       	eor	r12, r12
    3f76:	dd 24       	eor	r13, r13
    3f78:	76 01       	movw	r14, r12
    3f7a:	0e 94 9a 19 	call	0x3334	; 0x3334 <send>
    3f7e:	a8 0e       	add	r10, r24
    3f80:	b9 1e       	adc	r11, r25
    3f82:	00 e0       	ldi	r16, 0x00	; 0
    3f84:	df cf       	rjmp	.-66     	; 0x3f44 <_ZN22Adafruit_CC3000_Client10fastrprintEPK19__FlashStringHelper+0x50>
      idx = 0;
    }
  }
  if (idx > 0) {
    3f86:	00 23       	and	r16, r16
    3f88:	b1 f0       	breq	.+44     	; 0x3fb6 <_ZN22Adafruit_CC3000_Client10fastrprintEPK19__FlashStringHelper+0xc2>
    // Send any remaining data in the transmit buffer.
    n += send(_socket, _tx_buf, idx, 0);
    3f8a:	8f e4       	ldi	r24, 0x4F	; 79
    3f8c:	90 e0       	ldi	r25, 0x00	; 0
    3f8e:	68 0e       	add	r6, r24
    3f90:	79 1e       	adc	r7, r25
    3f92:	f3 01       	movw	r30, r6
    3f94:	60 81       	ld	r22, Z
    3f96:	71 81       	ldd	r23, Z+1	; 0x01
    3f98:	82 81       	ldd	r24, Z+2	; 0x02
    3f9a:	93 81       	ldd	r25, Z+3	; 0x03
    3f9c:	10 e0       	ldi	r17, 0x00	; 0
    3f9e:	20 e0       	ldi	r18, 0x00	; 0
    3fa0:	30 e0       	ldi	r19, 0x00	; 0
    3fa2:	ae 01       	movw	r20, r28
    3fa4:	4f 5f       	subi	r20, 0xFF	; 255
    3fa6:	5f 4f       	sbci	r21, 0xFF	; 255
    3fa8:	cc 24       	eor	r12, r12
    3faa:	dd 24       	eor	r13, r13
    3fac:	76 01       	movw	r14, r12
    3fae:	0e 94 9a 19 	call	0x3334	; 0x3334 <send>
    3fb2:	a8 0e       	add	r10, r24
    3fb4:	b9 1e       	adc	r11, r25
  }

  return n;
}
    3fb6:	c5 01       	movw	r24, r10
    3fb8:	a0 96       	adiw	r28, 0x20	; 32
    3fba:	0f b6       	in	r0, 0x3f	; 63
    3fbc:	f8 94       	cli
    3fbe:	de bf       	out	0x3e, r29	; 62
    3fc0:	0f be       	out	0x3f, r0	; 63
    3fc2:	cd bf       	out	0x3d, r28	; 61
    3fc4:	cf 91       	pop	r28
    3fc6:	df 91       	pop	r29
    3fc8:	1f 91       	pop	r17
    3fca:	0f 91       	pop	r16
    3fcc:	ff 90       	pop	r15
    3fce:	ef 90       	pop	r14
    3fd0:	df 90       	pop	r13
    3fd2:	cf 90       	pop	r12
    3fd4:	bf 90       	pop	r11
    3fd6:	af 90       	pop	r10
    3fd8:	9f 90       	pop	r9
    3fda:	8f 90       	pop	r8
    3fdc:	7f 90       	pop	r7
    3fde:	6f 90       	pop	r6
    3fe0:	5f 90       	pop	r5
    3fe2:	4f 90       	pop	r4
    3fe4:	3f 90       	pop	r3
    3fe6:	2f 90       	pop	r2
    3fe8:	08 95       	ret

00003fea <_ZN22Adafruit_CC3000_Client12fastrprintlnEPK19__FlashStringHelper>:

size_t Adafruit_CC3000_Client::fastrprintln(const __FlashStringHelper *ifsh)
    3fea:	ef 92       	push	r14
    3fec:	ff 92       	push	r15
    3fee:	0f 93       	push	r16
    3ff0:	1f 93       	push	r17
    3ff2:	8c 01       	movw	r16, r24
{
  size_t r = 0;
  r = fastrprint(ifsh);
    3ff4:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <_ZN22Adafruit_CC3000_Client10fastrprintEPK19__FlashStringHelper>
    3ff8:	7c 01       	movw	r14, r24
  r+= fastrprint(F("\r\n"));
    3ffa:	c8 01       	movw	r24, r16
    3ffc:	6b e6       	ldi	r22, 0x6B	; 107
    3ffe:	70 e0       	ldi	r23, 0x00	; 0
    4000:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <_ZN22Adafruit_CC3000_Client10fastrprintEPK19__FlashStringHelper>
    4004:	9c 01       	movw	r18, r24
    4006:	2e 0d       	add	r18, r14
    4008:	3f 1d       	adc	r19, r15
  return r;
}
    400a:	c9 01       	movw	r24, r18
    400c:	1f 91       	pop	r17
    400e:	0f 91       	pop	r16
    4010:	ff 90       	pop	r15
    4012:	ef 90       	pop	r14
    4014:	08 95       	ret

00004016 <_ZN22Adafruit_CC3000_Client5writeEh>:
size_t Adafruit_CC3000_Client::write(const uint8_t *buf, size_t len)
{
  return write(buf, len, 0);
}

size_t Adafruit_CC3000_Client::write(uint8_t c)
    4016:	cf 92       	push	r12
    4018:	df 92       	push	r13
    401a:	ef 92       	push	r14
    401c:	ff 92       	push	r15
    401e:	0f 93       	push	r16
    4020:	1f 93       	push	r17
    4022:	df 93       	push	r29
    4024:	cf 93       	push	r28
    4026:	0f 92       	push	r0
    4028:	cd b7       	in	r28, 0x3d	; 61
    402a:	de b7       	in	r29, 0x3e	; 62
    402c:	69 83       	std	Y+1, r22	; 0x01
{
  int32_t r;
  r = send(_socket, &c, 1, 0);
    402e:	fc 01       	movw	r30, r24
    4030:	e1 5b       	subi	r30, 0xB1	; 177
    4032:	ff 4f       	sbci	r31, 0xFF	; 255
    4034:	60 81       	ld	r22, Z
    4036:	71 81       	ldd	r23, Z+1	; 0x01
    4038:	82 81       	ldd	r24, Z+2	; 0x02
    403a:	93 81       	ldd	r25, Z+3	; 0x03
    403c:	ae 01       	movw	r20, r28
    403e:	4f 5f       	subi	r20, 0xFF	; 255
    4040:	5f 4f       	sbci	r21, 0xFF	; 255
    4042:	01 e0       	ldi	r16, 0x01	; 1
    4044:	10 e0       	ldi	r17, 0x00	; 0
    4046:	20 e0       	ldi	r18, 0x00	; 0
    4048:	30 e0       	ldi	r19, 0x00	; 0
    404a:	cc 24       	eor	r12, r12
    404c:	dd 24       	eor	r13, r13
    404e:	76 01       	movw	r14, r12
    4050:	0e 94 9a 19 	call	0x3334	; 0x3334 <send>
    4054:	9c 01       	movw	r18, r24
    4056:	44 27       	eor	r20, r20
    4058:	37 fd       	sbrc	r19, 7
    405a:	40 95       	com	r20
    405c:	54 2f       	mov	r21, r20
  if ( r < 0 ) return 0;
    405e:	57 ff       	sbrs	r21, 7
    4060:	02 c0       	rjmp	.+4      	; 0x4066 <_ZN22Adafruit_CC3000_Client5writeEh+0x50>
    4062:	20 e0       	ldi	r18, 0x00	; 0
    4064:	30 e0       	ldi	r19, 0x00	; 0
  return r;
}
    4066:	c9 01       	movw	r24, r18
    4068:	0f 90       	pop	r0
    406a:	cf 91       	pop	r28
    406c:	df 91       	pop	r29
    406e:	1f 91       	pop	r17
    4070:	0f 91       	pop	r16
    4072:	ff 90       	pop	r15
    4074:	ef 90       	pop	r14
    4076:	df 90       	pop	r13
    4078:	cf 90       	pop	r12
    407a:	08 95       	ret

0000407c <_ZN22Adafruit_CC3000_Client10fastrprintEPc>:
  else {
    return 0;
  }
}

size_t Adafruit_CC3000_Client::fastrprint(char *str)
    407c:	cf 92       	push	r12
    407e:	df 92       	push	r13
    4080:	ef 92       	push	r14
    4082:	ff 92       	push	r15
    4084:	0f 93       	push	r16
    4086:	1f 93       	push	r17
    4088:	cf 93       	push	r28
    408a:	df 93       	push	r29
    408c:	ec 01       	movw	r28, r24
    408e:	ab 01       	movw	r20, r22
{
  size_t len = strlen(str);
    4090:	db 01       	movw	r26, r22
    4092:	0d 90       	ld	r0, X+
    4094:	00 20       	and	r0, r0
    4096:	e9 f7       	brne	.-6      	; 0x4092 <_ZN22Adafruit_CC3000_Client10fastrprintEPc+0x16>
    4098:	11 97       	sbiw	r26, 0x01	; 1
    409a:	a6 1b       	sub	r26, r22
    409c:	b7 0b       	sbc	r27, r23
  if (len > 0) {
    409e:	19 f4       	brne	.+6      	; 0x40a6 <_ZN22Adafruit_CC3000_Client10fastrprintEPc+0x2a>
    40a0:	20 e0       	ldi	r18, 0x00	; 0
    40a2:	30 e0       	ldi	r19, 0x00	; 0
    40a4:	0f c0       	rjmp	.+30     	; 0x40c4 <_ZN22Adafruit_CC3000_Client10fastrprintEPc+0x48>
  else return true;  
}

size_t Adafruit_CC3000_Client::write(const void *buf, uint16_t len, uint32_t flags)
{
  return send(_socket, buf, len, flags);
    40a6:	c1 5b       	subi	r28, 0xB1	; 177
    40a8:	df 4f       	sbci	r29, 0xFF	; 255
    40aa:	68 81       	ld	r22, Y
    40ac:	79 81       	ldd	r23, Y+1	; 0x01
    40ae:	8a 81       	ldd	r24, Y+2	; 0x02
    40b0:	9b 81       	ldd	r25, Y+3	; 0x03
    40b2:	8d 01       	movw	r16, r26
    40b4:	20 e0       	ldi	r18, 0x00	; 0
    40b6:	30 e0       	ldi	r19, 0x00	; 0
    40b8:	cc 24       	eor	r12, r12
    40ba:	dd 24       	eor	r13, r13
    40bc:	76 01       	movw	r14, r12
    40be:	0e 94 9a 19 	call	0x3334	; 0x3334 <send>
    40c2:	9c 01       	movw	r18, r24
    return write(str, len, 0);
  }
  else {
    return 0;
  }
}
    40c4:	c9 01       	movw	r24, r18
    40c6:	df 91       	pop	r29
    40c8:	cf 91       	pop	r28
    40ca:	1f 91       	pop	r17
    40cc:	0f 91       	pop	r16
    40ce:	ff 90       	pop	r15
    40d0:	ef 90       	pop	r14
    40d2:	df 90       	pop	r13
    40d4:	cf 90       	pop	r12
    40d6:	08 95       	ret

000040d8 <_ZN22Adafruit_CC3000_Client5writeEPKhj>:
size_t Adafruit_CC3000_Client::write(const void *buf, uint16_t len, uint32_t flags)
{
  return send(_socket, buf, len, flags);
}

size_t Adafruit_CC3000_Client::write(const uint8_t *buf, size_t len)
    40d8:	cf 92       	push	r12
    40da:	df 92       	push	r13
    40dc:	ef 92       	push	r14
    40de:	ff 92       	push	r15
    40e0:	0f 93       	push	r16
    40e2:	1f 93       	push	r17
    40e4:	db 01       	movw	r26, r22
  else return true;  
}

size_t Adafruit_CC3000_Client::write(const void *buf, uint16_t len, uint32_t flags)
{
  return send(_socket, buf, len, flags);
    40e6:	fc 01       	movw	r30, r24
    40e8:	e1 5b       	subi	r30, 0xB1	; 177
    40ea:	ff 4f       	sbci	r31, 0xFF	; 255
    40ec:	60 81       	ld	r22, Z
    40ee:	71 81       	ldd	r23, Z+1	; 0x01
    40f0:	82 81       	ldd	r24, Z+2	; 0x02
    40f2:	93 81       	ldd	r25, Z+3	; 0x03
    40f4:	8a 01       	movw	r16, r20
    40f6:	20 e0       	ldi	r18, 0x00	; 0
    40f8:	30 e0       	ldi	r19, 0x00	; 0
    40fa:	ad 01       	movw	r20, r26
    40fc:	cc 24       	eor	r12, r12
    40fe:	dd 24       	eor	r13, r13
    4100:	76 01       	movw	r14, r12
    4102:	0e 94 9a 19 	call	0x3334	; 0x3334 <send>
}

size_t Adafruit_CC3000_Client::write(const uint8_t *buf, size_t len)
{
  return write(buf, len, 0);
}
    4106:	1f 91       	pop	r17
    4108:	0f 91       	pop	r16
    410a:	ff 90       	pop	r15
    410c:	ef 90       	pop	r14
    410e:	df 90       	pop	r13
    4110:	cf 90       	pop	r12
    4112:	08 95       	ret

00004114 <_ZN22Adafruit_CC3000_Client7connectE9IPAddressj>:
    return connect(ip, port);
  else 
    return 0;
}

int Adafruit_CC3000_Client::connect(IPAddress destIP, uint16_t destPort)
    4114:	6f 92       	push	r6
    4116:	7f 92       	push	r7
    4118:	8f 92       	push	r8
    411a:	9f 92       	push	r9
    411c:	af 92       	push	r10
    411e:	bf 92       	push	r11
    4120:	cf 92       	push	r12
    4122:	df 92       	push	r13
    4124:	ef 92       	push	r14
    4126:	ff 92       	push	r15
    4128:	0f 93       	push	r16
    412a:	1f 93       	push	r17
    412c:	df 93       	push	r29
    412e:	cf 93       	push	r28
    4130:	cd b7       	in	r28, 0x3d	; 61
    4132:	de b7       	in	r29, 0x3e	; 62
    4134:	60 97       	sbiw	r28, 0x10	; 16
    4136:	0f b6       	in	r0, 0x3f	; 63
    4138:	f8 94       	cli
    413a:	de bf       	out	0x3e, r29	; 62
    413c:	0f be       	out	0x3f, r0	; 63
    413e:	cd bf       	out	0x3d, r28	; 61
    4140:	5c 01       	movw	r10, r24
    4142:	4b 01       	movw	r8, r22
    4144:	3a 01       	movw	r6, r20
  // The only difference is it resets the client's buffers to be empty, and then implements the
  // same logic as connect.
  // TODO: Refactor this entire function away so there is a single common function for connecting
  // to a TCP socket that both this function and the connectTCP function will use.

  bufsiz = 0;
    4146:	8d e4       	ldi	r24, 0x4D	; 77
    4148:	90 e0       	ldi	r25, 0x00	; 0
    414a:	a8 0e       	add	r10, r24
    414c:	b9 1e       	adc	r11, r25
    414e:	d5 01       	movw	r26, r10
    4150:	1d 92       	st	X+, r1
    4152:	1c 92       	st	X, r1
  _rx_buf_idx = 0;
    4154:	f5 01       	movw	r30, r10
    4156:	12 92       	st	-Z, r1
    4158:	5f 01       	movw	r10, r30
    415a:	84 eb       	ldi	r24, 0xB4	; 180
    415c:	9f ef       	ldi	r25, 0xFF	; 255
    415e:	a8 0e       	add	r10, r24
    4160:	b9 1e       	adc	r11, r25
  sockaddr      socketAddress;
  int32_t       tcp_socket;

  // Create the socket(s)
  //if (CC3KPrinter != 0) CC3KPrinter->print(F("Creating socket ... "));
  tcp_socket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    4162:	62 e0       	ldi	r22, 0x02	; 2
    4164:	70 e0       	ldi	r23, 0x00	; 0
    4166:	80 e0       	ldi	r24, 0x00	; 0
    4168:	90 e0       	ldi	r25, 0x00	; 0
    416a:	21 e0       	ldi	r18, 0x01	; 1
    416c:	30 e0       	ldi	r19, 0x00	; 0
    416e:	40 e0       	ldi	r20, 0x00	; 0
    4170:	50 e0       	ldi	r21, 0x00	; 0
    4172:	e6 e0       	ldi	r30, 0x06	; 6
    4174:	ee 2e       	mov	r14, r30
    4176:	f1 2c       	mov	r15, r1
    4178:	01 2d       	mov	r16, r1
    417a:	11 2d       	mov	r17, r1
    417c:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <socket>
    4180:	6b 01       	movw	r12, r22
    4182:	7c 01       	movw	r14, r24
  if (-1 == tcp_socket)
    4184:	9f ef       	ldi	r25, 0xFF	; 255
    4186:	c9 16       	cp	r12, r25
    4188:	9f ef       	ldi	r25, 0xFF	; 255
    418a:	d9 06       	cpc	r13, r25
    418c:	9f ef       	ldi	r25, 0xFF	; 255
    418e:	e9 06       	cpc	r14, r25
    4190:	9f ef       	ldi	r25, 0xFF	; 255
    4192:	f9 06       	cpc	r15, r25
    4194:	c9 f1       	breq	.+114    	; 0x4208 <_ZN22Adafruit_CC3000_Client7connectE9IPAddressj+0xf4>
    }
    return 0;
  }
  //CC3KPrinter->print(F("DONE (socket ")); CC3KPrinter->print(tcp_socket); CC3KPrinter->println(F(")"));

  closed_sockets[tcp_socket] = false; // Clear any previous closed event
    4196:	f6 01       	movw	r30, r12
    4198:	eb 54       	subi	r30, 0x4B	; 75
    419a:	fd 4f       	sbci	r31, 0xFD	; 253
    419c:	10 82       	st	Z, r1

  // Try to open the socket
  memset(&socketAddress, 0x00, sizeof(socketAddress));
    419e:	8e 01       	movw	r16, r28
    41a0:	0f 5f       	subi	r16, 0xFF	; 255
    41a2:	1f 4f       	sbci	r17, 0xFF	; 255
    41a4:	80 e1       	ldi	r24, 0x10	; 16
    41a6:	d8 01       	movw	r26, r16
    41a8:	1d 92       	st	X+, r1
    41aa:	8a 95       	dec	r24
    41ac:	e9 f7       	brne	.-6      	; 0x41a8 <_ZN22Adafruit_CC3000_Client7connectE9IPAddressj+0x94>
  socketAddress.sa_family = AF_INET;
    41ae:	82 e0       	ldi	r24, 0x02	; 2
    41b0:	90 e0       	ldi	r25, 0x00	; 0
    41b2:	9a 83       	std	Y+2, r25	; 0x02
    41b4:	89 83       	std	Y+1, r24	; 0x01
  socketAddress.sa_data[0] = (destPort & 0xFF00) >> 8;  // Set the Port Number
    41b6:	7b 82       	std	Y+3, r7	; 0x03
  socketAddress.sa_data[1] = (destPort & 0x00FF);
    41b8:	6c 82       	std	Y+4, r6	; 0x04
  socketAddress.sa_data[2] = destIP >> 24;
    41ba:	f4 01       	movw	r30, r8
    41bc:	82 81       	ldd	r24, Z+2	; 0x02
    41be:	93 81       	ldd	r25, Z+3	; 0x03
    41c0:	a4 81       	ldd	r26, Z+4	; 0x04
    41c2:	b5 81       	ldd	r27, Z+5	; 0x05
    41c4:	2b 2f       	mov	r18, r27
    41c6:	33 27       	eor	r19, r19
    41c8:	44 27       	eor	r20, r20
    41ca:	55 27       	eor	r21, r21
    41cc:	2d 83       	std	Y+5, r18	; 0x05
  socketAddress.sa_data[3] = destIP >> 16;
    41ce:	9d 01       	movw	r18, r26
    41d0:	44 27       	eor	r20, r20
    41d2:	55 27       	eor	r21, r21
    41d4:	2e 83       	std	Y+6, r18	; 0x06
  socketAddress.sa_data[4] = destIP >> 8;
    41d6:	89 2f       	mov	r24, r25
    41d8:	9a 2f       	mov	r25, r26
    41da:	ab 2f       	mov	r26, r27
    41dc:	bb 27       	eor	r27, r27
    41de:	8f 83       	std	Y+7, r24	; 0x07
  socketAddress.sa_data[5] = destIP;
    41e0:	82 81       	ldd	r24, Z+2	; 0x02
    41e2:	88 87       	std	Y+8, r24	; 0x08
    CC3KPrinter->println(destPort);
  }

  //printHex((byte *)&socketAddress, sizeof(socketAddress));
  //if (CC3KPrinter != 0) CC3KPrinter->print(F("Connecting socket ... "));
  if (-1 == ::connect(tcp_socket, &socketAddress, sizeof(socketAddress)))
    41e4:	c7 01       	movw	r24, r14
    41e6:	b6 01       	movw	r22, r12
    41e8:	a8 01       	movw	r20, r16
    41ea:	00 e1       	ldi	r16, 0x10	; 16
    41ec:	10 e0       	ldi	r17, 0x00	; 0
    41ee:	20 e0       	ldi	r18, 0x00	; 0
    41f0:	30 e0       	ldi	r19, 0x00	; 0
    41f2:	0e 94 cb 13 	call	0x2796	; 0x2796 <connect>
    41f6:	6f 5f       	subi	r22, 0xFF	; 255
    41f8:	7f 4f       	sbci	r23, 0xFF	; 255
    41fa:	8f 4f       	sbci	r24, 0xFF	; 255
    41fc:	9f 4f       	sbci	r25, 0xFF	; 255
    41fe:	39 f4       	brne	.+14     	; 0x420e <_ZN22Adafruit_CC3000_Client7connectE9IPAddressj+0xfa>
  {
    CHECK_PRINTER {
      CC3KPrinter->println(F("Connection error"));
    }
    closesocket(tcp_socket);
    4200:	c7 01       	movw	r24, r14
    4202:	b6 01       	movw	r22, r12
    4204:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <closesocket>
    4208:	20 e0       	ldi	r18, 0x00	; 0
    420a:	30 e0       	ldi	r19, 0x00	; 0
    420c:	0c c0       	rjmp	.+24     	; 0x4226 <_ZN22Adafruit_CC3000_Client7connectE9IPAddressj+0x112>
    return 0;
  }
  // if (CC3KPrinter != 0) CC3KPrinter->println(F("DONE"));

  _socket = tcp_socket;
    420e:	8f e4       	ldi	r24, 0x4F	; 79
    4210:	90 e0       	ldi	r25, 0x00	; 0
    4212:	a8 0e       	add	r10, r24
    4214:	b9 1e       	adc	r11, r25
    4216:	d5 01       	movw	r26, r10
    4218:	cd 92       	st	X+, r12
    421a:	dd 92       	st	X+, r13
    421c:	ed 92       	st	X+, r14
    421e:	fc 92       	st	X, r15
    4220:	13 97       	sbiw	r26, 0x03	; 3
    4222:	21 e0       	ldi	r18, 0x01	; 1
    4224:	30 e0       	ldi	r19, 0x00	; 0
  return 1;
}
    4226:	c9 01       	movw	r24, r18
    4228:	60 96       	adiw	r28, 0x10	; 16
    422a:	0f b6       	in	r0, 0x3f	; 63
    422c:	f8 94       	cli
    422e:	de bf       	out	0x3e, r29	; 62
    4230:	0f be       	out	0x3f, r0	; 63
    4232:	cd bf       	out	0x3d, r28	; 61
    4234:	cf 91       	pop	r28
    4236:	df 91       	pop	r29
    4238:	1f 91       	pop	r17
    423a:	0f 91       	pop	r16
    423c:	ff 90       	pop	r15
    423e:	ef 90       	pop	r14
    4240:	df 90       	pop	r13
    4242:	cf 90       	pop	r12
    4244:	bf 90       	pop	r11
    4246:	af 90       	pop	r10
    4248:	9f 90       	pop	r9
    424a:	8f 90       	pop	r8
    424c:	7f 90       	pop	r7
    424e:	6f 90       	pop	r6
    4250:	08 95       	ret

00004252 <_ZN15Adafruit_CC30009checkDHCPEv>:
    Checks if the DHCP process is complete or not

    @returns  True if DHCP process is complete (IP address assigned)
*/
/**************************************************************************/
bool Adafruit_CC3000::checkDHCP(void)
    4252:	df 93       	push	r29
    4254:	cf 93       	push	r28
    4256:	00 d0       	rcall	.+0      	; 0x4258 <_ZN15Adafruit_CC30009checkDHCPEv+0x6>
    4258:	00 d0       	rcall	.+0      	; 0x425a <_ZN15Adafruit_CC30009checkDHCPEv+0x8>
    425a:	cd b7       	in	r28, 0x3d	; 61
    425c:	de b7       	in	r29, 0x3e	; 62
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    425e:	80 91 d5 02 	lds	r24, 0x02D5
  // but for some reason this call is necessary or else UDP won't 
  // work.  See this thread from TI for more details and the genesis
  // of the workaround: http://e2e.ti.com/support/wireless_connectivity/f/851/t/342177.aspx
  // Putting this in checkDHCP is a nice way to make it just work
  // for people without any need to add to their sketch.
  if (cc3000Bitset.test(CC3000BitSet::HasDHCP)) {
    4262:	82 ff       	sbrs	r24, 2
    4264:	09 c0       	rjmp	.+18     	; 0x4278 <_ZN15Adafruit_CC30009checkDHCPEv+0x26>
    uint32_t output;
    gethostbyname("localhost", 9, &output);
    4266:	83 e0       	ldi	r24, 0x03	; 3
    4268:	91 e0       	ldi	r25, 0x01	; 1
    426a:	69 e0       	ldi	r22, 0x09	; 9
    426c:	70 e0       	ldi	r23, 0x00	; 0
    426e:	ae 01       	movw	r20, r28
    4270:	4f 5f       	subi	r20, 0xFF	; 255
    4272:	5f 4f       	sbci	r21, 0xFF	; 255
    4274:	0e 94 28 14 	call	0x2850	; 0x2850 <gethostbyname>
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    4278:	80 91 d5 02 	lds	r24, 0x02D5
    427c:	90 e0       	ldi	r25, 0x00	; 0
    427e:	96 95       	lsr	r25
    4280:	87 95       	ror	r24
    4282:	96 95       	lsr	r25
    4284:	87 95       	ror	r24
  if (cc3000Bitset.test(CC3000BitSet::HasDHCP)) {
    uint32_t output;
    gethostbyname("localhost", 9, &output);
  }
  return cc3000Bitset.test(CC3000BitSet::HasDHCP);
}
    4286:	81 70       	andi	r24, 0x01	; 1
    4288:	0f 90       	pop	r0
    428a:	0f 90       	pop	r0
    428c:	0f 90       	pop	r0
    428e:	0f 90       	pop	r0
    4290:	cf 91       	pop	r28
    4292:	df 91       	pop	r29
    4294:	08 95       	ret

00004296 <_ZN22Adafruit_CC3000_Client7connectEPKcj>:
Adafruit_CC3000_Client::operator bool()
{
  return connected();
}

int Adafruit_CC3000_Client::connect(const char *host, uint16_t port){
    4296:	af 92       	push	r10
    4298:	bf 92       	push	r11
    429a:	cf 92       	push	r12
    429c:	df 92       	push	r13
    429e:	ef 92       	push	r14
    42a0:	ff 92       	push	r15
    42a2:	0f 93       	push	r16
    42a4:	1f 93       	push	r17
    42a6:	df 93       	push	r29
    42a8:	cf 93       	push	r28
    42aa:	cd b7       	in	r28, 0x3d	; 61
    42ac:	de b7       	in	r29, 0x3e	; 62
    42ae:	2a 97       	sbiw	r28, 0x0a	; 10
    42b0:	0f b6       	in	r0, 0x3f	; 63
    42b2:	f8 94       	cli
    42b4:	de bf       	out	0x3e, r29	; 62
    42b6:	0f be       	out	0x3f, r0	; 63
    42b8:	cd bf       	out	0x3d, r28	; 61
    42ba:	6c 01       	movw	r12, r24
    42bc:	cb 01       	movw	r24, r22
    42be:	5a 01       	movw	r10, r20
  
  // if (!_initialised) return 0;
  // if (!ulCC3000Connected) return 0;
  // if (!ulCC3000DHCP) return 0;

  uint32_t ip = 0;
    42c0:	19 82       	std	Y+1, r1	; 0x01
    42c2:	1a 82       	std	Y+2, r1	; 0x02
    42c4:	1b 82       	std	Y+3, r1	; 0x03
    42c6:	1c 82       	std	Y+4, r1	; 0x04

  int16_t r = gethostbyname(host, strlen(host), &ip);
    42c8:	db 01       	movw	r26, r22
    42ca:	0d 90       	ld	r0, X+
    42cc:	00 20       	and	r0, r0
    42ce:	e9 f7       	brne	.-6      	; 0x42ca <_ZN22Adafruit_CC3000_Client7connectEPKcj+0x34>
    42d0:	11 97       	sbiw	r26, 0x01	; 1
    42d2:	a6 1b       	sub	r26, r22
    42d4:	b7 0b       	sbc	r27, r23
    42d6:	bd 01       	movw	r22, r26
    42d8:	ae 01       	movw	r20, r28
    42da:	4f 5f       	subi	r20, 0xFF	; 255
    42dc:	5f 4f       	sbci	r21, 0xFF	; 255
    42de:	0e 94 28 14 	call	0x2850	; 0x2850 <gethostbyname>

  if (ip!=0 && r!=0)
    42e2:	49 81       	ldd	r20, Y+1	; 0x01
    42e4:	5a 81       	ldd	r21, Y+2	; 0x02
    42e6:	6b 81       	ldd	r22, Y+3	; 0x03
    42e8:	7c 81       	ldd	r23, Y+4	; 0x04
    42ea:	41 15       	cp	r20, r1
    42ec:	51 05       	cpc	r21, r1
    42ee:	61 05       	cpc	r22, r1
    42f0:	71 05       	cpc	r23, r1
    42f2:	a1 f0       	breq	.+40     	; 0x431c <_ZN22Adafruit_CC3000_Client7connectEPKcj+0x86>
    42f4:	89 2b       	or	r24, r25
    42f6:	91 f0       	breq	.+36     	; 0x431c <_ZN22Adafruit_CC3000_Client7connectEPKcj+0x86>
    return connect(ip, port);
    42f8:	d6 01       	movw	r26, r12
    42fa:	ed 91       	ld	r30, X+
    42fc:	fc 91       	ld	r31, X
    42fe:	e4 84       	ldd	r14, Z+12	; 0x0c
    4300:	f5 84       	ldd	r15, Z+13	; 0x0d
    4302:	8e 01       	movw	r16, r28
    4304:	0b 5f       	subi	r16, 0xFB	; 251
    4306:	1f 4f       	sbci	r17, 0xFF	; 255
    4308:	c8 01       	movw	r24, r16
    430a:	0e 94 8b 33 	call	0x6716	; 0x6716 <_ZN9IPAddressC1Em>
    430e:	c6 01       	movw	r24, r12
    4310:	b8 01       	movw	r22, r16
    4312:	a5 01       	movw	r20, r10
    4314:	f7 01       	movw	r30, r14
    4316:	09 95       	icall
    4318:	9c 01       	movw	r18, r24
    431a:	02 c0       	rjmp	.+4      	; 0x4320 <_ZN22Adafruit_CC3000_Client7connectEPKcj+0x8a>
    431c:	20 e0       	ldi	r18, 0x00	; 0
    431e:	30 e0       	ldi	r19, 0x00	; 0
  else 
    return 0;
}
    4320:	c9 01       	movw	r24, r18
    4322:	2a 96       	adiw	r28, 0x0a	; 10
    4324:	0f b6       	in	r0, 0x3f	; 63
    4326:	f8 94       	cli
    4328:	de bf       	out	0x3e, r29	; 62
    432a:	0f be       	out	0x3f, r0	; 63
    432c:	cd bf       	out	0x3d, r28	; 61
    432e:	cf 91       	pop	r28
    4330:	df 91       	pop	r29
    4332:	1f 91       	pop	r17
    4334:	0f 91       	pop	r16
    4336:	ff 90       	pop	r15
    4338:	ef 90       	pop	r14
    433a:	df 90       	pop	r13
    433c:	cf 90       	pop	r12
    433e:	bf 90       	pop	r11
    4340:	af 90       	pop	r10
    4342:	08 95       	ret

00004344 <_ZN22Adafruit_CC3000_ClientaSERKS_>:
  bufsiz = copy.bufsiz;
  _rx_buf_idx = copy._rx_buf_idx;
  memcpy(_rx_buf, copy._rx_buf, RXBUFFERSIZE);
}

void Adafruit_CC3000_Client::operator=(const Adafruit_CC3000_Client& other) {
    4344:	cf 93       	push	r28
    4346:	df 93       	push	r29
    4348:	fc 01       	movw	r30, r24
    434a:	9b 01       	movw	r18, r22
  // Copy all the members to assign a new value to this client.
  _socket = other._socket;
    434c:	e1 5b       	subi	r30, 0xB1	; 177
    434e:	ff 4f       	sbci	r31, 0xFF	; 255
    4350:	21 5b       	subi	r18, 0xB1	; 177
    4352:	3f 4f       	sbci	r19, 0xFF	; 255
    4354:	e9 01       	movw	r28, r18
    4356:	88 81       	ld	r24, Y
    4358:	99 81       	ldd	r25, Y+1	; 0x01
    435a:	aa 81       	ldd	r26, Y+2	; 0x02
    435c:	bb 81       	ldd	r27, Y+3	; 0x03
    435e:	80 83       	st	Z, r24
    4360:	91 83       	std	Z+1, r25	; 0x01
    4362:	a2 83       	std	Z+2, r26	; 0x02
    4364:	b3 83       	std	Z+3, r27	; 0x03
  bufsiz = other.bufsiz;
    4366:	d9 01       	movw	r26, r18
    4368:	9e 91       	ld	r25, -X
    436a:	8e 91       	ld	r24, -X
    436c:	92 93       	st	-Z, r25
    436e:	82 93       	st	-Z, r24
  _rx_buf_idx = other._rx_buf_idx;
    4370:	ed 01       	movw	r28, r26
    4372:	8a 91       	ld	r24, -Y
    4374:	82 93       	st	-Z, r24
  memcpy(_rx_buf, other._rx_buf, RXBUFFERSIZE);
    4376:	e0 54       	subi	r30, 0x40	; 64
    4378:	f0 40       	sbci	r31, 0x00	; 0
    437a:	de 01       	movw	r26, r28
    437c:	a0 54       	subi	r26, 0x40	; 64
    437e:	b0 40       	sbci	r27, 0x00	; 0
    4380:	80 e4       	ldi	r24, 0x40	; 64
    4382:	0d 90       	ld	r0, X+
    4384:	01 92       	st	Z+, r0
    4386:	81 50       	subi	r24, 0x01	; 1
    4388:	e1 f7       	brne	.-8      	; 0x4382 <_ZN22Adafruit_CC3000_ClientaSERKS_+0x3e>
}
    438a:	df 91       	pop	r29
    438c:	cf 91       	pop	r28
    438e:	08 95       	ret

00004390 <_Z21CC3000_UsynchCallbacklPch>:
//!
//! @brief  The function handles asynchronous events that come from CC3000
//!         device and operates a led for indicate
//
//*****************************************************************************
void CC3000_UsynchCallback(long lEventType, char * data, unsigned char length)
    4390:	ef 92       	push	r14
    4392:	ff 92       	push	r15
    4394:	0f 93       	push	r16
    4396:	1f 93       	push	r17
    4398:	7b 01       	movw	r14, r22
    439a:	8c 01       	movw	r16, r24
    439c:	fa 01       	movw	r30, r20
    439e:	42 2f       	mov	r20, r18
{
  if (lEventType == HCI_EVNT_WLAN_ASYNC_SIMPLE_CONFIG_DONE)
    43a0:	80 e8       	ldi	r24, 0x80	; 128
    43a2:	e8 16       	cp	r14, r24
    43a4:	80 e8       	ldi	r24, 0x80	; 128
    43a6:	f8 06       	cpc	r15, r24
    43a8:	80 e0       	ldi	r24, 0x00	; 0
    43aa:	08 07       	cpc	r16, r24
    43ac:	80 e0       	ldi	r24, 0x00	; 0
    43ae:	18 07       	cpc	r17, r24
    43b0:	31 f4       	brne	.+12     	; 0x43be <_Z21CC3000_UsynchCallbacklPch+0x2e>
  bool test(const byte flag) {
    return (flags & flag) != 0;
  }

  void set(const byte flag) {
    flags |= flag;
    43b2:	80 91 d5 02 	lds	r24, 0x02D5
    43b6:	81 60       	ori	r24, 0x01	; 1
    43b8:	80 93 d5 02 	sts	0x02D5, r24
    43bc:	2b c0       	rjmp	.+86     	; 0x4414 <_Z21CC3000_UsynchCallbacklPch+0x84>
  if (lEventType == HCI_EVNT_WLAN_ASYNC_SIMPLE_CONFIG_DONE)
  {
    cc3000Bitset.set(CC3000BitSet::IsSmartConfigFinished);
  }

  if (lEventType == HCI_EVNT_WLAN_UNSOL_CONNECT)
    43be:	81 e0       	ldi	r24, 0x01	; 1
    43c0:	e8 16       	cp	r14, r24
    43c2:	80 e8       	ldi	r24, 0x80	; 128
    43c4:	f8 06       	cpc	r15, r24
    43c6:	80 e0       	ldi	r24, 0x00	; 0
    43c8:	08 07       	cpc	r16, r24
    43ca:	80 e0       	ldi	r24, 0x00	; 0
    43cc:	18 07       	cpc	r17, r24
    43ce:	31 f4       	brne	.+12     	; 0x43dc <_Z21CC3000_UsynchCallbacklPch+0x4c>
  bool test(const byte flag) {
    return (flags & flag) != 0;
  }

  void set(const byte flag) {
    flags |= flag;
    43d0:	80 91 d5 02 	lds	r24, 0x02D5
    43d4:	82 60       	ori	r24, 0x02	; 2
    43d6:	80 93 d5 02 	sts	0x02D5, r24
    43da:	28 c0       	rjmp	.+80     	; 0x442c <_Z21CC3000_UsynchCallbacklPch+0x9c>
  if (lEventType == HCI_EVNT_WLAN_UNSOL_CONNECT)
  {
    cc3000Bitset.set(CC3000BitSet::IsConnected);
  }

  if (lEventType == HCI_EVNT_WLAN_UNSOL_DISCONNECT)
    43dc:	82 e0       	ldi	r24, 0x02	; 2
    43de:	e8 16       	cp	r14, r24
    43e0:	80 e8       	ldi	r24, 0x80	; 128
    43e2:	f8 06       	cpc	r15, r24
    43e4:	80 e0       	ldi	r24, 0x00	; 0
    43e6:	08 07       	cpc	r16, r24
    43e8:	80 e0       	ldi	r24, 0x00	; 0
    43ea:	18 07       	cpc	r17, r24
    43ec:	31 f4       	brne	.+12     	; 0x43fa <_Z21CC3000_UsynchCallbacklPch+0x6a>
  void set(const byte flag) {
    flags |= flag;
  }

  void reset(const byte flag) {
    flags &= ~flag;
    43ee:	80 91 d5 02 	lds	r24, 0x02D5
    43f2:	89 7f       	andi	r24, 0xF9	; 249
    43f4:	80 93 d5 02 	sts	0x02D5, r24
    43f8:	2f c0       	rjmp	.+94     	; 0x4458 <_Z21CC3000_UsynchCallbacklPch+0xc8>
  if (lEventType == HCI_EVNT_WLAN_UNSOL_DISCONNECT)
  {
    cc3000Bitset.reset(CC3000BitSet::IsConnected | CC3000BitSet::HasDHCP);
  }
  
  if (lEventType == HCI_EVNT_WLAN_UNSOL_DHCP)
    43fa:	80 e1       	ldi	r24, 0x10	; 16
    43fc:	e8 16       	cp	r14, r24
    43fe:	80 e8       	ldi	r24, 0x80	; 128
    4400:	f8 06       	cpc	r15, r24
    4402:	80 e0       	ldi	r24, 0x00	; 0
    4404:	08 07       	cpc	r16, r24
    4406:	80 e0       	ldi	r24, 0x00	; 0
    4408:	18 07       	cpc	r17, r24
    440a:	21 f4       	brne	.+8      	; 0x4414 <_Z21CC3000_UsynchCallbacklPch+0x84>
  bool test(const byte flag) {
    return (flags & flag) != 0;
  }

  void set(const byte flag) {
    flags |= flag;
    440c:	80 91 d5 02 	lds	r24, 0x02D5
    4410:	84 60       	ori	r24, 0x04	; 4
    4412:	09 c0       	rjmp	.+18     	; 0x4426 <_Z21CC3000_UsynchCallbacklPch+0x96>
  if (lEventType == HCI_EVNT_WLAN_UNSOL_DHCP)
  {
    cc3000Bitset.set(CC3000BitSet::HasDHCP);
  }

  if (lEventType == HCI_EVENT_CC3000_CAN_SHUT_DOWN)
    4414:	89 e9       	ldi	r24, 0x99	; 153
    4416:	e8 16       	cp	r14, r24
    4418:	f1 04       	cpc	r15, r1
    441a:	01 05       	cpc	r16, r1
    441c:	11 05       	cpc	r17, r1
    441e:	31 f4       	brne	.+12     	; 0x442c <_Z21CC3000_UsynchCallbacklPch+0x9c>
  bool test(const byte flag) {
    return (flags & flag) != 0;
  }

  void set(const byte flag) {
    flags |= flag;
    4420:	80 91 d5 02 	lds	r24, 0x02D5
    4424:	88 60       	ori	r24, 0x08	; 8
    4426:	80 93 d5 02 	sts	0x02D5, r24
    442a:	28 c0       	rjmp	.+80     	; 0x447c <_Z21CC3000_UsynchCallbacklPch+0xec>
  if (lEventType == HCI_EVENT_CC3000_CAN_SHUT_DOWN)
  {
    cc3000Bitset.set(CC3000BitSet::OkToShutDown);
  }

  if (lEventType == HCI_EVNT_WLAN_ASYNC_PING_REPORT)
    442c:	80 e4       	ldi	r24, 0x40	; 64
    442e:	e8 16       	cp	r14, r24
    4430:	80 e8       	ldi	r24, 0x80	; 128
    4432:	f8 06       	cpc	r15, r24
    4434:	80 e0       	ldi	r24, 0x00	; 0
    4436:	08 07       	cpc	r16, r24
    4438:	80 e0       	ldi	r24, 0x00	; 0
    443a:	18 07       	cpc	r17, r24
    443c:	69 f4       	brne	.+26     	; 0x4458 <_Z21CC3000_UsynchCallbacklPch+0xc8>
  {
    //PRINT_F("CC3000: Ping report\n\r");
    pingReportnum++;
    443e:	80 91 a0 02 	lds	r24, 0x02A0
    4442:	8f 5f       	subi	r24, 0xFF	; 255
    4444:	80 93 a0 02 	sts	0x02A0, r24
    memcpy(&pingReport, data, length);
    4448:	21 ea       	ldi	r18, 0xA1	; 161
    444a:	32 e0       	ldi	r19, 0x02	; 2
    444c:	c9 01       	movw	r24, r18
    444e:	bf 01       	movw	r22, r30
    4450:	50 e0       	ldi	r21, 0x00	; 0
    4452:	0e 94 df 03 	call	0x7be	; 0x7be <memcpy>
    4456:	12 c0       	rjmp	.+36     	; 0x447c <_Z21CC3000_UsynchCallbacklPch+0xec>
  }

  if (lEventType == HCI_EVNT_BSD_TCP_CLOSE_WAIT) {
    4458:	80 e0       	ldi	r24, 0x00	; 0
    445a:	e8 16       	cp	r14, r24
    445c:	88 e8       	ldi	r24, 0x88	; 136
    445e:	f8 06       	cpc	r15, r24
    4460:	80 e0       	ldi	r24, 0x00	; 0
    4462:	08 07       	cpc	r16, r24
    4464:	80 e0       	ldi	r24, 0x00	; 0
    4466:	18 07       	cpc	r17, r24
    4468:	49 f4       	brne	.+18     	; 0x447c <_Z21CC3000_UsynchCallbacklPch+0xec>
    uint8_t socketnum;
    socketnum = data[0];
    446a:	40 81       	ld	r20, Z
    //PRINT_F("TCP Close wait #"); printDec(socketnum);
    if (socketnum < MAX_SOCKETS)
    446c:	40 32       	cpi	r20, 0x20	; 32
    446e:	30 f4       	brcc	.+12     	; 0x447c <_Z21CC3000_UsynchCallbacklPch+0xec>
      closed_sockets[socketnum] = true;
    4470:	e4 2f       	mov	r30, r20
    4472:	f0 e0       	ldi	r31, 0x00	; 0
    4474:	eb 54       	subi	r30, 0x4B	; 75
    4476:	fd 4f       	sbci	r31, 0xFD	; 253
    4478:	81 e0       	ldi	r24, 0x01	; 1
    447a:	80 83       	st	Z, r24
  }
}
    447c:	1f 91       	pop	r17
    447e:	0f 91       	pop	r16
    4480:	ff 90       	pop	r15
    4482:	ef 90       	pop	r14
    4484:	08 95       	ret

00004486 <_ZN15Adafruit_CC300012getIPAddressEPmS0_S0_S0_S0_>:
    @brief   Reads the current IP address

    @returns  False if an error occured!
*/
/**************************************************************************/
bool Adafruit_CC3000::getIPAddress(uint32_t *retip, uint32_t *netmask, uint32_t *gateway, uint32_t *dhcpserv, uint32_t *dnsserv)
    4486:	8f 92       	push	r8
    4488:	9f 92       	push	r9
    448a:	af 92       	push	r10
    448c:	bf 92       	push	r11
    448e:	cf 92       	push	r12
    4490:	df 92       	push	r13
    4492:	ef 92       	push	r14
    4494:	ff 92       	push	r15
    4496:	0f 93       	push	r16
    4498:	1f 93       	push	r17
    449a:	df 93       	push	r29
    449c:	cf 93       	push	r28
    449e:	cd b7       	in	r28, 0x3d	; 61
    44a0:	de b7       	in	r29, 0x3e	; 62
    44a2:	ea 97       	sbiw	r28, 0x3a	; 58
    44a4:	0f b6       	in	r0, 0x3f	; 63
    44a6:	f8 94       	cli
    44a8:	de bf       	out	0x3e, r29	; 62
    44aa:	0f be       	out	0x3f, r0	; 63
    44ac:	cd bf       	out	0x3d, r28	; 61
    44ae:	fc 01       	movw	r30, r24
    44b0:	6b 01       	movw	r12, r22
    44b2:	5a 01       	movw	r10, r20
    44b4:	49 01       	movw	r8, r18
{
  if (!_initialised) return false;
    44b6:	80 81       	ld	r24, Z
    44b8:	88 23       	and	r24, r24
    44ba:	f1 f1       	breq	.+124    	; 0x4538 <_ZN15Adafruit_CC300012getIPAddressEPmS0_S0_S0_S0_+0xb2>
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    44bc:	80 91 d5 02 	lds	r24, 0x02D5
*/
/**************************************************************************/
bool Adafruit_CC3000::getIPAddress(uint32_t *retip, uint32_t *netmask, uint32_t *gateway, uint32_t *dhcpserv, uint32_t *dnsserv)
{
  if (!_initialised) return false;
  if (!cc3000Bitset.test(CC3000BitSet::IsConnected)) return false;
    44c0:	81 ff       	sbrs	r24, 1
    44c2:	3a c0       	rjmp	.+116    	; 0x4538 <_ZN15Adafruit_CC300012getIPAddressEPmS0_S0_S0_S0_+0xb2>
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    44c4:	80 91 d5 02 	lds	r24, 0x02D5
/**************************************************************************/
bool Adafruit_CC3000::getIPAddress(uint32_t *retip, uint32_t *netmask, uint32_t *gateway, uint32_t *dhcpserv, uint32_t *dnsserv)
{
  if (!_initialised) return false;
  if (!cc3000Bitset.test(CC3000BitSet::IsConnected)) return false;
  if (!cc3000Bitset.test(CC3000BitSet::HasDHCP)) return false;
    44c8:	82 ff       	sbrs	r24, 2
    44ca:	36 c0       	rjmp	.+108    	; 0x4538 <_ZN15Adafruit_CC300012getIPAddressEPmS0_S0_S0_S0_+0xb2>

  tNetappIpconfigRetArgs ipconfig;
  netapp_ipconfig(&ipconfig);
    44cc:	ce 01       	movw	r24, r28
    44ce:	01 96       	adiw	r24, 0x01	; 1
    44d0:	0e 94 2c 12 	call	0x2458	; 0x2458 <netapp_ipconfig>

  /* If byte 1 is 0 we don't have a valid address */
  if (ipconfig.aucIP[3] == 0) return false;
    44d4:	8c 81       	ldd	r24, Y+4	; 0x04
    44d6:	88 23       	and	r24, r24
    44d8:	79 f1       	breq	.+94     	; 0x4538 <_ZN15Adafruit_CC300012getIPAddressEPmS0_S0_S0_S0_+0xb2>

  memcpy(retip, ipconfig.aucIP, 4);
    44da:	89 81       	ldd	r24, Y+1	; 0x01
    44dc:	9a 81       	ldd	r25, Y+2	; 0x02
    44de:	ab 81       	ldd	r26, Y+3	; 0x03
    44e0:	bc 81       	ldd	r27, Y+4	; 0x04
    44e2:	f6 01       	movw	r30, r12
    44e4:	80 83       	st	Z, r24
    44e6:	91 83       	std	Z+1, r25	; 0x01
    44e8:	a2 83       	std	Z+2, r26	; 0x02
    44ea:	b3 83       	std	Z+3, r27	; 0x03
  memcpy(netmask, ipconfig.aucSubnetMask, 4);
    44ec:	8d 81       	ldd	r24, Y+5	; 0x05
    44ee:	9e 81       	ldd	r25, Y+6	; 0x06
    44f0:	af 81       	ldd	r26, Y+7	; 0x07
    44f2:	b8 85       	ldd	r27, Y+8	; 0x08
    44f4:	f5 01       	movw	r30, r10
    44f6:	80 83       	st	Z, r24
    44f8:	91 83       	std	Z+1, r25	; 0x01
    44fa:	a2 83       	std	Z+2, r26	; 0x02
    44fc:	b3 83       	std	Z+3, r27	; 0x03
  memcpy(gateway, ipconfig.aucDefaultGateway, 4);
    44fe:	89 85       	ldd	r24, Y+9	; 0x09
    4500:	9a 85       	ldd	r25, Y+10	; 0x0a
    4502:	ab 85       	ldd	r26, Y+11	; 0x0b
    4504:	bc 85       	ldd	r27, Y+12	; 0x0c
    4506:	f4 01       	movw	r30, r8
    4508:	80 83       	st	Z, r24
    450a:	91 83       	std	Z+1, r25	; 0x01
    450c:	a2 83       	std	Z+2, r26	; 0x02
    450e:	b3 83       	std	Z+3, r27	; 0x03
  memcpy(dhcpserv, ipconfig.aucDHCPServer, 4);
    4510:	8d 85       	ldd	r24, Y+13	; 0x0d
    4512:	9e 85       	ldd	r25, Y+14	; 0x0e
    4514:	af 85       	ldd	r26, Y+15	; 0x0f
    4516:	b8 89       	ldd	r27, Y+16	; 0x10
    4518:	f8 01       	movw	r30, r16
    451a:	80 83       	st	Z, r24
    451c:	91 83       	std	Z+1, r25	; 0x01
    451e:	a2 83       	std	Z+2, r26	; 0x02
    4520:	b3 83       	std	Z+3, r27	; 0x03
  memcpy(dnsserv, ipconfig.aucDNSServer, 4);
    4522:	89 89       	ldd	r24, Y+17	; 0x11
    4524:	9a 89       	ldd	r25, Y+18	; 0x12
    4526:	ab 89       	ldd	r26, Y+19	; 0x13
    4528:	bc 89       	ldd	r27, Y+20	; 0x14
    452a:	f7 01       	movw	r30, r14
    452c:	80 83       	st	Z, r24
    452e:	91 83       	std	Z+1, r25	; 0x01
    4530:	a2 83       	std	Z+2, r26	; 0x02
    4532:	b3 83       	std	Z+3, r27	; 0x03
    4534:	81 e0       	ldi	r24, 0x01	; 1
    4536:	01 c0       	rjmp	.+2      	; 0x453a <_ZN15Adafruit_CC300012getIPAddressEPmS0_S0_S0_S0_+0xb4>

  return true;
    4538:	80 e0       	ldi	r24, 0x00	; 0
}
    453a:	ea 96       	adiw	r28, 0x3a	; 58
    453c:	0f b6       	in	r0, 0x3f	; 63
    453e:	f8 94       	cli
    4540:	de bf       	out	0x3e, r29	; 62
    4542:	0f be       	out	0x3f, r0	; 63
    4544:	cd bf       	out	0x3d, r28	; 61
    4546:	cf 91       	pop	r28
    4548:	df 91       	pop	r29
    454a:	1f 91       	pop	r17
    454c:	0f 91       	pop	r16
    454e:	ff 90       	pop	r15
    4550:	ef 90       	pop	r14
    4552:	df 90       	pop	r13
    4554:	cf 90       	pop	r12
    4556:	bf 90       	pop	r11
    4558:	af 90       	pop	r10
    455a:	9f 90       	pop	r9
    455c:	8f 90       	pop	r8
    455e:	08 95       	ret

00004560 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l>:

    @returns  False if an error occured!
*/
/**************************************************************************/
#ifndef CC3000_TINY_DRIVER
bool Adafruit_CC3000::connectSecure(const char *ssid, const char *key, int32_t secMode)
    4560:	2f 92       	push	r2
    4562:	3f 92       	push	r3
    4564:	4f 92       	push	r4
    4566:	5f 92       	push	r5
    4568:	6f 92       	push	r6
    456a:	7f 92       	push	r7
    456c:	8f 92       	push	r8
    456e:	9f 92       	push	r9
    4570:	af 92       	push	r10
    4572:	bf 92       	push	r11
    4574:	cf 92       	push	r12
    4576:	df 92       	push	r13
    4578:	ef 92       	push	r14
    457a:	ff 92       	push	r15
    457c:	0f 93       	push	r16
    457e:	1f 93       	push	r17
    4580:	fc 01       	movw	r30, r24
    4582:	d6 2e       	mov	r13, r22
    4584:	c7 2e       	mov	r12, r23
    4586:	34 2e       	mov	r3, r20
    4588:	25 2e       	mov	r2, r21
{
  if (!_initialised) {
    458a:	80 81       	ld	r24, Z
    458c:	88 23       	and	r24, r24
    458e:	09 f4       	brne	.+2      	; 0x4592 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0x32>
    4590:	66 c0       	rjmp	.+204    	; 0x465e <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0xfe>
    return false;
  }
  
  if ( (secMode < 0) || (secMode > 3)) {
    4592:	28 01       	movw	r4, r16
    4594:	39 01       	movw	r6, r18
    4596:	84 e0       	ldi	r24, 0x04	; 4
    4598:	48 16       	cp	r4, r24
    459a:	51 04       	cpc	r5, r1
    459c:	61 04       	cpc	r6, r1
    459e:	71 04       	cpc	r7, r1
    45a0:	08 f0       	brcs	.+2      	; 0x45a4 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0x44>
    45a2:	5d c0       	rjmp	.+186    	; 0x465e <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0xfe>
      CC3KPrinter->println(F("Security mode must be between 0 and 3"));
    }
    return false;
  }

  if (strlen(ssid) > MAXSSID) {
    45a4:	a6 2f       	mov	r26, r22
    45a6:	b7 2f       	mov	r27, r23
    45a8:	fd 01       	movw	r30, r26
    45aa:	01 90       	ld	r0, Z+
    45ac:	00 20       	and	r0, r0
    45ae:	e9 f7       	brne	.-6      	; 0x45aa <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0x4a>
    45b0:	31 97       	sbiw	r30, 0x01	; 1
    45b2:	ea 1b       	sub	r30, r26
    45b4:	fb 0b       	sbc	r31, r27
    45b6:	b1 97       	sbiw	r30, 0x21	; 33
    45b8:	08 f0       	brcs	.+2      	; 0x45bc <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0x5c>
    45ba:	51 c0       	rjmp	.+162    	; 0x465e <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0xfe>
      CC3KPrinter->println(MAXSSID);
    }
    return false;
  }

  if (strlen(key) > MAXLENGTHKEY) {
    45bc:	a4 2f       	mov	r26, r20
    45be:	b5 2f       	mov	r27, r21
    45c0:	fd 01       	movw	r30, r26
    45c2:	01 90       	ld	r0, Z+
    45c4:	00 20       	and	r0, r0
    45c6:	e9 f7       	brne	.-6      	; 0x45c2 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0x62>
    45c8:	31 97       	sbiw	r30, 0x01	; 1
    45ca:	ea 1b       	sub	r30, r26
    45cc:	fb 0b       	sbc	r31, r27
    45ce:	b1 97       	sbiw	r30, 0x21	; 33
    45d0:	08 f0       	brcs	.+2      	; 0x45d4 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0x74>
    45d2:	45 c0       	rjmp	.+138    	; 0x465e <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0xfe>
      CC3KPrinter->println(MAXLENGTHKEY);
    }
    return false;
  }

  CHECK_SUCCESS(wlan_ioctl_set_connection_policy(0, 0, 0),
    45d4:	60 e0       	ldi	r22, 0x00	; 0
    45d6:	70 e0       	ldi	r23, 0x00	; 0
    45d8:	80 e0       	ldi	r24, 0x00	; 0
    45da:	90 e0       	ldi	r25, 0x00	; 0
    45dc:	20 e0       	ldi	r18, 0x00	; 0
    45de:	30 e0       	ldi	r19, 0x00	; 0
    45e0:	40 e0       	ldi	r20, 0x00	; 0
    45e2:	50 e0       	ldi	r21, 0x00	; 0
    45e4:	ee 24       	eor	r14, r14
    45e6:	ff 24       	eor	r15, r15
    45e8:	87 01       	movw	r16, r14
    45ea:	0e 94 21 1b 	call	0x3642	; 0x3642 <wlan_ioctl_set_connection_policy>
    45ee:	61 15       	cp	r22, r1
    45f0:	71 05       	cpc	r23, r1
    45f2:	81 05       	cpc	r24, r1
    45f4:	91 05       	cpc	r25, r1
    45f6:	99 f5       	brne	.+102    	; 0x465e <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0xfe>
                "Failed setting the connection policy",
                false);
  delay(500);
    45f8:	64 ef       	ldi	r22, 0xF4	; 244
    45fa:	71 e0       	ldi	r23, 0x01	; 1
    45fc:	80 e0       	ldi	r24, 0x00	; 0
    45fe:	90 e0       	ldi	r25, 0x00	; 0
    4600:	0e 94 48 36 	call	0x6c90	; 0x6c90 <delay>
  CHECK_SUCCESS(wlan_connect(secMode, (char *)ssid, strlen(ssid),
    4604:	ed 2d       	mov	r30, r13
    4606:	fc 2d       	mov	r31, r12
    4608:	df 01       	movw	r26, r30
    460a:	0d 90       	ld	r0, X+
    460c:	00 20       	and	r0, r0
    460e:	e9 f7       	brne	.-6      	; 0x460a <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0xaa>
    4610:	8d 01       	movw	r16, r26
    4612:	01 50       	subi	r16, 0x01	; 1
    4614:	10 40       	sbci	r17, 0x00	; 0
    4616:	0e 1b       	sub	r16, r30
    4618:	1f 0b       	sbc	r17, r31
    461a:	e3 2d       	mov	r30, r3
    461c:	f2 2d       	mov	r31, r2
    461e:	df 01       	movw	r26, r30
    4620:	0d 90       	ld	r0, X+
    4622:	00 20       	and	r0, r0
    4624:	e9 f7       	brne	.-6      	; 0x4620 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0xc0>
    4626:	4d 01       	movw	r8, r26
    4628:	08 94       	sec
    462a:	81 08       	sbc	r8, r1
    462c:	91 08       	sbc	r9, r1
    462e:	8e 1a       	sub	r8, r30
    4630:	9f 0a       	sbc	r9, r31
    4632:	20 e0       	ldi	r18, 0x00	; 0
    4634:	30 e0       	ldi	r19, 0x00	; 0
    4636:	aa 24       	eor	r10, r10
    4638:	bb 24       	eor	r11, r11
    463a:	c3 01       	movw	r24, r6
    463c:	b2 01       	movw	r22, r4
    463e:	4d 2d       	mov	r20, r13
    4640:	5c 2d       	mov	r21, r12
    4642:	ee 24       	eor	r14, r14
    4644:	ff 24       	eor	r15, r15
    4646:	c3 2c       	mov	r12, r3
    4648:	d2 2c       	mov	r13, r2
    464a:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <wlan_connect>
    464e:	20 e0       	ldi	r18, 0x00	; 0
    4650:	61 15       	cp	r22, r1
    4652:	71 05       	cpc	r23, r1
    4654:	81 05       	cpc	r24, r1
    4656:	91 05       	cpc	r25, r1
    4658:	19 f4       	brne	.+6      	; 0x4660 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0x100>
    465a:	21 e0       	ldi	r18, 0x01	; 1
    465c:	01 c0       	rjmp	.+2      	; 0x4660 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l+0x100>
    465e:	20 e0       	ldi	r18, 0x00	; 0
                "SSID connection failed", false);

  /* Wait for 'HCI_EVNT_WLAN_UNSOL_CONNECT' in CC3000_UsynchCallback */

  return true;
}
    4660:	82 2f       	mov	r24, r18
    4662:	1f 91       	pop	r17
    4664:	0f 91       	pop	r16
    4666:	ff 90       	pop	r15
    4668:	ef 90       	pop	r14
    466a:	df 90       	pop	r13
    466c:	cf 90       	pop	r12
    466e:	bf 90       	pop	r11
    4670:	af 90       	pop	r10
    4672:	9f 90       	pop	r9
    4674:	8f 90       	pop	r8
    4676:	7f 90       	pop	r7
    4678:	6f 90       	pop	r6
    467a:	5f 90       	pop	r5
    467c:	4f 90       	pop	r4
    467e:	3f 90       	pop	r3
    4680:	2f 90       	pop	r2
    4682:	08 95       	ret

00004684 <_ZN15Adafruit_CC300011connectOpenEPKc>:
    @param  ssid      The named of the AP to connect to (max 32 chars)

    @returns  False if an error occured!
*/
/**************************************************************************/
bool Adafruit_CC3000::connectOpen(const char *ssid)
    4684:	8f 92       	push	r8
    4686:	9f 92       	push	r9
    4688:	af 92       	push	r10
    468a:	bf 92       	push	r11
    468c:	cf 92       	push	r12
    468e:	df 92       	push	r13
    4690:	ef 92       	push	r14
    4692:	ff 92       	push	r15
    4694:	0f 93       	push	r16
    4696:	1f 93       	push	r17
    4698:	fc 01       	movw	r30, r24
    469a:	d6 2e       	mov	r13, r22
    469c:	c7 2e       	mov	r12, r23
{
  if (!_initialised) {
    469e:	80 81       	ld	r24, Z
    46a0:	88 23       	and	r24, r24
    46a2:	e1 f1       	breq	.+120    	; 0x471c <_ZN15Adafruit_CC300011connectOpenEPKc+0x98>
    return false;
  }

  #ifndef CC3000_TINY_DRIVER
    CHECK_SUCCESS(wlan_ioctl_set_connection_policy(0, 0, 0),
    46a4:	60 e0       	ldi	r22, 0x00	; 0
    46a6:	70 e0       	ldi	r23, 0x00	; 0
    46a8:	80 e0       	ldi	r24, 0x00	; 0
    46aa:	90 e0       	ldi	r25, 0x00	; 0
    46ac:	20 e0       	ldi	r18, 0x00	; 0
    46ae:	30 e0       	ldi	r19, 0x00	; 0
    46b0:	40 e0       	ldi	r20, 0x00	; 0
    46b2:	50 e0       	ldi	r21, 0x00	; 0
    46b4:	ee 24       	eor	r14, r14
    46b6:	ff 24       	eor	r15, r15
    46b8:	87 01       	movw	r16, r14
    46ba:	0e 94 21 1b 	call	0x3642	; 0x3642 <wlan_ioctl_set_connection_policy>
    46be:	61 15       	cp	r22, r1
    46c0:	71 05       	cpc	r23, r1
    46c2:	81 05       	cpc	r24, r1
    46c4:	91 05       	cpc	r25, r1
    46c6:	51 f5       	brne	.+84     	; 0x471c <_ZN15Adafruit_CC300011connectOpenEPKc+0x98>
                 "Failed to set connection policy", false);
    delay(500);
    46c8:	64 ef       	ldi	r22, 0xF4	; 244
    46ca:	71 e0       	ldi	r23, 0x01	; 1
    46cc:	80 e0       	ldi	r24, 0x00	; 0
    46ce:	90 e0       	ldi	r25, 0x00	; 0
    46d0:	0e 94 48 36 	call	0x6c90	; 0x6c90 <delay>
    CHECK_SUCCESS(wlan_connect(WLAN_SEC_UNSEC,
    46d4:	ed 2d       	mov	r30, r13
    46d6:	fc 2d       	mov	r31, r12
    46d8:	df 01       	movw	r26, r30
    46da:	0d 90       	ld	r0, X+
    46dc:	00 20       	and	r0, r0
    46de:	e9 f7       	brne	.-6      	; 0x46da <_ZN15Adafruit_CC300011connectOpenEPKc+0x56>
    46e0:	8d 01       	movw	r16, r26
    46e2:	01 50       	subi	r16, 0x01	; 1
    46e4:	10 40       	sbci	r17, 0x00	; 0
    46e6:	0e 1b       	sub	r16, r30
    46e8:	1f 0b       	sbc	r17, r31
    46ea:	20 e0       	ldi	r18, 0x00	; 0
    46ec:	30 e0       	ldi	r19, 0x00	; 0
    46ee:	60 e0       	ldi	r22, 0x00	; 0
    46f0:	70 e0       	ldi	r23, 0x00	; 0
    46f2:	80 e0       	ldi	r24, 0x00	; 0
    46f4:	90 e0       	ldi	r25, 0x00	; 0
    46f6:	4d 2d       	mov	r20, r13
    46f8:	5c 2d       	mov	r21, r12
    46fa:	ee 24       	eor	r14, r14
    46fc:	ff 24       	eor	r15, r15
    46fe:	cc 24       	eor	r12, r12
    4700:	dd 24       	eor	r13, r13
    4702:	88 24       	eor	r8, r8
    4704:	99 24       	eor	r9, r9
    4706:	54 01       	movw	r10, r8
    4708:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <wlan_connect>
    470c:	20 e0       	ldi	r18, 0x00	; 0
    470e:	61 15       	cp	r22, r1
    4710:	71 05       	cpc	r23, r1
    4712:	81 05       	cpc	r24, r1
    4714:	91 05       	cpc	r25, r1
    4716:	19 f4       	brne	.+6      	; 0x471e <_ZN15Adafruit_CC300011connectOpenEPKc+0x9a>
    4718:	21 e0       	ldi	r18, 0x01	; 1
    471a:	01 c0       	rjmp	.+2      	; 0x471e <_ZN15Adafruit_CC300011connectOpenEPKc+0x9a>
    471c:	20 e0       	ldi	r18, 0x00	; 0
  #else
    wlan_connect(ssid, strlen(ssid));
  #endif

  return true;
}
    471e:	82 2f       	mov	r24, r18
    4720:	1f 91       	pop	r17
    4722:	0f 91       	pop	r16
    4724:	ff 90       	pop	r15
    4726:	ef 90       	pop	r14
    4728:	df 90       	pop	r13
    472a:	cf 90       	pop	r12
    472c:	bf 90       	pop	r11
    472e:	af 90       	pop	r10
    4730:	9f 90       	pop	r9
    4732:	8f 90       	pop	r8
    4734:	08 95       	ret

00004736 <_ZN15Adafruit_CC300014printIPdotsRevEm>:
/*!
    @brief  Helper function to display an IP address with dots, printing
            the bytes in reverse order
*/
/**************************************************************************/
void Adafruit_CC3000::printIPdotsRev(uint32_t ip) {
    4736:	ef 92       	push	r14
    4738:	ff 92       	push	r15
    473a:	0f 93       	push	r16
    473c:	1f 93       	push	r17
    473e:	7a 01       	movw	r14, r20
    4740:	8b 01       	movw	r16, r22
  if (CC3KPrinter == 0) return;
    4742:	80 91 d6 02 	lds	r24, 0x02D6
    4746:	90 91 d7 02 	lds	r25, 0x02D7
    474a:	00 97       	sbiw	r24, 0x00	; 0
    474c:	09 f4       	brne	.+2      	; 0x4750 <_ZN15Adafruit_CC300014printIPdotsRevEm+0x1a>
    474e:	40 c0       	rjmp	.+128    	; 0x47d0 <_ZN15Adafruit_CC300014printIPdotsRevEm+0x9a>
  CC3KPrinter->print((uint8_t)(ip >> 24));
    4750:	27 2f       	mov	r18, r23
    4752:	33 27       	eor	r19, r19
    4754:	44 27       	eor	r20, r20
    4756:	55 27       	eor	r21, r21
    4758:	62 2f       	mov	r22, r18
    475a:	4a e0       	ldi	r20, 0x0A	; 10
    475c:	50 e0       	ldi	r21, 0x00	; 0
    475e:	0e 94 b9 34 	call	0x6972	; 0x6972 <_ZN5Print5printEhi>
  CC3KPrinter->print('.');
    4762:	80 91 d6 02 	lds	r24, 0x02D6
    4766:	90 91 d7 02 	lds	r25, 0x02D7
    476a:	6e e2       	ldi	r22, 0x2E	; 46
    476c:	0e 94 ee 33 	call	0x67dc	; 0x67dc <_ZN5Print5printEc>
  CC3KPrinter->print((uint8_t)(ip >> 16));
    4770:	98 01       	movw	r18, r16
    4772:	44 27       	eor	r20, r20
    4774:	55 27       	eor	r21, r21
    4776:	80 91 d6 02 	lds	r24, 0x02D6
    477a:	90 91 d7 02 	lds	r25, 0x02D7
    477e:	62 2f       	mov	r22, r18
    4780:	4a e0       	ldi	r20, 0x0A	; 10
    4782:	50 e0       	ldi	r21, 0x00	; 0
    4784:	0e 94 b9 34 	call	0x6972	; 0x6972 <_ZN5Print5printEhi>
  CC3KPrinter->print('.');
    4788:	80 91 d6 02 	lds	r24, 0x02D6
    478c:	90 91 d7 02 	lds	r25, 0x02D7
    4790:	6e e2       	ldi	r22, 0x2E	; 46
    4792:	0e 94 ee 33 	call	0x67dc	; 0x67dc <_ZN5Print5printEc>
  CC3KPrinter->print((uint8_t)(ip >> 8));
    4796:	55 27       	eor	r21, r21
    4798:	41 2f       	mov	r20, r17
    479a:	30 2f       	mov	r19, r16
    479c:	2f 2d       	mov	r18, r15
    479e:	80 91 d6 02 	lds	r24, 0x02D6
    47a2:	90 91 d7 02 	lds	r25, 0x02D7
    47a6:	62 2f       	mov	r22, r18
    47a8:	4a e0       	ldi	r20, 0x0A	; 10
    47aa:	50 e0       	ldi	r21, 0x00	; 0
    47ac:	0e 94 b9 34 	call	0x6972	; 0x6972 <_ZN5Print5printEhi>
  CC3KPrinter->print('.');
    47b0:	80 91 d6 02 	lds	r24, 0x02D6
    47b4:	90 91 d7 02 	lds	r25, 0x02D7
    47b8:	6e e2       	ldi	r22, 0x2E	; 46
    47ba:	0e 94 ee 33 	call	0x67dc	; 0x67dc <_ZN5Print5printEc>
  CC3KPrinter->print((uint8_t)(ip));  
    47be:	80 91 d6 02 	lds	r24, 0x02D6
    47c2:	90 91 d7 02 	lds	r25, 0x02D7
    47c6:	6e 2d       	mov	r22, r14
    47c8:	4a e0       	ldi	r20, 0x0A	; 10
    47ca:	50 e0       	ldi	r21, 0x00	; 0
    47cc:	0e 94 b9 34 	call	0x6972	; 0x6972 <_ZN5Print5printEhi>
}
    47d0:	1f 91       	pop	r17
    47d2:	0f 91       	pop	r16
    47d4:	ff 90       	pop	r15
    47d6:	ef 90       	pop	r14
    47d8:	08 95       	ret

000047da <_ZN15Adafruit_CC30005beginEhbPKc>:
              that were stored on the device from the SmartConfig process,
              otherwise false to erase existing profiles and start a
              clean connection
*/
/**************************************************************************/
bool Adafruit_CC3000::begin(uint8_t patchReq, bool useSmartConfigData, const char *_deviceName)
    47da:	6f 92       	push	r6
    47dc:	7f 92       	push	r7
    47de:	8f 92       	push	r8
    47e0:	9f 92       	push	r9
    47e2:	af 92       	push	r10
    47e4:	bf 92       	push	r11
    47e6:	cf 92       	push	r12
    47e8:	df 92       	push	r13
    47ea:	ef 92       	push	r14
    47ec:	ff 92       	push	r15
    47ee:	0f 93       	push	r16
    47f0:	1f 93       	push	r17
    47f2:	cf 93       	push	r28
    47f4:	df 93       	push	r29
    47f6:	ec 01       	movw	r28, r24
    47f8:	96 2e       	mov	r9, r22
    47fa:	84 2e       	mov	r8, r20
    47fc:	72 2e       	mov	r7, r18
    47fe:	63 2e       	mov	r6, r19
{
  if (_initialised) return true;
    4800:	88 81       	ld	r24, Y
    4802:	88 23       	and	r24, r24
    4804:	09 f0       	breq	.+2      	; 0x4808 <_ZN15Adafruit_CC30005beginEhbPKc+0x2e>
    4806:	91 c0       	rjmp	.+290    	; 0x492a <_ZN15Adafruit_CC30005beginEhbPKc+0x150>
  #endif
  g_IRQnum = digitalPinToInterrupt(g_irqPin);
  #elif !defined(CORE_ADAX)
  // determine irq #
  for (uint8_t i=0; i<sizeof(dreqinttable); i+=2) {
    if (g_irqPin == dreqinttable[i]) {
    4808:	90 91 9c 02 	lds	r25, 0x029C
    480c:	80 91 9e 02 	lds	r24, 0x029E
    4810:	92 30       	cpi	r25, 0x02	; 2
    4812:	11 f4       	brne	.+4      	; 0x4818 <_ZN15Adafruit_CC30005beginEhbPKc+0x3e>
      g_IRQnum = dreqinttable[i+1];
    4814:	80 e0       	ldi	r24, 0x00	; 0
    4816:	03 c0       	rjmp	.+6      	; 0x481e <_ZN15Adafruit_CC30005beginEhbPKc+0x44>
  #endif
  g_IRQnum = digitalPinToInterrupt(g_irqPin);
  #elif !defined(CORE_ADAX)
  // determine irq #
  for (uint8_t i=0; i<sizeof(dreqinttable); i+=2) {
    if (g_irqPin == dreqinttable[i]) {
    4818:	93 30       	cpi	r25, 0x03	; 3
    481a:	09 f4       	brne	.+2      	; 0x481e <_ZN15Adafruit_CC30005beginEhbPKc+0x44>
      g_IRQnum = dreqinttable[i+1];
    481c:	81 e0       	ldi	r24, 0x01	; 1
    481e:	80 93 9e 02 	sts	0x029E, r24
    }
  }
  if (g_IRQnum == 0xFF) {
    4822:	8f 3f       	cpi	r24, 0xFF	; 255
    4824:	09 f4       	brne	.+2      	; 0x4828 <_ZN15Adafruit_CC30005beginEhbPKc+0x4e>
    4826:	83 c0       	rjmp	.+262    	; 0x492e <_ZN15Adafruit_CC30005beginEhbPKc+0x154>
  #else
  g_IRQnum = g_irqPin;
  // (almost) every single pin on Xmega supports interrupt
  #endif

  init_spi();
    4828:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <_Z8init_spiv>
  wlan_init(CC3000_UsynchCallback,
            sendWLFWPatch, sendDriverPatch, sendBootLoaderPatch,
            ReadWlanInterruptPin,
            WlanInterruptEnable,
            WlanInterruptDisable,
            WriteWlanPin);
    482c:	88 ec       	ldi	r24, 0xC8	; 200
    482e:	91 e2       	ldi	r25, 0x21	; 33
    4830:	62 e6       	ldi	r22, 0x62	; 98
    4832:	79 e2       	ldi	r23, 0x29	; 41
    4834:	42 e5       	ldi	r20, 0x52	; 82
    4836:	59 e2       	ldi	r21, 0x29	; 41
    4838:	2a e5       	ldi	r18, 0x5A	; 90
    483a:	39 e2       	ldi	r19, 0x29	; 41
    483c:	0a e6       	ldi	r16, 0x6A	; 106
    483e:	19 e2       	ldi	r17, 0x29	; 41
    4840:	b8 ec       	ldi	r27, 0xC8	; 200
    4842:	eb 2e       	mov	r14, r27
    4844:	b9 e2       	ldi	r27, 0x29	; 41
    4846:	fb 2e       	mov	r15, r27
    4848:	a2 e8       	ldi	r26, 0x82	; 130
    484a:	ca 2e       	mov	r12, r26
    484c:	a9 e2       	ldi	r26, 0x29	; 41
    484e:	da 2e       	mov	r13, r26
    4850:	f6 e7       	ldi	r31, 0x76	; 118
    4852:	af 2e       	mov	r10, r31
    4854:	f9 e2       	ldi	r31, 0x29	; 41
    4856:	bf 2e       	mov	r11, r31
    4858:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <wlan_init>
  DEBUGPRINT_F("start\n\r");

  wlan_start(patchReq);
    485c:	89 2d       	mov	r24, r9
    485e:	90 e0       	ldi	r25, 0x00	; 0
    4860:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <wlan_start>
  
  DEBUGPRINT_F("ioctl\n\r");
  // Check if we should erase previous stored connection details
  // (most likely written with data from the SmartConfig app)
  if (!useSmartConfigData)
    4864:	88 20       	and	r8, r8
    4866:	a1 f4       	brne	.+40     	; 0x4890 <_ZN15Adafruit_CC30005beginEhbPKc+0xb6>
  {
    // Manual connection only (no auto, profiles, etc.)
    wlan_ioctl_set_connection_policy(0, 0, 0);
    4868:	60 e0       	ldi	r22, 0x00	; 0
    486a:	70 e0       	ldi	r23, 0x00	; 0
    486c:	80 e0       	ldi	r24, 0x00	; 0
    486e:	90 e0       	ldi	r25, 0x00	; 0
    4870:	20 e0       	ldi	r18, 0x00	; 0
    4872:	30 e0       	ldi	r19, 0x00	; 0
    4874:	40 e0       	ldi	r20, 0x00	; 0
    4876:	50 e0       	ldi	r21, 0x00	; 0
    4878:	ee 24       	eor	r14, r14
    487a:	ff 24       	eor	r15, r15
    487c:	87 01       	movw	r16, r14
    487e:	0e 94 21 1b 	call	0x3642	; 0x3642 <wlan_ioctl_set_connection_policy>
    // Delete previous profiles from memory
    wlan_ioctl_del_profile(255);
    4882:	6f ef       	ldi	r22, 0xFF	; 255
    4884:	70 e0       	ldi	r23, 0x00	; 0
    4886:	80 e0       	ldi	r24, 0x00	; 0
    4888:	90 e0       	ldi	r25, 0x00	; 0
    488a:	0e 94 ed 1a 	call	0x35da	; 0x35da <wlan_ioctl_del_profile>
    488e:	0f c0       	rjmp	.+30     	; 0x48ae <_ZN15Adafruit_CC30005beginEhbPKc+0xd4>
    
    // Fast Connect - the CC3000 device tries to reconnect to the last AP connected to:
    // wlan_ioctl_set_connection_policy(0, 1, 0)

    // Use Profiles - the CC3000 device tries to connect to an AP from profiles:
    wlan_ioctl_set_connection_policy(0, 0, 1);
    4890:	60 e0       	ldi	r22, 0x00	; 0
    4892:	70 e0       	ldi	r23, 0x00	; 0
    4894:	80 e0       	ldi	r24, 0x00	; 0
    4896:	90 e0       	ldi	r25, 0x00	; 0
    4898:	20 e0       	ldi	r18, 0x00	; 0
    489a:	30 e0       	ldi	r19, 0x00	; 0
    489c:	40 e0       	ldi	r20, 0x00	; 0
    489e:	50 e0       	ldi	r21, 0x00	; 0
    48a0:	e1 e0       	ldi	r30, 0x01	; 1
    48a2:	ee 2e       	mov	r14, r30
    48a4:	f1 2c       	mov	r15, r1
    48a6:	01 2d       	mov	r16, r1
    48a8:	11 2d       	mov	r17, r1
    48aa:	0e 94 21 1b 	call	0x3642	; 0x3642 <wlan_ioctl_set_connection_policy>
  }

  CHECK_SUCCESS(
    48ae:	64 e0       	ldi	r22, 0x04	; 4
    48b0:	72 e8       	ldi	r23, 0x82	; 130
    48b2:	80 e0       	ldi	r24, 0x00	; 0
    48b4:	90 e0       	ldi	r25, 0x00	; 0
    48b6:	0e 94 05 1a 	call	0x340a	; 0x340a <wlan_set_event_mask>
    48ba:	61 15       	cp	r22, r1
    48bc:	71 05       	cpc	r23, r1
    48be:	81 05       	cpc	r24, r1
    48c0:	91 05       	cpc	r25, r1
    48c2:	a9 f5       	brne	.+106    	; 0x492e <_ZN15Adafruit_CC30005beginEhbPKc+0x154>
                        //HCI_EVNT_BSD_TCP_CLOSE_WAIT |
                        //HCI_EVNT_WLAN_TX_COMPLETE |
                        HCI_EVNT_WLAN_KEEPALIVE),
                        "WLAN Set Event Mask FAIL", false);

  _initialised = true;
    48c4:	81 e0       	ldi	r24, 0x01	; 1
    48c6:	88 83       	st	Y, r24

  // Wait for re-connection if we're using SmartConfig data
  if (useSmartConfigData)
    48c8:	88 20       	and	r8, r8
    48ca:	79 f1       	breq	.+94     	; 0x492a <_ZN15Adafruit_CC30005beginEhbPKc+0x150>
    48cc:	00 e0       	ldi	r16, 0x00	; 0
    48ce:	10 e0       	ldi	r17, 0x00	; 0
    48d0:	0e c0       	rjmp	.+28     	; 0x48ee <_ZN15Adafruit_CC30005beginEhbPKc+0x114>
  {
    // Wait for a connection
    uint32_t timeout = 0;
    while(!cc3000Bitset.test(CC3000BitSet::IsConnected))
    {
      cc3k_int_poll();
    48d2:	0e 94 0a 2b 	call	0x5614	; 0x5614 <cc3k_int_poll>
    48d6:	0f 5f       	subi	r16, 0xFF	; 255
    48d8:	1f 4f       	sbci	r17, 0xFF	; 255
      if(timeout > WLAN_CONNECT_TIMEOUT)
    48da:	83 e0       	ldi	r24, 0x03	; 3
    48dc:	0a 3e       	cpi	r16, 0xEA	; 234
    48de:	18 07       	cpc	r17, r24
    48e0:	31 f1       	breq	.+76     	; 0x492e <_ZN15Adafruit_CC30005beginEhbPKc+0x154>
          CC3KPrinter->println(F("Timed out using SmartConfig data"));
        }
        return false;
      }
      timeout += 10;
      delay(10);
    48e2:	6a e0       	ldi	r22, 0x0A	; 10
    48e4:	70 e0       	ldi	r23, 0x00	; 0
    48e6:	80 e0       	ldi	r24, 0x00	; 0
    48e8:	90 e0       	ldi	r25, 0x00	; 0
    48ea:	0e 94 48 36 	call	0x6c90	; 0x6c90 <delay>
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    48ee:	80 91 d5 02 	lds	r24, 0x02D5
  // Wait for re-connection if we're using SmartConfig data
  if (useSmartConfigData)
  {
    // Wait for a connection
    uint32_t timeout = 0;
    while(!cc3000Bitset.test(CC3000BitSet::IsConnected))
    48f2:	81 ff       	sbrs	r24, 1
    48f4:	ee cf       	rjmp	.-36     	; 0x48d2 <_ZN15Adafruit_CC30005beginEhbPKc+0xf8>
      }
      timeout += 10;
      delay(10);
    }
    
    delay(1000);  
    48f6:	68 ee       	ldi	r22, 0xE8	; 232
    48f8:	73 e0       	ldi	r23, 0x03	; 3
    48fa:	80 e0       	ldi	r24, 0x00	; 0
    48fc:	90 e0       	ldi	r25, 0x00	; 0
    48fe:	0e 94 48 36 	call	0x6c90	; 0x6c90 <delay>
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    4902:	80 91 d5 02 	lds	r24, 0x02D5
      timeout += 10;
      delay(10);
    }
    
    delay(1000);  
    if (cc3000Bitset.test(CC3000BitSet::HasDHCP))
    4906:	82 ff       	sbrs	r24, 2
    4908:	10 c0       	rjmp	.+32     	; 0x492a <_ZN15Adafruit_CC30005beginEhbPKc+0x150>
    {
      mdnsAdvertiser(1, (char *) _deviceName, strlen(_deviceName));
    490a:	e7 2d       	mov	r30, r7
    490c:	f6 2d       	mov	r31, r6
    490e:	df 01       	movw	r26, r30
    4910:	0d 90       	ld	r0, X+
    4912:	00 20       	and	r0, r0
    4914:	e9 f7       	brne	.-6      	; 0x4910 <_ZN15Adafruit_CC30005beginEhbPKc+0x136>
    4916:	11 97       	sbiw	r26, 0x01	; 1
    4918:	ae 1b       	sub	r26, r30
    491a:	bf 0b       	sbc	r27, r31
    491c:	81 e0       	ldi	r24, 0x01	; 1
    491e:	90 e0       	ldi	r25, 0x00	; 0
    4920:	67 2d       	mov	r22, r7
    4922:	76 2d       	mov	r23, r6
    4924:	ad 01       	movw	r20, r26
    4926:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <mdnsAdvertiser>
    492a:	81 e0       	ldi	r24, 0x01	; 1
    492c:	01 c0       	rjmp	.+2      	; 0x4930 <_ZN15Adafruit_CC30005beginEhbPKc+0x156>
    492e:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
    
  return true;
}
    4930:	df 91       	pop	r29
    4932:	cf 91       	pop	r28
    4934:	1f 91       	pop	r17
    4936:	0f 91       	pop	r16
    4938:	ff 90       	pop	r15
    493a:	ef 90       	pop	r14
    493c:	df 90       	pop	r13
    493e:	cf 90       	pop	r12
    4940:	bf 90       	pop	r11
    4942:	af 90       	pop	r10
    4944:	9f 90       	pop	r9
    4946:	8f 90       	pop	r8
    4948:	7f 90       	pop	r7
    494a:	6f 90       	pop	r6
    494c:	08 95       	ret

0000494e <_ZN15Adafruit_CC30009scanSSIDsEm>:

    @returns  False if an error occured!
*/
/**************************************************************************/
#ifndef CC3000_TINY_DRIVER
bool Adafruit_CC3000::scanSSIDs(uint32_t time)
    494e:	af 92       	push	r10
    4950:	bf 92       	push	r11
    4952:	cf 92       	push	r12
    4954:	df 92       	push	r13
    4956:	ef 92       	push	r14
    4958:	ff 92       	push	r15
    495a:	0f 93       	push	r16
    495c:	1f 93       	push	r17
    495e:	cf 93       	push	r28
    4960:	df 93       	push	r29
    4962:	fc 01       	movw	r30, r24
{
  const unsigned long intervalTime[16] = { 2000, 2000, 2000, 2000,  2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000 };

  if (!_initialised)
    4964:	80 81       	ld	r24, Z
    4966:	88 23       	and	r24, r24
    4968:	11 f4       	brne	.+4      	; 0x496e <_ZN15Adafruit_CC30009scanSSIDsEm+0x20>
    496a:	20 e0       	ldi	r18, 0x00	; 0
    496c:	4f c0       	rjmp	.+158    	; 0x4a0c <_ZN15Adafruit_CC30009scanSSIDsEm+0xbe>
      CC3KPrinter->println(F("Started AP/SSID scan\n\r"));
    }
  }

  // Set  SSID Scan params to includes channels above 11 
  CHECK_SUCCESS(
    496e:	8d b7       	in	r24, 0x3d	; 61
    4970:	9e b7       	in	r25, 0x3e	; 62
    4972:	42 97       	sbiw	r24, 0x12	; 18
    4974:	0f b6       	in	r0, 0x3f	; 63
    4976:	f8 94       	cli
    4978:	9e bf       	out	0x3e, r25	; 62
    497a:	0f be       	out	0x3f, r0	; 63
    497c:	8d bf       	out	0x3d, r24	; 61
    497e:	ed b7       	in	r30, 0x3d	; 61
    4980:	fe b7       	in	r31, 0x3e	; 62
    4982:	31 96       	adiw	r30, 0x01	; 1
    4984:	8f ef       	ldi	r24, 0xFF	; 255
    4986:	9f e1       	ldi	r25, 0x1F	; 31
    4988:	a0 e0       	ldi	r26, 0x00	; 0
    498a:	b0 e0       	ldi	r27, 0x00	; 0
    498c:	cd b7       	in	r28, 0x3d	; 61
    498e:	de b7       	in	r29, 0x3e	; 62
    4990:	89 83       	std	Y+1, r24	; 0x01
    4992:	9a 83       	std	Y+2, r25	; 0x02
    4994:	ab 83       	std	Y+3, r26	; 0x03
    4996:	bc 83       	std	Y+4, r27	; 0x04
    4998:	88 e8       	ldi	r24, 0x88	; 136
    499a:	9f ef       	ldi	r25, 0xFF	; 255
    499c:	af ef       	ldi	r26, 0xFF	; 255
    499e:	bf ef       	ldi	r27, 0xFF	; 255
    49a0:	84 83       	std	Z+4, r24	; 0x04
    49a2:	95 83       	std	Z+5, r25	; 0x05
    49a4:	a6 83       	std	Z+6, r26	; 0x06
    49a6:	b7 83       	std	Z+7, r27	; 0x07
    49a8:	10 86       	std	Z+8, r1	; 0x08
    49aa:	11 86       	std	Z+9, r1	; 0x09
    49ac:	12 86       	std	Z+10, r1	; 0x0a
    49ae:	13 86       	std	Z+11, r1	; 0x0b
    49b0:	8c e2       	ldi	r24, 0x2C	; 44
    49b2:	91 e0       	ldi	r25, 0x01	; 1
    49b4:	a0 e0       	ldi	r26, 0x00	; 0
    49b6:	b0 e0       	ldi	r27, 0x00	; 0
    49b8:	84 87       	std	Z+12, r24	; 0x0c
    49ba:	95 87       	std	Z+13, r25	; 0x0d
    49bc:	a6 87       	std	Z+14, r26	; 0x0e
    49be:	b7 87       	std	Z+15, r27	; 0x0f
    49c0:	80 ef       	ldi	r24, 0xF0	; 240
    49c2:	91 e0       	ldi	r25, 0x01	; 1
    49c4:	91 8b       	std	Z+17, r25	; 0x11
    49c6:	80 8b       	std	Z+16, r24	; 0x10
    49c8:	cb 01       	movw	r24, r22
    49ca:	ba 01       	movw	r22, r20
    49cc:	24 e1       	ldi	r18, 0x14	; 20
    49ce:	30 e0       	ldi	r19, 0x00	; 0
    49d0:	40 e0       	ldi	r20, 0x00	; 0
    49d2:	50 e0       	ldi	r21, 0x00	; 0
    49d4:	f4 e6       	ldi	r31, 0x64	; 100
    49d6:	ef 2e       	mov	r14, r31
    49d8:	f1 2c       	mov	r15, r1
    49da:	01 2d       	mov	r16, r1
    49dc:	11 2d       	mov	r17, r1
    49de:	e5 e0       	ldi	r30, 0x05	; 5
    49e0:	ae 2e       	mov	r10, r30
    49e2:	b1 2c       	mov	r11, r1
    49e4:	c1 2c       	mov	r12, r1
    49e6:	d1 2c       	mov	r13, r1
    49e8:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <wlan_ioctl_set_scan_params>
    49ec:	20 e0       	ldi	r18, 0x00	; 0
    49ee:	4d b7       	in	r20, 0x3d	; 61
    49f0:	5e b7       	in	r21, 0x3e	; 62
    49f2:	4e 5e       	subi	r20, 0xEE	; 238
    49f4:	5f 4f       	sbci	r21, 0xFF	; 255
    49f6:	0f b6       	in	r0, 0x3f	; 63
    49f8:	f8 94       	cli
    49fa:	5e bf       	out	0x3e, r21	; 62
    49fc:	0f be       	out	0x3f, r0	; 63
    49fe:	4d bf       	out	0x3d, r20	; 61
    4a00:	61 15       	cp	r22, r1
    4a02:	71 05       	cpc	r23, r1
    4a04:	81 05       	cpc	r24, r1
    4a06:	91 05       	cpc	r25, r1
    4a08:	09 f4       	brne	.+2      	; 0x4a0c <_ZN15Adafruit_CC30009scanSSIDsEm+0xbe>
    4a0a:	21 e0       	ldi	r18, 0x01	; 1
      wlan_ioctl_set_scan_params(time, 20, 100, 5, 0x1FFF, -120, 0, 300,
          (unsigned long * ) &intervalTime),
          "Failed setting params for SSID scan", false);

  return true;
}
    4a0c:	82 2f       	mov	r24, r18
    4a0e:	df 91       	pop	r29
    4a10:	cf 91       	pop	r28
    4a12:	1f 91       	pop	r17
    4a14:	0f 91       	pop	r16
    4a16:	ff 90       	pop	r15
    4a18:	ef 90       	pop	r14
    4a1a:	df 90       	pop	r13
    4a1c:	cf 90       	pop	r12
    4a1e:	bf 90       	pop	r11
    4a20:	af 90       	pop	r10
    4a22:	08 95       	ret

00004a24 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh>:
  return true;
}
#endif

// Connect with timeout
bool Adafruit_CC3000::connectToAP(const char *ssid, const char *key, uint8_t secmode, uint8_t attempts) {
    4a24:	5f 92       	push	r5
    4a26:	6f 92       	push	r6
    4a28:	7f 92       	push	r7
    4a2a:	8f 92       	push	r8
    4a2c:	9f 92       	push	r9
    4a2e:	af 92       	push	r10
    4a30:	bf 92       	push	r11
    4a32:	cf 92       	push	r12
    4a34:	df 92       	push	r13
    4a36:	ef 92       	push	r14
    4a38:	ff 92       	push	r15
    4a3a:	0f 93       	push	r16
    4a3c:	1f 93       	push	r17
    4a3e:	cf 93       	push	r28
    4a40:	df 93       	push	r29
    4a42:	ec 01       	movw	r28, r24
    4a44:	3b 01       	movw	r6, r22
    4a46:	4a 01       	movw	r8, r20
    4a48:	52 2e       	mov	r5, r18
    4a4a:	a0 2e       	mov	r10, r16
  if (!_initialised) {
    4a4c:	88 81       	ld	r24, Y
    4a4e:	88 23       	and	r24, r24
    4a50:	09 f4       	brne	.+2      	; 0x4a54 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0x30>
    4a52:	52 c0       	rjmp	.+164    	; 0x4af8 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0xd4>
    4a54:	b0 2e       	mov	r11, r16
      }
    } else {
      /* NOTE: Secure connections are not available in 'Tiny' mode! */
#ifndef CC3000_TINY_DRIVER
      /* Connect to a secure network using WPA2, etc */
      if (! connectSecure(ssid, key, secmode)) {
    4a56:	c2 2e       	mov	r12, r18
    4a58:	dd 24       	eor	r13, r13
    4a5a:	ee 24       	eor	r14, r14
    4a5c:	ff 24       	eor	r15, r15
  // If attempts is zero interpret that as no limit on number of retries.
  bool retryForever = attempts == 0;

  do {
    // Stop if the max number of attempts have been tried.
    if (!retryForever) {
    4a5e:	aa 20       	and	r10, r10
    4a60:	51 f0       	breq	.+20     	; 0x4a76 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0x52>
      if (attempts == 0) {
    4a62:	bb 20       	and	r11, r11
    4a64:	39 f4       	brne	.+14     	; 0x4a74 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0x50>
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    4a66:	80 91 d5 02 	lds	r24, 0x02D5
    4a6a:	90 e0       	ldi	r25, 0x00	; 0
    4a6c:	96 95       	lsr	r25
    4a6e:	87 95       	ror	r24
    4a70:	81 70       	andi	r24, 0x01	; 1
    4a72:	42 c0       	rjmp	.+132    	; 0x4af8 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0xd4>
    // Stop if the max number of attempts have been tried.
    if (!retryForever) {
      if (attempts == 0) {
        return checkConnected();
      }
      attempts -= 1;
    4a74:	ba 94       	dec	r11
    }

    cc3k_int_poll();
    4a76:	0e 94 0a 2b 	call	0x5614	; 0x5614 <cc3k_int_poll>
    /* MEME: not sure why this is absolutely required but the cc3k freaks
       if you dont. maybe bootup delay? */
    // Setup a 4 second SSID scan
    scanSSIDs(4000);
    4a7a:	ce 01       	movw	r24, r28
    4a7c:	40 ea       	ldi	r20, 0xA0	; 160
    4a7e:	5f e0       	ldi	r21, 0x0F	; 15
    4a80:	60 e0       	ldi	r22, 0x00	; 0
    4a82:	70 e0       	ldi	r23, 0x00	; 0
    4a84:	0e 94 a7 24 	call	0x494e	; 0x494e <_ZN15Adafruit_CC30009scanSSIDsEm>
    // Wait for results
    delay(4500);
    4a88:	64 e9       	ldi	r22, 0x94	; 148
    4a8a:	71 e1       	ldi	r23, 0x11	; 17
    4a8c:	80 e0       	ldi	r24, 0x00	; 0
    4a8e:	90 e0       	ldi	r25, 0x00	; 0
    4a90:	0e 94 48 36 	call	0x6c90	; 0x6c90 <delay>
    scanSSIDs(0);
    4a94:	ce 01       	movw	r24, r28
    4a96:	40 e0       	ldi	r20, 0x00	; 0
    4a98:	50 e0       	ldi	r21, 0x00	; 0
    4a9a:	60 e0       	ldi	r22, 0x00	; 0
    4a9c:	70 e0       	ldi	r23, 0x00	; 0
    4a9e:	0e 94 a7 24 	call	0x494e	; 0x494e <_ZN15Adafruit_CC30009scanSSIDsEm>
    CHECK_PRINTER {
      CC3KPrinter->print(F("\n\rConnecting to ")); 
      CC3KPrinter->print(ssid);
      CC3KPrinter->print(F("..."));
    }
    if ((secmode == 0) || (strlen(key) == 0)) {
    4aa2:	55 20       	and	r5, r5
    4aa4:	21 f0       	breq	.+8      	; 0x4aae <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0x8a>
    4aa6:	f4 01       	movw	r30, r8
    4aa8:	80 81       	ld	r24, Z
    4aaa:	88 23       	and	r24, r24
    4aac:	49 f4       	brne	.+18     	; 0x4ac0 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0x9c>
      /* Connect to an unsecured network */
      if (! connectOpen(ssid)) {
    4aae:	ce 01       	movw	r24, r28
    4ab0:	b3 01       	movw	r22, r6
    4ab2:	0e 94 42 23 	call	0x4684	; 0x4684 <_ZN15Adafruit_CC300011connectOpenEPKc>
    4ab6:	88 23       	and	r24, r24
    4ab8:	d1 f0       	breq	.+52     	; 0x4aee <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0xca>
        CHECK_PRINTER {
          CC3KPrinter->println(F("Failed!"));
        }
        continue;
    4aba:	00 e1       	ldi	r16, 0x10	; 16
    4abc:	17 e2       	ldi	r17, 0x27	; 39
    4abe:	08 c0       	rjmp	.+16     	; 0x4ad0 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0xac>
      }
    } else {
      /* NOTE: Secure connections are not available in 'Tiny' mode! */
#ifndef CC3000_TINY_DRIVER
      /* Connect to a secure network using WPA2, etc */
      if (! connectSecure(ssid, key, secmode)) {
    4ac0:	ce 01       	movw	r24, r28
    4ac2:	b3 01       	movw	r22, r6
    4ac4:	a4 01       	movw	r20, r8
    4ac6:	97 01       	movw	r18, r14
    4ac8:	86 01       	movw	r16, r12
    4aca:	0e 94 b0 22 	call	0x4560	; 0x4560 <_ZN15Adafruit_CC300013connectSecureEPKcS1_l>
    4ace:	f3 cf       	rjmp	.-26     	; 0x4ab6 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0x92>
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    4ad0:	80 91 d5 02 	lds	r24, 0x02D5

    /* Wait around a bit for the async connected signal to arrive or timeout */
    CHECK_PRINTER {
      CC3KPrinter->print(F("Waiting to connect..."));
    }
    while ((timer > 0) && !checkConnected())
    4ad4:	81 fd       	sbrc	r24, 1
    4ad6:	0b c0       	rjmp	.+22     	; 0x4aee <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0xca>
    {
      cc3k_int_poll();
    4ad8:	0e 94 0a 2b 	call	0x5614	; 0x5614 <cc3k_int_poll>
      delay(10);
    4adc:	6a e0       	ldi	r22, 0x0A	; 10
    4ade:	70 e0       	ldi	r23, 0x00	; 0
    4ae0:	80 e0       	ldi	r24, 0x00	; 0
    4ae2:	90 e0       	ldi	r25, 0x00	; 0
    4ae4:	0e 94 48 36 	call	0x6c90	; 0x6c90 <delay>
      timer -= 10;
    4ae8:	0a 50       	subi	r16, 0x0A	; 10
    4aea:	10 40       	sbci	r17, 0x00	; 0

    /* Wait around a bit for the async connected signal to arrive or timeout */
    CHECK_PRINTER {
      CC3KPrinter->print(F("Waiting to connect..."));
    }
    while ((timer > 0) && !checkConnected())
    4aec:	89 f7       	brne	.-30     	; 0x4ad0 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0xac>
  void clear() {
    flags = 0;
  }

  bool test(const byte flag) {
    return (flags & flag) != 0;
    4aee:	80 91 d5 02 	lds	r24, 0x02D5
  int16_t timer;

  // If attempts is zero interpret that as no limit on number of retries.
  bool retryForever = attempts == 0;

  do {
    4af2:	81 ff       	sbrs	r24, 1
    4af4:	b4 cf       	rjmp	.-152    	; 0x4a5e <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh+0x3a>
    4af6:	81 e0       	ldi	r24, 0x01	; 1
      }
    }
  } while (!checkConnected());

  return true;
}
    4af8:	df 91       	pop	r29
    4afa:	cf 91       	pop	r28
    4afc:	1f 91       	pop	r17
    4afe:	0f 91       	pop	r16
    4b00:	ff 90       	pop	r15
    4b02:	ef 90       	pop	r14
    4b04:	df 90       	pop	r13
    4b06:	cf 90       	pop	r12
    4b08:	bf 90       	pop	r11
    4b0a:	af 90       	pop	r10
    4b0c:	9f 90       	pop	r9
    4b0e:	8f 90       	pop	r8
    4b10:	7f 90       	pop	r7
    4b12:	6f 90       	pop	r6
    4b14:	5f 90       	pop	r5
    4b16:	08 95       	ret

00004b18 <_ZN25Adafruit_CC3000_ClientRefcvbEv>:

// Return true if the referenced client is connected.  This is provided for
// compatibility with Ethernet library code.
Adafruit_CC3000_ClientRef::operator bool() {
    4b18:	fc 01       	movw	r30, r24
  return connected();
    4b1a:	a0 81       	ld	r26, Z
    4b1c:	b1 81       	ldd	r27, Z+1	; 0x01
    4b1e:	54 96       	adiw	r26, 0x14	; 20
    4b20:	2d 91       	ld	r18, X+
    4b22:	3c 91       	ld	r19, X
    4b24:	55 97       	sbiw	r26, 0x15	; 21
    4b26:	f9 01       	movw	r30, r18
    4b28:	09 95       	icall
    4b2a:	81 11       	cpse	r24, r1
    4b2c:	81 e0       	ldi	r24, 0x01	; 1
}
    4b2e:	08 95       	ret

00004b30 <_ZN25Adafruit_CC3000_ClientRef7connectE9IPAddressj>:
// Below are wrappers around the public client functions.  These hide the fact that users
// are dealing with a reference to a client instance and allow code to be written using
// value semantics like in the Ethernet library.
int Adafruit_CC3000_ClientRef::connect(IPAddress ip, uint16_t port) {
    4b30:	0f 93       	push	r16
    4b32:	1f 93       	push	r17
    4b34:	df 93       	push	r29
    4b36:	cf 93       	push	r28
    4b38:	00 d0       	rcall	.+0      	; 0x4b3a <_ZN25Adafruit_CC3000_ClientRef7connectE9IPAddressj+0xa>
    4b3a:	00 d0       	rcall	.+0      	; 0x4b3c <_ZN25Adafruit_CC3000_ClientRef7connectE9IPAddressj+0xc>
    4b3c:	00 d0       	rcall	.+0      	; 0x4b3e <_ZN25Adafruit_CC3000_ClientRef7connectE9IPAddressj+0xe>
    4b3e:	cd b7       	in	r28, 0x3d	; 61
    4b40:	de b7       	in	r29, 0x3e	; 62
    4b42:	db 01       	movw	r26, r22
  HANDLE_NULL(_client, false);
    4b44:	fc 01       	movw	r30, r24
    4b46:	24 85       	ldd	r18, Z+12	; 0x0c
    4b48:	35 85       	ldd	r19, Z+13	; 0x0d
    4b4a:	21 15       	cp	r18, r1
    4b4c:	31 05       	cpc	r19, r1
    4b4e:	19 f4       	brne	.+6      	; 0x4b56 <_ZN25Adafruit_CC3000_ClientRef7connectE9IPAddressj+0x26>
    4b50:	20 e0       	ldi	r18, 0x00	; 0
    4b52:	30 e0       	ldi	r19, 0x00	; 0
    4b54:	1b c0       	rjmp	.+54     	; 0x4b8c <_ZN25Adafruit_CC3000_ClientRef7connectE9IPAddressj+0x5c>
  return _client->connect(ip, port);
    4b56:	f9 01       	movw	r30, r18
    4b58:	80 81       	ld	r24, Z
    4b5a:	91 81       	ldd	r25, Z+1	; 0x01
    4b5c:	fc 01       	movw	r30, r24
    4b5e:	04 85       	ldd	r16, Z+12	; 0x0c
    4b60:	15 85       	ldd	r17, Z+13	; 0x0d

#include <Printable.h>

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    4b62:	8a e6       	ldi	r24, 0x6A	; 106
    4b64:	92 e0       	ldi	r25, 0x02	; 2
    4b66:	9a 83       	std	Y+2, r25	; 0x02
    4b68:	89 83       	std	Y+1, r24	; 0x01
    4b6a:	12 96       	adiw	r26, 0x02	; 2
    4b6c:	8d 91       	ld	r24, X+
    4b6e:	9d 91       	ld	r25, X+
    4b70:	0d 90       	ld	r0, X+
    4b72:	bc 91       	ld	r27, X
    4b74:	a0 2d       	mov	r26, r0
    4b76:	8b 83       	std	Y+3, r24	; 0x03
    4b78:	9c 83       	std	Y+4, r25	; 0x04
    4b7a:	ad 83       	std	Y+5, r26	; 0x05
    4b7c:	be 83       	std	Y+6, r27	; 0x06
    4b7e:	c9 01       	movw	r24, r18
    4b80:	be 01       	movw	r22, r28
    4b82:	6f 5f       	subi	r22, 0xFF	; 255
    4b84:	7f 4f       	sbci	r23, 0xFF	; 255
    4b86:	f8 01       	movw	r30, r16
    4b88:	09 95       	icall
    4b8a:	9c 01       	movw	r18, r24
}
    4b8c:	c9 01       	movw	r24, r18
    4b8e:	26 96       	adiw	r28, 0x06	; 6
    4b90:	0f b6       	in	r0, 0x3f	; 63
    4b92:	f8 94       	cli
    4b94:	de bf       	out	0x3e, r29	; 62
    4b96:	0f be       	out	0x3f, r0	; 63
    4b98:	cd bf       	out	0x3d, r28	; 61
    4b9a:	cf 91       	pop	r28
    4b9c:	df 91       	pop	r29
    4b9e:	1f 91       	pop	r17
    4ba0:	0f 91       	pop	r16
    4ba2:	08 95       	ret

00004ba4 <_ZN25Adafruit_CC3000_ClientRef7connectEPKcj>:

int Adafruit_CC3000_ClientRef::connect(const char *host, uint16_t port) {
  HANDLE_NULL(_client, false);
    4ba4:	fc 01       	movw	r30, r24
    4ba6:	a4 85       	ldd	r26, Z+12	; 0x0c
    4ba8:	b5 85       	ldd	r27, Z+13	; 0x0d
    4baa:	10 97       	sbiw	r26, 0x00	; 0
    4bac:	19 f4       	brne	.+6      	; 0x4bb4 <_ZN25Adafruit_CC3000_ClientRef7connectEPKcj+0x10>
    4bae:	20 e0       	ldi	r18, 0x00	; 0
    4bb0:	30 e0       	ldi	r19, 0x00	; 0
    4bb2:	09 c0       	rjmp	.+18     	; 0x4bc6 <_ZN25Adafruit_CC3000_ClientRef7connectEPKcj+0x22>
  return _client->connect(host, port);
    4bb4:	ed 91       	ld	r30, X+
    4bb6:	fc 91       	ld	r31, X
    4bb8:	11 97       	sbiw	r26, 0x01	; 1
    4bba:	06 84       	ldd	r0, Z+14	; 0x0e
    4bbc:	f7 85       	ldd	r31, Z+15	; 0x0f
    4bbe:	e0 2d       	mov	r30, r0
    4bc0:	cd 01       	movw	r24, r26
    4bc2:	09 95       	icall
    4bc4:	9c 01       	movw	r18, r24
}
    4bc6:	c9 01       	movw	r24, r18
    4bc8:	08 95       	ret

00004bca <_ZN25Adafruit_CC3000_ClientRef9connectedEv>:

uint8_t Adafruit_CC3000_ClientRef::connected(void) {
  HANDLE_NULL(_client, false);
    4bca:	fc 01       	movw	r30, r24
    4bcc:	a4 85       	ldd	r26, Z+12	; 0x0c
    4bce:	b5 85       	ldd	r27, Z+13	; 0x0d
    4bd0:	10 97       	sbiw	r26, 0x00	; 0
    4bd2:	11 f4       	brne	.+4      	; 0x4bd8 <_ZN25Adafruit_CC3000_ClientRef9connectedEv+0xe>
    4bd4:	80 e0       	ldi	r24, 0x00	; 0
    4bd6:	08 95       	ret
  return _client->connected();
    4bd8:	ed 91       	ld	r30, X+
    4bda:	fc 91       	ld	r31, X
    4bdc:	11 97       	sbiw	r26, 0x01	; 1
    4bde:	04 88       	ldd	r0, Z+20	; 0x14
    4be0:	f5 89       	ldd	r31, Z+21	; 0x15
    4be2:	e0 2d       	mov	r30, r0
    4be4:	cd 01       	movw	r24, r26
    4be6:	09 95       	icall
}
    4be8:	08 95       	ret

00004bea <_ZN25Adafruit_CC3000_ClientRef5writeEh>:

size_t Adafruit_CC3000_ClientRef::write(uint8_t c) {
  HANDLE_NULL(_client, 0);
    4bea:	fc 01       	movw	r30, r24
    4bec:	a4 85       	ldd	r26, Z+12	; 0x0c
    4bee:	b5 85       	ldd	r27, Z+13	; 0x0d
    4bf0:	10 97       	sbiw	r26, 0x00	; 0
    4bf2:	19 f4       	brne	.+6      	; 0x4bfa <_ZN25Adafruit_CC3000_ClientRef5writeEh+0x10>
    4bf4:	20 e0       	ldi	r18, 0x00	; 0
    4bf6:	30 e0       	ldi	r19, 0x00	; 0
    4bf8:	09 c0       	rjmp	.+18     	; 0x4c0c <_ZN25Adafruit_CC3000_ClientRef5writeEh+0x22>
  return _client->write(c);
    4bfa:	ed 91       	ld	r30, X+
    4bfc:	fc 91       	ld	r31, X
    4bfe:	11 97       	sbiw	r26, 0x01	; 1
    4c00:	01 90       	ld	r0, Z+
    4c02:	f0 81       	ld	r31, Z
    4c04:	e0 2d       	mov	r30, r0
    4c06:	cd 01       	movw	r24, r26
    4c08:	09 95       	icall
    4c0a:	9c 01       	movw	r18, r24
}
    4c0c:	c9 01       	movw	r24, r18
    4c0e:	08 95       	ret

00004c10 <_ZN25Adafruit_CC3000_ClientRef4readEv>:
  HANDLE_NULL(_client, 0);
  return _client->read(buf, len, flags);
}

int Adafruit_CC3000_ClientRef::read(void) {
  HANDLE_NULL(_client, 0);
    4c10:	fc 01       	movw	r30, r24
    4c12:	a4 85       	ldd	r26, Z+12	; 0x0c
    4c14:	b5 85       	ldd	r27, Z+13	; 0x0d
    4c16:	10 97       	sbiw	r26, 0x00	; 0
    4c18:	19 f4       	brne	.+6      	; 0x4c20 <_ZN25Adafruit_CC3000_ClientRef4readEv+0x10>
    4c1a:	20 e0       	ldi	r18, 0x00	; 0
    4c1c:	30 e0       	ldi	r19, 0x00	; 0
    4c1e:	09 c0       	rjmp	.+18     	; 0x4c32 <_ZN25Adafruit_CC3000_ClientRef4readEv+0x22>
  return _client->read();
    4c20:	ed 91       	ld	r30, X+
    4c22:	fc 91       	ld	r31, X
    4c24:	11 97       	sbiw	r26, 0x01	; 1
    4c26:	06 80       	ldd	r0, Z+6	; 0x06
    4c28:	f7 81       	ldd	r31, Z+7	; 0x07
    4c2a:	e0 2d       	mov	r30, r0
    4c2c:	cd 01       	movw	r24, r26
    4c2e:	09 95       	icall
    4c30:	9c 01       	movw	r18, r24
}
    4c32:	c9 01       	movw	r24, r18
    4c34:	08 95       	ret

00004c36 <_ZN25Adafruit_CC3000_ClientRef9availableEv>:
  HANDLE_NULL(_client, 0);
  return _client->close();
}

int Adafruit_CC3000_ClientRef::available(void) {
  HANDLE_NULL(_client, 0);
    4c36:	fc 01       	movw	r30, r24
    4c38:	a4 85       	ldd	r26, Z+12	; 0x0c
    4c3a:	b5 85       	ldd	r27, Z+13	; 0x0d
    4c3c:	10 97       	sbiw	r26, 0x00	; 0
    4c3e:	19 f4       	brne	.+6      	; 0x4c46 <_ZN25Adafruit_CC3000_ClientRef9availableEv+0x10>
    4c40:	20 e0       	ldi	r18, 0x00	; 0
    4c42:	30 e0       	ldi	r19, 0x00	; 0
    4c44:	09 c0       	rjmp	.+18     	; 0x4c58 <_ZN25Adafruit_CC3000_ClientRef9availableEv+0x22>
  return _client->available();
    4c46:	ed 91       	ld	r30, X+
    4c48:	fc 91       	ld	r31, X
    4c4a:	11 97       	sbiw	r26, 0x01	; 1
    4c4c:	04 80       	ldd	r0, Z+4	; 0x04
    4c4e:	f5 81       	ldd	r31, Z+5	; 0x05
    4c50:	e0 2d       	mov	r30, r0
    4c52:	cd 01       	movw	r24, r26
    4c54:	09 95       	icall
    4c56:	9c 01       	movw	r18, r24
}
    4c58:	c9 01       	movw	r24, r18
    4c5a:	08 95       	ret

00004c5c <_ZN25Adafruit_CC3000_ClientRef4readEPhj>:

int Adafruit_CC3000_ClientRef::read(uint8_t *buf, size_t size) {
  HANDLE_NULL(_client, 0);
    4c5c:	fc 01       	movw	r30, r24
    4c5e:	a4 85       	ldd	r26, Z+12	; 0x0c
    4c60:	b5 85       	ldd	r27, Z+13	; 0x0d
    4c62:	10 97       	sbiw	r26, 0x00	; 0
    4c64:	19 f4       	brne	.+6      	; 0x4c6c <_ZN25Adafruit_CC3000_ClientRef4readEPhj+0x10>
    4c66:	20 e0       	ldi	r18, 0x00	; 0
    4c68:	30 e0       	ldi	r19, 0x00	; 0
    4c6a:	09 c0       	rjmp	.+18     	; 0x4c7e <_ZN25Adafruit_CC3000_ClientRef4readEPhj+0x22>
  return _client->read(buf, size);
    4c6c:	ed 91       	ld	r30, X+
    4c6e:	fc 91       	ld	r31, X
    4c70:	11 97       	sbiw	r26, 0x01	; 1
    4c72:	00 88       	ldd	r0, Z+16	; 0x10
    4c74:	f1 89       	ldd	r31, Z+17	; 0x11
    4c76:	e0 2d       	mov	r30, r0
    4c78:	cd 01       	movw	r24, r26
    4c7a:	09 95       	icall
    4c7c:	9c 01       	movw	r18, r24
}
    4c7e:	c9 01       	movw	r24, r18
    4c80:	08 95       	ret

00004c82 <_ZN25Adafruit_CC3000_ClientRef5writeEPKhj>:

size_t Adafruit_CC3000_ClientRef::write(const uint8_t *buf, size_t size) {
  HANDLE_NULL(_client, 0);
    4c82:	fc 01       	movw	r30, r24
    4c84:	a4 85       	ldd	r26, Z+12	; 0x0c
    4c86:	b5 85       	ldd	r27, Z+13	; 0x0d
    4c88:	10 97       	sbiw	r26, 0x00	; 0
    4c8a:	19 f4       	brne	.+6      	; 0x4c92 <_ZN25Adafruit_CC3000_ClientRef5writeEPKhj+0x10>
    4c8c:	20 e0       	ldi	r18, 0x00	; 0
    4c8e:	30 e0       	ldi	r19, 0x00	; 0
    4c90:	09 c0       	rjmp	.+18     	; 0x4ca4 <_ZN25Adafruit_CC3000_ClientRef5writeEPKhj+0x22>
  return _client->write(buf, size);
    4c92:	ed 91       	ld	r30, X+
    4c94:	fc 91       	ld	r31, X
    4c96:	11 97       	sbiw	r26, 0x01	; 1
    4c98:	02 80       	ldd	r0, Z+2	; 0x02
    4c9a:	f3 81       	ldd	r31, Z+3	; 0x03
    4c9c:	e0 2d       	mov	r30, r0
    4c9e:	cd 01       	movw	r24, r26
    4ca0:	09 95       	icall
    4ca2:	9c 01       	movw	r18, r24
}
    4ca4:	c9 01       	movw	r24, r18
    4ca6:	08 95       	ret

00004ca8 <_ZN25Adafruit_CC3000_ClientRef4peekEv>:

int Adafruit_CC3000_ClientRef::peek() {
  HANDLE_NULL(_client, 0);
    4ca8:	fc 01       	movw	r30, r24
    4caa:	a4 85       	ldd	r26, Z+12	; 0x0c
    4cac:	b5 85       	ldd	r27, Z+13	; 0x0d
    4cae:	10 97       	sbiw	r26, 0x00	; 0
    4cb0:	19 f4       	brne	.+6      	; 0x4cb8 <_ZN25Adafruit_CC3000_ClientRef4peekEv+0x10>
    4cb2:	20 e0       	ldi	r18, 0x00	; 0
    4cb4:	30 e0       	ldi	r19, 0x00	; 0
    4cb6:	09 c0       	rjmp	.+18     	; 0x4cca <_ZN25Adafruit_CC3000_ClientRef4peekEv+0x22>
  return _client->peek();
    4cb8:	ed 91       	ld	r30, X+
    4cba:	fc 91       	ld	r31, X
    4cbc:	11 97       	sbiw	r26, 0x01	; 1
    4cbe:	00 84       	ldd	r0, Z+8	; 0x08
    4cc0:	f1 85       	ldd	r31, Z+9	; 0x09
    4cc2:	e0 2d       	mov	r30, r0
    4cc4:	cd 01       	movw	r24, r26
    4cc6:	09 95       	icall
    4cc8:	9c 01       	movw	r18, r24
}
    4cca:	c9 01       	movw	r24, r18
    4ccc:	08 95       	ret

00004cce <_ZN25Adafruit_CC3000_ClientRef5flushEv>:

void Adafruit_CC3000_ClientRef::flush() {
  if (_client != NULL) _client->flush();
    4cce:	fc 01       	movw	r30, r24
    4cd0:	a4 85       	ldd	r26, Z+12	; 0x0c
    4cd2:	b5 85       	ldd	r27, Z+13	; 0x0d
    4cd4:	10 97       	sbiw	r26, 0x00	; 0
    4cd6:	41 f0       	breq	.+16     	; 0x4ce8 <_ZN25Adafruit_CC3000_ClientRef5flushEv+0x1a>
    4cd8:	ed 91       	ld	r30, X+
    4cda:	fc 91       	ld	r31, X
    4cdc:	11 97       	sbiw	r26, 0x01	; 1
    4cde:	02 84       	ldd	r0, Z+10	; 0x0a
    4ce0:	f3 85       	ldd	r31, Z+11	; 0x0b
    4ce2:	e0 2d       	mov	r30, r0
    4ce4:	cd 01       	movw	r24, r26
    4ce6:	09 95       	icall
    4ce8:	08 95       	ret

00004cea <_ZN25Adafruit_CC3000_ClientRef4stopEv>:
}

void Adafruit_CC3000_ClientRef::stop() {
  if (_client != NULL) _client->stop();
    4cea:	fc 01       	movw	r30, r24
    4cec:	a4 85       	ldd	r26, Z+12	; 0x0c
    4cee:	b5 85       	ldd	r27, Z+13	; 0x0d
    4cf0:	10 97       	sbiw	r26, 0x00	; 0
    4cf2:	41 f0       	breq	.+16     	; 0x4d04 <_ZN25Adafruit_CC3000_ClientRef4stopEv+0x1a>
    4cf4:	ed 91       	ld	r30, X+
    4cf6:	fc 91       	ld	r31, X
    4cf8:	11 97       	sbiw	r26, 0x01	; 1
    4cfa:	02 88       	ldd	r0, Z+18	; 0x12
    4cfc:	f3 89       	ldd	r31, Z+19	; 0x13
    4cfe:	e0 2d       	mov	r30, r0
    4d00:	cd 01       	movw	r24, r26
    4d02:	09 95       	icall
    4d04:	08 95       	ret

00004d06 <_ZN22Adafruit_CC3000_Server12getClientRefEa>:

  return -1;
}

// Given the index of client, returns the instance of that client for reading/writing
Adafruit_CC3000_ClientRef Adafruit_CC3000_Server::getClientRef(int8_t clientIndex) {
    4d06:	cf 93       	push	r28
    4d08:	df 93       	push	r29
    4d0a:	9c 01       	movw	r18, r24
    4d0c:	ce e3       	ldi	r28, 0x3E	; 62
    4d0e:	d2 e0       	ldi	r29, 0x02	; 2
  if (clientIndex != -1) {
    4d10:	4f 3f       	cpi	r20, 0xFF	; 255
    4d12:	b9 f0       	breq	.+46     	; 0x4d42 <_ZN22Adafruit_CC3000_Server12getClientRefEa+0x3c>
    return Adafruit_CC3000_ClientRef(&_clients[clientIndex]);
    4d14:	fc 01       	movw	r30, r24
    4d16:	13 82       	std	Z+3, r1	; 0x03
    4d18:	12 82       	std	Z+2, r1	; 0x02
    4d1a:	88 ee       	ldi	r24, 0xE8	; 232
    4d1c:	93 e0       	ldi	r25, 0x03	; 3
    4d1e:	a0 e0       	ldi	r26, 0x00	; 0
    4d20:	b0 e0       	ldi	r27, 0x00	; 0
    4d22:	84 83       	std	Z+4, r24	; 0x04
    4d24:	95 83       	std	Z+5, r25	; 0x05
    4d26:	a6 83       	std	Z+6, r26	; 0x06
    4d28:	b7 83       	std	Z+7, r27	; 0x07
  Adafruit_CC3000_ClientRef implementation
*/
/**************************************************************************/

Adafruit_CC3000_ClientRef::Adafruit_CC3000_ClientRef(Adafruit_CC3000_Client* client)
  : _client(client) 
    4d2a:	d1 83       	std	Z+1, r29	; 0x01
    4d2c:	c0 83       	st	Z, r28
    4d2e:	83 e5       	ldi	r24, 0x53	; 83
    4d30:	48 02       	muls	r20, r24
    4d32:	c0 01       	movw	r24, r0
    4d34:	11 24       	eor	r1, r1
    4d36:	04 96       	adiw	r24, 0x04	; 4
    4d38:	86 0f       	add	r24, r22
    4d3a:	97 1f       	adc	r25, r23
    4d3c:	95 87       	std	Z+13, r25	; 0x0d
    4d3e:	84 87       	std	Z+12, r24	; 0x0c
    4d40:	0f c0       	rjmp	.+30     	; 0x4d60 <_ZN22Adafruit_CC3000_Server12getClientRefEa+0x5a>
  }
  
  // Couldn't find a client ready to read, so return a client that is not 
  // connected to signal no clients are available for reading (convention
  // used by the Ethernet library).
  return Adafruit_CC3000_ClientRef(NULL);
    4d42:	fc 01       	movw	r30, r24
    4d44:	13 82       	std	Z+3, r1	; 0x03
    4d46:	12 82       	std	Z+2, r1	; 0x02
    4d48:	88 ee       	ldi	r24, 0xE8	; 232
    4d4a:	93 e0       	ldi	r25, 0x03	; 3
    4d4c:	a0 e0       	ldi	r26, 0x00	; 0
    4d4e:	b0 e0       	ldi	r27, 0x00	; 0
    4d50:	84 83       	std	Z+4, r24	; 0x04
    4d52:	95 83       	std	Z+5, r25	; 0x05
    4d54:	a6 83       	std	Z+6, r26	; 0x06
    4d56:	b7 83       	std	Z+7, r27	; 0x07
  Adafruit_CC3000_ClientRef implementation
*/
/**************************************************************************/

Adafruit_CC3000_ClientRef::Adafruit_CC3000_ClientRef(Adafruit_CC3000_Client* client)
  : _client(client) 
    4d58:	d1 83       	std	Z+1, r29	; 0x01
    4d5a:	c0 83       	st	Z, r28
    4d5c:	15 86       	std	Z+13, r1	; 0x0d
    4d5e:	14 86       	std	Z+12, r1	; 0x0c
  
  // Couldn't find a client ready to read, so return a client that is not 
  // connected to signal no clients are available for reading (convention
  // used by the Ethernet library).
  return Adafruit_CC3000_ClientRef(NULL);
}
    4d60:	c9 01       	movw	r24, r18
    4d62:	df 91       	pop	r29
    4d64:	cf 91       	pop	r28
    4d66:	08 95       	ret

00004d68 <_ZN22Adafruit_CC3000_Server5writeEPKhj>:
}

// Write data to all connected clients.  Buffer is a pointer to an array
// of bytes, and size specifies how many bytes to write from the buffer.
// Return the sum of bytes written to all clients.
size_t Adafruit_CC3000_Server::write(const uint8_t *buffer, size_t size) {
    4d68:	4f 92       	push	r4
    4d6a:	5f 92       	push	r5
    4d6c:	6f 92       	push	r6
    4d6e:	7f 92       	push	r7
    4d70:	8f 92       	push	r8
    4d72:	9f 92       	push	r9
    4d74:	af 92       	push	r10
    4d76:	bf 92       	push	r11
    4d78:	cf 92       	push	r12
    4d7a:	df 92       	push	r13
    4d7c:	ef 92       	push	r14
    4d7e:	ff 92       	push	r15
    4d80:	0f 93       	push	r16
    4d82:	1f 93       	push	r17
    4d84:	cf 93       	push	r28
    4d86:	df 93       	push	r29
    4d88:	5c 01       	movw	r10, r24
    4d8a:	3b 01       	movw	r6, r22
    4d8c:	4a 01       	movw	r8, r20
    4d8e:	7c 01       	movw	r14, r24
    4d90:	cc 24       	eor	r12, r12
    4d92:	dd 24       	eor	r13, r13
    4d94:	00 e0       	ldi	r16, 0x00	; 0
    4d96:	10 e0       	ldi	r17, 0x00	; 0
  size_t written = 0;
  for (int i = 0; i < MAX_SERVER_CLIENTS; ++i) {
    if (_clients[i].connected()) {
    4d98:	83 e5       	ldi	r24, 0x53	; 83
    4d9a:	48 2e       	mov	r4, r24
    4d9c:	51 2c       	mov	r5, r1
    4d9e:	04 9d       	mul	r16, r4
    4da0:	e0 01       	movw	r28, r0
    4da2:	05 9d       	mul	r16, r5
    4da4:	d0 0d       	add	r29, r0
    4da6:	14 9d       	mul	r17, r4
    4da8:	d0 0d       	add	r29, r0
    4daa:	11 24       	eor	r1, r1
    4dac:	24 96       	adiw	r28, 0x04	; 4
    4dae:	ca 0d       	add	r28, r10
    4db0:	db 1d       	adc	r29, r11
    4db2:	d7 01       	movw	r26, r14
    4db4:	14 96       	adiw	r26, 0x04	; 4
    4db6:	ed 91       	ld	r30, X+
    4db8:	fc 91       	ld	r31, X
    4dba:	15 97       	sbiw	r26, 0x05	; 5
    4dbc:	04 88       	ldd	r0, Z+20	; 0x14
    4dbe:	f5 89       	ldd	r31, Z+21	; 0x15
    4dc0:	e0 2d       	mov	r30, r0
    4dc2:	ce 01       	movw	r24, r28
    4dc4:	09 95       	icall
    4dc6:	88 23       	and	r24, r24
    4dc8:	71 f0       	breq	.+28     	; 0x4de6 <_ZN22Adafruit_CC3000_Server5writeEPKhj+0x7e>
      written += _clients[i].write(buffer, size);
    4dca:	d7 01       	movw	r26, r14
    4dcc:	14 96       	adiw	r26, 0x04	; 4
    4dce:	ed 91       	ld	r30, X+
    4dd0:	fc 91       	ld	r31, X
    4dd2:	15 97       	sbiw	r26, 0x05	; 5
    4dd4:	02 80       	ldd	r0, Z+2	; 0x02
    4dd6:	f3 81       	ldd	r31, Z+3	; 0x03
    4dd8:	e0 2d       	mov	r30, r0
    4dda:	ce 01       	movw	r24, r28
    4ddc:	b3 01       	movw	r22, r6
    4dde:	a4 01       	movw	r20, r8
    4de0:	09 95       	icall
    4de2:	c8 0e       	add	r12, r24
    4de4:	d9 1e       	adc	r13, r25
// Write data to all connected clients.  Buffer is a pointer to an array
// of bytes, and size specifies how many bytes to write from the buffer.
// Return the sum of bytes written to all clients.
size_t Adafruit_CC3000_Server::write(const uint8_t *buffer, size_t size) {
  size_t written = 0;
  for (int i = 0; i < MAX_SERVER_CLIENTS; ++i) {
    4de6:	0f 5f       	subi	r16, 0xFF	; 255
    4de8:	1f 4f       	sbci	r17, 0xFF	; 255
    4dea:	83 e5       	ldi	r24, 0x53	; 83
    4dec:	90 e0       	ldi	r25, 0x00	; 0
    4dee:	e8 0e       	add	r14, r24
    4df0:	f9 1e       	adc	r15, r25
    4df2:	03 30       	cpi	r16, 0x03	; 3
    4df4:	11 05       	cpc	r17, r1
    4df6:	99 f6       	brne	.-90     	; 0x4d9e <_ZN22Adafruit_CC3000_Server5writeEPKhj+0x36>
    if (_clients[i].connected()) {
      written += _clients[i].write(buffer, size);
    }
  }
  return written;
}
    4df8:	c6 01       	movw	r24, r12
    4dfa:	df 91       	pop	r29
    4dfc:	cf 91       	pop	r28
    4dfe:	1f 91       	pop	r17
    4e00:	0f 91       	pop	r16
    4e02:	ff 90       	pop	r15
    4e04:	ef 90       	pop	r14
    4e06:	df 90       	pop	r13
    4e08:	cf 90       	pop	r12
    4e0a:	bf 90       	pop	r11
    4e0c:	af 90       	pop	r10
    4e0e:	9f 90       	pop	r9
    4e10:	8f 90       	pop	r8
    4e12:	7f 90       	pop	r7
    4e14:	6f 90       	pop	r6
    4e16:	5f 90       	pop	r5
    4e18:	4f 90       	pop	r4
    4e1a:	08 95       	ret

00004e1c <_ZN22Adafruit_CC3000_Server5writeEh>:

// Write a byte value to all connected clients.
// Return the sum of bytes written to all clients.
size_t Adafruit_CC3000_Server::write(uint8_t value) {
    4e1c:	df 93       	push	r29
    4e1e:	cf 93       	push	r28
    4e20:	0f 92       	push	r0
    4e22:	cd b7       	in	r28, 0x3d	; 61
    4e24:	de b7       	in	r29, 0x3e	; 62
    4e26:	fc 01       	movw	r30, r24
    4e28:	69 83       	std	Y+1, r22	; 0x01
  return write(&value, 1);
    4e2a:	a0 81       	ld	r26, Z
    4e2c:	b1 81       	ldd	r27, Z+1	; 0x01
    4e2e:	12 96       	adiw	r26, 0x02	; 2
    4e30:	2d 91       	ld	r18, X+
    4e32:	3c 91       	ld	r19, X
    4e34:	13 97       	sbiw	r26, 0x03	; 3
    4e36:	be 01       	movw	r22, r28
    4e38:	6f 5f       	subi	r22, 0xFF	; 255
    4e3a:	7f 4f       	sbci	r23, 0xFF	; 255
    4e3c:	41 e0       	ldi	r20, 0x01	; 1
    4e3e:	50 e0       	ldi	r21, 0x00	; 0
    4e40:	f9 01       	movw	r30, r18
    4e42:	09 95       	icall
}
    4e44:	0f 90       	pop	r0
    4e46:	cf 91       	pop	r28
    4e48:	df 91       	pop	r29
    4e4a:	08 95       	ret

00004e4c <_GLOBAL__I__ZN25Adafruit_CC3000_ClientRefC2EP22Adafruit_CC3000_Client>:
      }
      // else either there were no sockets to accept or an error occured.
    }
  }
  return newClientCreated;
}
    4e4c:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    4e4e:	8e ed       	ldi	r24, 0xDE	; 222
    4e50:	92 e0       	ldi	r25, 0x02	; 2
    4e52:	60 e0       	ldi	r22, 0x00	; 0
    4e54:	40 e0       	ldi	r20, 0x00	; 0
    4e56:	20 e0       	ldi	r18, 0x00	; 0
    4e58:	00 e0       	ldi	r16, 0x00	; 0
    4e5a:	0e 94 2e 33 	call	0x665c	; 0x665c <_ZN9IPAddressC1Ehhhh>
    4e5e:	0f 91       	pop	r16
    4e60:	08 95       	ret

00004e62 <_ZN22Adafruit_CC3000_Server20acceptNewConnectionsEv>:
size_t Adafruit_CC3000_Server::write(uint8_t value) {
  return write(&value, 1);
}

// Accept new connections and update the connected clients.
bool Adafruit_CC3000_Server::acceptNewConnections() {
    4e62:	2f 92       	push	r2
    4e64:	3f 92       	push	r3
    4e66:	4f 92       	push	r4
    4e68:	5f 92       	push	r5
    4e6a:	7f 92       	push	r7
    4e6c:	8f 92       	push	r8
    4e6e:	9f 92       	push	r9
    4e70:	af 92       	push	r10
    4e72:	bf 92       	push	r11
    4e74:	cf 92       	push	r12
    4e76:	df 92       	push	r13
    4e78:	ef 92       	push	r14
    4e7a:	ff 92       	push	r15
    4e7c:	0f 93       	push	r16
    4e7e:	1f 93       	push	r17
    4e80:	df 93       	push	r29
    4e82:	cf 93       	push	r28
    4e84:	cd b7       	in	r28, 0x3d	; 61
    4e86:	de b7       	in	r29, 0x3e	; 62
    4e88:	c3 55       	subi	r28, 0x53	; 83
    4e8a:	d0 40       	sbci	r29, 0x00	; 0
    4e8c:	0f b6       	in	r0, 0x3f	; 63
    4e8e:	f8 94       	cli
    4e90:	de bf       	out	0x3e, r29	; 62
    4e92:	0f be       	out	0x3f, r0	; 63
    4e94:	cd bf       	out	0x3d, r28	; 61
    4e96:	5c 01       	movw	r10, r24
    4e98:	6c 01       	movw	r12, r24
    4e9a:	77 24       	eor	r7, r7
    4e9c:	ee 24       	eor	r14, r14
    4e9e:	ff 24       	eor	r15, r15
  bool newClientCreated = false;
  // For any unconnected client, see if new connections are pending and accept
  // them as a new client.
  for (int i = 0; i < MAX_SERVER_CLIENTS; ++i) {
    if (!_clients[i].connected()) {
    4ea0:	23 e5       	ldi	r18, 0x53	; 83
    4ea2:	22 2e       	mov	r2, r18
    4ea4:	31 2c       	mov	r3, r1
      // Note: Because the non-blocking option was set for the listening
      // socket this call will not block and instead return SOC_IN_PROGRESS (-2) 
      // if there are no pending client connections. Also, the address of the 
      // connected client is not needed, so those parameters are set to NULL.
      cc3k_int_poll();
      int soc = accept(_listenSocket, NULL, NULL);
    4ea6:	9f ef       	ldi	r25, 0xFF	; 255
    4ea8:	89 2e       	mov	r8, r25
    4eaa:	91 2c       	mov	r9, r1
    4eac:	8a 0c       	add	r8, r10
    4eae:	9b 1c       	adc	r9, r11
      if (soc > -1) {
        _clients[i] = Adafruit_CC3000_Client(soc);
    4eb0:	2e 01       	movw	r4, r28
    4eb2:	08 94       	sec
    4eb4:	41 1c       	adc	r4, r1
    4eb6:	51 1c       	adc	r5, r1
bool Adafruit_CC3000_Server::acceptNewConnections() {
  bool newClientCreated = false;
  // For any unconnected client, see if new connections are pending and accept
  // them as a new client.
  for (int i = 0; i < MAX_SERVER_CLIENTS; ++i) {
    if (!_clients[i].connected()) {
    4eb8:	e2 9c       	mul	r14, r2
    4eba:	80 01       	movw	r16, r0
    4ebc:	e3 9c       	mul	r14, r3
    4ebe:	10 0d       	add	r17, r0
    4ec0:	f2 9c       	mul	r15, r2
    4ec2:	10 0d       	add	r17, r0
    4ec4:	11 24       	eor	r1, r1
    4ec6:	0c 5f       	subi	r16, 0xFC	; 252
    4ec8:	1f 4f       	sbci	r17, 0xFF	; 255
    4eca:	0a 0d       	add	r16, r10
    4ecc:	1b 1d       	adc	r17, r11
    4ece:	d6 01       	movw	r26, r12
    4ed0:	14 96       	adiw	r26, 0x04	; 4
    4ed2:	ed 91       	ld	r30, X+
    4ed4:	fc 91       	ld	r31, X
    4ed6:	15 97       	sbiw	r26, 0x05	; 5
    4ed8:	04 88       	ldd	r0, Z+20	; 0x14
    4eda:	f5 89       	ldd	r31, Z+21	; 0x15
    4edc:	e0 2d       	mov	r30, r0
    4ede:	c8 01       	movw	r24, r16
    4ee0:	09 95       	icall
    4ee2:	88 23       	and	r24, r24
    4ee4:	f1 f4       	brne	.+60     	; 0x4f22 <_ZN22Adafruit_CC3000_Server20acceptNewConnectionsEv+0xc0>
      // Note: Because the non-blocking option was set for the listening
      // socket this call will not block and instead return SOC_IN_PROGRESS (-2) 
      // if there are no pending client connections. Also, the address of the 
      // connected client is not needed, so those parameters are set to NULL.
      cc3k_int_poll();
    4ee6:	0e 94 0a 2b 	call	0x5614	; 0x5614 <cc3k_int_poll>
      int soc = accept(_listenSocket, NULL, NULL);
    4eea:	f4 01       	movw	r30, r8
    4eec:	60 81       	ld	r22, Z
    4eee:	71 81       	ldd	r23, Z+1	; 0x01
    4ef0:	82 81       	ldd	r24, Z+2	; 0x02
    4ef2:	93 81       	ldd	r25, Z+3	; 0x03
    4ef4:	40 e0       	ldi	r20, 0x00	; 0
    4ef6:	50 e0       	ldi	r21, 0x00	; 0
    4ef8:	20 e0       	ldi	r18, 0x00	; 0
    4efa:	30 e0       	ldi	r19, 0x00	; 0
    4efc:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <accept>
    4f00:	cb 01       	movw	r24, r22
      if (soc > -1) {
    4f02:	77 fd       	sbrc	r23, 7
    4f04:	0e c0       	rjmp	.+28     	; 0x4f22 <_ZN22Adafruit_CC3000_Server20acceptNewConnectionsEv+0xc0>
        _clients[i] = Adafruit_CC3000_Client(soc);
    4f06:	ac 01       	movw	r20, r24
    4f08:	66 27       	eor	r22, r22
    4f0a:	57 fd       	sbrc	r21, 7
    4f0c:	60 95       	com	r22
    4f0e:	76 2f       	mov	r23, r22
    4f10:	c2 01       	movw	r24, r4
    4f12:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <_ZN22Adafruit_CC3000_ClientC1El>
    4f16:	c8 01       	movw	r24, r16
    4f18:	b2 01       	movw	r22, r4
    4f1a:	0e 94 a2 21 	call	0x4344	; 0x4344 <_ZN22Adafruit_CC3000_ClientaSERKS_>
    4f1e:	77 24       	eor	r7, r7
    4f20:	73 94       	inc	r7
// Accept new connections and update the connected clients.
bool Adafruit_CC3000_Server::acceptNewConnections() {
  bool newClientCreated = false;
  // For any unconnected client, see if new connections are pending and accept
  // them as a new client.
  for (int i = 0; i < MAX_SERVER_CLIENTS; ++i) {
    4f22:	08 94       	sec
    4f24:	e1 1c       	adc	r14, r1
    4f26:	f1 1c       	adc	r15, r1
    4f28:	83 e5       	ldi	r24, 0x53	; 83
    4f2a:	90 e0       	ldi	r25, 0x00	; 0
    4f2c:	c8 0e       	add	r12, r24
    4f2e:	d9 1e       	adc	r13, r25
    4f30:	93 e0       	ldi	r25, 0x03	; 3
    4f32:	e9 16       	cp	r14, r25
    4f34:	f1 04       	cpc	r15, r1
    4f36:	09 f0       	breq	.+2      	; 0x4f3a <_ZN22Adafruit_CC3000_Server20acceptNewConnectionsEv+0xd8>
    4f38:	bf cf       	rjmp	.-130    	; 0x4eb8 <_ZN22Adafruit_CC3000_Server20acceptNewConnectionsEv+0x56>
      }
      // else either there were no sockets to accept or an error occured.
    }
  }
  return newClientCreated;
}
    4f3a:	87 2d       	mov	r24, r7
    4f3c:	cd 5a       	subi	r28, 0xAD	; 173
    4f3e:	df 4f       	sbci	r29, 0xFF	; 255
    4f40:	0f b6       	in	r0, 0x3f	; 63
    4f42:	f8 94       	cli
    4f44:	de bf       	out	0x3e, r29	; 62
    4f46:	0f be       	out	0x3f, r0	; 63
    4f48:	cd bf       	out	0x3d, r28	; 61
    4f4a:	cf 91       	pop	r28
    4f4c:	df 91       	pop	r29
    4f4e:	1f 91       	pop	r17
    4f50:	0f 91       	pop	r16
    4f52:	ff 90       	pop	r15
    4f54:	ef 90       	pop	r14
    4f56:	df 90       	pop	r13
    4f58:	cf 90       	pop	r12
    4f5a:	bf 90       	pop	r11
    4f5c:	af 90       	pop	r10
    4f5e:	9f 90       	pop	r9
    4f60:	8f 90       	pop	r8
    4f62:	7f 90       	pop	r7
    4f64:	5f 90       	pop	r5
    4f66:	4f 90       	pop	r4
    4f68:	3f 90       	pop	r3
    4f6a:	2f 90       	pop	r2
    4f6c:	08 95       	ret

00004f6e <_ZN22Adafruit_CC3000_Server14availableIndexEPb>:

// Return index of a client with data available for reading. Can be turned
// into a client instance with getClientRef().  Accepts an optional parameter
// to return a boolean (by reference) indicating if available client is connecting
// for the first time.
int8_t Adafruit_CC3000_Server::availableIndex(bool *newClient) {
    4f6e:	af 92       	push	r10
    4f70:	bf 92       	push	r11
    4f72:	cf 92       	push	r12
    4f74:	df 92       	push	r13
    4f76:	ef 92       	push	r14
    4f78:	ff 92       	push	r15
    4f7a:	0f 93       	push	r16
    4f7c:	1f 93       	push	r17
    4f7e:	cf 93       	push	r28
    4f80:	df 93       	push	r29
    4f82:	6c 01       	movw	r12, r24
    4f84:	eb 01       	movw	r28, r22
  bool newClientCreated = acceptNewConnections();
    4f86:	0e 94 31 27 	call	0x4e62	; 0x4e62 <_ZN22Adafruit_CC3000_Server20acceptNewConnectionsEv>

  if (newClient)
    4f8a:	20 97       	sbiw	r28, 0x00	; 0
    4f8c:	09 f0       	breq	.+2      	; 0x4f90 <_ZN22Adafruit_CC3000_Server14availableIndexEPb+0x22>
    *newClient = newClientCreated;
    4f8e:	88 83       	st	Y, r24
    4f90:	76 01       	movw	r14, r12
    4f92:	00 e0       	ldi	r16, 0x00	; 0
    4f94:	10 e0       	ldi	r17, 0x00	; 0

  // Find the first client which is ready to read and return it.
  for (int i = 0; i < MAX_SERVER_CLIENTS; ++i) {
    if (_clients[i].connected() && _clients[i].available() > 0) {
    4f96:	33 e5       	ldi	r19, 0x53	; 83
    4f98:	a3 2e       	mov	r10, r19
    4f9a:	b1 2c       	mov	r11, r1
    4f9c:	0a 9d       	mul	r16, r10
    4f9e:	e0 01       	movw	r28, r0
    4fa0:	0b 9d       	mul	r16, r11
    4fa2:	d0 0d       	add	r29, r0
    4fa4:	1a 9d       	mul	r17, r10
    4fa6:	d0 0d       	add	r29, r0
    4fa8:	11 24       	eor	r1, r1
    4faa:	24 96       	adiw	r28, 0x04	; 4
    4fac:	cc 0d       	add	r28, r12
    4fae:	dd 1d       	adc	r29, r13
    4fb0:	d7 01       	movw	r26, r14
    4fb2:	14 96       	adiw	r26, 0x04	; 4
    4fb4:	ed 91       	ld	r30, X+
    4fb6:	fc 91       	ld	r31, X
    4fb8:	15 97       	sbiw	r26, 0x05	; 5
    4fba:	04 88       	ldd	r0, Z+20	; 0x14
    4fbc:	f5 89       	ldd	r31, Z+21	; 0x15
    4fbe:	e0 2d       	mov	r30, r0
    4fc0:	ce 01       	movw	r24, r28
    4fc2:	09 95       	icall
    4fc4:	88 23       	and	r24, r24
    4fc6:	c9 f0       	breq	.+50     	; 0x4ffa <_ZN22Adafruit_CC3000_Server14availableIndexEPb+0x8c>
    4fc8:	d7 01       	movw	r26, r14
    4fca:	14 96       	adiw	r26, 0x04	; 4
    4fcc:	ed 91       	ld	r30, X+
    4fce:	fc 91       	ld	r31, X
    4fd0:	15 97       	sbiw	r26, 0x05	; 5
    4fd2:	04 80       	ldd	r0, Z+4	; 0x04
    4fd4:	f5 81       	ldd	r31, Z+5	; 0x05
    4fd6:	e0 2d       	mov	r30, r0
    4fd8:	ce 01       	movw	r24, r28
    4fda:	09 95       	icall
    4fdc:	18 16       	cp	r1, r24
    4fde:	19 06       	cpc	r1, r25
    4fe0:	64 f4       	brge	.+24     	; 0x4ffa <_ZN22Adafruit_CC3000_Server14availableIndexEPb+0x8c>
      return i;
    4fe2:	80 2f       	mov	r24, r16
    }
  }

  return -1;
}
    4fe4:	df 91       	pop	r29
    4fe6:	cf 91       	pop	r28
    4fe8:	1f 91       	pop	r17
    4fea:	0f 91       	pop	r16
    4fec:	ff 90       	pop	r15
    4fee:	ef 90       	pop	r14
    4ff0:	df 90       	pop	r13
    4ff2:	cf 90       	pop	r12
    4ff4:	bf 90       	pop	r11
    4ff6:	af 90       	pop	r10
    4ff8:	08 95       	ret

  if (newClient)
    *newClient = newClientCreated;

  // Find the first client which is ready to read and return it.
  for (int i = 0; i < MAX_SERVER_CLIENTS; ++i) {
    4ffa:	0f 5f       	subi	r16, 0xFF	; 255
    4ffc:	1f 4f       	sbci	r17, 0xFF	; 255
    4ffe:	83 e5       	ldi	r24, 0x53	; 83
    5000:	90 e0       	ldi	r25, 0x00	; 0
    5002:	e8 0e       	add	r14, r24
    5004:	f9 1e       	adc	r15, r25
    5006:	03 30       	cpi	r16, 0x03	; 3
    5008:	11 05       	cpc	r17, r1
    500a:	41 f6       	brne	.-112    	; 0x4f9c <_ZN22Adafruit_CC3000_Server14availableIndexEPb+0x2e>
    500c:	8f ef       	ldi	r24, 0xFF	; 255
    500e:	ea cf       	rjmp	.-44     	; 0x4fe4 <_ZN22Adafruit_CC3000_Server14availableIndexEPb+0x76>

00005010 <_ZN22Adafruit_CC3000_Server9availableEv>:
  // used by the Ethernet library).
  return Adafruit_CC3000_ClientRef(NULL);
}

// Return a reference to a client instance which has data available to read.
Adafruit_CC3000_ClientRef Adafruit_CC3000_Server::available() {
    5010:	ef 92       	push	r14
    5012:	ff 92       	push	r15
    5014:	0f 93       	push	r16
    5016:	1f 93       	push	r17
    5018:	f8 2e       	mov	r15, r24
    501a:	e9 2e       	mov	r14, r25
    501c:	8b 01       	movw	r16, r22
  return getClientRef(availableIndex(NULL));
    501e:	cb 01       	movw	r24, r22
    5020:	60 e0       	ldi	r22, 0x00	; 0
    5022:	70 e0       	ldi	r23, 0x00	; 0
    5024:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <_ZN22Adafruit_CC3000_Server14availableIndexEPb>
    5028:	48 2f       	mov	r20, r24
    502a:	8f 2d       	mov	r24, r15
    502c:	9e 2d       	mov	r25, r14
    502e:	b8 01       	movw	r22, r16
    5030:	0e 94 83 26 	call	0x4d06	; 0x4d06 <_ZN22Adafruit_CC3000_Server12getClientRefEa>
}
    5034:	8f 2d       	mov	r24, r15
    5036:	9e 2d       	mov	r25, r14
    5038:	1f 91       	pop	r17
    503a:	0f 91       	pop	r16
    503c:	ff 90       	pop	r15
    503e:	ef 90       	pop	r14
    5040:	08 95       	ret

00005042 <_ZN22Adafruit_CC3000_Server5beginEv>:

// Initialize the server and start listening for connections.
void Adafruit_CC3000_Server::begin() {
    5042:	2f 92       	push	r2
    5044:	3f 92       	push	r3
    5046:	4f 92       	push	r4
    5048:	5f 92       	push	r5
    504a:	6f 92       	push	r6
    504c:	7f 92       	push	r7
    504e:	8f 92       	push	r8
    5050:	9f 92       	push	r9
    5052:	af 92       	push	r10
    5054:	bf 92       	push	r11
    5056:	cf 92       	push	r12
    5058:	df 92       	push	r13
    505a:	ef 92       	push	r14
    505c:	ff 92       	push	r15
    505e:	0f 93       	push	r16
    5060:	1f 93       	push	r17
    5062:	df 93       	push	r29
    5064:	cf 93       	push	r28
    5066:	cd b7       	in	r28, 0x3d	; 61
    5068:	de b7       	in	r29, 0x3e	; 62
    506a:	a1 97       	sbiw	r28, 0x21	; 33
    506c:	0f b6       	in	r0, 0x3f	; 63
    506e:	f8 94       	cli
    5070:	de bf       	out	0x3e, r29	; 62
    5072:	0f be       	out	0x3f, r0	; 63
    5074:	cd bf       	out	0x3d, r28	; 61
    5076:	1c 01       	movw	r2, r24
  // Set the CC3000 inactivity timeout to 0 (never timeout).  This will ensure 
  // the CC3000 does not close the listening socket when it's idle for more than 
  // 60 seconds (the default timeout).  See more information from:
  // http://e2e.ti.com/support/low_power_rf/f/851/t/292664.aspx
  unsigned long aucDHCP       = 14400;
    5078:	80 e4       	ldi	r24, 0x40	; 64
    507a:	98 e3       	ldi	r25, 0x38	; 56
    507c:	a0 e0       	ldi	r26, 0x00	; 0
    507e:	b0 e0       	ldi	r27, 0x00	; 0
    5080:	8a 83       	std	Y+2, r24	; 0x02
    5082:	9b 83       	std	Y+3, r25	; 0x03
    5084:	ac 83       	std	Y+4, r26	; 0x04
    5086:	bd 83       	std	Y+5, r27	; 0x05
  unsigned long aucARP        = 3600;
    5088:	80 e1       	ldi	r24, 0x10	; 16
    508a:	9e e0       	ldi	r25, 0x0E	; 14
    508c:	a0 e0       	ldi	r26, 0x00	; 0
    508e:	b0 e0       	ldi	r27, 0x00	; 0
    5090:	8e 83       	std	Y+6, r24	; 0x06
    5092:	9f 83       	std	Y+7, r25	; 0x07
    5094:	a8 87       	std	Y+8, r26	; 0x08
    5096:	b9 87       	std	Y+9, r27	; 0x09
  unsigned long aucKeepalive  = 30;
    5098:	8e e1       	ldi	r24, 0x1E	; 30
    509a:	90 e0       	ldi	r25, 0x00	; 0
    509c:	a0 e0       	ldi	r26, 0x00	; 0
    509e:	b0 e0       	ldi	r27, 0x00	; 0
    50a0:	8a 87       	std	Y+10, r24	; 0x0a
    50a2:	9b 87       	std	Y+11, r25	; 0x0b
    50a4:	ac 87       	std	Y+12, r26	; 0x0c
    50a6:	bd 87       	std	Y+13, r27	; 0x0d
  unsigned long aucInactivity = 0;
    50a8:	1e 86       	std	Y+14, r1	; 0x0e
    50aa:	1f 86       	std	Y+15, r1	; 0x0f
    50ac:	18 8a       	std	Y+16, r1	; 0x10
    50ae:	19 8a       	std	Y+17, r1	; 0x11
  cc3k_int_poll();
    50b0:	0e 94 0a 2b 	call	0x5614	; 0x5614 <cc3k_int_poll>
  if (netapp_timeout_values(&aucDHCP, &aucARP, &aucKeepalive, &aucInactivity) != 0) {
    50b4:	ce 01       	movw	r24, r28
    50b6:	02 96       	adiw	r24, 0x02	; 2
    50b8:	be 01       	movw	r22, r28
    50ba:	6a 5f       	subi	r22, 0xFA	; 250
    50bc:	7f 4f       	sbci	r23, 0xFF	; 255
    50be:	ae 01       	movw	r20, r28
    50c0:	46 5f       	subi	r20, 0xF6	; 246
    50c2:	5f 4f       	sbci	r21, 0xFF	; 255
    50c4:	9e 01       	movw	r18, r28
    50c6:	22 5f       	subi	r18, 0xF2	; 242
    50c8:	3f 4f       	sbci	r19, 0xFF	; 255
    50ca:	0e 94 40 12 	call	0x2480	; 0x2480 <netapp_timeout_values>
    50ce:	61 15       	cp	r22, r1
    50d0:	71 05       	cpc	r23, r1
    50d2:	81 05       	cpc	r24, r1
    50d4:	91 05       	cpc	r25, r1
    50d6:	09 f0       	breq	.+2      	; 0x50da <_ZN22Adafruit_CC3000_Server5beginEv+0x98>
    50d8:	67 c0       	rjmp	.+206    	; 0x51a8 <_ZN22Adafruit_CC3000_Server5beginEv+0x166>
    CC3K_PRINTLN_F("Error setting inactivity timeout!");
    return;
  }
  // Create a TCP socket
  cc3k_int_poll();
    50da:	0e 94 0a 2b 	call	0x5614	; 0x5614 <cc3k_int_poll>
  int16_t soc = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    50de:	62 e0       	ldi	r22, 0x02	; 2
    50e0:	70 e0       	ldi	r23, 0x00	; 0
    50e2:	80 e0       	ldi	r24, 0x00	; 0
    50e4:	90 e0       	ldi	r25, 0x00	; 0
    50e6:	21 e0       	ldi	r18, 0x01	; 1
    50e8:	30 e0       	ldi	r19, 0x00	; 0
    50ea:	40 e0       	ldi	r20, 0x00	; 0
    50ec:	50 e0       	ldi	r21, 0x00	; 0
    50ee:	a6 e0       	ldi	r26, 0x06	; 6
    50f0:	ea 2e       	mov	r14, r26
    50f2:	f1 2c       	mov	r15, r1
    50f4:	01 2d       	mov	r16, r1
    50f6:	11 2d       	mov	r17, r1
    50f8:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <socket>
    50fc:	8b 01       	movw	r16, r22
  if (soc < 0) {
    50fe:	77 fd       	sbrc	r23, 7
    5100:	53 c0       	rjmp	.+166    	; 0x51a8 <_ZN22Adafruit_CC3000_Server5beginEv+0x166>
    CC3K_PRINTLN_F("Couldn't create listening socket!");
    return;
  }
  // Set the socket's accept call as non-blocking.
  cc3k_int_poll();
    5102:	0e 94 0a 2b 	call	0x5614	; 0x5614 <cc3k_int_poll>
  char arg = SOCK_ON; // nsd: looked in TI example code and they pass this as a 'short' in one example, and 'char' in two others. 'char' seems as likely work, and has no endianess issue
    5106:	19 82       	std	Y+1, r1	; 0x01
  if (setsockopt(soc, SOL_SOCKET, SOCKOPT_ACCEPT_NONBLOCK, &arg, sizeof(arg)) < 0) {
    5108:	28 01       	movw	r4, r16
    510a:	66 24       	eor	r6, r6
    510c:	57 fc       	sbrc	r5, 7
    510e:	60 94       	com	r6
    5110:	76 2c       	mov	r7, r6
    5112:	c3 01       	movw	r24, r6
    5114:	b2 01       	movw	r22, r4
    5116:	2f ef       	ldi	r18, 0xFF	; 255
    5118:	3f ef       	ldi	r19, 0xFF	; 255
    511a:	40 e0       	ldi	r20, 0x00	; 0
    511c:	50 e0       	ldi	r21, 0x00	; 0
    511e:	f2 e0       	ldi	r31, 0x02	; 2
    5120:	ef 2e       	mov	r14, r31
    5122:	f1 2c       	mov	r15, r1
    5124:	01 2d       	mov	r16, r1
    5126:	11 2d       	mov	r17, r1
    5128:	6e 01       	movw	r12, r28
    512a:	08 94       	sec
    512c:	c1 1c       	adc	r12, r1
    512e:	d1 1c       	adc	r13, r1
    5130:	e1 e0       	ldi	r30, 0x01	; 1
    5132:	8e 2e       	mov	r8, r30
    5134:	91 2c       	mov	r9, r1
    5136:	a1 2c       	mov	r10, r1
    5138:	b1 2c       	mov	r11, r1
    513a:	0e 94 3f 13 	call	0x267e	; 0x267e <setsockopt>
    513e:	97 fd       	sbrc	r25, 7
    5140:	33 c0       	rjmp	.+102    	; 0x51a8 <_ZN22Adafruit_CC3000_Server5beginEv+0x166>
    CC3K_PRINTLN_F("Couldn't set socket as non-blocking!");
    return;
  }
  // Bind the socket to a TCP address.
  sockaddr_in address;
  address.sin_family = AF_INET;
    5142:	82 e0       	ldi	r24, 0x02	; 2
    5144:	90 e0       	ldi	r25, 0x00	; 0
    5146:	9b 8b       	std	Y+19, r25	; 0x13
    5148:	8a 8b       	std	Y+18, r24	; 0x12
  address.sin_addr.s_addr = htonl(0);     // Listen on any network interface, equivalent to INADDR_ANY in sockets programming.
    514a:	1e 8a       	std	Y+22, r1	; 0x16
    514c:	1f 8a       	std	Y+23, r1	; 0x17
    514e:	18 8e       	std	Y+24, r1	; 0x18
    5150:	19 8e       	std	Y+25, r1	; 0x19
  address.sin_port = htons(_port);        // Listen on the specified port.
    5152:	f1 01       	movw	r30, r2
    5154:	e3 50       	subi	r30, 0x03	; 3
    5156:	ff 4f       	sbci	r31, 0xFF	; 255
    5158:	90 81       	ld	r25, Z
    515a:	81 81       	ldd	r24, Z+1	; 0x01
    515c:	8c 8b       	std	Y+20, r24	; 0x14
    515e:	9d 8b       	std	Y+21, r25	; 0x15
  cc3k_int_poll();
    5160:	0e 94 0a 2b 	call	0x5614	; 0x5614 <cc3k_int_poll>
  if (bind(soc, (sockaddr*) &address, sizeof(address)) < 0) {
    5164:	c3 01       	movw	r24, r6
    5166:	b2 01       	movw	r22, r4
    5168:	ae 01       	movw	r20, r28
    516a:	4e 5e       	subi	r20, 0xEE	; 238
    516c:	5f 4f       	sbci	r21, 0xFF	; 255
    516e:	00 e1       	ldi	r16, 0x10	; 16
    5170:	10 e0       	ldi	r17, 0x00	; 0
    5172:	20 e0       	ldi	r18, 0x00	; 0
    5174:	30 e0       	ldi	r19, 0x00	; 0
    5176:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <bind>
    517a:	97 fd       	sbrc	r25, 7
    517c:	15 c0       	rjmp	.+42     	; 0x51a8 <_ZN22Adafruit_CC3000_Server5beginEv+0x166>
    CC3K_PRINTLN_F("Error binding listen socket to address!");
    return;
  }
  // Start listening for connections.
  // The backlog parameter is 0 as it is not supported on TI's CC3000 firmware.
  cc3k_int_poll();
    517e:	0e 94 0a 2b 	call	0x5614	; 0x5614 <cc3k_int_poll>
  if (listen(soc, 0) < 0) {
    5182:	c3 01       	movw	r24, r6
    5184:	b2 01       	movw	r22, r4
    5186:	20 e0       	ldi	r18, 0x00	; 0
    5188:	30 e0       	ldi	r19, 0x00	; 0
    518a:	40 e0       	ldi	r20, 0x00	; 0
    518c:	50 e0       	ldi	r21, 0x00	; 0
    518e:	0e 94 97 14 	call	0x292e	; 0x292e <listen>
    5192:	97 fd       	sbrc	r25, 7
    5194:	09 c0       	rjmp	.+18     	; 0x51a8 <_ZN22Adafruit_CC3000_Server5beginEv+0x166>
    CC3K_PRINTLN_F("Error opening socket for listening!");
    return;
  }
  _listenSocket = soc;
    5196:	8f ef       	ldi	r24, 0xFF	; 255
    5198:	90 e0       	ldi	r25, 0x00	; 0
    519a:	28 0e       	add	r2, r24
    519c:	39 1e       	adc	r3, r25
    519e:	f1 01       	movw	r30, r2
    51a0:	40 82       	st	Z, r4
    51a2:	51 82       	std	Z+1, r5	; 0x01
    51a4:	62 82       	std	Z+2, r6	; 0x02
    51a6:	73 82       	std	Z+3, r7	; 0x03
}
    51a8:	a1 96       	adiw	r28, 0x21	; 33
    51aa:	0f b6       	in	r0, 0x3f	; 63
    51ac:	f8 94       	cli
    51ae:	de bf       	out	0x3e, r29	; 62
    51b0:	0f be       	out	0x3f, r0	; 63
    51b2:	cd bf       	out	0x3d, r28	; 61
    51b4:	cf 91       	pop	r28
    51b6:	df 91       	pop	r29
    51b8:	1f 91       	pop	r17
    51ba:	0f 91       	pop	r16
    51bc:	ff 90       	pop	r15
    51be:	ef 90       	pop	r14
    51c0:	df 90       	pop	r13
    51c2:	cf 90       	pop	r12
    51c4:	bf 90       	pop	r11
    51c6:	af 90       	pop	r10
    51c8:	9f 90       	pop	r9
    51ca:	8f 90       	pop	r8
    51cc:	7f 90       	pop	r7
    51ce:	6f 90       	pop	r6
    51d0:	5f 90       	pop	r5
    51d2:	4f 90       	pop	r4
    51d4:	3f 90       	pop	r3
    51d6:	2f 90       	pop	r2
    51d8:	08 95       	ret

000051da <_ZN22Adafruit_CC3000_ServerC1Ej>:
  Adafruit_CC3000_Server implementation
*/
/**************************************************************************/

// Construct a TCP server to listen on the specified port.
Adafruit_CC3000_Server::Adafruit_CC3000_Server(uint16_t port)
    51da:	ef 92       	push	r14
    51dc:	ff 92       	push	r15
    51de:	0f 93       	push	r16
    51e0:	1f 93       	push	r17
    51e2:	8c 01       	movw	r16, r24
    51e4:	7b 01       	movw	r14, r22
    51e6:	fc 01       	movw	r30, r24
    51e8:	13 82       	std	Z+3, r1	; 0x03
    51ea:	12 82       	std	Z+2, r1	; 0x02
  : _port(port)
  , _listenSocket(-1)
    51ec:	84 e3       	ldi	r24, 0x34	; 52
    51ee:	92 e0       	ldi	r25, 0x02	; 2
    51f0:	91 83       	std	Z+1, r25	; 0x01
    51f2:	80 83       	st	Z, r24
    51f4:	c8 01       	movw	r24, r16
    51f6:	04 96       	adiw	r24, 0x04	; 4
    51f8:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <_ZN22Adafruit_CC3000_ClientC1Ev>
    51fc:	c8 01       	movw	r24, r16
    51fe:	89 5a       	subi	r24, 0xA9	; 169
    5200:	9f 4f       	sbci	r25, 0xFF	; 255
    5202:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <_ZN22Adafruit_CC3000_ClientC1Ev>
    5206:	c8 01       	movw	r24, r16
    5208:	86 55       	subi	r24, 0x56	; 86
    520a:	9f 4f       	sbci	r25, 0xFF	; 255
    520c:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <_ZN22Adafruit_CC3000_ClientC1Ev>
    5210:	03 50       	subi	r16, 0x03	; 3
    5212:	1f 4f       	sbci	r17, 0xFF	; 255
    5214:	f8 01       	movw	r30, r16
    5216:	e1 92       	st	Z+, r14
    5218:	f1 92       	st	Z+, r15
    521a:	8f ef       	ldi	r24, 0xFF	; 255
    521c:	9f ef       	ldi	r25, 0xFF	; 255
    521e:	af ef       	ldi	r26, 0xFF	; 255
    5220:	bf ef       	ldi	r27, 0xFF	; 255
    5222:	80 83       	st	Z, r24
    5224:	91 83       	std	Z+1, r25	; 0x01
    5226:	a2 83       	std	Z+2, r26	; 0x02
    5228:	b3 83       	std	Z+3, r27	; 0x03
{ }
    522a:	1f 91       	pop	r17
    522c:	0f 91       	pop	r16
    522e:	ff 90       	pop	r15
    5230:	ef 90       	pop	r14
    5232:	08 95       	ret

00005234 <_ZN25Adafruit_CC3000_ClientRef5closeEv>:
  HANDLE_NULL(_client, 0);
  return _client->read();
}

int32_t Adafruit_CC3000_ClientRef::close(void) {
  HANDLE_NULL(_client, 0);
    5234:	fc 01       	movw	r30, r24
    5236:	84 85       	ldd	r24, Z+12	; 0x0c
    5238:	95 85       	ldd	r25, Z+13	; 0x0d
    523a:	00 97       	sbiw	r24, 0x00	; 0
    523c:	29 f4       	brne	.+10     	; 0x5248 <_ZN25Adafruit_CC3000_ClientRef5closeEv+0x14>
    523e:	20 e0       	ldi	r18, 0x00	; 0
    5240:	30 e0       	ldi	r19, 0x00	; 0
    5242:	40 e0       	ldi	r20, 0x00	; 0
    5244:	50 e0       	ldi	r21, 0x00	; 0
    5246:	04 c0       	rjmp	.+8      	; 0x5250 <_ZN25Adafruit_CC3000_ClientRef5closeEv+0x1c>
  return _client->close();
    5248:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <_ZN22Adafruit_CC3000_Client5closeEv>
    524c:	9b 01       	movw	r18, r22
    524e:	ac 01       	movw	r20, r24
}
    5250:	b9 01       	movw	r22, r18
    5252:	ca 01       	movw	r24, r20
    5254:	08 95       	ret

00005256 <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPK19__FlashStringHelper>:
  HANDLE_NULL(_client, 0);
  return _client->fastrprint(ifsh);
}

size_t Adafruit_CC3000_ClientRef::fastrprintln(const __FlashStringHelper *ifsh) {
  HANDLE_NULL(_client, 0);
    5256:	fc 01       	movw	r30, r24
    5258:	84 85       	ldd	r24, Z+12	; 0x0c
    525a:	95 85       	ldd	r25, Z+13	; 0x0d
    525c:	00 97       	sbiw	r24, 0x00	; 0
    525e:	19 f4       	brne	.+6      	; 0x5266 <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPK19__FlashStringHelper+0x10>
    5260:	20 e0       	ldi	r18, 0x00	; 0
    5262:	30 e0       	ldi	r19, 0x00	; 0
    5264:	03 c0       	rjmp	.+6      	; 0x526c <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPK19__FlashStringHelper+0x16>
  return _client->fastrprintln(ifsh);
    5266:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <_ZN22Adafruit_CC3000_Client12fastrprintlnEPK19__FlashStringHelper>
    526a:	9c 01       	movw	r18, r24
}
    526c:	c9 01       	movw	r24, r18
    526e:	08 95       	ret

00005270 <_ZN25Adafruit_CC3000_ClientRef10fastrprintEPK19__FlashStringHelper>:
  HANDLE_NULL(_client, 0);
  return _client->fastrprintln(str);
}

size_t Adafruit_CC3000_ClientRef::fastrprint(const __FlashStringHelper *ifsh) {
  HANDLE_NULL(_client, 0);
    5270:	fc 01       	movw	r30, r24
    5272:	84 85       	ldd	r24, Z+12	; 0x0c
    5274:	95 85       	ldd	r25, Z+13	; 0x0d
    5276:	00 97       	sbiw	r24, 0x00	; 0
    5278:	19 f4       	brne	.+6      	; 0x5280 <_ZN25Adafruit_CC3000_ClientRef10fastrprintEPK19__FlashStringHelper+0x10>
    527a:	20 e0       	ldi	r18, 0x00	; 0
    527c:	30 e0       	ldi	r19, 0x00	; 0
    527e:	03 c0       	rjmp	.+6      	; 0x5286 <_ZN25Adafruit_CC3000_ClientRef10fastrprintEPK19__FlashStringHelper+0x16>
  return _client->fastrprint(ifsh);
    5280:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <_ZN22Adafruit_CC3000_Client10fastrprintEPK19__FlashStringHelper>
    5284:	9c 01       	movw	r18, r24
}
    5286:	c9 01       	movw	r24, r18
    5288:	08 95       	ret

0000528a <_ZN25Adafruit_CC3000_ClientRef10fastrprintEPc>:
  HANDLE_NULL(_client, 0);
  return _client->fastrprintln(str);
}

size_t Adafruit_CC3000_ClientRef::fastrprint(char *str) {
  HANDLE_NULL(_client, 0);
    528a:	fc 01       	movw	r30, r24
    528c:	84 85       	ldd	r24, Z+12	; 0x0c
    528e:	95 85       	ldd	r25, Z+13	; 0x0d
    5290:	00 97       	sbiw	r24, 0x00	; 0
    5292:	19 f4       	brne	.+6      	; 0x529a <_ZN25Adafruit_CC3000_ClientRef10fastrprintEPc+0x10>
    5294:	20 e0       	ldi	r18, 0x00	; 0
    5296:	30 e0       	ldi	r19, 0x00	; 0
    5298:	03 c0       	rjmp	.+6      	; 0x52a0 <_ZN25Adafruit_CC3000_ClientRef10fastrprintEPc+0x16>
  return _client->fastrprint(str);
    529a:	0e 94 3e 20 	call	0x407c	; 0x407c <_ZN22Adafruit_CC3000_Client10fastrprintEPc>
    529e:	9c 01       	movw	r18, r24
}
    52a0:	c9 01       	movw	r24, r18
    52a2:	08 95       	ret

000052a4 <_Z15sendDriverPatchPm>:
//!
//! @brief  The function returns a pointer to the driver patch:
//!         since there is no patch in the host - it returns 0
//
//*****************************************************************************
char *sendDriverPatch(unsigned long *Length) {
    52a4:	fc 01       	movw	r30, r24
  *Length = 0;
    52a6:	10 82       	st	Z, r1
    52a8:	11 82       	std	Z+1, r1	; 0x01
    52aa:	12 82       	std	Z+2, r1	; 0x02
    52ac:	13 82       	std	Z+3, r1	; 0x03
  return NULL;
}
    52ae:	80 e0       	ldi	r24, 0x00	; 0
    52b0:	90 e0       	ldi	r25, 0x00	; 0
    52b2:	08 95       	ret

000052b4 <_Z19sendBootLoaderPatchPm>:
//!
//! @brief  The function returns a pointer to the boot loader patch:
//!         since there is no patch in the host - it returns 0
//
//*****************************************************************************
char *sendBootLoaderPatch(unsigned long *Length) {
    52b4:	fc 01       	movw	r30, r24
  *Length = 0;
    52b6:	10 82       	st	Z, r1
    52b8:	11 82       	std	Z+1, r1	; 0x01
    52ba:	12 82       	std	Z+2, r1	; 0x02
    52bc:	13 82       	std	Z+3, r1	; 0x03
  return NULL;
}
    52be:	80 e0       	ldi	r24, 0x00	; 0
    52c0:	90 e0       	ldi	r25, 0x00	; 0
    52c2:	08 95       	ret

000052c4 <_Z13sendWLFWPatchPm>:
//!
//! @brief  The function returns a pointer to the FW patch:
//!         since there is no patch in the host - it returns 0
//
//*****************************************************************************
char *sendWLFWPatch(unsigned long *Length) {
    52c4:	fc 01       	movw	r30, r24
  *Length = 0;
    52c6:	10 82       	st	Z, r1
    52c8:	11 82       	std	Z+1, r1	; 0x01
    52ca:	12 82       	std	Z+2, r1	; 0x02
    52cc:	13 82       	std	Z+3, r1	; 0x03
  return NULL;
}
    52ce:	80 e0       	ldi	r24, 0x00	; 0
    52d0:	90 e0       	ldi	r25, 0x00	; 0
    52d2:	08 95       	ret

000052d4 <_Z20ReadWlanInterruptPinv>:
{
  DEBUGPRINT_F("\tCC3000: ReadWlanInterruptPin - ");
  DEBUGPRINT_DEC(digitalRead(g_irqPin));
  DEBUGPRINT_F("\n\r");

  return(digitalRead(g_irqPin));
    52d4:	80 91 9c 02 	lds	r24, 0x029C
    52d8:	0e 94 6f 37 	call	0x6ede	; 0x6ede <digitalRead>
    52dc:	9c 01       	movw	r18, r24
    52de:	44 27       	eor	r20, r20
    52e0:	37 fd       	sbrc	r19, 7
    52e2:	40 95       	com	r20
    52e4:	54 2f       	mov	r21, r20
}
    52e6:	b9 01       	movw	r22, r18
    52e8:	ca 01       	movw	r24, r20
    52ea:	08 95       	ret

000052ec <_Z12WriteWlanPinh>:
    DEBUGPRINT_F("\tCC3000: WriteWlanPin - ");
    DEBUGPRINT_DEC(val);
    DEBUGPRINT_F("\n\r");
    delay(1);
  }
  if (val)
    52ec:	88 23       	and	r24, r24
    52ee:	21 f0       	breq	.+8      	; 0x52f8 <_Z12WriteWlanPinh+0xc>
  {
    digitalWrite(g_vbatPin, HIGH);
    52f0:	80 91 9d 02 	lds	r24, 0x029D
    52f4:	61 e0       	ldi	r22, 0x01	; 1
    52f6:	03 c0       	rjmp	.+6      	; 0x52fe <_Z12WriteWlanPinh+0x12>
  }
  else
  {
    digitalWrite(g_vbatPin, LOW);
    52f8:	80 91 9d 02 	lds	r24, 0x029D
    52fc:	60 e0       	ldi	r22, 0x00	; 0
    52fe:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <digitalWrite>
    5302:	08 95       	ret

00005304 <_Z20WlanInterruptDisablev>:
 */
/**************************************************************************/
void WlanInterruptDisable()
{
  DEBUGPRINT_F("\tCC3000: WlanInterruptDisable\n\r");
  ccspi_int_enabled = 0;
    5304:	10 92 fd 03 	sts	0x03FD, r1
  detachInterrupt(g_IRQnum);
    5308:	80 91 9e 02 	lds	r24, 0x029E
    530c:	0e 94 76 35 	call	0x6aec	; 0x6aec <detachInterrupt>
}
    5310:	08 95       	ret

00005312 <_Z11SpiPauseSpiv>:
/**************************************************************************/
void SpiPauseSpi(void)
{
  DEBUGPRINT_F("\tCC3000: SpiPauseSpi\n\r");

  ccspi_int_enabled = 0;
    5312:	10 92 fd 03 	sts	0x03FD, r1
  detachInterrupt(g_IRQnum);
    5316:	80 91 9e 02 	lds	r24, 0x029E
    531a:	0e 94 76 35 	call	0x6aec	; 0x6aec <detachInterrupt>
}
    531e:	08 95       	ret

00005320 <_Z22SpiTriggerRxProcessingv>:
/**************************************************************************/
/*!

 */
/**************************************************************************/
void SpiTriggerRxProcessing(void)
    5320:	cf 93       	push	r28
    5322:	df 93       	push	r29
{
  DEBUGPRINT_F("\tCC3000: SpiTriggerRxProcessing\n\r");

  /* Trigger Rx processing */
  SpiPauseSpi();
    5324:	0e 94 89 29 	call	0x5312	; 0x5312 <_Z11SpiPauseSpiv>
  CC3000_DEASSERT_CS;
    5328:	80 91 9b 02 	lds	r24, 0x029B
    532c:	61 e0       	ldi	r22, 0x01	; 1
    532e:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <digitalWrite>
    5332:	80 91 e7 02 	lds	r24, 0x02E7
    5336:	8c bd       	out	0x2c, r24	; 44
    5338:	80 91 e6 02 	lds	r24, 0x02E6
    533c:	88 23       	and	r24, r24
    533e:	19 f0       	breq	.+6      	; 0x5346 <_Z22SpiTriggerRxProcessingv+0x26>
    5340:	8d b5       	in	r24, 0x2d	; 45
    5342:	81 60       	ori	r24, 0x01	; 1
    5344:	02 c0       	rjmp	.+4      	; 0x534a <_Z22SpiTriggerRxProcessingv+0x2a>
    5346:	8d b5       	in	r24, 0x2d	; 45
    5348:	8e 7f       	andi	r24, 0xFE	; 254
    534a:	8d bd       	out	0x2d, r24	; 45

  //DEBUGPRINT_F("Magic?\n\r");
  /* The magic number that resides at the end of the TX/RX buffer (1 byte after the allocated size)
   * for the purpose of detection of the overrun. If the magic number is overriten - buffer overrun
   * occurred - and we will stuck here forever! */
  if (sSpiInformation.pRxPacket[CC3000_RX_BUFFER_SIZE - 1] != CC3000_BUFFER_MAGIC_NUMBER)
    534c:	c0 91 f4 02 	lds	r28, 0x02F4
    5350:	d0 91 f5 02 	lds	r29, 0x02F5
    5354:	ce 57       	subi	r28, 0x7E	; 126
    5356:	df 4f       	sbci	r29, 0xFF	; 255
    5358:	88 81       	ld	r24, Y
    535a:	c2 58       	subi	r28, 0x82	; 130
    535c:	d0 40       	sbci	r29, 0x00	; 0
    535e:	8e 3d       	cpi	r24, 0xDE	; 222
    5360:	09 f0       	breq	.+2      	; 0x5364 <_Z22SpiTriggerRxProcessingv+0x44>
    5362:	ff cf       	rjmp	.-2      	; 0x5362 <_Z22SpiTriggerRxProcessingv+0x42>
    DEBUGPRINT_F("\tCC3000: ERROR - magic number missing!\n\r");
    while (1);
  }

  //DEBUGPRINT_F("OK!\n\r");
  sSpiInformation.ulSpiState = eSPI_STATE_IDLE;
    5364:	82 e0       	ldi	r24, 0x02	; 2
    5366:	90 e0       	ldi	r25, 0x00	; 0
    5368:	a0 e0       	ldi	r26, 0x00	; 0
    536a:	b0 e0       	ldi	r27, 0x00	; 0
    536c:	80 93 ee 02 	sts	0x02EE, r24
    5370:	90 93 ef 02 	sts	0x02EF, r25
    5374:	a0 93 f0 02 	sts	0x02F0, r26
    5378:	b0 93 f1 02 	sts	0x02F1, r27
  sSpiInformation.SPIRxHandler(sSpiInformation.pRxPacket + SPI_HEADER_SIZE);
    537c:	e0 91 e8 02 	lds	r30, 0x02E8
    5380:	f0 91 e9 02 	lds	r31, 0x02E9
    5384:	ce 01       	movw	r24, r28
    5386:	05 96       	adiw	r24, 0x05	; 5
    5388:	09 95       	icall
}
    538a:	df 91       	pop	r29
    538c:	cf 91       	pop	r28
    538e:	08 95       	ret

00005390 <_Z19WlanInterruptEnablev>:
/**************************************************************************/
void WlanInterruptEnable()
{
  DEBUGPRINT_F("\tCC3000: WlanInterruptEnable.\n\r");
  // delay(100);
  ccspi_int_enabled = 1;
    5390:	81 e0       	ldi	r24, 0x01	; 1
    5392:	80 93 fd 03 	sts	0x03FD, r24
  attachInterrupt(g_IRQnum, SPI_IRQ, FALLING);
    5396:	80 91 9e 02 	lds	r24, 0x029E
    539a:	65 e7       	ldi	r22, 0x75	; 117
    539c:	7a e2       	ldi	r23, 0x2A	; 42
    539e:	42 e0       	ldi	r20, 0x02	; 2
    53a0:	50 e0       	ldi	r21, 0x00	; 0
    53a2:	0e 94 53 35 	call	0x6aa6	; 0x6aa6 <attachInterrupt>
}
    53a6:	08 95       	ret

000053a8 <_Z12SpiResumeSpiv>:
/**************************************************************************/
void SpiResumeSpi(void)
{
  DEBUGPRINT_F("\tCC3000: SpiResumeSpi\n\r");

  ccspi_int_enabled = 1;
    53a8:	81 e0       	ldi	r24, 0x01	; 1
    53aa:	80 93 fd 03 	sts	0x03FD, r24
  attachInterrupt(g_IRQnum, SPI_IRQ, FALLING);
    53ae:	80 91 9e 02 	lds	r24, 0x029E
    53b2:	65 e7       	ldi	r22, 0x75	; 117
    53b4:	7a e2       	ldi	r23, 0x2A	; 42
    53b6:	42 e0       	ldi	r20, 0x02	; 2
    53b8:	50 e0       	ldi	r21, 0x00	; 0
    53ba:	0e 94 53 35 	call	0x6aa6	; 0x6aa6 <attachInterrupt>
}
    53be:	08 95       	ret

000053c0 <_Z22SpiReadDataSynchronousPht>:
/**************************************************************************/
/*!

 */
/**************************************************************************/
void SpiReadDataSynchronous(unsigned char *data, unsigned short size)
    53c0:	0f 93       	push	r16
    53c2:	1f 93       	push	r17
    53c4:	cf 93       	push	r28
    53c6:	df 93       	push	r29
    53c8:	8c 01       	movw	r16, r24
    53ca:	eb 01       	movw	r28, r22
{
  unsigned short i = 0;
  
  DEBUGPRINT_F("\tCC3000: SpiReadDataSynchronous\n\r");
  SPI.setDataMode(SPI_MODE1);
    53cc:	84 e0       	ldi	r24, 0x04	; 4
    53ce:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <_ZN8SPIClass11setDataModeEh>
    53d2:	20 e0       	ldi	r18, 0x00	; 0
    53d4:	30 e0       	ldi	r19, 0x00	; 0
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    53d6:	93 e0       	ldi	r25, 0x03	; 3
    53d8:	0b c0       	rjmp	.+22     	; 0x53f0 <_Z22SpiReadDataSynchronousPht+0x30>
    53da:	9e bd       	out	0x2e, r25	; 46
  while (!(SPSR & _BV(SPIF)))
    53dc:	0d b4       	in	r0, 0x2d	; 45
    53de:	07 fe       	sbrs	r0, 7
    53e0:	fd cf       	rjmp	.-6      	; 0x53dc <_Z22SpiReadDataSynchronousPht+0x1c>
    ;
  return SPDR;
    53e2:	8e b5       	in	r24, 0x2e	; 46
  for (i = 0; i < size; i ++)
  {
    data[i] = SPI.transfer(0x03);
    53e4:	f8 01       	movw	r30, r16
    53e6:	e2 0f       	add	r30, r18
    53e8:	f3 1f       	adc	r31, r19
    53ea:	80 83       	st	Z, r24
{
  unsigned short i = 0;
  
  DEBUGPRINT_F("\tCC3000: SpiReadDataSynchronous\n\r");
  SPI.setDataMode(SPI_MODE1);
  for (i = 0; i < size; i ++)
    53ec:	2f 5f       	subi	r18, 0xFF	; 255
    53ee:	3f 4f       	sbci	r19, 0xFF	; 255
    53f0:	2c 17       	cp	r18, r28
    53f2:	3d 07       	cpc	r19, r29
    53f4:	90 f3       	brcs	.-28     	; 0x53da <_Z22SpiReadDataSynchronousPht+0x1a>
    data[i] = SPI.transfer(0x03);
    DEBUGPRINT_F("  ");
    DEBUGPRINT_HEX(data[i]);
  }
  DEBUGPRINT_F("\n\r");
}
    53f6:	df 91       	pop	r29
    53f8:	cf 91       	pop	r28
    53fa:	1f 91       	pop	r17
    53fc:	0f 91       	pop	r16
    53fe:	08 95       	ret

00005400 <_Z15SpiReadDataContv>:
/**************************************************************************/
/*!

 */
/**************************************************************************/
long SpiReadDataCont(void)
    5400:	ef 92       	push	r14
    5402:	ff 92       	push	r15
    5404:	0f 93       	push	r16
    5406:	1f 93       	push	r17
    5408:	cf 93       	push	r28
    540a:	df 93       	push	r29
  unsigned char *evnt_buff, type;

  DEBUGPRINT_F("\tCC3000: SpiReadDataCont\n\r");

  /* Determine what type of packet we have */
  evnt_buff =  sSpiInformation.pRxPacket;
    540c:	c0 91 f4 02 	lds	r28, 0x02F4
    5410:	d0 91 f5 02 	lds	r29, 0x02F5
  data_to_recv = 0;
  STREAM_TO_UINT8((uint8_t *)(evnt_buff + SPI_HEADER_SIZE), HCI_PACKET_TYPE_OFFSET, type);

  switch(type)
    5414:	8d 81       	ldd	r24, Y+5	; 0x05
    5416:	82 30       	cpi	r24, 0x02	; 2
    5418:	21 f0       	breq	.+8      	; 0x5422 <_Z15SpiReadDataContv+0x22>
    541a:	84 30       	cpi	r24, 0x04	; 4
    541c:	09 f0       	breq	.+2      	; 0x5420 <_Z15SpiReadDataContv+0x20>
    541e:	47 c0       	rjmp	.+142    	; 0x54ae <_Z15SpiReadDataContv+0xae>
    5420:	1b c0       	rjmp	.+54     	; 0x5458 <_Z15SpiReadDataContv+0x58>
  {
    case HCI_TYPE_DATA:
      {
        /* We need to read the rest of data.. */
        STREAM_TO_UINT16((char *)(evnt_buff + SPI_HEADER_SIZE), HCI_DATA_LENGTH_OFFSET, data_to_recv);
    5422:	ce 01       	movw	r24, r28
    5424:	05 96       	adiw	r24, 0x05	; 5
    5426:	63 e0       	ldi	r22, 0x03	; 3
    5428:	70 e0       	ldi	r23, 0x00	; 0
    542a:	0e 94 43 0a 	call	0x1486	; 0x1486 <STREAM_TO_UINT16_f>
    542e:	9c 01       	movw	r18, r24
    5430:	40 e0       	ldi	r20, 0x00	; 0
    5432:	50 e0       	ldi	r21, 0x00	; 0
        if (!((HEADERS_SIZE_EVNT + data_to_recv) & 1))
    5434:	80 fd       	sbrc	r24, 0
    5436:	05 c0       	rjmp	.+10     	; 0x5442 <_Z15SpiReadDataContv+0x42>
        {
          data_to_recv++;
    5438:	2f 5f       	subi	r18, 0xFF	; 255
    543a:	3f 4f       	sbci	r19, 0xFF	; 255
    543c:	4f 4f       	sbci	r20, 0xFF	; 255
    543e:	5f 4f       	sbci	r21, 0xFF	; 255
    5440:	05 c0       	rjmp	.+10     	; 0x544c <_Z15SpiReadDataContv+0x4c>
        }

        if (data_to_recv)
    5442:	21 15       	cp	r18, r1
    5444:	31 05       	cpc	r19, r1
    5446:	41 05       	cpc	r20, r1
    5448:	51 05       	cpc	r21, r1
    544a:	89 f1       	breq	.+98     	; 0x54ae <_Z15SpiReadDataContv+0xae>
        {
          SpiReadDataSynchronous(evnt_buff + HEADERS_SIZE_EVNT, data_to_recv);
    544c:	ce 01       	movw	r24, r28
    544e:	0a 96       	adiw	r24, 0x0a	; 10
    5450:	b9 01       	movw	r22, r18
    5452:	0e 94 e0 29 	call	0x53c0	; 0x53c0 <_Z22SpiReadDataSynchronousPht>
    5456:	2b c0       	rjmp	.+86     	; 0x54ae <_Z15SpiReadDataContv+0xae>
        break;
      }
    case HCI_TYPE_EVNT:
      {
        /* Calculate the rest length of the data */
        STREAM_TO_UINT8((char *)(evnt_buff + SPI_HEADER_SIZE), HCI_EVENT_LENGTH_OFFSET, data_to_recv);
    5458:	88 85       	ldd	r24, Y+8	; 0x08
    545a:	28 2f       	mov	r18, r24
    545c:	30 e0       	ldi	r19, 0x00	; 0
    545e:	40 e0       	ldi	r20, 0x00	; 0
    5460:	50 e0       	ldi	r21, 0x00	; 0
        data_to_recv -= 1;
    5462:	79 01       	movw	r14, r18
    5464:	8a 01       	movw	r16, r20
    5466:	08 94       	sec
    5468:	e1 08       	sbc	r14, r1
    546a:	f1 08       	sbc	r15, r1
    546c:	01 09       	sbc	r16, r1
    546e:	11 09       	sbc	r17, r1

        /* Add padding byte if needed */
        if ((HEADERS_SIZE_EVNT + data_to_recv) & 1)
    5470:	da 01       	movw	r26, r20
    5472:	c9 01       	movw	r24, r18
    5474:	09 96       	adiw	r24, 0x09	; 9
    5476:	a1 1d       	adc	r26, r1
    5478:	b1 1d       	adc	r27, r1
    547a:	80 ff       	sbrs	r24, 0
    547c:	02 c0       	rjmp	.+4      	; 0x5482 <_Z15SpiReadDataContv+0x82>
    547e:	79 01       	movw	r14, r18
    5480:	8a 01       	movw	r16, r20
        {
          data_to_recv++;
        }

        if (data_to_recv)
    5482:	e1 14       	cp	r14, r1
    5484:	f1 04       	cpc	r15, r1
    5486:	01 05       	cpc	r16, r1
    5488:	11 05       	cpc	r17, r1
    548a:	29 f0       	breq	.+10     	; 0x5496 <_Z15SpiReadDataContv+0x96>
        {
          SpiReadDataSynchronous(evnt_buff + HEADERS_SIZE_EVNT, data_to_recv);
    548c:	ce 01       	movw	r24, r28
    548e:	0a 96       	adiw	r24, 0x0a	; 10
    5490:	b7 01       	movw	r22, r14
    5492:	0e 94 e0 29 	call	0x53c0	; 0x53c0 <_Z22SpiReadDataSynchronousPht>
        }

        sSpiInformation.ulSpiState = eSPI_STATE_READ_EOT;
    5496:	88 e0       	ldi	r24, 0x08	; 8
    5498:	90 e0       	ldi	r25, 0x00	; 0
    549a:	a0 e0       	ldi	r26, 0x00	; 0
    549c:	b0 e0       	ldi	r27, 0x00	; 0
    549e:	80 93 ee 02 	sts	0x02EE, r24
    54a2:	90 93 ef 02 	sts	0x02EF, r25
    54a6:	a0 93 f0 02 	sts	0x02F0, r26
    54aa:	b0 93 f1 02 	sts	0x02F1, r27
        break;
      }
  }

  return (0);
}
    54ae:	60 e0       	ldi	r22, 0x00	; 0
    54b0:	70 e0       	ldi	r23, 0x00	; 0
    54b2:	80 e0       	ldi	r24, 0x00	; 0
    54b4:	90 e0       	ldi	r25, 0x00	; 0
    54b6:	df 91       	pop	r29
    54b8:	cf 91       	pop	r28
    54ba:	1f 91       	pop	r17
    54bc:	0f 91       	pop	r16
    54be:	ff 90       	pop	r15
    54c0:	ef 90       	pop	r14
    54c2:	08 95       	ret

000054c4 <_Z20SSIContReadOperationv>:
void SSIContReadOperation(void)
{
  DEBUGPRINT_F("\tCC3000: SpiContReadOperation\n\r");
  
  /* The header was read - continue with  the payload read */
  if (!SpiReadDataCont())
    54c4:	0e 94 00 2a 	call	0x5400	; 0x5400 <_Z15SpiReadDataContv>
    54c8:	61 15       	cp	r22, r1
    54ca:	71 05       	cpc	r23, r1
    54cc:	81 05       	cpc	r24, r1
    54ce:	91 05       	cpc	r25, r1
    54d0:	11 f4       	brne	.+4      	; 0x54d6 <_Z20SSIContReadOperationv+0x12>
  {
    /* All the data was read - finalize handling by switching to teh task
     *  and calling from task Event Handler */
    //DEBUGPRINT_F("SPItrig\n\r");
    SpiTriggerRxProcessing();
    54d2:	0e 94 90 29 	call	0x5320	; 0x5320 <_Z22SpiTriggerRxProcessingv>
    54d6:	08 95       	ret

000054d8 <_Z13SpiReadHeaderv>:
/**************************************************************************/
void SpiReadHeader(void)
{
  DEBUGPRINT_F("\tCC3000: SpiReadHeader\n\r");

  SpiReadDataSynchronous(sSpiInformation.pRxPacket, HEADERS_SIZE_EVNT);
    54d8:	80 91 f4 02 	lds	r24, 0x02F4
    54dc:	90 91 f5 02 	lds	r25, 0x02F5
    54e0:	6a e0       	ldi	r22, 0x0A	; 10
    54e2:	70 e0       	ldi	r23, 0x00	; 0
    54e4:	0e 94 e0 29 	call	0x53c0	; 0x53c0 <_Z22SpiReadDataSynchronousPht>
}
    54e8:	08 95       	ret

000054ea <_Z7SPI_IRQv>:
 */
/**************************************************************************/

void SPI_IRQ(void)
{
  ccspi_is_in_irq = 1;
    54ea:	81 e0       	ldi	r24, 0x01	; 1
    54ec:	80 93 fc 03 	sts	0x03FC, r24

  DEBUGPRINT_F("\tCC3000: Entering SPI_IRQ\n\r");
    
  if (sSpiInformation.ulSpiState == eSPI_STATE_POWERUP)
    54f0:	80 91 ee 02 	lds	r24, 0x02EE
    54f4:	90 91 ef 02 	lds	r25, 0x02EF
    54f8:	a0 91 f0 02 	lds	r26, 0x02F0
    54fc:	b0 91 f1 02 	lds	r27, 0x02F1
    5500:	00 97       	sbiw	r24, 0x00	; 0
    5502:	a1 05       	cpc	r26, r1
    5504:	b1 05       	cpc	r27, r1
    5506:	69 f4       	brne	.+26     	; 0x5522 <_Z7SPI_IRQv+0x38>
  {
    /* IRQ line was low ... perform a callback on the HCI Layer */
    sSpiInformation.ulSpiState = eSPI_STATE_INITIALIZED;
    5508:	81 e0       	ldi	r24, 0x01	; 1
    550a:	90 e0       	ldi	r25, 0x00	; 0
    550c:	a0 e0       	ldi	r26, 0x00	; 0
    550e:	b0 e0       	ldi	r27, 0x00	; 0
    5510:	80 93 ee 02 	sts	0x02EE, r24
    5514:	90 93 ef 02 	sts	0x02EF, r25
    5518:	a0 93 f0 02 	sts	0x02F0, r26
    551c:	b0 93 f1 02 	sts	0x02F1, r27
    5520:	76 c0       	rjmp	.+236    	; 0x560e <_Z7SPI_IRQv+0x124>
  }
  else if (sSpiInformation.ulSpiState == eSPI_STATE_IDLE)
    5522:	82 30       	cpi	r24, 0x02	; 2
    5524:	91 05       	cpc	r25, r1
    5526:	a1 05       	cpc	r26, r1
    5528:	b1 05       	cpc	r27, r1
    552a:	b1 f5       	brne	.+108    	; 0x5598 <_Z7SPI_IRQv+0xae>
  {
    //DEBUGPRINT_F("IDLE\n\r");
    sSpiInformation.ulSpiState = eSPI_STATE_READ_IRQ;    
    552c:	86 e0       	ldi	r24, 0x06	; 6
    552e:	90 e0       	ldi	r25, 0x00	; 0
    5530:	a0 e0       	ldi	r26, 0x00	; 0
    5532:	b0 e0       	ldi	r27, 0x00	; 0
    5534:	80 93 ee 02 	sts	0x02EE, r24
    5538:	90 93 ef 02 	sts	0x02EF, r25
    553c:	a0 93 f0 02 	sts	0x02F0, r26
    5540:	b0 93 f1 02 	sts	0x02F1, r27
    /* IRQ line goes down - start reception */

    CC3000_ASSERT_CS;
    5544:	80 91 9b 02 	lds	r24, 0x029B
    5548:	60 e0       	ldi	r22, 0x00	; 0
    554a:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <digitalWrite>
    554e:	8c b5       	in	r24, 0x2c	; 44
    5550:	80 93 e7 02 	sts	0x02E7, r24
    5554:	8d b5       	in	r24, 0x2d	; 45
    5556:	81 70       	andi	r24, 0x01	; 1
    5558:	80 93 e6 02 	sts	0x02E6, r24
    555c:	80 91 e4 02 	lds	r24, 0x02E4
    5560:	8c bd       	out	0x2c, r24	; 44
    5562:	80 91 e5 02 	lds	r24, 0x02E5
    5566:	88 23       	and	r24, r24
    5568:	19 f0       	breq	.+6      	; 0x5570 <_Z7SPI_IRQv+0x86>
    556a:	8d b5       	in	r24, 0x2d	; 45
    556c:	81 60       	ori	r24, 0x01	; 1
    556e:	02 c0       	rjmp	.+4      	; 0x5574 <_Z7SPI_IRQv+0x8a>
    5570:	8d b5       	in	r24, 0x2d	; 45
    5572:	8e 7f       	andi	r24, 0xFE	; 254
    5574:	8d bd       	out	0x2d, r24	; 45

    // Wait for TX/RX Compete which will come as DMA interrupt
    SpiReadHeader();
    5576:	0e 94 6c 2a 	call	0x54d8	; 0x54d8 <_Z13SpiReadHeaderv>
    sSpiInformation.ulSpiState = eSPI_STATE_READ_EOT;
    557a:	88 e0       	ldi	r24, 0x08	; 8
    557c:	90 e0       	ldi	r25, 0x00	; 0
    557e:	a0 e0       	ldi	r26, 0x00	; 0
    5580:	b0 e0       	ldi	r27, 0x00	; 0
    5582:	80 93 ee 02 	sts	0x02EE, r24
    5586:	90 93 ef 02 	sts	0x02EF, r25
    558a:	a0 93 f0 02 	sts	0x02F0, r26
    558e:	b0 93 f1 02 	sts	0x02F1, r27
    //DEBUGPRINT_F("SSICont\n\r");
    SSIContReadOperation();
    5592:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <_Z20SSIContReadOperationv>
    5596:	3b c0       	rjmp	.+118    	; 0x560e <_Z7SPI_IRQv+0x124>
  }
  else if (sSpiInformation.ulSpiState == eSPI_STATE_WRITE_IRQ)
    5598:	03 97       	sbiw	r24, 0x03	; 3
    559a:	a1 05       	cpc	r26, r1
    559c:	b1 05       	cpc	r27, r1
    559e:	b9 f5       	brne	.+110    	; 0x560e <_Z7SPI_IRQv+0x124>
  {
    SpiWriteDataSynchronous(sSpiInformation.pTxPacket, sSpiInformation.usTxPacketLength);
    55a0:	60 91 f2 02 	lds	r22, 0x02F2
    55a4:	70 91 f3 02 	lds	r23, 0x02F3
    55a8:	40 91 ea 02 	lds	r20, 0x02EA
    55ac:	50 91 eb 02 	lds	r21, 0x02EB
    55b0:	20 e0       	ldi	r18, 0x00	; 0
    55b2:	30 e0       	ldi	r19, 0x00	; 0
    55b4:	0b c0       	rjmp	.+22     	; 0x55cc <_Z7SPI_IRQv+0xe2>
  DEBUGPRINT_F("\tCC3000: SpiWriteDataSynchronous Start\n\r");

  unsigned short loc;
  for (loc = 0; loc < size; loc ++) 
  {
      SPI.transfer(data[loc]);
    55b6:	fb 01       	movw	r30, r22
    55b8:	e2 0f       	add	r30, r18
    55ba:	f3 1f       	adc	r31, r19
    55bc:	80 81       	ld	r24, Z
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    55be:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    55c0:	0d b4       	in	r0, 0x2d	; 45
    55c2:	07 fe       	sbrs	r0, 7
    55c4:	fd cf       	rjmp	.-6      	; 0x55c0 <_Z7SPI_IRQv+0xd6>
    ;
  return SPDR;
    55c6:	8e b5       	in	r24, 0x2e	; 46
void SpiWriteDataSynchronous(unsigned char *data, unsigned short size)
{
  DEBUGPRINT_F("\tCC3000: SpiWriteDataSynchronous Start\n\r");

  unsigned short loc;
  for (loc = 0; loc < size; loc ++) 
    55c8:	2f 5f       	subi	r18, 0xFF	; 255
    55ca:	3f 4f       	sbci	r19, 0xFF	; 255
    55cc:	24 17       	cp	r18, r20
    55ce:	35 07       	cpc	r19, r21
    55d0:	90 f3       	brcs	.-28     	; 0x55b6 <_Z7SPI_IRQv+0xcc>
    SSIContReadOperation();
  }
  else if (sSpiInformation.ulSpiState == eSPI_STATE_WRITE_IRQ)
  {
    SpiWriteDataSynchronous(sSpiInformation.pTxPacket, sSpiInformation.usTxPacketLength);
    sSpiInformation.ulSpiState = eSPI_STATE_IDLE;
    55d2:	82 e0       	ldi	r24, 0x02	; 2
    55d4:	90 e0       	ldi	r25, 0x00	; 0
    55d6:	a0 e0       	ldi	r26, 0x00	; 0
    55d8:	b0 e0       	ldi	r27, 0x00	; 0
    55da:	80 93 ee 02 	sts	0x02EE, r24
    55de:	90 93 ef 02 	sts	0x02EF, r25
    55e2:	a0 93 f0 02 	sts	0x02F0, r26
    55e6:	b0 93 f1 02 	sts	0x02F1, r27
    CC3000_DEASSERT_CS;
    55ea:	80 91 9b 02 	lds	r24, 0x029B
    55ee:	61 e0       	ldi	r22, 0x01	; 1
    55f0:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <digitalWrite>
    55f4:	80 91 e7 02 	lds	r24, 0x02E7
    55f8:	8c bd       	out	0x2c, r24	; 44
    55fa:	80 91 e6 02 	lds	r24, 0x02E6
    55fe:	88 23       	and	r24, r24
    5600:	19 f0       	breq	.+6      	; 0x5608 <_Z7SPI_IRQv+0x11e>
    5602:	8d b5       	in	r24, 0x2d	; 45
    5604:	81 60       	ori	r24, 0x01	; 1
    5606:	02 c0       	rjmp	.+4      	; 0x560c <_Z7SPI_IRQv+0x122>
    5608:	8d b5       	in	r24, 0x2d	; 45
    560a:	8e 7f       	andi	r24, 0xFE	; 254
    560c:	8d bd       	out	0x2d, r24	; 45
  }

  DEBUGPRINT_F("\tCC3000: Leaving SPI_IRQ\n\r");

  ccspi_is_in_irq = 0;
    560e:	10 92 fc 03 	sts	0x03FC, r1
  return;
}
    5612:	08 95       	ret

00005614 <cc3k_int_poll>:
//
//*****************************************************************************

void cc3k_int_poll()
{
  if (digitalRead(g_irqPin) == LOW && ccspi_is_in_irq == 0 && ccspi_int_enabled != 0) {
    5614:	80 91 9c 02 	lds	r24, 0x029C
    5618:	0e 94 6f 37 	call	0x6ede	; 0x6ede <digitalRead>
    561c:	89 2b       	or	r24, r25
    561e:	51 f4       	brne	.+20     	; 0x5634 <cc3k_int_poll+0x20>
    5620:	80 91 fc 03 	lds	r24, 0x03FC
    5624:	88 23       	and	r24, r24
    5626:	31 f4       	brne	.+12     	; 0x5634 <cc3k_int_poll+0x20>
    5628:	80 91 fd 03 	lds	r24, 0x03FD
    562c:	88 23       	and	r24, r24
    562e:	11 f0       	breq	.+4      	; 0x5634 <cc3k_int_poll+0x20>
    SPI_IRQ();
    5630:	0e 94 75 2a 	call	0x54ea	; 0x54ea <_Z7SPI_IRQv>
    5634:	08 95       	ret

00005636 <_Z13SpiFirstWritePht>:
/**************************************************************************/
/*!

 */
/**************************************************************************/
long SpiFirstWrite(unsigned char *ucBuf, unsigned short usLength)
    5636:	0f 93       	push	r16
    5638:	1f 93       	push	r17
    563a:	cf 93       	push	r28
    563c:	df 93       	push	r29
    563e:	ec 01       	movw	r28, r24
    5640:	8b 01       	movw	r16, r22
{
  DEBUGPRINT_F("\tCC3000: SpiWriteFirst\n\r");
  
  /* Workaround for the first transaction */
  CC3000_ASSERT_CS;
    5642:	80 91 9b 02 	lds	r24, 0x029B
    5646:	60 e0       	ldi	r22, 0x00	; 0
    5648:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <digitalWrite>
    564c:	8c b5       	in	r24, 0x2c	; 44
    564e:	80 93 e7 02 	sts	0x02E7, r24
    5652:	8d b5       	in	r24, 0x2d	; 45
    5654:	81 70       	andi	r24, 0x01	; 1
    5656:	80 93 e6 02 	sts	0x02E6, r24
    565a:	80 91 e4 02 	lds	r24, 0x02E4
    565e:	8c bd       	out	0x2c, r24	; 44
    5660:	80 91 e5 02 	lds	r24, 0x02E5
    5664:	88 23       	and	r24, r24
    5666:	19 f0       	breq	.+6      	; 0x566e <_Z13SpiFirstWritePht+0x38>
    5668:	8d b5       	in	r24, 0x2d	; 45
    566a:	81 60       	ori	r24, 0x01	; 1
    566c:	02 c0       	rjmp	.+4      	; 0x5672 <_Z13SpiFirstWritePht+0x3c>
    566e:	8d b5       	in	r24, 0x2d	; 45
    5670:	8e 7f       	andi	r24, 0xFE	; 254
    5672:	8d bd       	out	0x2d, r24	; 45

  /* delay (stay low) for ~50us */
  delay(1);
    5674:	61 e0       	ldi	r22, 0x01	; 1
    5676:	70 e0       	ldi	r23, 0x00	; 0
    5678:	80 e0       	ldi	r24, 0x00	; 0
    567a:	90 e0       	ldi	r25, 0x00	; 0
    567c:	0e 94 48 36 	call	0x6c90	; 0x6c90 <delay>
    5680:	20 e0       	ldi	r18, 0x00	; 0
    5682:	30 e0       	ldi	r19, 0x00	; 0
  DEBUGPRINT_F("\tCC3000: SpiWriteDataSynchronous Start\n\r");

  unsigned short loc;
  for (loc = 0; loc < size; loc ++) 
  {
      SPI.transfer(data[loc]);
    5684:	fe 01       	movw	r30, r28
    5686:	e2 0f       	add	r30, r18
    5688:	f3 1f       	adc	r31, r19
    568a:	80 81       	ld	r24, Z
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    568c:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    568e:	0d b4       	in	r0, 0x2d	; 45
    5690:	07 fe       	sbrs	r0, 7
    5692:	fd cf       	rjmp	.-6      	; 0x568e <_Z13SpiFirstWritePht+0x58>
    ;
  return SPDR;
    5694:	8e b5       	in	r24, 0x2e	; 46
void SpiWriteDataSynchronous(unsigned char *data, unsigned short size)
{
  DEBUGPRINT_F("\tCC3000: SpiWriteDataSynchronous Start\n\r");

  unsigned short loc;
  for (loc = 0; loc < size; loc ++) 
    5696:	2f 5f       	subi	r18, 0xFF	; 255
    5698:	3f 4f       	sbci	r19, 0xFF	; 255
    569a:	24 30       	cpi	r18, 0x04	; 4
    569c:	31 05       	cpc	r19, r1
    569e:	91 f7       	brne	.-28     	; 0x5684 <_Z13SpiFirstWritePht+0x4e>
  delay(1);

  /* SPI writes first 4 bytes of data */
  SpiWriteDataSynchronous(ucBuf, 4);

  delay(1);
    56a0:	61 e0       	ldi	r22, 0x01	; 1
    56a2:	70 e0       	ldi	r23, 0x00	; 0
    56a4:	80 e0       	ldi	r24, 0x00	; 0
    56a6:	90 e0       	ldi	r25, 0x00	; 0
    56a8:	0e 94 48 36 	call	0x6c90	; 0x6c90 <delay>

  SpiWriteDataSynchronous(ucBuf + 4, usLength - 4);
    56ac:	b8 01       	movw	r22, r16
    56ae:	64 50       	subi	r22, 0x04	; 4
    56b0:	70 40       	sbci	r23, 0x00	; 0
    56b2:	fe 01       	movw	r30, r28
    56b4:	20 e0       	ldi	r18, 0x00	; 0
    56b6:	30 e0       	ldi	r19, 0x00	; 0
    56b8:	09 c0       	rjmp	.+18     	; 0x56cc <_Z13SpiFirstWritePht+0x96>
  DEBUGPRINT_F("\tCC3000: SpiWriteDataSynchronous Start\n\r");

  unsigned short loc;
  for (loc = 0; loc < size; loc ++) 
  {
      SPI.transfer(data[loc]);
    56ba:	84 81       	ldd	r24, Z+4	; 0x04
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    56bc:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    56be:	0d b4       	in	r0, 0x2d	; 45
    56c0:	07 fe       	sbrs	r0, 7
    56c2:	fd cf       	rjmp	.-6      	; 0x56be <_Z13SpiFirstWritePht+0x88>
    ;
  return SPDR;
    56c4:	8e b5       	in	r24, 0x2e	; 46
void SpiWriteDataSynchronous(unsigned char *data, unsigned short size)
{
  DEBUGPRINT_F("\tCC3000: SpiWriteDataSynchronous Start\n\r");

  unsigned short loc;
  for (loc = 0; loc < size; loc ++) 
    56c6:	2f 5f       	subi	r18, 0xFF	; 255
    56c8:	3f 4f       	sbci	r19, 0xFF	; 255
    56ca:	31 96       	adiw	r30, 0x01	; 1
    56cc:	26 17       	cp	r18, r22
    56ce:	37 07       	cpc	r19, r23
    56d0:	a0 f3       	brcs	.-24     	; 0x56ba <_Z13SpiFirstWritePht+0x84>
  delay(1);

  SpiWriteDataSynchronous(ucBuf + 4, usLength - 4);

  /* From this point on - operate in a regular manner */
  sSpiInformation.ulSpiState = eSPI_STATE_IDLE;
    56d2:	82 e0       	ldi	r24, 0x02	; 2
    56d4:	90 e0       	ldi	r25, 0x00	; 0
    56d6:	a0 e0       	ldi	r26, 0x00	; 0
    56d8:	b0 e0       	ldi	r27, 0x00	; 0
    56da:	80 93 ee 02 	sts	0x02EE, r24
    56de:	90 93 ef 02 	sts	0x02EF, r25
    56e2:	a0 93 f0 02 	sts	0x02F0, r26
    56e6:	b0 93 f1 02 	sts	0x02F1, r27

  CC3000_DEASSERT_CS;
    56ea:	80 91 9b 02 	lds	r24, 0x029B
    56ee:	61 e0       	ldi	r22, 0x01	; 1
    56f0:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <digitalWrite>
    56f4:	80 91 e7 02 	lds	r24, 0x02E7
    56f8:	8c bd       	out	0x2c, r24	; 44
    56fa:	80 91 e6 02 	lds	r24, 0x02E6
    56fe:	88 23       	and	r24, r24
    5700:	19 f0       	breq	.+6      	; 0x5708 <_Z13SpiFirstWritePht+0xd2>
    5702:	8d b5       	in	r24, 0x2d	; 45
    5704:	81 60       	ori	r24, 0x01	; 1
    5706:	02 c0       	rjmp	.+4      	; 0x570c <_Z13SpiFirstWritePht+0xd6>
    5708:	8d b5       	in	r24, 0x2d	; 45
    570a:	8e 7f       	andi	r24, 0xFE	; 254
    570c:	8d bd       	out	0x2d, r24	; 45

  return(0);
}
    570e:	60 e0       	ldi	r22, 0x00	; 0
    5710:	70 e0       	ldi	r23, 0x00	; 0
    5712:	80 e0       	ldi	r24, 0x00	; 0
    5714:	90 e0       	ldi	r25, 0x00	; 0
    5716:	df 91       	pop	r29
    5718:	cf 91       	pop	r28
    571a:	1f 91       	pop	r17
    571c:	0f 91       	pop	r16
    571e:	08 95       	ret

00005720 <_Z8SpiWritePht>:
/**************************************************************************/
/*!

 */
/**************************************************************************/
long SpiWrite(unsigned char *pUserBuffer, unsigned short usLength)
    5720:	0f 93       	push	r16
    5722:	1f 93       	push	r17
    5724:	cf 93       	push	r28
    5726:	df 93       	push	r29
    5728:	ec 01       	movw	r28, r24
    572a:	90 e0       	ldi	r25, 0x00	; 0
    572c:	60 ff       	sbrs	r22, 0
    572e:	91 e0       	ldi	r25, 0x01	; 1
  if(!(usLength & 0x0001))
  {
    ucPad++;
  }

  pUserBuffer[0] = WRITE;
    5730:	81 e0       	ldi	r24, 0x01	; 1
    5732:	88 83       	st	Y, r24
  pUserBuffer[1] = HI(usLength + ucPad);
    5734:	9b 01       	movw	r18, r22
    5736:	29 0f       	add	r18, r25
    5738:	31 1d       	adc	r19, r1
    573a:	39 83       	std	Y+1, r19	; 0x01
  pUserBuffer[2] = LO(usLength + ucPad);
    573c:	96 0f       	add	r25, r22
    573e:	9a 83       	std	Y+2, r25	; 0x02
  pUserBuffer[3] = 0;
    5740:	1b 82       	std	Y+3, r1	; 0x03
  pUserBuffer[4] = 0;
    5742:	1c 82       	std	Y+4, r1	; 0x04
  usLength += (SPI_HEADER_SIZE + ucPad);

  /* The magic number that resides at the end of the TX/RX buffer (1 byte after the allocated size)
   * for the purpose of overrun detection. If the magic number is overwritten - buffer overrun
   * occurred - and we will be stuck here forever! */
  if (wlan_tx_buffer[CC3000_TX_BUFFER_SIZE - 1] != CC3000_BUFFER_MAGIC_NUMBER)
    5744:	80 91 fb 03 	lds	r24, 0x03FB
    5748:	8e 3d       	cpi	r24, 0xDE	; 222
    574a:	09 f0       	breq	.+2      	; 0x574e <_Z8SpiWritePht+0x2e>
    574c:	ff cf       	rjmp	.-2      	; 0x574c <_Z8SpiWritePht+0x2c>
  {
    DEBUGPRINT_F("\tCC3000: Error - No magic number found in SpiWrite\n\r");
    while (1);
  }

  if (sSpiInformation.ulSpiState == eSPI_STATE_POWERUP)
    574e:	80 91 ee 02 	lds	r24, 0x02EE
    5752:	90 91 ef 02 	lds	r25, 0x02EF
    5756:	a0 91 f0 02 	lds	r26, 0x02F0
    575a:	b0 91 f1 02 	lds	r27, 0x02F1
    575e:	00 97       	sbiw	r24, 0x00	; 0
    5760:	a1 05       	cpc	r26, r1
    5762:	b1 05       	cpc	r27, r1
    5764:	09 f4       	brne	.+2      	; 0x5768 <_Z8SpiWritePht+0x48>
    5766:	ff cf       	rjmp	.-2      	; 0x5766 <_Z8SpiWritePht+0x46>
  pUserBuffer[1] = HI(usLength + ucPad);
  pUserBuffer[2] = LO(usLength + ucPad);
  pUserBuffer[3] = 0;
  pUserBuffer[4] = 0;

  usLength += (SPI_HEADER_SIZE + ucPad);
    5768:	89 01       	movw	r16, r18
    576a:	0b 5f       	subi	r16, 0xFB	; 251
    576c:	1f 4f       	sbci	r17, 0xFF	; 255
  if (sSpiInformation.ulSpiState == eSPI_STATE_POWERUP)
  {
    while (sSpiInformation.ulSpiState != eSPI_STATE_INITIALIZED);
  }

  if (sSpiInformation.ulSpiState == eSPI_STATE_INITIALIZED)
    576e:	01 97       	sbiw	r24, 0x01	; 1
    5770:	a1 05       	cpc	r26, r1
    5772:	b1 05       	cpc	r27, r1
    5774:	29 f4       	brne	.+10     	; 0x5780 <_Z8SpiWritePht+0x60>
  {
    /* This is time for first TX/RX transactions over SPI: the IRQ is down - so need to send read buffer size command */
    SpiFirstWrite(pUserBuffer, usLength);
    5776:	ce 01       	movw	r24, r28
    5778:	b8 01       	movw	r22, r16
    577a:	0e 94 1b 2b 	call	0x5636	; 0x5636 <_Z13SpiFirstWritePht>
    577e:	85 c0       	rjmp	.+266    	; 0x588a <_Z8SpiWritePht+0x16a>
  }
  else
  {
    /* We need to prevent here race that can occur in case two back to back packets are sent to the
     * device, so the state will move to IDLE and once again to not IDLE due to IRQ */
    tSLInformation.WlanInterruptDisable();
    5780:	e0 91 82 02 	lds	r30, 0x0282
    5784:	f0 91 83 02 	lds	r31, 0x0283
    5788:	09 95       	icall

    while (sSpiInformation.ulSpiState != eSPI_STATE_IDLE);
    578a:	80 91 ee 02 	lds	r24, 0x02EE
    578e:	90 91 ef 02 	lds	r25, 0x02EF
    5792:	a0 91 f0 02 	lds	r26, 0x02F0
    5796:	b0 91 f1 02 	lds	r27, 0x02F1
    579a:	02 97       	sbiw	r24, 0x02	; 2
    579c:	a1 05       	cpc	r26, r1
    579e:	b1 05       	cpc	r27, r1
    57a0:	09 f0       	breq	.+2      	; 0x57a4 <_Z8SpiWritePht+0x84>
    57a2:	89 c0       	rjmp	.+274    	; 0x58b6 <_Z8SpiWritePht+0x196>

    sSpiInformation.ulSpiState = eSPI_STATE_WRITE_IRQ;
    57a4:	83 e0       	ldi	r24, 0x03	; 3
    57a6:	90 e0       	ldi	r25, 0x00	; 0
    57a8:	a0 e0       	ldi	r26, 0x00	; 0
    57aa:	b0 e0       	ldi	r27, 0x00	; 0
    57ac:	80 93 ee 02 	sts	0x02EE, r24
    57b0:	90 93 ef 02 	sts	0x02EF, r25
    57b4:	a0 93 f0 02 	sts	0x02F0, r26
    57b8:	b0 93 f1 02 	sts	0x02F1, r27
    sSpiInformation.pTxPacket = pUserBuffer;
    57bc:	d0 93 f3 02 	sts	0x02F3, r29
    57c0:	c0 93 f2 02 	sts	0x02F2, r28
    sSpiInformation.usTxPacketLength = usLength;
    57c4:	10 93 eb 02 	sts	0x02EB, r17
    57c8:	00 93 ea 02 	sts	0x02EA, r16

    /* Assert the CS line and wait till SSI IRQ line is active and then initialize write operation */
    CC3000_ASSERT_CS;
    57cc:	80 91 9b 02 	lds	r24, 0x029B
    57d0:	60 e0       	ldi	r22, 0x00	; 0
    57d2:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <digitalWrite>
    57d6:	8c b5       	in	r24, 0x2c	; 44
    57d8:	80 93 e7 02 	sts	0x02E7, r24
    57dc:	8d b5       	in	r24, 0x2d	; 45
    57de:	81 70       	andi	r24, 0x01	; 1
    57e0:	80 93 e6 02 	sts	0x02E6, r24
    57e4:	80 91 e4 02 	lds	r24, 0x02E4
    57e8:	8c bd       	out	0x2c, r24	; 44
    57ea:	80 91 e5 02 	lds	r24, 0x02E5
    57ee:	88 23       	and	r24, r24
    57f0:	19 f0       	breq	.+6      	; 0x57f8 <_Z8SpiWritePht+0xd8>
    57f2:	8d b5       	in	r24, 0x2d	; 45
    57f4:	81 60       	ori	r24, 0x01	; 1
    57f6:	02 c0       	rjmp	.+4      	; 0x57fc <_Z8SpiWritePht+0xdc>
    57f8:	8d b5       	in	r24, 0x2d	; 45
    57fa:	8e 7f       	andi	r24, 0xFE	; 254
    57fc:	8d bd       	out	0x2d, r24	; 45

    /* Re-enable IRQ - if it was not disabled - this is not a problem... */
    tSLInformation.WlanInterruptEnable();
    57fe:	e0 91 80 02 	lds	r30, 0x0280
    5802:	f0 91 81 02 	lds	r31, 0x0281
    5806:	09 95       	icall

    /* Check for a missing interrupt between the CS assertion and enabling back the interrupts */
    if (tSLInformation.ReadWlanInterruptPin() == 0)
    5808:	e0 91 7e 02 	lds	r30, 0x027E
    580c:	f0 91 7f 02 	lds	r31, 0x027F
    5810:	09 95       	icall
    5812:	61 15       	cp	r22, r1
    5814:	71 05       	cpc	r23, r1
    5816:	81 05       	cpc	r24, r1
    5818:	91 05       	cpc	r25, r1
    581a:	b9 f5       	brne	.+110    	; 0x588a <_Z8SpiWritePht+0x16a>
    {
      SpiWriteDataSynchronous(sSpiInformation.pTxPacket, sSpiInformation.usTxPacketLength);
    581c:	60 91 f2 02 	lds	r22, 0x02F2
    5820:	70 91 f3 02 	lds	r23, 0x02F3
    5824:	40 91 ea 02 	lds	r20, 0x02EA
    5828:	50 91 eb 02 	lds	r21, 0x02EB
    582c:	20 e0       	ldi	r18, 0x00	; 0
    582e:	30 e0       	ldi	r19, 0x00	; 0
    5830:	0b c0       	rjmp	.+22     	; 0x5848 <_Z8SpiWritePht+0x128>
  DEBUGPRINT_F("\tCC3000: SpiWriteDataSynchronous Start\n\r");

  unsigned short loc;
  for (loc = 0; loc < size; loc ++) 
  {
      SPI.transfer(data[loc]);
    5832:	fb 01       	movw	r30, r22
    5834:	e2 0f       	add	r30, r18
    5836:	f3 1f       	adc	r31, r19
    5838:	80 81       	ld	r24, Z
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    583a:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    583c:	0d b4       	in	r0, 0x2d	; 45
    583e:	07 fe       	sbrs	r0, 7
    5840:	fd cf       	rjmp	.-6      	; 0x583c <_Z8SpiWritePht+0x11c>
    ;
  return SPDR;
    5842:	8e b5       	in	r24, 0x2e	; 46
void SpiWriteDataSynchronous(unsigned char *data, unsigned short size)
{
  DEBUGPRINT_F("\tCC3000: SpiWriteDataSynchronous Start\n\r");

  unsigned short loc;
  for (loc = 0; loc < size; loc ++) 
    5844:	2f 5f       	subi	r18, 0xFF	; 255
    5846:	3f 4f       	sbci	r19, 0xFF	; 255
    5848:	24 17       	cp	r18, r20
    584a:	35 07       	cpc	r19, r21
    584c:	90 f3       	brcs	.-28     	; 0x5832 <_Z8SpiWritePht+0x112>
    /* Check for a missing interrupt between the CS assertion and enabling back the interrupts */
    if (tSLInformation.ReadWlanInterruptPin() == 0)
    {
      SpiWriteDataSynchronous(sSpiInformation.pTxPacket, sSpiInformation.usTxPacketLength);

      sSpiInformation.ulSpiState = eSPI_STATE_IDLE;
    584e:	82 e0       	ldi	r24, 0x02	; 2
    5850:	90 e0       	ldi	r25, 0x00	; 0
    5852:	a0 e0       	ldi	r26, 0x00	; 0
    5854:	b0 e0       	ldi	r27, 0x00	; 0
    5856:	80 93 ee 02 	sts	0x02EE, r24
    585a:	90 93 ef 02 	sts	0x02EF, r25
    585e:	a0 93 f0 02 	sts	0x02F0, r26
    5862:	b0 93 f1 02 	sts	0x02F1, r27

      CC3000_DEASSERT_CS;
    5866:	80 91 9b 02 	lds	r24, 0x029B
    586a:	61 e0       	ldi	r22, 0x01	; 1
    586c:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <digitalWrite>
    5870:	80 91 e7 02 	lds	r24, 0x02E7
    5874:	8c bd       	out	0x2c, r24	; 44
    5876:	80 91 e6 02 	lds	r24, 0x02E6
    587a:	88 23       	and	r24, r24
    587c:	19 f0       	breq	.+6      	; 0x5884 <_Z8SpiWritePht+0x164>
    587e:	8d b5       	in	r24, 0x2d	; 45
    5880:	81 60       	ori	r24, 0x01	; 1
    5882:	02 c0       	rjmp	.+4      	; 0x5888 <_Z8SpiWritePht+0x168>
    5884:	8d b5       	in	r24, 0x2d	; 45
    5886:	8e 7f       	andi	r24, 0xFE	; 254
    5888:	8d bd       	out	0x2d, r24	; 45
    }
  }

  /* Due to the fact that we are currently implementing a blocking situation
   * here we will wait till end of transaction */
  while (eSPI_STATE_IDLE != sSpiInformation.ulSpiState);
    588a:	80 91 ee 02 	lds	r24, 0x02EE
    588e:	90 91 ef 02 	lds	r25, 0x02EF
    5892:	a0 91 f0 02 	lds	r26, 0x02F0
    5896:	b0 91 f1 02 	lds	r27, 0x02F1
    589a:	02 97       	sbiw	r24, 0x02	; 2
    589c:	a1 05       	cpc	r26, r1
    589e:	b1 05       	cpc	r27, r1
    58a0:	49 f4       	brne	.+18     	; 0x58b4 <_Z8SpiWritePht+0x194>

  return(0);
}
    58a2:	60 e0       	ldi	r22, 0x00	; 0
    58a4:	70 e0       	ldi	r23, 0x00	; 0
    58a6:	80 e0       	ldi	r24, 0x00	; 0
    58a8:	90 e0       	ldi	r25, 0x00	; 0
    58aa:	df 91       	pop	r29
    58ac:	cf 91       	pop	r28
    58ae:	1f 91       	pop	r17
    58b0:	0f 91       	pop	r16
    58b2:	08 95       	ret
    58b4:	ff cf       	rjmp	.-2      	; 0x58b4 <_Z8SpiWritePht+0x194>
    58b6:	ff cf       	rjmp	.-2      	; 0x58b6 <_Z8SpiWritePht+0x196>

000058b8 <_Z8init_spiv>:
{

  DEBUGPRINT_F("\tCC3000: init_spi\n\r");
  
  /* Set POWER_EN pin to output and disable the CC3000 by default */
  pinMode(g_vbatPin, OUTPUT);
    58b8:	80 91 9d 02 	lds	r24, 0x029D
    58bc:	61 e0       	ldi	r22, 0x01	; 1
    58be:	0e 94 dc 36 	call	0x6db8	; 0x6db8 <pinMode>
  digitalWrite(g_vbatPin, 0);
    58c2:	80 91 9d 02 	lds	r24, 0x029D
    58c6:	60 e0       	ldi	r22, 0x00	; 0
    58c8:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <digitalWrite>
  delay(500);
    58cc:	64 ef       	ldi	r22, 0xF4	; 244
    58ce:	71 e0       	ldi	r23, 0x01	; 1
    58d0:	80 e0       	ldi	r24, 0x00	; 0
    58d2:	90 e0       	ldi	r25, 0x00	; 0
    58d4:	0e 94 48 36 	call	0x6c90	; 0x6c90 <delay>

  /* Set CS pin to output (don't de-assert yet) */
  pinMode(g_csPin, OUTPUT);
    58d8:	80 91 9b 02 	lds	r24, 0x029B
    58dc:	61 e0       	ldi	r22, 0x01	; 1
    58de:	0e 94 dc 36 	call	0x6db8	; 0x6db8 <pinMode>

  /* Set interrupt/gpio pin to input */
#if defined(INPUT_PULLUP)
  pinMode(g_irqPin, INPUT_PULLUP);
    58e2:	80 91 9c 02 	lds	r24, 0x029C
    58e6:	62 e0       	ldi	r22, 0x02	; 2
    58e8:	0e 94 dc 36 	call	0x6db8	; 0x6db8 <pinMode>
#else
  pinMode(g_irqPin, INPUT);
  digitalWrite(g_irqPin, HIGH); // w/weak pullup
#endif

  SpiConfigStoreOld(); // prime ccspi_old* values for DEASSERT
    58ec:	8c b5       	in	r24, 0x2c	; 44
    58ee:	80 93 e7 02 	sts	0x02E7, r24
    58f2:	8d b5       	in	r24, 0x2d	; 45
    58f4:	81 70       	andi	r24, 0x01	; 1
    58f6:	80 93 e6 02 	sts	0x02E6, r24

  /* Initialise SPI (Mode 1) */
  SPI.begin();
    58fa:	0e 94 08 0a 	call	0x1410	; 0x1410 <_ZN8SPIClass5beginEv>
  SPI.setDataMode(SPI_MODE1);
    58fe:	84 e0       	ldi	r24, 0x04	; 4
    5900:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <_ZN8SPIClass11setDataModeEh>
  SPI.setBitOrder(MSBFIRST);
    5904:	81 e0       	ldi	r24, 0x01	; 1
    5906:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <_ZN8SPIClass11setBitOrderEh>
  SPI.setClockDivider(g_SPIspeed);
    590a:	80 91 9f 02 	lds	r24, 0x029F
    590e:	0e 94 f7 09 	call	0x13ee	; 0x13ee <_ZN8SPIClass15setClockDividerEh>
  
  SpiConfigStoreMy(); // prime ccspi_my* values for ASSERT
    5912:	8c b5       	in	r24, 0x2c	; 44
    5914:	80 93 e4 02 	sts	0x02E4, r24
    5918:	8d b5       	in	r24, 0x2d	; 45
    591a:	81 70       	andi	r24, 0x01	; 1
    591c:	80 93 e5 02 	sts	0x02E5, r24
#ifdef SPI_HAS_TRANSACTION
  SPI.usingInterrupt(g_IRQnum);
  digitalWrite(g_csPin, HIGH);  // same as CC3000_DEASSERT_CS, but not
  SpiConfigPop();               // SPI.endTransaction, because none began
#else
  CC3000_DEASSERT_CS;
    5920:	80 91 9b 02 	lds	r24, 0x029B
    5924:	61 e0       	ldi	r22, 0x01	; 1
    5926:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <digitalWrite>
    592a:	80 91 e7 02 	lds	r24, 0x02E7
    592e:	8c bd       	out	0x2c, r24	; 44
    5930:	80 91 e6 02 	lds	r24, 0x02E6
    5934:	88 23       	and	r24, r24
    5936:	19 f0       	breq	.+6      	; 0x593e <_Z8init_spiv+0x86>
    5938:	8d b5       	in	r24, 0x2d	; 45
    593a:	81 60       	ori	r24, 0x01	; 1
    593c:	02 c0       	rjmp	.+4      	; 0x5942 <_Z8init_spiv+0x8a>
    593e:	8d b5       	in	r24, 0x2d	; 45
    5940:	8e 7f       	andi	r24, 0xFE	; 254
    5942:	8d bd       	out	0x2d, r24	; 45
  /* ToDo: Configure IRQ interrupt! */

  DEBUGPRINT_F("\tCC3000: Finished init_spi\n\r");
  
  return(ESUCCESS);
}
    5944:	80 e0       	ldi	r24, 0x00	; 0
    5946:	90 e0       	ldi	r25, 0x00	; 0
    5948:	08 95       	ret

0000594a <_Z7SpiOpenPFvPvE>:
/**************************************************************************/
/*!

 */
/**************************************************************************/
void SpiOpen(gcSpiHandleRx pfRxHandler)
    594a:	cf 93       	push	r28
    594c:	df 93       	push	r29
{
  DEBUGPRINT_F("\tCC3000: SpiOpen");
  
  sSpiInformation.ulSpiState = eSPI_STATE_POWERUP;
    594e:	10 92 ee 02 	sts	0x02EE, r1
    5952:	10 92 ef 02 	sts	0x02EF, r1
    5956:	10 92 f0 02 	sts	0x02F0, r1
    595a:	10 92 f1 02 	sts	0x02F1, r1

  memset(spi_buffer, 0, sizeof(spi_buffer));
    595e:	a6 ef       	ldi	r26, 0xF6	; 246
    5960:	b2 e0       	ldi	r27, 0x02	; 2
    5962:	23 e8       	ldi	r18, 0x83	; 131
    5964:	ed 01       	movw	r28, r26
    5966:	e2 2f       	mov	r30, r18
    5968:	19 92       	st	Y+, r1
    596a:	ea 95       	dec	r30
    596c:	e9 f7       	brne	.-6      	; 0x5968 <_Z7SpiOpenPFvPvE+0x1e>
  memset(wlan_tx_buffer, 0, sizeof(wlan_tx_buffer));
    596e:	e9 e7       	ldi	r30, 0x79	; 121
    5970:	f3 e0       	ldi	r31, 0x03	; 3
    5972:	ef 01       	movw	r28, r30
    5974:	19 92       	st	Y+, r1
    5976:	2a 95       	dec	r18
    5978:	e9 f7       	brne	.-6      	; 0x5974 <_Z7SpiOpenPFvPvE+0x2a>

  sSpiInformation.SPIRxHandler      = pfRxHandler;
    597a:	90 93 e9 02 	sts	0x02E9, r25
    597e:	80 93 e8 02 	sts	0x02E8, r24
  sSpiInformation.usTxPacketLength  = 0;
    5982:	10 92 eb 02 	sts	0x02EB, r1
    5986:	10 92 ea 02 	sts	0x02EA, r1
  sSpiInformation.pTxPacket         = NULL;
    598a:	10 92 f3 02 	sts	0x02F3, r1
    598e:	10 92 f2 02 	sts	0x02F2, r1
  sSpiInformation.pRxPacket         = (unsigned char *)spi_buffer;
    5992:	b0 93 f5 02 	sts	0x02F5, r27
    5996:	a0 93 f4 02 	sts	0x02F4, r26
  sSpiInformation.usRxPacketLength  = 0;
    599a:	10 92 ed 02 	sts	0x02ED, r1
    599e:	10 92 ec 02 	sts	0x02EC, r1
  
  spi_buffer[CC3000_RX_BUFFER_SIZE - 1]     = CC3000_BUFFER_MAGIC_NUMBER;
    59a2:	8e ed       	ldi	r24, 0xDE	; 222
    59a4:	80 93 78 03 	sts	0x0378, r24
  wlan_tx_buffer[CC3000_TX_BUFFER_SIZE - 1] = CC3000_BUFFER_MAGIC_NUMBER;
    59a8:	80 93 fb 03 	sts	0x03FB, r24

  /* Enable interrupt on the GPIO pin of WLAN IRQ */
  tSLInformation.WlanInterruptEnable();
    59ac:	e0 91 80 02 	lds	r30, 0x0280
    59b0:	f0 91 81 02 	lds	r31, 0x0281
    59b4:	09 95       	icall

  DEBUGPRINT_F("\tCC3000: Finished SpiOpen\n\r");
}
    59b6:	df 91       	pop	r29
    59b8:	cf 91       	pop	r28
    59ba:	08 95       	ret

000059bc <_GLOBAL__I_cc3000>:
    Serial.print(F("\nDHCPsrv: ")); cc3000.printIPdotsRev(dhcpserv);
    Serial.print(F("\nDNSserv: ")); cc3000.printIPdotsRev(dnsserv);
    Serial.println();
    return true;
  }
}
    59bc:	ef 92       	push	r14
    59be:	ff 92       	push	r15
    59c0:	0f 93       	push	r16
    59c2:	87 ef       	ldi	r24, 0xF7	; 247
    59c4:	95 e0       	ldi	r25, 0x05	; 5
    59c6:	60 e0       	ldi	r22, 0x00	; 0
    59c8:	40 e0       	ldi	r20, 0x00	; 0
    59ca:	20 e0       	ldi	r18, 0x00	; 0
    59cc:	00 e0       	ldi	r16, 0x00	; 0
    59ce:	0e 94 2e 33 	call	0x665c	; 0x665c <_ZN9IPAddressC1Ehhhh>
#define ADAFRUIT_CC3000_CS    10
// Use hardware SPI for the remaining pins
// On an UNO, SCK = 13, MISO = 12, and MOSI = 11

Adafruit_CC3000 cc3000 = Adafruit_CC3000(ADAFRUIT_CC3000_CS, ADAFRUIT_CC3000_IRQ, ADAFRUIT_CC3000_VBAT,
                                         SPI_CLOCK_DIVIDER); // you can change this clock speed
    59d2:	8e ef       	ldi	r24, 0xFE	; 254
    59d4:	93 e0       	ldi	r25, 0x03	; 3
    59d6:	6a e0       	ldi	r22, 0x0A	; 10
    59d8:	43 e0       	ldi	r20, 0x03	; 3
    59da:	25 e0       	ldi	r18, 0x05	; 5
    59dc:	04 e0       	ldi	r16, 0x04	; 4
    59de:	35 e8       	ldi	r19, 0x85	; 133
    59e0:	e3 2e       	mov	r14, r19
    59e2:	36 e0       	ldi	r19, 0x06	; 6
    59e4:	f3 2e       	mov	r15, r19
    59e6:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <_ZN15Adafruit_CC3000C1EhhhhP5Print>

#define TIMEOUT_MS            500    // Amount of time in milliseconds to wait for
                                     // an incoming request to finish.  Don't set this
                                     // too high or your server could be slow to respond.

Adafruit_CC3000_Server httpServer(LISTEN_PORT);
    59ea:	8f ef       	ldi	r24, 0xFF	; 255
    59ec:	93 e0       	ldi	r25, 0x03	; 3
    59ee:	60 e5       	ldi	r22, 0x50	; 80
    59f0:	70 e0       	ldi	r23, 0x00	; 0
    59f2:	0e 94 ed 28 	call	0x51da	; 0x51da <_ZN22Adafruit_CC3000_ServerC1Ej>
    Serial.print(F("\nDHCPsrv: ")); cc3000.printIPdotsRev(dhcpserv);
    Serial.print(F("\nDNSserv: ")); cc3000.printIPdotsRev(dnsserv);
    Serial.println();
    return true;
  }
}
    59f6:	0f 91       	pop	r16
    59f8:	ff 90       	pop	r15
    59fa:	ef 90       	pop	r14
    59fc:	08 95       	ret

000059fe <displayConnectionDetails>:
  if (linepath != NULL)
    strncpy(path, linepath, MAX_PATH);
}

// Tries to read the IP address and other connection details
bool displayConnectionDetails(void)
    59fe:	ef 92       	push	r14
    5a00:	ff 92       	push	r15
    5a02:	0f 93       	push	r16
    5a04:	1f 93       	push	r17
    5a06:	df 93       	push	r29
    5a08:	cf 93       	push	r28
    5a0a:	cd b7       	in	r28, 0x3d	; 61
    5a0c:	de b7       	in	r29, 0x3e	; 62
    5a0e:	64 97       	sbiw	r28, 0x14	; 20
    5a10:	0f b6       	in	r0, 0x3f	; 63
    5a12:	f8 94       	cli
    5a14:	de bf       	out	0x3e, r29	; 62
    5a16:	0f be       	out	0x3f, r0	; 63
    5a18:	cd bf       	out	0x3d, r28	; 61
{
  uint32_t ipAddress, netmask, gateway, dhcpserv, dnsserv;

  if(!cc3000.getIPAddress(&ipAddress, &netmask, &gateway, &dhcpserv, &dnsserv))
    5a1a:	8e ef       	ldi	r24, 0xFE	; 254
    5a1c:	93 e0       	ldi	r25, 0x03	; 3
    5a1e:	be 01       	movw	r22, r28
    5a20:	6f 5f       	subi	r22, 0xFF	; 255
    5a22:	7f 4f       	sbci	r23, 0xFF	; 255
    5a24:	ae 01       	movw	r20, r28
    5a26:	4b 5f       	subi	r20, 0xFB	; 251
    5a28:	5f 4f       	sbci	r21, 0xFF	; 255
    5a2a:	9e 01       	movw	r18, r28
    5a2c:	27 5f       	subi	r18, 0xF7	; 247
    5a2e:	3f 4f       	sbci	r19, 0xFF	; 255
    5a30:	8e 01       	movw	r16, r28
    5a32:	03 5f       	subi	r16, 0xF3	; 243
    5a34:	1f 4f       	sbci	r17, 0xFF	; 255
    5a36:	e1 e1       	ldi	r30, 0x11	; 17
    5a38:	ee 2e       	mov	r14, r30
    5a3a:	f1 2c       	mov	r15, r1
    5a3c:	ec 0e       	add	r14, r28
    5a3e:	fd 1e       	adc	r15, r29
    5a40:	0e 94 43 22 	call	0x4486	; 0x4486 <_ZN15Adafruit_CC300012getIPAddressEPmS0_S0_S0_S0_>
    5a44:	88 23       	and	r24, r24
    5a46:	41 f4       	brne	.+16     	; 0x5a58 <displayConnectionDetails+0x5a>
  {
    Serial.println(F("Unable to retrieve the IP Address!\r\n"));
    5a48:	85 e8       	ldi	r24, 0x85	; 133
    5a4a:	96 e0       	ldi	r25, 0x06	; 6
    5a4c:	64 ee       	ldi	r22, 0xE4	; 228
    5a4e:	70 e0       	ldi	r23, 0x00	; 0
    5a50:	0e 94 16 34 	call	0x682c	; 0x682c <_ZN5Print7printlnEPK19__FlashStringHelper>
    5a54:	80 e0       	ldi	r24, 0x00	; 0
    5a56:	4b c0       	rjmp	.+150    	; 0x5aee <displayConnectionDetails+0xf0>
    return false;
  }
  else
  {
    Serial.print(F("\nIP Addr: ")); cc3000.printIPdotsRev(ipAddress);
    5a58:	85 e8       	ldi	r24, 0x85	; 133
    5a5a:	96 e0       	ldi	r25, 0x06	; 6
    5a5c:	69 ed       	ldi	r22, 0xD9	; 217
    5a5e:	70 e0       	ldi	r23, 0x00	; 0
    5a60:	0e 94 cb 33 	call	0x6796	; 0x6796 <_ZN5Print5printEPK19__FlashStringHelper>
    5a64:	49 81       	ldd	r20, Y+1	; 0x01
    5a66:	5a 81       	ldd	r21, Y+2	; 0x02
    5a68:	6b 81       	ldd	r22, Y+3	; 0x03
    5a6a:	7c 81       	ldd	r23, Y+4	; 0x04
    5a6c:	8e ef       	ldi	r24, 0xFE	; 254
    5a6e:	93 e0       	ldi	r25, 0x03	; 3
    5a70:	0e 94 9b 23 	call	0x4736	; 0x4736 <_ZN15Adafruit_CC300014printIPdotsRevEm>
    Serial.print(F("\nNetmask: ")); cc3000.printIPdotsRev(netmask);
    5a74:	85 e8       	ldi	r24, 0x85	; 133
    5a76:	96 e0       	ldi	r25, 0x06	; 6
    5a78:	6e ec       	ldi	r22, 0xCE	; 206
    5a7a:	70 e0       	ldi	r23, 0x00	; 0
    5a7c:	0e 94 cb 33 	call	0x6796	; 0x6796 <_ZN5Print5printEPK19__FlashStringHelper>
    5a80:	4d 81       	ldd	r20, Y+5	; 0x05
    5a82:	5e 81       	ldd	r21, Y+6	; 0x06
    5a84:	6f 81       	ldd	r22, Y+7	; 0x07
    5a86:	78 85       	ldd	r23, Y+8	; 0x08
    5a88:	8e ef       	ldi	r24, 0xFE	; 254
    5a8a:	93 e0       	ldi	r25, 0x03	; 3
    5a8c:	0e 94 9b 23 	call	0x4736	; 0x4736 <_ZN15Adafruit_CC300014printIPdotsRevEm>
    Serial.print(F("\nGateway: ")); cc3000.printIPdotsRev(gateway);
    5a90:	85 e8       	ldi	r24, 0x85	; 133
    5a92:	96 e0       	ldi	r25, 0x06	; 6
    5a94:	63 ec       	ldi	r22, 0xC3	; 195
    5a96:	70 e0       	ldi	r23, 0x00	; 0
    5a98:	0e 94 cb 33 	call	0x6796	; 0x6796 <_ZN5Print5printEPK19__FlashStringHelper>
    5a9c:	49 85       	ldd	r20, Y+9	; 0x09
    5a9e:	5a 85       	ldd	r21, Y+10	; 0x0a
    5aa0:	6b 85       	ldd	r22, Y+11	; 0x0b
    5aa2:	7c 85       	ldd	r23, Y+12	; 0x0c
    5aa4:	8e ef       	ldi	r24, 0xFE	; 254
    5aa6:	93 e0       	ldi	r25, 0x03	; 3
    5aa8:	0e 94 9b 23 	call	0x4736	; 0x4736 <_ZN15Adafruit_CC300014printIPdotsRevEm>
    Serial.print(F("\nDHCPsrv: ")); cc3000.printIPdotsRev(dhcpserv);
    5aac:	85 e8       	ldi	r24, 0x85	; 133
    5aae:	96 e0       	ldi	r25, 0x06	; 6
    5ab0:	68 eb       	ldi	r22, 0xB8	; 184
    5ab2:	70 e0       	ldi	r23, 0x00	; 0
    5ab4:	0e 94 cb 33 	call	0x6796	; 0x6796 <_ZN5Print5printEPK19__FlashStringHelper>
    5ab8:	4d 85       	ldd	r20, Y+13	; 0x0d
    5aba:	5e 85       	ldd	r21, Y+14	; 0x0e
    5abc:	6f 85       	ldd	r22, Y+15	; 0x0f
    5abe:	78 89       	ldd	r23, Y+16	; 0x10
    5ac0:	8e ef       	ldi	r24, 0xFE	; 254
    5ac2:	93 e0       	ldi	r25, 0x03	; 3
    5ac4:	0e 94 9b 23 	call	0x4736	; 0x4736 <_ZN15Adafruit_CC300014printIPdotsRevEm>
    Serial.print(F("\nDNSserv: ")); cc3000.printIPdotsRev(dnsserv);
    5ac8:	85 e8       	ldi	r24, 0x85	; 133
    5aca:	96 e0       	ldi	r25, 0x06	; 6
    5acc:	6d ea       	ldi	r22, 0xAD	; 173
    5ace:	70 e0       	ldi	r23, 0x00	; 0
    5ad0:	0e 94 cb 33 	call	0x6796	; 0x6796 <_ZN5Print5printEPK19__FlashStringHelper>
    5ad4:	49 89       	ldd	r20, Y+17	; 0x11
    5ad6:	5a 89       	ldd	r21, Y+18	; 0x12
    5ad8:	6b 89       	ldd	r22, Y+19	; 0x13
    5ada:	7c 89       	ldd	r23, Y+20	; 0x14
    5adc:	8e ef       	ldi	r24, 0xFE	; 254
    5ade:	93 e0       	ldi	r25, 0x03	; 3
    5ae0:	0e 94 9b 23 	call	0x4736	; 0x4736 <_ZN15Adafruit_CC300014printIPdotsRevEm>
    Serial.println();
    5ae4:	85 e8       	ldi	r24, 0x85	; 133
    5ae6:	96 e0       	ldi	r25, 0x06	; 6
    5ae8:	0e 94 f6 33 	call	0x67ec	; 0x67ec <_ZN5Print7printlnEv>
    5aec:	81 e0       	ldi	r24, 0x01	; 1
    return true;
  }
}
    5aee:	64 96       	adiw	r28, 0x14	; 20
    5af0:	0f b6       	in	r0, 0x3f	; 63
    5af2:	f8 94       	cli
    5af4:	de bf       	out	0x3e, r29	; 62
    5af6:	0f be       	out	0x3f, r0	; 63
    5af8:	cd bf       	out	0x3d, r28	; 61
    5afa:	cf 91       	pop	r28
    5afc:	df 91       	pop	r29
    5afe:	1f 91       	pop	r17
    5b00:	0f 91       	pop	r16
    5b02:	ff 90       	pop	r15
    5b04:	ef 90       	pop	r14
    5b06:	08 95       	ret

00005b08 <parseFirstLine>:
  }
  return false;
}

// Parse the action and path from the first line of an HTTP request.
void parseFirstLine(char* line, char* action, char* path) {
    5b08:	0f 93       	push	r16
    5b0a:	1f 93       	push	r17
    5b0c:	cf 93       	push	r28
    5b0e:	df 93       	push	r29
    5b10:	eb 01       	movw	r28, r22
    5b12:	8a 01       	movw	r16, r20
  // Parse first word up to whitespace as action.bool displayConnectionDetails(void)
  char* lineaction = strtok(line, " ");
    5b14:	60 e1       	ldi	r22, 0x10	; 16
    5b16:	71 e0       	ldi	r23, 0x01	; 1
    5b18:	0e 94 da 03 	call	0x7b4	; 0x7b4 <strtok>
    5b1c:	bc 01       	movw	r22, r24
  if (lineaction != NULL)
    5b1e:	00 97       	sbiw	r24, 0x00	; 0
    5b20:	29 f0       	breq	.+10     	; 0x5b2c <parseFirstLine+0x24>
    strncpy(action, lineaction, MAX_ACTION);
    5b22:	ce 01       	movw	r24, r28
    5b24:	4a e0       	ldi	r20, 0x0A	; 10
    5b26:	50 e0       	ldi	r21, 0x00	; 0
    5b28:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <strncpy>
  // Parse second word up to whitespace as path.
  char* linepath = strtok(NULL, " ");
    5b2c:	80 e0       	ldi	r24, 0x00	; 0
    5b2e:	90 e0       	ldi	r25, 0x00	; 0
    5b30:	60 e1       	ldi	r22, 0x10	; 16
    5b32:	71 e0       	ldi	r23, 0x01	; 1
    5b34:	0e 94 da 03 	call	0x7b4	; 0x7b4 <strtok>
    5b38:	bc 01       	movw	r22, r24
  if (linepath != NULL)
    5b3a:	00 97       	sbiw	r24, 0x00	; 0
    5b3c:	29 f0       	breq	.+10     	; 0x5b48 <parseFirstLine+0x40>
    strncpy(path, linepath, MAX_PATH);
    5b3e:	c8 01       	movw	r24, r16
    5b40:	44 e6       	ldi	r20, 0x64	; 100
    5b42:	50 e0       	ldi	r21, 0x00	; 0
    5b44:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <strncpy>
}
    5b48:	df 91       	pop	r29
    5b4a:	cf 91       	pop	r28
    5b4c:	1f 91       	pop	r17
    5b4e:	0f 91       	pop	r16
    5b50:	08 95       	ret

00005b52 <parseRequest>:
//  [method] [path] [version] \r\n
//  Header_key_1: Header_value_1 \r\n
//  ...
//  Header_key_n: Header_value_n \r\n
//  \r\n
bool parseRequest(uint8_t* buf, int bufSize, char* action, char* path) {
    5b52:	dc 01       	movw	r26, r24
  // Check if the request ends with \r\n to signal end of first line.
  if (bufSize < 2)
    5b54:	62 30       	cpi	r22, 0x02	; 2
    5b56:	71 05       	cpc	r23, r1
    5b58:	9c f0       	brlt	.+38     	; 0x5b80 <parseRequest+0x2e>
    return false;
  if (buf[bufSize-2] == '\r' && buf[bufSize-1] == '\n') {
    5b5a:	fc 01       	movw	r30, r24
    5b5c:	e6 0f       	add	r30, r22
    5b5e:	f7 1f       	adc	r31, r23
    5b60:	32 97       	sbiw	r30, 0x02	; 2
    5b62:	80 81       	ld	r24, Z
    5b64:	32 96       	adiw	r30, 0x02	; 2
    5b66:	8d 30       	cpi	r24, 0x0D	; 13
    5b68:	59 f4       	brne	.+22     	; 0x5b80 <parseRequest+0x2e>
    5b6a:	31 97       	sbiw	r30, 0x01	; 1
    5b6c:	80 81       	ld	r24, Z
    5b6e:	8a 30       	cpi	r24, 0x0A	; 10
    5b70:	39 f4       	brne	.+14     	; 0x5b80 <parseRequest+0x2e>
    parseFirstLine((char*)buf, action, path);
    5b72:	cd 01       	movw	r24, r26
    5b74:	ba 01       	movw	r22, r20
    5b76:	a9 01       	movw	r20, r18
    5b78:	0e 94 84 2d 	call	0x5b08	; 0x5b08 <parseFirstLine>
    5b7c:	81 e0       	ldi	r24, 0x01	; 1
    5b7e:	08 95       	ret
    return true;
    5b80:	80 e0       	ldi	r24, 0x00	; 0
  }
  return false;
}
    5b82:	08 95       	ret

00005b84 <runHttpCommand>:
}


// Парсер GET-запроса
// возвращает статус выполнения команды
int runHttpCommand(char http_path[]) {
    5b84:	ef 92       	push	r14
    5b86:	ff 92       	push	r15
    5b88:	0f 93       	push	r16
    5b8a:	1f 93       	push	r17
    5b8c:	df 93       	push	r29
    5b8e:	cf 93       	push	r28
    5b90:	cd b7       	in	r28, 0x3d	; 61
    5b92:	de b7       	in	r29, 0x3e	; 62
    5b94:	2c 97       	sbiw	r28, 0x0c	; 12
    5b96:	0f b6       	in	r0, 0x3f	; 63
    5b98:	f8 94       	cli
    5b9a:	de bf       	out	0x3e, r29	; 62
    5b9c:	0f be       	out	0x3f, r0	; 63
    5b9e:	cd bf       	out	0x3d, r28	; 61
    5ba0:	8c 01       	movw	r16, r24

	Serial.println(F("runCommand"));
    5ba2:	85 e8       	ldi	r24, 0x85	; 133
    5ba4:	96 e0       	ldi	r25, 0x06	; 6
    5ba6:	6c e8       	ldi	r22, 0x8C	; 140
    5ba8:	71 e0       	ldi	r23, 0x01	; 1
    5baa:	0e 94 16 34 	call	0x682c	; 0x682c <_ZN5Print7printlnEPK19__FlashStringHelper>

	Serial.print("http_path=[");
    5bae:	85 e8       	ldi	r24, 0x85	; 133
    5bb0:	96 e0       	ldi	r25, 0x06	; 6
    5bb2:	62 e1       	ldi	r22, 0x12	; 18
    5bb4:	71 e0       	ldi	r23, 0x01	; 1
    5bb6:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <_ZN5Print5printEPKc>
	Serial.print(http_path);
    5bba:	85 e8       	ldi	r24, 0x85	; 133
    5bbc:	96 e0       	ldi	r25, 0x06	; 6
    5bbe:	b8 01       	movw	r22, r16
    5bc0:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <_ZN5Print5printEPKc>
	Serial.println("]");
    5bc4:	85 e8       	ldi	r24, 0x85	; 133
    5bc6:	96 e0       	ldi	r25, 0x06	; 6
    5bc8:	6e e1       	ldi	r22, 0x1E	; 30
    5bca:	71 e0       	ldi	r23, 0x01	; 1
    5bcc:	0e 94 40 35 	call	0x6a80	; 0x6a80 <_ZN5Print7printlnEPKc>

	char cmd[10];
	int value;

	int i = sscanf(http_path, "/?cmd=%[^'&']&degree=%d", cmd, &value);
    5bd0:	8d b7       	in	r24, 0x3d	; 61
    5bd2:	9e b7       	in	r25, 0x3e	; 62
    5bd4:	08 97       	sbiw	r24, 0x08	; 8
    5bd6:	0f b6       	in	r0, 0x3f	; 63
    5bd8:	f8 94       	cli
    5bda:	9e bf       	out	0x3e, r25	; 62
    5bdc:	0f be       	out	0x3f, r0	; 63
    5bde:	8d bf       	out	0x3d, r24	; 61
    5be0:	ed b7       	in	r30, 0x3d	; 61
    5be2:	fe b7       	in	r31, 0x3e	; 62
    5be4:	31 96       	adiw	r30, 0x01	; 1
    5be6:	ad b7       	in	r26, 0x3d	; 61
    5be8:	be b7       	in	r27, 0x3e	; 62
    5bea:	12 96       	adiw	r26, 0x02	; 2
    5bec:	1c 93       	st	X, r17
    5bee:	0e 93       	st	-X, r16
    5bf0:	11 97       	sbiw	r26, 0x01	; 1
    5bf2:	80 e2       	ldi	r24, 0x20	; 32
    5bf4:	91 e0       	ldi	r25, 0x01	; 1
    5bf6:	93 83       	std	Z+3, r25	; 0x03
    5bf8:	82 83       	std	Z+2, r24	; 0x02
    5bfa:	a3 e0       	ldi	r26, 0x03	; 3
    5bfc:	ea 2e       	mov	r14, r26
    5bfe:	f1 2c       	mov	r15, r1
    5c00:	ec 0e       	add	r14, r28
    5c02:	fd 1e       	adc	r15, r29
    5c04:	f5 82       	std	Z+5, r15	; 0x05
    5c06:	e4 82       	std	Z+4, r14	; 0x04
    5c08:	ce 01       	movw	r24, r28
    5c0a:	01 96       	adiw	r24, 0x01	; 1
    5c0c:	97 83       	std	Z+7, r25	; 0x07
    5c0e:	86 83       	std	Z+6, r24	; 0x06
    5c10:	0e 94 56 04 	call	0x8ac	; 0x8ac <sscanf>
    5c14:	8c 01       	movw	r16, r24

	Serial.print(F("cmd=["));
    5c16:	8d b7       	in	r24, 0x3d	; 61
    5c18:	9e b7       	in	r25, 0x3e	; 62
    5c1a:	08 96       	adiw	r24, 0x08	; 8
    5c1c:	0f b6       	in	r0, 0x3f	; 63
    5c1e:	f8 94       	cli
    5c20:	9e bf       	out	0x3e, r25	; 62
    5c22:	0f be       	out	0x3f, r0	; 63
    5c24:	8d bf       	out	0x3d, r24	; 61
    5c26:	85 e8       	ldi	r24, 0x85	; 133
    5c28:	96 e0       	ldi	r25, 0x06	; 6
    5c2a:	66 e8       	ldi	r22, 0x86	; 134
    5c2c:	71 e0       	ldi	r23, 0x01	; 1
    5c2e:	0e 94 cb 33 	call	0x6796	; 0x6796 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.print(cmd);
    5c32:	85 e8       	ldi	r24, 0x85	; 133
    5c34:	96 e0       	ldi	r25, 0x06	; 6
    5c36:	b7 01       	movw	r22, r14
    5c38:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <_ZN5Print5printEPKc>
	Serial.print(F("] value=["));
    5c3c:	85 e8       	ldi	r24, 0x85	; 133
    5c3e:	96 e0       	ldi	r25, 0x06	; 6
    5c40:	6c e7       	ldi	r22, 0x7C	; 124
    5c42:	71 e0       	ldi	r23, 0x01	; 1
    5c44:	0e 94 cb 33 	call	0x6796	; 0x6796 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.print(value);
    5c48:	69 81       	ldd	r22, Y+1	; 0x01
    5c4a:	7a 81       	ldd	r23, Y+2	; 0x02
    5c4c:	85 e8       	ldi	r24, 0x85	; 133
    5c4e:	96 e0       	ldi	r25, 0x06	; 6
    5c50:	4a e0       	ldi	r20, 0x0A	; 10
    5c52:	50 e0       	ldi	r21, 0x00	; 0
    5c54:	0e 94 0b 35 	call	0x6a16	; 0x6a16 <_ZN5Print5printEii>
	Serial.print(F("]["));
    5c58:	85 e8       	ldi	r24, 0x85	; 133
    5c5a:	96 e0       	ldi	r25, 0x06	; 6
    5c5c:	69 e7       	ldi	r22, 0x79	; 121
    5c5e:	71 e0       	ldi	r23, 0x01	; 1
    5c60:	0e 94 cb 33 	call	0x6796	; 0x6796 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.print(i);
    5c64:	85 e8       	ldi	r24, 0x85	; 133
    5c66:	96 e0       	ldi	r25, 0x06	; 6
    5c68:	b8 01       	movw	r22, r16
    5c6a:	4a e0       	ldi	r20, 0x0A	; 10
    5c6c:	50 e0       	ldi	r21, 0x00	; 0
    5c6e:	0e 94 0b 35 	call	0x6a16	; 0x6a16 <_ZN5Print5printEii>
	Serial.println(F("]"));
    5c72:	85 e8       	ldi	r24, 0x85	; 133
    5c74:	96 e0       	ldi	r25, 0x06	; 6
    5c76:	67 e7       	ldi	r22, 0x77	; 119
    5c78:	71 e0       	ldi	r23, 0x01	; 1
    5c7a:	0e 94 16 34 	call	0x682c	; 0x682c <_ZN5Print7printlnEPK19__FlashStringHelper>



	if (strcmp_P(cmd, CMD_MOVE_LEFT) == 0) {
    5c7e:	c7 01       	movw	r24, r14
    5c80:	69 e0       	ldi	r22, 0x09	; 9
    5c82:	71 e0       	ldi	r23, 0x01	; 1
    5c84:	0e 94 ca 03 	call	0x794	; 0x794 <strcmp_P>
    5c88:	89 2b       	or	r24, r25
    5c8a:	29 f4       	brne	.+10     	; 0x5c96 <runHttpCommand+0x112>
		Serial.println(F("!!! MOVE LEFT !!!!"));
    5c8c:	85 e8       	ldi	r24, 0x85	; 133
    5c8e:	96 e0       	ldi	r25, 0x06	; 6
    5c90:	64 e6       	ldi	r22, 0x64	; 100
    5c92:	71 e0       	ldi	r23, 0x01	; 1
    5c94:	26 c0       	rjmp	.+76     	; 0x5ce2 <runHttpCommand+0x15e>
		return 0;
	}

	if (strcmp_P(cmd, CMD_MOVE_RIGHT) == 0) {
    5c96:	c7 01       	movw	r24, r14
    5c98:	62 e1       	ldi	r22, 0x12	; 18
    5c9a:	71 e0       	ldi	r23, 0x01	; 1
    5c9c:	0e 94 ca 03 	call	0x794	; 0x794 <strcmp_P>
    5ca0:	89 2b       	or	r24, r25
    5ca2:	29 f4       	brne	.+10     	; 0x5cae <runHttpCommand+0x12a>
		Serial.println(F("!!! MOVE RIGHT !!!!"));
    5ca4:	85 e8       	ldi	r24, 0x85	; 133
    5ca6:	96 e0       	ldi	r25, 0x06	; 6
    5ca8:	60 e5       	ldi	r22, 0x50	; 80
    5caa:	71 e0       	ldi	r23, 0x01	; 1
    5cac:	1a c0       	rjmp	.+52     	; 0x5ce2 <runHttpCommand+0x15e>
		return 0;
	}

	if (strcmp_P(cmd, CMD_MOVE_UP) == 0) {
    5cae:	c7 01       	movw	r24, r14
    5cb0:	6c e1       	ldi	r22, 0x1C	; 28
    5cb2:	71 e0       	ldi	r23, 0x01	; 1
    5cb4:	0e 94 ca 03 	call	0x794	; 0x794 <strcmp_P>
    5cb8:	89 2b       	or	r24, r25
    5cba:	29 f4       	brne	.+10     	; 0x5cc6 <runHttpCommand+0x142>
		Serial.println(F("!!! MOVE UP !!!!"));
    5cbc:	85 e8       	ldi	r24, 0x85	; 133
    5cbe:	96 e0       	ldi	r25, 0x06	; 6
    5cc0:	6f e3       	ldi	r22, 0x3F	; 63
    5cc2:	71 e0       	ldi	r23, 0x01	; 1
    5cc4:	0e c0       	rjmp	.+28     	; 0x5ce2 <runHttpCommand+0x15e>
		return 0;
	}
	if (strcmp_P(cmd, CMD_MOVE_DOWN) == 0) {
    5cc6:	c7 01       	movw	r24, r14
    5cc8:	63 e2       	ldi	r22, 0x23	; 35
    5cca:	71 e0       	ldi	r23, 0x01	; 1
    5ccc:	0e 94 ca 03 	call	0x794	; 0x794 <strcmp_P>
    5cd0:	89 2b       	or	r24, r25
    5cd2:	19 f0       	breq	.+6      	; 0x5cda <runHttpCommand+0x156>
    5cd4:	2f ef       	ldi	r18, 0xFF	; 255
    5cd6:	3f ef       	ldi	r19, 0xFF	; 255
    5cd8:	08 c0       	rjmp	.+16     	; 0x5cea <runHttpCommand+0x166>
		Serial.println(F("!!! MOVE DOWN !!!!"));
    5cda:	85 e8       	ldi	r24, 0x85	; 133
    5cdc:	96 e0       	ldi	r25, 0x06	; 6
    5cde:	6c e2       	ldi	r22, 0x2C	; 44
    5ce0:	71 e0       	ldi	r23, 0x01	; 1
    5ce2:	0e 94 16 34 	call	0x682c	; 0x682c <_ZN5Print7printlnEPK19__FlashStringHelper>
    5ce6:	20 e0       	ldi	r18, 0x00	; 0
    5ce8:	30 e0       	ldi	r19, 0x00	; 0
		return 0;
	}


	return -1;
}
    5cea:	c9 01       	movw	r24, r18
    5cec:	2c 96       	adiw	r28, 0x0c	; 12
    5cee:	0f b6       	in	r0, 0x3f	; 63
    5cf0:	f8 94       	cli
    5cf2:	de bf       	out	0x3e, r29	; 62
    5cf4:	0f be       	out	0x3f, r0	; 63
    5cf6:	cd bf       	out	0x3d, r28	; 61
    5cf8:	cf 91       	pop	r28
    5cfa:	df 91       	pop	r29
    5cfc:	1f 91       	pop	r17
    5cfe:	0f 91       	pop	r16
    5d00:	ff 90       	pop	r15
    5d02:	ef 90       	pop	r14
    5d04:	08 95       	ret

00005d06 <loop>:
  httpServer.begin();

  Serial.println(F("Listening for connections..."));
}

void loop(void)
    5d06:	af 92       	push	r10
    5d08:	bf 92       	push	r11
    5d0a:	cf 92       	push	r12
    5d0c:	df 92       	push	r13
    5d0e:	ef 92       	push	r14
    5d10:	ff 92       	push	r15
    5d12:	0f 93       	push	r16
    5d14:	1f 93       	push	r17
    5d16:	df 93       	push	r29
    5d18:	cf 93       	push	r28
    5d1a:	cd b7       	in	r28, 0x3d	; 61
    5d1c:	de b7       	in	r29, 0x3e	; 62
    5d1e:	62 97       	sbiw	r28, 0x12	; 18
    5d20:	0f b6       	in	r0, 0x3f	; 63
    5d22:	f8 94       	cli
    5d24:	de bf       	out	0x3e, r29	; 62
    5d26:	0f be       	out	0x3f, r0	; 63
    5d28:	cd bf       	out	0x3d, r28	; 61
{
  // Try to get a client which is connected.
  Adafruit_CC3000_ClientRef client = httpServer.available();
    5d2a:	8e 01       	movw	r16, r28
    5d2c:	0b 5f       	subi	r16, 0xFB	; 251
    5d2e:	1f 4f       	sbci	r17, 0xFF	; 255
    5d30:	c8 01       	movw	r24, r16
    5d32:	6f ef       	ldi	r22, 0xFF	; 255
    5d34:	73 e0       	ldi	r23, 0x03	; 3
    5d36:	0e 94 08 28 	call	0x5010	; 0x5010 <_ZN22Adafruit_CC3000_Server9availableEv>
  if (client) {
    5d3a:	c8 01       	movw	r24, r16
    5d3c:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <_ZN25Adafruit_CC3000_ClientRefcvbEv>
    5d40:	88 23       	and	r24, r24
    5d42:	09 f4       	brne	.+2      	; 0x5d46 <loop+0x40>
    5d44:	26 c1       	rjmp	.+588    	; 0x5f92 <loop+0x28c>
    Serial.println(F("Client connected."));
    5d46:	85 e8       	ldi	r24, 0x85	; 133
    5d48:	96 e0       	ldi	r25, 0x06	; 6
    5d4a:	6f e0       	ldi	r22, 0x0F	; 15
    5d4c:	72 e0       	ldi	r23, 0x02	; 2
    5d4e:	0e 94 16 34 	call	0x682c	; 0x682c <_ZN5Print7printlnEPK19__FlashStringHelper>
    // Process this request until it completes or times out.
    // Note that this is explicitly limited to handling one request at a time!

    // Clear the incoming data buffer and point to the beginning of it.
    bufindex = 0;
    5d52:	10 92 86 05 	sts	0x0586, r1
    5d56:	10 92 85 05 	sts	0x0585, r1
    memset(&buffer, 0, sizeof(buffer));
    5d5a:	83 e8       	ldi	r24, 0x83	; 131
    5d5c:	e2 e0       	ldi	r30, 0x02	; 2
    5d5e:	f5 e0       	ldi	r31, 0x05	; 5
    5d60:	df 01       	movw	r26, r30
    5d62:	1d 92       	st	X+, r1
    5d64:	8a 95       	dec	r24
    5d66:	e9 f7       	brne	.-6      	; 0x5d62 <loop+0x5c>

    // Clear action and path strings.
    memset(&action, 0, sizeof(action));
    5d68:	8b e0       	ldi	r24, 0x0B	; 11
    5d6a:	e7 e8       	ldi	r30, 0x87	; 135
    5d6c:	f5 e0       	ldi	r31, 0x05	; 5
    5d6e:	df 01       	movw	r26, r30
    5d70:	1d 92       	st	X+, r1
    5d72:	8a 95       	dec	r24
    5d74:	e9 f7       	brne	.-6      	; 0x5d70 <loop+0x6a>
    memset(&path,   0, sizeof(path));
    5d76:	85 e6       	ldi	r24, 0x65	; 101
    5d78:	e2 e9       	ldi	r30, 0x92	; 146
    5d7a:	f5 e0       	ldi	r31, 0x05	; 5
    5d7c:	df 01       	movw	r26, r30
    5d7e:	1d 92       	st	X+, r1
    5d80:	8a 95       	dec	r24
    5d82:	e9 f7       	brne	.-6      	; 0x5d7e <loop+0x78>

    // Set a timeout for reading all the incoming data.
    unsigned long endtime = millis() + TIMEOUT_MS;
    5d84:	0e 94 3a 36 	call	0x6c74	; 0x6c74 <millis>
    5d88:	6b 01       	movw	r12, r22
    5d8a:	7c 01       	movw	r14, r24
    5d8c:	84 ef       	ldi	r24, 0xF4	; 244
    5d8e:	91 e0       	ldi	r25, 0x01	; 1
    5d90:	a0 e0       	ldi	r26, 0x00	; 0
    5d92:	b0 e0       	ldi	r27, 0x00	; 0
    5d94:	c8 0e       	add	r12, r24
    5d96:	d9 1e       	adc	r13, r25
    5d98:	ea 1e       	adc	r14, r26
    5d9a:	fb 1e       	adc	r15, r27

    // Read all the incoming data until it can be parsed or the timeout expires.
    bool parsed = false;
    while (!parsed && (millis() < endtime) && (bufindex < BUFFER_SIZE)) {
      if (client.available()) {
    5d9c:	58 01       	movw	r10, r16
    5d9e:	20 c0       	rjmp	.+64     	; 0x5de0 <loop+0xda>
        buffer[bufindex++] = client.read();
    5da0:	00 91 85 05 	lds	r16, 0x0585
    5da4:	10 91 86 05 	lds	r17, 0x0586
    5da8:	c5 01       	movw	r24, r10
    5daa:	0e 94 08 26 	call	0x4c10	; 0x4c10 <_ZN25Adafruit_CC3000_ClientRef4readEv>
    5dae:	f8 01       	movw	r30, r16
    5db0:	ee 5f       	subi	r30, 0xFE	; 254
    5db2:	fa 4f       	sbci	r31, 0xFA	; 250
    5db4:	80 83       	st	Z, r24
    5db6:	0f 5f       	subi	r16, 0xFF	; 255
    5db8:	1f 4f       	sbci	r17, 0xFF	; 255
    5dba:	10 93 86 05 	sts	0x0586, r17
    5dbe:	00 93 85 05 	sts	0x0585, r16
      }
      parsed = parseRequest(buffer, bufindex, action, path);
    5dc2:	60 91 85 05 	lds	r22, 0x0585
    5dc6:	70 91 86 05 	lds	r23, 0x0586
    5dca:	82 e0       	ldi	r24, 0x02	; 2
    5dcc:	95 e0       	ldi	r25, 0x05	; 5
    5dce:	47 e8       	ldi	r20, 0x87	; 135
    5dd0:	55 e0       	ldi	r21, 0x05	; 5
    5dd2:	22 e9       	ldi	r18, 0x92	; 146
    5dd4:	35 e0       	ldi	r19, 0x05	; 5
    5dd6:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <parseRequest>
    // Set a timeout for reading all the incoming data.
    unsigned long endtime = millis() + TIMEOUT_MS;

    // Read all the incoming data until it can be parsed or the timeout expires.
    bool parsed = false;
    while (!parsed && (millis() < endtime) && (bufindex < BUFFER_SIZE)) {
    5dda:	88 23       	and	r24, r24
    5ddc:	09 f0       	breq	.+2      	; 0x5de0 <loop+0xda>
    5dde:	b1 c0       	rjmp	.+354    	; 0x5f42 <loop+0x23c>
    5de0:	0e 94 3a 36 	call	0x6c74	; 0x6c74 <millis>
    5de4:	6c 15       	cp	r22, r12
    5de6:	7d 05       	cpc	r23, r13
    5de8:	8e 05       	cpc	r24, r14
    5dea:	9f 05       	cpc	r25, r15
    5dec:	08 f0       	brcs	.+2      	; 0x5df0 <loop+0xea>
    5dee:	89 c0       	rjmp	.+274    	; 0x5f02 <loop+0x1fc>
    5df0:	80 91 85 05 	lds	r24, 0x0585
    5df4:	90 91 86 05 	lds	r25, 0x0586
    5df8:	82 38       	cpi	r24, 0x82	; 130
    5dfa:	91 05       	cpc	r25, r1
    5dfc:	0c f0       	brlt	.+2      	; 0x5e00 <loop+0xfa>
    5dfe:	81 c0       	rjmp	.+258    	; 0x5f02 <loop+0x1fc>
      if (client.available()) {
    5e00:	c5 01       	movw	r24, r10
    5e02:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <_ZN25Adafruit_CC3000_ClientRef9availableEv>
    5e06:	89 2b       	or	r24, r25
    5e08:	e1 f2       	breq	.-72     	; 0x5dc2 <loop+0xbc>
    5e0a:	ca cf       	rjmp	.-108    	; 0x5da0 <loop+0x9a>
				// Respond with the path that was accessed.
				// First send the success response code.


				// Обрабатываем GET-запрос. Ищем факт передачи комманды
				int command_status =  runHttpCommand(path);
    5e0c:	82 e9       	ldi	r24, 0x92	; 146
    5e0e:	95 e0       	ldi	r25, 0x05	; 5
    5e10:	0e 94 c2 2d 	call	0x5b84	; 0x5b84 <runHttpCommand>
    5e14:	6c 01       	movw	r12, r24
    5e16:	00 e0       	ldi	r16, 0x00	; 0
    5e18:	10 e0       	ldi	r17, 0x00	; 0

				// Выдаем HTTP-заголовоки
				for (unsigned int i = 0; i < sizeof(HTTP_RESPONCE_HEADER_OK) / 2; i++) {
					strcpy_P(path, (char*) pgm_read_word(&(HTTP_RESPONCE_HEADER_OK[i])));
					client.fastrprint(path);
    5e1a:	25 e0       	ldi	r18, 0x05	; 5
    5e1c:	e2 2e       	mov	r14, r18
    5e1e:	f1 2c       	mov	r15, r1
    5e20:	ec 0e       	add	r14, r28
    5e22:	fd 1e       	adc	r15, r29
				// Обрабатываем GET-запрос. Ищем факт передачи комманды
				int command_status =  runHttpCommand(path);

				// Выдаем HTTP-заголовоки
				for (unsigned int i = 0; i < sizeof(HTTP_RESPONCE_HEADER_OK) / 2; i++) {
					strcpy_P(path, (char*) pgm_read_word(&(HTTP_RESPONCE_HEADER_OK[i])));
    5e24:	f8 01       	movw	r30, r16
    5e26:	ee 0f       	add	r30, r30
    5e28:	ff 1f       	adc	r31, r31
    5e2a:	ed 58       	subi	r30, 0x8D	; 141
    5e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    5e2e:	65 91       	lpm	r22, Z+
    5e30:	74 91       	lpm	r23, Z+
    5e32:	82 e9       	ldi	r24, 0x92	; 146
    5e34:	95 e0       	ldi	r25, 0x05	; 5
    5e36:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <strcpy_P>
					client.fastrprint(path);
    5e3a:	c7 01       	movw	r24, r14
    5e3c:	62 e9       	ldi	r22, 0x92	; 146
    5e3e:	75 e0       	ldi	r23, 0x05	; 5
    5e40:	0e 94 45 29 	call	0x528a	; 0x528a <_ZN25Adafruit_CC3000_ClientRef10fastrprintEPc>

				// Обрабатываем GET-запрос. Ищем факт передачи комманды
				int command_status =  runHttpCommand(path);

				// Выдаем HTTP-заголовоки
				for (unsigned int i = 0; i < sizeof(HTTP_RESPONCE_HEADER_OK) / 2; i++) {
    5e44:	0f 5f       	subi	r16, 0xFF	; 255
    5e46:	1f 4f       	sbci	r17, 0xFF	; 255
    5e48:	03 30       	cpi	r16, 0x03	; 3
    5e4a:	11 05       	cpc	r17, r1
    5e4c:	59 f7       	brne	.-42     	; 0x5e24 <loop+0x11e>
    5e4e:	00 e0       	ldi	r16, 0x00	; 0
    5e50:	10 e0       	ldi	r17, 0x00	; 0
				}

				// Выдаем тестовую HTML-форму
				for (unsigned int i = 0; i < sizeof(HTTP_TEST_FORM) / 2; i++) {
					strcpy_P(path, (char*) pgm_read_word(&(HTTP_TEST_FORM[i])));
					client.fastrprint(path);
    5e52:	85 e0       	ldi	r24, 0x05	; 5
    5e54:	e8 2e       	mov	r14, r24
    5e56:	f1 2c       	mov	r15, r1
    5e58:	ec 0e       	add	r14, r28
    5e5a:	fd 1e       	adc	r15, r29
					client.fastrprint(path);
				}

				// Выдаем тестовую HTML-форму
				for (unsigned int i = 0; i < sizeof(HTTP_TEST_FORM) / 2; i++) {
					strcpy_P(path, (char*) pgm_read_word(&(HTTP_TEST_FORM[i])));
    5e5c:	f8 01       	movw	r30, r16
    5e5e:	ee 0f       	add	r30, r30
    5e60:	ff 1f       	adc	r31, r31
    5e62:	e7 58       	subi	r30, 0x87	; 135
    5e64:	ff 4f       	sbci	r31, 0xFF	; 255
    5e66:	65 91       	lpm	r22, Z+
    5e68:	74 91       	lpm	r23, Z+
    5e6a:	82 e9       	ldi	r24, 0x92	; 146
    5e6c:	95 e0       	ldi	r25, 0x05	; 5
    5e6e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <strcpy_P>
					client.fastrprint(path);
    5e72:	c7 01       	movw	r24, r14
    5e74:	62 e9       	ldi	r22, 0x92	; 146
    5e76:	75 e0       	ldi	r23, 0x05	; 5
    5e78:	0e 94 45 29 	call	0x528a	; 0x528a <_ZN25Adafruit_CC3000_ClientRef10fastrprintEPc>
					strcpy_P(path, (char*) pgm_read_word(&(HTTP_RESPONCE_HEADER_OK[i])));
					client.fastrprint(path);
				}

				// Выдаем тестовую HTML-форму
				for (unsigned int i = 0; i < sizeof(HTTP_TEST_FORM) / 2; i++) {
    5e7c:	0f 5f       	subi	r16, 0xFF	; 255
    5e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    5e80:	0a 31       	cpi	r16, 0x1A	; 26
    5e82:	11 05       	cpc	r17, r1
    5e84:	59 f7       	brne	.-42     	; 0x5e5c <loop+0x156>
					strcpy_P(path, (char*) pgm_read_word(&(HTTP_TEST_FORM[i])));
					client.fastrprint(path);
				}


				client.fastrprint(F("<hr><h2> RESULT "));
    5e86:	c7 01       	movw	r24, r14
    5e88:	6b ed       	ldi	r22, 0xDB	; 219
    5e8a:	71 e0       	ldi	r23, 0x01	; 1
    5e8c:	0e 94 38 29 	call	0x5270	; 0x5270 <_ZN25Adafruit_CC3000_ClientRef10fastrprintEPK19__FlashStringHelper>

				char buf [4];
				sprintf (buf, "%d", command_status);
    5e90:	00 d0       	rcall	.+0      	; 0x5e92 <loop+0x18c>
    5e92:	00 d0       	rcall	.+0      	; 0x5e94 <loop+0x18e>
    5e94:	00 d0       	rcall	.+0      	; 0x5e96 <loop+0x190>
    5e96:	ed b7       	in	r30, 0x3d	; 61
    5e98:	fe b7       	in	r31, 0x3e	; 62
    5e9a:	31 96       	adiw	r30, 0x01	; 1
    5e9c:	8e 01       	movw	r16, r28
    5e9e:	0f 5f       	subi	r16, 0xFF	; 255
    5ea0:	1f 4f       	sbci	r17, 0xFF	; 255
    5ea2:	ad b7       	in	r26, 0x3d	; 61
    5ea4:	be b7       	in	r27, 0x3e	; 62
    5ea6:	12 96       	adiw	r26, 0x02	; 2
    5ea8:	1c 93       	st	X, r17
    5eaa:	0e 93       	st	-X, r16
    5eac:	11 97       	sbiw	r26, 0x01	; 1
    5eae:	88 e3       	ldi	r24, 0x38	; 56
    5eb0:	91 e0       	ldi	r25, 0x01	; 1
    5eb2:	93 83       	std	Z+3, r25	; 0x03
    5eb4:	82 83       	std	Z+2, r24	; 0x02
    5eb6:	d5 82       	std	Z+5, r13	; 0x05
    5eb8:	c4 82       	std	Z+4, r12	; 0x04
    5eba:	0e 94 32 04 	call	0x864	; 0x864 <sprintf>
				client.fastrprint(buf);
    5ebe:	8d b7       	in	r24, 0x3d	; 61
    5ec0:	9e b7       	in	r25, 0x3e	; 62
    5ec2:	06 96       	adiw	r24, 0x06	; 6
    5ec4:	0f b6       	in	r0, 0x3f	; 63
    5ec6:	f8 94       	cli
    5ec8:	9e bf       	out	0x3e, r25	; 62
    5eca:	0f be       	out	0x3f, r0	; 63
    5ecc:	8d bf       	out	0x3d, r24	; 61
    5ece:	c7 01       	movw	r24, r14
    5ed0:	b8 01       	movw	r22, r16
    5ed2:	0e 94 45 29 	call	0x528a	; 0x528a <_ZN25Adafruit_CC3000_ClientRef10fastrprintEPc>
				client.fastrprint(F("</h2> "));
    5ed6:	c7 01       	movw	r24, r14
    5ed8:	64 ed       	ldi	r22, 0xD4	; 212
    5eda:	71 e0       	ldi	r23, 0x01	; 1
    5edc:	0e 94 38 29 	call	0x5270	; 0x5270 <_ZN25Adafruit_CC3000_ClientRef10fastrprintEPK19__FlashStringHelper>


				client.fastrprintln(F("</html>"));
    5ee0:	c7 01       	movw	r24, r14
    5ee2:	6c ec       	ldi	r22, 0xCC	; 204
    5ee4:	71 e0       	ldi	r23, 0x01	; 1
    5ee6:	0b c0       	rjmp	.+22     	; 0x5efe <loop+0x1f8>



			} else {
				// Unsupported action, respond with an HTTP 405 method not allowed error.
				client.fastrprintln(F("HTTP/1.1 405 Method Not Allowed"));
    5ee8:	8e 01       	movw	r16, r28
    5eea:	0b 5f       	subi	r16, 0xFB	; 251
    5eec:	1f 4f       	sbci	r17, 0xFF	; 255
    5eee:	c8 01       	movw	r24, r16
    5ef0:	6c ea       	ldi	r22, 0xAC	; 172
    5ef2:	71 e0       	ldi	r23, 0x01	; 1
    5ef4:	0e 94 2b 29 	call	0x5256	; 0x5256 <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPK19__FlashStringHelper>
				client.fastrprintln(F(""));
    5ef8:	c8 01       	movw	r24, r16
    5efa:	6b ea       	ldi	r22, 0xAB	; 171
    5efc:	71 e0       	ldi	r23, 0x01	; 1
    5efe:	0e 94 2b 29 	call	0x5256	; 0x5256 <_ZN25Adafruit_CC3000_ClientRef12fastrprintlnEPK19__FlashStringHelper>
			}
		}

    // Wait a short period to make sure the response had time to send before
    // the connection is closed (the CC3000 sends data asyncronously).
    delay(100);
    5f02:	64 e6       	ldi	r22, 0x64	; 100
    5f04:	70 e0       	ldi	r23, 0x00	; 0
    5f06:	80 e0       	ldi	r24, 0x00	; 0
    5f08:	90 e0       	ldi	r25, 0x00	; 0
    5f0a:	0e 94 48 36 	call	0x6c90	; 0x6c90 <delay>

    Serial.print("Free RAM: "); Serial.println(getFreeRam(), DEC);
    5f0e:	85 e8       	ldi	r24, 0x85	; 133
    5f10:	96 e0       	ldi	r25, 0x06	; 6
    5f12:	6b e3       	ldi	r22, 0x3B	; 59
    5f14:	71 e0       	ldi	r23, 0x01	; 1
    5f16:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <_ZN5Print5printEPKc>
    5f1a:	0e 94 77 0a 	call	0x14ee	; 0x14ee <_Z10getFreeRamv>
    5f1e:	bc 01       	movw	r22, r24
    5f20:	85 e8       	ldi	r24, 0x85	; 133
    5f22:	96 e0       	ldi	r25, 0x06	; 6
    5f24:	4a e0       	ldi	r20, 0x0A	; 10
    5f26:	50 e0       	ldi	r21, 0x00	; 0
    5f28:	0e 94 1e 35 	call	0x6a3c	; 0x6a3c <_ZN5Print7printlnEii>

    // Close the connection when done.
    Serial.println(F("Client disconnected"));
    5f2c:	85 e8       	ldi	r24, 0x85	; 133
    5f2e:	96 e0       	ldi	r25, 0x06	; 6
    5f30:	67 e9       	ldi	r22, 0x97	; 151
    5f32:	71 e0       	ldi	r23, 0x01	; 1
    5f34:	0e 94 16 34 	call	0x682c	; 0x682c <_ZN5Print7printlnEPK19__FlashStringHelper>

    client.close();
    5f38:	ce 01       	movw	r24, r28
    5f3a:	05 96       	adiw	r24, 0x05	; 5
    5f3c:	0e 94 1a 29 	call	0x5234	; 0x5234 <_ZN25Adafruit_CC3000_ClientRef5closeEv>
    5f40:	28 c0       	rjmp	.+80     	; 0x5f92 <loop+0x28c>
      parsed = parseRequest(buffer, bufindex, action, path);
    }

    // Handle the request if it was parsed.
		if (parsed) {
			Serial.println(F("Processing request"));
    5f42:	85 e8       	ldi	r24, 0x85	; 133
    5f44:	96 e0       	ldi	r25, 0x06	; 6
    5f46:	6c ef       	ldi	r22, 0xFC	; 252
    5f48:	71 e0       	ldi	r23, 0x01	; 1
    5f4a:	0e 94 16 34 	call	0x682c	; 0x682c <_ZN5Print7printlnEPK19__FlashStringHelper>
			Serial.print(F("Action: "));
    5f4e:	85 e8       	ldi	r24, 0x85	; 133
    5f50:	96 e0       	ldi	r25, 0x06	; 6
    5f52:	63 ef       	ldi	r22, 0xF3	; 243
    5f54:	71 e0       	ldi	r23, 0x01	; 1
    5f56:	0e 94 cb 33 	call	0x6796	; 0x6796 <_ZN5Print5printEPK19__FlashStringHelper>
			Serial.println(action);
    5f5a:	85 e8       	ldi	r24, 0x85	; 133
    5f5c:	96 e0       	ldi	r25, 0x06	; 6
    5f5e:	67 e8       	ldi	r22, 0x87	; 135
    5f60:	75 e0       	ldi	r23, 0x05	; 5
    5f62:	0e 94 40 35 	call	0x6a80	; 0x6a80 <_ZN5Print7printlnEPKc>
			Serial.print(F("Path: "));
    5f66:	85 e8       	ldi	r24, 0x85	; 133
    5f68:	96 e0       	ldi	r25, 0x06	; 6
    5f6a:	6c ee       	ldi	r22, 0xEC	; 236
    5f6c:	71 e0       	ldi	r23, 0x01	; 1
    5f6e:	0e 94 cb 33 	call	0x6796	; 0x6796 <_ZN5Print5printEPK19__FlashStringHelper>
			Serial.println(path);
    5f72:	85 e8       	ldi	r24, 0x85	; 133
    5f74:	96 e0       	ldi	r25, 0x06	; 6
    5f76:	62 e9       	ldi	r22, 0x92	; 146
    5f78:	75 e0       	ldi	r23, 0x05	; 5
    5f7a:	0e 94 40 35 	call	0x6a80	; 0x6a80 <_ZN5Print7printlnEPKc>
			// Check the action to see if it was a GET request.
			if (strcmp(action, "GET") == 0) {
    5f7e:	87 e8       	ldi	r24, 0x87	; 135
    5f80:	95 e0       	ldi	r25, 0x05	; 5
    5f82:	66 e4       	ldi	r22, 0x46	; 70
    5f84:	71 e0       	ldi	r23, 0x01	; 1
    5f86:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <strcmp>
    5f8a:	00 97       	sbiw	r24, 0x00	; 0
    5f8c:	09 f4       	brne	.+2      	; 0x5f90 <loop+0x28a>
    5f8e:	3e cf       	rjmp	.-388    	; 0x5e0c <loop+0x106>
    5f90:	ab cf       	rjmp	.-170    	; 0x5ee8 <loop+0x1e2>
    // Close the connection when done.
    Serial.println(F("Client disconnected"));

    client.close();
  }
}
    5f92:	62 96       	adiw	r28, 0x12	; 18
    5f94:	0f b6       	in	r0, 0x3f	; 63
    5f96:	f8 94       	cli
    5f98:	de bf       	out	0x3e, r29	; 62
    5f9a:	0f be       	out	0x3f, r0	; 63
    5f9c:	cd bf       	out	0x3d, r28	; 61
    5f9e:	cf 91       	pop	r28
    5fa0:	df 91       	pop	r29
    5fa2:	1f 91       	pop	r17
    5fa4:	0f 91       	pop	r16
    5fa6:	ff 90       	pop	r15
    5fa8:	ef 90       	pop	r14
    5faa:	df 90       	pop	r13
    5fac:	cf 90       	pop	r12
    5fae:	bf 90       	pop	r11
    5fb0:	af 90       	pop	r10
    5fb2:	08 95       	ret

00005fb4 <setup>:
const char CMD_MOVE_RIGHT[] PROGMEM = "moveright";
const char CMD_MOVE_UP[] PROGMEM = "moveup";
const char CMD_MOVE_DOWN[] PROGMEM = "movedown";


void setup(void)
    5fb4:	0f 93       	push	r16
    5fb6:	1f 93       	push	r17
    5fb8:	df 93       	push	r29
    5fba:	cf 93       	push	r28
    5fbc:	cd b7       	in	r28, 0x3d	; 61
    5fbe:	de b7       	in	r29, 0x3e	; 62
    5fc0:	c5 57       	subi	r28, 0x75	; 117
    5fc2:	d0 40       	sbci	r29, 0x00	; 0
    5fc4:	0f b6       	in	r0, 0x3f	; 63
    5fc6:	f8 94       	cli
    5fc8:	de bf       	out	0x3e, r29	; 62
    5fca:	0f be       	out	0x3f, r0	; 63
    5fcc:	cd bf       	out	0x3d, r28	; 61
{
	Serial.begin(115200);
    5fce:	85 e8       	ldi	r24, 0x85	; 133
    5fd0:	96 e0       	ldi	r25, 0x06	; 6
    5fd2:	40 e0       	ldi	r20, 0x00	; 0
    5fd4:	52 ec       	ldi	r21, 0xC2	; 194
    5fd6:	61 e0       	ldi	r22, 0x01	; 1
    5fd8:	70 e0       	ldi	r23, 0x00	; 0
    5fda:	0e 94 a7 31 	call	0x634e	; 0x634e <_ZN14HardwareSerial5beginEm>
	Serial.println(F("Picavet WiFi CC3000"));
    5fde:	85 e8       	ldi	r24, 0x85	; 133
    5fe0:	96 e0       	ldi	r25, 0x06	; 6
    5fe2:	69 ef       	ldi	r22, 0xF9	; 249
    5fe4:	73 e0       	ldi	r23, 0x03	; 3
    5fe6:	0e 94 16 34 	call	0x682c	; 0x682c <_ZN5Print7printlnEPK19__FlashStringHelper>
//		Serial.println(path);
//	}

	int action = false;

	char s1[] = "/?cmd=moveleft&degree=-160";
    5fea:	de 01       	movw	r26, r28
    5fec:	a0 5c       	subi	r26, 0xC0	; 192
    5fee:	bf 4f       	sbci	r27, 0xFF	; 255
    5ff0:	eb e5       	ldi	r30, 0x5B	; 91
    5ff2:	f1 e0       	ldi	r31, 0x01	; 1
    5ff4:	8b e1       	ldi	r24, 0x1B	; 27
    5ff6:	01 90       	ld	r0, Z+
    5ff8:	0d 92       	st	X+, r0
    5ffa:	81 50       	subi	r24, 0x01	; 1
    5ffc:	e1 f7       	brne	.-8      	; 0x5ff6 <setup+0x42>
	action = runHttpCommand(s1);
    5ffe:	ce 01       	movw	r24, r28
    6000:	80 5c       	subi	r24, 0xC0	; 192
    6002:	9f 4f       	sbci	r25, 0xFF	; 255
    6004:	0e 94 c2 2d 	call	0x5b84	; 0x5b84 <runHttpCommand>
    6008:	8c 01       	movw	r16, r24
	Serial.print(F("ACTION="));
    600a:	85 e8       	ldi	r24, 0x85	; 133
    600c:	96 e0       	ldi	r25, 0x06	; 6
    600e:	61 ef       	ldi	r22, 0xF1	; 241
    6010:	73 e0       	ldi	r23, 0x03	; 3
    6012:	0e 94 cb 33 	call	0x6796	; 0x6796 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.println(action);
    6016:	85 e8       	ldi	r24, 0x85	; 133
    6018:	96 e0       	ldi	r25, 0x06	; 6
    601a:	b8 01       	movw	r22, r16
    601c:	4a e0       	ldi	r20, 0x0A	; 10
    601e:	50 e0       	ldi	r21, 0x00	; 0
    6020:	0e 94 1e 35 	call	0x6a3c	; 0x6a3c <_ZN5Print7printlnEii>

	char s2[] = "/?cmd=moveright&degree=-60";
    6024:	de 01       	movw	r26, r28
    6026:	a5 5a       	subi	r26, 0xA5	; 165
    6028:	bf 4f       	sbci	r27, 0xFF	; 255
    602a:	e6 e7       	ldi	r30, 0x76	; 118
    602c:	f1 e0       	ldi	r31, 0x01	; 1
    602e:	8b e1       	ldi	r24, 0x1B	; 27
    6030:	01 90       	ld	r0, Z+
    6032:	0d 92       	st	X+, r0
    6034:	81 50       	subi	r24, 0x01	; 1
    6036:	e1 f7       	brne	.-8      	; 0x6030 <setup+0x7c>
	action = runHttpCommand(s2);
    6038:	ce 01       	movw	r24, r28
    603a:	85 5a       	subi	r24, 0xA5	; 165
    603c:	9f 4f       	sbci	r25, 0xFF	; 255
    603e:	0e 94 c2 2d 	call	0x5b84	; 0x5b84 <runHttpCommand>
    6042:	8c 01       	movw	r16, r24
	Serial.print(F("ACTION="));
    6044:	85 e8       	ldi	r24, 0x85	; 133
    6046:	96 e0       	ldi	r25, 0x06	; 6
    6048:	69 ee       	ldi	r22, 0xE9	; 233
    604a:	73 e0       	ldi	r23, 0x03	; 3
    604c:	0e 94 cb 33 	call	0x6796	; 0x6796 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.println(action);
    6050:	85 e8       	ldi	r24, 0x85	; 133
    6052:	96 e0       	ldi	r25, 0x06	; 6
    6054:	b8 01       	movw	r22, r16
    6056:	4a e0       	ldi	r20, 0x0A	; 10
    6058:	50 e0       	ldi	r21, 0x00	; 0
    605a:	0e 94 1e 35 	call	0x6a3c	; 0x6a3c <_ZN5Print7printlnEii>

	char s3[] = "/?cmd=moveup&degree=-30";
    605e:	de 01       	movw	r26, r28
    6060:	1e 96       	adiw	r26, 0x0e	; 14
    6062:	e1 e9       	ldi	r30, 0x91	; 145
    6064:	f1 e0       	ldi	r31, 0x01	; 1
    6066:	88 e1       	ldi	r24, 0x18	; 24
    6068:	01 90       	ld	r0, Z+
    606a:	0d 92       	st	X+, r0
    606c:	81 50       	subi	r24, 0x01	; 1
    606e:	e1 f7       	brne	.-8      	; 0x6068 <setup+0xb4>
	action = runHttpCommand(s3);
    6070:	ce 01       	movw	r24, r28
    6072:	0e 96       	adiw	r24, 0x0e	; 14
    6074:	0e 94 c2 2d 	call	0x5b84	; 0x5b84 <runHttpCommand>
    6078:	8c 01       	movw	r16, r24
	Serial.print(F("ACTION="));
    607a:	85 e8       	ldi	r24, 0x85	; 133
    607c:	96 e0       	ldi	r25, 0x06	; 6
    607e:	61 ee       	ldi	r22, 0xE1	; 225
    6080:	73 e0       	ldi	r23, 0x03	; 3
    6082:	0e 94 cb 33 	call	0x6796	; 0x6796 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.println(action);
    6086:	85 e8       	ldi	r24, 0x85	; 133
    6088:	96 e0       	ldi	r25, 0x06	; 6
    608a:	b8 01       	movw	r22, r16
    608c:	4a e0       	ldi	r20, 0x0A	; 10
    608e:	50 e0       	ldi	r21, 0x00	; 0
    6090:	0e 94 1e 35 	call	0x6a3c	; 0x6a3c <_ZN5Print7printlnEii>

	char s4[] = "/?cmd=movedown&degree=-45";
    6094:	de 01       	movw	r26, r28
    6096:	96 96       	adiw	r26, 0x26	; 38
    6098:	e9 ea       	ldi	r30, 0xA9	; 169
    609a:	f1 e0       	ldi	r31, 0x01	; 1
    609c:	8a e1       	ldi	r24, 0x1A	; 26
    609e:	01 90       	ld	r0, Z+
    60a0:	0d 92       	st	X+, r0
    60a2:	81 50       	subi	r24, 0x01	; 1
    60a4:	e1 f7       	brne	.-8      	; 0x609e <setup+0xea>
	action = runHttpCommand(s4);
    60a6:	ce 01       	movw	r24, r28
    60a8:	86 96       	adiw	r24, 0x26	; 38
    60aa:	0e 94 c2 2d 	call	0x5b84	; 0x5b84 <runHttpCommand>
    60ae:	8c 01       	movw	r16, r24
	Serial.print(F("ACTION="));
    60b0:	85 e8       	ldi	r24, 0x85	; 133
    60b2:	96 e0       	ldi	r25, 0x06	; 6
    60b4:	69 ed       	ldi	r22, 0xD9	; 217
    60b6:	73 e0       	ldi	r23, 0x03	; 3
    60b8:	0e 94 cb 33 	call	0x6796	; 0x6796 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.println(action);
    60bc:	85 e8       	ldi	r24, 0x85	; 133
    60be:	96 e0       	ldi	r25, 0x06	; 6
    60c0:	b8 01       	movw	r22, r16
    60c2:	4a e0       	ldi	r20, 0x0A	; 10
    60c4:	50 e0       	ldi	r21, 0x00	; 0
    60c6:	0e 94 1e 35 	call	0x6a3c	; 0x6a3c <_ZN5Print7printlnEii>

	char s5[] = "/?cmd=center";
    60ca:	de 01       	movw	r26, r28
    60cc:	11 96       	adiw	r26, 0x01	; 1
    60ce:	e3 ec       	ldi	r30, 0xC3	; 195
    60d0:	f1 e0       	ldi	r31, 0x01	; 1
    60d2:	8d e0       	ldi	r24, 0x0D	; 13
    60d4:	01 90       	ld	r0, Z+
    60d6:	0d 92       	st	X+, r0
    60d8:	81 50       	subi	r24, 0x01	; 1
    60da:	e1 f7       	brne	.-8      	; 0x60d4 <setup+0x120>
	action = runHttpCommand(s5);
    60dc:	ce 01       	movw	r24, r28
    60de:	01 96       	adiw	r24, 0x01	; 1
    60e0:	0e 94 c2 2d 	call	0x5b84	; 0x5b84 <runHttpCommand>
    60e4:	8c 01       	movw	r16, r24
	Serial.print(F("ACTION="));
    60e6:	85 e8       	ldi	r24, 0x85	; 133
    60e8:	96 e0       	ldi	r25, 0x06	; 6
    60ea:	61 ed       	ldi	r22, 0xD1	; 209
    60ec:	73 e0       	ldi	r23, 0x03	; 3
    60ee:	0e 94 cb 33 	call	0x6796	; 0x6796 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.println(action);
    60f2:	85 e8       	ldi	r24, 0x85	; 133
    60f4:	96 e0       	ldi	r25, 0x06	; 6
    60f6:	b8 01       	movw	r22, r16
    60f8:	4a e0       	ldi	r20, 0x0A	; 10
    60fa:	50 e0       	ldi	r21, 0x00	; 0
    60fc:	0e 94 1e 35 	call	0x6a3c	; 0x6a3c <_ZN5Print7printlnEii>





  Serial.print("Free RAM: "); Serial.println(getFreeRam(), DEC);
    6100:	85 e8       	ldi	r24, 0x85	; 133
    6102:	96 e0       	ldi	r25, 0x06	; 6
    6104:	6b e3       	ldi	r22, 0x3B	; 59
    6106:	71 e0       	ldi	r23, 0x01	; 1
    6108:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <_ZN5Print5printEPKc>
    610c:	0e 94 77 0a 	call	0x14ee	; 0x14ee <_Z10getFreeRamv>
    6110:	bc 01       	movw	r22, r24
    6112:	85 e8       	ldi	r24, 0x85	; 133
    6114:	96 e0       	ldi	r25, 0x06	; 6
    6116:	4a e0       	ldi	r20, 0x0A	; 10
    6118:	50 e0       	ldi	r21, 0x00	; 0
    611a:	0e 94 1e 35 	call	0x6a3c	; 0x6a3c <_ZN5Print7printlnEii>

  // Initialise the module
  Serial.println(F("\nInitializing..."));
    611e:	85 e8       	ldi	r24, 0x85	; 133
    6120:	96 e0       	ldi	r25, 0x06	; 6
    6122:	60 ec       	ldi	r22, 0xC0	; 192
    6124:	73 e0       	ldi	r23, 0x03	; 3
    6126:	0e 94 16 34 	call	0x682c	; 0x682c <_ZN5Print7printlnEPK19__FlashStringHelper>
  if (!cc3000.begin())
    612a:	8e ef       	ldi	r24, 0xFE	; 254
    612c:	93 e0       	ldi	r25, 0x03	; 3
    612e:	60 e0       	ldi	r22, 0x00	; 0
    6130:	40 e0       	ldi	r20, 0x00	; 0
    6132:	20 e0       	ldi	r18, 0x00	; 0
    6134:	30 e0       	ldi	r19, 0x00	; 0
    6136:	0e 94 ed 23 	call	0x47da	; 0x47da <_ZN15Adafruit_CC30005beginEhbPKc>
    613a:	88 23       	and	r24, r24
    613c:	39 f4       	brne	.+14     	; 0x614c <setup+0x198>
  {
    Serial.println(F("Couldn't begin()! Check your wiring?"));
    613e:	85 e8       	ldi	r24, 0x85	; 133
    6140:	96 e0       	ldi	r25, 0x06	; 6
    6142:	6b e9       	ldi	r22, 0x9B	; 155
    6144:	73 e0       	ldi	r23, 0x03	; 3
    6146:	0e 94 16 34 	call	0x682c	; 0x682c <_ZN5Print7printlnEPK19__FlashStringHelper>
    614a:	ff cf       	rjmp	.-2      	; 0x614a <setup+0x196>
    while(1);
  }

  Serial.print(F("\nAttempting to connect to ")); Serial.println(WLAN_SSID);
    614c:	85 e8       	ldi	r24, 0x85	; 133
    614e:	96 e0       	ldi	r25, 0x06	; 6
    6150:	60 e8       	ldi	r22, 0x80	; 128
    6152:	73 e0       	ldi	r23, 0x03	; 3
    6154:	0e 94 cb 33 	call	0x6796	; 0x6796 <_ZN5Print5printEPK19__FlashStringHelper>
    6158:	85 e8       	ldi	r24, 0x85	; 133
    615a:	96 e0       	ldi	r25, 0x06	; 6
    615c:	6a e4       	ldi	r22, 0x4A	; 74
    615e:	71 e0       	ldi	r23, 0x01	; 1
    6160:	0e 94 40 35 	call	0x6a80	; 0x6a80 <_ZN5Print7printlnEPKc>
  if (!cc3000.connectToAP(WLAN_SSID, WLAN_PASS, WLAN_SECURITY)) {
    6164:	8e ef       	ldi	r24, 0xFE	; 254
    6166:	93 e0       	ldi	r25, 0x03	; 3
    6168:	6a e4       	ldi	r22, 0x4A	; 74
    616a:	71 e0       	ldi	r23, 0x01	; 1
    616c:	40 e5       	ldi	r20, 0x50	; 80
    616e:	51 e0       	ldi	r21, 0x01	; 1
    6170:	23 e0       	ldi	r18, 0x03	; 3
    6172:	00 e0       	ldi	r16, 0x00	; 0
    6174:	0e 94 12 25 	call	0x4a24	; 0x4a24 <_ZN15Adafruit_CC300011connectToAPEPKcS1_hh>
    6178:	88 23       	and	r24, r24
    617a:	39 f4       	brne	.+14     	; 0x618a <setup+0x1d6>
    Serial.println(F("Failed!"));
    617c:	85 e8       	ldi	r24, 0x85	; 133
    617e:	96 e0       	ldi	r25, 0x06	; 6
    6180:	68 e7       	ldi	r22, 0x78	; 120
    6182:	73 e0       	ldi	r23, 0x03	; 3
    6184:	0e 94 16 34 	call	0x682c	; 0x682c <_ZN5Print7printlnEPK19__FlashStringHelper>
    6188:	ff cf       	rjmp	.-2      	; 0x6188 <setup+0x1d4>
    while(1);
  }

  Serial.println(F("Connected!"));
    618a:	85 e8       	ldi	r24, 0x85	; 133
    618c:	96 e0       	ldi	r25, 0x06	; 6
    618e:	6d e6       	ldi	r22, 0x6D	; 109
    6190:	73 e0       	ldi	r23, 0x03	; 3
    6192:	0e 94 16 34 	call	0x682c	; 0x682c <_ZN5Print7printlnEPK19__FlashStringHelper>

  Serial.println(F("Request DHCP"));
    6196:	85 e8       	ldi	r24, 0x85	; 133
    6198:	96 e0       	ldi	r25, 0x06	; 6
    619a:	60 e6       	ldi	r22, 0x60	; 96
    619c:	73 e0       	ldi	r23, 0x03	; 3
    619e:	0e 94 16 34 	call	0x682c	; 0x682c <_ZN5Print7printlnEPK19__FlashStringHelper>
    61a2:	06 c0       	rjmp	.+12     	; 0x61b0 <setup+0x1fc>
  while (!cc3000.checkDHCP())
  {
    delay(100); // ToDo: Insert a DHCP timeout!
    61a4:	64 e6       	ldi	r22, 0x64	; 100
    61a6:	70 e0       	ldi	r23, 0x00	; 0
    61a8:	80 e0       	ldi	r24, 0x00	; 0
    61aa:	90 e0       	ldi	r25, 0x00	; 0
    61ac:	0e 94 48 36 	call	0x6c90	; 0x6c90 <delay>
  }

  Serial.println(F("Connected!"));

  Serial.println(F("Request DHCP"));
  while (!cc3000.checkDHCP())
    61b0:	8e ef       	ldi	r24, 0xFE	; 254
    61b2:	93 e0       	ldi	r25, 0x03	; 3
    61b4:	0e 94 29 21 	call	0x4252	; 0x4252 <_ZN15Adafruit_CC30009checkDHCPEv>
    61b8:	88 23       	and	r24, r24
    61ba:	a1 f3       	breq	.-24     	; 0x61a4 <setup+0x1f0>
    61bc:	06 c0       	rjmp	.+12     	; 0x61ca <setup+0x216>
    delay(100); // ToDo: Insert a DHCP timeout!
  }

  // Display the IP address DNS, Gateway, etc.
  while (! displayConnectionDetails()) {
    delay(1000);
    61be:	68 ee       	ldi	r22, 0xE8	; 232
    61c0:	73 e0       	ldi	r23, 0x03	; 3
    61c2:	80 e0       	ldi	r24, 0x00	; 0
    61c4:	90 e0       	ldi	r25, 0x00	; 0
    61c6:	0e 94 48 36 	call	0x6c90	; 0x6c90 <delay>
  {
    delay(100); // ToDo: Insert a DHCP timeout!
  }

  // Display the IP address DNS, Gateway, etc.
  while (! displayConnectionDetails()) {
    61ca:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <displayConnectionDetails>
    61ce:	88 23       	and	r24, r24
    61d0:	b1 f3       	breq	.-20     	; 0x61be <setup+0x20a>
  }

  // ******************************************************
  // You can safely remove this to save some flash memory!
  // ******************************************************
  Serial.println(F("\r\nNOTE: This sketch may cause problems with other sketches"));
    61d2:	85 e8       	ldi	r24, 0x85	; 133
    61d4:	96 e0       	ldi	r25, 0x06	; 6
    61d6:	65 e2       	ldi	r22, 0x25	; 37
    61d8:	73 e0       	ldi	r23, 0x03	; 3
    61da:	0e 94 16 34 	call	0x682c	; 0x682c <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println(F("since the .disconnect() function is never called, so the"));
    61de:	85 e8       	ldi	r24, 0x85	; 133
    61e0:	96 e0       	ldi	r25, 0x06	; 6
    61e2:	6c ee       	ldi	r22, 0xEC	; 236
    61e4:	72 e0       	ldi	r23, 0x02	; 2
    61e6:	0e 94 16 34 	call	0x682c	; 0x682c <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println(F("AP may refuse connection requests from the CC3000 until a"));
    61ea:	85 e8       	ldi	r24, 0x85	; 133
    61ec:	96 e0       	ldi	r25, 0x06	; 6
    61ee:	62 eb       	ldi	r22, 0xB2	; 178
    61f0:	72 e0       	ldi	r23, 0x02	; 2
    61f2:	0e 94 16 34 	call	0x682c	; 0x682c <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println(F("timeout period passes.  This is normal behaviour since"));
    61f6:	85 e8       	ldi	r24, 0x85	; 133
    61f8:	96 e0       	ldi	r25, 0x06	; 6
    61fa:	6b e7       	ldi	r22, 0x7B	; 123
    61fc:	72 e0       	ldi	r23, 0x02	; 2
    61fe:	0e 94 16 34 	call	0x682c	; 0x682c <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println(F("there isn't an obvious moment to disconnect with a server.\r\n"));
    6202:	85 e8       	ldi	r24, 0x85	; 133
    6204:	96 e0       	ldi	r25, 0x06	; 6
    6206:	6e e3       	ldi	r22, 0x3E	; 62
    6208:	72 e0       	ldi	r23, 0x02	; 2
    620a:	0e 94 16 34 	call	0x682c	; 0x682c <_ZN5Print7printlnEPK19__FlashStringHelper>

  // Start listening for connections
  httpServer.begin();
    620e:	8f ef       	ldi	r24, 0xFF	; 255
    6210:	93 e0       	ldi	r25, 0x03	; 3
    6212:	0e 94 21 28 	call	0x5042	; 0x5042 <_ZN22Adafruit_CC3000_Server5beginEv>

  Serial.println(F("Listening for connections..."));
    6216:	85 e8       	ldi	r24, 0x85	; 133
    6218:	96 e0       	ldi	r25, 0x06	; 6
    621a:	61 e2       	ldi	r22, 0x21	; 33
    621c:	72 e0       	ldi	r23, 0x02	; 2
    621e:	0e 94 16 34 	call	0x682c	; 0x682c <_ZN5Print7printlnEPK19__FlashStringHelper>
}
    6222:	cb 58       	subi	r28, 0x8B	; 139
    6224:	df 4f       	sbci	r29, 0xFF	; 255
    6226:	0f b6       	in	r0, 0x3f	; 63
    6228:	f8 94       	cli
    622a:	de bf       	out	0x3e, r29	; 62
    622c:	0f be       	out	0x3f, r0	; 63
    622e:	cd bf       	out	0x3d, r28	; 61
    6230:	cf 91       	pop	r28
    6232:	df 91       	pop	r29
    6234:	1f 91       	pop	r17
    6236:	0f 91       	pop	r16
    6238:	08 95       	ret

0000623a <_Z11serialEventv>:
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    623a:	08 95       	ret

0000623c <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
    623c:	1f 92       	push	r1
    623e:	0f 92       	push	r0
    6240:	0f b6       	in	r0, 0x3f	; 63
    6242:	0f 92       	push	r0
    6244:	11 24       	eor	r1, r1
    6246:	2f 93       	push	r18
    6248:	3f 93       	push	r19
    624a:	4f 93       	push	r20
    624c:	8f 93       	push	r24
    624e:	9f 93       	push	r25
    6250:	ef 93       	push	r30
    6252:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    6254:	80 91 c0 00 	lds	r24, 0x00C0
    6258:	82 fd       	sbrc	r24, 2
    625a:	1d c0       	rjmp	.+58     	; 0x6296 <__vector_18+0x5a>
      unsigned char c = UDR0;
    625c:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    6260:	20 91 3d 06 	lds	r18, 0x063D
    6264:	30 91 3e 06 	lds	r19, 0x063E

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    6268:	2f 5f       	subi	r18, 0xFF	; 255
    626a:	3f 4f       	sbci	r19, 0xFF	; 255
    626c:	2f 73       	andi	r18, 0x3F	; 63
    626e:	30 70       	andi	r19, 0x00	; 0
    6270:	80 91 3f 06 	lds	r24, 0x063F
    6274:	90 91 40 06 	lds	r25, 0x0640
    6278:	28 17       	cp	r18, r24
    627a:	39 07       	cpc	r19, r25
    627c:	71 f0       	breq	.+28     	; 0x629a <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
    627e:	e0 91 3d 06 	lds	r30, 0x063D
    6282:	f0 91 3e 06 	lds	r31, 0x063E
    6286:	e3 50       	subi	r30, 0x03	; 3
    6288:	fa 4f       	sbci	r31, 0xFA	; 250
    628a:	40 83       	st	Z, r20
    buffer->head = i;
    628c:	30 93 3e 06 	sts	0x063E, r19
    6290:	20 93 3d 06 	sts	0x063D, r18
    6294:	02 c0       	rjmp	.+4      	; 0x629a <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    6296:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    629a:	ff 91       	pop	r31
    629c:	ef 91       	pop	r30
    629e:	9f 91       	pop	r25
    62a0:	8f 91       	pop	r24
    62a2:	4f 91       	pop	r20
    62a4:	3f 91       	pop	r19
    62a6:	2f 91       	pop	r18
    62a8:	0f 90       	pop	r0
    62aa:	0f be       	out	0x3f, r0	; 63
    62ac:	0f 90       	pop	r0
    62ae:	1f 90       	pop	r1
    62b0:	18 95       	reti

000062b2 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    62b2:	e0 91 91 06 	lds	r30, 0x0691
    62b6:	f0 91 92 06 	lds	r31, 0x0692
    62ba:	e0 5c       	subi	r30, 0xC0	; 192
    62bc:	ff 4f       	sbci	r31, 0xFF	; 255
    62be:	81 91       	ld	r24, Z+
    62c0:	91 91       	ld	r25, Z+
    62c2:	20 81       	ld	r18, Z
    62c4:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    62c6:	82 1b       	sub	r24, r18
    62c8:	93 0b       	sbc	r25, r19
    62ca:	8f 73       	andi	r24, 0x3F	; 63
    62cc:	90 70       	andi	r25, 0x00	; 0
    62ce:	89 2b       	or	r24, r25
    62d0:	11 f0       	breq	.+4      	; 0x62d6 <_Z14serialEventRunv+0x24>
    62d2:	0e 94 1d 31 	call	0x623a	; 0x623a <_Z11serialEventv>
    62d6:	08 95       	ret

000062d8 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    62d8:	1f 92       	push	r1
    62da:	0f 92       	push	r0
    62dc:	0f b6       	in	r0, 0x3f	; 63
    62de:	0f 92       	push	r0
    62e0:	11 24       	eor	r1, r1
    62e2:	2f 93       	push	r18
    62e4:	3f 93       	push	r19
    62e6:	8f 93       	push	r24
    62e8:	9f 93       	push	r25
    62ea:	ef 93       	push	r30
    62ec:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    62ee:	20 91 81 06 	lds	r18, 0x0681
    62f2:	30 91 82 06 	lds	r19, 0x0682
    62f6:	80 91 83 06 	lds	r24, 0x0683
    62fa:	90 91 84 06 	lds	r25, 0x0684
    62fe:	28 17       	cp	r18, r24
    6300:	39 07       	cpc	r19, r25
    6302:	31 f4       	brne	.+12     	; 0x6310 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    6304:	80 91 c1 00 	lds	r24, 0x00C1
    6308:	8f 7d       	andi	r24, 0xDF	; 223
    630a:	80 93 c1 00 	sts	0x00C1, r24
    630e:	14 c0       	rjmp	.+40     	; 0x6338 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    6310:	e0 91 83 06 	lds	r30, 0x0683
    6314:	f0 91 84 06 	lds	r31, 0x0684
    6318:	ef 5b       	subi	r30, 0xBF	; 191
    631a:	f9 4f       	sbci	r31, 0xF9	; 249
    631c:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    631e:	80 91 83 06 	lds	r24, 0x0683
    6322:	90 91 84 06 	lds	r25, 0x0684
    6326:	01 96       	adiw	r24, 0x01	; 1
    6328:	8f 73       	andi	r24, 0x3F	; 63
    632a:	90 70       	andi	r25, 0x00	; 0
    632c:	90 93 84 06 	sts	0x0684, r25
    6330:	80 93 83 06 	sts	0x0683, r24
	
  #if defined(UDR0)
    UDR0 = c;
    6334:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    6338:	ff 91       	pop	r31
    633a:	ef 91       	pop	r30
    633c:	9f 91       	pop	r25
    633e:	8f 91       	pop	r24
    6340:	3f 91       	pop	r19
    6342:	2f 91       	pop	r18
    6344:	0f 90       	pop	r0
    6346:	0f be       	out	0x3f, r0	; 63
    6348:	0f 90       	pop	r0
    634a:	1f 90       	pop	r1
    634c:	18 95       	reti

0000634e <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    634e:	af 92       	push	r10
    6350:	bf 92       	push	r11
    6352:	df 92       	push	r13
    6354:	ef 92       	push	r14
    6356:	ff 92       	push	r15
    6358:	0f 93       	push	r16
    635a:	1f 93       	push	r17
    635c:	cf 93       	push	r28
    635e:	df 93       	push	r29
    6360:	ec 01       	movw	r28, r24
    6362:	7a 01       	movw	r14, r20
    6364:	8b 01       	movw	r16, r22
    6366:	dd 24       	eor	r13, r13
    6368:	40 30       	cpi	r20, 0x00	; 0
    636a:	81 ee       	ldi	r24, 0xE1	; 225
    636c:	58 07       	cpc	r21, r24
    636e:	80 e0       	ldi	r24, 0x00	; 0
    6370:	68 07       	cpc	r22, r24
    6372:	80 e0       	ldi	r24, 0x00	; 0
    6374:	78 07       	cpc	r23, r24
    6376:	11 f0       	breq	.+4      	; 0x637c <_ZN14HardwareSerial5beginEm+0x2e>
    6378:	dd 24       	eor	r13, r13
    637a:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    637c:	91 e0       	ldi	r25, 0x01	; 1
    637e:	a9 2e       	mov	r10, r25
    6380:	b1 2c       	mov	r11, r1
    6382:	ec 89       	ldd	r30, Y+20	; 0x14
    6384:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    6386:	dd 20       	and	r13, r13
    6388:	69 f0       	breq	.+26     	; 0x63a4 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    638a:	c5 01       	movw	r24, r10
    638c:	08 a0       	ldd	r0, Y+32	; 0x20
    638e:	02 c0       	rjmp	.+4      	; 0x6394 <_ZN14HardwareSerial5beginEm+0x46>
    6390:	88 0f       	add	r24, r24
    6392:	99 1f       	adc	r25, r25
    6394:	0a 94       	dec	r0
    6396:	e2 f7       	brpl	.-8      	; 0x6390 <_ZN14HardwareSerial5beginEm+0x42>
    6398:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    639a:	60 e0       	ldi	r22, 0x00	; 0
    639c:	79 e0       	ldi	r23, 0x09	; 9
    639e:	8d e3       	ldi	r24, 0x3D	; 61
    63a0:	90 e0       	ldi	r25, 0x00	; 0
    63a2:	05 c0       	rjmp	.+10     	; 0x63ae <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    63a4:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    63a6:	60 e8       	ldi	r22, 0x80	; 128
    63a8:	74 e8       	ldi	r23, 0x84	; 132
    63aa:	8e e1       	ldi	r24, 0x1E	; 30
    63ac:	90 e0       	ldi	r25, 0x00	; 0
    63ae:	a8 01       	movw	r20, r16
    63b0:	97 01       	movw	r18, r14
    63b2:	0e 94 f5 37 	call	0x6fea	; 0x6fea <__udivmodsi4>
    63b6:	21 50       	subi	r18, 0x01	; 1
    63b8:	30 40       	sbci	r19, 0x00	; 0
    63ba:	40 40       	sbci	r20, 0x00	; 0
    63bc:	50 40       	sbci	r21, 0x00	; 0
    63be:	56 95       	lsr	r21
    63c0:	47 95       	ror	r20
    63c2:	37 95       	ror	r19
    63c4:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    63c6:	80 e1       	ldi	r24, 0x10	; 16
    63c8:	20 30       	cpi	r18, 0x00	; 0
    63ca:	38 07       	cpc	r19, r24
    63cc:	20 f0       	brcs	.+8      	; 0x63d6 <_ZN14HardwareSerial5beginEm+0x88>
    63ce:	dd 20       	and	r13, r13
    63d0:	11 f0       	breq	.+4      	; 0x63d6 <_ZN14HardwareSerial5beginEm+0x88>
    63d2:	dd 24       	eor	r13, r13
    63d4:	d6 cf       	rjmp	.-84     	; 0x6382 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    63d6:	e8 89       	ldd	r30, Y+16	; 0x10
    63d8:	f9 89       	ldd	r31, Y+17	; 0x11
    63da:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    63dc:	ea 89       	ldd	r30, Y+18	; 0x12
    63de:	fb 89       	ldd	r31, Y+19	; 0x13
    63e0:	20 83       	st	Z, r18

  transmitting = false;
    63e2:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    63e4:	ee 89       	ldd	r30, Y+22	; 0x16
    63e6:	ff 89       	ldd	r31, Y+23	; 0x17
    63e8:	40 81       	ld	r20, Z
    63ea:	21 e0       	ldi	r18, 0x01	; 1
    63ec:	30 e0       	ldi	r19, 0x00	; 0
    63ee:	c9 01       	movw	r24, r18
    63f0:	0c 8c       	ldd	r0, Y+28	; 0x1c
    63f2:	02 c0       	rjmp	.+4      	; 0x63f8 <_ZN14HardwareSerial5beginEm+0xaa>
    63f4:	88 0f       	add	r24, r24
    63f6:	99 1f       	adc	r25, r25
    63f8:	0a 94       	dec	r0
    63fa:	e2 f7       	brpl	.-8      	; 0x63f4 <_ZN14HardwareSerial5beginEm+0xa6>
    63fc:	48 2b       	or	r20, r24
    63fe:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    6400:	ee 89       	ldd	r30, Y+22	; 0x16
    6402:	ff 89       	ldd	r31, Y+23	; 0x17
    6404:	40 81       	ld	r20, Z
    6406:	c9 01       	movw	r24, r18
    6408:	0d 8c       	ldd	r0, Y+29	; 0x1d
    640a:	02 c0       	rjmp	.+4      	; 0x6410 <_ZN14HardwareSerial5beginEm+0xc2>
    640c:	88 0f       	add	r24, r24
    640e:	99 1f       	adc	r25, r25
    6410:	0a 94       	dec	r0
    6412:	e2 f7       	brpl	.-8      	; 0x640c <_ZN14HardwareSerial5beginEm+0xbe>
    6414:	48 2b       	or	r20, r24
    6416:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    6418:	ee 89       	ldd	r30, Y+22	; 0x16
    641a:	ff 89       	ldd	r31, Y+23	; 0x17
    641c:	40 81       	ld	r20, Z
    641e:	c9 01       	movw	r24, r18
    6420:	0e 8c       	ldd	r0, Y+30	; 0x1e
    6422:	02 c0       	rjmp	.+4      	; 0x6428 <_ZN14HardwareSerial5beginEm+0xda>
    6424:	88 0f       	add	r24, r24
    6426:	99 1f       	adc	r25, r25
    6428:	0a 94       	dec	r0
    642a:	e2 f7       	brpl	.-8      	; 0x6424 <_ZN14HardwareSerial5beginEm+0xd6>
    642c:	48 2b       	or	r20, r24
    642e:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    6430:	ee 89       	ldd	r30, Y+22	; 0x16
    6432:	ff 89       	ldd	r31, Y+23	; 0x17
    6434:	80 81       	ld	r24, Z
    6436:	0f 8c       	ldd	r0, Y+31	; 0x1f
    6438:	02 c0       	rjmp	.+4      	; 0x643e <_ZN14HardwareSerial5beginEm+0xf0>
    643a:	22 0f       	add	r18, r18
    643c:	33 1f       	adc	r19, r19
    643e:	0a 94       	dec	r0
    6440:	e2 f7       	brpl	.-8      	; 0x643a <_ZN14HardwareSerial5beginEm+0xec>
    6442:	20 95       	com	r18
    6444:	28 23       	and	r18, r24
    6446:	20 83       	st	Z, r18
}
    6448:	df 91       	pop	r29
    644a:	cf 91       	pop	r28
    644c:	1f 91       	pop	r17
    644e:	0f 91       	pop	r16
    6450:	ff 90       	pop	r15
    6452:	ef 90       	pop	r14
    6454:	df 90       	pop	r13
    6456:	bf 90       	pop	r11
    6458:	af 90       	pop	r10
    645a:	08 95       	ret

0000645c <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    645c:	dc 01       	movw	r26, r24
    645e:	1c 96       	adiw	r26, 0x0c	; 12
    6460:	ed 91       	ld	r30, X+
    6462:	fc 91       	ld	r31, X
    6464:	1d 97       	sbiw	r26, 0x0d	; 13
    6466:	e0 5c       	subi	r30, 0xC0	; 192
    6468:	ff 4f       	sbci	r31, 0xFF	; 255
    646a:	21 91       	ld	r18, Z+
    646c:	31 91       	ld	r19, Z+
    646e:	80 81       	ld	r24, Z
    6470:	91 81       	ldd	r25, Z+1	; 0x01
    6472:	28 1b       	sub	r18, r24
    6474:	39 0b       	sbc	r19, r25
    6476:	2f 73       	andi	r18, 0x3F	; 63
    6478:	30 70       	andi	r19, 0x00	; 0
}
    647a:	c9 01       	movw	r24, r18
    647c:	08 95       	ret

0000647e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    647e:	dc 01       	movw	r26, r24
    6480:	1c 96       	adiw	r26, 0x0c	; 12
    6482:	ed 91       	ld	r30, X+
    6484:	fc 91       	ld	r31, X
    6486:	1d 97       	sbiw	r26, 0x0d	; 13
    6488:	e0 5c       	subi	r30, 0xC0	; 192
    648a:	ff 4f       	sbci	r31, 0xFF	; 255
    648c:	20 81       	ld	r18, Z
    648e:	31 81       	ldd	r19, Z+1	; 0x01
    6490:	e0 54       	subi	r30, 0x40	; 64
    6492:	f0 40       	sbci	r31, 0x00	; 0
    6494:	df 01       	movw	r26, r30
    6496:	ae 5b       	subi	r26, 0xBE	; 190
    6498:	bf 4f       	sbci	r27, 0xFF	; 255
    649a:	8d 91       	ld	r24, X+
    649c:	9c 91       	ld	r25, X
    649e:	11 97       	sbiw	r26, 0x01	; 1
    64a0:	28 17       	cp	r18, r24
    64a2:	39 07       	cpc	r19, r25
    64a4:	19 f4       	brne	.+6      	; 0x64ac <_ZN14HardwareSerial4peekEv+0x2e>
    64a6:	2f ef       	ldi	r18, 0xFF	; 255
    64a8:	3f ef       	ldi	r19, 0xFF	; 255
    64aa:	07 c0       	rjmp	.+14     	; 0x64ba <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    64ac:	8d 91       	ld	r24, X+
    64ae:	9c 91       	ld	r25, X
    64b0:	e8 0f       	add	r30, r24
    64b2:	f9 1f       	adc	r31, r25
    64b4:	80 81       	ld	r24, Z
    64b6:	28 2f       	mov	r18, r24
    64b8:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    64ba:	c9 01       	movw	r24, r18
    64bc:	08 95       	ret

000064be <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    64be:	dc 01       	movw	r26, r24
    64c0:	1c 96       	adiw	r26, 0x0c	; 12
    64c2:	ed 91       	ld	r30, X+
    64c4:	fc 91       	ld	r31, X
    64c6:	1d 97       	sbiw	r26, 0x0d	; 13
    64c8:	e0 5c       	subi	r30, 0xC0	; 192
    64ca:	ff 4f       	sbci	r31, 0xFF	; 255
    64cc:	20 81       	ld	r18, Z
    64ce:	31 81       	ldd	r19, Z+1	; 0x01
    64d0:	e0 54       	subi	r30, 0x40	; 64
    64d2:	f0 40       	sbci	r31, 0x00	; 0
    64d4:	df 01       	movw	r26, r30
    64d6:	ae 5b       	subi	r26, 0xBE	; 190
    64d8:	bf 4f       	sbci	r27, 0xFF	; 255
    64da:	8d 91       	ld	r24, X+
    64dc:	9c 91       	ld	r25, X
    64de:	11 97       	sbiw	r26, 0x01	; 1
    64e0:	28 17       	cp	r18, r24
    64e2:	39 07       	cpc	r19, r25
    64e4:	19 f4       	brne	.+6      	; 0x64ec <_ZN14HardwareSerial4readEv+0x2e>
    64e6:	2f ef       	ldi	r18, 0xFF	; 255
    64e8:	3f ef       	ldi	r19, 0xFF	; 255
    64ea:	10 c0       	rjmp	.+32     	; 0x650c <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    64ec:	8d 91       	ld	r24, X+
    64ee:	9c 91       	ld	r25, X
    64f0:	11 97       	sbiw	r26, 0x01	; 1
    64f2:	e8 0f       	add	r30, r24
    64f4:	f9 1f       	adc	r31, r25
    64f6:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    64f8:	8d 91       	ld	r24, X+
    64fa:	9c 91       	ld	r25, X
    64fc:	11 97       	sbiw	r26, 0x01	; 1
    64fe:	01 96       	adiw	r24, 0x01	; 1
    6500:	8f 73       	andi	r24, 0x3F	; 63
    6502:	90 70       	andi	r25, 0x00	; 0
    6504:	11 96       	adiw	r26, 0x01	; 1
    6506:	9c 93       	st	X, r25
    6508:	8e 93       	st	-X, r24
    return c;
    650a:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    650c:	c9 01       	movw	r24, r18
    650e:	08 95       	ret

00006510 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
    6510:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    6512:	91 96       	adiw	r26, 0x21	; 33
    6514:	8c 91       	ld	r24, X
    6516:	91 97       	sbiw	r26, 0x21	; 33
    6518:	88 23       	and	r24, r24
    651a:	39 f0       	breq	.+14     	; 0x652a <_ZN14HardwareSerial5flushEv+0x1a>
    651c:	54 96       	adiw	r26, 0x14	; 20
    651e:	ed 91       	ld	r30, X+
    6520:	fc 91       	ld	r31, X
    6522:	55 97       	sbiw	r26, 0x15	; 21
    6524:	80 81       	ld	r24, Z
    6526:	86 ff       	sbrs	r24, 6
    6528:	f9 cf       	rjmp	.-14     	; 0x651c <_ZN14HardwareSerial5flushEv+0xc>
  transmitting = false;
    652a:	91 96       	adiw	r26, 0x21	; 33
    652c:	1c 92       	st	X, r1
}
    652e:	08 95       	ret

00006530 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    6530:	cf 93       	push	r28
    6532:	df 93       	push	r29
    6534:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    6536:	ee 85       	ldd	r30, Y+14	; 0x0e
    6538:	ff 85       	ldd	r31, Y+15	; 0x0f
    653a:	e0 5c       	subi	r30, 0xC0	; 192
    653c:	ff 4f       	sbci	r31, 0xFF	; 255
    653e:	20 81       	ld	r18, Z
    6540:	31 81       	ldd	r19, Z+1	; 0x01
    6542:	e0 54       	subi	r30, 0x40	; 64
    6544:	f0 40       	sbci	r31, 0x00	; 0
    6546:	2f 5f       	subi	r18, 0xFF	; 255
    6548:	3f 4f       	sbci	r19, 0xFF	; 255
    654a:	2f 73       	andi	r18, 0x3F	; 63
    654c:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    654e:	df 01       	movw	r26, r30
    6550:	ae 5b       	subi	r26, 0xBE	; 190
    6552:	bf 4f       	sbci	r27, 0xFF	; 255
    6554:	8d 91       	ld	r24, X+
    6556:	9c 91       	ld	r25, X
    6558:	11 97       	sbiw	r26, 0x01	; 1
    655a:	28 17       	cp	r18, r24
    655c:	39 07       	cpc	r19, r25
    655e:	d1 f3       	breq	.-12     	; 0x6554 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    6560:	e0 5c       	subi	r30, 0xC0	; 192
    6562:	ff 4f       	sbci	r31, 0xFF	; 255
    6564:	80 81       	ld	r24, Z
    6566:	91 81       	ldd	r25, Z+1	; 0x01
    6568:	e0 54       	subi	r30, 0x40	; 64
    656a:	f0 40       	sbci	r31, 0x00	; 0
    656c:	e8 0f       	add	r30, r24
    656e:	f9 1f       	adc	r31, r25
    6570:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    6572:	ee 85       	ldd	r30, Y+14	; 0x0e
    6574:	ff 85       	ldd	r31, Y+15	; 0x0f
    6576:	e0 5c       	subi	r30, 0xC0	; 192
    6578:	ff 4f       	sbci	r31, 0xFF	; 255
    657a:	31 83       	std	Z+1, r19	; 0x01
    657c:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    657e:	ee 89       	ldd	r30, Y+22	; 0x16
    6580:	ff 89       	ldd	r31, Y+23	; 0x17
    6582:	20 81       	ld	r18, Z
    6584:	81 e0       	ldi	r24, 0x01	; 1
    6586:	90 e0       	ldi	r25, 0x00	; 0
    6588:	0f 8c       	ldd	r0, Y+31	; 0x1f
    658a:	02 c0       	rjmp	.+4      	; 0x6590 <_ZN14HardwareSerial5writeEh+0x60>
    658c:	88 0f       	add	r24, r24
    658e:	99 1f       	adc	r25, r25
    6590:	0a 94       	dec	r0
    6592:	e2 f7       	brpl	.-8      	; 0x658c <_ZN14HardwareSerial5writeEh+0x5c>
    6594:	28 2b       	or	r18, r24
    6596:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    6598:	81 e0       	ldi	r24, 0x01	; 1
    659a:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    659c:	ec 89       	ldd	r30, Y+20	; 0x14
    659e:	fd 89       	ldd	r31, Y+21	; 0x15
    65a0:	80 81       	ld	r24, Z
    65a2:	80 64       	ori	r24, 0x40	; 64
    65a4:	80 83       	st	Z, r24
  
  return 1;
}
    65a6:	81 e0       	ldi	r24, 0x01	; 1
    65a8:	90 e0       	ldi	r25, 0x00	; 0
    65aa:	df 91       	pop	r29
    65ac:	cf 91       	pop	r28
    65ae:	08 95       	ret

000065b0 <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    65b0:	10 92 88 06 	sts	0x0688, r1
    65b4:	10 92 87 06 	sts	0x0687, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    65b8:	88 ee       	ldi	r24, 0xE8	; 232
    65ba:	93 e0       	ldi	r25, 0x03	; 3
    65bc:	a0 e0       	ldi	r26, 0x00	; 0
    65be:	b0 e0       	ldi	r27, 0x00	; 0
    65c0:	80 93 89 06 	sts	0x0689, r24
    65c4:	90 93 8a 06 	sts	0x068A, r25
    65c8:	a0 93 8b 06 	sts	0x068B, r26
    65cc:	b0 93 8c 06 	sts	0x068C, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    65d0:	8a e5       	ldi	r24, 0x5A	; 90
    65d2:	92 e0       	ldi	r25, 0x02	; 2
    65d4:	90 93 86 06 	sts	0x0686, r25
    65d8:	80 93 85 06 	sts	0x0685, r24
{
  _rx_buffer = rx_buffer;
    65dc:	8d ef       	ldi	r24, 0xFD	; 253
    65de:	95 e0       	ldi	r25, 0x05	; 5
    65e0:	90 93 92 06 	sts	0x0692, r25
    65e4:	80 93 91 06 	sts	0x0691, r24
  _tx_buffer = tx_buffer;
    65e8:	81 e4       	ldi	r24, 0x41	; 65
    65ea:	96 e0       	ldi	r25, 0x06	; 6
    65ec:	90 93 94 06 	sts	0x0694, r25
    65f0:	80 93 93 06 	sts	0x0693, r24
  _ubrrh = ubrrh;
    65f4:	85 ec       	ldi	r24, 0xC5	; 197
    65f6:	90 e0       	ldi	r25, 0x00	; 0
    65f8:	90 93 96 06 	sts	0x0696, r25
    65fc:	80 93 95 06 	sts	0x0695, r24
  _ubrrl = ubrrl;
    6600:	84 ec       	ldi	r24, 0xC4	; 196
    6602:	90 e0       	ldi	r25, 0x00	; 0
    6604:	90 93 98 06 	sts	0x0698, r25
    6608:	80 93 97 06 	sts	0x0697, r24
  _ucsra = ucsra;
    660c:	80 ec       	ldi	r24, 0xC0	; 192
    660e:	90 e0       	ldi	r25, 0x00	; 0
    6610:	90 93 9a 06 	sts	0x069A, r25
    6614:	80 93 99 06 	sts	0x0699, r24
  _ucsrb = ucsrb;
    6618:	81 ec       	ldi	r24, 0xC1	; 193
    661a:	90 e0       	ldi	r25, 0x00	; 0
    661c:	90 93 9c 06 	sts	0x069C, r25
    6620:	80 93 9b 06 	sts	0x069B, r24
  _ucsrc = ucsrc;
    6624:	82 ec       	ldi	r24, 0xC2	; 194
    6626:	90 e0       	ldi	r25, 0x00	; 0
    6628:	90 93 9e 06 	sts	0x069E, r25
    662c:	80 93 9d 06 	sts	0x069D, r24
  _udr = udr;
    6630:	86 ec       	ldi	r24, 0xC6	; 198
    6632:	90 e0       	ldi	r25, 0x00	; 0
    6634:	90 93 a0 06 	sts	0x06A0, r25
    6638:	80 93 9f 06 	sts	0x069F, r24
  _rxen = rxen;
    663c:	84 e0       	ldi	r24, 0x04	; 4
    663e:	80 93 a1 06 	sts	0x06A1, r24
  _txen = txen;
    6642:	83 e0       	ldi	r24, 0x03	; 3
    6644:	80 93 a2 06 	sts	0x06A2, r24
  _rxcie = rxcie;
    6648:	87 e0       	ldi	r24, 0x07	; 7
    664a:	80 93 a3 06 	sts	0x06A3, r24
  _udrie = udrie;
    664e:	85 e0       	ldi	r24, 0x05	; 5
    6650:	80 93 a4 06 	sts	0x06A4, r24
  _u2x = u2x;
    6654:	81 e0       	ldi	r24, 0x01	; 1
    6656:	80 93 a5 06 	sts	0x06A5, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    665a:	08 95       	ret

0000665c <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    665c:	0f 93       	push	r16
    665e:	fc 01       	movw	r30, r24
    6660:	8a e6       	ldi	r24, 0x6A	; 106
    6662:	92 e0       	ldi	r25, 0x02	; 2
    6664:	91 83       	std	Z+1, r25	; 0x01
    6666:	80 83       	st	Z, r24
{
    _address[0] = first_octet;
    6668:	62 83       	std	Z+2, r22	; 0x02
    _address[1] = second_octet;
    666a:	43 83       	std	Z+3, r20	; 0x03
    _address[2] = third_octet;
    666c:	24 83       	std	Z+4, r18	; 0x04
    _address[3] = fourth_octet;
    666e:	05 83       	std	Z+5, r16	; 0x05
}
    6670:	0f 91       	pop	r16
    6672:	08 95       	ret

00006674 <_GLOBAL__I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    6674:	8a e6       	ldi	r24, 0x6A	; 106
    6676:	92 e0       	ldi	r25, 0x02	; 2
    6678:	90 93 a8 06 	sts	0x06A8, r25
    667c:	80 93 a7 06 	sts	0x06A7, r24
{
    _address[0] = first_octet;
    6680:	10 92 a9 06 	sts	0x06A9, r1
    _address[1] = second_octet;
    6684:	10 92 aa 06 	sts	0x06AA, r1
    _address[2] = third_octet;
    6688:	10 92 ab 06 	sts	0x06AB, r1
    _address[3] = fourth_octet;
    668c:	10 92 ac 06 	sts	0x06AC, r1
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
    6690:	08 95       	ret

00006692 <_ZNK9IPAddress7printToER5Print>:
bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
    6692:	8f 92       	push	r8
    6694:	9f 92       	push	r9
    6696:	af 92       	push	r10
    6698:	bf 92       	push	r11
    669a:	cf 92       	push	r12
    669c:	df 92       	push	r13
    669e:	ef 92       	push	r14
    66a0:	ff 92       	push	r15
    66a2:	0f 93       	push	r16
    66a4:	1f 93       	push	r17
    66a6:	cf 93       	push	r28
    66a8:	df 93       	push	r29
    66aa:	4c 01       	movw	r8, r24
    66ac:	6b 01       	movw	r12, r22
    66ae:	7c 01       	movw	r14, r24
    66b0:	aa 24       	eor	r10, r10
    66b2:	bb 24       	eor	r11, r11
    66b4:	c0 e0       	ldi	r28, 0x00	; 0
    66b6:	d0 e0       	ldi	r29, 0x00	; 0
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
    66b8:	c6 01       	movw	r24, r12
    66ba:	f7 01       	movw	r30, r14
    66bc:	62 81       	ldd	r22, Z+2	; 0x02
    66be:	4a e0       	ldi	r20, 0x0A	; 10
    66c0:	50 e0       	ldi	r21, 0x00	; 0
    66c2:	0e 94 b9 34 	call	0x6972	; 0x6972 <_ZN5Print5printEhi>
    66c6:	8c 01       	movw	r16, r24
        n += p.print('.');
    66c8:	c6 01       	movw	r24, r12
    66ca:	6e e2       	ldi	r22, 0x2E	; 46
    66cc:	0e 94 ee 33 	call	0x67dc	; 0x67dc <_ZN5Print5printEc>
size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
    66d0:	08 0f       	add	r16, r24
    66d2:	19 1f       	adc	r17, r25
        n += p.print('.');
    66d4:	a0 0e       	add	r10, r16
    66d6:	b1 1e       	adc	r11, r17
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    66d8:	21 96       	adiw	r28, 0x01	; 1
    66da:	08 94       	sec
    66dc:	e1 1c       	adc	r14, r1
    66de:	f1 1c       	adc	r15, r1
    66e0:	c3 30       	cpi	r28, 0x03	; 3
    66e2:	d1 05       	cpc	r29, r1
    66e4:	49 f7       	brne	.-46     	; 0x66b8 <_ZNK9IPAddress7printToER5Print+0x26>
    {
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    66e6:	c6 01       	movw	r24, r12
    66e8:	f4 01       	movw	r30, r8
    66ea:	65 81       	ldd	r22, Z+5	; 0x05
    66ec:	4a e0       	ldi	r20, 0x0A	; 10
    66ee:	50 e0       	ldi	r21, 0x00	; 0
    66f0:	0e 94 b9 34 	call	0x6972	; 0x6972 <_ZN5Print5printEhi>
    66f4:	95 01       	movw	r18, r10
    66f6:	28 0f       	add	r18, r24
    66f8:	39 1f       	adc	r19, r25
    return n;
}
    66fa:	c9 01       	movw	r24, r18
    66fc:	df 91       	pop	r29
    66fe:	cf 91       	pop	r28
    6700:	1f 91       	pop	r17
    6702:	0f 91       	pop	r16
    6704:	ff 90       	pop	r15
    6706:	ef 90       	pop	r14
    6708:	df 90       	pop	r13
    670a:	cf 90       	pop	r12
    670c:	bf 90       	pop	r11
    670e:	af 90       	pop	r10
    6710:	9f 90       	pop	r9
    6712:	8f 90       	pop	r8
    6714:	08 95       	ret

00006716 <_ZN9IPAddressC1Em>:
    _address[1] = second_octet;
    _address[2] = third_octet;
    _address[3] = fourth_octet;
}

IPAddress::IPAddress(uint32_t address)
    6716:	df 93       	push	r29
    6718:	cf 93       	push	r28
    671a:	00 d0       	rcall	.+0      	; 0x671c <_ZN9IPAddressC1Em+0x6>
    671c:	00 d0       	rcall	.+0      	; 0x671e <_ZN9IPAddressC1Em+0x8>
    671e:	cd b7       	in	r28, 0x3d	; 61
    6720:	de b7       	in	r29, 0x3e	; 62
    6722:	fc 01       	movw	r30, r24
    6724:	8a e6       	ldi	r24, 0x6A	; 106
    6726:	92 e0       	ldi	r25, 0x02	; 2
    6728:	91 83       	std	Z+1, r25	; 0x01
    672a:	80 83       	st	Z, r24
{
    memcpy(_address, &address, sizeof(_address));
    672c:	42 83       	std	Z+2, r20	; 0x02
    672e:	53 83       	std	Z+3, r21	; 0x03
    6730:	64 83       	std	Z+4, r22	; 0x04
    6732:	75 83       	std	Z+5, r23	; 0x05
}
    6734:	0f 90       	pop	r0
    6736:	0f 90       	pop	r0
    6738:	0f 90       	pop	r0
    673a:	0f 90       	pop	r0
    673c:	cf 91       	pop	r28
    673e:	df 91       	pop	r29
    6740:	08 95       	ret

00006742 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    6742:	cf 92       	push	r12
    6744:	df 92       	push	r13
    6746:	ef 92       	push	r14
    6748:	ff 92       	push	r15
    674a:	0f 93       	push	r16
    674c:	1f 93       	push	r17
    674e:	cf 93       	push	r28
    6750:	df 93       	push	r29
    6752:	7c 01       	movw	r14, r24
    6754:	6b 01       	movw	r12, r22
    6756:	8a 01       	movw	r16, r20
    6758:	c0 e0       	ldi	r28, 0x00	; 0
    675a:	d0 e0       	ldi	r29, 0x00	; 0
    675c:	0f c0       	rjmp	.+30     	; 0x677c <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    675e:	d6 01       	movw	r26, r12
    6760:	6d 91       	ld	r22, X+
    6762:	6d 01       	movw	r12, r26
    6764:	d7 01       	movw	r26, r14
    6766:	ed 91       	ld	r30, X+
    6768:	fc 91       	ld	r31, X
    676a:	01 90       	ld	r0, Z+
    676c:	f0 81       	ld	r31, Z
    676e:	e0 2d       	mov	r30, r0
    6770:	c7 01       	movw	r24, r14
    6772:	09 95       	icall
    6774:	c8 0f       	add	r28, r24
    6776:	d9 1f       	adc	r29, r25
    6778:	01 50       	subi	r16, 0x01	; 1
    677a:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    677c:	01 15       	cp	r16, r1
    677e:	11 05       	cpc	r17, r1
    6780:	71 f7       	brne	.-36     	; 0x675e <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    6782:	ce 01       	movw	r24, r28
    6784:	df 91       	pop	r29
    6786:	cf 91       	pop	r28
    6788:	1f 91       	pop	r17
    678a:	0f 91       	pop	r16
    678c:	ff 90       	pop	r15
    678e:	ef 90       	pop	r14
    6790:	df 90       	pop	r13
    6792:	cf 90       	pop	r12
    6794:	08 95       	ret

00006796 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
    6796:	ef 92       	push	r14
    6798:	ff 92       	push	r15
    679a:	0f 93       	push	r16
    679c:	1f 93       	push	r17
    679e:	cf 93       	push	r28
    67a0:	df 93       	push	r29
    67a2:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    67a4:	8b 01       	movw	r16, r22
    67a6:	c0 e0       	ldi	r28, 0x00	; 0
    67a8:	d0 e0       	ldi	r29, 0x00	; 0
    67aa:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    67ac:	0f 5f       	subi	r16, 0xFF	; 255
    67ae:	1f 4f       	sbci	r17, 0xFF	; 255
    67b0:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    67b2:	66 23       	and	r22, r22
    67b4:	59 f0       	breq	.+22     	; 0x67cc <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    n += write(c);
    67b6:	d7 01       	movw	r26, r14
    67b8:	ed 91       	ld	r30, X+
    67ba:	fc 91       	ld	r31, X
    67bc:	01 90       	ld	r0, Z+
    67be:	f0 81       	ld	r31, Z
    67c0:	e0 2d       	mov	r30, r0
    67c2:	c7 01       	movw	r24, r14
    67c4:	09 95       	icall
    67c6:	c8 0f       	add	r28, r24
    67c8:	d9 1f       	adc	r29, r25
    67ca:	ef cf       	rjmp	.-34     	; 0x67aa <_ZN5Print5printEPK19__FlashStringHelper+0x14>
  }
  return n;
}
    67cc:	ce 01       	movw	r24, r28
    67ce:	df 91       	pop	r29
    67d0:	cf 91       	pop	r28
    67d2:	1f 91       	pop	r17
    67d4:	0f 91       	pop	r16
    67d6:	ff 90       	pop	r15
    67d8:	ef 90       	pop	r14
    67da:	08 95       	ret

000067dc <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    67dc:	dc 01       	movw	r26, r24
{
  return write(c);
    67de:	ed 91       	ld	r30, X+
    67e0:	fc 91       	ld	r31, X
    67e2:	01 90       	ld	r0, Z+
    67e4:	f0 81       	ld	r31, Z
    67e6:	e0 2d       	mov	r30, r0
    67e8:	09 95       	icall
}
    67ea:	08 95       	ret

000067ec <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    67ec:	ef 92       	push	r14
    67ee:	ff 92       	push	r15
    67f0:	0f 93       	push	r16
    67f2:	1f 93       	push	r17
    67f4:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    67f6:	dc 01       	movw	r26, r24
    67f8:	ed 91       	ld	r30, X+
    67fa:	fc 91       	ld	r31, X
    67fc:	01 90       	ld	r0, Z+
    67fe:	f0 81       	ld	r31, Z
    6800:	e0 2d       	mov	r30, r0
    6802:	6d e0       	ldi	r22, 0x0D	; 13
    6804:	09 95       	icall
    6806:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    6808:	d8 01       	movw	r26, r16
    680a:	ed 91       	ld	r30, X+
    680c:	fc 91       	ld	r31, X
    680e:	01 90       	ld	r0, Z+
    6810:	f0 81       	ld	r31, Z
    6812:	e0 2d       	mov	r30, r0
    6814:	c8 01       	movw	r24, r16
    6816:	6a e0       	ldi	r22, 0x0A	; 10
    6818:	09 95       	icall
    681a:	9c 01       	movw	r18, r24
    681c:	2e 0d       	add	r18, r14
    681e:	3f 1d       	adc	r19, r15
    6820:	c9 01       	movw	r24, r18
    6822:	1f 91       	pop	r17
    6824:	0f 91       	pop	r16
    6826:	ff 90       	pop	r15
    6828:	ef 90       	pop	r14
    682a:	08 95       	ret

0000682c <_ZN5Print7printlnEPK19__FlashStringHelper>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    682c:	ef 92       	push	r14
    682e:	ff 92       	push	r15
    6830:	0f 93       	push	r16
    6832:	1f 93       	push	r17
    6834:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
    6836:	0e 94 cb 33 	call	0x6796	; 0x6796 <_ZN5Print5printEPK19__FlashStringHelper>
    683a:	8c 01       	movw	r16, r24
  n += println();
    683c:	c7 01       	movw	r24, r14
    683e:	0e 94 f6 33 	call	0x67ec	; 0x67ec <_ZN5Print7printlnEv>
    6842:	9c 01       	movw	r18, r24
    6844:	20 0f       	add	r18, r16
    6846:	31 1f       	adc	r19, r17
  return n;
}
    6848:	c9 01       	movw	r24, r18
    684a:	1f 91       	pop	r17
    684c:	0f 91       	pop	r16
    684e:	ff 90       	pop	r15
    6850:	ef 90       	pop	r14
    6852:	08 95       	ret

00006854 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    6854:	cf 93       	push	r28
    6856:	df 93       	push	r29
    6858:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    685a:	61 15       	cp	r22, r1
    685c:	71 05       	cpc	r23, r1
    685e:	19 f4       	brne	.+6      	; 0x6866 <_ZN5Print5writeEPKc+0x12>
    6860:	20 e0       	ldi	r18, 0x00	; 0
    6862:	30 e0       	ldi	r19, 0x00	; 0
    6864:	0f c0       	rjmp	.+30     	; 0x6884 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
    6866:	db 01       	movw	r26, r22
    6868:	0d 90       	ld	r0, X+
    686a:	00 20       	and	r0, r0
    686c:	e9 f7       	brne	.-6      	; 0x6868 <_ZN5Print5writeEPKc+0x14>
    686e:	11 97       	sbiw	r26, 0x01	; 1
    6870:	a6 1b       	sub	r26, r22
    6872:	b7 0b       	sbc	r27, r23
    6874:	e8 81       	ld	r30, Y
    6876:	f9 81       	ldd	r31, Y+1	; 0x01
    6878:	02 80       	ldd	r0, Z+2	; 0x02
    687a:	f3 81       	ldd	r31, Z+3	; 0x03
    687c:	e0 2d       	mov	r30, r0
    687e:	ad 01       	movw	r20, r26
    6880:	09 95       	icall
    6882:	9c 01       	movw	r18, r24
    }
    6884:	c9 01       	movw	r24, r18
    6886:	df 91       	pop	r29
    6888:	cf 91       	pop	r28
    688a:	08 95       	ret

0000688c <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    688c:	4f 92       	push	r4
    688e:	5f 92       	push	r5
    6890:	7f 92       	push	r7
    6892:	8f 92       	push	r8
    6894:	9f 92       	push	r9
    6896:	af 92       	push	r10
    6898:	bf 92       	push	r11
    689a:	cf 92       	push	r12
    689c:	df 92       	push	r13
    689e:	ef 92       	push	r14
    68a0:	ff 92       	push	r15
    68a2:	0f 93       	push	r16
    68a4:	1f 93       	push	r17
    68a6:	df 93       	push	r29
    68a8:	cf 93       	push	r28
    68aa:	cd b7       	in	r28, 0x3d	; 61
    68ac:	de b7       	in	r29, 0x3e	; 62
    68ae:	a1 97       	sbiw	r28, 0x21	; 33
    68b0:	0f b6       	in	r0, 0x3f	; 63
    68b2:	f8 94       	cli
    68b4:	de bf       	out	0x3e, r29	; 62
    68b6:	0f be       	out	0x3f, r0	; 63
    68b8:	cd bf       	out	0x3d, r28	; 61
    68ba:	2c 01       	movw	r4, r24
    68bc:	74 2e       	mov	r7, r20
    68be:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    68c0:	22 30       	cpi	r18, 0x02	; 2
    68c2:	08 f4       	brcc	.+2      	; 0x68c6 <_ZN5Print11printNumberEmh+0x3a>
    68c4:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    68c6:	19 a2       	std	Y+33, r1	; 0x21
    68c8:	31 e2       	ldi	r19, 0x21	; 33
    68ca:	c3 2e       	mov	r12, r19
    68cc:	d1 2c       	mov	r13, r1
    68ce:	cc 0e       	add	r12, r28
    68d0:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    68d2:	82 2e       	mov	r8, r18
    68d4:	99 24       	eor	r9, r9
    68d6:	aa 24       	eor	r10, r10
    68d8:	bb 24       	eor	r11, r11
    68da:	67 2d       	mov	r22, r7
    68dc:	75 2f       	mov	r23, r21
    68de:	a5 01       	movw	r20, r10
    68e0:	94 01       	movw	r18, r8
    68e2:	0e 94 f5 37 	call	0x6fea	; 0x6fea <__udivmodsi4>
    68e6:	79 01       	movw	r14, r18
    68e8:	8a 01       	movw	r16, r20
    char c = m - base * n;
    68ea:	c8 01       	movw	r24, r16
    68ec:	b7 01       	movw	r22, r14
    68ee:	a5 01       	movw	r20, r10
    68f0:	94 01       	movw	r18, r8
    68f2:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__mulsi3>
    68f6:	47 2d       	mov	r20, r7
    68f8:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    68fa:	08 94       	sec
    68fc:	c1 08       	sbc	r12, r1
    68fe:	d1 08       	sbc	r13, r1
    6900:	4a 30       	cpi	r20, 0x0A	; 10
    6902:	14 f4       	brge	.+4      	; 0x6908 <_ZN5Print11printNumberEmh+0x7c>
    6904:	40 5d       	subi	r20, 0xD0	; 208
    6906:	01 c0       	rjmp	.+2      	; 0x690a <_ZN5Print11printNumberEmh+0x7e>
    6908:	49 5c       	subi	r20, 0xC9	; 201
    690a:	f6 01       	movw	r30, r12
    690c:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    690e:	e1 14       	cp	r14, r1
    6910:	f1 04       	cpc	r15, r1
    6912:	01 05       	cpc	r16, r1
    6914:	11 05       	cpc	r17, r1
    6916:	21 f0       	breq	.+8      	; 0x6920 <_ZN5Print11printNumberEmh+0x94>
    6918:	7e 2c       	mov	r7, r14
    691a:	5f 2d       	mov	r21, r15
    691c:	c8 01       	movw	r24, r16
    691e:	dd cf       	rjmp	.-70     	; 0x68da <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    6920:	c2 01       	movw	r24, r4
    6922:	b6 01       	movw	r22, r12
    6924:	0e 94 2a 34 	call	0x6854	; 0x6854 <_ZN5Print5writeEPKc>
}
    6928:	a1 96       	adiw	r28, 0x21	; 33
    692a:	0f b6       	in	r0, 0x3f	; 63
    692c:	f8 94       	cli
    692e:	de bf       	out	0x3e, r29	; 62
    6930:	0f be       	out	0x3f, r0	; 63
    6932:	cd bf       	out	0x3d, r28	; 61
    6934:	cf 91       	pop	r28
    6936:	df 91       	pop	r29
    6938:	1f 91       	pop	r17
    693a:	0f 91       	pop	r16
    693c:	ff 90       	pop	r15
    693e:	ef 90       	pop	r14
    6940:	df 90       	pop	r13
    6942:	cf 90       	pop	r12
    6944:	bf 90       	pop	r11
    6946:	af 90       	pop	r10
    6948:	9f 90       	pop	r9
    694a:	8f 90       	pop	r8
    694c:	7f 90       	pop	r7
    694e:	5f 90       	pop	r5
    6950:	4f 90       	pop	r4
    6952:	08 95       	ret

00006954 <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    6954:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    6956:	21 15       	cp	r18, r1
    6958:	31 05       	cpc	r19, r1
    695a:	41 f4       	brne	.+16     	; 0x696c <_ZN5Print5printEmi+0x18>
    695c:	ed 91       	ld	r30, X+
    695e:	fc 91       	ld	r31, X
    6960:	01 90       	ld	r0, Z+
    6962:	f0 81       	ld	r31, Z
    6964:	e0 2d       	mov	r30, r0
    6966:	64 2f       	mov	r22, r20
    6968:	09 95       	icall
    696a:	08 95       	ret
  else return printNumber(n, base);
    696c:	0e 94 46 34 	call	0x688c	; 0x688c <_ZN5Print11printNumberEmh>
}
    6970:	08 95       	ret

00006972 <_ZN5Print5printEhi>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    6972:	ef 92       	push	r14
    6974:	ff 92       	push	r15
    6976:	0f 93       	push	r16
    6978:	1f 93       	push	r17
    697a:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    697c:	e6 2e       	mov	r14, r22
    697e:	ff 24       	eor	r15, r15
    6980:	00 e0       	ldi	r16, 0x00	; 0
    6982:	10 e0       	ldi	r17, 0x00	; 0
    6984:	b8 01       	movw	r22, r16
    6986:	a7 01       	movw	r20, r14
    6988:	0e 94 aa 34 	call	0x6954	; 0x6954 <_ZN5Print5printEmi>
}
    698c:	1f 91       	pop	r17
    698e:	0f 91       	pop	r16
    6990:	ff 90       	pop	r15
    6992:	ef 90       	pop	r14
    6994:	08 95       	ret

00006996 <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    6996:	cf 92       	push	r12
    6998:	df 92       	push	r13
    699a:	ef 92       	push	r14
    699c:	ff 92       	push	r15
    699e:	0f 93       	push	r16
    69a0:	1f 93       	push	r17
    69a2:	cf 93       	push	r28
    69a4:	df 93       	push	r29
    69a6:	ec 01       	movw	r28, r24
    69a8:	6a 01       	movw	r12, r20
    69aa:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    69ac:	21 15       	cp	r18, r1
    69ae:	31 05       	cpc	r19, r1
    69b0:	41 f4       	brne	.+16     	; 0x69c2 <_ZN5Print5printEli+0x2c>
    return write(n);
    69b2:	e8 81       	ld	r30, Y
    69b4:	f9 81       	ldd	r31, Y+1	; 0x01
    69b6:	01 90       	ld	r0, Z+
    69b8:	f0 81       	ld	r31, Z
    69ba:	e0 2d       	mov	r30, r0
    69bc:	64 2f       	mov	r22, r20
    69be:	09 95       	icall
    69c0:	1f c0       	rjmp	.+62     	; 0x6a00 <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
    69c2:	2a 30       	cpi	r18, 0x0A	; 10
    69c4:	31 05       	cpc	r19, r1
    69c6:	d1 f4       	brne	.+52     	; 0x69fc <_ZN5Print5printEli+0x66>
    if (n < 0) {
    69c8:	77 ff       	sbrs	r23, 7
    69ca:	17 c0       	rjmp	.+46     	; 0x69fa <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    69cc:	e8 81       	ld	r30, Y
    69ce:	f9 81       	ldd	r31, Y+1	; 0x01
    69d0:	01 90       	ld	r0, Z+
    69d2:	f0 81       	ld	r31, Z
    69d4:	e0 2d       	mov	r30, r0
    69d6:	6d e2       	ldi	r22, 0x2D	; 45
    69d8:	09 95       	icall
    69da:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    69dc:	44 27       	eor	r20, r20
    69de:	55 27       	eor	r21, r21
    69e0:	ba 01       	movw	r22, r20
    69e2:	4c 19       	sub	r20, r12
    69e4:	5d 09       	sbc	r21, r13
    69e6:	6e 09       	sbc	r22, r14
    69e8:	7f 09       	sbc	r23, r15
    69ea:	ce 01       	movw	r24, r28
    69ec:	2a e0       	ldi	r18, 0x0A	; 10
    69ee:	0e 94 46 34 	call	0x688c	; 0x688c <_ZN5Print11printNumberEmh>
    69f2:	98 01       	movw	r18, r16
    69f4:	28 0f       	add	r18, r24
    69f6:	39 1f       	adc	r19, r25
    69f8:	04 c0       	rjmp	.+8      	; 0x6a02 <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
    69fa:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    69fc:	0e 94 46 34 	call	0x688c	; 0x688c <_ZN5Print11printNumberEmh>
    6a00:	9c 01       	movw	r18, r24
  }
}
    6a02:	c9 01       	movw	r24, r18
    6a04:	df 91       	pop	r29
    6a06:	cf 91       	pop	r28
    6a08:	1f 91       	pop	r17
    6a0a:	0f 91       	pop	r16
    6a0c:	ff 90       	pop	r15
    6a0e:	ef 90       	pop	r14
    6a10:	df 90       	pop	r13
    6a12:	cf 90       	pop	r12
    6a14:	08 95       	ret

00006a16 <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    6a16:	ef 92       	push	r14
    6a18:	ff 92       	push	r15
    6a1a:	0f 93       	push	r16
    6a1c:	1f 93       	push	r17
    6a1e:	7b 01       	movw	r14, r22
    6a20:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    6a22:	00 27       	eor	r16, r16
    6a24:	f7 fc       	sbrc	r15, 7
    6a26:	00 95       	com	r16
    6a28:	10 2f       	mov	r17, r16
    6a2a:	b8 01       	movw	r22, r16
    6a2c:	a7 01       	movw	r20, r14
    6a2e:	0e 94 cb 34 	call	0x6996	; 0x6996 <_ZN5Print5printEli>
}
    6a32:	1f 91       	pop	r17
    6a34:	0f 91       	pop	r16
    6a36:	ff 90       	pop	r15
    6a38:	ef 90       	pop	r14
    6a3a:	08 95       	ret

00006a3c <_ZN5Print7printlnEii>:
  size_t n = print(b, base);
  n += println();
  return n;
}

size_t Print::println(int num, int base)
    6a3c:	cf 92       	push	r12
    6a3e:	df 92       	push	r13
    6a40:	ef 92       	push	r14
    6a42:	ff 92       	push	r15
    6a44:	0f 93       	push	r16
    6a46:	1f 93       	push	r17
    6a48:	6c 01       	movw	r12, r24
    6a4a:	7b 01       	movw	r14, r22
    6a4c:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    6a4e:	00 27       	eor	r16, r16
    6a50:	f7 fc       	sbrc	r15, 7
    6a52:	00 95       	com	r16
    6a54:	10 2f       	mov	r17, r16
    6a56:	b8 01       	movw	r22, r16
    6a58:	a7 01       	movw	r20, r14
    6a5a:	0e 94 cb 34 	call	0x6996	; 0x6996 <_ZN5Print5printEli>
    6a5e:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
    6a60:	c6 01       	movw	r24, r12
    6a62:	0e 94 f6 33 	call	0x67ec	; 0x67ec <_ZN5Print7printlnEv>
    6a66:	08 0f       	add	r16, r24
    6a68:	19 1f       	adc	r17, r25
  return n;
}
    6a6a:	c8 01       	movw	r24, r16
    6a6c:	1f 91       	pop	r17
    6a6e:	0f 91       	pop	r16
    6a70:	ff 90       	pop	r15
    6a72:	ef 90       	pop	r14
    6a74:	df 90       	pop	r13
    6a76:	cf 90       	pop	r12
    6a78:	08 95       	ret

00006a7a <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    6a7a:	0e 94 2a 34 	call	0x6854	; 0x6854 <_ZN5Print5writeEPKc>
}
    6a7e:	08 95       	ret

00006a80 <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    6a80:	ef 92       	push	r14
    6a82:	ff 92       	push	r15
    6a84:	0f 93       	push	r16
    6a86:	1f 93       	push	r17
    6a88:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    6a8a:	0e 94 2a 34 	call	0x6854	; 0x6854 <_ZN5Print5writeEPKc>
    6a8e:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    6a90:	c7 01       	movw	r24, r14
    6a92:	0e 94 f6 33 	call	0x67ec	; 0x67ec <_ZN5Print7printlnEv>
    6a96:	08 0f       	add	r16, r24
    6a98:	19 1f       	adc	r17, r25
  return n;
}
    6a9a:	c8 01       	movw	r24, r16
    6a9c:	1f 91       	pop	r17
    6a9e:	0f 91       	pop	r16
    6aa0:	ff 90       	pop	r15
    6aa2:	ef 90       	pop	r14
    6aa4:	08 95       	ret

00006aa6 <attachInterrupt>:

static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    6aa6:	82 30       	cpi	r24, 0x02	; 2
    6aa8:	00 f5       	brcc	.+64     	; 0x6aea <attachInterrupt+0x44>
    intFunc[interruptNum] = userFunc;
    6aaa:	e8 2f       	mov	r30, r24
    6aac:	f0 e0       	ldi	r31, 0x00	; 0
    6aae:	ee 0f       	add	r30, r30
    6ab0:	ff 1f       	adc	r31, r31
    6ab2:	e3 55       	subi	r30, 0x53	; 83
    6ab4:	f9 4f       	sbci	r31, 0xF9	; 249
    6ab6:	71 83       	std	Z+1, r23	; 0x01
    6ab8:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    6aba:	88 23       	and	r24, r24
    6abc:	19 f0       	breq	.+6      	; 0x6ac4 <attachInterrupt+0x1e>
    6abe:	81 30       	cpi	r24, 0x01	; 1
    6ac0:	a1 f4       	brne	.+40     	; 0x6aea <attachInterrupt+0x44>
    6ac2:	08 c0       	rjmp	.+16     	; 0x6ad4 <attachInterrupt+0x2e>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    6ac4:	80 91 69 00 	lds	r24, 0x0069
    6ac8:	8c 7f       	andi	r24, 0xFC	; 252
    6aca:	84 2b       	or	r24, r20
    6acc:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT0);
    6ad0:	e8 9a       	sbi	0x1d, 0	; 29
    6ad2:	08 95       	ret
    #endif
      break;

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    6ad4:	80 91 69 00 	lds	r24, 0x0069
    6ad8:	44 0f       	add	r20, r20
    6ada:	55 1f       	adc	r21, r21
    6adc:	44 0f       	add	r20, r20
    6ade:	55 1f       	adc	r21, r21
    6ae0:	83 7f       	andi	r24, 0xF3	; 243
    6ae2:	84 2b       	or	r24, r20
    6ae4:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT1);
    6ae8:	e9 9a       	sbi	0x1d, 1	; 29
    6aea:	08 95       	ret

00006aec <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    6aec:	82 30       	cpi	r24, 0x02	; 2
    6aee:	80 f4       	brcc	.+32     	; 0x6b10 <detachInterrupt+0x24>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    6af0:	88 23       	and	r24, r24
    6af2:	19 f0       	breq	.+6      	; 0x6afa <detachInterrupt+0xe>
    6af4:	81 30       	cpi	r24, 0x01	; 1
    6af6:	21 f4       	brne	.+8      	; 0x6b00 <detachInterrupt+0x14>
    6af8:	02 c0       	rjmp	.+4      	; 0x6afe <detachInterrupt+0x12>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
    6afa:	e8 98       	cbi	0x1d, 0	; 29
    6afc:	01 c0       	rjmp	.+2      	; 0x6b00 <detachInterrupt+0x14>
    #endif
      break;

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
    6afe:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;
#endif
    }
      
    intFunc[interruptNum] = 0;
    6b00:	e8 2f       	mov	r30, r24
    6b02:	f0 e0       	ldi	r31, 0x00	; 0
    6b04:	ee 0f       	add	r30, r30
    6b06:	ff 1f       	adc	r31, r31
    6b08:	e3 55       	subi	r30, 0x53	; 83
    6b0a:	f9 4f       	sbci	r31, 0xF9	; 249
    6b0c:	11 82       	std	Z+1, r1	; 0x01
    6b0e:	10 82       	st	Z, r1
    6b10:	08 95       	ret

00006b12 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
    6b12:	1f 92       	push	r1
    6b14:	0f 92       	push	r0
    6b16:	0f b6       	in	r0, 0x3f	; 63
    6b18:	0f 92       	push	r0
    6b1a:	11 24       	eor	r1, r1
    6b1c:	2f 93       	push	r18
    6b1e:	3f 93       	push	r19
    6b20:	4f 93       	push	r20
    6b22:	5f 93       	push	r21
    6b24:	6f 93       	push	r22
    6b26:	7f 93       	push	r23
    6b28:	8f 93       	push	r24
    6b2a:	9f 93       	push	r25
    6b2c:	af 93       	push	r26
    6b2e:	bf 93       	push	r27
    6b30:	ef 93       	push	r30
    6b32:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    6b34:	80 91 ad 06 	lds	r24, 0x06AD
    6b38:	90 91 ae 06 	lds	r25, 0x06AE
    6b3c:	89 2b       	or	r24, r25
    6b3e:	29 f0       	breq	.+10     	; 0x6b4a <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
    6b40:	e0 91 ad 06 	lds	r30, 0x06AD
    6b44:	f0 91 ae 06 	lds	r31, 0x06AE
    6b48:	09 95       	icall
}
    6b4a:	ff 91       	pop	r31
    6b4c:	ef 91       	pop	r30
    6b4e:	bf 91       	pop	r27
    6b50:	af 91       	pop	r26
    6b52:	9f 91       	pop	r25
    6b54:	8f 91       	pop	r24
    6b56:	7f 91       	pop	r23
    6b58:	6f 91       	pop	r22
    6b5a:	5f 91       	pop	r21
    6b5c:	4f 91       	pop	r20
    6b5e:	3f 91       	pop	r19
    6b60:	2f 91       	pop	r18
    6b62:	0f 90       	pop	r0
    6b64:	0f be       	out	0x3f, r0	; 63
    6b66:	0f 90       	pop	r0
    6b68:	1f 90       	pop	r1
    6b6a:	18 95       	reti

00006b6c <__vector_2>:

ISR(INT1_vect) {
    6b6c:	1f 92       	push	r1
    6b6e:	0f 92       	push	r0
    6b70:	0f b6       	in	r0, 0x3f	; 63
    6b72:	0f 92       	push	r0
    6b74:	11 24       	eor	r1, r1
    6b76:	2f 93       	push	r18
    6b78:	3f 93       	push	r19
    6b7a:	4f 93       	push	r20
    6b7c:	5f 93       	push	r21
    6b7e:	6f 93       	push	r22
    6b80:	7f 93       	push	r23
    6b82:	8f 93       	push	r24
    6b84:	9f 93       	push	r25
    6b86:	af 93       	push	r26
    6b88:	bf 93       	push	r27
    6b8a:	ef 93       	push	r30
    6b8c:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    6b8e:	80 91 af 06 	lds	r24, 0x06AF
    6b92:	90 91 b0 06 	lds	r25, 0x06B0
    6b96:	89 2b       	or	r24, r25
    6b98:	29 f0       	breq	.+10     	; 0x6ba4 <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
    6b9a:	e0 91 af 06 	lds	r30, 0x06AF
    6b9e:	f0 91 b0 06 	lds	r31, 0x06B0
    6ba2:	09 95       	icall
}
    6ba4:	ff 91       	pop	r31
    6ba6:	ef 91       	pop	r30
    6ba8:	bf 91       	pop	r27
    6baa:	af 91       	pop	r26
    6bac:	9f 91       	pop	r25
    6bae:	8f 91       	pop	r24
    6bb0:	7f 91       	pop	r23
    6bb2:	6f 91       	pop	r22
    6bb4:	5f 91       	pop	r21
    6bb6:	4f 91       	pop	r20
    6bb8:	3f 91       	pop	r19
    6bba:	2f 91       	pop	r18
    6bbc:	0f 90       	pop	r0
    6bbe:	0f be       	out	0x3f, r0	; 63
    6bc0:	0f 90       	pop	r0
    6bc2:	1f 90       	pop	r1
    6bc4:	18 95       	reti

00006bc6 <main>:
#include <Arduino.h>

int main(void)
    6bc6:	cf 93       	push	r28
    6bc8:	df 93       	push	r29
{
	init();
    6bca:	0e 94 a1 36 	call	0x6d42	; 0x6d42 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    6bce:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    6bd2:	c9 e5       	ldi	r28, 0x59	; 89
    6bd4:	d1 e3       	ldi	r29, 0x31	; 49
#endif
	
	setup();
    
	for (;;) {
		loop();
    6bd6:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <loop>
		if (serialEventRun) serialEventRun();
    6bda:	20 97       	sbiw	r28, 0x00	; 0
    6bdc:	e1 f3       	breq	.-8      	; 0x6bd6 <main+0x10>
    6bde:	0e 94 59 31 	call	0x62b2	; 0x62b2 <_Z14serialEventRunv>
    6be2:	f9 cf       	rjmp	.-14     	; 0x6bd6 <main+0x10>

00006be4 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    6be4:	1f 92       	push	r1
    6be6:	0f 92       	push	r0
    6be8:	0f b6       	in	r0, 0x3f	; 63
    6bea:	0f 92       	push	r0
    6bec:	11 24       	eor	r1, r1
    6bee:	2f 93       	push	r18
    6bf0:	3f 93       	push	r19
    6bf2:	8f 93       	push	r24
    6bf4:	9f 93       	push	r25
    6bf6:	af 93       	push	r26
    6bf8:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    6bfa:	80 91 b5 06 	lds	r24, 0x06B5
    6bfe:	90 91 b6 06 	lds	r25, 0x06B6
    6c02:	a0 91 b7 06 	lds	r26, 0x06B7
    6c06:	b0 91 b8 06 	lds	r27, 0x06B8
	unsigned char f = timer0_fract;
    6c0a:	30 91 b9 06 	lds	r19, 0x06B9

	m += MILLIS_INC;
    6c0e:	01 96       	adiw	r24, 0x01	; 1
    6c10:	a1 1d       	adc	r26, r1
    6c12:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    6c14:	23 2f       	mov	r18, r19
    6c16:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    6c18:	2d 37       	cpi	r18, 0x7D	; 125
    6c1a:	20 f0       	brcs	.+8      	; 0x6c24 <__vector_16+0x40>
		f -= FRACT_MAX;
    6c1c:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    6c1e:	01 96       	adiw	r24, 0x01	; 1
    6c20:	a1 1d       	adc	r26, r1
    6c22:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    6c24:	20 93 b9 06 	sts	0x06B9, r18
	timer0_millis = m;
    6c28:	80 93 b5 06 	sts	0x06B5, r24
    6c2c:	90 93 b6 06 	sts	0x06B6, r25
    6c30:	a0 93 b7 06 	sts	0x06B7, r26
    6c34:	b0 93 b8 06 	sts	0x06B8, r27
	timer0_overflow_count++;
    6c38:	80 91 b1 06 	lds	r24, 0x06B1
    6c3c:	90 91 b2 06 	lds	r25, 0x06B2
    6c40:	a0 91 b3 06 	lds	r26, 0x06B3
    6c44:	b0 91 b4 06 	lds	r27, 0x06B4
    6c48:	01 96       	adiw	r24, 0x01	; 1
    6c4a:	a1 1d       	adc	r26, r1
    6c4c:	b1 1d       	adc	r27, r1
    6c4e:	80 93 b1 06 	sts	0x06B1, r24
    6c52:	90 93 b2 06 	sts	0x06B2, r25
    6c56:	a0 93 b3 06 	sts	0x06B3, r26
    6c5a:	b0 93 b4 06 	sts	0x06B4, r27
}
    6c5e:	bf 91       	pop	r27
    6c60:	af 91       	pop	r26
    6c62:	9f 91       	pop	r25
    6c64:	8f 91       	pop	r24
    6c66:	3f 91       	pop	r19
    6c68:	2f 91       	pop	r18
    6c6a:	0f 90       	pop	r0
    6c6c:	0f be       	out	0x3f, r0	; 63
    6c6e:	0f 90       	pop	r0
    6c70:	1f 90       	pop	r1
    6c72:	18 95       	reti

00006c74 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    6c74:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    6c76:	f8 94       	cli
	m = timer0_millis;
    6c78:	20 91 b5 06 	lds	r18, 0x06B5
    6c7c:	30 91 b6 06 	lds	r19, 0x06B6
    6c80:	40 91 b7 06 	lds	r20, 0x06B7
    6c84:	50 91 b8 06 	lds	r21, 0x06B8
	SREG = oldSREG;
    6c88:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    6c8a:	b9 01       	movw	r22, r18
    6c8c:	ca 01       	movw	r24, r20
    6c8e:	08 95       	ret

00006c90 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    6c90:	9b 01       	movw	r18, r22
    6c92:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    6c94:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    6c96:	f8 94       	cli
	m = timer0_overflow_count;
    6c98:	80 91 b1 06 	lds	r24, 0x06B1
    6c9c:	90 91 b2 06 	lds	r25, 0x06B2
    6ca0:	a0 91 b3 06 	lds	r26, 0x06B3
    6ca4:	b0 91 b4 06 	lds	r27, 0x06B4
#if defined(TCNT0)
	t = TCNT0;
    6ca8:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    6caa:	a8 9b       	sbis	0x15, 0	; 21
    6cac:	05 c0       	rjmp	.+10     	; 0x6cb8 <delay+0x28>
    6cae:	6f 3f       	cpi	r22, 0xFF	; 255
    6cb0:	19 f0       	breq	.+6      	; 0x6cb8 <delay+0x28>
		m++;
    6cb2:	01 96       	adiw	r24, 0x01	; 1
    6cb4:	a1 1d       	adc	r26, r1
    6cb6:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    6cb8:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    6cba:	ba 2f       	mov	r27, r26
    6cbc:	a9 2f       	mov	r26, r25
    6cbe:	98 2f       	mov	r25, r24
    6cc0:	88 27       	eor	r24, r24
    6cc2:	86 0f       	add	r24, r22
    6cc4:	91 1d       	adc	r25, r1
    6cc6:	a1 1d       	adc	r26, r1
    6cc8:	b1 1d       	adc	r27, r1
    6cca:	62 e0       	ldi	r22, 0x02	; 2
    6ccc:	88 0f       	add	r24, r24
    6cce:	99 1f       	adc	r25, r25
    6cd0:	aa 1f       	adc	r26, r26
    6cd2:	bb 1f       	adc	r27, r27
    6cd4:	6a 95       	dec	r22
    6cd6:	d1 f7       	brne	.-12     	; 0x6ccc <delay+0x3c>
    6cd8:	bc 01       	movw	r22, r24
    6cda:	2d c0       	rjmp	.+90     	; 0x6d36 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    6cdc:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    6cde:	f8 94       	cli
	m = timer0_overflow_count;
    6ce0:	80 91 b1 06 	lds	r24, 0x06B1
    6ce4:	90 91 b2 06 	lds	r25, 0x06B2
    6ce8:	a0 91 b3 06 	lds	r26, 0x06B3
    6cec:	b0 91 b4 06 	lds	r27, 0x06B4
#if defined(TCNT0)
	t = TCNT0;
    6cf0:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    6cf2:	a8 9b       	sbis	0x15, 0	; 21
    6cf4:	05 c0       	rjmp	.+10     	; 0x6d00 <delay+0x70>
    6cf6:	ef 3f       	cpi	r30, 0xFF	; 255
    6cf8:	19 f0       	breq	.+6      	; 0x6d00 <delay+0x70>
		m++;
    6cfa:	01 96       	adiw	r24, 0x01	; 1
    6cfc:	a1 1d       	adc	r26, r1
    6cfe:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    6d00:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    6d02:	ba 2f       	mov	r27, r26
    6d04:	a9 2f       	mov	r26, r25
    6d06:	98 2f       	mov	r25, r24
    6d08:	88 27       	eor	r24, r24
    6d0a:	8e 0f       	add	r24, r30
    6d0c:	91 1d       	adc	r25, r1
    6d0e:	a1 1d       	adc	r26, r1
    6d10:	b1 1d       	adc	r27, r1
    6d12:	e2 e0       	ldi	r30, 0x02	; 2
    6d14:	88 0f       	add	r24, r24
    6d16:	99 1f       	adc	r25, r25
    6d18:	aa 1f       	adc	r26, r26
    6d1a:	bb 1f       	adc	r27, r27
    6d1c:	ea 95       	dec	r30
    6d1e:	d1 f7       	brne	.-12     	; 0x6d14 <delay+0x84>
    6d20:	86 1b       	sub	r24, r22
    6d22:	97 0b       	sbc	r25, r23
    6d24:	88 5e       	subi	r24, 0xE8	; 232
    6d26:	93 40       	sbci	r25, 0x03	; 3
    6d28:	c8 f2       	brcs	.-78     	; 0x6cdc <delay+0x4c>
			ms--;
    6d2a:	21 50       	subi	r18, 0x01	; 1
    6d2c:	30 40       	sbci	r19, 0x00	; 0
    6d2e:	40 40       	sbci	r20, 0x00	; 0
    6d30:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    6d32:	68 51       	subi	r22, 0x18	; 24
    6d34:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    6d36:	21 15       	cp	r18, r1
    6d38:	31 05       	cpc	r19, r1
    6d3a:	41 05       	cpc	r20, r1
    6d3c:	51 05       	cpc	r21, r1
    6d3e:	71 f6       	brne	.-100    	; 0x6cdc <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    6d40:	08 95       	ret

00006d42 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    6d42:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    6d44:	84 b5       	in	r24, 0x24	; 36
    6d46:	82 60       	ori	r24, 0x02	; 2
    6d48:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    6d4a:	84 b5       	in	r24, 0x24	; 36
    6d4c:	81 60       	ori	r24, 0x01	; 1
    6d4e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    6d50:	85 b5       	in	r24, 0x25	; 37
    6d52:	82 60       	ori	r24, 0x02	; 2
    6d54:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    6d56:	85 b5       	in	r24, 0x25	; 37
    6d58:	81 60       	ori	r24, 0x01	; 1
    6d5a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    6d5c:	ee e6       	ldi	r30, 0x6E	; 110
    6d5e:	f0 e0       	ldi	r31, 0x00	; 0
    6d60:	80 81       	ld	r24, Z
    6d62:	81 60       	ori	r24, 0x01	; 1
    6d64:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    6d66:	e1 e8       	ldi	r30, 0x81	; 129
    6d68:	f0 e0       	ldi	r31, 0x00	; 0
    6d6a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    6d6c:	80 81       	ld	r24, Z
    6d6e:	82 60       	ori	r24, 0x02	; 2
    6d70:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    6d72:	80 81       	ld	r24, Z
    6d74:	81 60       	ori	r24, 0x01	; 1
    6d76:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    6d78:	e0 e8       	ldi	r30, 0x80	; 128
    6d7a:	f0 e0       	ldi	r31, 0x00	; 0
    6d7c:	80 81       	ld	r24, Z
    6d7e:	81 60       	ori	r24, 0x01	; 1
    6d80:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    6d82:	e1 eb       	ldi	r30, 0xB1	; 177
    6d84:	f0 e0       	ldi	r31, 0x00	; 0
    6d86:	80 81       	ld	r24, Z
    6d88:	84 60       	ori	r24, 0x04	; 4
    6d8a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    6d8c:	e0 eb       	ldi	r30, 0xB0	; 176
    6d8e:	f0 e0       	ldi	r31, 0x00	; 0
    6d90:	80 81       	ld	r24, Z
    6d92:	81 60       	ori	r24, 0x01	; 1
    6d94:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    6d96:	ea e7       	ldi	r30, 0x7A	; 122
    6d98:	f0 e0       	ldi	r31, 0x00	; 0
    6d9a:	80 81       	ld	r24, Z
    6d9c:	84 60       	ori	r24, 0x04	; 4
    6d9e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    6da0:	80 81       	ld	r24, Z
    6da2:	82 60       	ori	r24, 0x02	; 2
    6da4:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    6da6:	80 81       	ld	r24, Z
    6da8:	81 60       	ori	r24, 0x01	; 1
    6daa:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    6dac:	80 81       	ld	r24, Z
    6dae:	80 68       	ori	r24, 0x80	; 128
    6db0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    6db2:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    6db6:	08 95       	ret

00006db8 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    6db8:	cf 93       	push	r28
    6dba:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    6dbc:	48 2f       	mov	r20, r24
    6dbe:	50 e0       	ldi	r21, 0x00	; 0
    6dc0:	ca 01       	movw	r24, r20
    6dc2:	8e 5f       	subi	r24, 0xFE	; 254
    6dc4:	98 4f       	sbci	r25, 0xF8	; 248
    6dc6:	fc 01       	movw	r30, r24
    6dc8:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    6dca:	42 51       	subi	r20, 0x12	; 18
    6dcc:	59 4f       	sbci	r21, 0xF9	; 249
    6dce:	fa 01       	movw	r30, r20
    6dd0:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    6dd2:	88 23       	and	r24, r24
    6dd4:	69 f1       	breq	.+90     	; 0x6e30 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    6dd6:	90 e0       	ldi	r25, 0x00	; 0
    6dd8:	88 0f       	add	r24, r24
    6dda:	99 1f       	adc	r25, r25
    6ddc:	fc 01       	movw	r30, r24
    6dde:	e0 53       	subi	r30, 0x30	; 48
    6de0:	f9 4f       	sbci	r31, 0xF9	; 249
    6de2:	a5 91       	lpm	r26, Z+
    6de4:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    6de6:	fc 01       	movw	r30, r24
    6de8:	e6 52       	subi	r30, 0x26	; 38
    6dea:	f9 4f       	sbci	r31, 0xF9	; 249
    6dec:	c5 91       	lpm	r28, Z+
    6dee:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    6df0:	66 23       	and	r22, r22
    6df2:	51 f4       	brne	.+20     	; 0x6e08 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    6df4:	2f b7       	in	r18, 0x3f	; 63
                cli();
    6df6:	f8 94       	cli
		*reg &= ~bit;
    6df8:	8c 91       	ld	r24, X
    6dfa:	93 2f       	mov	r25, r19
    6dfc:	90 95       	com	r25
    6dfe:	89 23       	and	r24, r25
    6e00:	8c 93       	st	X, r24
		*out &= ~bit;
    6e02:	88 81       	ld	r24, Y
    6e04:	89 23       	and	r24, r25
    6e06:	0b c0       	rjmp	.+22     	; 0x6e1e <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    6e08:	62 30       	cpi	r22, 0x02	; 2
    6e0a:	61 f4       	brne	.+24     	; 0x6e24 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    6e0c:	2f b7       	in	r18, 0x3f	; 63
                cli();
    6e0e:	f8 94       	cli
		*reg &= ~bit;
    6e10:	8c 91       	ld	r24, X
    6e12:	93 2f       	mov	r25, r19
    6e14:	90 95       	com	r25
    6e16:	89 23       	and	r24, r25
    6e18:	8c 93       	st	X, r24
		*out |= bit;
    6e1a:	88 81       	ld	r24, Y
    6e1c:	83 2b       	or	r24, r19
    6e1e:	88 83       	st	Y, r24
		SREG = oldSREG;
    6e20:	2f bf       	out	0x3f, r18	; 63
    6e22:	06 c0       	rjmp	.+12     	; 0x6e30 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    6e24:	9f b7       	in	r25, 0x3f	; 63
                cli();
    6e26:	f8 94       	cli
		*reg |= bit;
    6e28:	8c 91       	ld	r24, X
    6e2a:	83 2b       	or	r24, r19
    6e2c:	8c 93       	st	X, r24
		SREG = oldSREG;
    6e2e:	9f bf       	out	0x3f, r25	; 63
	}
}
    6e30:	df 91       	pop	r29
    6e32:	cf 91       	pop	r28
    6e34:	08 95       	ret

00006e36 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    6e36:	48 2f       	mov	r20, r24
    6e38:	50 e0       	ldi	r21, 0x00	; 0
    6e3a:	ca 01       	movw	r24, r20
    6e3c:	8a 5e       	subi	r24, 0xEA	; 234
    6e3e:	98 4f       	sbci	r25, 0xF8	; 248
    6e40:	fc 01       	movw	r30, r24
    6e42:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    6e44:	ca 01       	movw	r24, r20
    6e46:	8e 5f       	subi	r24, 0xFE	; 254
    6e48:	98 4f       	sbci	r25, 0xF8	; 248
    6e4a:	fc 01       	movw	r30, r24
    6e4c:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    6e4e:	42 51       	subi	r20, 0x12	; 18
    6e50:	59 4f       	sbci	r21, 0xF9	; 249
    6e52:	fa 01       	movw	r30, r20
    6e54:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    6e56:	33 23       	and	r19, r19
    6e58:	09 f4       	brne	.+2      	; 0x6e5c <digitalWrite+0x26>
    6e5a:	40 c0       	rjmp	.+128    	; 0x6edc <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6e5c:	22 23       	and	r18, r18
    6e5e:	51 f1       	breq	.+84     	; 0x6eb4 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    6e60:	23 30       	cpi	r18, 0x03	; 3
    6e62:	71 f0       	breq	.+28     	; 0x6e80 <digitalWrite+0x4a>
    6e64:	24 30       	cpi	r18, 0x04	; 4
    6e66:	28 f4       	brcc	.+10     	; 0x6e72 <digitalWrite+0x3c>
    6e68:	21 30       	cpi	r18, 0x01	; 1
    6e6a:	a1 f0       	breq	.+40     	; 0x6e94 <digitalWrite+0x5e>
    6e6c:	22 30       	cpi	r18, 0x02	; 2
    6e6e:	11 f5       	brne	.+68     	; 0x6eb4 <digitalWrite+0x7e>
    6e70:	14 c0       	rjmp	.+40     	; 0x6e9a <digitalWrite+0x64>
    6e72:	26 30       	cpi	r18, 0x06	; 6
    6e74:	b1 f0       	breq	.+44     	; 0x6ea2 <digitalWrite+0x6c>
    6e76:	27 30       	cpi	r18, 0x07	; 7
    6e78:	c1 f0       	breq	.+48     	; 0x6eaa <digitalWrite+0x74>
    6e7a:	24 30       	cpi	r18, 0x04	; 4
    6e7c:	d9 f4       	brne	.+54     	; 0x6eb4 <digitalWrite+0x7e>
    6e7e:	04 c0       	rjmp	.+8      	; 0x6e88 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    6e80:	80 91 80 00 	lds	r24, 0x0080
    6e84:	8f 77       	andi	r24, 0x7F	; 127
    6e86:	03 c0       	rjmp	.+6      	; 0x6e8e <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    6e88:	80 91 80 00 	lds	r24, 0x0080
    6e8c:	8f 7d       	andi	r24, 0xDF	; 223
    6e8e:	80 93 80 00 	sts	0x0080, r24
    6e92:	10 c0       	rjmp	.+32     	; 0x6eb4 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    6e94:	84 b5       	in	r24, 0x24	; 36
    6e96:	8f 77       	andi	r24, 0x7F	; 127
    6e98:	02 c0       	rjmp	.+4      	; 0x6e9e <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    6e9a:	84 b5       	in	r24, 0x24	; 36
    6e9c:	8f 7d       	andi	r24, 0xDF	; 223
    6e9e:	84 bd       	out	0x24, r24	; 36
    6ea0:	09 c0       	rjmp	.+18     	; 0x6eb4 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    6ea2:	80 91 b0 00 	lds	r24, 0x00B0
    6ea6:	8f 77       	andi	r24, 0x7F	; 127
    6ea8:	03 c0       	rjmp	.+6      	; 0x6eb0 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    6eaa:	80 91 b0 00 	lds	r24, 0x00B0
    6eae:	8f 7d       	andi	r24, 0xDF	; 223
    6eb0:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    6eb4:	e3 2f       	mov	r30, r19
    6eb6:	f0 e0       	ldi	r31, 0x00	; 0
    6eb8:	ee 0f       	add	r30, r30
    6eba:	ff 1f       	adc	r31, r31
    6ebc:	e6 52       	subi	r30, 0x26	; 38
    6ebe:	f9 4f       	sbci	r31, 0xF9	; 249
    6ec0:	a5 91       	lpm	r26, Z+
    6ec2:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    6ec4:	2f b7       	in	r18, 0x3f	; 63
	cli();
    6ec6:	f8 94       	cli

	if (val == LOW) {
    6ec8:	66 23       	and	r22, r22
    6eca:	21 f4       	brne	.+8      	; 0x6ed4 <digitalWrite+0x9e>
		*out &= ~bit;
    6ecc:	8c 91       	ld	r24, X
    6ece:	90 95       	com	r25
    6ed0:	89 23       	and	r24, r25
    6ed2:	02 c0       	rjmp	.+4      	; 0x6ed8 <digitalWrite+0xa2>
	} else {
		*out |= bit;
    6ed4:	8c 91       	ld	r24, X
    6ed6:	89 2b       	or	r24, r25
    6ed8:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    6eda:	2f bf       	out	0x3f, r18	; 63
    6edc:	08 95       	ret

00006ede <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    6ede:	68 2f       	mov	r22, r24
    6ee0:	70 e0       	ldi	r23, 0x00	; 0
    6ee2:	cb 01       	movw	r24, r22
    6ee4:	8a 5e       	subi	r24, 0xEA	; 234
    6ee6:	98 4f       	sbci	r25, 0xF8	; 248
    6ee8:	fc 01       	movw	r30, r24
    6eea:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    6eec:	cb 01       	movw	r24, r22
    6eee:	8e 5f       	subi	r24, 0xFE	; 254
    6ef0:	98 4f       	sbci	r25, 0xF8	; 248
    6ef2:	fc 01       	movw	r30, r24
    6ef4:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    6ef6:	62 51       	subi	r22, 0x12	; 18
    6ef8:	79 4f       	sbci	r23, 0xF9	; 249
    6efa:	fb 01       	movw	r30, r22
    6efc:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
    6efe:	99 23       	and	r25, r25
    6f00:	19 f4       	brne	.+6      	; 0x6f08 <digitalRead+0x2a>
    6f02:	20 e0       	ldi	r18, 0x00	; 0
    6f04:	30 e0       	ldi	r19, 0x00	; 0
    6f06:	3c c0       	rjmp	.+120    	; 0x6f80 <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6f08:	22 23       	and	r18, r18
    6f0a:	51 f1       	breq	.+84     	; 0x6f60 <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    6f0c:	23 30       	cpi	r18, 0x03	; 3
    6f0e:	71 f0       	breq	.+28     	; 0x6f2c <digitalRead+0x4e>
    6f10:	24 30       	cpi	r18, 0x04	; 4
    6f12:	28 f4       	brcc	.+10     	; 0x6f1e <digitalRead+0x40>
    6f14:	21 30       	cpi	r18, 0x01	; 1
    6f16:	a1 f0       	breq	.+40     	; 0x6f40 <digitalRead+0x62>
    6f18:	22 30       	cpi	r18, 0x02	; 2
    6f1a:	11 f5       	brne	.+68     	; 0x6f60 <digitalRead+0x82>
    6f1c:	14 c0       	rjmp	.+40     	; 0x6f46 <digitalRead+0x68>
    6f1e:	26 30       	cpi	r18, 0x06	; 6
    6f20:	b1 f0       	breq	.+44     	; 0x6f4e <digitalRead+0x70>
    6f22:	27 30       	cpi	r18, 0x07	; 7
    6f24:	c1 f0       	breq	.+48     	; 0x6f56 <digitalRead+0x78>
    6f26:	24 30       	cpi	r18, 0x04	; 4
    6f28:	d9 f4       	brne	.+54     	; 0x6f60 <digitalRead+0x82>
    6f2a:	04 c0       	rjmp	.+8      	; 0x6f34 <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    6f2c:	80 91 80 00 	lds	r24, 0x0080
    6f30:	8f 77       	andi	r24, 0x7F	; 127
    6f32:	03 c0       	rjmp	.+6      	; 0x6f3a <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    6f34:	80 91 80 00 	lds	r24, 0x0080
    6f38:	8f 7d       	andi	r24, 0xDF	; 223
    6f3a:	80 93 80 00 	sts	0x0080, r24
    6f3e:	10 c0       	rjmp	.+32     	; 0x6f60 <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    6f40:	84 b5       	in	r24, 0x24	; 36
    6f42:	8f 77       	andi	r24, 0x7F	; 127
    6f44:	02 c0       	rjmp	.+4      	; 0x6f4a <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    6f46:	84 b5       	in	r24, 0x24	; 36
    6f48:	8f 7d       	andi	r24, 0xDF	; 223
    6f4a:	84 bd       	out	0x24, r24	; 36
    6f4c:	09 c0       	rjmp	.+18     	; 0x6f60 <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    6f4e:	80 91 b0 00 	lds	r24, 0x00B0
    6f52:	8f 77       	andi	r24, 0x7F	; 127
    6f54:	03 c0       	rjmp	.+6      	; 0x6f5c <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    6f56:	80 91 b0 00 	lds	r24, 0x00B0
    6f5a:	8f 7d       	andi	r24, 0xDF	; 223
    6f5c:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    6f60:	89 2f       	mov	r24, r25
    6f62:	90 e0       	ldi	r25, 0x00	; 0
    6f64:	88 0f       	add	r24, r24
    6f66:	99 1f       	adc	r25, r25
    6f68:	8c 51       	subi	r24, 0x1C	; 28
    6f6a:	99 4f       	sbci	r25, 0xF9	; 249
    6f6c:	fc 01       	movw	r30, r24
    6f6e:	a5 91       	lpm	r26, Z+
    6f70:	b4 91       	lpm	r27, Z+
    6f72:	8c 91       	ld	r24, X
    6f74:	20 e0       	ldi	r18, 0x00	; 0
    6f76:	30 e0       	ldi	r19, 0x00	; 0
    6f78:	84 23       	and	r24, r20
    6f7a:	11 f0       	breq	.+4      	; 0x6f80 <digitalRead+0xa2>
    6f7c:	21 e0       	ldi	r18, 0x01	; 1
    6f7e:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    6f80:	c9 01       	movw	r24, r18
    6f82:	08 95       	ret

00006f84 <__mulsi3>:
    6f84:	62 9f       	mul	r22, r18
    6f86:	d0 01       	movw	r26, r0
    6f88:	73 9f       	mul	r23, r19
    6f8a:	f0 01       	movw	r30, r0
    6f8c:	82 9f       	mul	r24, r18
    6f8e:	e0 0d       	add	r30, r0
    6f90:	f1 1d       	adc	r31, r1
    6f92:	64 9f       	mul	r22, r20
    6f94:	e0 0d       	add	r30, r0
    6f96:	f1 1d       	adc	r31, r1
    6f98:	92 9f       	mul	r25, r18
    6f9a:	f0 0d       	add	r31, r0
    6f9c:	83 9f       	mul	r24, r19
    6f9e:	f0 0d       	add	r31, r0
    6fa0:	74 9f       	mul	r23, r20
    6fa2:	f0 0d       	add	r31, r0
    6fa4:	65 9f       	mul	r22, r21
    6fa6:	f0 0d       	add	r31, r0
    6fa8:	99 27       	eor	r25, r25
    6faa:	72 9f       	mul	r23, r18
    6fac:	b0 0d       	add	r27, r0
    6fae:	e1 1d       	adc	r30, r1
    6fb0:	f9 1f       	adc	r31, r25
    6fb2:	63 9f       	mul	r22, r19
    6fb4:	b0 0d       	add	r27, r0
    6fb6:	e1 1d       	adc	r30, r1
    6fb8:	f9 1f       	adc	r31, r25
    6fba:	bd 01       	movw	r22, r26
    6fbc:	cf 01       	movw	r24, r30
    6fbe:	11 24       	eor	r1, r1
    6fc0:	08 95       	ret

00006fc2 <__udivmodhi4>:
    6fc2:	aa 1b       	sub	r26, r26
    6fc4:	bb 1b       	sub	r27, r27
    6fc6:	51 e1       	ldi	r21, 0x11	; 17
    6fc8:	07 c0       	rjmp	.+14     	; 0x6fd8 <__udivmodhi4_ep>

00006fca <__udivmodhi4_loop>:
    6fca:	aa 1f       	adc	r26, r26
    6fcc:	bb 1f       	adc	r27, r27
    6fce:	a6 17       	cp	r26, r22
    6fd0:	b7 07       	cpc	r27, r23
    6fd2:	10 f0       	brcs	.+4      	; 0x6fd8 <__udivmodhi4_ep>
    6fd4:	a6 1b       	sub	r26, r22
    6fd6:	b7 0b       	sbc	r27, r23

00006fd8 <__udivmodhi4_ep>:
    6fd8:	88 1f       	adc	r24, r24
    6fda:	99 1f       	adc	r25, r25
    6fdc:	5a 95       	dec	r21
    6fde:	a9 f7       	brne	.-22     	; 0x6fca <__udivmodhi4_loop>
    6fe0:	80 95       	com	r24
    6fe2:	90 95       	com	r25
    6fe4:	bc 01       	movw	r22, r24
    6fe6:	cd 01       	movw	r24, r26
    6fe8:	08 95       	ret

00006fea <__udivmodsi4>:
    6fea:	a1 e2       	ldi	r26, 0x21	; 33
    6fec:	1a 2e       	mov	r1, r26
    6fee:	aa 1b       	sub	r26, r26
    6ff0:	bb 1b       	sub	r27, r27
    6ff2:	fd 01       	movw	r30, r26
    6ff4:	0d c0       	rjmp	.+26     	; 0x7010 <__udivmodsi4_ep>

00006ff6 <__udivmodsi4_loop>:
    6ff6:	aa 1f       	adc	r26, r26
    6ff8:	bb 1f       	adc	r27, r27
    6ffa:	ee 1f       	adc	r30, r30
    6ffc:	ff 1f       	adc	r31, r31
    6ffe:	a2 17       	cp	r26, r18
    7000:	b3 07       	cpc	r27, r19
    7002:	e4 07       	cpc	r30, r20
    7004:	f5 07       	cpc	r31, r21
    7006:	20 f0       	brcs	.+8      	; 0x7010 <__udivmodsi4_ep>
    7008:	a2 1b       	sub	r26, r18
    700a:	b3 0b       	sbc	r27, r19
    700c:	e4 0b       	sbc	r30, r20
    700e:	f5 0b       	sbc	r31, r21

00007010 <__udivmodsi4_ep>:
    7010:	66 1f       	adc	r22, r22
    7012:	77 1f       	adc	r23, r23
    7014:	88 1f       	adc	r24, r24
    7016:	99 1f       	adc	r25, r25
    7018:	1a 94       	dec	r1
    701a:	69 f7       	brne	.-38     	; 0x6ff6 <__udivmodsi4_loop>
    701c:	60 95       	com	r22
    701e:	70 95       	com	r23
    7020:	80 95       	com	r24
    7022:	90 95       	com	r25
    7024:	9b 01       	movw	r18, r22
    7026:	ac 01       	movw	r20, r24
    7028:	bd 01       	movw	r22, r26
    702a:	cf 01       	movw	r24, r30
    702c:	08 95       	ret

0000702e <__divmodsi4>:
    702e:	97 fb       	bst	r25, 7
    7030:	09 2e       	mov	r0, r25
    7032:	05 26       	eor	r0, r21
    7034:	0e d0       	rcall	.+28     	; 0x7052 <__divmodsi4_neg1>
    7036:	57 fd       	sbrc	r21, 7
    7038:	04 d0       	rcall	.+8      	; 0x7042 <__divmodsi4_neg2>
    703a:	d7 df       	rcall	.-82     	; 0x6fea <__udivmodsi4>
    703c:	0a d0       	rcall	.+20     	; 0x7052 <__divmodsi4_neg1>
    703e:	00 1c       	adc	r0, r0
    7040:	38 f4       	brcc	.+14     	; 0x7050 <__divmodsi4_exit>

00007042 <__divmodsi4_neg2>:
    7042:	50 95       	com	r21
    7044:	40 95       	com	r20
    7046:	30 95       	com	r19
    7048:	21 95       	neg	r18
    704a:	3f 4f       	sbci	r19, 0xFF	; 255
    704c:	4f 4f       	sbci	r20, 0xFF	; 255
    704e:	5f 4f       	sbci	r21, 0xFF	; 255

00007050 <__divmodsi4_exit>:
    7050:	08 95       	ret

00007052 <__divmodsi4_neg1>:
    7052:	f6 f7       	brtc	.-4      	; 0x7050 <__divmodsi4_exit>
    7054:	90 95       	com	r25
    7056:	80 95       	com	r24
    7058:	70 95       	com	r23
    705a:	61 95       	neg	r22
    705c:	7f 4f       	sbci	r23, 0xFF	; 255
    705e:	8f 4f       	sbci	r24, 0xFF	; 255
    7060:	9f 4f       	sbci	r25, 0xFF	; 255
    7062:	08 95       	ret

00007064 <__tablejump2__>:
    7064:	ee 0f       	add	r30, r30
    7066:	ff 1f       	adc	r31, r31

00007068 <__tablejump__>:
    7068:	05 90       	lpm	r0, Z+
    706a:	f4 91       	lpm	r31, Z+
    706c:	e0 2d       	mov	r30, r0
    706e:	09 94       	ijmp

00007070 <__ctype_isfalse>:
    7070:	99 27       	eor	r25, r25
    7072:	88 27       	eor	r24, r24

00007074 <__ctype_istrue>:
    7074:	08 95       	ret

00007076 <isspace>:
    7076:	91 11       	cpse	r25, r1
    7078:	fb cf       	rjmp	.-10     	; 0x7070 <__ctype_isfalse>
    707a:	80 32       	cpi	r24, 0x20	; 32
    707c:	19 f0       	breq	.+6      	; 0x7084 <isspace+0xe>
    707e:	89 50       	subi	r24, 0x09	; 9
    7080:	85 50       	subi	r24, 0x05	; 5
    7082:	d0 f7       	brcc	.-12     	; 0x7078 <isspace+0x2>
    7084:	08 95       	ret

00007086 <__prologue_saves__>:
    7086:	2f 92       	push	r2
    7088:	3f 92       	push	r3
    708a:	4f 92       	push	r4
    708c:	5f 92       	push	r5
    708e:	6f 92       	push	r6
    7090:	7f 92       	push	r7
    7092:	8f 92       	push	r8
    7094:	9f 92       	push	r9
    7096:	af 92       	push	r10
    7098:	bf 92       	push	r11
    709a:	cf 92       	push	r12
    709c:	df 92       	push	r13
    709e:	ef 92       	push	r14
    70a0:	ff 92       	push	r15
    70a2:	0f 93       	push	r16
    70a4:	1f 93       	push	r17
    70a6:	cf 93       	push	r28
    70a8:	df 93       	push	r29
    70aa:	cd b7       	in	r28, 0x3d	; 61
    70ac:	de b7       	in	r29, 0x3e	; 62
    70ae:	ca 1b       	sub	r28, r26
    70b0:	db 0b       	sbc	r29, r27
    70b2:	0f b6       	in	r0, 0x3f	; 63
    70b4:	f8 94       	cli
    70b6:	de bf       	out	0x3e, r29	; 62
    70b8:	0f be       	out	0x3f, r0	; 63
    70ba:	cd bf       	out	0x3d, r28	; 61
    70bc:	09 94       	ijmp

000070be <__epilogue_restores__>:
    70be:	2a 88       	ldd	r2, Y+18	; 0x12
    70c0:	39 88       	ldd	r3, Y+17	; 0x11
    70c2:	48 88       	ldd	r4, Y+16	; 0x10
    70c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    70c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    70c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    70ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    70cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    70ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    70d0:	b9 84       	ldd	r11, Y+9	; 0x09
    70d2:	c8 84       	ldd	r12, Y+8	; 0x08
    70d4:	df 80       	ldd	r13, Y+7	; 0x07
    70d6:	ee 80       	ldd	r14, Y+6	; 0x06
    70d8:	fd 80       	ldd	r15, Y+5	; 0x05
    70da:	0c 81       	ldd	r16, Y+4	; 0x04
    70dc:	1b 81       	ldd	r17, Y+3	; 0x03
    70de:	aa 81       	ldd	r26, Y+2	; 0x02
    70e0:	b9 81       	ldd	r27, Y+1	; 0x01
    70e2:	ce 0f       	add	r28, r30
    70e4:	d1 1d       	adc	r29, r1
    70e6:	0f b6       	in	r0, 0x3f	; 63
    70e8:	f8 94       	cli
    70ea:	de bf       	out	0x3e, r29	; 62
    70ec:	0f be       	out	0x3f, r0	; 63
    70ee:	cd bf       	out	0x3d, r28	; 61
    70f0:	ed 01       	movw	r28, r26
    70f2:	08 95       	ret

000070f4 <_exit>:
    70f4:	f8 94       	cli

000070f6 <__stop_program>:
    70f6:	ff cf       	rjmp	.-2      	; 0x70f6 <__stop_program>
